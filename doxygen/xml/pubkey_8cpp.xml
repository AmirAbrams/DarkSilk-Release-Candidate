<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.9.1">
  <compounddef id="pubkey_8cpp" kind="file" language="C++">
    <compoundname>pubkey.cpp</compoundname>
    <includes refid="pubkey_8h" local="yes">pubkey.h</includes>
    <includes refid="secp256k1_8h" local="yes">secp256k1.h</includes>
    <includes refid="secp256k1__recovery_8h" local="yes">secp256k1_recovery.h</includes>
    <incdepgraph>
      <node id="42193">
        <label>boost/thread/mutex.hpp</label>
      </node>
      <node id="42185">
        <label>limits</label>
      </node>
      <node id="42202">
        <label>crypto/sha256.h</label>
        <link refid="sha256_8h"/>
        <childnode refid="42178" relation="include">
        </childnode>
        <childnode refid="42191" relation="include">
        </childnode>
      </node>
      <node id="42203">
        <label>crypto/argon2/blake2/blake2.h</label>
        <link refid="blake2_8h"/>
        <childnode refid="42204" relation="include">
        </childnode>
        <childnode refid="42178" relation="include">
        </childnode>
        <childnode refid="42195" relation="include">
        </childnode>
      </node>
      <node id="42188">
        <label>boost/tuple/tuple.hpp</label>
      </node>
      <node id="42175">
        <label>assert.h</label>
      </node>
      <node id="42197">
        <label>version.h</label>
        <link refid="version_8h"/>
        <childnode refid="42198" relation="include">
        </childnode>
        <childnode refid="42179" relation="include">
        </childnode>
      </node>
      <node id="42194">
        <label>sys/mman.h</label>
      </node>
      <node id="42191">
        <label>stdlib.h</label>
      </node>
      <node id="42199">
        <label>openssl/sha.h</label>
      </node>
      <node id="42184">
        <label>cassert</label>
      </node>
      <node id="42177">
        <label>stdexcept</label>
      </node>
      <node id="42206">
        <label>secp256k1.h</label>
        <link refid="secp256k1_8h"/>
        <childnode refid="42204" relation="include">
        </childnode>
      </node>
      <node id="42179">
        <label>string</label>
      </node>
      <node id="42182">
        <label>map</label>
      </node>
      <node id="42204">
        <label>stddef.h</label>
      </node>
      <node id="42181">
        <label>serialize.h</label>
        <link refid="serialize_8h"/>
        <childnode refid="42179" relation="include">
        </childnode>
        <childnode refid="42180" relation="include">
        </childnode>
        <childnode refid="42182" relation="include">
        </childnode>
        <childnode refid="42183" relation="include">
        </childnode>
        <childnode refid="42184" relation="include">
        </childnode>
        <childnode refid="42185" relation="include">
        </childnode>
        <childnode refid="42178" relation="include">
        </childnode>
        <childnode refid="42176" relation="include">
        </childnode>
        <childnode refid="42186" relation="include">
        </childnode>
        <childnode refid="42187" relation="include">
        </childnode>
        <childnode refid="42188" relation="include">
        </childnode>
        <childnode refid="42189" relation="include">
        </childnode>
        <childnode refid="42197" relation="include">
        </childnode>
      </node>
      <node id="42195">
        <label>limits.h</label>
      </node>
      <node id="42171">
        <label>/home/dev/ds-160209/src/pubkey.cpp</label>
        <link refid="pubkey.cpp"/>
        <childnode refid="42172" relation="include">
        </childnode>
        <childnode refid="42206" relation="include">
        </childnode>
        <childnode refid="42207" relation="include">
        </childnode>
      </node>
      <node id="42173">
        <label>hash.h</label>
        <link refid="hash_8h"/>
        <childnode refid="42174" relation="include">
        </childnode>
        <childnode refid="42181" relation="include">
        </childnode>
        <childnode refid="42199" relation="include">
        </childnode>
        <childnode refid="42200" relation="include">
        </childnode>
        <childnode refid="42201" relation="include">
        </childnode>
        <childnode refid="42202" relation="include">
        </childnode>
        <childnode refid="42203" relation="include">
        </childnode>
        <childnode refid="42205" relation="include">
        </childnode>
        <childnode refid="42180" relation="include">
        </childnode>
      </node>
      <node id="42192">
        <label>string.h</label>
      </node>
      <node id="42198">
        <label>clientversion.h</label>
        <link refid="clientversion_8h"/>
      </node>
      <node id="42186">
        <label>cstdio</label>
      </node>
      <node id="42187">
        <label>boost/type_traits/is_fundamental.hpp</label>
      </node>
      <node id="42172">
        <label>pubkey.h</label>
        <link refid="pubkey_8h"/>
        <childnode refid="42173" relation="include">
        </childnode>
        <childnode refid="42181" relation="include">
        </childnode>
        <childnode refid="42174" relation="include">
        </childnode>
        <childnode refid="42177" relation="include">
        </childnode>
        <childnode refid="42180" relation="include">
        </childnode>
      </node>
      <node id="42196">
        <label>unistd.h</label>
      </node>
      <node id="42180">
        <label>vector</label>
      </node>
      <node id="42200">
        <label>openssl/ripemd.h</label>
      </node>
      <node id="42178">
        <label>stdint.h</label>
        <link refid="stdint_8h"/>
      </node>
      <node id="42205">
        <label>crypto/argon2/argon2.h</label>
        <link refid="argon2_8h"/>
        <childnode refid="42178" relation="include">
        </childnode>
        <childnode refid="42204" relation="include">
        </childnode>
        <childnode refid="42195" relation="include">
        </childnode>
      </node>
      <node id="42174">
        <label>uint256.h</label>
        <link refid="uint256_8h"/>
        <childnode refid="42175" relation="include">
        </childnode>
        <childnode refid="42176" relation="include">
        </childnode>
        <childnode refid="42177" relation="include">
        </childnode>
        <childnode refid="42178" relation="include">
        </childnode>
        <childnode refid="42179" relation="include">
        </childnode>
        <childnode refid="42180" relation="include">
        </childnode>
      </node>
      <node id="42207">
        <label>secp256k1_recovery.h</label>
        <link refid="secp256k1__recovery_8h"/>
        <childnode refid="42206" relation="include">
        </childnode>
      </node>
      <node id="42189">
        <label>allocators.h</label>
        <link refid="allocators_8h"/>
        <childnode refid="42190" relation="include">
        </childnode>
        <childnode refid="42192" relation="include">
        </childnode>
        <childnode refid="42179" relation="include">
        </childnode>
        <childnode refid="42193" relation="include">
        </childnode>
        <childnode refid="42182" relation="include">
        </childnode>
        <childnode refid="42194" relation="include">
        </childnode>
        <childnode refid="42195" relation="include">
        </childnode>
        <childnode refid="42196" relation="include">
        </childnode>
      </node>
      <node id="42183">
        <label>set</label>
      </node>
      <node id="42201">
        <label>crypto/ripemd160.h</label>
        <link refid="ripemd160_8h"/>
        <childnode refid="42178" relation="include">
        </childnode>
        <childnode refid="42191" relation="include">
        </childnode>
      </node>
      <node id="42190">
        <label>cleanse.h</label>
        <link refid="cleanse_8h"/>
        <childnode refid="42191" relation="include">
        </childnode>
      </node>
      <node id="42176">
        <label>cstring</label>
      </node>
    </incdepgraph>
      <sectiondef kind="func">
      <memberdef kind="function" id="pubkey_8cpp_1acd68762de13ffb2c909fcf12acfea0fd" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>static int ecdsa_signature_parse_der_lax</definition>
        <argsstring>(const secp256k1_context *ctx, secp256k1_ecdsa_signature *sig, const unsigned char *input, size_t inputlen)</argsstring>
        <name>ecdsa_signature_parse_der_lax</name>
        <param>
          <type>const <ref refid="secp256k1_8h_1a282ec9e6dfec8c35955c3eb2f7476e5e" kindref="member">secp256k1_context</ref> *</type>
          <declname>ctx</declname>
        </param>
        <param>
          <type><ref refid="structsecp256k1__ecdsa__signature" kindref="compound">secp256k1_ecdsa_signature</ref> *</type>
          <declname>sig</declname>
        </param>
        <param>
          <type>const unsigned char *</type>
          <declname>input</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>inputlen</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function is taken from the libsecp256k1 distribution and implements DER parsing for ECDSA signatures, while supporting an arbitrary subset of format violations.</para><para>Supported violations include negative integers, excessive padding, garbage at the end, and overly long length descriptors. This is safe to use in Bitcoin because since the activation of BIP66, signatures are verified to be strict DER before being passed to this module, and we know it supports all violations present in the blockchain before that point. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/pubkey.cpp" line="26" column="1" bodyfile="/home/dev/ds-160209/src/pubkey.cpp" bodystart="26" bodyend="165"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">//<sp/>Copyright<sp/>(c)<sp/>2009-2016<sp/>The<sp/>Bitcoin<sp/>developers</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Distributed<sp/>under<sp/>the<sp/>MIT/X11<sp/>software<sp/>license,<sp/>see<sp/>the<sp/>accompanying</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="comment">//<sp/>file<sp/>COPYING<sp/>or<sp/>http://www.opensource.org/licenses/mit-license.php.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="pubkey_8h" kindref="compound">pubkey.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="secp256k1_8h" kindref="compound">secp256k1.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="secp256k1__recovery_8h" kindref="compound">secp256k1_recovery.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="keyword">namespace</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal">{</highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Global<sp/>secp256k1_context<sp/>object<sp/>used<sp/>for<sp/>verification.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"><ref refid="structsecp256k1__context__struct" kindref="compound">secp256k1_context</ref>*<sp/>secp256k1_context_verify<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="14"><highlight class="normal">}</highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ecdsa_signature_parse_der_lax(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structsecp256k1__context__struct" kindref="compound">secp256k1_context</ref>*<sp/>ctx,<sp/><ref refid="structsecp256k1__ecdsa__signature" kindref="compound">secp256k1_ecdsa_signature</ref>*<sp/>sig,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*input,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>inputlen)<sp/>{</highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>rpos,<sp/>rlen,<sp/>spos,<sp/>slen;</highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>pos<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>lenbyte;</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>tmpsig[64]<sp/>=<sp/>{0};</highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>overflow<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Hack<sp/>to<sp/>initialize<sp/>sig<sp/>with<sp/>a<sp/>correctly-parsed<sp/>but<sp/>invalid<sp/>signature.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="secp256k1_8h_1a2aff2802eca3d15ec54298e879579897" kindref="member">secp256k1_ecdsa_signature_parse_compact</ref>(ctx,<sp/>sig,<sp/>tmpsig);</highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Sequence<sp/>tag<sp/>byte<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(pos<sp/>==<sp/>inputlen<sp/>||<sp/>input[pos]<sp/>!=<sp/>0x30)<sp/>{</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/>pos++;</highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Sequence<sp/>length<sp/>bytes<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(pos<sp/>==<sp/>inputlen)<sp/>{</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/>lenbyte<sp/>=<sp/>input[pos++];</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(lenbyte<sp/>&amp;<sp/>0x80)<sp/>{</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lenbyte<sp/>-=<sp/>0x80;</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(pos<sp/>+<sp/>lenbyte<sp/>&gt;<sp/>inputlen)<sp/>{</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pos<sp/>+=<sp/>lenbyte;</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Integer<sp/>tag<sp/>byte<sp/>for<sp/>R<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(pos<sp/>==<sp/>inputlen<sp/>||<sp/>input[pos]<sp/>!=<sp/>0x02)<sp/>{</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/>pos++;</highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Integer<sp/>length<sp/>for<sp/>R<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(pos<sp/>==<sp/>inputlen)<sp/>{</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/>lenbyte<sp/>=<sp/>input[pos++];</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(lenbyte<sp/>&amp;<sp/>0x80)<sp/>{</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lenbyte<sp/>-=<sp/>0x80;</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(pos<sp/>+<sp/>lenbyte<sp/>&gt;<sp/>inputlen)<sp/>{</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(lenbyte<sp/>&gt;<sp/>0<sp/>&amp;&amp;<sp/>input[pos]<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pos++;</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lenbyte--;</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(lenbyte<sp/>&gt;=<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">))<sp/>{</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rlen<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(lenbyte<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rlen<sp/>=<sp/>(rlen<sp/>&lt;&lt;<sp/>8)<sp/>+<sp/>input[pos];</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pos++;</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lenbyte--;</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rlen<sp/>=<sp/>lenbyte;</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(rlen<sp/>&gt;<sp/>inputlen<sp/>-<sp/>pos)<sp/>{</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/>rpos<sp/>=<sp/>pos;</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/>pos<sp/>+=<sp/>rlen;</highlight></codeline>
<codeline lineno="92"><highlight class="normal"></highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Integer<sp/>tag<sp/>byte<sp/>for<sp/>S<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(pos<sp/>==<sp/>inputlen<sp/>||<sp/>input[pos]<sp/>!=<sp/>0x02)<sp/>{</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/>pos++;</highlight></codeline>
<codeline lineno="98"><highlight class="normal"></highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Integer<sp/>length<sp/>for<sp/>S<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(pos<sp/>==<sp/>inputlen)<sp/>{</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/>lenbyte<sp/>=<sp/>input[pos++];</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(lenbyte<sp/>&amp;<sp/>0x80)<sp/>{</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lenbyte<sp/>-=<sp/>0x80;</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(pos<sp/>+<sp/>lenbyte<sp/>&gt;<sp/>inputlen)<sp/>{</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(lenbyte<sp/>&gt;<sp/>0<sp/>&amp;&amp;<sp/>input[pos]<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pos++;</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lenbyte--;</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(lenbyte<sp/>&gt;=<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">))<sp/>{</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>slen<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(lenbyte<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>slen<sp/>=<sp/>(slen<sp/>&lt;&lt;<sp/>8)<sp/>+<sp/>input[pos];</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pos++;</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lenbyte--;</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>slen<sp/>=<sp/>lenbyte;</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(slen<sp/>&gt;<sp/>inputlen<sp/>-<sp/>pos)<sp/>{</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/>spos<sp/>=<sp/>pos;</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/>pos<sp/>+=<sp/>slen;</highlight></codeline>
<codeline lineno="130"><highlight class="normal"></highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Ignore<sp/>leading<sp/>zeroes<sp/>in<sp/>R<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(rlen<sp/>&gt;<sp/>0<sp/>&amp;&amp;<sp/>input[rpos]<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rlen--;</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rpos++;</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Copy<sp/>R<sp/>value<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(rlen<sp/>&gt;<sp/>32)<sp/>{</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>overflow<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>memcpy(tmpsig<sp/>+<sp/>32<sp/>-<sp/>rlen,<sp/>input<sp/>+<sp/>rpos,<sp/>rlen);</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="142"><highlight class="normal"></highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Ignore<sp/>leading<sp/>zeroes<sp/>in<sp/>S<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(slen<sp/>&gt;<sp/>0<sp/>&amp;&amp;<sp/>input[spos]<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>slen--;</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>spos++;</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Copy<sp/>S<sp/>value<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(slen<sp/>&gt;<sp/>32)<sp/>{</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>overflow<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>memcpy(tmpsig<sp/>+<sp/>64<sp/>-<sp/>slen,<sp/>input<sp/>+<sp/>spos,<sp/>slen);</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="154"><highlight class="normal"></highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!overflow)<sp/>{</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>overflow<sp/>=<sp/>!<ref refid="secp256k1_8h_1a2aff2802eca3d15ec54298e879579897" kindref="member">secp256k1_ecdsa_signature_parse_compact</ref>(ctx,<sp/>sig,<sp/>tmpsig);</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(overflow)<sp/>{</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Overwrite<sp/>the<sp/>result<sp/>again<sp/>with<sp/>a<sp/>correctly-parsed<sp/>but<sp/>invalid</highlight></codeline>
<codeline lineno="160"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>signature<sp/>if<sp/>parsing<sp/>failed.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>memset(tmpsig,<sp/>0,<sp/>64);</highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="secp256k1_8h_1a2aff2802eca3d15ec54298e879579897" kindref="member">secp256k1_ecdsa_signature_parse_compact</ref>(ctx,<sp/>sig,<sp/>tmpsig);</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="165"><highlight class="normal">}</highlight></codeline>
<codeline lineno="166"><highlight class="normal"></highlight></codeline>
<codeline lineno="167" refid="class_c_pub_key_1ab4047c7ce31b72591d8108a2563cd21b" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="class_c_pub_key_1ab4047c7ce31b72591d8108a2563cd21b" kindref="member">CPubKey::Verify</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classuint256" kindref="compound">uint256</ref><sp/>&amp;<ref refid="cache_8cc_1a11ecb029164e055f28f4123ce3748862" kindref="member">hash</ref>,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;unsigned<sp/>char&gt;&amp;<sp/>vchSig)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="class_c_pub_key_1aad6f369d7972f2244466ca6db900c2a4" kindref="member">IsValid</ref>())</highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structsecp256k1__pubkey" kindref="compound">secp256k1_pubkey</ref><sp/>pubkey;</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structsecp256k1__ecdsa__signature" kindref="compound">secp256k1_ecdsa_signature</ref><sp/>sig;</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="secp256k1_8h_1a4e5dc8952c9a7e791376505ef2023ca1" kindref="member">secp256k1_ec_pubkey_parse</ref>(secp256k1_context_verify,<sp/>&amp;pubkey,<sp/>&amp;(*</highlight><highlight class="keyword">this</highlight><highlight class="normal">)[0],<sp/><ref refid="class_c_pub_key_1a9d7129b65b6dee792b4f3923cd64ed59" kindref="member">size</ref>()))<sp/>{</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(vchSig.size()<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!ecdsa_signature_parse_der_lax(secp256k1_context_verify,<sp/>&amp;sig,<sp/>&amp;vchSig[0],<sp/>vchSig.size()))<sp/>{</highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>libsecp256k1&apos;s<sp/>ECDSA<sp/>verification<sp/>requires<sp/>lower-S<sp/>signatures,<sp/>which<sp/>have</highlight></codeline>
<codeline lineno="182"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>not<sp/>historically<sp/>been<sp/>enforced<sp/>in<sp/>Bitcoin,<sp/>so<sp/>normalize<sp/>them<sp/>first.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="secp256k1_8h_1a93ec36a19229f08acc5ff1ca613ab3a1" kindref="member">secp256k1_ecdsa_signature_normalize</ref>(secp256k1_context_verify,<sp/>&amp;sig,<sp/>&amp;sig);</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="secp256k1_8h_1a41065390f9039c4140ec04999724987d" kindref="member">secp256k1_ecdsa_verify</ref>(secp256k1_context_verify,<sp/>&amp;sig,<sp/>hash.<ref refid="classbase__uint_1aaa32054bf4e8fbb31d54a75f6065174d" kindref="member">begin</ref>(),<sp/>&amp;pubkey);</highlight></codeline>
<codeline lineno="185"><highlight class="normal">}</highlight></codeline>
<codeline lineno="186"><highlight class="normal"></highlight></codeline>
<codeline lineno="187" refid="class_c_pub_key_1a169505e735a02db385486b0affeb565c" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="class_c_pub_key_1a169505e735a02db385486b0affeb565c" kindref="member">CPubKey::RecoverCompact</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classuint256" kindref="compound">uint256</ref><sp/>&amp;<ref refid="cache_8cc_1a11ecb029164e055f28f4123ce3748862" kindref="member">hash</ref>,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;unsigned<sp/>char&gt;&amp;<sp/>vchSig)<sp/>{</highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(vchSig.size()<sp/>!=<sp/>65)</highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>recid<sp/>=<sp/>(vchSig[0]<sp/>-<sp/>27)<sp/>&amp;<sp/>3;</highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>fComp<sp/>=<sp/>((vchSig[0]<sp/>-<sp/>27)<sp/>&amp;<sp/>4)<sp/>!=<sp/>0;</highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structsecp256k1__pubkey" kindref="compound">secp256k1_pubkey</ref><sp/>pubkey;</highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structsecp256k1__ecdsa__recoverable__signature" kindref="compound">secp256k1_ecdsa_recoverable_signature</ref><sp/>sig;</highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="secp256k1__recovery_8h_1a6699b45dc75be70f028ac7d8ffaba46e" kindref="member">secp256k1_ecdsa_recoverable_signature_parse_compact</ref>(secp256k1_context_verify,<sp/>&amp;sig,<sp/>&amp;vchSig[1],<sp/>recid))<sp/>{</highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="secp256k1__recovery_8h_1a7e156c6f4be24b07f4a563210dcb1a2e" kindref="member">secp256k1_ecdsa_recover</ref>(secp256k1_context_verify,<sp/>&amp;pubkey,<sp/>&amp;sig,<sp/>hash.<ref refid="classbase__uint_1aaa32054bf4e8fbb31d54a75f6065174d" kindref="member">begin</ref>()))<sp/>{</highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>pub[65];</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>publen<sp/>=<sp/>65;</highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="secp256k1_8h_1a34977bf00322e510e881160c421836d7" kindref="member">secp256k1_ec_pubkey_serialize</ref>(secp256k1_context_verify,<sp/>pub,<sp/>&amp;publen,<sp/>&amp;pubkey,<sp/>fComp<sp/>?<sp/><ref refid="secp256k1_8h_1a7b8f642c65e8b5c81fa4421b7c42ab57" kindref="member">SECP256K1_EC_COMPRESSED</ref><sp/>:<sp/><ref refid="secp256k1_8h_1ab8e25dc58843e83926f95795f9e8a6e2" kindref="member">SECP256K1_EC_UNCOMPRESSED</ref>);</highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_c_pub_key_1af59bc1d3be119c1f8b49d3c1e2c0797b" kindref="member">Set</ref>(pub,<sp/>pub<sp/>+<sp/>publen);</highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="205"><highlight class="normal">}</highlight></codeline>
<codeline lineno="206"><highlight class="normal"></highlight></codeline>
<codeline lineno="207" refid="class_c_pub_key_1a2533ec5fc9a1c3d2ef39d0faa3ad6cdd" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="class_c_pub_key_1a2533ec5fc9a1c3d2ef39d0faa3ad6cdd" kindref="member">CPubKey::IsFullyValid</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="class_c_pub_key_1aad6f369d7972f2244466ca6db900c2a4" kindref="member">IsValid</ref>())</highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structsecp256k1__pubkey" kindref="compound">secp256k1_pubkey</ref><sp/>pubkey;</highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="secp256k1_8h_1a4e5dc8952c9a7e791376505ef2023ca1" kindref="member">secp256k1_ec_pubkey_parse</ref>(secp256k1_context_verify,<sp/>&amp;pubkey,<sp/>&amp;(*</highlight><highlight class="keyword">this</highlight><highlight class="normal">)[0],<sp/><ref refid="class_c_pub_key_1a9d7129b65b6dee792b4f3923cd64ed59" kindref="member">size</ref>());</highlight></codeline>
<codeline lineno="212"><highlight class="normal">}</highlight></codeline>
<codeline lineno="213"><highlight class="normal"></highlight></codeline>
<codeline lineno="214" refid="class_c_pub_key_1a572689418fecf47b300a11519bc3da36" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="class_c_pub_key_1a572689418fecf47b300a11519bc3da36" kindref="member">CPubKey::Decompress</ref>()<sp/>{</highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="class_c_pub_key_1aad6f369d7972f2244466ca6db900c2a4" kindref="member">IsValid</ref>())</highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structsecp256k1__pubkey" kindref="compound">secp256k1_pubkey</ref><sp/>pubkey;</highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="secp256k1_8h_1a4e5dc8952c9a7e791376505ef2023ca1" kindref="member">secp256k1_ec_pubkey_parse</ref>(secp256k1_context_verify,<sp/>&amp;pubkey,<sp/>&amp;(*</highlight><highlight class="keyword">this</highlight><highlight class="normal">)[0],<sp/><ref refid="class_c_pub_key_1a9d7129b65b6dee792b4f3923cd64ed59" kindref="member">size</ref>()))<sp/>{</highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>pub[65];</highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>publen<sp/>=<sp/>65;</highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="secp256k1_8h_1a34977bf00322e510e881160c421836d7" kindref="member">secp256k1_ec_pubkey_serialize</ref>(secp256k1_context_verify,<sp/>pub,<sp/>&amp;publen,<sp/>&amp;pubkey,<sp/><ref refid="secp256k1_8h_1ab8e25dc58843e83926f95795f9e8a6e2" kindref="member">SECP256K1_EC_UNCOMPRESSED</ref>);</highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_c_pub_key_1af59bc1d3be119c1f8b49d3c1e2c0797b" kindref="member">Set</ref>(pub,<sp/>pub<sp/>+<sp/>publen);</highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="226"><highlight class="normal">}</highlight></codeline>
<codeline lineno="227"><highlight class="normal"></highlight></codeline>
<codeline lineno="228" refid="class_c_pub_key_1a182298237bb189abfe006e2ff3350acc" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="class_c_pub_key_1a182298237bb189abfe006e2ff3350acc" kindref="member">CPubKey::Derive</ref>(<ref refid="class_c_pub_key" kindref="compound">CPubKey</ref>&amp;<sp/>pubkeyChild,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>ccChild[32],<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nChild,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>cc[32])</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(<ref refid="class_c_pub_key_1aad6f369d7972f2244466ca6db900c2a4" kindref="member">IsValid</ref>());</highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/><sp/><sp/>assert((nChild<sp/>&gt;&gt;<sp/>31)<sp/>==<sp/>0);</highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(<ref refid="class_c_pub_key_1add9987e0d25aff11181f5ad70413994b" kindref="member">begin</ref>()<sp/>+<sp/>33<sp/>==<sp/><ref refid="class_c_pub_key_1aa559d2a4f2cbdec84c02a4adc18fa657" kindref="member">end</ref>());</highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>out[64];</highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="hash_8cpp_1af81a4d88d7eaba27c63313aec22b01a4" kindref="member">BIP32Hash</ref>(cc,<sp/>nChild,<sp/>*<ref refid="class_c_pub_key_1add9987e0d25aff11181f5ad70413994b" kindref="member">begin</ref>(),<sp/><ref refid="class_c_pub_key_1add9987e0d25aff11181f5ad70413994b" kindref="member">begin</ref>()+1,<sp/>out);</highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/><sp/><sp/>memcpy(ccChild,<sp/>out+32,<sp/>32);</highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structsecp256k1__pubkey" kindref="compound">secp256k1_pubkey</ref><sp/>pubkey;</highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="secp256k1_8h_1a4e5dc8952c9a7e791376505ef2023ca1" kindref="member">secp256k1_ec_pubkey_parse</ref>(secp256k1_context_verify,<sp/>&amp;pubkey,<sp/>&amp;(*</highlight><highlight class="keyword">this</highlight><highlight class="normal">)[0],<sp/><ref refid="class_c_pub_key_1a9d7129b65b6dee792b4f3923cd64ed59" kindref="member">size</ref>()))<sp/>{</highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="secp256k1_8h_1a2381cde2a0ee44d90dcfa77e28b5eb79" kindref="member">secp256k1_ec_pubkey_tweak_add</ref>(secp256k1_context_verify,<sp/>&amp;pubkey,<sp/>out))<sp/>{</highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>pub[33];</highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>publen<sp/>=<sp/>33;</highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="secp256k1_8h_1a34977bf00322e510e881160c421836d7" kindref="member">secp256k1_ec_pubkey_serialize</ref>(secp256k1_context_verify,<sp/>pub,<sp/>&amp;publen,<sp/>&amp;pubkey,<sp/><ref refid="secp256k1_8h_1a7b8f642c65e8b5c81fa4421b7c42ab57" kindref="member">SECP256K1_EC_COMPRESSED</ref>);</highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/><sp/><sp/>pubkeyChild.<ref refid="class_c_pub_key_1af59bc1d3be119c1f8b49d3c1e2c0797b" kindref="member">Set</ref>(pub,<sp/>pub<sp/>+<sp/>publen);</highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="247"><highlight class="normal">}</highlight></codeline>
<codeline lineno="248"><highlight class="normal"></highlight></codeline>
<codeline lineno="249" refid="struct_c_ext_pub_key_1af197553c91c690fc436421fe00d55f8e" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="struct_c_ext_pub_key_1af197553c91c690fc436421fe00d55f8e" kindref="member">CExtPubKey::Encode</ref>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>code[74])</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/><sp/><sp/>code[0]<sp/>=<sp/><ref refid="struct_c_ext_pub_key_1a58a0724855654eab688cdb00738e3dba" kindref="member">nDepth</ref>;</highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/><sp/><sp/>memcpy(code+1,<sp/><ref refid="struct_c_ext_pub_key_1a57101a84d16d7897bcec224e488143d9" kindref="member">vchFingerprint</ref>,<sp/>4);</highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/><sp/><sp/>code[5]<sp/>=<sp/>(<ref refid="struct_c_ext_pub_key_1af816bc2798e9d9aaa94f56af4775d9bf" kindref="member">nChild</ref><sp/>&gt;&gt;<sp/>24)<sp/>&amp;<sp/>0xFF;<sp/>code[6]<sp/>=<sp/>(<ref refid="struct_c_ext_pub_key_1af816bc2798e9d9aaa94f56af4775d9bf" kindref="member">nChild</ref><sp/>&gt;&gt;<sp/>16)<sp/>&amp;<sp/>0xFF;</highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/><sp/><sp/>code[7]<sp/>=<sp/>(<ref refid="struct_c_ext_pub_key_1af816bc2798e9d9aaa94f56af4775d9bf" kindref="member">nChild</ref><sp/>&gt;&gt;<sp/><sp/>8)<sp/>&amp;<sp/>0xFF;<sp/>code[8]<sp/>=<sp/>(<ref refid="struct_c_ext_pub_key_1af816bc2798e9d9aaa94f56af4775d9bf" kindref="member">nChild</ref><sp/>&gt;&gt;<sp/><sp/>0)<sp/>&amp;<sp/>0xFF;</highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/><sp/><sp/>memcpy(code+9,<sp/><ref refid="struct_c_ext_pub_key_1a208836888dcc295ca1510de459ca1fc7" kindref="member">vchChainCode</ref>,<sp/>32);</highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(<ref refid="struct_c_ext_pub_key_1ab18c8520919d20bbfd068565ae566ea8" kindref="member">pubkey</ref>.<ref refid="class_c_pub_key_1a9d7129b65b6dee792b4f3923cd64ed59" kindref="member">size</ref>()<sp/>==<sp/>33);</highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/><sp/><sp/>memcpy(code+41,<sp/><ref refid="struct_c_ext_pub_key_1ab18c8520919d20bbfd068565ae566ea8" kindref="member">pubkey</ref>.<ref refid="class_c_pub_key_1add9987e0d25aff11181f5ad70413994b" kindref="member">begin</ref>(),<sp/>33);</highlight></codeline>
<codeline lineno="257"><highlight class="normal">}</highlight></codeline>
<codeline lineno="258"><highlight class="normal"></highlight></codeline>
<codeline lineno="259" refid="struct_c_ext_pub_key_1aa3ca44410ecfa765962d3b97aef61ab5" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="struct_c_ext_pub_key_1aa3ca44410ecfa765962d3b97aef61ab5" kindref="member">CExtPubKey::Decode</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>code[74])<sp/>{</highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_c_ext_pub_key_1a58a0724855654eab688cdb00738e3dba" kindref="member">nDepth</ref><sp/>=<sp/>code[0];</highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/><sp/><sp/>memcpy(<ref refid="struct_c_ext_pub_key_1a57101a84d16d7897bcec224e488143d9" kindref="member">vchFingerprint</ref>,<sp/>code+1,<sp/>4);</highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_c_ext_pub_key_1af816bc2798e9d9aaa94f56af4775d9bf" kindref="member">nChild</ref><sp/>=<sp/>(code[5]<sp/>&lt;&lt;<sp/>24)<sp/>|<sp/>(code[6]<sp/>&lt;&lt;<sp/>16)<sp/>|<sp/>(code[7]<sp/>&lt;&lt;<sp/>8)<sp/>|<sp/>code[8];</highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/><sp/><sp/>memcpy(<ref refid="struct_c_ext_pub_key_1a208836888dcc295ca1510de459ca1fc7" kindref="member">vchChainCode</ref>,<sp/>code+9,<sp/>32);</highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_c_ext_pub_key_1ab18c8520919d20bbfd068565ae566ea8" kindref="member">pubkey</ref>.<ref refid="class_c_pub_key_1af59bc1d3be119c1f8b49d3c1e2c0797b" kindref="member">Set</ref>(code+41,<sp/>code+74);</highlight></codeline>
<codeline lineno="265"><highlight class="normal">}</highlight></codeline>
<codeline lineno="266"><highlight class="normal"></highlight></codeline>
<codeline lineno="267" refid="struct_c_ext_pub_key_1a404798f7d800ffb539cf97431025597f" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="struct_c_ext_pub_key_1a404798f7d800ffb539cf97431025597f" kindref="member">CExtPubKey::Derive</ref>(<ref refid="struct_c_ext_pub_key" kindref="compound">CExtPubKey</ref><sp/>&amp;out,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nChild)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/><sp/><sp/>out.<ref refid="struct_c_ext_pub_key_1a58a0724855654eab688cdb00738e3dba" kindref="member">nDepth</ref><sp/>=<sp/><ref refid="struct_c_ext_pub_key_1a58a0724855654eab688cdb00738e3dba" kindref="member">nDepth</ref><sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_c_key_i_d" kindref="compound">CKeyID</ref><sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal"><sp/>=<sp/><ref refid="struct_c_ext_pub_key_1ab18c8520919d20bbfd068565ae566ea8" kindref="member">pubkey</ref>.<ref refid="class_c_pub_key_1a9c1908fef34fd9e1c4b5e0ffd5d3834e" kindref="member">GetID</ref>();</highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/><sp/><sp/>memcpy(&amp;out.<ref refid="struct_c_ext_pub_key_1a57101a84d16d7897bcec224e488143d9" kindref="member">vchFingerprint</ref>[0],<sp/>&amp;</highlight><highlight class="keywordtype">id</highlight><highlight class="normal">,<sp/>4);</highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/><sp/><sp/>out.<ref refid="struct_c_ext_pub_key_1af816bc2798e9d9aaa94f56af4775d9bf" kindref="member">nChild</ref><sp/>=<sp/><ref refid="struct_c_ext_pub_key_1af816bc2798e9d9aaa94f56af4775d9bf" kindref="member">nChild</ref>;</highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="struct_c_ext_pub_key_1ab18c8520919d20bbfd068565ae566ea8" kindref="member">pubkey</ref>.<ref refid="class_c_pub_key_1a182298237bb189abfe006e2ff3350acc" kindref="member">Derive</ref>(out.<ref refid="struct_c_ext_pub_key_1ab18c8520919d20bbfd068565ae566ea8" kindref="member">pubkey</ref>,<sp/>out.<ref refid="struct_c_ext_pub_key_1a208836888dcc295ca1510de459ca1fc7" kindref="member">vchChainCode</ref>,<sp/>nChild,<sp/><ref refid="struct_c_ext_pub_key_1a208836888dcc295ca1510de459ca1fc7" kindref="member">vchChainCode</ref>);</highlight></codeline>
<codeline lineno="273"><highlight class="normal">}</highlight></codeline>
<codeline lineno="274"><highlight class="normal"></highlight></codeline>
<codeline lineno="275" refid="class_c_pub_key_1a4ada230ef593456ef9088c28fd5ca34e" refkind="member"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>static<sp/>*/</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="class_c_pub_key_1a4ada230ef593456ef9088c28fd5ca34e" kindref="member">CPubKey::CheckLowS</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;unsigned<sp/>char&gt;&amp;<sp/>vchSig)<sp/>{</highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structsecp256k1__ecdsa__signature" kindref="compound">secp256k1_ecdsa_signature</ref><sp/>sig;</highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!ecdsa_signature_parse_der_lax(secp256k1_context_verify,<sp/>&amp;sig,<sp/>&amp;vchSig[0],<sp/>vchSig.size()))<sp/>{</highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(!<ref refid="secp256k1_8h_1a93ec36a19229f08acc5ff1ca613ab3a1" kindref="member">secp256k1_ecdsa_signature_normalize</ref>(secp256k1_context_verify,<sp/>NULL,<sp/>&amp;sig));</highlight></codeline>
<codeline lineno="281"><highlight class="normal">}</highlight></codeline>
<codeline lineno="282"><highlight class="normal"></highlight></codeline>
<codeline lineno="283"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>static<sp/>*/</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ECCVerifyHandle::refcount<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="284"><highlight class="normal"></highlight></codeline>
<codeline lineno="285" refid="class_e_c_c_verify_handle_1a01404b41eee891c1dea4b58db02e56fb" refkind="member"><highlight class="normal"><ref refid="class_e_c_c_verify_handle_1a01404b41eee891c1dea4b58db02e56fb" kindref="member">ECCVerifyHandle::ECCVerifyHandle</ref>()</highlight></codeline>
<codeline lineno="286"><highlight class="normal">{</highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(refcount<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assert(secp256k1_context_verify<sp/>==<sp/>NULL);</highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>secp256k1_context_verify<sp/>=<sp/><ref refid="secp256k1_8h_1a769d478f352afbb55200e33970533a3c" kindref="member">secp256k1_context_create</ref>(<ref refid="secp256k1_8h_1add20a6c320e247ca7bd524cbc4259d64" kindref="member">SECP256K1_CONTEXT_VERIFY</ref>);</highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assert(secp256k1_context_verify<sp/>!=<sp/>NULL);</highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/><sp/><sp/>refcount++;</highlight></codeline>
<codeline lineno="293"><highlight class="normal">}</highlight></codeline>
<codeline lineno="294"><highlight class="normal"></highlight></codeline>
<codeline lineno="295" refid="class_e_c_c_verify_handle_1a17dea6c87a0f825f0f24a06a20e2baf9" refkind="member"><highlight class="normal"><ref refid="class_e_c_c_verify_handle_1a17dea6c87a0f825f0f24a06a20e2baf9" kindref="member">ECCVerifyHandle::~ECCVerifyHandle</ref>()</highlight></codeline>
<codeline lineno="296"><highlight class="normal">{</highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/><sp/><sp/>refcount--;</highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(refcount<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="299"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assert(secp256k1_context_verify<sp/>!=<sp/>NULL);</highlight></codeline>
<codeline lineno="300"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="secp256k1_8h_1af8569fb9aa73c0acf46afce4df662950" kindref="member">secp256k1_context_destroy</ref>(secp256k1_context_verify);</highlight></codeline>
<codeline lineno="301"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>secp256k1_context_verify<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="302"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="303"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="/home/dev/ds-160209/src/pubkey.cpp"/>
  </compounddef>
</doxygen>
