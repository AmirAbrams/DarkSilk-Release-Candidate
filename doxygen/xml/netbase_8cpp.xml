<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.9.1">
  <compounddef id="netbase_8cpp" kind="file" language="C++">
    <compoundname>netbase.cpp</compoundname>
    <includes refid="netbase_8h" local="yes">netbase.h</includes>
    <includes refid="util_8h" local="yes">util.h</includes>
    <includes refid="sync_8h" local="yes">sync.h</includes>
    <includes refid="hash_8h" local="yes">hash.h</includes>
    <includes local="no">sys/fcntl.h</includes>
    <includes local="no">boost/algorithm/string/case_conv.hpp</includes>
    <includes local="no">boost/algorithm/string/predicate.hpp</includes>
    <incdepgraph>
      <node id="11946">
        <label>list</label>
      </node>
      <node id="11922">
        <label>boost/thread/mutex.hpp</label>
      </node>
      <node id="11933">
        <label>netinet/in.h</label>
      </node>
      <node id="11945">
        <label>amount.h</label>
        <link refid="amount_8h"/>
        <childnode refid="11908" relation="include">
        </childnode>
        <childnode refid="11920" relation="include">
        </childnode>
        <childnode refid="11906" relation="include">
        </childnode>
      </node>
      <node id="11934">
        <label>arpa/inet.h</label>
      </node>
      <node id="11961">
        <label>boost/thread/condition_variable.hpp</label>
      </node>
      <node id="11912">
        <label>limits</label>
      </node>
      <node id="11970">
        <label>crypto/sha256.h</label>
        <link refid="sha256_8h"/>
        <childnode refid="11913" relation="include">
        </childnode>
        <childnode refid="11920" relation="include">
        </childnode>
      </node>
      <node id="11971">
        <label>crypto/argon2/blake2/blake2.h</label>
        <link refid="blake2_8h"/>
        <childnode refid="11972" relation="include">
        </childnode>
        <childnode refid="11913" relation="include">
        </childnode>
        <childnode refid="11924" relation="include">
        </childnode>
      </node>
      <node id="11957">
        <label>openssl/rand.h</label>
      </node>
      <node id="11966">
        <label>assert.h</label>
      </node>
      <node id="11917">
        <label>boost/tuple/tuple.hpp</label>
      </node>
      <node id="11932">
        <label>net/if.h</label>
      </node>
      <node id="11963">
        <label>boost/thread/recursive_mutex.hpp</label>
      </node>
      <node id="11926">
        <label>version.h</label>
        <link refid="version_8h"/>
        <childnode refid="11927" relation="include">
        </childnode>
        <childnode refid="11906" relation="include">
        </childnode>
      </node>
      <node id="11923">
        <label>sys/mman.h</label>
      </node>
      <node id="11920">
        <label>stdlib.h</label>
      </node>
      <node id="11956">
        <label>openssl/crypto.h</label>
      </node>
      <node id="11928">
        <label>compat.h</label>
        <link refid="compat_8h"/>
        <childnode refid="11929" relation="include">
        </childnode>
        <childnode refid="11923" relation="include">
        </childnode>
        <childnode refid="11930" relation="include">
        </childnode>
        <childnode refid="11931" relation="include">
        </childnode>
        <childnode refid="11932" relation="include">
        </childnode>
        <childnode refid="11933" relation="include">
        </childnode>
        <childnode refid="11934" relation="include">
        </childnode>
        <childnode refid="11935" relation="include">
        </childnode>
        <childnode refid="11924" relation="include">
        </childnode>
        <childnode refid="11936" relation="include">
        </childnode>
        <childnode refid="11925" relation="include">
        </childnode>
        <childnode refid="11937" relation="include">
        </childnode>
      </node>
      <node id="11952">
        <label>boost/date_time/posix_time/posix_time_types.hpp</label>
      </node>
      <node id="11967">
        <label>openssl/sha.h</label>
      </node>
      <node id="11937">
        <label>errno.h</label>
      </node>
      <node id="11911">
        <label>cassert</label>
      </node>
      <node id="11944">
        <label>stdexcept</label>
      </node>
      <node id="11938">
        <label>util.h</label>
        <link refid="util_8h"/>
        <childnode refid="11931" relation="include">
        </childnode>
        <childnode refid="11939" relation="include">
        </childnode>
        <childnode refid="11940" relation="include">
        </childnode>
        <childnode refid="11908" relation="include">
        </childnode>
        <childnode refid="11941" relation="include">
        </childnode>
        <childnode refid="11945" relation="include">
        </childnode>
        <childnode refid="11909" relation="include">
        </childnode>
        <childnode refid="11946" relation="include">
        </childnode>
        <childnode refid="11947" relation="include">
        </childnode>
        <childnode refid="11907" relation="include">
        </childnode>
        <childnode refid="11906" relation="include">
        </childnode>
        <childnode refid="11948" relation="include">
        </childnode>
        <childnode refid="11949" relation="include">
        </childnode>
        <childnode refid="11950" relation="include">
        </childnode>
        <childnode refid="11951" relation="include">
        </childnode>
        <childnode refid="11952" relation="include">
        </childnode>
        <childnode refid="11953" relation="include">
        </childnode>
        <childnode refid="11954" relation="include">
        </childnode>
        <childnode refid="11955" relation="include">
        </childnode>
        <childnode refid="11956" relation="include">
        </childnode>
        <childnode refid="11957" relation="include">
        </childnode>
        <childnode refid="11958" relation="include">
        </childnode>
        <childnode refid="11913" relation="include">
        </childnode>
      </node>
      <node id="11951">
        <label>boost/date_time/gregorian/gregorian_types.hpp</label>
      </node>
      <node id="11906">
        <label>string</label>
      </node>
      <node id="11909">
        <label>map</label>
      </node>
      <node id="11948">
        <label>boost/thread.hpp</label>
      </node>
      <node id="11904">
        <label>/home/dev/ds-160209/src/netbase.cpp</label>
        <link refid="netbase.cpp"/>
        <childnode refid="11905" relation="include">
        </childnode>
        <childnode refid="11938" relation="include">
        </childnode>
        <childnode refid="11959" relation="include">
        </childnode>
        <childnode refid="11964" relation="include">
        </childnode>
        <childnode refid="11929" relation="include">
        </childnode>
        <childnode refid="11974" relation="include">
        </childnode>
        <childnode refid="11975" relation="include">
        </childnode>
      </node>
      <node id="11972">
        <label>stddef.h</label>
      </node>
      <node id="11936">
        <label>netdb.h</label>
      </node>
      <node id="11929">
        <label>sys/fcntl.h</label>
      </node>
      <node id="11975">
        <label>boost/algorithm/string/predicate.hpp</label>
      </node>
      <node id="11908">
        <label>serialize.h</label>
        <link refid="serialize_8h"/>
        <childnode refid="11906" relation="include">
        </childnode>
        <childnode refid="11907" relation="include">
        </childnode>
        <childnode refid="11909" relation="include">
        </childnode>
        <childnode refid="11910" relation="include">
        </childnode>
        <childnode refid="11911" relation="include">
        </childnode>
        <childnode refid="11912" relation="include">
        </childnode>
        <childnode refid="11913" relation="include">
        </childnode>
        <childnode refid="11914" relation="include">
        </childnode>
        <childnode refid="11915" relation="include">
        </childnode>
        <childnode refid="11916" relation="include">
        </childnode>
        <childnode refid="11917" relation="include">
        </childnode>
        <childnode refid="11918" relation="include">
        </childnode>
        <childnode refid="11926" relation="include">
        </childnode>
      </node>
      <node id="11924">
        <label>limits.h</label>
      </node>
      <node id="11960">
        <label>threadsafety.h</label>
        <link refid="threadsafety_8h"/>
      </node>
      <node id="11940">
        <label>sys/resource.h</label>
      </node>
      <node id="11953">
        <label>openssl/bio.h</label>
      </node>
      <node id="11905">
        <label>netbase.h</label>
        <link refid="netbase_8h"/>
        <childnode refid="11906" relation="include">
        </childnode>
        <childnode refid="11907" relation="include">
        </childnode>
        <childnode refid="11908" relation="include">
        </childnode>
        <childnode refid="11928" relation="include">
        </childnode>
      </node>
      <node id="11964">
        <label>hash.h</label>
        <link refid="hash_8h"/>
        <childnode refid="11965" relation="include">
        </childnode>
        <childnode refid="11908" relation="include">
        </childnode>
        <childnode refid="11967" relation="include">
        </childnode>
        <childnode refid="11968" relation="include">
        </childnode>
        <childnode refid="11969" relation="include">
        </childnode>
        <childnode refid="11970" relation="include">
        </childnode>
        <childnode refid="11971" relation="include">
        </childnode>
        <childnode refid="11973" relation="include">
        </childnode>
        <childnode refid="11907" relation="include">
        </childnode>
      </node>
      <node id="11935">
        <label>ifaddrs.h</label>
      </node>
      <node id="11931">
        <label>sys/types.h</label>
      </node>
      <node id="11921">
        <label>string.h</label>
      </node>
      <node id="11927">
        <label>clientversion.h</label>
        <link refid="clientversion_8h"/>
      </node>
      <node id="11915">
        <label>cstdio</label>
      </node>
      <node id="11962">
        <label>boost/thread/locks.hpp</label>
      </node>
      <node id="11955">
        <label>openssl/buffer.h</label>
      </node>
      <node id="11916">
        <label>boost/type_traits/is_fundamental.hpp</label>
      </node>
      <node id="11950">
        <label>boost/filesystem/path.hpp</label>
      </node>
      <node id="11925">
        <label>unistd.h</label>
      </node>
      <node id="11907">
        <label>vector</label>
      </node>
      <node id="11968">
        <label>openssl/ripemd.h</label>
      </node>
      <node id="11949">
        <label>boost/filesystem.hpp</label>
      </node>
      <node id="11974">
        <label>boost/algorithm/string/case_conv.hpp</label>
      </node>
      <node id="11947">
        <label>utility</label>
      </node>
      <node id="11943">
        <label>sstream</label>
      </node>
      <node id="11954">
        <label>openssl/evp.h</label>
      </node>
      <node id="11941">
        <label>tinyformat.h</label>
        <link refid="tinyformat_8h"/>
        <childnode refid="11911" relation="include">
        </childnode>
        <childnode refid="11942" relation="include">
        </childnode>
        <childnode refid="11943" relation="include">
        </childnode>
        <childnode refid="11944" relation="include">
        </childnode>
      </node>
      <node id="11913">
        <label>stdint.h</label>
        <link refid="stdint_8h"/>
      </node>
      <node id="11973">
        <label>crypto/argon2/argon2.h</label>
        <link refid="argon2_8h"/>
        <childnode refid="11913" relation="include">
        </childnode>
        <childnode refid="11972" relation="include">
        </childnode>
        <childnode refid="11924" relation="include">
        </childnode>
      </node>
      <node id="11939">
        <label>sys/time.h</label>
      </node>
      <node id="11942">
        <label>iostream</label>
      </node>
      <node id="11965">
        <label>uint256.h</label>
        <link refid="uint256_8h"/>
        <childnode refid="11966" relation="include">
        </childnode>
        <childnode refid="11914" relation="include">
        </childnode>
        <childnode refid="11944" relation="include">
        </childnode>
        <childnode refid="11913" relation="include">
        </childnode>
        <childnode refid="11906" relation="include">
        </childnode>
        <childnode refid="11907" relation="include">
        </childnode>
      </node>
      <node id="11930">
        <label>sys/socket.h</label>
      </node>
      <node id="11958">
        <label>openssl/bn.h</label>
      </node>
      <node id="11918">
        <label>allocators.h</label>
        <link refid="allocators_8h"/>
        <childnode refid="11919" relation="include">
        </childnode>
        <childnode refid="11921" relation="include">
        </childnode>
        <childnode refid="11906" relation="include">
        </childnode>
        <childnode refid="11922" relation="include">
        </childnode>
        <childnode refid="11909" relation="include">
        </childnode>
        <childnode refid="11923" relation="include">
        </childnode>
        <childnode refid="11924" relation="include">
        </childnode>
        <childnode refid="11925" relation="include">
        </childnode>
      </node>
      <node id="11910">
        <label>set</label>
      </node>
      <node id="11969">
        <label>crypto/ripemd160.h</label>
        <link refid="ripemd160_8h"/>
        <childnode refid="11913" relation="include">
        </childnode>
        <childnode refid="11920" relation="include">
        </childnode>
      </node>
      <node id="11919">
        <label>cleanse.h</label>
        <link refid="cleanse_8h"/>
        <childnode refid="11920" relation="include">
        </childnode>
      </node>
      <node id="11914">
        <label>cstring</label>
      </node>
      <node id="11959">
        <label>sync.h</label>
        <link refid="sync_8h"/>
        <childnode refid="11960" relation="include">
        </childnode>
        <childnode refid="11961" relation="include">
        </childnode>
        <childnode refid="11962" relation="include">
        </childnode>
        <childnode refid="11922" relation="include">
        </childnode>
        <childnode refid="11963" relation="include">
        </childnode>
      </node>
    </incdepgraph>
      <sectiondef kind="var">
      <memberdef kind="variable" id="netbase_8cpp_1adadeaa54e888d30158b4234b2bdccd39" prot="public" static="yes" mutable="no">
        <type><ref refid="netbase_8h_1a2c4d4a2e142e6bebd3a69cdb0f07c48b" kindref="member">proxyType</ref></type>
        <definition>proxyType proxyInfo[NET_MAX]</definition>
        <argsstring>[NET_MAX]</argsstring>
        <name>proxyInfo</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/netbase.cpp" line="26" column="1" bodyfile="/home/dev/ds-160209/src/netbase.cpp" bodystart="26" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="netbase_8cpp_1a841027be85d612e94b03a5110b22e8cd" prot="public" static="yes" mutable="no">
        <type><ref refid="class_c_service" kindref="compound">CService</ref></type>
        <definition>CService nameProxy</definition>
        <argsstring></argsstring>
        <name>nameProxy</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/netbase.cpp" line="27" column="1" bodyfile="/home/dev/ds-160209/src/netbase.cpp" bodystart="27" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="netbase_8cpp_1abc3e289367f966e01dc0260def7736c3" prot="public" static="yes" mutable="no">
        <type><ref refid="sync_8h_1a37a4692b2d517f2843655ca11af7668a" kindref="member">CCriticalSection</ref></type>
        <definition>CCriticalSection cs_proxyInfos</definition>
        <argsstring></argsstring>
        <name>cs_proxyInfos</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/netbase.cpp" line="28" column="1" bodyfile="/home/dev/ds-160209/src/netbase.cpp" bodystart="28" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="netbase_8cpp_1ac8115c6e2874217f2e487b5391cbe963" prot="public" static="no" mutable="no">
        <type>int</type>
        <definition>int nConnectTimeout</definition>
        <argsstring></argsstring>
        <name>nConnectTimeout</name>
        <initializer>= 5000</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/netbase.cpp" line="29" column="1" bodyfile="/home/dev/ds-160209/src/netbase.cpp" bodystart="29" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="netbase_8cpp_1ab5335ec17aee4d4fdd4c735b85707b56" prot="public" static="no" mutable="no">
        <type>bool</type>
        <definition>bool fNameLookup</definition>
        <argsstring></argsstring>
        <name>fNameLookup</name>
        <initializer>= false</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/netbase.cpp" line="30" column="1" bodyfile="/home/dev/ds-160209/src/netbase.cpp" bodystart="30" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="netbase_8cpp_1af32e5ab3d4249b2fce54fbf4a67d4407" prot="public" static="yes" mutable="no">
        <type>const unsigned char</type>
        <definition>const unsigned char pchIPv4[12]</definition>
        <argsstring>[12]</argsstring>
        <name>pchIPv4</name>
        <initializer>= { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0xff, 0xff }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/netbase.cpp" line="32" column="1" bodyfile="/home/dev/ds-160209/src/netbase.cpp" bodystart="32" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="netbase_8cpp_1a4efd3bc8c8904b0ef1424adc99c013aa" prot="public" static="yes" mutable="no">
        <type>const unsigned char</type>
        <definition>const unsigned char pchOnionCat[]</definition>
        <argsstring>[]</argsstring>
        <name>pchOnionCat</name>
        <initializer>= {0xFD,0x87,0xD8,0x7E,0xEB,0x43}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/netbase.cpp" line="557" column="1" bodyfile="/home/dev/ds-160209/src/netbase.cpp" bodystart="557" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="netbase_8cpp_1a7996f480e24f4bd5aafc86a98baf69f7" prot="public" static="yes" mutable="no">
        <type>const unsigned char</type>
        <definition>const unsigned char pchGarliCat[]</definition>
        <argsstring>[]</argsstring>
        <name>pchGarliCat</name>
        <initializer>= {0xFD,0x60,0xDB,0x4D,0xDD,0xB5}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/netbase.cpp" line="558" column="1" bodyfile="/home/dev/ds-160209/src/netbase.cpp" bodystart="558" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="netbase_8cpp_1a38de5bfe22083ee511f27efab4f167fe" prot="public" static="yes" mutable="no">
        <type>const int</type>
        <definition>const int NET_UNKNOWN</definition>
        <argsstring></argsstring>
        <name>NET_UNKNOWN</name>
        <initializer>= <ref refid="netbase_8h_1acc9a38c714afe79b5035cb36f560dac3a675b0737d6c404a5de25e324c166a4b5" kindref="member">NET_MAX</ref> + 0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/netbase.cpp" line="995" column="1" bodyfile="/home/dev/ds-160209/src/netbase.cpp" bodystart="995" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="netbase_8cpp_1a44022f79cf1b09e0f41ae02376d6c348" prot="public" static="yes" mutable="no">
        <type>const int</type>
        <definition>const int NET_TEREDO</definition>
        <argsstring></argsstring>
        <name>NET_TEREDO</name>
        <initializer>= <ref refid="netbase_8h_1acc9a38c714afe79b5035cb36f560dac3a675b0737d6c404a5de25e324c166a4b5" kindref="member">NET_MAX</ref> + 1</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/netbase.cpp" line="996" column="1" bodyfile="/home/dev/ds-160209/src/netbase.cpp" bodystart="996" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="netbase_8cpp_1a1d5be927f8f03e9fdb405a278374cb8d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>enum <ref refid="netbase_8h_1acc9a38c714afe79b5035cb36f560dac3" kindref="member">Network</ref></type>
        <definition>enum Network ParseNetwork</definition>
        <argsstring>(std::string net)</argsstring>
        <name>ParseNetwork</name>
        <param>
          <type>std::string</type>
          <declname>net</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/netbase.cpp" line="32" column="1" bodyfile="/home/dev/ds-160209/src/netbase.cpp" bodystart="34" bodyend="44"/>
      </memberdef>
      <memberdef kind="function" id="netbase_8cpp_1a3ac9f57de577413ec3a720f0ef520921" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string GetNetworkName</definition>
        <argsstring>(enum Network net)</argsstring>
        <name>GetNetworkName</name>
        <param>
          <type>enum <ref refid="netbase_8h_1acc9a38c714afe79b5035cb36f560dac3" kindref="member">Network</ref></type>
          <declname>net</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/netbase.cpp" line="46" column="1" bodyfile="/home/dev/ds-160209/src/netbase.cpp" bodystart="46" bodyend="55"/>
      </memberdef>
      <memberdef kind="function" id="netbase_8cpp_1a1b1ce2ba1ffe40785e65ec3ad5a20e79" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void SplitHostPort</definition>
        <argsstring>(std::string in, int &amp;portOut, std::string &amp;hostOut)</argsstring>
        <name>SplitHostPort</name>
        <param>
          <type>std::string</type>
          <declname>in</declname>
        </param>
        <param>
          <type>int &amp;</type>
          <declname>portOut</declname>
        </param>
        <param>
          <type>std::string &amp;</type>
          <declname>hostOut</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/netbase.cpp" line="57" column="1" bodyfile="/home/dev/ds-160209/src/netbase.cpp" bodystart="57" bodyend="76"/>
      </memberdef>
      <memberdef kind="function" id="netbase_8cpp_1a9fee8268e1061be54e4826caf0258f9d" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>static bool LookupIntern</definition>
        <argsstring>(const char *pszName, std::vector&lt; CNetAddr &gt; &amp;vIP, unsigned int nMaxSolutions, bool fAllowLookup)</argsstring>
        <name>LookupIntern</name>
        <param>
          <type>const char *</type>
          <declname>pszName</declname>
        </param>
        <param>
          <type>std::vector&lt; <ref refid="class_c_net_addr" kindref="compound">CNetAddr</ref> &gt; &amp;</type>
          <declname>vIP</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>nMaxSolutions</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>fAllowLookup</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/netbase.cpp" line="78" column="1" bodyfile="/home/dev/ds-160209/src/netbase.cpp" bodystart="78" bodyend="128"/>
      </memberdef>
      <memberdef kind="function" id="netbase_8cpp_1a3cdc8ba9f8d72752ff5cdd1e7407cdef" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool LookupHost</definition>
        <argsstring>(const char *pszName, std::vector&lt; CNetAddr &gt; &amp;vIP, unsigned int nMaxSolutions, bool fAllowLookup)</argsstring>
        <name>LookupHost</name>
        <param>
          <type>const char *</type>
          <declname>pszName</declname>
        </param>
        <param>
          <type>std::vector&lt; <ref refid="class_c_net_addr" kindref="compound">CNetAddr</ref> &gt; &amp;</type>
          <declname>vIP</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>nMaxSolutions</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>fAllowLookup</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/netbase.cpp" line="130" column="1" bodyfile="/home/dev/ds-160209/src/netbase.cpp" bodystart="130" bodyend="142"/>
      </memberdef>
      <memberdef kind="function" id="netbase_8cpp_1a56a2f4bcb9fb77b5efe358f804f642cc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool Lookup</definition>
        <argsstring>(const char *pszName, std::vector&lt; CService &gt; &amp;vAddr, int portDefault, bool fAllowLookup, unsigned int nMaxSolutions)</argsstring>
        <name>Lookup</name>
        <param>
          <type>const char *</type>
          <declname>pszName</declname>
        </param>
        <param>
          <type>std::vector&lt; <ref refid="class_c_service" kindref="compound">CService</ref> &gt; &amp;</type>
          <declname>vAddr</declname>
        </param>
        <param>
          <type>int</type>
          <declname>portDefault</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>fAllowLookup</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>nMaxSolutions</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/netbase.cpp" line="144" column="1" bodyfile="/home/dev/ds-160209/src/netbase.cpp" bodystart="144" bodyend="160"/>
      </memberdef>
      <memberdef kind="function" id="netbase_8cpp_1a98276049fa599d00d64eb8444b8636ff" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool Lookup</definition>
        <argsstring>(const char *pszName, CService &amp;addr, int portDefault, bool fAllowLookup)</argsstring>
        <name>Lookup</name>
        <param>
          <type>const char *</type>
          <declname>pszName</declname>
        </param>
        <param>
          <type><ref refid="class_c_service" kindref="compound">CService</ref> &amp;</type>
          <declname>addr</declname>
        </param>
        <param>
          <type>int</type>
          <declname>portDefault</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>fAllowLookup</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/netbase.cpp" line="162" column="1" bodyfile="/home/dev/ds-160209/src/netbase.cpp" bodystart="162" bodyend="170"/>
      </memberdef>
      <memberdef kind="function" id="netbase_8cpp_1aca44bd756958aa16d8d8703e4c90c936" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool LookupNumeric</definition>
        <argsstring>(const char *pszName, CService &amp;addr, int portDefault)</argsstring>
        <name>LookupNumeric</name>
        <param>
          <type>const char *</type>
          <declname>pszName</declname>
        </param>
        <param>
          <type><ref refid="class_c_service" kindref="compound">CService</ref> &amp;</type>
          <declname>addr</declname>
        </param>
        <param>
          <type>int</type>
          <declname>portDefault</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/netbase.cpp" line="172" column="1" bodyfile="/home/dev/ds-160209/src/netbase.cpp" bodystart="172" bodyend="175"/>
      </memberdef>
      <memberdef kind="function" id="netbase_8cpp_1aae75ac28f01697fcccc4f08d3ccd35c9" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>static bool Socks5</definition>
        <argsstring>(string strDest, int port, SOCKET &amp;hSocket)</argsstring>
        <name>Socks5</name>
        <param>
          <type>string</type>
          <declname>strDest</declname>
        </param>
        <param>
          <type>int</type>
          <declname>port</declname>
        </param>
        <param>
          <type><ref refid="compat_8h_1a26ef1173e2f2c0d3db27eca28397d723" kindref="member">SOCKET</ref> &amp;</type>
          <declname>hSocket</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/netbase.cpp" line="177" column="1" bodyfile="/home/dev/ds-160209/src/netbase.cpp" bodystart="177" bodyend="280"/>
      </memberdef>
      <memberdef kind="function" id="netbase_8cpp_1a0090d3f81785eebf6a0466b5b9c8cbd3" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>static bool ConnectSocketDirectly</definition>
        <argsstring>(const CService &amp;addrConnect, SOCKET &amp;hSocketRet, int nTimeout)</argsstring>
        <name>ConnectSocketDirectly</name>
        <param>
          <type>const <ref refid="class_c_service" kindref="compound">CService</ref> &amp;</type>
          <declname>addrConnect</declname>
        </param>
        <param>
          <type><ref refid="compat_8h_1a26ef1173e2f2c0d3db27eca28397d723" kindref="member">SOCKET</ref> &amp;</type>
          <declname>hSocketRet</declname>
        </param>
        <param>
          <type>int</type>
          <declname>nTimeout</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/netbase.cpp" line="282" column="1" bodyfile="/home/dev/ds-160209/src/netbase.cpp" bodystart="282" bodyend="386"/>
      </memberdef>
      <memberdef kind="function" id="netbase_8cpp_1a3b85c9f702a45e80d9b6bfbe78c4bf12" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool SetProxy</definition>
        <argsstring>(enum Network net, CService addrProxy)</argsstring>
        <name>SetProxy</name>
        <param>
          <type>enum <ref refid="netbase_8h_1acc9a38c714afe79b5035cb36f560dac3" kindref="member">Network</ref></type>
          <declname>net</declname>
        </param>
        <param>
          <type><ref refid="class_c_service" kindref="compound">CService</ref></type>
          <declname>addrProxy</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/netbase.cpp" line="388" column="1" bodyfile="/home/dev/ds-160209/src/netbase.cpp" bodystart="388" bodyend="395"/>
      </memberdef>
      <memberdef kind="function" id="netbase_8cpp_1a4e67b39fc1769663260d791d2f4d049d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool GetProxy</definition>
        <argsstring>(enum Network net, proxyType &amp;proxyInfoOut)</argsstring>
        <name>GetProxy</name>
        <param>
          <type>enum <ref refid="netbase_8h_1acc9a38c714afe79b5035cb36f560dac3" kindref="member">Network</ref></type>
          <declname>net</declname>
        </param>
        <param>
          <type><ref refid="netbase_8h_1a2c4d4a2e142e6bebd3a69cdb0f07c48b" kindref="member">proxyType</ref> &amp;</type>
          <declname>proxyInfoOut</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/netbase.cpp" line="397" column="1" bodyfile="/home/dev/ds-160209/src/netbase.cpp" bodystart="397" bodyend="404"/>
      </memberdef>
      <memberdef kind="function" id="netbase_8cpp_1a5f78099167609daf40193a0717f96f87" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool SetNameProxy</definition>
        <argsstring>(CService addrProxy)</argsstring>
        <name>SetNameProxy</name>
        <param>
          <type><ref refid="class_c_service" kindref="compound">CService</ref></type>
          <declname>addrProxy</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/netbase.cpp" line="406" column="1" bodyfile="/home/dev/ds-160209/src/netbase.cpp" bodystart="406" bodyend="412"/>
      </memberdef>
      <memberdef kind="function" id="netbase_8cpp_1a426fafd989b57880762556c2ff0c9d2f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool GetNameProxy</definition>
        <argsstring>(CService &amp;nameProxyOut)</argsstring>
        <name>GetNameProxy</name>
        <param>
          <type><ref refid="class_c_service" kindref="compound">CService</ref> &amp;</type>
          <declname>nameProxyOut</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/netbase.cpp" line="414" column="1" bodyfile="/home/dev/ds-160209/src/netbase.cpp" bodystart="414" bodyend="420"/>
      </memberdef>
      <memberdef kind="function" id="netbase_8cpp_1a4a0df7ebe15572508e61c38406e49732" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool HaveNameProxy</definition>
        <argsstring>()</argsstring>
        <name>HaveNameProxy</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/netbase.cpp" line="422" column="1" bodyfile="/home/dev/ds-160209/src/netbase.cpp" bodystart="422" bodyend="425"/>
      </memberdef>
      <memberdef kind="function" id="netbase_8cpp_1aef250c1632d217d8f3b752ddeacc0368" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool IsProxy</definition>
        <argsstring>(const CNetAddr &amp;addr)</argsstring>
        <name>IsProxy</name>
        <param>
          <type>const <ref refid="class_c_net_addr" kindref="compound">CNetAddr</ref> &amp;</type>
          <declname>addr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/netbase.cpp" line="427" column="1" bodyfile="/home/dev/ds-160209/src/netbase.cpp" bodystart="427" bodyend="434"/>
      </memberdef>
      <memberdef kind="function" id="netbase_8cpp_1a0bbba84024b924fe188fbb49125191d5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool ConnectSocket</definition>
        <argsstring>(const CService &amp;addrDest, SOCKET &amp;hSocketRet, int nTimeout, bool *outProxyConnectionFailed)</argsstring>
        <name>ConnectSocket</name>
        <param>
          <type>const <ref refid="class_c_service" kindref="compound">CService</ref> &amp;</type>
          <declname>addrDest</declname>
        </param>
        <param>
          <type><ref refid="compat_8h_1a26ef1173e2f2c0d3db27eca28397d723" kindref="member">SOCKET</ref> &amp;</type>
          <declname>hSocketRet</declname>
        </param>
        <param>
          <type>int</type>
          <declname>nTimeout</declname>
        </param>
        <param>
          <type>bool *</type>
          <declname>outProxyConnectionFailed</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/netbase.cpp" line="463" column="1" bodyfile="/home/dev/ds-160209/src/netbase.cpp" bodystart="463" bodyend="500"/>
      </memberdef>
      <memberdef kind="function" id="netbase_8cpp_1a5da7129cf2a5f0ea9e9020e38d2bddc8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool ConnectSocketByName</definition>
        <argsstring>(CService &amp;addr, SOCKET &amp;hSocketRet, const char *pszDest, int portDefault, int nTimeout, bool *outProxyConnectionFailed)</argsstring>
        <name>ConnectSocketByName</name>
        <param>
          <type><ref refid="class_c_service" kindref="compound">CService</ref> &amp;</type>
          <declname>addr</declname>
        </param>
        <param>
          <type><ref refid="compat_8h_1a26ef1173e2f2c0d3db27eca28397d723" kindref="member">SOCKET</ref> &amp;</type>
          <declname>hSocketRet</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>pszDest</declname>
        </param>
        <param>
          <type>int</type>
          <declname>portDefault</declname>
        </param>
        <param>
          <type>int</type>
          <declname>nTimeout</declname>
        </param>
        <param>
          <type>bool *</type>
          <declname>outProxyConnectionFailed</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/netbase.cpp" line="502" column="1" bodyfile="/home/dev/ds-160209/src/netbase.cpp" bodystart="502" bodyend="539"/>
      </memberdef>
      <memberdef kind="function" id="netbase_8cpp_1a6cc88956853ab8dc9586d55cda059934" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool operator==</definition>
        <argsstring>(const CNetAddr &amp;a, const CNetAddr &amp;b)</argsstring>
        <name>operator==</name>
        <param>
          <type>const <ref refid="class_c_net_addr" kindref="compound">CNetAddr</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="class_c_net_addr" kindref="compound">CNetAddr</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/netbase.cpp" line="855" column="1" bodyfile="/home/dev/ds-160209/src/netbase.cpp" bodystart="855" bodyend="862"/>
      </memberdef>
      <memberdef kind="function" id="netbase_8cpp_1ac361eb83c41464359dfb1dfc296c3a4c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool operator!=</definition>
        <argsstring>(const CNetAddr &amp;a, const CNetAddr &amp;b)</argsstring>
        <name>operator!=</name>
        <param>
          <type>const <ref refid="class_c_net_addr" kindref="compound">CNetAddr</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="class_c_net_addr" kindref="compound">CNetAddr</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/netbase.cpp" line="864" column="1" bodyfile="/home/dev/ds-160209/src/netbase.cpp" bodystart="864" bodyend="871"/>
      </memberdef>
      <memberdef kind="function" id="netbase_8cpp_1af220590d55a24354e2ba2e547e34fd77" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool operator&lt;</definition>
        <argsstring>(const CNetAddr &amp;a, const CNetAddr &amp;b)</argsstring>
        <name>operator&lt;</name>
        <param>
          <type>const <ref refid="class_c_net_addr" kindref="compound">CNetAddr</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="class_c_net_addr" kindref="compound">CNetAddr</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/netbase.cpp" line="873" column="1" bodyfile="/home/dev/ds-160209/src/netbase.cpp" bodystart="873" bodyend="880"/>
      </memberdef>
      <memberdef kind="function" id="netbase_8cpp_1a41643eb4f91cec29059acd8ef44d4bde" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>static int GetExtNetwork</definition>
        <argsstring>(const CNetAddr *addr)</argsstring>
        <name>GetExtNetwork</name>
        <param>
          <type>const <ref refid="class_c_net_addr" kindref="compound">CNetAddr</ref> *</type>
          <declname>addr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/netbase.cpp" line="997" column="1" bodyfile="/home/dev/ds-160209/src/netbase.cpp" bodystart="997" bodyend="1004"/>
      </memberdef>
      <memberdef kind="function" id="netbase_8cpp_1a7abc2516fa7e015cafcf9b98bc33e2ea" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool operator==</definition>
        <argsstring>(const CService &amp;a, const CService &amp;b)</argsstring>
        <name>operator==</name>
        <param>
          <type>const <ref refid="class_c_service" kindref="compound">CService</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="class_c_service" kindref="compound">CService</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/netbase.cpp" line="1154" column="1" bodyfile="/home/dev/ds-160209/src/netbase.cpp" bodystart="1154" bodyend="1157"/>
      </memberdef>
      <memberdef kind="function" id="netbase_8cpp_1a5834e0ab5104fffac621ea53fa2c3860" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool operator!=</definition>
        <argsstring>(const CService &amp;a, const CService &amp;b)</argsstring>
        <name>operator!=</name>
        <param>
          <type>const <ref refid="class_c_service" kindref="compound">CService</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="class_c_service" kindref="compound">CService</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/netbase.cpp" line="1159" column="1" bodyfile="/home/dev/ds-160209/src/netbase.cpp" bodystart="1159" bodyend="1162"/>
      </memberdef>
      <memberdef kind="function" id="netbase_8cpp_1a26d0e22a8e7ae213b25467da3556c9e4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool operator&lt;</definition>
        <argsstring>(const CService &amp;a, const CService &amp;b)</argsstring>
        <name>operator&lt;</name>
        <param>
          <type>const <ref refid="class_c_service" kindref="compound">CService</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="class_c_service" kindref="compound">CService</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/netbase.cpp" line="1164" column="1" bodyfile="/home/dev/ds-160209/src/netbase.cpp" bodystart="1164" bodyend="1167"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">//<sp/>Copyright<sp/>(c)<sp/>2009-2016<sp/>Satoshi<sp/>Nakamoto</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Copyright<sp/>(c)<sp/>2009-2016<sp/>The<sp/>Bitcoin<sp/>Developers</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Copyright<sp/>(c)<sp/>2015-2016<sp/>Silk<sp/>Network</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Distributed<sp/>under<sp/>the<sp/>MIT/X11<sp/>software<sp/>license,<sp/>see<sp/>the<sp/>accompanying</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="comment">//<sp/>file<sp/>COPYING<sp/>or<sp/>http://www.opensource.org/licenses/mit-license.php.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="netbase_8h" kindref="compound">netbase.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="util_8h" kindref="compound">util.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="sync_8h" kindref="compound">sync.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="hash_8h" kindref="compound">hash.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>USE_NATIVE_I2P</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="i2p_8h" kindref="compound">i2p.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>WIN32</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;sys/fcntl.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;boost/algorithm/string/case_conv.hpp&gt;</highlight><highlight class="normal"><sp/></highlight><highlight class="comment">//<sp/>for<sp/>to_lower()</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;boost/algorithm/string/predicate.hpp&gt;</highlight><highlight class="normal"><sp/></highlight><highlight class="comment">//<sp/>for<sp/>startswith()<sp/>and<sp/>endswith()</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal"><ref refid="namespacestd" kindref="compound">std</ref>;</highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Settings</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="class_c_service" kindref="compound">proxyType</ref><sp/>proxyInfo[<ref refid="netbase_8h_1acc9a38c714afe79b5035cb36f560dac3a675b0737d6c404a5de25e324c166a4b5" kindref="member">NET_MAX</ref>];</highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="class_c_service" kindref="compound">CService</ref><sp/>nameProxy;</highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="class_annotated_mixin" kindref="compound">CCriticalSection</ref><sp/>cs_proxyInfos;</highlight></codeline>
<codeline lineno="29" refid="netbase_8h_1ac8115c6e2874217f2e487b5391cbe963" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="netbase_8cpp_1ac8115c6e2874217f2e487b5391cbe963" kindref="member">nConnectTimeout</ref><sp/>=<sp/>5000;</highlight></codeline>
<codeline lineno="30" refid="netbase_8h_1ab5335ec17aee4d4fdd4c735b85707b56" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="netbase_8cpp_1ab5335ec17aee4d4fdd4c735b85707b56" kindref="member">fNameLookup</ref><sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>pchIPv4[12]<sp/>=<sp/>{<sp/>0,<sp/>0,<sp/>0,<sp/>0,<sp/>0,<sp/>0,<sp/>0,<sp/>0,<sp/>0,<sp/>0,<sp/>0xff,<sp/>0xff<sp/>};</highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight></codeline>
<codeline lineno="34" refid="netbase_8h_1a1d5be927f8f03e9fdb405a278374cb8d" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/><ref refid="netbase_8h_1acc9a38c714afe79b5035cb36f560dac3" kindref="member">Network</ref><sp/><ref refid="netbase_8cpp_1a1d5be927f8f03e9fdb405a278374cb8d" kindref="member">ParseNetwork</ref>(std::string<sp/>net)<sp/>{</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/>boost::to_lower(net);</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(net<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;ipv4&quot;</highlight><highlight class="normal">)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="netbase_8h_1acc9a38c714afe79b5035cb36f560dac3ae1598b317168b96919bc3131ee149ebb" kindref="member">NET_IPV4</ref>;</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(net<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;ipv6&quot;</highlight><highlight class="normal">)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="netbase_8h_1acc9a38c714afe79b5035cb36f560dac3a9a9d9355a4923b33382f9894ba80688d" kindref="member">NET_IPV6</ref>;</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(net<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;tor&quot;</highlight><highlight class="normal">)<sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="netbase_8h_1acc9a38c714afe79b5035cb36f560dac3a9defff41db522fc865d58fc4e7646e9f" kindref="member">NET_TOR</ref>;</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(net<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;i2p&quot;</highlight><highlight class="normal">)<sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="netbase_8h_1acc9a38c714afe79b5035cb36f560dac3a0cb8b5dbd08567fffe61bc1b3942aedd" kindref="member">NET_I2P</ref>;</highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>USE_NATIVE_I2P</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(net<sp/>==<sp/>NATIVE_I2P_NET_STRING)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NET_NATIVE_I2P;</highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="netbase_8h_1acc9a38c714afe79b5035cb36f560dac3af66f60a80e2a5d99813c3f322cf8a6e1" kindref="member">NET_UNROUTABLE</ref>;</highlight></codeline>
<codeline lineno="44"><highlight class="normal">}</highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight></codeline>
<codeline lineno="46" refid="netbase_8h_1a3ac9f57de577413ec3a720f0ef520921" refkind="member"><highlight class="normal">std::string<sp/><ref refid="netbase_8cpp_1a3ac9f57de577413ec3a720f0ef520921" kindref="member">GetNetworkName</ref>(</highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/><ref refid="netbase_8h_1acc9a38c714afe79b5035cb36f560dac3" kindref="member">Network</ref><sp/>net)<sp/>{</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal">(net)</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="netbase_8h_1acc9a38c714afe79b5035cb36f560dac3ae1598b317168b96919bc3131ee149ebb" kindref="member">NET_IPV4</ref>:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;ipv4&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="netbase_8h_1acc9a38c714afe79b5035cb36f560dac3a9a9d9355a4923b33382f9894ba80688d" kindref="member">NET_IPV6</ref>:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;ipv6&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="netbase_8h_1acc9a38c714afe79b5035cb36f560dac3a9defff41db522fc865d58fc4e7646e9f" kindref="member">NET_TOR</ref>:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;onion&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="netbase_8h_1acc9a38c714afe79b5035cb36f560dac3a0cb8b5dbd08567fffe61bc1b3942aedd" kindref="member">NET_I2P</ref>:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;i2p&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="55"><highlight class="normal">}</highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight></codeline>
<codeline lineno="57" refid="netbase_8h_1a1b1ce2ba1ffe40785e65ec3ad5a20e79" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="netbase_8cpp_1a1b1ce2ba1ffe40785e65ec3ad5a20e79" kindref="member">SplitHostPort</ref>(std::string<sp/>in,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>&amp;portOut,<sp/>std::string<sp/>&amp;hostOut)<sp/>{</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>colon<sp/>=<sp/>in.find_last_of(</highlight><highlight class="charliteral">&apos;:&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>if<sp/>a<sp/>:<sp/>is<sp/>found,<sp/>and<sp/>it<sp/>either<sp/>follows<sp/>a<sp/>[...],<sp/>or<sp/>no<sp/>other<sp/>:<sp/>is<sp/>in<sp/>the<sp/>string,<sp/>treat<sp/>it<sp/>as<sp/>port<sp/>separator</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>fHaveColon<sp/>=<sp/>colon<sp/>!=<sp/>in.npos;</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>fBracketed<sp/>=<sp/>fHaveColon<sp/>&amp;&amp;<sp/>(in[0]==</highlight><highlight class="charliteral">&apos;[&apos;</highlight><highlight class="normal"><sp/>&amp;&amp;<sp/>in[colon-1]==</highlight><highlight class="charliteral">&apos;]&apos;</highlight><highlight class="normal">);<sp/></highlight><highlight class="comment">//<sp/>if<sp/>there<sp/>is<sp/>a<sp/>colon,<sp/>and<sp/>in[0]==&apos;[&apos;,<sp/>colon<sp/>is<sp/>not<sp/>0,<sp/>so<sp/>in[colon-1]<sp/>is<sp/>safe</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>fMultiColon<sp/>=<sp/>fHaveColon<sp/>&amp;&amp;<sp/>(in.find_last_of(</highlight><highlight class="charliteral">&apos;:&apos;</highlight><highlight class="normal">,colon-1)<sp/>!=<sp/>in.npos);</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fHaveColon<sp/>&amp;&amp;<sp/>(colon==0<sp/>||<sp/>fBracketed<sp/>||<sp/>!fMultiColon))<sp/>{</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*endp<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n<sp/>=<sp/>strtol(in.c_str()<sp/>+<sp/>colon<sp/>+<sp/>1,<sp/>&amp;endp,<sp/>10);</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(endp<sp/>&amp;&amp;<sp/>*endp<sp/>==<sp/>0<sp/>&amp;&amp;<sp/>n<sp/>&gt;=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>in<sp/>=<sp/>in.substr(0,<sp/>colon);</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(n<sp/>&gt;<sp/>0<sp/>&amp;&amp;<sp/>n<sp/>&lt;<sp/>0x10000)</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>portOut<sp/>=<sp/>n;</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(in.size()&gt;0<sp/>&amp;&amp;<sp/>in[0]<sp/>==<sp/></highlight><highlight class="charliteral">&apos;[&apos;</highlight><highlight class="normal"><sp/>&amp;&amp;<sp/>in[in.size()-1]<sp/>==<sp/></highlight><highlight class="charliteral">&apos;]&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>hostOut<sp/>=<sp/>in.substr(1,<sp/>in.size()-2);</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>hostOut<sp/>=<sp/>in;</highlight></codeline>
<codeline lineno="76"><highlight class="normal">}</highlight></codeline>
<codeline lineno="77"><highlight class="normal"></highlight></codeline>
<codeline lineno="78"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>LookupIntern(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*pszName,<sp/>std::vector&lt;CNetAddr&gt;&amp;<sp/>vIP,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nMaxSolutions,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>fAllowLookup)</highlight></codeline>
<codeline lineno="79"><highlight class="normal">{</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/>vIP.clear();</highlight></codeline>
<codeline lineno="81"><highlight class="normal"></highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_c_net_addr" kindref="compound">CNetAddr</ref><sp/>addr;</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(addr.<ref refid="class_c_net_addr_1aa3e44dfd064d9d8da1cb48cdcb7dd231" kindref="member">SetSpecial</ref>(std::string(pszName)))<sp/>{</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vIP.push_back(addr);</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="89"><highlight class="normal"></highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">addrinfo<sp/>aiHint;</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/>memset(&amp;aiHint,<sp/>0,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/>addrinfo));</highlight></codeline>
<codeline lineno="92"><highlight class="normal"></highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/>aiHint.ai_socktype<sp/>=<sp/>SOCK_STREAM;</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/>aiHint.ai_protocol<sp/>=<sp/>IPPROTO_TCP;</highlight></codeline>
<codeline lineno="95"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>WIN32</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/>aiHint.ai_family<sp/>=<sp/>AF_UNSPEC;</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/>aiHint.ai_flags<sp/>=<sp/>fAllowLookup<sp/>?<sp/>0<sp/>:<sp/>AI_NUMERICHOST;</highlight></codeline>
<codeline lineno="98"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/>aiHint.ai_family<sp/>=<sp/>AF_UNSPEC;</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/>aiHint.ai_flags<sp/>=<sp/>fAllowLookup<sp/>?<sp/>AI_ADDRCONFIG<sp/>:<sp/>AI_NUMERICHOST;</highlight></codeline>
<codeline lineno="101"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">addrinfo<sp/>*aiRes<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nErr<sp/>=<sp/>getaddrinfo(pszName,<sp/>NULL,<sp/>&amp;aiHint,<sp/>&amp;aiRes);</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(nErr)</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="106"><highlight class="normal"></highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">addrinfo<sp/>*aiTrav<sp/>=<sp/>aiRes;</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(aiTrav<sp/>!=<sp/>NULL<sp/>&amp;&amp;<sp/>(nMaxSolutions<sp/>==<sp/>0<sp/>||<sp/>vIP.size()<sp/>&lt;<sp/>nMaxSolutions))</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(aiTrav-&gt;ai_family<sp/>==<sp/>AF_INET)</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assert(aiTrav-&gt;ai_addrlen<sp/>&gt;=<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(sockaddr_in));</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vIP.push_back(<ref refid="class_c_net_addr" kindref="compound">CNetAddr</ref>(((</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/>sockaddr_in*)(aiTrav-&gt;ai_addr))-&gt;sin_addr));</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="115"><highlight class="normal"></highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(aiTrav-&gt;ai_family<sp/>==<sp/>AF_INET6)</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assert(aiTrav-&gt;ai_addrlen<sp/>&gt;=<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(sockaddr_in6));</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vIP.push_back(<ref refid="class_c_net_addr" kindref="compound">CNetAddr</ref>(((</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/>sockaddr_in6*)(aiTrav-&gt;ai_addr))-&gt;sin6_addr));</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="121"><highlight class="normal"></highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>aiTrav<sp/>=<sp/>aiTrav-&gt;ai_next;</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="124"><highlight class="normal"></highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/>freeaddrinfo(aiRes);</highlight></codeline>
<codeline lineno="126"><highlight class="normal"></highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(vIP.size()<sp/>&gt;<sp/>0);</highlight></codeline>
<codeline lineno="128"><highlight class="normal">}</highlight></codeline>
<codeline lineno="129"><highlight class="normal"></highlight></codeline>
<codeline lineno="130" refid="netbase_8h_1aa769980fbb4bac91f47d766765913f67" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="netbase_8cpp_1a3cdc8ba9f8d72752ff5cdd1e7407cdef" kindref="member">LookupHost</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*pszName,<sp/>std::vector&lt;CNetAddr&gt;&amp;<sp/>vIP,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nMaxSolutions,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>fAllowLookup)</highlight></codeline>
<codeline lineno="131"><highlight class="normal">{</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>str(pszName);</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>strHost<sp/>=<sp/>str;</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(str.empty())</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(boost::algorithm::starts_with(str,<sp/></highlight><highlight class="stringliteral">&quot;[&quot;</highlight><highlight class="normal">)<sp/>&amp;&amp;<sp/>boost::algorithm::ends_with(str,<sp/></highlight><highlight class="stringliteral">&quot;]&quot;</highlight><highlight class="normal">))</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>strHost<sp/>=<sp/>str.substr(1,<sp/>str.size()<sp/>-<sp/>2);</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="140"><highlight class="normal"></highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>LookupIntern(strHost.c_str(),<sp/>vIP,<sp/>nMaxSolutions,<sp/>fAllowLookup);</highlight></codeline>
<codeline lineno="142"><highlight class="normal">}</highlight></codeline>
<codeline lineno="143"><highlight class="normal"></highlight></codeline>
<codeline lineno="144" refid="netbase_8h_1ac025429411c7622b9781b0e5ecfb9bc2" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="netbase_8cpp_1a56a2f4bcb9fb77b5efe358f804f642cc" kindref="member">Lookup</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*pszName,<sp/>std::vector&lt;CService&gt;&amp;<sp/>vAddr,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>portDefault,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>fAllowLookup,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nMaxSolutions)</highlight></codeline>
<codeline lineno="145"><highlight class="normal">{</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(pszName[0]<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>port<sp/>=<sp/>portDefault;</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>hostname<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="netbase_8cpp_1a1b1ce2ba1ffe40785e65ec3ad5a20e79" kindref="member">SplitHostPort</ref>(std::string(pszName),<sp/>port,<sp/>hostname);</highlight></codeline>
<codeline lineno="151"><highlight class="normal"></highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;CNetAddr&gt;<sp/>vIP;</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>fRet<sp/>=<sp/>LookupIntern(hostname.c_str(),<sp/>vIP,<sp/>nMaxSolutions,<sp/>fAllowLookup);</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!fRet)</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/>vAddr.resize(vIP.size());</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>vIP.size();<sp/>i++)</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vAddr[i]<sp/>=<sp/><ref refid="class_c_service" kindref="compound">CService</ref>(vIP[i],<sp/>port);</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="160"><highlight class="normal">}</highlight></codeline>
<codeline lineno="161"><highlight class="normal"></highlight></codeline>
<codeline lineno="162" refid="netbase_8h_1a8e970007e4314e4cefa5895944ed74d8" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="netbase_8cpp_1a56a2f4bcb9fb77b5efe358f804f642cc" kindref="member">Lookup</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*pszName,<sp/><ref refid="class_c_service" kindref="compound">CService</ref>&amp;<sp/>addr,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>portDefault,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>fAllowLookup)</highlight></codeline>
<codeline lineno="163"><highlight class="normal">{</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;CService&gt;<sp/>vService;</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>fRet<sp/>=<sp/><ref refid="netbase_8cpp_1a56a2f4bcb9fb77b5efe358f804f642cc" kindref="member">Lookup</ref>(pszName,<sp/>vService,<sp/>portDefault,<sp/>fAllowLookup,<sp/>1);</highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!fRet)</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/><sp/>addr<sp/>=<sp/>vService[0];</highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="170"><highlight class="normal">}</highlight></codeline>
<codeline lineno="171"><highlight class="normal"></highlight></codeline>
<codeline lineno="172" refid="netbase_8h_1a5b18d70f02be9dc489da605ff487cc66" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="netbase_8cpp_1aca44bd756958aa16d8d8703e4c90c936" kindref="member">LookupNumeric</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*pszName,<sp/><ref refid="class_c_service" kindref="compound">CService</ref>&amp;<sp/>addr,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>portDefault)</highlight></codeline>
<codeline lineno="173"><highlight class="normal">{</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="netbase_8cpp_1a56a2f4bcb9fb77b5efe358f804f642cc" kindref="member">Lookup</ref>(pszName,<sp/>addr,<sp/>portDefault,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="175"><highlight class="normal">}</highlight></codeline>
<codeline lineno="176"><highlight class="normal"></highlight></codeline>
<codeline lineno="177"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>Socks5(</highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>strDest,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>port,<sp/><ref refid="compat_8h_1a26ef1173e2f2c0d3db27eca28397d723" kindref="member">SOCKET</ref>&amp;<sp/>hSocket)</highlight></codeline>
<codeline lineno="178"><highlight class="normal">{</highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="util_8h_1afc02c0a4258fedfb316be612bb659ba8" kindref="member">LogPrintf</ref>(</highlight><highlight class="stringliteral">&quot;SOCKS5<sp/>connecting<sp/>%s\n&quot;</highlight><highlight class="normal">,<sp/>strDest);</highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(strDest.size()<sp/>&gt;<sp/>255)</highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="compat_8h_1a5a3eb971b466278ada4f7f87399a537c" kindref="member">closesocket</ref>(hSocket);</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>error(</highlight><highlight class="stringliteral">&quot;Hostname<sp/>too<sp/>long&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>pszSocks5Init[]<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;\5\1\0&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*pszSocks5<sp/>=<sp/>pszSocks5Init;</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/>ssize_t<sp/>nSize<sp/>=<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(pszSocks5Init)<sp/>-<sp/>1;</highlight></codeline>
<codeline lineno="188"><highlight class="normal"></highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><sp/><sp/>ssize_t<sp/>ret<sp/>=<sp/>send(hSocket,<sp/>pszSocks5,<sp/>nSize,<sp/>MSG_NOSIGNAL);</highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ret<sp/>!=<sp/>nSize)</highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="compat_8h_1a5a3eb971b466278ada4f7f87399a537c" kindref="member">closesocket</ref>(hSocket);</highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>error(</highlight><highlight class="stringliteral">&quot;Error<sp/>sending<sp/>to<sp/>proxy&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>pchRet1[2];</highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(recv(hSocket,<sp/>pchRet1,<sp/>2,<sp/>0)<sp/>!=<sp/>2)</highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="compat_8h_1a5a3eb971b466278ada4f7f87399a537c" kindref="member">closesocket</ref>(hSocket);</highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>error(</highlight><highlight class="stringliteral">&quot;Error<sp/>reading<sp/>proxy<sp/>response&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(pchRet1[0]<sp/>!=<sp/>0x05<sp/>||<sp/>pchRet1[1]<sp/>!=<sp/>0x00)</highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="compat_8h_1a5a3eb971b466278ada4f7f87399a537c" kindref="member">closesocket</ref>(hSocket);</highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>error(</highlight><highlight class="stringliteral">&quot;Proxy<sp/>failed<sp/>to<sp/>initialize&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>strSocks5(</highlight><highlight class="stringliteral">&quot;\5\1&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/><sp/><sp/>strSocks5<sp/>+=<sp/></highlight><highlight class="charliteral">&apos;\000&apos;</highlight><highlight class="normal">;<sp/>strSocks5<sp/>+=<sp/></highlight><highlight class="charliteral">&apos;\003&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/><sp/><sp/>strSocks5<sp/>+=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">char</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(std::min((</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)strDest.size(),<sp/>255));</highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/><sp/><sp/>strSocks5<sp/>+=<sp/>strDest;</highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/><sp/><sp/>strSocks5<sp/>+=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">char</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">((port<sp/>&gt;&gt;<sp/>8)<sp/>&amp;<sp/>0xFF);</highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/><sp/><sp/>strSocks5<sp/>+=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">char</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">((port<sp/>&gt;&gt;<sp/>0)<sp/>&amp;<sp/>0xFF);</highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/><sp/><sp/>ret<sp/>=<sp/>send(hSocket,<sp/>strSocks5.data(),<sp/>strSocks5.size(),<sp/>MSG_NOSIGNAL);</highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ret<sp/>!=<sp/>(ssize_t)strSocks5.size())</highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="compat_8h_1a5a3eb971b466278ada4f7f87399a537c" kindref="member">closesocket</ref>(hSocket);</highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>error(</highlight><highlight class="stringliteral">&quot;Error<sp/>sending<sp/>to<sp/>proxy&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>pchRet2[4];</highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(recv(hSocket,<sp/>pchRet2,<sp/>4,<sp/>0)<sp/>!=<sp/>4)</highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="compat_8h_1a5a3eb971b466278ada4f7f87399a537c" kindref="member">closesocket</ref>(hSocket);</highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>error(</highlight><highlight class="stringliteral">&quot;Error<sp/>reading<sp/>proxy<sp/>response&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(pchRet2[0]<sp/>!=<sp/>0x05)</highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="compat_8h_1a5a3eb971b466278ada4f7f87399a537c" kindref="member">closesocket</ref>(hSocket);</highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>error(</highlight><highlight class="stringliteral">&quot;Proxy<sp/>failed<sp/>to<sp/>accept<sp/>request&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(pchRet2[1]<sp/>!=<sp/>0x00)</highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="compat_8h_1a5a3eb971b466278ada4f7f87399a537c" kindref="member">closesocket</ref>(hSocket);</highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(pchRet2[1])</highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>0x01:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>error(</highlight><highlight class="stringliteral">&quot;Proxy<sp/>error:<sp/>general<sp/>failure&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>0x02:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>error(</highlight><highlight class="stringliteral">&quot;Proxy<sp/>error:<sp/>connection<sp/>not<sp/>allowed&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>0x03:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>error(</highlight><highlight class="stringliteral">&quot;Proxy<sp/>error:<sp/>network<sp/>unreachable&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>0x04:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>error(</highlight><highlight class="stringliteral">&quot;Proxy<sp/>error:<sp/>host<sp/>unreachable&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>0x05:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>error(</highlight><highlight class="stringliteral">&quot;Proxy<sp/>error:<sp/>connection<sp/>refused&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>0x06:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>error(</highlight><highlight class="stringliteral">&quot;Proxy<sp/>error:<sp/>TTL<sp/>expired&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>0x07:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>error(</highlight><highlight class="stringliteral">&quot;Proxy<sp/>error:<sp/>protocol<sp/>error&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>0x08:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>error(</highlight><highlight class="stringliteral">&quot;Proxy<sp/>error:<sp/>address<sp/>type<sp/>not<sp/>supported&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:<sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>error(</highlight><highlight class="stringliteral">&quot;Proxy<sp/>error:<sp/>unknown&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(pchRet2[2]<sp/>!=<sp/>0x00)</highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="compat_8h_1a5a3eb971b466278ada4f7f87399a537c" kindref="member">closesocket</ref>(hSocket);</highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>error(</highlight><highlight class="stringliteral">&quot;Error:<sp/>malformed<sp/>proxy<sp/>response&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>pchRet3[256];</highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(pchRet2[3])</highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>0x01:<sp/>ret<sp/>=<sp/>recv(hSocket,<sp/>pchRet3,<sp/>4,<sp/>0)<sp/>!=<sp/>4;<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>0x04:<sp/>ret<sp/>=<sp/>recv(hSocket,<sp/>pchRet3,<sp/>16,<sp/>0)<sp/>!=<sp/>16;<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>0x03:</highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ret<sp/>=<sp/>recv(hSocket,<sp/>pchRet3,<sp/>1,<sp/>0)<sp/>!=<sp/>1;</highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ret)<sp/>{</highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="compat_8h_1a5a3eb971b466278ada4f7f87399a537c" kindref="member">closesocket</ref>(hSocket);</highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>error(</highlight><highlight class="stringliteral">&quot;Error<sp/>reading<sp/>from<sp/>proxy&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nRecv<sp/>=<sp/>pchRet3[0];</highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ret<sp/>=<sp/>recv(hSocket,<sp/>pchRet3,<sp/>nRecv,<sp/>0)<sp/>!=<sp/>nRecv;</highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:<sp/><ref refid="compat_8h_1a5a3eb971b466278ada4f7f87399a537c" kindref="member">closesocket</ref>(hSocket);<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>error(</highlight><highlight class="stringliteral">&quot;Error:<sp/>malformed<sp/>proxy<sp/>response&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ret)</highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="compat_8h_1a5a3eb971b466278ada4f7f87399a537c" kindref="member">closesocket</ref>(hSocket);</highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>error(</highlight><highlight class="stringliteral">&quot;Error<sp/>reading<sp/>from<sp/>proxy&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(recv(hSocket,<sp/>pchRet3,<sp/>2,<sp/>0)<sp/>!=<sp/>2)</highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="compat_8h_1a5a3eb971b466278ada4f7f87399a537c" kindref="member">closesocket</ref>(hSocket);</highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>error(</highlight><highlight class="stringliteral">&quot;Error<sp/>reading<sp/>from<sp/>proxy&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="util_8h_1afc02c0a4258fedfb316be612bb659ba8" kindref="member">LogPrintf</ref>(</highlight><highlight class="stringliteral">&quot;SOCKS5<sp/>connected<sp/>%s\n&quot;</highlight><highlight class="normal">,<sp/>strDest);</highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="280"><highlight class="normal">}</highlight></codeline>
<codeline lineno="281"><highlight class="normal"></highlight></codeline>
<codeline lineno="282"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>ConnectSocketDirectly(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_c_service" kindref="compound">CService</ref><sp/>&amp;addrConnect,<sp/><ref refid="compat_8h_1a26ef1173e2f2c0d3db27eca28397d723" kindref="member">SOCKET</ref>&amp;<sp/>hSocketRet,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nTimeout)</highlight></codeline>
<codeline lineno="283"><highlight class="normal">{</highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/><sp/><sp/>hSocketRet<sp/>=<sp/><ref refid="compat_8h_1a26769957ec1a2beaf223f33b66ee64ab" kindref="member">INVALID_SOCKET</ref>;</highlight></codeline>
<codeline lineno="285"><highlight class="normal"></highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">sockaddr_storage<sp/>sockaddr;</highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/><sp/><sp/>socklen_t<sp/>len<sp/>=<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(sockaddr);</highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!addrConnect.<ref refid="class_c_service_1ab0f791c174511056236119cc1580faeb" kindref="member">GetSockAddr</ref>((</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/>sockaddr*)&amp;sockaddr,<sp/>&amp;len))<sp/>{</highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="util_8h_1afc02c0a4258fedfb316be612bb659ba8" kindref="member">LogPrintf</ref>(</highlight><highlight class="stringliteral">&quot;Cannot<sp/>connect<sp/>to<sp/>%s:<sp/>unsupported<sp/>network\n&quot;</highlight><highlight class="normal">,<sp/>addrConnect.<ref refid="class_c_service_1a336f9848fe9364e260c76499be0351a5" kindref="member">ToString</ref>());</highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="292"><highlight class="normal"></highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="compat_8h_1a26ef1173e2f2c0d3db27eca28397d723" kindref="member">SOCKET</ref><sp/>hSocket<sp/>=<sp/>socket(((</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/>sockaddr*)&amp;sockaddr)-&gt;sa_family,<sp/>SOCK_STREAM,<sp/>IPPROTO_TCP);</highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(hSocket<sp/>==<sp/><ref refid="compat_8h_1a26769957ec1a2beaf223f33b66ee64ab" kindref="member">INVALID_SOCKET</ref>)</highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="296"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>SO_NOSIGPIPE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>set<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/><sp/><sp/>setsockopt(hSocket,<sp/>SOL_SOCKET,<sp/>SO_NOSIGPIPE,<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*)&amp;set,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="299"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="300"><highlight class="normal"></highlight></codeline>
<codeline lineno="301"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>WIN32</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="302"><highlight class="normal"><sp/><sp/><sp/><sp/>u_long<sp/>fNonblock<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="303"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ioctlsocket(hSocket,<sp/>FIONBIO,<sp/>&amp;fNonblock)<sp/>==<sp/><ref refid="compat_8h_1a633b0396ff93d336a088412a190a5072" kindref="member">SOCKET_ERROR</ref>)</highlight></codeline>
<codeline lineno="304"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="305"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>fFlags<sp/>=<sp/>fcntl(hSocket,<sp/>F_GETFL,<sp/>0);</highlight></codeline>
<codeline lineno="306"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fcntl(hSocket,<sp/>F_SETFL,<sp/>fFlags<sp/>|<sp/>O_NONBLOCK)<sp/>==<sp/>-1)</highlight></codeline>
<codeline lineno="307"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="308"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="compat_8h_1a5a3eb971b466278ada4f7f87399a537c" kindref="member">closesocket</ref>(hSocket);</highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="312"><highlight class="normal"></highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(connect(hSocket,<sp/>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/>sockaddr*)&amp;sockaddr,<sp/>len)<sp/>==<sp/><ref refid="compat_8h_1a633b0396ff93d336a088412a190a5072" kindref="member">SOCKET_ERROR</ref>)</highlight></codeline>
<codeline lineno="314"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nErr<sp/>=<sp/><ref refid="compat_8h_1a6d24fe3ab2906c21c373505ca244f90b" kindref="member">WSAGetLastError</ref>();</highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>WSAEINVAL<sp/>is<sp/>here<sp/>because<sp/>some<sp/>legacy<sp/>version<sp/>of<sp/>winsock<sp/>uses<sp/>it</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="317"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(nErr<sp/>==<sp/><ref refid="compat_8h_1ada8711ffab59910a2732cfa4b7c24e29" kindref="member">WSAEINPROGRESS</ref><sp/>||<sp/>nErr<sp/>==<sp/><ref refid="compat_8h_1a4ba23242bee4784b72a0a170e2f975a0" kindref="member">WSAEWOULDBLOCK</ref><sp/>||<sp/>nErr<sp/>==<sp/><ref refid="compat_8h_1a4e535522ca96ce5a8c0934b424f5ee85" kindref="member">WSAEINVAL</ref>)</highlight></codeline>
<codeline lineno="318"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">timeval<sp/>timeout;</highlight></codeline>
<codeline lineno="320"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>timeout.tv_sec<sp/><sp/>=<sp/>nTimeout<sp/>/<sp/>1000;</highlight></codeline>
<codeline lineno="321"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>timeout.tv_usec<sp/>=<sp/>(nTimeout<sp/>%<sp/>1000)<sp/>*<sp/>1000;</highlight></codeline>
<codeline lineno="322"><highlight class="normal"></highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fd_set<sp/>fdset;</highlight></codeline>
<codeline lineno="324"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FD_ZERO(&amp;fdset);</highlight></codeline>
<codeline lineno="325"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FD_SET(hSocket,<sp/>&amp;fdset);</highlight></codeline>
<codeline lineno="326"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nRet<sp/>=<sp/>select(hSocket<sp/>+<sp/>1,<sp/>NULL,<sp/>&amp;fdset,<sp/>NULL,<sp/>&amp;timeout);</highlight></codeline>
<codeline lineno="327"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(nRet<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="328"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="329"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>LogPrint(</highlight><highlight class="stringliteral">&quot;net&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;connection<sp/>to<sp/>%s<sp/>timeout\n&quot;</highlight><highlight class="normal">,<sp/>addrConnect.<ref refid="class_c_service_1a336f9848fe9364e260c76499be0351a5" kindref="member">ToString</ref>());</highlight></codeline>
<codeline lineno="330"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="compat_8h_1a5a3eb971b466278ada4f7f87399a537c" kindref="member">closesocket</ref>(hSocket);</highlight></codeline>
<codeline lineno="331"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="332"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="333"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(nRet<sp/>==<sp/><ref refid="compat_8h_1a633b0396ff93d336a088412a190a5072" kindref="member">SOCKET_ERROR</ref>)</highlight></codeline>
<codeline lineno="334"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="335"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="util_8h_1afc02c0a4258fedfb316be612bb659ba8" kindref="member">LogPrintf</ref>(</highlight><highlight class="stringliteral">&quot;select()<sp/>for<sp/>%s<sp/>failed:<sp/>%i\n&quot;</highlight><highlight class="normal">,<sp/>addrConnect.<ref refid="class_c_service_1a336f9848fe9364e260c76499be0351a5" kindref="member">ToString</ref>(),<sp/><ref refid="compat_8h_1a6d24fe3ab2906c21c373505ca244f90b" kindref="member">WSAGetLastError</ref>());</highlight></codeline>
<codeline lineno="336"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="compat_8h_1a5a3eb971b466278ada4f7f87399a537c" kindref="member">closesocket</ref>(hSocket);</highlight></codeline>
<codeline lineno="337"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="338"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="339"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>socklen_t<sp/>nRetSize<sp/>=<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(nRet);</highlight></codeline>
<codeline lineno="340"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>WIN32</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="341"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(getsockopt(hSocket,<sp/>SOL_SOCKET,<sp/>SO_ERROR,<sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*)(&amp;nRet),<sp/>&amp;nRetSize)<sp/>==<sp/><ref refid="compat_8h_1a633b0396ff93d336a088412a190a5072" kindref="member">SOCKET_ERROR</ref>)</highlight></codeline>
<codeline lineno="342"><highlight class="normal">#</highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="343"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(getsockopt(hSocket,<sp/>SOL_SOCKET,<sp/>SO_ERROR,<sp/>&amp;nRet,<sp/>&amp;nRetSize)<sp/>==<sp/><ref refid="compat_8h_1a633b0396ff93d336a088412a190a5072" kindref="member">SOCKET_ERROR</ref>)</highlight></codeline>
<codeline lineno="344"><highlight class="normal">#endif</highlight></codeline>
<codeline lineno="345"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="346"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="util_8h_1afc02c0a4258fedfb316be612bb659ba8" kindref="member">LogPrintf</ref>(</highlight><highlight class="stringliteral">&quot;getsockopt()<sp/>for<sp/>%s<sp/>failed:<sp/>%i\n&quot;</highlight><highlight class="normal">,<sp/>addrConnect.<ref refid="class_c_service_1a336f9848fe9364e260c76499be0351a5" kindref="member">ToString</ref>(),<sp/><ref refid="compat_8h_1a6d24fe3ab2906c21c373505ca244f90b" kindref="member">WSAGetLastError</ref>());</highlight></codeline>
<codeline lineno="347"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="compat_8h_1a5a3eb971b466278ada4f7f87399a537c" kindref="member">closesocket</ref>(hSocket);</highlight></codeline>
<codeline lineno="348"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="349"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="350"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(nRet<sp/>!=<sp/>0)</highlight></codeline>
<codeline lineno="351"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="352"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="util_8h_1afc02c0a4258fedfb316be612bb659ba8" kindref="member">LogPrintf</ref>(</highlight><highlight class="stringliteral">&quot;connect()<sp/>to<sp/>%s<sp/>failed<sp/>after<sp/>select():<sp/>%s\n&quot;</highlight><highlight class="normal">,<sp/>addrConnect.<ref refid="class_c_service_1a336f9848fe9364e260c76499be0351a5" kindref="member">ToString</ref>(),<sp/>strerror(nRet));</highlight></codeline>
<codeline lineno="353"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="compat_8h_1a5a3eb971b466278ada4f7f87399a537c" kindref="member">closesocket</ref>(hSocket);</highlight></codeline>
<codeline lineno="354"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="355"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="356"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="357"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>WIN32</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="358"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="compat_8h_1a6d24fe3ab2906c21c373505ca244f90b" kindref="member">WSAGetLastError</ref>()<sp/>!=<sp/>WSAEISCONN)</highlight></codeline>
<codeline lineno="359"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="360"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="361"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="362"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="363"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="util_8h_1afc02c0a4258fedfb316be612bb659ba8" kindref="member">LogPrintf</ref>(</highlight><highlight class="stringliteral">&quot;connect()<sp/>to<sp/>%s<sp/>failed:<sp/>%i\n&quot;</highlight><highlight class="normal">,<sp/>addrConnect.<ref refid="class_c_service_1a336f9848fe9364e260c76499be0351a5" kindref="member">ToString</ref>(),<sp/><ref refid="compat_8h_1a6d24fe3ab2906c21c373505ca244f90b" kindref="member">WSAGetLastError</ref>());</highlight></codeline>
<codeline lineno="364"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="compat_8h_1a5a3eb971b466278ada4f7f87399a537c" kindref="member">closesocket</ref>(hSocket);</highlight></codeline>
<codeline lineno="365"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="366"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="367"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="368"><highlight class="normal"></highlight></codeline>
<codeline lineno="369"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>this<sp/>isn&apos;t<sp/>even<sp/>strictly<sp/>necessary</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="370"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>CNode::ConnectNode<sp/>immediately<sp/>turns<sp/>the<sp/>socket<sp/>back<sp/>to<sp/>non-blocking</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="371"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>but<sp/>we&apos;ll<sp/>turn<sp/>it<sp/>back<sp/>to<sp/>blocking<sp/>just<sp/>in<sp/>case</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="372"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>WIN32</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="373"><highlight class="normal"><sp/><sp/><sp/><sp/>fNonblock<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="374"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ioctlsocket(hSocket,<sp/>FIONBIO,<sp/>&amp;fNonblock)<sp/>==<sp/><ref refid="compat_8h_1a633b0396ff93d336a088412a190a5072" kindref="member">SOCKET_ERROR</ref>)</highlight></codeline>
<codeline lineno="375"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="376"><highlight class="normal"><sp/><sp/><sp/><sp/>fFlags<sp/>=<sp/>fcntl(hSocket,<sp/>F_GETFL,<sp/>0);</highlight></codeline>
<codeline lineno="377"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fcntl(hSocket,<sp/>F_SETFL,<sp/>fFlags<sp/>&amp;<sp/>!O_NONBLOCK)<sp/>==<sp/><ref refid="compat_8h_1a633b0396ff93d336a088412a190a5072" kindref="member">SOCKET_ERROR</ref>)</highlight></codeline>
<codeline lineno="378"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="379"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="380"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="compat_8h_1a5a3eb971b466278ada4f7f87399a537c" kindref="member">closesocket</ref>(hSocket);</highlight></codeline>
<codeline lineno="381"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="382"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="383"><highlight class="normal"></highlight></codeline>
<codeline lineno="384"><highlight class="normal"><sp/><sp/><sp/><sp/>hSocketRet<sp/>=<sp/>hSocket;</highlight></codeline>
<codeline lineno="385"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="386"><highlight class="normal">}</highlight></codeline>
<codeline lineno="387"><highlight class="normal"></highlight></codeline>
<codeline lineno="388" refid="netbase_8h_1a3b85c9f702a45e80d9b6bfbe78c4bf12" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="netbase_8cpp_1a3b85c9f702a45e80d9b6bfbe78c4bf12" kindref="member">SetProxy</ref>(</highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/><ref refid="netbase_8h_1acc9a38c714afe79b5035cb36f560dac3" kindref="member">Network</ref><sp/>net,<sp/><ref refid="class_c_service" kindref="compound">CService</ref><sp/>addrProxy)<sp/>{</highlight></codeline>
<codeline lineno="389"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(net<sp/>&gt;=<sp/>0<sp/>&amp;&amp;<sp/>net<sp/>&lt;<sp/><ref refid="netbase_8h_1acc9a38c714afe79b5035cb36f560dac3a675b0737d6c404a5de25e324c166a4b5" kindref="member">NET_MAX</ref>);</highlight></codeline>
<codeline lineno="390"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!addrProxy.<ref refid="class_c_net_addr_1a52a1b506f07e5450057e12a8b5a7fbcd" kindref="member">IsValid</ref>())</highlight></codeline>
<codeline lineno="391"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="392"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="sync_8h_1a911fe23f057c2fe5aad629162d6c99d0" kindref="member">LOCK</ref>(cs_proxyInfos);</highlight></codeline>
<codeline lineno="393"><highlight class="normal"><sp/><sp/><sp/><sp/>proxyInfo[net]<sp/>=<sp/>addrProxy;</highlight></codeline>
<codeline lineno="394"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="395"><highlight class="normal">}</highlight></codeline>
<codeline lineno="396"><highlight class="normal"></highlight></codeline>
<codeline lineno="397" refid="netbase_8h_1a4e67b39fc1769663260d791d2f4d049d" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="netbase_8cpp_1a4e67b39fc1769663260d791d2f4d049d" kindref="member">GetProxy</ref>(</highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/><ref refid="netbase_8h_1acc9a38c714afe79b5035cb36f560dac3" kindref="member">Network</ref><sp/>net,<sp/><ref refid="class_c_service" kindref="compound">proxyType</ref><sp/>&amp;proxyInfoOut)<sp/>{</highlight></codeline>
<codeline lineno="398"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(net<sp/>&gt;=<sp/>0<sp/>&amp;&amp;<sp/>net<sp/>&lt;<sp/><ref refid="netbase_8h_1acc9a38c714afe79b5035cb36f560dac3a675b0737d6c404a5de25e324c166a4b5" kindref="member">NET_MAX</ref>);</highlight></codeline>
<codeline lineno="399"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="sync_8h_1a911fe23f057c2fe5aad629162d6c99d0" kindref="member">LOCK</ref>(cs_proxyInfos);</highlight></codeline>
<codeline lineno="400"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!proxyInfo[net].IsValid())</highlight></codeline>
<codeline lineno="401"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="402"><highlight class="normal"><sp/><sp/><sp/><sp/>proxyInfoOut<sp/>=<sp/>proxyInfo[net];</highlight></codeline>
<codeline lineno="403"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="404"><highlight class="normal">}</highlight></codeline>
<codeline lineno="405"><highlight class="normal"></highlight></codeline>
<codeline lineno="406" refid="netbase_8h_1a5f78099167609daf40193a0717f96f87" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="netbase_8cpp_1a5f78099167609daf40193a0717f96f87" kindref="member">SetNameProxy</ref>(<ref refid="class_c_service" kindref="compound">CService</ref><sp/>addrProxy)<sp/>{</highlight></codeline>
<codeline lineno="407"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!addrProxy.<ref refid="class_c_net_addr_1a52a1b506f07e5450057e12a8b5a7fbcd" kindref="member">IsValid</ref>())</highlight></codeline>
<codeline lineno="408"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="409"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="sync_8h_1a911fe23f057c2fe5aad629162d6c99d0" kindref="member">LOCK</ref>(cs_proxyInfos);</highlight></codeline>
<codeline lineno="410"><highlight class="normal"><sp/><sp/><sp/><sp/>nameProxy<sp/>=<sp/>addrProxy;</highlight></codeline>
<codeline lineno="411"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="412"><highlight class="normal">}</highlight></codeline>
<codeline lineno="413"><highlight class="normal"></highlight></codeline>
<codeline lineno="414" refid="netbase_8cpp_1a426fafd989b57880762556c2ff0c9d2f" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="netbase_8cpp_1a426fafd989b57880762556c2ff0c9d2f" kindref="member">GetNameProxy</ref>(<ref refid="class_c_service" kindref="compound">CService</ref><sp/>&amp;nameProxyOut)<sp/>{</highlight></codeline>
<codeline lineno="415"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="sync_8h_1a911fe23f057c2fe5aad629162d6c99d0" kindref="member">LOCK</ref>(cs_proxyInfos);</highlight></codeline>
<codeline lineno="416"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!nameProxy.<ref refid="class_c_net_addr_1a52a1b506f07e5450057e12a8b5a7fbcd" kindref="member">IsValid</ref>())</highlight></codeline>
<codeline lineno="417"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="418"><highlight class="normal"><sp/><sp/><sp/><sp/>nameProxyOut<sp/>=<sp/>nameProxy;</highlight></codeline>
<codeline lineno="419"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="420"><highlight class="normal">}</highlight></codeline>
<codeline lineno="421"><highlight class="normal"></highlight></codeline>
<codeline lineno="422" refid="netbase_8h_1a4a0df7ebe15572508e61c38406e49732" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="netbase_8cpp_1a4a0df7ebe15572508e61c38406e49732" kindref="member">HaveNameProxy</ref>()<sp/>{</highlight></codeline>
<codeline lineno="423"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="sync_8h_1a911fe23f057c2fe5aad629162d6c99d0" kindref="member">LOCK</ref>(cs_proxyInfos);</highlight></codeline>
<codeline lineno="424"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>nameProxy.<ref refid="class_c_net_addr_1a52a1b506f07e5450057e12a8b5a7fbcd" kindref="member">IsValid</ref>();</highlight></codeline>
<codeline lineno="425"><highlight class="normal">}</highlight></codeline>
<codeline lineno="426"><highlight class="normal"></highlight></codeline>
<codeline lineno="427" refid="netbase_8h_1aef250c1632d217d8f3b752ddeacc0368" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="netbase_8cpp_1aef250c1632d217d8f3b752ddeacc0368" kindref="member">IsProxy</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_c_net_addr" kindref="compound">CNetAddr</ref><sp/>&amp;addr)<sp/>{</highlight></codeline>
<codeline lineno="428"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="sync_8h_1a911fe23f057c2fe5aad629162d6c99d0" kindref="member">LOCK</ref>(cs_proxyInfos);</highlight></codeline>
<codeline lineno="429"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/><ref refid="netbase_8h_1acc9a38c714afe79b5035cb36f560dac3a675b0737d6c404a5de25e324c166a4b5" kindref="member">NET_MAX</ref>;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="430"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(addr<sp/>==<sp/>(<ref refid="class_c_net_addr" kindref="compound">CNetAddr</ref>)proxyInfo[i])</highlight></codeline>
<codeline lineno="431"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="432"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="433"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="434"><highlight class="normal">}</highlight></codeline>
<codeline lineno="435"><highlight class="normal"></highlight></codeline>
<codeline lineno="436"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>USE_NATIVE_I2P</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="437"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>SetSocketOptions(<ref refid="compat_8h_1a26ef1173e2f2c0d3db27eca28397d723" kindref="member">SOCKET</ref>&amp;<sp/>hSocket)</highlight></codeline>
<codeline lineno="438"><highlight class="normal">{</highlight></codeline>
<codeline lineno="439"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(hSocket<sp/>==<sp/><ref refid="compat_8h_1a26769957ec1a2beaf223f33b66ee64ab" kindref="member">INVALID_SOCKET</ref>)</highlight></codeline>
<codeline lineno="440"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="441"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>SO_NOSIGPIPE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="442"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>set<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="443"><highlight class="normal"><sp/><sp/><sp/><sp/>setsockopt(hSocket,<sp/>SOL_SOCKET,<sp/>SO_NOSIGPIPE,<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*)&amp;set,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="444"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="445"><highlight class="normal"></highlight></codeline>
<codeline lineno="446"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>WIN32</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="447"><highlight class="normal"><sp/><sp/><sp/><sp/>u_long<sp/>fNonblock<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="448"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ioctlsocket(hSocket,<sp/>FIONBIO,<sp/>&amp;fNonblock)<sp/>==<sp/><ref refid="compat_8h_1a633b0396ff93d336a088412a190a5072" kindref="member">SOCKET_ERROR</ref>)</highlight></codeline>
<codeline lineno="449"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="450"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>fFlags<sp/>=<sp/>fcntl(hSocket,<sp/>F_GETFL,<sp/>0);</highlight></codeline>
<codeline lineno="451"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fcntl(hSocket,<sp/>F_SETFL,<sp/>fFlags<sp/>|<sp/>O_NONBLOCK)<sp/>==<sp/>-1)</highlight></codeline>
<codeline lineno="452"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="453"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="454"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="compat_8h_1a5a3eb971b466278ada4f7f87399a537c" kindref="member">closesocket</ref>(hSocket);</highlight></codeline>
<codeline lineno="455"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>hSocket<sp/>=<sp/><ref refid="compat_8h_1a26769957ec1a2beaf223f33b66ee64ab" kindref="member">INVALID_SOCKET</ref>;</highlight></codeline>
<codeline lineno="456"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="457"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="458"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="459"><highlight class="normal">}</highlight></codeline>
<codeline lineno="460"><highlight class="normal"></highlight></codeline>
<codeline lineno="461"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="462"><highlight class="normal"></highlight></codeline>
<codeline lineno="463" refid="netbase_8h_1a82264c36c474ed2eee9093db72076910" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="netbase_8cpp_1a0bbba84024b924fe188fbb49125191d5" kindref="member">ConnectSocket</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_c_service" kindref="compound">CService</ref><sp/>&amp;addrDest,<sp/><ref refid="compat_8h_1a26ef1173e2f2c0d3db27eca28397d723" kindref="member">SOCKET</ref>&amp;<sp/>hSocketRet,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nTimeout,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>*outProxyConnectionFailed)</highlight></codeline>
<codeline lineno="464"><highlight class="normal">{</highlight></codeline>
<codeline lineno="465"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_c_service" kindref="compound">proxyType</ref><sp/>proxy;</highlight></codeline>
<codeline lineno="466"><highlight class="normal"></highlight></codeline>
<codeline lineno="467"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>USE_NATIVE_I2P</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="468"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(addrDest.IsNativeI2P())</highlight></codeline>
<codeline lineno="469"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="470"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="compat_8h_1a26ef1173e2f2c0d3db27eca28397d723" kindref="member">SOCKET</ref><sp/>streamSocket<sp/>=<sp/><ref refid="class_i2_p_session_1a0b2a285f34224a7fdc8ffcb0d1f6d48e" kindref="member">I2PSession::Instance</ref>().<ref refid="class_s_a_m_1_1_stream_session_adapter_1a983b84796d46f00aee1e4b7c4f6f421f" kindref="member">connect</ref>(addrDest.GetI2PDestination(),<sp/></highlight><highlight class="keyword">false</highlight><highlight class="comment">/*,<sp/>streamSocket*/</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="471"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(SetSocketOptions(streamSocket))</highlight></codeline>
<codeline lineno="472"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="473"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>hSocketRet<sp/>=<sp/>streamSocket;</highlight></codeline>
<codeline lineno="474"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="475"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="476"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="477"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="478"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="479"><highlight class="normal"></highlight></codeline>
<codeline lineno="480"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(outProxyConnectionFailed)</highlight></codeline>
<codeline lineno="481"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*outProxyConnectionFailed<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="482"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>no<sp/>proxy<sp/>needed<sp/>(none<sp/>set<sp/>for<sp/>target<sp/>network)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="483"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="netbase_8cpp_1a4e67b39fc1769663260d791d2f4d049d" kindref="member">GetProxy</ref>(addrDest.<ref refid="class_c_net_addr_1a34a4760424f5c51998fc3baf82ccb5c8" kindref="member">GetNetwork</ref>(),<sp/>proxy))</highlight></codeline>
<codeline lineno="484"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ConnectSocketDirectly(addrDest,<sp/>hSocketRet,<sp/>nTimeout);</highlight></codeline>
<codeline lineno="485"><highlight class="normal"></highlight></codeline>
<codeline lineno="486"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="compat_8h_1a26ef1173e2f2c0d3db27eca28397d723" kindref="member">SOCKET</ref><sp/>hSocket<sp/>=<sp/><ref refid="compat_8h_1a26769957ec1a2beaf223f33b66ee64ab" kindref="member">INVALID_SOCKET</ref>;</highlight></codeline>
<codeline lineno="487"><highlight class="normal"></highlight></codeline>
<codeline lineno="488"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>first<sp/>connect<sp/>to<sp/>proxy<sp/>server</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="489"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!ConnectSocketDirectly(proxy,<sp/>hSocket,<sp/>nTimeout))<sp/>{</highlight></codeline>
<codeline lineno="490"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(outProxyConnectionFailed)</highlight></codeline>
<codeline lineno="491"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*outProxyConnectionFailed<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="492"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="493"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="494"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>do<sp/>socks<sp/>negotiation</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="495"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!Socks5(addrDest.<ref refid="class_c_net_addr_1a7ec845c27b63853fb0db08a4d154266f" kindref="member">ToStringIP</ref>(),<sp/>addrDest.<ref refid="class_c_service_1a49df6ecaf59be814632c4d7755f26637" kindref="member">GetPort</ref>(),<sp/>hSocket))</highlight></codeline>
<codeline lineno="496"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="497"><highlight class="normal"></highlight></codeline>
<codeline lineno="498"><highlight class="normal"><sp/><sp/><sp/><sp/>hSocketRet<sp/>=<sp/>hSocket;</highlight></codeline>
<codeline lineno="499"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="500"><highlight class="normal">}</highlight></codeline>
<codeline lineno="501"><highlight class="normal"></highlight></codeline>
<codeline lineno="502" refid="netbase_8h_1a5cd6bfa35cfe703de2218401c49922a7" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="netbase_8cpp_1a5da7129cf2a5f0ea9e9020e38d2bddc8" kindref="member">ConnectSocketByName</ref>(<ref refid="class_c_service" kindref="compound">CService</ref><sp/>&amp;addr,<sp/><ref refid="compat_8h_1a26ef1173e2f2c0d3db27eca28397d723" kindref="member">SOCKET</ref>&amp;<sp/>hSocketRet,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*pszDest,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>portDefault,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nTimeout,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>*outProxyConnectionFailed)</highlight></codeline>
<codeline lineno="503"><highlight class="normal">{</highlight></codeline>
<codeline lineno="504"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>strDest;</highlight></codeline>
<codeline lineno="505"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>port<sp/>=<sp/>portDefault;</highlight></codeline>
<codeline lineno="506"><highlight class="normal"></highlight></codeline>
<codeline lineno="507"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(outProxyConnectionFailed)</highlight></codeline>
<codeline lineno="508"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*outProxyConnectionFailed<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="509"><highlight class="normal"></highlight></codeline>
<codeline lineno="510"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="netbase_8cpp_1a1b1ce2ba1ffe40785e65ec3ad5a20e79" kindref="member">SplitHostPort</ref>(</highlight><highlight class="keywordtype">string</highlight><highlight class="normal">(pszDest),<sp/>port,<sp/>strDest);</highlight></codeline>
<codeline lineno="511"><highlight class="normal"></highlight></codeline>
<codeline lineno="512"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="compat_8h_1a26ef1173e2f2c0d3db27eca28397d723" kindref="member">SOCKET</ref><sp/>hSocket<sp/>=<sp/><ref refid="compat_8h_1a26769957ec1a2beaf223f33b66ee64ab" kindref="member">INVALID_SOCKET</ref>;</highlight></codeline>
<codeline lineno="513"><highlight class="normal"></highlight></codeline>
<codeline lineno="514"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_c_service" kindref="compound">CService</ref><sp/>nameProxy;</highlight></codeline>
<codeline lineno="515"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="netbase_8cpp_1a426fafd989b57880762556c2ff0c9d2f" kindref="member">GetNameProxy</ref>(nameProxy);</highlight></codeline>
<codeline lineno="516"><highlight class="normal"></highlight></codeline>
<codeline lineno="517"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_c_service" kindref="compound">CService</ref><sp/>addrResolved(<ref refid="class_c_net_addr" kindref="compound">CNetAddr</ref>(strDest,<sp/><ref refid="netbase_8cpp_1ab5335ec17aee4d4fdd4c735b85707b56" kindref="member">fNameLookup</ref><sp/>&amp;&amp;<sp/>!<ref refid="netbase_8cpp_1a4a0df7ebe15572508e61c38406e49732" kindref="member">HaveNameProxy</ref>()),<sp/>port);</highlight></codeline>
<codeline lineno="518"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(addrResolved.<ref refid="class_c_net_addr_1a52a1b506f07e5450057e12a8b5a7fbcd" kindref="member">IsValid</ref>())<sp/>{</highlight></codeline>
<codeline lineno="519"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>addr<sp/>=<sp/>addrResolved;</highlight></codeline>
<codeline lineno="520"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="netbase_8cpp_1a0bbba84024b924fe188fbb49125191d5" kindref="member">ConnectSocket</ref>(addr,<sp/>hSocketRet,<sp/>nTimeout);</highlight></codeline>
<codeline lineno="521"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="522"><highlight class="normal"></highlight></codeline>
<codeline lineno="523"><highlight class="normal"><sp/><sp/><sp/><sp/>addr<sp/>=<sp/><ref refid="class_c_service" kindref="compound">CService</ref>(</highlight><highlight class="stringliteral">&quot;0.0.0.0:0&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="524"><highlight class="normal"></highlight></codeline>
<codeline lineno="525"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="netbase_8cpp_1a4a0df7ebe15572508e61c38406e49732" kindref="member">HaveNameProxy</ref>())</highlight></codeline>
<codeline lineno="526"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="527"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>first<sp/>connect<sp/>to<sp/>name<sp/>proxy<sp/>server</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="528"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!ConnectSocketDirectly(nameProxy,<sp/>hSocket,<sp/>nTimeout))<sp/>{</highlight></codeline>
<codeline lineno="529"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(outProxyConnectionFailed)</highlight></codeline>
<codeline lineno="530"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*outProxyConnectionFailed<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="531"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="532"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="533"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>do<sp/>socks<sp/>negotiation</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="534"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!Socks5(strDest,<sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">short</highlight><highlight class="normal">)port,<sp/>hSocket))</highlight></codeline>
<codeline lineno="535"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="536"><highlight class="normal"></highlight></codeline>
<codeline lineno="537"><highlight class="normal"><sp/><sp/><sp/><sp/>hSocketRet<sp/>=<sp/>hSocket;</highlight></codeline>
<codeline lineno="538"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="539"><highlight class="normal">}</highlight></codeline>
<codeline lineno="540"><highlight class="normal"></highlight></codeline>
<codeline lineno="541" refid="class_c_net_addr_1adab412fbc5a9203bea90ae173996ab10" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_c_net_addr_1adab412fbc5a9203bea90ae173996ab10" kindref="member">CNetAddr::Init</ref>()</highlight></codeline>
<codeline lineno="542"><highlight class="normal">{</highlight></codeline>
<codeline lineno="543"><highlight class="normal"><sp/><sp/><sp/><sp/>memset(ip,<sp/>0,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(ip));</highlight></codeline>
<codeline lineno="544"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>USE_NATIVE_I2P</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="545"><highlight class="normal"><sp/><sp/><sp/><sp/>memset(i2pDest,<sp/>0,<sp/>NATIVE_I2P_DESTINATION_SIZE);</highlight></codeline>
<codeline lineno="546"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="547"><highlight class="normal">}</highlight></codeline>
<codeline lineno="548"><highlight class="normal"></highlight></codeline>
<codeline lineno="549" refid="class_c_net_addr_1a1c6087345e5ca07a151451cd6deb974f" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_c_net_addr_1a1c6087345e5ca07a151451cd6deb974f" kindref="member">CNetAddr::SetIP</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_c_net_addr" kindref="compound">CNetAddr</ref>&amp;<sp/>ipIn)</highlight></codeline>
<codeline lineno="550"><highlight class="normal">{</highlight></codeline>
<codeline lineno="551"><highlight class="normal"><sp/><sp/><sp/><sp/>memcpy(ip,<sp/>ipIn.<ref refid="class_c_net_addr_1acff7ce68f33f8dfbfe6d79d80928d417" kindref="member">ip</ref>,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(ip));</highlight></codeline>
<codeline lineno="552"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>USE_NATIVE_I2P</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="553"><highlight class="normal"><sp/><sp/><sp/><sp/>memcpy(i2pDest,<sp/>ipIn.i2pDest,<sp/>NATIVE_I2P_DESTINATION_SIZE);</highlight></codeline>
<codeline lineno="554"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="555"><highlight class="normal">}</highlight></codeline>
<codeline lineno="556"><highlight class="normal"></highlight></codeline>
<codeline lineno="557"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>pchOnionCat[]<sp/>=<sp/>{0xFD,0x87,0xD8,0x7E,0xEB,0x43};</highlight></codeline>
<codeline lineno="558"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>pchGarliCat[]<sp/>=<sp/>{0xFD,0x60,0xDB,0x4D,0xDD,0xB5};</highlight></codeline>
<codeline lineno="559"><highlight class="normal"></highlight></codeline>
<codeline lineno="560" refid="class_c_net_addr_1aa3e44dfd064d9d8da1cb48cdcb7dd231" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="class_c_net_addr_1aa3e44dfd064d9d8da1cb48cdcb7dd231" kindref="member">CNetAddr::SetSpecial</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;strName)</highlight></codeline>
<codeline lineno="561"><highlight class="normal">{</highlight></codeline>
<codeline lineno="562"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>USE_NATIVE_I2P</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="563"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>isBase32Addr<sp/>=<sp/>(strName.size()<sp/>==<sp/>NATIVE_I2P_B32ADDR_SIZE)<sp/>&amp;&amp;<sp/>(strName.substr(strName.size()<sp/>-<sp/>8,<sp/>8)<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;.b32.i2p&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="564"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>addr<sp/>=<sp/>isBase32Addr<sp/>?<sp/><ref refid="class_i2_p_session_1a0b2a285f34224a7fdc8ffcb0d1f6d48e" kindref="member">I2PSession::Instance</ref>().<ref refid="class_s_a_m_1_1_stream_session_adapter_1a865f56708a911fc832953f10c59d96e3" kindref="member">namingLookup</ref>(strName)<sp/>:<sp/>strName;</highlight></codeline>
<codeline lineno="565"><highlight class="normal"></highlight></codeline>
<codeline lineno="566"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((addr.size()<sp/>==<sp/>NATIVE_I2P_DESTINATION_SIZE)<sp/>&amp;&amp;<sp/>(addr.substr(addr.size()<sp/>-<sp/>4,<sp/>4)<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;AAAA&quot;</highlight><highlight class="normal">))<sp/>{<sp/></highlight><highlight class="comment">//<sp/>last<sp/>4<sp/>symbols<sp/>of<sp/>b64-destination<sp/>must<sp/>be<sp/>AAAA</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="567"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>memcpy(i2pDest,<sp/>addr.c_str(),<sp/>NATIVE_I2P_DESTINATION_SIZE);</highlight></codeline>
<codeline lineno="568"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="569"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="570"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="571"><highlight class="normal"></highlight></codeline>
<codeline lineno="572"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(strName.size()&gt;6<sp/>&amp;&amp;<sp/>strName.substr(strName.size()<sp/>-<sp/>6,<sp/>6)<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;.onion&quot;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="573"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;unsigned<sp/>char&gt;<sp/>vchAddr<sp/>=<sp/><ref refid="util_8cpp_1a8266fd137bc7f76f4a75024baab5c18f" kindref="member">DecodeBase32</ref>(strName.substr(0,<sp/>strName.size()<sp/>-<sp/>6).c_str());</highlight></codeline>
<codeline lineno="574"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(vchAddr.size()<sp/>!=<sp/>16-</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(pchOnionCat))</highlight></codeline>
<codeline lineno="575"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="576"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>memcpy(ip,<sp/>pchOnionCat,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(pchOnionCat));</highlight></codeline>
<codeline lineno="577"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i=0;<sp/>i&lt;16-</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(pchOnionCat);<sp/>i++)</highlight></codeline>
<codeline lineno="578"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ip[i<sp/>+<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(pchOnionCat)]<sp/>=<sp/>vchAddr[i];</highlight></codeline>
<codeline lineno="579"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="580"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="581"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(strName.size()&gt;11<sp/>&amp;&amp;<sp/>strName.substr(strName.size()<sp/>-<sp/>11,<sp/>11)<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;.oc.b32.i2p&quot;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="582"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;unsigned<sp/>char&gt;<sp/>vchAddr<sp/>=<sp/><ref refid="util_8cpp_1a8266fd137bc7f76f4a75024baab5c18f" kindref="member">DecodeBase32</ref>(strName.substr(0,<sp/>strName.size()<sp/>-<sp/>11).c_str());</highlight></codeline>
<codeline lineno="583"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(vchAddr.size()<sp/>!=<sp/>16-</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(pchGarliCat))</highlight></codeline>
<codeline lineno="584"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="585"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>memcpy(ip,<sp/>pchOnionCat,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(pchGarliCat));</highlight></codeline>
<codeline lineno="586"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i=0;<sp/>i&lt;16-</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(pchGarliCat);<sp/>i++)</highlight></codeline>
<codeline lineno="587"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ip[i<sp/>+<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(pchGarliCat)]<sp/>=<sp/>vchAddr[i];</highlight></codeline>
<codeline lineno="588"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="589"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="590"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="591"><highlight class="normal">}</highlight></codeline>
<codeline lineno="592"><highlight class="normal"></highlight></codeline>
<codeline lineno="593" refid="class_c_net_addr_1ad997a7ab057fbeab1dd6601135f8e02d" refkind="member"><highlight class="normal"><ref refid="class_c_net_addr_1ad997a7ab057fbeab1dd6601135f8e02d" kindref="member">CNetAddr::CNetAddr</ref>()</highlight></codeline>
<codeline lineno="594"><highlight class="normal">{</highlight></codeline>
<codeline lineno="595"><highlight class="normal"><sp/><sp/><sp/><sp/>Init();</highlight></codeline>
<codeline lineno="596"><highlight class="normal">}</highlight></codeline>
<codeline lineno="597"><highlight class="normal"></highlight></codeline>
<codeline lineno="598" refid="class_c_net_addr_1a0af492cd8aca9bbaa3392cdbfbb55681" refkind="member"><highlight class="normal"><ref refid="class_c_net_addr_1ad997a7ab057fbeab1dd6601135f8e02d" kindref="member">CNetAddr::CNetAddr</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/>in_addr&amp;<sp/>ipv4Addr)</highlight></codeline>
<codeline lineno="599"><highlight class="normal">{</highlight></codeline>
<codeline lineno="600"><highlight class="normal"><sp/><sp/><sp/><sp/>memcpy(ip,<sp/><sp/><sp/><sp/>pchIPv4,<sp/>12);</highlight></codeline>
<codeline lineno="601"><highlight class="normal"><sp/><sp/><sp/><sp/>memcpy(ip+12,<sp/>&amp;ipv4Addr,<sp/>4);</highlight></codeline>
<codeline lineno="602"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>USE_NATIVE_I2P</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="603"><highlight class="normal"><sp/><sp/><sp/><sp/>memset(i2pDest,<sp/>0,<sp/>NATIVE_I2P_DESTINATION_SIZE);</highlight></codeline>
<codeline lineno="604"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="605"><highlight class="normal">}</highlight></codeline>
<codeline lineno="606"><highlight class="normal"></highlight></codeline>
<codeline lineno="607" refid="class_c_net_addr_1a9eae4232457f7659a157467274d1b444" refkind="member"><highlight class="normal"><ref refid="class_c_net_addr_1ad997a7ab057fbeab1dd6601135f8e02d" kindref="member">CNetAddr::CNetAddr</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/>in6_addr&amp;<sp/>ipv6Addr)</highlight></codeline>
<codeline lineno="608"><highlight class="normal">{</highlight></codeline>
<codeline lineno="609"><highlight class="normal"><sp/><sp/><sp/><sp/>memcpy(ip,<sp/>&amp;ipv6Addr,<sp/>16);</highlight></codeline>
<codeline lineno="610"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>USE_NATIVE_I2P</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="611"><highlight class="normal"><sp/><sp/><sp/><sp/>memset(i2pDest,<sp/>0,<sp/>NATIVE_I2P_DESTINATION_SIZE);</highlight></codeline>
<codeline lineno="612"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="613"><highlight class="normal">}</highlight></codeline>
<codeline lineno="614"><highlight class="normal"></highlight></codeline>
<codeline lineno="615" refid="class_c_net_addr_1a3549332f92d95ccadf262bdce9f4eacf" refkind="member"><highlight class="normal"><ref refid="class_c_net_addr_1ad997a7ab057fbeab1dd6601135f8e02d" kindref="member">CNetAddr::CNetAddr</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*pszIp,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>fAllowLookup)</highlight></codeline>
<codeline lineno="616"><highlight class="normal">{</highlight></codeline>
<codeline lineno="617"><highlight class="normal"><sp/><sp/><sp/><sp/>Init();</highlight></codeline>
<codeline lineno="618"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;CNetAddr&gt;<sp/>vIP;</highlight></codeline>
<codeline lineno="619"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="netbase_8cpp_1a3cdc8ba9f8d72752ff5cdd1e7407cdef" kindref="member">LookupHost</ref>(pszIp,<sp/>vIP,<sp/>1,<sp/>fAllowLookup))</highlight></codeline>
<codeline lineno="620"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal"><sp/>=<sp/>vIP[0];</highlight></codeline>
<codeline lineno="621"><highlight class="normal">}</highlight></codeline>
<codeline lineno="622"><highlight class="normal"></highlight></codeline>
<codeline lineno="623" refid="class_c_net_addr_1ae237602be0e4bce6ff31061270371144" refkind="member"><highlight class="normal"><ref refid="class_c_net_addr_1ad997a7ab057fbeab1dd6601135f8e02d" kindref="member">CNetAddr::CNetAddr</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;strIp,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>fAllowLookup)</highlight></codeline>
<codeline lineno="624"><highlight class="normal">{</highlight></codeline>
<codeline lineno="625"><highlight class="normal"><sp/><sp/><sp/><sp/>Init();</highlight></codeline>
<codeline lineno="626"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;CNetAddr&gt;<sp/>vIP;</highlight></codeline>
<codeline lineno="627"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="netbase_8cpp_1a3cdc8ba9f8d72752ff5cdd1e7407cdef" kindref="member">LookupHost</ref>(strIp.c_str(),<sp/>vIP,<sp/>1,<sp/>fAllowLookup))</highlight></codeline>
<codeline lineno="628"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal"><sp/>=<sp/>vIP[0];</highlight></codeline>
<codeline lineno="629"><highlight class="normal">}</highlight></codeline>
<codeline lineno="630"><highlight class="normal"></highlight></codeline>
<codeline lineno="631" refid="class_c_net_addr_1a0793d30a6baae6e3d4e06084ec33eddd" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="class_c_net_addr_1a0793d30a6baae6e3d4e06084ec33eddd" kindref="member">CNetAddr::GetByte</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="632"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="633"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ip[15-n];</highlight></codeline>
<codeline lineno="634"><highlight class="normal">}</highlight></codeline>
<codeline lineno="635"><highlight class="normal"></highlight></codeline>
<codeline lineno="636" refid="class_c_net_addr_1a16ff4478f02f06f5a9a038a24d5da2f9" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="class_c_net_addr_1a16ff4478f02f06f5a9a038a24d5da2f9" kindref="member">CNetAddr::IsIPv4</ref>()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="637"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="638"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(memcmp(ip,<sp/>pchIPv4,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(pchIPv4))<sp/>==<sp/>0);</highlight></codeline>
<codeline lineno="639"><highlight class="normal">}</highlight></codeline>
<codeline lineno="640"><highlight class="normal"></highlight></codeline>
<codeline lineno="641" refid="class_c_net_addr_1a0edb022cd6a186de8099799415409d57" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="class_c_net_addr_1a0edb022cd6a186de8099799415409d57" kindref="member">CNetAddr::IsIPv6</ref>()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="642"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="643"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>USE_NATIVE_I2P</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="644"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(!IsIPv4()<sp/>&amp;&amp;<sp/>!IsTor()<sp/>&amp;&amp;<sp/>!IsNativeI2P());</highlight></codeline>
<codeline lineno="645"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="646"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(!IsIPv4()<sp/>&amp;&amp;<sp/>!IsTor()<sp/>&amp;&amp;<sp/>!IsI2P());</highlight></codeline>
<codeline lineno="647"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="648"><highlight class="normal">}</highlight></codeline>
<codeline lineno="649"><highlight class="normal"></highlight></codeline>
<codeline lineno="650" refid="class_c_net_addr_1a81b190a7e0b05b93bf3097ba43e5cec1" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="class_c_net_addr_1a81b190a7e0b05b93bf3097ba43e5cec1" kindref="member">CNetAddr::IsRFC1918</ref>()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="651"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="652"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>IsIPv4()<sp/>&amp;&amp;<sp/>(</highlight></codeline>
<codeline lineno="653"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GetByte(3)<sp/>==<sp/>10<sp/>||</highlight></codeline>
<codeline lineno="654"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(GetByte(3)<sp/>==<sp/>192<sp/>&amp;&amp;<sp/>GetByte(2)<sp/>==<sp/>168)<sp/>||</highlight></codeline>
<codeline lineno="655"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(GetByte(3)<sp/>==<sp/>172<sp/>&amp;&amp;<sp/>(GetByte(2)<sp/>&gt;=<sp/>16<sp/>&amp;&amp;<sp/>GetByte(2)<sp/>&lt;=<sp/>31)));</highlight></codeline>
<codeline lineno="656"><highlight class="normal">}</highlight></codeline>
<codeline lineno="657"><highlight class="normal"></highlight></codeline>
<codeline lineno="658" refid="class_c_net_addr_1a3d8e5495fd3a2f92bedf272452a2d4b0" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="class_c_net_addr_1a3d8e5495fd3a2f92bedf272452a2d4b0" kindref="member">CNetAddr::IsRFC3927</ref>()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="659"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="660"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>IsIPv4()<sp/>&amp;&amp;<sp/>(GetByte(3)<sp/>==<sp/>169<sp/>&amp;&amp;<sp/>GetByte(2)<sp/>==<sp/>254);</highlight></codeline>
<codeline lineno="661"><highlight class="normal">}</highlight></codeline>
<codeline lineno="662"><highlight class="normal"></highlight></codeline>
<codeline lineno="663" refid="class_c_net_addr_1a639dff0ffea6ad930353784686def39b" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="class_c_net_addr_1a639dff0ffea6ad930353784686def39b" kindref="member">CNetAddr::IsRFC3849</ref>()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="664"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="665"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>GetByte(15)<sp/>==<sp/>0x20<sp/>&amp;&amp;<sp/>GetByte(14)<sp/>==<sp/>0x01<sp/>&amp;&amp;<sp/>GetByte(13)<sp/>==<sp/>0x0D<sp/>&amp;&amp;<sp/>GetByte(12)<sp/>==<sp/>0xB8;</highlight></codeline>
<codeline lineno="666"><highlight class="normal">}</highlight></codeline>
<codeline lineno="667"><highlight class="normal"></highlight></codeline>
<codeline lineno="668" refid="class_c_net_addr_1a312065a9243977a602412665d6148f26" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="class_c_net_addr_1a312065a9243977a602412665d6148f26" kindref="member">CNetAddr::IsRFC3964</ref>()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="669"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="670"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(GetByte(15)<sp/>==<sp/>0x20<sp/>&amp;&amp;<sp/>GetByte(14)<sp/>==<sp/>0x02);</highlight></codeline>
<codeline lineno="671"><highlight class="normal">}</highlight></codeline>
<codeline lineno="672"><highlight class="normal"></highlight></codeline>
<codeline lineno="673" refid="class_c_net_addr_1a8057dbecf9f5b4d33a643990b6eec873" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="class_c_net_addr_1a8057dbecf9f5b4d33a643990b6eec873" kindref="member">CNetAddr::IsRFC6052</ref>()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="674"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="675"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>pchRFC6052[]<sp/>=<sp/>{0,0x64,0xFF,0x9B,0,0,0,0,0,0,0,0};</highlight></codeline>
<codeline lineno="676"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(memcmp(ip,<sp/>pchRFC6052,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(pchRFC6052))<sp/>==<sp/>0);</highlight></codeline>
<codeline lineno="677"><highlight class="normal">}</highlight></codeline>
<codeline lineno="678"><highlight class="normal"></highlight></codeline>
<codeline lineno="679" refid="class_c_net_addr_1afc6e370bb97c97f83260bba898ec4731" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="class_c_net_addr_1afc6e370bb97c97f83260bba898ec4731" kindref="member">CNetAddr::IsRFC4380</ref>()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="680"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="681"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(GetByte(15)<sp/>==<sp/>0x20<sp/>&amp;&amp;<sp/>GetByte(14)<sp/>==<sp/>0x01<sp/>&amp;&amp;<sp/>GetByte(13)<sp/>==<sp/>0<sp/>&amp;&amp;<sp/>GetByte(12)<sp/>==<sp/>0);</highlight></codeline>
<codeline lineno="682"><highlight class="normal">}</highlight></codeline>
<codeline lineno="683"><highlight class="normal"></highlight></codeline>
<codeline lineno="684" refid="class_c_net_addr_1a5cba67eb628ea99ea68addfe14913fa3" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="class_c_net_addr_1a5cba67eb628ea99ea68addfe14913fa3" kindref="member">CNetAddr::IsRFC4862</ref>()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="685"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="686"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>pchRFC4862[]<sp/>=<sp/>{0xFE,0x80,0,0,0,0,0,0};</highlight></codeline>
<codeline lineno="687"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(memcmp(ip,<sp/>pchRFC4862,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(pchRFC4862))<sp/>==<sp/>0);</highlight></codeline>
<codeline lineno="688"><highlight class="normal">}</highlight></codeline>
<codeline lineno="689"><highlight class="normal"></highlight></codeline>
<codeline lineno="690" refid="class_c_net_addr_1ac47bf0c27f8026497b1933393a6570ba" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="class_c_net_addr_1ac47bf0c27f8026497b1933393a6570ba" kindref="member">CNetAddr::IsRFC4193</ref>()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="691"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="692"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>((GetByte(15)<sp/>&amp;<sp/>0xFE)<sp/>==<sp/>0xFC);</highlight></codeline>
<codeline lineno="693"><highlight class="normal">}</highlight></codeline>
<codeline lineno="694"><highlight class="normal"></highlight></codeline>
<codeline lineno="695" refid="class_c_net_addr_1ab5d91a88d77777004c8ebd658c8caf54" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="class_c_net_addr_1ab5d91a88d77777004c8ebd658c8caf54" kindref="member">CNetAddr::IsRFC6145</ref>()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="696"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="697"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>pchRFC6145[]<sp/>=<sp/>{0,0,0,0,0,0,0,0,0xFF,0xFF,0,0};</highlight></codeline>
<codeline lineno="698"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(memcmp(ip,<sp/>pchRFC6145,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(pchRFC6145))<sp/>==<sp/>0);</highlight></codeline>
<codeline lineno="699"><highlight class="normal">}</highlight></codeline>
<codeline lineno="700"><highlight class="normal"></highlight></codeline>
<codeline lineno="701" refid="class_c_net_addr_1ad69e51fffff5ee9fcabedda51f10a3ce" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="class_c_net_addr_1ad69e51fffff5ee9fcabedda51f10a3ce" kindref="member">CNetAddr::IsRFC4843</ref>()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="702"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="703"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(GetByte(15)<sp/>==<sp/>0x20<sp/>&amp;&amp;<sp/>GetByte(14)<sp/>==<sp/>0x01<sp/>&amp;&amp;<sp/>GetByte(13)<sp/>==<sp/>0x00<sp/>&amp;&amp;<sp/>(GetByte(12)<sp/>&amp;<sp/>0xF0)<sp/>==<sp/>0x10);</highlight></codeline>
<codeline lineno="704"><highlight class="normal">}</highlight></codeline>
<codeline lineno="705"><highlight class="normal"></highlight></codeline>
<codeline lineno="706" refid="class_c_net_addr_1a3fba9e0b18f531c0ed15794a30e8165d" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="class_c_net_addr_1a3fba9e0b18f531c0ed15794a30e8165d" kindref="member">CNetAddr::IsTor</ref>()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="707"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="708"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(memcmp(ip,<sp/>pchOnionCat,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(pchOnionCat))<sp/>==<sp/>0);</highlight></codeline>
<codeline lineno="709"><highlight class="normal">}</highlight></codeline>
<codeline lineno="710"><highlight class="normal"></highlight></codeline>
<codeline lineno="711"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>USE_NATIVE_I2P</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="712"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>CNetAddr::IsNativeI2P()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="713"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="714"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>pchAAAA[]<sp/>=<sp/>{</highlight><highlight class="charliteral">&apos;A&apos;</highlight><highlight class="normal">,</highlight><highlight class="charliteral">&apos;A&apos;</highlight><highlight class="normal">,</highlight><highlight class="charliteral">&apos;A&apos;</highlight><highlight class="normal">,</highlight><highlight class="charliteral">&apos;A&apos;</highlight><highlight class="normal">};</highlight></codeline>
<codeline lineno="715"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(memcmp(i2pDest<sp/>+<sp/>NATIVE_I2P_DESTINATION_SIZE<sp/>-<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(pchAAAA),<sp/>pchAAAA,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(pchAAAA))<sp/>==<sp/>0);</highlight></codeline>
<codeline lineno="716"><highlight class="normal">}</highlight></codeline>
<codeline lineno="717"><highlight class="normal"></highlight></codeline>
<codeline lineno="718"><highlight class="normal">std::string<sp/>CNetAddr::GetI2PDestination()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="719"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="720"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::string(i2pDest,<sp/>i2pDest<sp/>+<sp/>NATIVE_I2P_DESTINATION_SIZE);</highlight></codeline>
<codeline lineno="721"><highlight class="normal">}</highlight></codeline>
<codeline lineno="722"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="723"><highlight class="normal"></highlight></codeline>
<codeline lineno="724" refid="class_c_net_addr_1a4502c75bf0bf1b5d07738587627288b4" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="class_c_net_addr_1a4502c75bf0bf1b5d07738587627288b4" kindref="member">CNetAddr::IsI2P</ref>()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="725"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="726"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(memcmp(ip,<sp/>pchGarliCat,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(pchGarliCat))<sp/>==<sp/>0);</highlight></codeline>
<codeline lineno="727"><highlight class="normal">}</highlight></codeline>
<codeline lineno="728"><highlight class="normal"></highlight></codeline>
<codeline lineno="729" refid="class_c_net_addr_1a6cfa18f323424408cf7ace36c9a7c2e2" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="class_c_net_addr_1a6cfa18f323424408cf7ace36c9a7c2e2" kindref="member">CNetAddr::IsLocal</ref>()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="730"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="731"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>USE_NATIVE_I2P</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="732"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(IsNativeI2P())</highlight></codeline>
<codeline lineno="733"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="734"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="735"><highlight class="normal"></highlight></codeline>
<codeline lineno="736"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>IPv4<sp/>loopback</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="737"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(IsIPv4()<sp/>&amp;&amp;<sp/>(GetByte(3)<sp/>==<sp/>127<sp/>||<sp/>GetByte(3)<sp/>==<sp/>0))</highlight></codeline>
<codeline lineno="738"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="739"><highlight class="normal"></highlight></codeline>
<codeline lineno="740"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>IPv6<sp/>loopback<sp/>(::1/128)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="741"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>pchLocal[16]<sp/>=<sp/>{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1};</highlight></codeline>
<codeline lineno="742"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(memcmp(ip,<sp/>pchLocal,<sp/>16)<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="743"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="744"><highlight class="normal"></highlight></codeline>
<codeline lineno="745"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="746"><highlight class="normal">}</highlight></codeline>
<codeline lineno="747"><highlight class="normal"></highlight></codeline>
<codeline lineno="748" refid="class_c_net_addr_1ab6593d2d75ca7cc6f00c2831cc0a8b73" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="class_c_net_addr_1ab6593d2d75ca7cc6f00c2831cc0a8b73" kindref="member">CNetAddr::IsMulticast</ref>()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="749"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="750"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><sp/><sp/><sp/>(IsIPv4()<sp/>&amp;&amp;<sp/>(GetByte(3)<sp/>&amp;<sp/>0xF0)<sp/>==<sp/>0xE0)</highlight></codeline>
<codeline lineno="751"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>||<sp/>(GetByte(15)<sp/>==<sp/>0xFF);</highlight></codeline>
<codeline lineno="752"><highlight class="normal">}</highlight></codeline>
<codeline lineno="753"><highlight class="normal"></highlight></codeline>
<codeline lineno="754" refid="class_c_net_addr_1a52a1b506f07e5450057e12a8b5a7fbcd" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="class_c_net_addr_1a52a1b506f07e5450057e12a8b5a7fbcd" kindref="member">CNetAddr::IsValid</ref>()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="755"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="756"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>USE_NATIVE_I2P</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="757"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(IsNativeI2P())</highlight></codeline>
<codeline lineno="758"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="759"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="760"><highlight class="normal"></highlight></codeline>
<codeline lineno="761"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Cleanup<sp/>3-byte<sp/>shifted<sp/>addresses<sp/>caused<sp/>by<sp/>garbage<sp/>in<sp/>size<sp/>field</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="762"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>of<sp/>addr<sp/>messages<sp/>from<sp/>versions<sp/>before<sp/>0.2.9<sp/>checksum.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="763"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Two<sp/>consecutive<sp/>addr<sp/>messages<sp/>look<sp/>like<sp/>this:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="764"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>header20<sp/>vectorlen3<sp/>addr26<sp/>addr26<sp/>addr26<sp/>header20<sp/>vectorlen3<sp/>addr26<sp/>addr26<sp/>addr26...</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="765"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>so<sp/>if<sp/>the<sp/>first<sp/>length<sp/>field<sp/>is<sp/>garbled,<sp/>it<sp/>reads<sp/>the<sp/>second<sp/>batch</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="766"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>of<sp/>addr<sp/>misaligned<sp/>by<sp/>3<sp/>bytes.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="767"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(memcmp(ip,<sp/>pchIPv4+3,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(pchIPv4)-3)<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="768"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="769"><highlight class="normal"></highlight></codeline>
<codeline lineno="770"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>unspecified<sp/>IPv6<sp/>address<sp/>(::/128)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="771"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>ipNone[16]<sp/>=<sp/>{};</highlight></codeline>
<codeline lineno="772"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(memcmp(ip,<sp/>ipNone,<sp/>16)<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="773"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="774"><highlight class="normal"></highlight></codeline>
<codeline lineno="775"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>documentation<sp/>IPv6<sp/>address</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="776"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(IsRFC3849())</highlight></codeline>
<codeline lineno="777"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="778"><highlight class="normal"></highlight></codeline>
<codeline lineno="779"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(IsIPv4())</highlight></codeline>
<codeline lineno="780"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="781"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>INADDR_NONE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="782"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stdint_8h_1a435d1572bf3f880d55459d9805097f62" kindref="member">uint32_t</ref><sp/>ipNone<sp/>=<sp/>INADDR_NONE;</highlight></codeline>
<codeline lineno="783"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(memcmp(ip+12,<sp/>&amp;ipNone,<sp/>4)<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="784"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="785"><highlight class="normal"></highlight></codeline>
<codeline lineno="786"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="787"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ipNone<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="788"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(memcmp(ip+12,<sp/>&amp;ipNone,<sp/>4)<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="789"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="790"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="791"><highlight class="normal"></highlight></codeline>
<codeline lineno="792"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="793"><highlight class="normal">}</highlight></codeline>
<codeline lineno="794"><highlight class="normal"></highlight></codeline>
<codeline lineno="795" refid="class_c_net_addr_1a35131b2792434d1c9a860c583b610ab6" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="class_c_net_addr_1a35131b2792434d1c9a860c583b610ab6" kindref="member">CNetAddr::IsRoutable</ref>()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="796"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="797"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>IsValid()<sp/>&amp;&amp;<sp/>!(IsRFC1918()<sp/>||<sp/>IsRFC3927()<sp/>||<sp/>IsRFC4862()<sp/>||<sp/>(IsRFC4193()<sp/>&amp;&amp;<sp/>!IsTor()<sp/>&amp;&amp;<sp/>!IsI2P())<sp/>||<sp/>IsRFC4843()<sp/>||<sp/><ref refid="net_8cpp_1a16fa1bd4d34c4c29c90903fc3cdf7517" kindref="member">IsLocal</ref>());</highlight></codeline>
<codeline lineno="798"><highlight class="normal">}</highlight></codeline>
<codeline lineno="799"><highlight class="normal"></highlight></codeline>
<codeline lineno="800" refid="class_c_net_addr_1a34a4760424f5c51998fc3baf82ccb5c8" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/><ref refid="netbase_8h_1acc9a38c714afe79b5035cb36f560dac3" kindref="member">Network</ref><sp/><ref refid="class_c_net_addr_1a34a4760424f5c51998fc3baf82ccb5c8" kindref="member">CNetAddr::GetNetwork</ref>()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="801"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="802"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!IsRoutable())</highlight></codeline>
<codeline lineno="803"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="netbase_8h_1acc9a38c714afe79b5035cb36f560dac3af66f60a80e2a5d99813c3f322cf8a6e1" kindref="member">NET_UNROUTABLE</ref>;</highlight></codeline>
<codeline lineno="804"><highlight class="normal"></highlight></codeline>
<codeline lineno="805"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(IsIPv4())</highlight></codeline>
<codeline lineno="806"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="netbase_8h_1acc9a38c714afe79b5035cb36f560dac3ae1598b317168b96919bc3131ee149ebb" kindref="member">NET_IPV4</ref>;</highlight></codeline>
<codeline lineno="807"><highlight class="normal"></highlight></codeline>
<codeline lineno="808"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(IsTor())</highlight></codeline>
<codeline lineno="809"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="netbase_8h_1acc9a38c714afe79b5035cb36f560dac3a9defff41db522fc865d58fc4e7646e9f" kindref="member">NET_TOR</ref>;</highlight></codeline>
<codeline lineno="810"><highlight class="normal"></highlight></codeline>
<codeline lineno="811"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>USE_NATIVE_I2P</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="812"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(IsNativeI2P())</highlight></codeline>
<codeline lineno="813"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NET_NATIVE_I2P;</highlight></codeline>
<codeline lineno="814"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="815"><highlight class="normal"></highlight></codeline>
<codeline lineno="816"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(IsI2P())</highlight></codeline>
<codeline lineno="817"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="netbase_8h_1acc9a38c714afe79b5035cb36f560dac3a0cb8b5dbd08567fffe61bc1b3942aedd" kindref="member">NET_I2P</ref>;</highlight></codeline>
<codeline lineno="818"><highlight class="normal"></highlight></codeline>
<codeline lineno="819"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="netbase_8h_1acc9a38c714afe79b5035cb36f560dac3a9a9d9355a4923b33382f9894ba80688d" kindref="member">NET_IPV6</ref>;</highlight></codeline>
<codeline lineno="820"><highlight class="normal">}</highlight></codeline>
<codeline lineno="821"><highlight class="normal"></highlight></codeline>
<codeline lineno="822" refid="class_c_net_addr_1a7ec845c27b63853fb0db08a4d154266f" refkind="member"><highlight class="normal">std::string<sp/><ref refid="class_c_net_addr_1a7ec845c27b63853fb0db08a4d154266f" kindref="member">CNetAddr::ToStringIP</ref>()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="823"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="824"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>USE_NATIVE_I2P</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="825"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(IsNativeI2P())</highlight></codeline>
<codeline lineno="826"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>GetI2PDestination();</highlight></codeline>
<codeline lineno="827"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="828"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(IsTor())</highlight></codeline>
<codeline lineno="829"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="util_8cpp_1a71aa75e646de8a10971f887bc71d9a75" kindref="member">EncodeBase32</ref>(&amp;ip[6],<sp/>10)<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;.onion&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="830"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(IsI2P())</highlight></codeline>
<codeline lineno="831"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="util_8cpp_1a71aa75e646de8a10971f887bc71d9a75" kindref="member">EncodeBase32</ref>(&amp;ip[6],<sp/>10)<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;.oc.b32.i2p&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="832"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_c_service" kindref="compound">CService</ref><sp/>serv(*</highlight><highlight class="keyword">this</highlight><highlight class="normal">,<sp/>0);</highlight></codeline>
<codeline lineno="833"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">sockaddr_storage<sp/>sockaddr;</highlight></codeline>
<codeline lineno="834"><highlight class="normal"><sp/><sp/><sp/><sp/>socklen_t<sp/>socklen<sp/>=<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(sockaddr);</highlight></codeline>
<codeline lineno="835"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(serv.<ref refid="class_c_service_1ab0f791c174511056236119cc1580faeb" kindref="member">GetSockAddr</ref>((</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/>sockaddr*)&amp;sockaddr,<sp/>&amp;socklen))<sp/>{</highlight></codeline>
<codeline lineno="836"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/><ref refid="testharness_8cc_1a8f8f80d37794cde9472343e4487ba3eb" kindref="member">name</ref>[1025]<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="837"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!getnameinfo((</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/>sockaddr*)&amp;sockaddr,<sp/>socklen,<sp/>name,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(name),<sp/>NULL,<sp/>0,<sp/>NI_NUMERICHOST))</highlight></codeline>
<codeline lineno="838"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::string(name);</highlight></codeline>
<codeline lineno="839"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="840"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(IsIPv4())</highlight></codeline>
<codeline lineno="841"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="tinyformat_8h_1a56c674871a61baaad36ad52238c08857" kindref="member">strprintf</ref>(</highlight><highlight class="stringliteral">&quot;%u.%u.%u.%u&quot;</highlight><highlight class="normal">,<sp/>GetByte(3),<sp/>GetByte(2),<sp/>GetByte(1),<sp/>GetByte(0));</highlight></codeline>
<codeline lineno="842"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="843"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="tinyformat_8h_1a56c674871a61baaad36ad52238c08857" kindref="member">strprintf</ref>(</highlight><highlight class="stringliteral">&quot;%x:%x:%x:%x:%x:%x:%x:%x&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="844"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GetByte(15)<sp/>&lt;&lt;<sp/>8<sp/>|<sp/>GetByte(14),<sp/>GetByte(13)<sp/>&lt;&lt;<sp/>8<sp/>|<sp/>GetByte(12),</highlight></codeline>
<codeline lineno="845"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GetByte(11)<sp/>&lt;&lt;<sp/>8<sp/>|<sp/>GetByte(10),<sp/>GetByte(9)<sp/>&lt;&lt;<sp/>8<sp/>|<sp/>GetByte(8),</highlight></codeline>
<codeline lineno="846"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GetByte(7)<sp/>&lt;&lt;<sp/>8<sp/>|<sp/>GetByte(6),<sp/>GetByte(5)<sp/>&lt;&lt;<sp/>8<sp/>|<sp/>GetByte(4),</highlight></codeline>
<codeline lineno="847"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GetByte(3)<sp/>&lt;&lt;<sp/>8<sp/>|<sp/>GetByte(2),<sp/>GetByte(1)<sp/>&lt;&lt;<sp/>8<sp/>|<sp/>GetByte(0));</highlight></codeline>
<codeline lineno="848"><highlight class="normal">}</highlight></codeline>
<codeline lineno="849"><highlight class="normal"></highlight></codeline>
<codeline lineno="850" refid="class_c_net_addr_1aae906cecdba331389f249a64693895b6" refkind="member"><highlight class="normal">std::string<sp/><ref refid="class_c_net_addr_1aae906cecdba331389f249a64693895b6" kindref="member">CNetAddr::ToString</ref>()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="851"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="852"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ToStringIP();</highlight></codeline>
<codeline lineno="853"><highlight class="normal">}</highlight></codeline>
<codeline lineno="854"><highlight class="normal"></highlight></codeline>
<codeline lineno="855" refid="netbase_8cpp_1a6cc88956853ab8dc9586d55cda059934" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="netbase_8cpp_1a6cc88956853ab8dc9586d55cda059934" kindref="member">operator==</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_c_net_addr" kindref="compound">CNetAddr</ref>&amp;<sp/>a,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_c_net_addr" kindref="compound">CNetAddr</ref>&amp;<sp/>b)</highlight></codeline>
<codeline lineno="856"><highlight class="normal">{</highlight></codeline>
<codeline lineno="857"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>USE_NATIVE_I2P</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="858"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(memcmp(a.<ref refid="class_c_net_addr_1acff7ce68f33f8dfbfe6d79d80928d417" kindref="member">ip</ref>,<sp/>b.<ref refid="class_c_net_addr_1acff7ce68f33f8dfbfe6d79d80928d417" kindref="member">ip</ref>,<sp/>16)<sp/>==<sp/>0<sp/>&amp;&amp;<sp/>memcmp(a.i2pDest,<sp/>b.i2pDest,<sp/>NATIVE_I2P_DESTINATION_SIZE)<sp/>==<sp/>0);</highlight></codeline>
<codeline lineno="859"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="860"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(memcmp(a.<ref refid="class_c_net_addr_1acff7ce68f33f8dfbfe6d79d80928d417" kindref="member">ip</ref>,<sp/>b.<ref refid="class_c_net_addr_1acff7ce68f33f8dfbfe6d79d80928d417" kindref="member">ip</ref>,<sp/>16)<sp/>==<sp/>0);</highlight></codeline>
<codeline lineno="861"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="862"><highlight class="normal">}</highlight></codeline>
<codeline lineno="863"><highlight class="normal"></highlight></codeline>
<codeline lineno="864" refid="netbase_8cpp_1ac361eb83c41464359dfb1dfc296c3a4c" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="netbase_8cpp_1ac361eb83c41464359dfb1dfc296c3a4c" kindref="member">operator!=</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_c_net_addr" kindref="compound">CNetAddr</ref>&amp;<sp/>a,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_c_net_addr" kindref="compound">CNetAddr</ref>&amp;<sp/>b)</highlight></codeline>
<codeline lineno="865"><highlight class="normal">{</highlight></codeline>
<codeline lineno="866"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>USE_NATIVE_I2P</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="867"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(memcmp(a.<ref refid="class_c_net_addr_1acff7ce68f33f8dfbfe6d79d80928d417" kindref="member">ip</ref>,<sp/>b.<ref refid="class_c_net_addr_1acff7ce68f33f8dfbfe6d79d80928d417" kindref="member">ip</ref>,<sp/>16)<sp/>!=<sp/>0<sp/>||<sp/>memcmp(a.i2pDest,<sp/>b.i2pDest,<sp/>NATIVE_I2P_DESTINATION_SIZE)<sp/>!=<sp/>0);</highlight></codeline>
<codeline lineno="868"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="869"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(memcmp(a.<ref refid="class_c_net_addr_1acff7ce68f33f8dfbfe6d79d80928d417" kindref="member">ip</ref>,<sp/>b.<ref refid="class_c_net_addr_1acff7ce68f33f8dfbfe6d79d80928d417" kindref="member">ip</ref>,<sp/>16)<sp/>!=<sp/>0);</highlight></codeline>
<codeline lineno="870"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="871"><highlight class="normal">}</highlight></codeline>
<codeline lineno="872"><highlight class="normal"></highlight></codeline>
<codeline lineno="873" refid="netbase_8cpp_1af220590d55a24354e2ba2e547e34fd77" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="netbase_8cpp_1af220590d55a24354e2ba2e547e34fd77" kindref="member">operator&lt;</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_c_net_addr" kindref="compound">CNetAddr</ref>&amp;<sp/>a,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_c_net_addr" kindref="compound">CNetAddr</ref>&amp;<sp/>b)</highlight></codeline>
<codeline lineno="874"><highlight class="normal">{</highlight></codeline>
<codeline lineno="875"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>USE_NATIVE_I2P</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="876"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(memcmp(a.<ref refid="class_c_net_addr_1acff7ce68f33f8dfbfe6d79d80928d417" kindref="member">ip</ref>,<sp/>b.<ref refid="class_c_net_addr_1acff7ce68f33f8dfbfe6d79d80928d417" kindref="member">ip</ref>,<sp/>16)<sp/>&lt;<sp/>0<sp/>||<sp/>(memcmp(a.<ref refid="class_c_net_addr_1acff7ce68f33f8dfbfe6d79d80928d417" kindref="member">ip</ref>,<sp/>b.<ref refid="class_c_net_addr_1acff7ce68f33f8dfbfe6d79d80928d417" kindref="member">ip</ref>,<sp/>16)<sp/>==<sp/>0<sp/>&amp;&amp;<sp/>memcmp(a.i2pDest,<sp/>b.i2pDest,<sp/>NATIVE_I2P_DESTINATION_SIZE)<sp/>&lt;<sp/>0));</highlight></codeline>
<codeline lineno="877"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="878"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(memcmp(a.<ref refid="class_c_net_addr_1acff7ce68f33f8dfbfe6d79d80928d417" kindref="member">ip</ref>,<sp/>b.<ref refid="class_c_net_addr_1acff7ce68f33f8dfbfe6d79d80928d417" kindref="member">ip</ref>,<sp/>16)<sp/>&lt;<sp/>0);</highlight></codeline>
<codeline lineno="879"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="880"><highlight class="normal">}</highlight></codeline>
<codeline lineno="881"><highlight class="normal"></highlight></codeline>
<codeline lineno="882" refid="class_c_net_addr_1aa2e2c78db01a6a27d6a2740f2ba43e90" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="class_c_net_addr_1aa2e2c78db01a6a27d6a2740f2ba43e90" kindref="member">CNetAddr::GetInAddr</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/>in_addr*<sp/>pipv4Addr)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="883"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="884"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!IsIPv4())</highlight></codeline>
<codeline lineno="885"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="886"><highlight class="normal"><sp/><sp/><sp/><sp/>memcpy(pipv4Addr,<sp/>ip+12,<sp/>4);</highlight></codeline>
<codeline lineno="887"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="888"><highlight class="normal">}</highlight></codeline>
<codeline lineno="889"><highlight class="normal"></highlight></codeline>
<codeline lineno="890" refid="class_c_net_addr_1add7811be50f5fe60c4fa65b461dea98c" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="class_c_net_addr_1add7811be50f5fe60c4fa65b461dea98c" kindref="member">CNetAddr::GetIn6Addr</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/>in6_addr*<sp/>pipv6Addr)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="891"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="892"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>USE_NATIVE_I2P</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="893"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(IsNativeI2P())</highlight></codeline>
<codeline lineno="894"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="895"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="896"><highlight class="normal"><sp/><sp/><sp/><sp/>memcpy(pipv6Addr,<sp/>ip,<sp/>16);</highlight></codeline>
<codeline lineno="897"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="898"><highlight class="normal">}</highlight></codeline>
<codeline lineno="899"><highlight class="normal"></highlight></codeline>
<codeline lineno="900"><highlight class="normal"></highlight><highlight class="comment">//<sp/>get<sp/>canonical<sp/>identifier<sp/>of<sp/>an<sp/>address&apos;<sp/>group</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="901"><highlight class="normal"></highlight><highlight class="comment">//<sp/>no<sp/>two<sp/>connections<sp/>will<sp/>be<sp/>attempted<sp/>to<sp/>addresses<sp/>with<sp/>the<sp/>same<sp/>group</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="902" refid="class_c_net_addr_1af196f306433562cb088dc83fd314a267" refkind="member"><highlight class="normal">std::vector&lt;unsigned<sp/>char&gt;<sp/><ref refid="class_c_net_addr_1af196f306433562cb088dc83fd314a267" kindref="member">CNetAddr::GetGroup</ref>()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="903"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="904"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;unsigned<sp/>char&gt;<sp/>vchRet;</highlight></codeline>
<codeline lineno="905"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nClass<sp/>=<sp/><ref refid="netbase_8h_1acc9a38c714afe79b5035cb36f560dac3a9a9d9355a4923b33382f9894ba80688d" kindref="member">NET_IPV6</ref>;</highlight></codeline>
<codeline lineno="906"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nStartByte<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="907"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nBits<sp/>=<sp/>16;</highlight></codeline>
<codeline lineno="908"><highlight class="normal"></highlight></codeline>
<codeline lineno="909"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>USE_NATIVE_I2P</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="910"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(IsNativeI2P())</highlight></codeline>
<codeline lineno="911"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="912"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vchRet.resize(NATIVE_I2P_DESTINATION_SIZE<sp/>+<sp/>1);</highlight></codeline>
<codeline lineno="913"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vchRet[0]<sp/>=<sp/>NET_NATIVE_I2P;</highlight></codeline>
<codeline lineno="914"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>memcpy(&amp;vchRet[1],<sp/>i2pDest,<sp/>NATIVE_I2P_DESTINATION_SIZE);</highlight></codeline>
<codeline lineno="915"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>vchRet;</highlight></codeline>
<codeline lineno="916"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="917"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="918"><highlight class="normal"></highlight></codeline>
<codeline lineno="919"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>all<sp/>local<sp/>addresses<sp/>belong<sp/>to<sp/>the<sp/>same<sp/>group</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="920"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="net_8cpp_1a16fa1bd4d34c4c29c90903fc3cdf7517" kindref="member">IsLocal</ref>())</highlight></codeline>
<codeline lineno="921"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="922"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nClass<sp/>=<sp/>255;</highlight></codeline>
<codeline lineno="923"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nBits<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="924"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="925"><highlight class="normal"></highlight></codeline>
<codeline lineno="926"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>all<sp/>unroutable<sp/>addresses<sp/>belong<sp/>to<sp/>the<sp/>same<sp/>group</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="927"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!IsRoutable())</highlight></codeline>
<codeline lineno="928"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="929"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nClass<sp/>=<sp/><ref refid="netbase_8h_1acc9a38c714afe79b5035cb36f560dac3af66f60a80e2a5d99813c3f322cf8a6e1" kindref="member">NET_UNROUTABLE</ref>;</highlight></codeline>
<codeline lineno="930"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nBits<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="931"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="932"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>for<sp/>IPv4<sp/>addresses,<sp/>&apos;1&apos;<sp/>+<sp/>the<sp/>16<sp/>higher-order<sp/>bits<sp/>of<sp/>the<sp/>IP</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="933"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>includes<sp/>mapped<sp/>IPv4,<sp/>SIIT<sp/>translated<sp/>IPv4,<sp/>and<sp/>the<sp/>well-known<sp/>prefix</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="934"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(IsIPv4()<sp/>||<sp/>IsRFC6145()<sp/>||<sp/>IsRFC6052())</highlight></codeline>
<codeline lineno="935"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="936"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nClass<sp/>=<sp/><ref refid="netbase_8h_1acc9a38c714afe79b5035cb36f560dac3ae1598b317168b96919bc3131ee149ebb" kindref="member">NET_IPV4</ref>;</highlight></codeline>
<codeline lineno="937"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nStartByte<sp/>=<sp/>12;</highlight></codeline>
<codeline lineno="938"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="939"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>for<sp/>6to4<sp/>tunnelled<sp/>addresses,<sp/>use<sp/>the<sp/>encapsulated<sp/>IPv4<sp/>address</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="940"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(IsRFC3964())</highlight></codeline>
<codeline lineno="941"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="942"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nClass<sp/>=<sp/><ref refid="netbase_8h_1acc9a38c714afe79b5035cb36f560dac3ae1598b317168b96919bc3131ee149ebb" kindref="member">NET_IPV4</ref>;</highlight></codeline>
<codeline lineno="943"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nStartByte<sp/>=<sp/>2;</highlight></codeline>
<codeline lineno="944"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="945"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>for<sp/>Teredo-tunnelled<sp/>IPv6<sp/>addresses,<sp/>use<sp/>the<sp/>encapsulated<sp/>IPv4<sp/>address</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="946"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(IsRFC4380())</highlight></codeline>
<codeline lineno="947"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="948"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vchRet.push_back(<ref refid="netbase_8h_1acc9a38c714afe79b5035cb36f560dac3ae1598b317168b96919bc3131ee149ebb" kindref="member">NET_IPV4</ref>);</highlight></codeline>
<codeline lineno="949"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vchRet.push_back(GetByte(3)<sp/>^<sp/>0xFF);</highlight></codeline>
<codeline lineno="950"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vchRet.push_back(GetByte(2)<sp/>^<sp/>0xFF);</highlight></codeline>
<codeline lineno="951"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>vchRet;</highlight></codeline>
<codeline lineno="952"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="953"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(IsTor())</highlight></codeline>
<codeline lineno="954"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="955"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nClass<sp/>=<sp/><ref refid="netbase_8h_1acc9a38c714afe79b5035cb36f560dac3a9defff41db522fc865d58fc4e7646e9f" kindref="member">NET_TOR</ref>;</highlight></codeline>
<codeline lineno="956"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nStartByte<sp/>=<sp/>6;</highlight></codeline>
<codeline lineno="957"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nBits<sp/>=<sp/>4;</highlight></codeline>
<codeline lineno="958"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="959"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(IsI2P())</highlight></codeline>
<codeline lineno="960"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="961"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nClass<sp/>=<sp/><ref refid="netbase_8h_1acc9a38c714afe79b5035cb36f560dac3a0cb8b5dbd08567fffe61bc1b3942aedd" kindref="member">NET_I2P</ref>;</highlight></codeline>
<codeline lineno="962"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nStartByte<sp/>=<sp/>6;</highlight></codeline>
<codeline lineno="963"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nBits<sp/>=<sp/>4;</highlight></codeline>
<codeline lineno="964"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="965"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>for<sp/>he.net,<sp/>use<sp/>/36<sp/>groups</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="966"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(GetByte(15)<sp/>==<sp/>0x20<sp/>&amp;&amp;<sp/>GetByte(14)<sp/>==<sp/>0x11<sp/>&amp;&amp;<sp/>GetByte(13)<sp/>==<sp/>0x04<sp/>&amp;&amp;<sp/>GetByte(12)<sp/>==<sp/>0x70)</highlight></codeline>
<codeline lineno="967"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nBits<sp/>=<sp/>36;</highlight></codeline>
<codeline lineno="968"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>for<sp/>the<sp/>rest<sp/>of<sp/>the<sp/>IPv6<sp/>network,<sp/>use<sp/>/32<sp/>groups</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="969"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="970"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nBits<sp/>=<sp/>32;</highlight></codeline>
<codeline lineno="971"><highlight class="normal"></highlight></codeline>
<codeline lineno="972"><highlight class="normal"><sp/><sp/><sp/><sp/>vchRet.push_back(nClass);</highlight></codeline>
<codeline lineno="973"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(nBits<sp/>&gt;=<sp/>8)</highlight></codeline>
<codeline lineno="974"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="975"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vchRet.push_back(GetByte(15<sp/>-<sp/>nStartByte));</highlight></codeline>
<codeline lineno="976"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nStartByte++;</highlight></codeline>
<codeline lineno="977"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nBits<sp/>-=<sp/>8;</highlight></codeline>
<codeline lineno="978"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="979"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(nBits<sp/>&gt;<sp/>0)</highlight></codeline>
<codeline lineno="980"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vchRet.push_back(GetByte(15<sp/>-<sp/>nStartByte)<sp/>|<sp/>((1<sp/>&lt;&lt;<sp/>nBits)<sp/>-<sp/>1));</highlight></codeline>
<codeline lineno="981"><highlight class="normal"></highlight></codeline>
<codeline lineno="982"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>vchRet;</highlight></codeline>
<codeline lineno="983"><highlight class="normal">}</highlight></codeline>
<codeline lineno="984"><highlight class="normal"></highlight></codeline>
<codeline lineno="985" refid="class_c_net_addr_1a4c94fea8695ef97adf5b2a18e1074308" refkind="member"><highlight class="normal"><ref refid="stdint_8h_1aaa5d1cd013383c889537491c3cfd9aad" kindref="member">uint64_t</ref><sp/><ref refid="class_c_net_addr_1a4c94fea8695ef97adf5b2a18e1074308" kindref="member">CNetAddr::GetHash</ref>()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="986"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="987"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classuint256" kindref="compound">uint256</ref><sp/><ref refid="cache_8cc_1a11ecb029164e055f28f4123ce3748862" kindref="member">hash</ref><sp/>=<sp/><ref refid="hash_8h_1ab3f6c437460137530d86e09c2c102e99" kindref="member">Hash</ref>(&amp;ip[0],<sp/>&amp;ip[16]);</highlight></codeline>
<codeline lineno="988"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="stdint_8h_1aaa5d1cd013383c889537491c3cfd9aad" kindref="member">uint64_t</ref><sp/>nRet;</highlight></codeline>
<codeline lineno="989"><highlight class="normal"><sp/><sp/><sp/><sp/>memcpy(&amp;nRet,<sp/>&amp;hash,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(nRet));</highlight></codeline>
<codeline lineno="990"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>nRet;</highlight></codeline>
<codeline lineno="991"><highlight class="normal">}</highlight></codeline>
<codeline lineno="992"><highlight class="normal"></highlight></codeline>
<codeline lineno="993"><highlight class="normal"></highlight><highlight class="comment">//<sp/>private<sp/>extensions<sp/>to<sp/>enum<sp/>Network,<sp/>only<sp/>returned<sp/>by<sp/>GetExtNetwork,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="994"><highlight class="normal"></highlight><highlight class="comment">//<sp/>and<sp/>only<sp/>used<sp/>in<sp/>GetReachabilityFrom</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="995"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>NET_UNKNOWN<sp/>=<sp/><ref refid="netbase_8h_1acc9a38c714afe79b5035cb36f560dac3a675b0737d6c404a5de25e324c166a4b5" kindref="member">NET_MAX</ref><sp/>+<sp/>0;</highlight></codeline>
<codeline lineno="996"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>NET_TEREDO<sp/><sp/>=<sp/><ref refid="netbase_8h_1acc9a38c714afe79b5035cb36f560dac3a675b0737d6c404a5de25e324c166a4b5" kindref="member">NET_MAX</ref><sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="997"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>GetExtNetwork(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_c_net_addr" kindref="compound">CNetAddr</ref><sp/>*addr)</highlight></codeline>
<codeline lineno="998"><highlight class="normal">{</highlight></codeline>
<codeline lineno="999"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(addr<sp/>==<sp/>NULL)</highlight></codeline>
<codeline lineno="1000"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NET_UNKNOWN;</highlight></codeline>
<codeline lineno="1001"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(addr-&gt;<ref refid="class_c_net_addr_1afc6e370bb97c97f83260bba898ec4731" kindref="member">IsRFC4380</ref>())</highlight></codeline>
<codeline lineno="1002"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NET_TEREDO;</highlight></codeline>
<codeline lineno="1003"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>addr-&gt;<ref refid="class_c_net_addr_1a34a4760424f5c51998fc3baf82ccb5c8" kindref="member">GetNetwork</ref>();</highlight></codeline>
<codeline lineno="1004"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1005"><highlight class="normal"></highlight></codeline>
<codeline lineno="1007" refid="class_c_net_addr_1a3007deff5e9872d620952362ae0ef144" refkind="member"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="class_c_net_addr_1a3007deff5e9872d620952362ae0ef144" kindref="member">CNetAddr::GetReachabilityFrom</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_c_net_addr" kindref="compound">CNetAddr</ref><sp/>*paddrPartner)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="1008"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1009"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/>Reachability<sp/>{</highlight></codeline>
<codeline lineno="1010"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>REACH_UNREACHABLE,</highlight></codeline>
<codeline lineno="1011"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>REACH_DEFAULT,</highlight></codeline>
<codeline lineno="1012"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>REACH_TEREDO,</highlight></codeline>
<codeline lineno="1013"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>REACH_IPV6_WEAK,</highlight></codeline>
<codeline lineno="1014"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>REACH_IPV4,</highlight></codeline>
<codeline lineno="1015"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>REACH_IPV6_STRONG,</highlight></codeline>
<codeline lineno="1016"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>REACH_PRIVATE</highlight></codeline>
<codeline lineno="1017"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="1018"><highlight class="normal"></highlight></codeline>
<codeline lineno="1019"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!IsRoutable())</highlight></codeline>
<codeline lineno="1020"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>REACH_UNREACHABLE;</highlight></codeline>
<codeline lineno="1021"><highlight class="normal"></highlight></codeline>
<codeline lineno="1022"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ourNet<sp/>=<sp/>GetExtNetwork(</highlight><highlight class="keyword">this</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1023"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>theirNet<sp/>=<sp/>GetExtNetwork(paddrPartner);</highlight></codeline>
<codeline lineno="1024"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>fTunnel<sp/>=<sp/>IsRFC3964()<sp/>||<sp/>IsRFC6052()<sp/>||<sp/>IsRFC6145();</highlight></codeline>
<codeline lineno="1025"><highlight class="normal"></highlight></codeline>
<codeline lineno="1026"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal">(theirNet)<sp/>{</highlight></codeline>
<codeline lineno="1027"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="netbase_8h_1acc9a38c714afe79b5035cb36f560dac3ae1598b317168b96919bc3131ee149ebb" kindref="member">NET_IPV4</ref>:</highlight></codeline>
<codeline lineno="1028"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal">(ourNet)<sp/>{</highlight></codeline>
<codeline lineno="1029"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>REACH_DEFAULT;</highlight></codeline>
<codeline lineno="1030"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="netbase_8h_1acc9a38c714afe79b5035cb36f560dac3ae1598b317168b96919bc3131ee149ebb" kindref="member">NET_IPV4</ref>:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>REACH_IPV4;</highlight></codeline>
<codeline lineno="1031"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1032"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="netbase_8h_1acc9a38c714afe79b5035cb36f560dac3a9a9d9355a4923b33382f9894ba80688d" kindref="member">NET_IPV6</ref>:</highlight></codeline>
<codeline lineno="1033"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal">(ourNet)<sp/>{</highlight></codeline>
<codeline lineno="1034"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>REACH_DEFAULT;</highlight></codeline>
<codeline lineno="1035"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>NET_TEREDO:<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>REACH_TEREDO;</highlight></codeline>
<codeline lineno="1036"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="netbase_8h_1acc9a38c714afe79b5035cb36f560dac3ae1598b317168b96919bc3131ee149ebb" kindref="member">NET_IPV4</ref>:<sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>REACH_IPV4;</highlight></codeline>
<codeline lineno="1037"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="netbase_8h_1acc9a38c714afe79b5035cb36f560dac3a9a9d9355a4923b33382f9894ba80688d" kindref="member">NET_IPV6</ref>:<sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>fTunnel<sp/>?<sp/>REACH_IPV6_WEAK<sp/>:<sp/>REACH_IPV6_STRONG;<sp/></highlight><highlight class="comment">//<sp/>only<sp/>prefer<sp/>giving<sp/>our<sp/>IPv6<sp/>address<sp/>if<sp/>it&apos;s<sp/>not<sp/>tunnelled</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1038"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1039"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="netbase_8h_1acc9a38c714afe79b5035cb36f560dac3a9defff41db522fc865d58fc4e7646e9f" kindref="member">NET_TOR</ref>:</highlight></codeline>
<codeline lineno="1040"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal">(ourNet)<sp/>{</highlight></codeline>
<codeline lineno="1041"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>REACH_DEFAULT;</highlight></codeline>
<codeline lineno="1042"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="netbase_8h_1acc9a38c714afe79b5035cb36f560dac3ae1598b317168b96919bc3131ee149ebb" kindref="member">NET_IPV4</ref>:<sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>REACH_IPV4;<sp/></highlight><highlight class="comment">//<sp/>Tor<sp/>users<sp/>can<sp/>connect<sp/>to<sp/>IPv4<sp/>as<sp/>well</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1043"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="netbase_8h_1acc9a38c714afe79b5035cb36f560dac3a9defff41db522fc865d58fc4e7646e9f" kindref="member">NET_TOR</ref>:<sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>REACH_PRIVATE;</highlight></codeline>
<codeline lineno="1044"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1045"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="netbase_8h_1acc9a38c714afe79b5035cb36f560dac3a0cb8b5dbd08567fffe61bc1b3942aedd" kindref="member">NET_I2P</ref>:</highlight></codeline>
<codeline lineno="1046"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal">(ourNet)<sp/>{</highlight></codeline>
<codeline lineno="1047"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>REACH_DEFAULT;</highlight></codeline>
<codeline lineno="1048"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="netbase_8h_1acc9a38c714afe79b5035cb36f560dac3a0cb8b5dbd08567fffe61bc1b3942aedd" kindref="member">NET_I2P</ref>:<sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>REACH_PRIVATE;</highlight></codeline>
<codeline lineno="1049"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1050"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>NET_TEREDO:</highlight></codeline>
<codeline lineno="1051"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal">(ourNet)<sp/>{</highlight></codeline>
<codeline lineno="1052"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>REACH_DEFAULT;</highlight></codeline>
<codeline lineno="1053"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>NET_TEREDO:<sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>REACH_TEREDO;</highlight></codeline>
<codeline lineno="1054"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="netbase_8h_1acc9a38c714afe79b5035cb36f560dac3a9a9d9355a4923b33382f9894ba80688d" kindref="member">NET_IPV6</ref>:<sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>REACH_IPV6_WEAK;</highlight></codeline>
<codeline lineno="1055"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="netbase_8h_1acc9a38c714afe79b5035cb36f560dac3ae1598b317168b96919bc3131ee149ebb" kindref="member">NET_IPV4</ref>:<sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>REACH_IPV4;</highlight></codeline>
<codeline lineno="1056"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1057"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>NET_UNKNOWN:</highlight></codeline>
<codeline lineno="1058"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="netbase_8h_1acc9a38c714afe79b5035cb36f560dac3af66f60a80e2a5d99813c3f322cf8a6e1" kindref="member">NET_UNROUTABLE</ref>:</highlight></codeline>
<codeline lineno="1059"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1060"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal">(ourNet)<sp/>{</highlight></codeline>
<codeline lineno="1061"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>REACH_DEFAULT;</highlight></codeline>
<codeline lineno="1062"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>NET_TEREDO:<sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>REACH_TEREDO;</highlight></codeline>
<codeline lineno="1063"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="netbase_8h_1acc9a38c714afe79b5035cb36f560dac3a9a9d9355a4923b33382f9894ba80688d" kindref="member">NET_IPV6</ref>:<sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>REACH_IPV6_WEAK;</highlight></codeline>
<codeline lineno="1064"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="netbase_8h_1acc9a38c714afe79b5035cb36f560dac3ae1598b317168b96919bc3131ee149ebb" kindref="member">NET_IPV4</ref>:<sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>REACH_IPV4;</highlight></codeline>
<codeline lineno="1065"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="netbase_8h_1acc9a38c714afe79b5035cb36f560dac3a0cb8b5dbd08567fffe61bc1b3942aedd" kindref="member">NET_I2P</ref>:<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>REACH_PRIVATE;<sp/></highlight><highlight class="comment">//<sp/>assume<sp/>connections<sp/>from<sp/>unroutable<sp/>addresses<sp/>are</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1066"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="netbase_8h_1acc9a38c714afe79b5035cb36f560dac3a9defff41db522fc865d58fc4e7646e9f" kindref="member">NET_TOR</ref>:<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>REACH_PRIVATE;<sp/></highlight><highlight class="comment">//<sp/>either<sp/>from<sp/>Tor/I2P,<sp/>or<sp/>don&apos;t<sp/>care<sp/>about<sp/>our<sp/>address</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1067"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1068"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1069"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1070"><highlight class="normal"></highlight></codeline>
<codeline lineno="1071" refid="class_c_service_1aee07d7f18e672f16d26359e3cab779ff" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_c_service_1aee07d7f18e672f16d26359e3cab779ff" kindref="member">CService::Init</ref>()</highlight></codeline>
<codeline lineno="1072"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1073"><highlight class="normal"><sp/><sp/><sp/><sp/>port<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1074"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1075"><highlight class="normal"></highlight></codeline>
<codeline lineno="1076" refid="class_c_service_1a3003da1c50f2135123ebb3109340b9b2" refkind="member"><highlight class="normal"><ref refid="class_c_service_1a3003da1c50f2135123ebb3109340b9b2" kindref="member">CService::CService</ref>()</highlight></codeline>
<codeline lineno="1077"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1078"><highlight class="normal"><sp/><sp/><sp/><sp/>Init();</highlight></codeline>
<codeline lineno="1079"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1080"><highlight class="normal"></highlight></codeline>
<codeline lineno="1081" refid="class_c_service_1a43a0d18387ce3837d48020da47a1087c" refkind="member"><highlight class="normal"><ref refid="class_c_service_1a3003da1c50f2135123ebb3109340b9b2" kindref="member">CService::CService</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_c_net_addr" kindref="compound">CNetAddr</ref>&amp;<sp/>cip,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">short</highlight><highlight class="normal"><sp/>portIn)<sp/>:<sp/><ref refid="class_c_net_addr" kindref="compound">CNetAddr</ref>(cip),<sp/>port(portIn)</highlight></codeline>
<codeline lineno="1082"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1083"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1084"><highlight class="normal"></highlight></codeline>
<codeline lineno="1085" refid="class_c_service_1a1fcc14e589f6d3e92b43707a5f71368f" refkind="member"><highlight class="normal"><ref refid="class_c_service_1a3003da1c50f2135123ebb3109340b9b2" kindref="member">CService::CService</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/>in_addr&amp;<sp/>ipv4Addr,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">short</highlight><highlight class="normal"><sp/>portIn)<sp/>:<sp/><ref refid="class_c_net_addr" kindref="compound">CNetAddr</ref>(ipv4Addr),<sp/>port(portIn)</highlight></codeline>
<codeline lineno="1086"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1087"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1088"><highlight class="normal"></highlight></codeline>
<codeline lineno="1089" refid="class_c_service_1a92fd246e176f01266cb36beae0c8f4fe" refkind="member"><highlight class="normal"><ref refid="class_c_service_1a3003da1c50f2135123ebb3109340b9b2" kindref="member">CService::CService</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/>in6_addr&amp;<sp/>ipv6Addr,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">short</highlight><highlight class="normal"><sp/>portIn)<sp/>:<sp/><ref refid="class_c_net_addr" kindref="compound">CNetAddr</ref>(ipv6Addr),<sp/>port(portIn)</highlight></codeline>
<codeline lineno="1090"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1091"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1092"><highlight class="normal"></highlight></codeline>
<codeline lineno="1093" refid="class_c_service_1aa54fd9204530445647cd3d45056881e9" refkind="member"><highlight class="normal"><ref refid="class_c_service_1a3003da1c50f2135123ebb3109340b9b2" kindref="member">CService::CService</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/>sockaddr_in&amp;<sp/>addr)<sp/>:<sp/><ref refid="class_c_net_addr" kindref="compound">CNetAddr</ref>(addr.sin_addr),<sp/>port(ntohs(addr.sin_port))</highlight></codeline>
<codeline lineno="1094"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1095"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(addr.sin_family<sp/>==<sp/>AF_INET);</highlight></codeline>
<codeline lineno="1096"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1097"><highlight class="normal"></highlight></codeline>
<codeline lineno="1098" refid="class_c_service_1ac0eb3107507be78cc683e7a7fa8d56e4" refkind="member"><highlight class="normal"><ref refid="class_c_service_1a3003da1c50f2135123ebb3109340b9b2" kindref="member">CService::CService</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/>sockaddr_in6<sp/>&amp;addr)<sp/>:<sp/><ref refid="class_c_net_addr" kindref="compound">CNetAddr</ref>(addr.sin6_addr),<sp/>port(ntohs(addr.sin6_port))</highlight></codeline>
<codeline lineno="1099"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1100"><highlight class="normal"><sp/><sp/><sp/>assert(addr.sin6_family<sp/>==<sp/>AF_INET6);</highlight></codeline>
<codeline lineno="1101"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1102"><highlight class="normal"></highlight></codeline>
<codeline lineno="1103" refid="class_c_service_1a77782219f5d85f326b4c089cb2636e6f" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="class_c_service_1a77782219f5d85f326b4c089cb2636e6f" kindref="member">CService::SetSockAddr</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/>sockaddr<sp/>*paddr)</highlight></codeline>
<codeline lineno="1104"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1105"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(paddr-&gt;sa_family)<sp/>{</highlight></codeline>
<codeline lineno="1106"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>AF_INET:</highlight></codeline>
<codeline lineno="1107"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal"><sp/>=<sp/><ref refid="class_c_service_1a3003da1c50f2135123ebb3109340b9b2" kindref="member">CService</ref>(*(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/>sockaddr_in*)paddr);</highlight></codeline>
<codeline lineno="1108"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1109"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>AF_INET6:</highlight></codeline>
<codeline lineno="1110"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal"><sp/>=<sp/><ref refid="class_c_service_1a3003da1c50f2135123ebb3109340b9b2" kindref="member">CService</ref>(*(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/>sockaddr_in6*)paddr);</highlight></codeline>
<codeline lineno="1111"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1112"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1113"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1114"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1115"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1116"><highlight class="normal"></highlight></codeline>
<codeline lineno="1117" refid="class_c_service_1ab8f5f4ae4e99a4edad8ba48642e36137" refkind="member"><highlight class="normal"><ref refid="class_c_service_1a3003da1c50f2135123ebb3109340b9b2" kindref="member">CService::CService</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*pszIpPort,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>fAllowLookup)</highlight></codeline>
<codeline lineno="1118"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1119"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_c_service_1aee07d7f18e672f16d26359e3cab779ff" kindref="member">Init</ref>();</highlight></codeline>
<codeline lineno="1120"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_c_service" kindref="compound">CService</ref><sp/><ref refid="class_c_net_addr_1acff7ce68f33f8dfbfe6d79d80928d417" kindref="member">ip</ref>;</highlight></codeline>
<codeline lineno="1121"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="netbase_8cpp_1a56a2f4bcb9fb77b5efe358f804f642cc" kindref="member">Lookup</ref>(pszIpPort,<sp/>ip,<sp/>0,<sp/>fAllowLookup))</highlight></codeline>
<codeline lineno="1122"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal"><sp/>=<sp/><ref refid="class_c_net_addr_1acff7ce68f33f8dfbfe6d79d80928d417" kindref="member">ip</ref>;</highlight></codeline>
<codeline lineno="1123"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1124"><highlight class="normal"></highlight></codeline>
<codeline lineno="1125" refid="class_c_service_1a75b2a3cfa16642b0fcd74382203a9fdc" refkind="member"><highlight class="normal"><ref refid="class_c_service_1a3003da1c50f2135123ebb3109340b9b2" kindref="member">CService::CService</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*pszIpPort,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>portDefault,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>fAllowLookup)</highlight></codeline>
<codeline lineno="1126"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1127"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_c_service_1aee07d7f18e672f16d26359e3cab779ff" kindref="member">Init</ref>();</highlight></codeline>
<codeline lineno="1128"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_c_service" kindref="compound">CService</ref><sp/><ref refid="class_c_net_addr_1acff7ce68f33f8dfbfe6d79d80928d417" kindref="member">ip</ref>;</highlight></codeline>
<codeline lineno="1129"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="netbase_8cpp_1a56a2f4bcb9fb77b5efe358f804f642cc" kindref="member">Lookup</ref>(pszIpPort,<sp/>ip,<sp/>portDefault,<sp/>fAllowLookup))</highlight></codeline>
<codeline lineno="1130"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal"><sp/>=<sp/><ref refid="class_c_net_addr_1acff7ce68f33f8dfbfe6d79d80928d417" kindref="member">ip</ref>;</highlight></codeline>
<codeline lineno="1131"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1132"><highlight class="normal"></highlight></codeline>
<codeline lineno="1133" refid="class_c_service_1a19a7a713dd9a30b2f78260e61d9a2604" refkind="member"><highlight class="normal"><ref refid="class_c_service_1a3003da1c50f2135123ebb3109340b9b2" kindref="member">CService::CService</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;strIpPort,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>fAllowLookup)</highlight></codeline>
<codeline lineno="1134"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1135"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_c_service_1aee07d7f18e672f16d26359e3cab779ff" kindref="member">Init</ref>();</highlight></codeline>
<codeline lineno="1136"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_c_service" kindref="compound">CService</ref><sp/><ref refid="class_c_net_addr_1acff7ce68f33f8dfbfe6d79d80928d417" kindref="member">ip</ref>;</highlight></codeline>
<codeline lineno="1137"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="netbase_8cpp_1a56a2f4bcb9fb77b5efe358f804f642cc" kindref="member">Lookup</ref>(strIpPort.c_str(),<sp/><ref refid="class_c_net_addr_1acff7ce68f33f8dfbfe6d79d80928d417" kindref="member">ip</ref>,<sp/>0,<sp/>fAllowLookup))</highlight></codeline>
<codeline lineno="1138"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal"><sp/>=<sp/><ref refid="class_c_net_addr_1acff7ce68f33f8dfbfe6d79d80928d417" kindref="member">ip</ref>;</highlight></codeline>
<codeline lineno="1139"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1140"><highlight class="normal"></highlight></codeline>
<codeline lineno="1141" refid="class_c_service_1a677f74b3520148f3e47a19bb9986922b" refkind="member"><highlight class="normal"><ref refid="class_c_service_1a3003da1c50f2135123ebb3109340b9b2" kindref="member">CService::CService</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;strIpPort,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>portDefault,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>fAllowLookup)</highlight></codeline>
<codeline lineno="1142"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1143"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_c_service_1aee07d7f18e672f16d26359e3cab779ff" kindref="member">Init</ref>();</highlight></codeline>
<codeline lineno="1144"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_c_service" kindref="compound">CService</ref><sp/><ref refid="class_c_net_addr_1acff7ce68f33f8dfbfe6d79d80928d417" kindref="member">ip</ref>;</highlight></codeline>
<codeline lineno="1145"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="netbase_8cpp_1a56a2f4bcb9fb77b5efe358f804f642cc" kindref="member">Lookup</ref>(strIpPort.c_str(),<sp/><ref refid="class_c_net_addr_1acff7ce68f33f8dfbfe6d79d80928d417" kindref="member">ip</ref>,<sp/>portDefault,<sp/>fAllowLookup))</highlight></codeline>
<codeline lineno="1146"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal"><sp/>=<sp/><ref refid="class_c_net_addr_1acff7ce68f33f8dfbfe6d79d80928d417" kindref="member">ip</ref>;</highlight></codeline>
<codeline lineno="1147"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1148"><highlight class="normal"></highlight></codeline>
<codeline lineno="1149" refid="class_c_service_1a49df6ecaf59be814632c4d7755f26637" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">short</highlight><highlight class="normal"><sp/><ref refid="class_c_service_1a49df6ecaf59be814632c4d7755f26637" kindref="member">CService::GetPort</ref>()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="1150"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1151"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="class_c_service_1aef17734203dc2125cbdf4d23e50be410" kindref="member">port</ref>;</highlight></codeline>
<codeline lineno="1152"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1153"><highlight class="normal"></highlight></codeline>
<codeline lineno="1154" refid="netbase_8cpp_1a7abc2516fa7e015cafcf9b98bc33e2ea" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="netbase_8cpp_1a6cc88956853ab8dc9586d55cda059934" kindref="member">operator==</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_c_service" kindref="compound">CService</ref>&amp;<sp/>a,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_c_service" kindref="compound">CService</ref>&amp;<sp/>b)</highlight></codeline>
<codeline lineno="1155"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1156"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="class_c_net_addr" kindref="compound">CNetAddr</ref>)a<sp/>==<sp/>(<ref refid="class_c_net_addr" kindref="compound">CNetAddr</ref>)b<sp/>&amp;&amp;<sp/>a.<ref refid="class_c_service_1aef17734203dc2125cbdf4d23e50be410" kindref="member">port</ref><sp/>==<sp/>b.<ref refid="class_c_service_1aef17734203dc2125cbdf4d23e50be410" kindref="member">port</ref>;</highlight></codeline>
<codeline lineno="1157"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1158"><highlight class="normal"></highlight></codeline>
<codeline lineno="1159" refid="netbase_8cpp_1a5834e0ab5104fffac621ea53fa2c3860" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="netbase_8cpp_1ac361eb83c41464359dfb1dfc296c3a4c" kindref="member">operator!=</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_c_service" kindref="compound">CService</ref>&amp;<sp/>a,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_c_service" kindref="compound">CService</ref>&amp;<sp/>b)</highlight></codeline>
<codeline lineno="1160"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1161"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="class_c_net_addr" kindref="compound">CNetAddr</ref>)a<sp/>!=<sp/>(<ref refid="class_c_net_addr" kindref="compound">CNetAddr</ref>)b<sp/>||<sp/>a.<ref refid="class_c_service_1aef17734203dc2125cbdf4d23e50be410" kindref="member">port</ref><sp/>!=<sp/>b.<ref refid="class_c_service_1aef17734203dc2125cbdf4d23e50be410" kindref="member">port</ref>;</highlight></codeline>
<codeline lineno="1162"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1163"><highlight class="normal"></highlight></codeline>
<codeline lineno="1164" refid="netbase_8cpp_1a26d0e22a8e7ae213b25467da3556c9e4" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="netbase_8cpp_1af220590d55a24354e2ba2e547e34fd77" kindref="member">operator&lt;</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_c_service" kindref="compound">CService</ref>&amp;<sp/>a,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_c_service" kindref="compound">CService</ref>&amp;<sp/>b)</highlight></codeline>
<codeline lineno="1165"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1166"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="class_c_net_addr" kindref="compound">CNetAddr</ref>)a<sp/>&lt;<sp/>(<ref refid="class_c_net_addr" kindref="compound">CNetAddr</ref>)b<sp/>||<sp/>((<ref refid="class_c_net_addr" kindref="compound">CNetAddr</ref>)a<sp/>==<sp/>(<ref refid="class_c_net_addr" kindref="compound">CNetAddr</ref>)b<sp/>&amp;&amp;<sp/>a.<ref refid="class_c_service_1aef17734203dc2125cbdf4d23e50be410" kindref="member">port</ref><sp/>&lt;<sp/>b.<ref refid="class_c_service_1aef17734203dc2125cbdf4d23e50be410" kindref="member">port</ref>);</highlight></codeline>
<codeline lineno="1167"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1168"><highlight class="normal"></highlight></codeline>
<codeline lineno="1169" refid="class_c_service_1ab0f791c174511056236119cc1580faeb" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="class_c_service_1ab0f791c174511056236119cc1580faeb" kindref="member">CService::GetSockAddr</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/>sockaddr*<sp/>paddr,<sp/>socklen_t<sp/>*addrlen)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="1170"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1171"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="class_c_net_addr_1a16ff4478f02f06f5a9a038a24d5da2f9" kindref="member">IsIPv4</ref>())<sp/>{</highlight></codeline>
<codeline lineno="1172"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(*addrlen<sp/>&lt;<sp/>(socklen_t)</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/>sockaddr_in))</highlight></codeline>
<codeline lineno="1173"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1174"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*addrlen<sp/>=<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">sockaddr_in);</highlight></codeline>
<codeline lineno="1175"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">sockaddr_in<sp/>*paddrin<sp/>=<sp/>(</highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">sockaddr_in*)paddr;</highlight></codeline>
<codeline lineno="1176"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>memset(paddrin,<sp/>0,<sp/>*addrlen);</highlight></codeline>
<codeline lineno="1177"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="class_c_net_addr_1aa2e2c78db01a6a27d6a2740f2ba43e90" kindref="member">GetInAddr</ref>(&amp;paddrin-&gt;sin_addr))</highlight></codeline>
<codeline lineno="1178"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1179"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>paddrin-&gt;sin_family<sp/>=<sp/>AF_INET;</highlight></codeline>
<codeline lineno="1180"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>paddrin-&gt;sin_port<sp/>=<sp/>htons(port);</highlight></codeline>
<codeline lineno="1181"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1182"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1183"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="class_c_net_addr_1a0edb022cd6a186de8099799415409d57" kindref="member">IsIPv6</ref>())<sp/>{</highlight></codeline>
<codeline lineno="1184"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(*addrlen<sp/>&lt;<sp/>(socklen_t)</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/>sockaddr_in6))</highlight></codeline>
<codeline lineno="1185"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1186"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*addrlen<sp/>=<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">sockaddr_in6);</highlight></codeline>
<codeline lineno="1187"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">sockaddr_in6<sp/>*paddrin6<sp/>=<sp/>(</highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">sockaddr_in6*)paddr;</highlight></codeline>
<codeline lineno="1188"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>memset(paddrin6,<sp/>0,<sp/>*addrlen);</highlight></codeline>
<codeline lineno="1189"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="class_c_net_addr_1add7811be50f5fe60c4fa65b461dea98c" kindref="member">GetIn6Addr</ref>(&amp;paddrin6-&gt;sin6_addr))</highlight></codeline>
<codeline lineno="1190"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1191"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>paddrin6-&gt;sin6_family<sp/>=<sp/>AF_INET6;</highlight></codeline>
<codeline lineno="1192"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>paddrin6-&gt;sin6_port<sp/>=<sp/>htons(port);</highlight></codeline>
<codeline lineno="1193"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1194"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1195"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1196"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1197"><highlight class="normal"></highlight></codeline>
<codeline lineno="1198" refid="class_c_service_1a74d6e1526688229cb424584c29046e9e" refkind="member"><highlight class="normal">std::vector&lt;unsigned<sp/>char&gt;<sp/><ref refid="class_c_service_1a74d6e1526688229cb424584c29046e9e" kindref="member">CService::GetKey</ref>()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="1199"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1200"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>std::vector&lt;unsigned<sp/>char&gt;<sp/>vKey;</highlight></codeline>
<codeline lineno="1201"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>vKey.resize(18);</highlight></codeline>
<codeline lineno="1202"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>memcpy(&amp;vKey[0],<sp/><ref refid="class_c_net_addr_1acff7ce68f33f8dfbfe6d79d80928d417" kindref="member">ip</ref>,<sp/>16);</highlight></codeline>
<codeline lineno="1203"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>vKey[16]<sp/>=<sp/>port<sp/>/<sp/>0x100;</highlight></codeline>
<codeline lineno="1204"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>vKey[17]<sp/>=<sp/>port<sp/>&amp;<sp/>0x0FF;</highlight></codeline>
<codeline lineno="1205"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>vKey;</highlight></codeline>
<codeline lineno="1206"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1207"><highlight class="normal"></highlight></codeline>
<codeline lineno="1208" refid="class_c_service_1a1e0f0b98239a9097044695a9e439bb46" refkind="member"><highlight class="normal">std::string<sp/><ref refid="class_c_service_1a1e0f0b98239a9097044695a9e439bb46" kindref="member">CService::ToStringPort</ref>()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="1209"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1210"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="tinyformat_8h_1a56c674871a61baaad36ad52238c08857" kindref="member">strprintf</ref>(</highlight><highlight class="stringliteral">&quot;%u&quot;</highlight><highlight class="normal">,<sp/>port);</highlight></codeline>
<codeline lineno="1211"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1212"><highlight class="normal"></highlight></codeline>
<codeline lineno="1213" refid="class_c_service_1a39b82301356b0dfc2a92befc727b77be" refkind="member"><highlight class="normal">std::string<sp/><ref refid="class_c_service_1a39b82301356b0dfc2a92befc727b77be" kindref="member">CService::ToStringIPPort</ref>()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="1214"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1215"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="class_c_net_addr_1a16ff4478f02f06f5a9a038a24d5da2f9" kindref="member">IsIPv4</ref>()<sp/>||<sp/><ref refid="class_c_net_addr_1a3fba9e0b18f531c0ed15794a30e8165d" kindref="member">IsTor</ref>()<sp/>||<sp/><ref refid="class_c_net_addr_1a4502c75bf0bf1b5d07738587627288b4" kindref="member">IsI2P</ref>())<sp/>{</highlight></codeline>
<codeline lineno="1216"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="class_c_net_addr_1a7ec845c27b63853fb0db08a4d154266f" kindref="member">ToStringIP</ref>()<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;:&quot;</highlight><highlight class="normal"><sp/>+<sp/><ref refid="class_c_service_1a1e0f0b98239a9097044695a9e439bb46" kindref="member">ToStringPort</ref>();</highlight></codeline>
<codeline lineno="1217"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1218"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;[&quot;</highlight><highlight class="normal"><sp/>+<sp/><ref refid="class_c_net_addr_1a7ec845c27b63853fb0db08a4d154266f" kindref="member">ToStringIP</ref>()<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;]:&quot;</highlight><highlight class="normal"><sp/>+<sp/><ref refid="class_c_service_1a1e0f0b98239a9097044695a9e439bb46" kindref="member">ToStringPort</ref>();</highlight></codeline>
<codeline lineno="1219"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1220"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1221"><highlight class="normal"></highlight></codeline>
<codeline lineno="1222" refid="class_c_service_1a336f9848fe9364e260c76499be0351a5" refkind="member"><highlight class="normal">std::string<sp/><ref refid="class_c_service_1a336f9848fe9364e260c76499be0351a5" kindref="member">CService::ToString</ref>()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="1223"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1224"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="class_c_service_1a39b82301356b0dfc2a92befc727b77be" kindref="member">ToStringIPPort</ref>();</highlight></codeline>
<codeline lineno="1225"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1226"><highlight class="normal"></highlight></codeline>
<codeline lineno="1227" refid="class_c_service_1a3dedc3f12aa21bdbf1068b054d3e3d39" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_c_service_1a3dedc3f12aa21bdbf1068b054d3e3d39" kindref="member">CService::SetPort</ref>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">short</highlight><highlight class="normal"><sp/>portIn)</highlight></codeline>
<codeline lineno="1228"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1229"><highlight class="normal"><sp/><sp/><sp/><sp/>port<sp/>=<sp/>portIn;</highlight></codeline>
<codeline lineno="1230"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="/home/dev/ds-160209/src/netbase.cpp"/>
  </compounddef>
</doxygen>
