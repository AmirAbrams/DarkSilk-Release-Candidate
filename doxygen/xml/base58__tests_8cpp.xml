<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.9.1">
  <compounddef id="base58__tests_8cpp" kind="file" language="C++">
    <compoundname>base58_tests.cpp</compoundname>
    <includes local="no">boost/test/unit_test.hpp</includes>
    <includes refid="json__spirit__reader__template_8h" local="yes">json/json_spirit_reader_template.h</includes>
    <includes refid="json__spirit__writer__template_8h" local="yes">json/json_spirit_writer_template.h</includes>
    <includes refid="json__spirit__utils_8h" local="yes">json/json_spirit_utils.h</includes>
    <includes refid="base58_8h" local="yes">base58.h</includes>
    <includes local="yes">util.h</includes>
    <incdepgraph>
      <node id="55459">
        <label>list</label>
      </node>
      <node id="55431">
        <label>boost/thread/mutex.hpp</label>
      </node>
      <node id="55458">
        <label>amount.h</label>
        <link refid="amount_8h"/>
        <childnode refid="55420" relation="include">
        </childnode>
        <childnode refid="55429" relation="include">
        </childnode>
        <childnode refid="55397" relation="include">
        </childnode>
      </node>
      <node id="55415">
        <label>iomanip</label>
      </node>
      <node id="55408">
        <label>boost/version.hpp</label>
      </node>
      <node id="55403">
        <label>boost/shared_ptr.hpp</label>
      </node>
      <node id="55422">
        <label>limits</label>
      </node>
      <node id="55445">
        <label>crypto/sha256.h</label>
        <link refid="sha256_8h"/>
        <childnode refid="55401" relation="include">
        </childnode>
        <childnode refid="55429" relation="include">
        </childnode>
      </node>
      <node id="55446">
        <label>crypto/argon2/blake2/blake2.h</label>
        <link refid="blake2_8h"/>
        <childnode refid="55447" relation="include">
        </childnode>
        <childnode refid="55401" relation="include">
        </childnode>
        <childnode refid="55433" relation="include">
        </childnode>
      </node>
      <node id="55450">
        <label>script.h</label>
        <link refid="script_8h"/>
        <childnode refid="55397" relation="include">
        </childnode>
        <childnode refid="55395" relation="include">
        </childnode>
        <childnode refid="55401" relation="include">
        </childnode>
        <childnode refid="55451" relation="include">
        </childnode>
        <childnode refid="55404" relation="include">
        </childnode>
        <childnode refid="55440" relation="include">
        </childnode>
        <childnode refid="55419" relation="include">
        </childnode>
        <childnode refid="55452" relation="include">
        </childnode>
        <childnode refid="55471" relation="include">
        </childnode>
      </node>
      <node id="55470">
        <label>openssl/rand.h</label>
      </node>
      <node id="55409">
        <label>boost/spirit/core.hpp</label>
      </node>
      <node id="55438">
        <label>assert.h</label>
      </node>
      <node id="55426">
        <label>boost/tuple/tuple.hpp</label>
      </node>
      <node id="55417">
        <label>base58.h</label>
        <link refid="base58_8h"/>
        <childnode refid="55418" relation="include">
        </childnode>
        <childnode refid="55440" relation="include">
        </childnode>
        <childnode refid="55449" relation="include">
        </childnode>
        <childnode refid="55450" relation="include">
        </childnode>
        <childnode refid="55427" relation="include">
        </childnode>
        <childnode refid="55397" relation="include">
        </childnode>
        <childnode refid="55395" relation="include">
        </childnode>
      </node>
      <node id="55435">
        <label>version.h</label>
        <link refid="version_8h"/>
        <childnode refid="55436" relation="include">
        </childnode>
        <childnode refid="55397" relation="include">
        </childnode>
      </node>
      <node id="55392">
        <label>boost/test/unit_test.hpp</label>
      </node>
      <node id="55432">
        <label>sys/mman.h</label>
      </node>
      <node id="55429">
        <label>stdlib.h</label>
      </node>
      <node id="55451">
        <label>boost/foreach.hpp</label>
      </node>
      <node id="55469">
        <label>openssl/crypto.h</label>
      </node>
      <node id="55405">
        <label>json_spirit_error_position.h</label>
        <link refid="json__spirit__error__position_8h"/>
        <childnode refid="55397" relation="include">
        </childnode>
      </node>
      <node id="55413">
        <label>boost/spirit/iterator/position_iterator.hpp</label>
      </node>
      <node id="55465">
        <label>boost/date_time/posix_time/posix_time_types.hpp</label>
      </node>
      <node id="55442">
        <label>openssl/sha.h</label>
      </node>
      <node id="55398">
        <label>cassert</label>
      </node>
      <node id="55400">
        <label>stdexcept</label>
      </node>
      <node id="55452">
        <label>util.h</label>
        <link refid="util_8h"/>
        <childnode refid="55453" relation="include">
        </childnode>
        <childnode refid="55454" relation="include">
        </childnode>
        <childnode refid="55455" relation="include">
        </childnode>
        <childnode refid="55420" relation="include">
        </childnode>
        <childnode refid="55456" relation="include">
        </childnode>
        <childnode refid="55458" relation="include">
        </childnode>
        <childnode refid="55396" relation="include">
        </childnode>
        <childnode refid="55459" relation="include">
        </childnode>
        <childnode refid="55460" relation="include">
        </childnode>
        <childnode refid="55395" relation="include">
        </childnode>
        <childnode refid="55397" relation="include">
        </childnode>
        <childnode refid="55461" relation="include">
        </childnode>
        <childnode refid="55462" relation="include">
        </childnode>
        <childnode refid="55463" relation="include">
        </childnode>
        <childnode refid="55464" relation="include">
        </childnode>
        <childnode refid="55465" relation="include">
        </childnode>
        <childnode refid="55466" relation="include">
        </childnode>
        <childnode refid="55467" relation="include">
        </childnode>
        <childnode refid="55468" relation="include">
        </childnode>
        <childnode refid="55469" relation="include">
        </childnode>
        <childnode refid="55470" relation="include">
        </childnode>
        <childnode refid="55439" relation="include">
        </childnode>
        <childnode refid="55401" relation="include">
        </childnode>
      </node>
      <node id="55416">
        <label>json/json_spirit_utils.h</label>
        <link refid="json__spirit__utils_8h"/>
        <childnode refid="55394" relation="include">
        </childnode>
        <childnode refid="55396" relation="include">
        </childnode>
      </node>
      <node id="55464">
        <label>boost/date_time/gregorian/gregorian_types.hpp</label>
      </node>
      <node id="55397">
        <label>string</label>
      </node>
      <node id="55396">
        <label>map</label>
      </node>
      <node id="55461">
        <label>boost/thread.hpp</label>
      </node>
      <node id="55393">
        <label>json/json_spirit_reader_template.h</label>
        <link refid="json__spirit__reader__template_8h"/>
        <childnode refid="55394" relation="include">
        </childnode>
        <childnode refid="55405" relation="include">
        </childnode>
        <childnode refid="55406" relation="include">
        </childnode>
        <childnode refid="55407" relation="include">
        </childnode>
        <childnode refid="55408" relation="include">
        </childnode>
        <childnode refid="55409" relation="include">
        </childnode>
        <childnode refid="55410" relation="include">
        </childnode>
        <childnode refid="55411" relation="include">
        </childnode>
        <childnode refid="55412" relation="include">
        </childnode>
        <childnode refid="55413" relation="include">
        </childnode>
      </node>
      <node id="55447">
        <label>stddef.h</label>
      </node>
      <node id="55404">
        <label>boost/variant.hpp</label>
      </node>
      <node id="55407">
        <label>boost/function.hpp</label>
      </node>
      <node id="55420">
        <label>serialize.h</label>
        <link refid="serialize_8h"/>
        <childnode refid="55397" relation="include">
        </childnode>
        <childnode refid="55395" relation="include">
        </childnode>
        <childnode refid="55396" relation="include">
        </childnode>
        <childnode refid="55421" relation="include">
        </childnode>
        <childnode refid="55398" relation="include">
        </childnode>
        <childnode refid="55422" relation="include">
        </childnode>
        <childnode refid="55401" relation="include">
        </childnode>
        <childnode refid="55423" relation="include">
        </childnode>
        <childnode refid="55424" relation="include">
        </childnode>
        <childnode refid="55425" relation="include">
        </childnode>
        <childnode refid="55426" relation="include">
        </childnode>
        <childnode refid="55427" relation="include">
        </childnode>
        <childnode refid="55435" relation="include">
        </childnode>
      </node>
      <node id="55433">
        <label>limits.h</label>
      </node>
      <node id="55455">
        <label>sys/resource.h</label>
      </node>
      <node id="55466">
        <label>openssl/bio.h</label>
      </node>
      <node id="55441">
        <label>hash.h</label>
        <link refid="hash_8h"/>
        <childnode refid="55437" relation="include">
        </childnode>
        <childnode refid="55420" relation="include">
        </childnode>
        <childnode refid="55442" relation="include">
        </childnode>
        <childnode refid="55443" relation="include">
        </childnode>
        <childnode refid="55444" relation="include">
        </childnode>
        <childnode refid="55445" relation="include">
        </childnode>
        <childnode refid="55446" relation="include">
        </childnode>
        <childnode refid="55448" relation="include">
        </childnode>
        <childnode refid="55395" relation="include">
        </childnode>
      </node>
      <node id="55471">
        <label>stealth.h</label>
        <link refid="stealth_8h"/>
        <childnode refid="55452" relation="include">
        </childnode>
        <childnode refid="55420" relation="include">
        </childnode>
        <childnode refid="55429" relation="include">
        </childnode>
        <childnode refid="55472" relation="include">
        </childnode>
        <childnode refid="55395" relation="include">
        </childnode>
        <childnode refid="55473" relation="include">
        </childnode>
      </node>
      <node id="55453">
        <label>sys/types.h</label>
      </node>
      <node id="55430">
        <label>string.h</label>
      </node>
      <node id="55436">
        <label>clientversion.h</label>
        <link refid="clientversion_8h"/>
      </node>
      <node id="55424">
        <label>cstdio</label>
      </node>
      <node id="55468">
        <label>openssl/buffer.h</label>
      </node>
      <node id="55425">
        <label>boost/type_traits/is_fundamental.hpp</label>
      </node>
      <node id="55463">
        <label>boost/filesystem/path.hpp</label>
      </node>
      <node id="55440">
        <label>pubkey.h</label>
        <link refid="pubkey_8h"/>
        <childnode refid="55441" relation="include">
        </childnode>
        <childnode refid="55420" relation="include">
        </childnode>
        <childnode refid="55437" relation="include">
        </childnode>
        <childnode refid="55400" relation="include">
        </childnode>
        <childnode refid="55395" relation="include">
        </childnode>
      </node>
      <node id="55434">
        <label>unistd.h</label>
      </node>
      <node id="55395">
        <label>vector</label>
      </node>
      <node id="55419">
        <label>bignum.h</label>
        <link refid="bignum_8h"/>
        <childnode refid="55420" relation="include">
        </childnode>
        <childnode refid="55437" relation="include">
        </childnode>
        <childnode refid="55439" relation="include">
        </childnode>
        <childnode refid="55400" relation="include">
        </childnode>
        <childnode refid="55395" relation="include">
        </childnode>
        <childnode refid="55401" relation="include">
        </childnode>
      </node>
      <node id="55414">
        <label>json/json_spirit_writer_template.h</label>
        <link refid="json__spirit__writer__template_8h"/>
        <childnode refid="55394" relation="include">
        </childnode>
        <childnode refid="55398" relation="include">
        </childnode>
        <childnode refid="55399" relation="include">
        </childnode>
        <childnode refid="55415" relation="include">
        </childnode>
      </node>
      <node id="55443">
        <label>openssl/ripemd.h</label>
      </node>
      <node id="55462">
        <label>boost/filesystem.hpp</label>
      </node>
      <node id="55411">
        <label>boost/spirit/utility/escape_char.hpp</label>
      </node>
      <node id="55460">
        <label>utility</label>
      </node>
      <node id="55399">
        <label>sstream</label>
      </node>
      <node id="55449">
        <label>key.h</label>
        <link refid="key_8h"/>
        <childnode refid="55427" relation="include">
        </childnode>
        <childnode refid="55440" relation="include">
        </childnode>
        <childnode refid="55400" relation="include">
        </childnode>
        <childnode refid="55395" relation="include">
        </childnode>
      </node>
      <node id="55467">
        <label>openssl/evp.h</label>
      </node>
      <node id="55456">
        <label>tinyformat.h</label>
        <link refid="tinyformat_8h"/>
        <childnode refid="55398" relation="include">
        </childnode>
        <childnode refid="55457" relation="include">
        </childnode>
        <childnode refid="55399" relation="include">
        </childnode>
        <childnode refid="55400" relation="include">
        </childnode>
      </node>
      <node id="55401">
        <label>stdint.h</label>
        <link refid="stdint_8h"/>
      </node>
      <node id="55448">
        <label>crypto/argon2/argon2.h</label>
        <link refid="argon2_8h"/>
        <childnode refid="55401" relation="include">
        </childnode>
        <childnode refid="55447" relation="include">
        </childnode>
        <childnode refid="55433" relation="include">
        </childnode>
      </node>
      <node id="55454">
        <label>sys/time.h</label>
      </node>
      <node id="55457">
        <label>iostream</label>
      </node>
      <node id="55437">
        <label>uint256.h</label>
        <link refid="uint256_8h"/>
        <childnode refid="55438" relation="include">
        </childnode>
        <childnode refid="55423" relation="include">
        </childnode>
        <childnode refid="55400" relation="include">
        </childnode>
        <childnode refid="55401" relation="include">
        </childnode>
        <childnode refid="55397" relation="include">
        </childnode>
        <childnode refid="55395" relation="include">
        </childnode>
      </node>
      <node id="55406">
        <label>boost/bind.hpp</label>
      </node>
      <node id="55402">
        <label>boost/config.hpp</label>
      </node>
      <node id="55394">
        <label>json_spirit_value.h</label>
        <link refid="json__spirit__value_8h"/>
        <childnode refid="55395" relation="include">
        </childnode>
        <childnode refid="55396" relation="include">
        </childnode>
        <childnode refid="55397" relation="include">
        </childnode>
        <childnode refid="55398" relation="include">
        </childnode>
        <childnode refid="55399" relation="include">
        </childnode>
        <childnode refid="55400" relation="include">
        </childnode>
        <childnode refid="55401" relation="include">
        </childnode>
        <childnode refid="55402" relation="include">
        </childnode>
        <childnode refid="55403" relation="include">
        </childnode>
        <childnode refid="55404" relation="include">
        </childnode>
      </node>
      <node id="55391">
        <label>/home/dev/ds-160209/src/test/base58_tests.cpp</label>
        <link refid="base58_tests.cpp"/>
        <childnode refid="55392" relation="include">
        </childnode>
        <childnode refid="55393" relation="include">
        </childnode>
        <childnode refid="55414" relation="include">
        </childnode>
        <childnode refid="55416" relation="include">
        </childnode>
        <childnode refid="55417" relation="include">
        </childnode>
        <childnode refid="55474" relation="include">
        </childnode>
      </node>
      <node id="55439">
        <label>openssl/bn.h</label>
      </node>
      <node id="55427">
        <label>allocators.h</label>
        <link refid="allocators_8h"/>
        <childnode refid="55428" relation="include">
        </childnode>
        <childnode refid="55430" relation="include">
        </childnode>
        <childnode refid="55397" relation="include">
        </childnode>
        <childnode refid="55431" relation="include">
        </childnode>
        <childnode refid="55396" relation="include">
        </childnode>
        <childnode refid="55432" relation="include">
        </childnode>
        <childnode refid="55433" relation="include">
        </childnode>
        <childnode refid="55434" relation="include">
        </childnode>
      </node>
      <node id="55412">
        <label>boost/spirit/iterator/multi_pass.hpp</label>
      </node>
      <node id="55421">
        <label>set</label>
      </node>
      <node id="55418">
        <label>chainparams.h</label>
        <link refid="chainparams_8h"/>
        <childnode refid="55419" relation="include">
        </childnode>
        <childnode refid="55437" relation="include">
        </childnode>
        <childnode refid="55395" relation="include">
        </childnode>
      </node>
      <node id="55444">
        <label>crypto/ripemd160.h</label>
        <link refid="ripemd160_8h"/>
        <childnode refid="55401" relation="include">
        </childnode>
        <childnode refid="55429" relation="include">
        </childnode>
      </node>
      <node id="55474">
        <label>util.h</label>
      </node>
      <node id="55472">
        <label>stdio.h</label>
      </node>
      <node id="55428">
        <label>cleanse.h</label>
        <link refid="cleanse_8h"/>
        <childnode refid="55429" relation="include">
        </childnode>
      </node>
      <node id="55423">
        <label>cstring</label>
      </node>
      <node id="55473">
        <label>inttypes.h</label>
      </node>
      <node id="55410">
        <label>boost/spirit/utility/confix.hpp</label>
      </node>
    </incdepgraph>
    <innerclass refid="class_test_addr_type_visitor" prot="public">TestAddrTypeVisitor</innerclass>
    <innerclass refid="class_test_payload_visitor" prot="public">TestPayloadVisitor</innerclass>
      <sectiondef kind="func">
      <memberdef kind="function" id="base58__tests_8cpp_1ab540423fd88bab1f8e933726406f2675" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespacejson__spirit_1aee299e52bda3816039a53210cbbfea1a" kindref="member">Array</ref></type>
        <definition>Array read_json</definition>
        <argsstring>(const std::string &amp;filename)</argsstring>
        <name>read_json</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>filename</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/test/base58_tests.cpp" line="10" column="1"/>
        <referencedby refid="base58__tests_8cpp_1ad270e557a9bafea8a9047386547b6615" compoundref="base58__tests_8cpp" startline="15" endline="34">BOOST_AUTO_TEST_CASE</referencedby>
      </memberdef>
      <memberdef kind="function" id="base58__tests_8cpp_1ad270e557a9bafea8a9047386547b6615" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>BOOST_AUTO_TEST_CASE</definition>
        <argsstring>(base58_EncodeBase58)</argsstring>
        <name>BOOST_AUTO_TEST_CASE</name>
        <param>
          <type>base58_EncodeBase58</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/test/base58_tests.cpp" line="15" column="1" bodyfile="/home/dev/ds-160209/src/test/base58_tests.cpp" bodystart="15" bodyend="34"/>
        <references refid="base58__tests_8cpp_1ab540423fd88bab1f8e933726406f2675">read_json</references>
        <references refid="db__test_8cc_1a9cc668c18debdbcad21b45fdd8158648" compoundref="db__test_8cc" startline="1737">test</references>
        <references refid="classjson__spirit_1_1_value__impl_1a03541c56cdbab1f794982fb73a8e4361" compoundref="json__spirit__value_8h" startline="369" endline="374">json_spirit::Value_impl&lt; Config &gt;::get_array</references>
        <references refid="namespacejson__spirit_1ad4b51f460af6cdec5b128f53f233b0c6" compoundref="json__spirit__writer__template_8h" startline="237" endline="246">json_spirit::write_string</references>
        <references refid="util_8cpp_1abea395175fbc4a788ed0f0a41710b8a7" compoundref="util_8cpp" startline="450" endline="469">ParseHex</references>
        <references refid="namespacejson__spirit_1acdef70e45909522ba51a74b68e186b25" compoundref="json__spirit__reader__template_8h" startline="172" endline="175">json_spirit::get_str</references>
        <references refid="base58_8cpp_1a8d6f0e9d5df175b4966dcede31dc90ad" compoundref="base58_8cpp" startline="67" endline="99">EncodeBase58</references>
      </memberdef>
      <memberdef kind="function" id="base58__tests_8cpp_1a03911a4d6ae8736f7a28fe4fe0e0ece2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>BOOST_AUTO_TEST_CASE</definition>
        <argsstring>(base58_DecodeBase58)</argsstring>
        <name>BOOST_AUTO_TEST_CASE</name>
        <param>
          <type>base58_DecodeBase58</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/test/base58_tests.cpp" line="37" column="1" bodyfile="/home/dev/ds-160209/src/test/base58_tests.cpp" bodystart="37" bodyend="58"/>
        <references refid="base58__tests_8cpp_1ab540423fd88bab1f8e933726406f2675">read_json</references>
        <references refid="db__test_8cc_1a9cc668c18debdbcad21b45fdd8158648" compoundref="db__test_8cc" startline="1737">test</references>
        <references refid="classjson__spirit_1_1_value__impl_1a03541c56cdbab1f794982fb73a8e4361" compoundref="json__spirit__value_8h" startline="369" endline="374">json_spirit::Value_impl&lt; Config &gt;::get_array</references>
        <references refid="namespacejson__spirit_1ad4b51f460af6cdec5b128f53f233b0c6" compoundref="json__spirit__writer__template_8h" startline="237" endline="246">json_spirit::write_string</references>
        <references refid="util_8cpp_1abea395175fbc4a788ed0f0a41710b8a7" compoundref="util_8cpp" startline="450" endline="469">ParseHex</references>
        <references refid="namespacejson__spirit_1acdef70e45909522ba51a74b68e186b25" compoundref="json__spirit__reader__template_8h" startline="172" endline="175">json_spirit::get_str</references>
        <references refid="base58_8cpp_1a0f74d1d6e7e982cad4b0e538acea4538" compoundref="base58_8cpp" startline="22" endline="65">DecodeBase58</references>
      </memberdef>
      <memberdef kind="function" id="base58__tests_8cpp_1ac3fd789edd04736fe905e3ffdc901bc9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>BOOST_AUTO_TEST_CASE</definition>
        <argsstring>(base58_keys_valid_parse)</argsstring>
        <name>BOOST_AUTO_TEST_CASE</name>
        <param>
          <type>base58_keys_valid_parse</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/test/base58_tests.cpp" line="105" column="1" bodyfile="/home/dev/ds-160209/src/test/base58_tests.cpp" bodystart="105" bodyend="161"/>
        <references refid="base58__tests_8cpp_1ab540423fd88bab1f8e933726406f2675">read_json</references>
        <references refid="db__test_8cc_1a9cc668c18debdbcad21b45fdd8158648" compoundref="db__test_8cc" startline="1737">test</references>
        <references refid="classjson__spirit_1_1_value__impl_1a03541c56cdbab1f794982fb73a8e4361" compoundref="json__spirit__value_8h" startline="369" endline="374">json_spirit::Value_impl&lt; Config &gt;::get_array</references>
        <references refid="namespacejson__spirit_1ad4b51f460af6cdec5b128f53f233b0c6" compoundref="json__spirit__writer__template_8h" startline="237" endline="246">json_spirit::write_string</references>
        <references refid="util_8cpp_1abea395175fbc4a788ed0f0a41710b8a7" compoundref="util_8cpp" startline="450" endline="469">ParseHex</references>
        <references refid="namespacejson__spirit_1acdef70e45909522ba51a74b68e186b25" compoundref="json__spirit__reader__template_8h" startline="172" endline="175">json_spirit::get_str</references>
        <references refid="namespacejson__spirit_1a74f681114641f2ca6250370280ee1089" compoundref="json__spirit__utils_8h" startline="47" endline="58">json_spirit::find_value</references>
        <references refid="chainparams_8cpp_1ad1af61cf4a31ae487837d1b09b0e125c" compoundref="chainparams_8cpp" startline="190" endline="202">SelectParams</references>
        <references refid="class_c_chain_params_1a5c4bb1d7c0205399ff06ee58fab7f176a7bfe4c44c13adffa9807917840050c60" compoundref="chainparams_8h" startline="40">CChainParams::TESTNET</references>
        <references refid="class_c_chain_params_1a5c4bb1d7c0205399ff06ee58fab7f176ab64dab5901e9dc8c7bf79daf9f7a2e1f" compoundref="chainparams_8h" startline="39">CChainParams::MAIN</references>
        <references refid="class_c_dark_silk_secret_1a06075192fb631c3b406a6ca231d2f926" compoundref="base58_8cpp" startline="271" endline="273">CDarkSilkSecret::SetString</references>
        <references refid="class_c_dark_silk_secret_1a30db2efc9987de8a743a2aa000c84617" compoundref="base58_8cpp" startline="265" endline="269">CDarkSilkSecret::IsValid</references>
        <references refid="class_c_dark_silk_secret_1af7b026d90efb897f6e592ce424c8d2c9" compoundref="base58_8cpp" startline="258" endline="263">CDarkSilkSecret::GetKey</references>
        <references refid="class_c_base58_data_1a250fa3bc97d03c7d87de5485c8b49b57" compoundref="base58_8cpp" startline="155" endline="169">CBase58Data::SetString</references>
        <references refid="class_c_dark_silk_address_1ab98113189d0746ea660447efe3700103" compoundref="base58_8cpp" startline="218" endline="223">CDarkSilkAddress::IsValid</references>
        <references refid="class_c_dark_silk_address_1aae1f7d243d122e41b4cddf481c6b0543" compoundref="base58_8cpp" startline="247" endline="249">CDarkSilkAddress::IsScript</references>
        <references refid="class_c_dark_silk_address_1a907e63758c7914a246b5807f6babf97d" compoundref="base58_8cpp" startline="225" endline="236">CDarkSilkAddress::Get</references>
      </memberdef>
      <memberdef kind="function" id="base58__tests_8cpp_1a1fd3203c7badbc6513c9dcaf58d4ccf9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>BOOST_AUTO_TEST_CASE</definition>
        <argsstring>(base58_keys_valid_gen)</argsstring>
        <name>BOOST_AUTO_TEST_CASE</name>
        <param>
          <type>base58_keys_valid_gen</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/test/base58_tests.cpp" line="164" column="1" bodyfile="/home/dev/ds-160209/src/test/base58_tests.cpp" bodystart="164" bodyend="229"/>
        <references refid="base58__tests_8cpp_1ab540423fd88bab1f8e933726406f2675">read_json</references>
        <references refid="db__test_8cc_1a9cc668c18debdbcad21b45fdd8158648" compoundref="db__test_8cc" startline="1737">test</references>
        <references refid="classjson__spirit_1_1_value__impl_1a03541c56cdbab1f794982fb73a8e4361" compoundref="json__spirit__value_8h" startline="369" endline="374">json_spirit::Value_impl&lt; Config &gt;::get_array</references>
        <references refid="namespacejson__spirit_1ad4b51f460af6cdec5b128f53f233b0c6" compoundref="json__spirit__writer__template_8h" startline="237" endline="246">json_spirit::write_string</references>
        <references refid="util_8cpp_1abea395175fbc4a788ed0f0a41710b8a7" compoundref="util_8cpp" startline="450" endline="469">ParseHex</references>
        <references refid="namespacejson__spirit_1acdef70e45909522ba51a74b68e186b25" compoundref="json__spirit__reader__template_8h" startline="172" endline="175">json_spirit::get_str</references>
        <references refid="namespacejson__spirit_1a74f681114641f2ca6250370280ee1089" compoundref="json__spirit__utils_8h" startline="47" endline="58">json_spirit::find_value</references>
        <references refid="chainparams_8cpp_1ad1af61cf4a31ae487837d1b09b0e125c" compoundref="chainparams_8cpp" startline="190" endline="202">SelectParams</references>
        <references refid="class_c_chain_params_1a5c4bb1d7c0205399ff06ee58fab7f176a7bfe4c44c13adffa9807917840050c60" compoundref="chainparams_8h" startline="40">CChainParams::TESTNET</references>
        <references refid="class_c_chain_params_1a5c4bb1d7c0205399ff06ee58fab7f176ab64dab5901e9dc8c7bf79daf9f7a2e1f" compoundref="chainparams_8h" startline="39">CChainParams::MAIN</references>
        <references refid="class_c_key_1aaa13d5f08456bba094210c5eeabf64c8" compoundref="key_8h" startline="68" endline="80">CKey::Set</references>
        <references refid="class_c_key_1a62094263b7422a45b45ac508396f19eb" compoundref="key_8h" startline="88" endline="88">CKey::IsValid</references>
        <references refid="class_c_dark_silk_secret_1a74deecf3a37ff76ff64ca8b935045bbd" compoundref="base58_8cpp" startline="251" endline="256">CDarkSilkSecret::SetKey</references>
        <references refid="class_c_base58_data_1a9a47b10dadff15b8d6a6d0e63ce3ae32" compoundref="base58_8cpp" startline="175" endline="179">CBase58Data::ToString</references>
      </memberdef>
      <memberdef kind="function" id="base58__tests_8cpp_1a0d04f1ee290574d7fbbaba7bfd06da90" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>BOOST_AUTO_TEST_CASE</definition>
        <argsstring>(base58_keys_invalid)</argsstring>
        <name>BOOST_AUTO_TEST_CASE</name>
        <param>
          <type>base58_keys_invalid</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/test/base58_tests.cpp" line="232" column="1" bodyfile="/home/dev/ds-160209/src/test/base58_tests.cpp" bodystart="232" bodyend="256"/>
        <references refid="base58__tests_8cpp_1ab540423fd88bab1f8e933726406f2675">read_json</references>
        <references refid="db__test_8cc_1a9cc668c18debdbcad21b45fdd8158648" compoundref="db__test_8cc" startline="1737">test</references>
        <references refid="classjson__spirit_1_1_value__impl_1a03541c56cdbab1f794982fb73a8e4361" compoundref="json__spirit__value_8h" startline="369" endline="374">json_spirit::Value_impl&lt; Config &gt;::get_array</references>
        <references refid="namespacejson__spirit_1ad4b51f460af6cdec5b128f53f233b0c6" compoundref="json__spirit__writer__template_8h" startline="237" endline="246">json_spirit::write_string</references>
        <references refid="class_c_base58_data_1a250fa3bc97d03c7d87de5485c8b49b57" compoundref="base58_8cpp" startline="155" endline="169">CBase58Data::SetString</references>
        <references refid="class_c_dark_silk_address_1ab98113189d0746ea660447efe3700103" compoundref="base58_8cpp" startline="218" endline="223">CDarkSilkAddress::IsValid</references>
        <references refid="class_c_dark_silk_secret_1a06075192fb631c3b406a6ca231d2f926" compoundref="base58_8cpp" startline="271" endline="273">CDarkSilkSecret::SetString</references>
        <references refid="class_c_dark_silk_secret_1a30db2efc9987de8a743a2aa000c84617" compoundref="base58_8cpp" startline="265" endline="269">CDarkSilkSecret::IsValid</references>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#include<sp/>&lt;boost/test/unit_test.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="json__spirit__reader__template_8h" kindref="compound">json/json_spirit_reader_template.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="json__spirit__writer__template_8h" kindref="compound">json/json_spirit_writer_template.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="json__spirit__utils_8h" kindref="compound">json/json_spirit_utils.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="base58_8h" kindref="compound">base58.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;util.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal"><ref refid="namespacejson__spirit" kindref="compound">json_spirit</ref>;</highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/><ref refid="namespacejson__spirit_1aee299e52bda3816039a53210cbbfea1a" kindref="member">Array</ref><sp/><ref refid="base58__tests_8cpp_1ab540423fd88bab1f8e933726406f2675" kindref="member">read_json</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>filename);</highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal">BOOST_AUTO_TEST_SUITE(base58_tests)</highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Goal:<sp/>test<sp/>low-level<sp/>base58<sp/>encoding<sp/>functionality</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15" refid="base58__tests_8cpp_1ad270e557a9bafea8a9047386547b6615" refkind="member"><highlight class="normal"><ref refid="base58__tests_8cpp_1ad270e557a9bafea8a9047386547b6615" kindref="member">BOOST_AUTO_TEST_CASE</ref>(base58_EncodeBase58)</highlight></codeline>
<codeline lineno="16"><highlight class="normal">{</highlight></codeline>
<codeline lineno="17"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacejson__spirit_1aee299e52bda3816039a53210cbbfea1a" kindref="member">Array</ref><sp/>tests<sp/>=<sp/><ref refid="base58__tests_8cpp_1ab540423fd88bab1f8e933726406f2675" kindref="member">read_json</ref>(</highlight><highlight class="stringliteral">&quot;base58_encode_decode.json&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"><sp/><sp/><sp/><sp/>BOOST_FOREACH(<ref refid="classjson__spirit_1_1_value__impl" kindref="compound">Value</ref>&amp;<sp/>tv,<sp/>tests)</highlight></codeline>
<codeline lineno="20"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacejson__spirit_1aee299e52bda3816039a53210cbbfea1a" kindref="member">Array</ref><sp/><ref refid="db__test_8cc_1a9cc668c18debdbcad21b45fdd8158648" kindref="member">test</ref><sp/>=<sp/>tv.<ref refid="classjson__spirit_1_1_value__impl_1a03541c56cdbab1f794982fb73a8e4361" kindref="member">get_array</ref>();</highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>strTest<sp/>=<sp/><ref refid="namespacejson__spirit_1ad4b51f460af6cdec5b128f53f233b0c6" kindref="member">write_string</ref>(tv,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(test.size()<sp/>&lt;<sp/>2)<sp/></highlight><highlight class="comment">//<sp/>Allow<sp/>for<sp/>extra<sp/>stuff<sp/>(useful<sp/>for<sp/>comments)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>BOOST_ERROR(</highlight><highlight class="stringliteral">&quot;Bad<sp/>test:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>strTest);</highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;unsigned<sp/>char&gt;<sp/>sourcedata<sp/>=<sp/><ref refid="util_8cpp_1abea395175fbc4a788ed0f0a41710b8a7" kindref="member">ParseHex</ref>(test[0].<ref refid="namespacejson__spirit_1acdef70e45909522ba51a74b68e186b25" kindref="member">get_str</ref>());</highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>base58string<sp/>=<sp/>test[1].get_str();</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>BOOST_CHECK_MESSAGE(</highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="base58_8cpp_1a8d6f0e9d5df175b4966dcede31dc90ad" kindref="member">EncodeBase58</ref>(&amp;sourcedata[0],<sp/>&amp;sourcedata[sourcedata.size()])<sp/>==<sp/>base58string,</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>strTest);</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="34"><highlight class="normal">}</highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Goal:<sp/>test<sp/>low-level<sp/>base58<sp/>decoding<sp/>functionality</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="37" refid="base58__tests_8cpp_1a03911a4d6ae8736f7a28fe4fe0e0ece2" refkind="member"><highlight class="normal"><ref refid="base58__tests_8cpp_1ad270e557a9bafea8a9047386547b6615" kindref="member">BOOST_AUTO_TEST_CASE</ref>(base58_DecodeBase58)</highlight></codeline>
<codeline lineno="38"><highlight class="normal">{</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacejson__spirit_1aee299e52bda3816039a53210cbbfea1a" kindref="member">Array</ref><sp/>tests<sp/>=<sp/><ref refid="base58__tests_8cpp_1ab540423fd88bab1f8e933726406f2675" kindref="member">read_json</ref>(</highlight><highlight class="stringliteral">&quot;base58_encode_decode.json&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;unsigned<sp/>char&gt;<sp/>result;</highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/>BOOST_FOREACH(<ref refid="classjson__spirit_1_1_value__impl" kindref="compound">Value</ref>&amp;<sp/>tv,<sp/>tests)</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacejson__spirit_1aee299e52bda3816039a53210cbbfea1a" kindref="member">Array</ref><sp/><ref refid="db__test_8cc_1a9cc668c18debdbcad21b45fdd8158648" kindref="member">test</ref><sp/>=<sp/>tv.<ref refid="classjson__spirit_1_1_value__impl_1a03541c56cdbab1f794982fb73a8e4361" kindref="member">get_array</ref>();</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>strTest<sp/>=<sp/><ref refid="namespacejson__spirit_1ad4b51f460af6cdec5b128f53f233b0c6" kindref="member">write_string</ref>(tv,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(test.size()<sp/>&lt;<sp/>2)<sp/></highlight><highlight class="comment">//<sp/>Allow<sp/>for<sp/>extra<sp/>stuff<sp/>(useful<sp/>for<sp/>comments)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>BOOST_ERROR(</highlight><highlight class="stringliteral">&quot;Bad<sp/>test:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>strTest);</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;unsigned<sp/>char&gt;<sp/>expected<sp/>=<sp/><ref refid="util_8cpp_1abea395175fbc4a788ed0f0a41710b8a7" kindref="member">ParseHex</ref>(test[0].<ref refid="namespacejson__spirit_1acdef70e45909522ba51a74b68e186b25" kindref="member">get_str</ref>());</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>base58string<sp/>=<sp/>test[1].get_str();</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>BOOST_CHECK_MESSAGE(<ref refid="base58_8cpp_1a0f74d1d6e7e982cad4b0e538acea4538" kindref="member">DecodeBase58</ref>(base58string,<sp/>result),<sp/>strTest);</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>BOOST_CHECK_MESSAGE(result.size()<sp/>==<sp/>expected.size()<sp/>&amp;&amp;<sp/>std::equal(result.begin(),<sp/>result.end(),<sp/>expected.begin()),<sp/>strTest);</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/>BOOST_CHECK(!<ref refid="base58_8cpp_1a0f74d1d6e7e982cad4b0e538acea4538" kindref="member">DecodeBase58</ref>(</highlight><highlight class="stringliteral">&quot;invalid&quot;</highlight><highlight class="normal">,<sp/>result));</highlight></codeline>
<codeline lineno="58"><highlight class="normal">}</highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Visitor<sp/>to<sp/>check<sp/>address<sp/>type</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="61" refid="class_test_addr_type_visitor" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="class_test_addr_type_visitor" kindref="compound">TestAddrTypeVisitor</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/>boost::static_visitor&lt;bool&gt;</highlight></codeline>
<codeline lineno="62"><highlight class="normal">{</highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>exp_addrType;</highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="66" refid="class_test_addr_type_visitor_1ae60ae920ab6c864c5543a9a795fde74a" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_test_addr_type_visitor_1ae60ae920ab6c864c5543a9a795fde74a" kindref="member">TestAddrTypeVisitor</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;exp_addrType)<sp/>:<sp/>exp_addrType(exp_addrType)<sp/>{<sp/>}</highlight></codeline>
<codeline lineno="67" refid="class_test_addr_type_visitor_1a48efd26888a968e1b35843950a7c639f" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="class_test_addr_type_visitor_1a48efd26888a968e1b35843950a7c639f" kindref="member">operator()</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_c_key_i_d" kindref="compound">CKeyID</ref><sp/>&amp;</highlight><highlight class="keywordtype">id</highlight><highlight class="normal">)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="68"><highlight class="keyword"><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(exp_addrType<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;pubkey&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="71" refid="class_test_addr_type_visitor_1a5168376a62c013762f6777076c456822" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="class_test_addr_type_visitor_1a5168376a62c013762f6777076c456822" kindref="member">operator()</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_c_script_i_d" kindref="compound">CScriptID</ref><sp/>&amp;</highlight><highlight class="keywordtype">id</highlight><highlight class="normal">)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="72"><highlight class="keyword"><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(exp_addrType<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;script&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="75" refid="class_test_addr_type_visitor_1ad612b65af5ab7f6aead511daf97196a6" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="class_test_addr_type_visitor_1ad612b65af5ab7f6aead511daf97196a6" kindref="member">operator()</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_c_no_destination" kindref="compound">CNoDestination</ref><sp/>&amp;no)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="76"><highlight class="keyword"><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(exp_addrType<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;none&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="79"><highlight class="normal">};</highlight></codeline>
<codeline lineno="80"><highlight class="normal"></highlight></codeline>
<codeline lineno="81"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Visitor<sp/>to<sp/>check<sp/>address<sp/>payload</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="82" refid="class_test_payload_visitor" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="class_test_payload_visitor" kindref="compound">TestPayloadVisitor</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/>boost::static_visitor&lt;bool&gt;</highlight></codeline>
<codeline lineno="83"><highlight class="normal">{</highlight></codeline>
<codeline lineno="84"><highlight class="normal"></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;unsigned<sp/>char&gt;<sp/>exp_payload;</highlight></codeline>
<codeline lineno="86"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="87" refid="class_test_payload_visitor_1a8f963dfce22edb3c83c5712f4a9fa64d" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_test_payload_visitor_1a8f963dfce22edb3c83c5712f4a9fa64d" kindref="member">TestPayloadVisitor</ref>(std::vector&lt;unsigned<sp/>char&gt;<sp/>&amp;exp_payload)<sp/>:<sp/>exp_payload(exp_payload)<sp/>{<sp/>}</highlight></codeline>
<codeline lineno="88" refid="class_test_payload_visitor_1a696edf0b12cc446b448ab676dfc6fc78" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="class_test_payload_visitor_1a696edf0b12cc446b448ab676dfc6fc78" kindref="member">operator()</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_c_key_i_d" kindref="compound">CKeyID</ref><sp/>&amp;</highlight><highlight class="keywordtype">id</highlight><highlight class="normal">)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="89"><highlight class="keyword"><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classuint160" kindref="compound">uint160</ref><sp/>exp_key(exp_payload);</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>exp_key<sp/>==<sp/><ref refid="db__test_8cc_1a7441ef0865bcb3db9b8064dd7375c1ea" kindref="member">id</ref>;</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="93" refid="class_test_payload_visitor_1a8ff11d72e4866f6ae023e3ce23830454" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="class_test_payload_visitor_1a8ff11d72e4866f6ae023e3ce23830454" kindref="member">operator()</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_c_script_i_d" kindref="compound">CScriptID</ref><sp/>&amp;</highlight><highlight class="keywordtype">id</highlight><highlight class="normal">)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="94"><highlight class="keyword"><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classuint160" kindref="compound">uint160</ref><sp/>exp_key(exp_payload);</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>exp_key<sp/>==<sp/><ref refid="db__test_8cc_1a7441ef0865bcb3db9b8064dd7375c1ea" kindref="member">id</ref>;</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="98" refid="class_test_payload_visitor_1ae7023a445384bfb2602f5fbdb6bba932" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="class_test_payload_visitor_1ae7023a445384bfb2602f5fbdb6bba932" kindref="member">operator()</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_c_no_destination" kindref="compound">CNoDestination</ref><sp/>&amp;no)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="99"><highlight class="keyword"><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>exp_payload.size()<sp/>==<sp/>0;</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="102"><highlight class="normal">};</highlight></codeline>
<codeline lineno="103"><highlight class="normal"></highlight></codeline>
<codeline lineno="104"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Goal:<sp/>check<sp/>that<sp/>parsed<sp/>keys<sp/>match<sp/>test<sp/>payload</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="105" refid="base58__tests_8cpp_1ac3fd789edd04736fe905e3ffdc901bc9" refkind="member"><highlight class="normal"><ref refid="base58__tests_8cpp_1ad270e557a9bafea8a9047386547b6615" kindref="member">BOOST_AUTO_TEST_CASE</ref>(base58_keys_valid_parse)</highlight></codeline>
<codeline lineno="106"><highlight class="normal">{</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacejson__spirit_1aee299e52bda3816039a53210cbbfea1a" kindref="member">Array</ref><sp/>tests<sp/>=<sp/><ref refid="base58__tests_8cpp_1ab540423fd88bab1f8e933726406f2675" kindref="member">read_json</ref>(</highlight><highlight class="stringliteral">&quot;base58_keys_valid.json&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;unsigned<sp/>char&gt;<sp/>result;</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_c_dark_silk_secret" kindref="compound">CDarkSilkSecret</ref><sp/>secret;</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_c_dark_silk_address" kindref="compound">CDarkSilkAddress</ref><sp/>addr;</highlight></codeline>
<codeline lineno="111"><highlight class="normal"></highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/>BOOST_FOREACH(<ref refid="classjson__spirit_1_1_value__impl" kindref="compound">Value</ref>&amp;<sp/>tv,<sp/>tests)</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacejson__spirit_1aee299e52bda3816039a53210cbbfea1a" kindref="member">Array</ref><sp/><ref refid="db__test_8cc_1a9cc668c18debdbcad21b45fdd8158648" kindref="member">test</ref><sp/>=<sp/>tv.<ref refid="classjson__spirit_1_1_value__impl_1a03541c56cdbab1f794982fb73a8e4361" kindref="member">get_array</ref>();</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>strTest<sp/>=<sp/><ref refid="namespacejson__spirit_1ad4b51f460af6cdec5b128f53f233b0c6" kindref="member">write_string</ref>(tv,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(test.size()<sp/>&lt;<sp/>3)<sp/></highlight><highlight class="comment">//<sp/>Allow<sp/>for<sp/>extra<sp/>stuff<sp/>(useful<sp/>for<sp/>comments)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>BOOST_ERROR(</highlight><highlight class="stringliteral">&quot;Bad<sp/>test:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>strTest);</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>exp_base58string<sp/>=<sp/>test[0].get_str();</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;unsigned<sp/>char&gt;<sp/>exp_payload<sp/>=<sp/><ref refid="util_8cpp_1abea395175fbc4a788ed0f0a41710b8a7" kindref="member">ParseHex</ref>(test[1].<ref refid="namespacejson__spirit_1acdef70e45909522ba51a74b68e186b25" kindref="member">get_str</ref>());</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="namespacejson__spirit_1aa1e2c4032be0d25e7b42eb17115dabb2" kindref="member">Object</ref><sp/>&amp;metadata<sp/>=<sp/>test[2].get_obj();</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>isPrivkey<sp/>=<sp/><ref refid="namespacejson__spirit_1a74f681114641f2ca6250370280ee1089" kindref="member">find_value</ref>(metadata,<sp/></highlight><highlight class="stringliteral">&quot;isPrivkey&quot;</highlight><highlight class="normal">).get_bool();</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>isTestnet<sp/>=<sp/><ref refid="namespacejson__spirit_1a74f681114641f2ca6250370280ee1089" kindref="member">find_value</ref>(metadata,<sp/></highlight><highlight class="stringliteral">&quot;isTestnet&quot;</highlight><highlight class="normal">).get_bool();</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(isTestnet)</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="chainparams_8cpp_1ad1af61cf4a31ae487837d1b09b0e125c" kindref="member">SelectParams</ref>(<ref refid="class_c_chain_params_1a5c4bb1d7c0205399ff06ee58fab7f176a7bfe4c44c13adffa9807917840050c60" kindref="member">CChainParams::TESTNET</ref>);</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="chainparams_8cpp_1ad1af61cf4a31ae487837d1b09b0e125c" kindref="member">SelectParams</ref>(<ref refid="class_c_chain_params_1a5c4bb1d7c0205399ff06ee58fab7f176ab64dab5901e9dc8c7bf79daf9f7a2e1f" kindref="member">CChainParams::MAIN</ref>);</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(isPrivkey)</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>isCompressed<sp/>=<sp/><ref refid="namespacejson__spirit_1a74f681114641f2ca6250370280ee1089" kindref="member">find_value</ref>(metadata,<sp/></highlight><highlight class="stringliteral">&quot;isCompressed&quot;</highlight><highlight class="normal">).get_bool();</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Must<sp/>be<sp/>valid<sp/>private<sp/>key</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Note:<sp/>CDarkSilkSecret::SetString<sp/>tests<sp/>isValid,<sp/>whereas<sp/>CDarkSilkAddress<sp/>does<sp/>not!</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>BOOST_CHECK_MESSAGE(secret.<ref refid="class_c_dark_silk_secret_1a06075192fb631c3b406a6ca231d2f926" kindref="member">SetString</ref>(exp_base58string),<sp/></highlight><highlight class="stringliteral">&quot;!SetString:&quot;</highlight><highlight class="normal">+<sp/>strTest);</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>BOOST_CHECK_MESSAGE(secret.<ref refid="class_c_dark_silk_secret_1a30db2efc9987de8a743a2aa000c84617" kindref="member">IsValid</ref>(),<sp/></highlight><highlight class="stringliteral">&quot;!IsValid:&quot;</highlight><highlight class="normal"><sp/>+<sp/>strTest);</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_c_key" kindref="compound">CKey</ref><sp/>privkey<sp/>=<sp/>secret.<ref refid="class_c_dark_silk_secret_1af7b026d90efb897f6e592ce424c8d2c9" kindref="member">GetKey</ref>();</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>BOOST_CHECK_MESSAGE(privkey.IsCompressed()<sp/>==<sp/>isCompressed,<sp/></highlight><highlight class="stringliteral">&quot;compressed<sp/>mismatch:&quot;</highlight><highlight class="normal"><sp/>+<sp/>strTest);</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>BOOST_CHECK_MESSAGE(privkey.size()<sp/>==<sp/>exp_payload.size()<sp/>&amp;&amp;<sp/>std::equal(privkey.begin(),<sp/>privkey.end(),<sp/>exp_payload.begin()),<sp/></highlight><highlight class="stringliteral">&quot;key<sp/>mismatch:&quot;</highlight><highlight class="normal"><sp/>+<sp/>strTest);</highlight></codeline>
<codeline lineno="140"><highlight class="normal"></highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Private<sp/>key<sp/>must<sp/>be<sp/>invalid<sp/>public<sp/>key</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>addr.<ref refid="class_c_base58_data_1a250fa3bc97d03c7d87de5485c8b49b57" kindref="member">SetString</ref>(exp_base58string);</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>BOOST_CHECK_MESSAGE(!addr.<ref refid="class_c_dark_silk_address_1ab98113189d0746ea660447efe3700103" kindref="member">IsValid</ref>(),<sp/></highlight><highlight class="stringliteral">&quot;IsValid<sp/>privkey<sp/>as<sp/>pubkey:&quot;</highlight><highlight class="normal"><sp/>+<sp/>strTest);</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>exp_addrType<sp/>=<sp/><ref refid="namespacejson__spirit_1a74f681114641f2ca6250370280ee1089" kindref="member">find_value</ref>(metadata,<sp/></highlight><highlight class="stringliteral">&quot;addrType&quot;</highlight><highlight class="normal">).get_str();<sp/></highlight><highlight class="comment">//<sp/>&quot;script&quot;<sp/>or<sp/>&quot;pubkey&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Must<sp/>be<sp/>valid<sp/>public<sp/>key</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>BOOST_CHECK_MESSAGE(addr.<ref refid="class_c_base58_data_1a250fa3bc97d03c7d87de5485c8b49b57" kindref="member">SetString</ref>(exp_base58string),<sp/></highlight><highlight class="stringliteral">&quot;SetString:&quot;</highlight><highlight class="normal"><sp/>+<sp/>strTest);</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>BOOST_CHECK_MESSAGE(addr.<ref refid="class_c_dark_silk_address_1ab98113189d0746ea660447efe3700103" kindref="member">IsValid</ref>(),<sp/></highlight><highlight class="stringliteral">&quot;!IsValid:&quot;</highlight><highlight class="normal"><sp/>+<sp/>strTest);</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>BOOST_CHECK_MESSAGE(addr.<ref refid="class_c_dark_silk_address_1aae1f7d243d122e41b4cddf481c6b0543" kindref="member">IsScript</ref>()<sp/>==<sp/>(exp_addrType<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;script&quot;</highlight><highlight class="normal">),<sp/></highlight><highlight class="stringliteral">&quot;isScript<sp/>mismatch&quot;</highlight><highlight class="normal"><sp/>+<sp/>strTest);</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="keystore_8h_1a8f46ecba0ddeb036be6b58d6ed1909cd" kindref="member">CTxDestination</ref><sp/>dest<sp/>=<sp/>addr.<ref refid="class_c_dark_silk_address_1a907e63758c7914a246b5807f6babf97d" kindref="member">Get</ref>();</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>BOOST_CHECK_MESSAGE(boost::apply_visitor(<ref refid="class_test_addr_type_visitor" kindref="compound">TestAddrTypeVisitor</ref>(exp_addrType),<sp/>dest),<sp/></highlight><highlight class="stringliteral">&quot;addrType<sp/>mismatch&quot;</highlight><highlight class="normal"><sp/>+<sp/>strTest);</highlight></codeline>
<codeline lineno="154"><highlight class="normal"></highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Public<sp/>key<sp/>must<sp/>be<sp/>invalid<sp/>private<sp/>key</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>secret.<ref refid="class_c_dark_silk_secret_1a06075192fb631c3b406a6ca231d2f926" kindref="member">SetString</ref>(exp_base58string);</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>BOOST_CHECK_MESSAGE(!secret.<ref refid="class_c_dark_silk_secret_1a30db2efc9987de8a743a2aa000c84617" kindref="member">IsValid</ref>(),<sp/></highlight><highlight class="stringliteral">&quot;IsValid<sp/>pubkey<sp/>as<sp/>privkey:&quot;</highlight><highlight class="normal"><sp/>+<sp/>strTest);</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="chainparams_8cpp_1ad1af61cf4a31ae487837d1b09b0e125c" kindref="member">SelectParams</ref>(<ref refid="class_c_chain_params_1a5c4bb1d7c0205399ff06ee58fab7f176ab64dab5901e9dc8c7bf79daf9f7a2e1f" kindref="member">CChainParams::MAIN</ref>);</highlight></codeline>
<codeline lineno="161"><highlight class="normal">}</highlight></codeline>
<codeline lineno="162"><highlight class="normal"></highlight></codeline>
<codeline lineno="163"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Goal:<sp/>check<sp/>that<sp/>generated<sp/>keys<sp/>match<sp/>test<sp/>vectors</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="164" refid="base58__tests_8cpp_1a1fd3203c7badbc6513c9dcaf58d4ccf9" refkind="member"><highlight class="normal"><ref refid="base58__tests_8cpp_1ad270e557a9bafea8a9047386547b6615" kindref="member">BOOST_AUTO_TEST_CASE</ref>(base58_keys_valid_gen)</highlight></codeline>
<codeline lineno="165"><highlight class="normal">{</highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacejson__spirit_1aee299e52bda3816039a53210cbbfea1a" kindref="member">Array</ref><sp/>tests<sp/>=<sp/><ref refid="base58__tests_8cpp_1ab540423fd88bab1f8e933726406f2675" kindref="member">read_json</ref>(</highlight><highlight class="stringliteral">&quot;base58_keys_valid.json&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;unsigned<sp/>char&gt;<sp/>result;</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/><sp/>BOOST_FOREACH(<ref refid="classjson__spirit_1_1_value__impl" kindref="compound">Value</ref>&amp;<sp/>tv,<sp/>tests)</highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacejson__spirit_1aee299e52bda3816039a53210cbbfea1a" kindref="member">Array</ref><sp/><ref refid="db__test_8cc_1a9cc668c18debdbcad21b45fdd8158648" kindref="member">test</ref><sp/>=<sp/>tv.<ref refid="classjson__spirit_1_1_value__impl_1a03541c56cdbab1f794982fb73a8e4361" kindref="member">get_array</ref>();</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>strTest<sp/>=<sp/><ref refid="namespacejson__spirit_1ad4b51f460af6cdec5b128f53f233b0c6" kindref="member">write_string</ref>(tv,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(test.size()<sp/>&lt;<sp/>3)<sp/></highlight><highlight class="comment">//<sp/>Allow<sp/>for<sp/>extra<sp/>stuff<sp/>(useful<sp/>for<sp/>comments)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>BOOST_ERROR(</highlight><highlight class="stringliteral">&quot;Bad<sp/>test:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>strTest);</highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>exp_base58string<sp/>=<sp/>test[0].get_str();</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;unsigned<sp/>char&gt;<sp/>exp_payload<sp/>=<sp/><ref refid="util_8cpp_1abea395175fbc4a788ed0f0a41710b8a7" kindref="member">ParseHex</ref>(test[1].<ref refid="namespacejson__spirit_1acdef70e45909522ba51a74b68e186b25" kindref="member">get_str</ref>());</highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="namespacejson__spirit_1aa1e2c4032be0d25e7b42eb17115dabb2" kindref="member">Object</ref><sp/>&amp;metadata<sp/>=<sp/>test[2].get_obj();</highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>isPrivkey<sp/>=<sp/><ref refid="namespacejson__spirit_1a74f681114641f2ca6250370280ee1089" kindref="member">find_value</ref>(metadata,<sp/></highlight><highlight class="stringliteral">&quot;isPrivkey&quot;</highlight><highlight class="normal">).get_bool();</highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>isTestnet<sp/>=<sp/><ref refid="namespacejson__spirit_1a74f681114641f2ca6250370280ee1089" kindref="member">find_value</ref>(metadata,<sp/></highlight><highlight class="stringliteral">&quot;isTestnet&quot;</highlight><highlight class="normal">).get_bool();</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(isTestnet)</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="chainparams_8cpp_1ad1af61cf4a31ae487837d1b09b0e125c" kindref="member">SelectParams</ref>(<ref refid="class_c_chain_params_1a5c4bb1d7c0205399ff06ee58fab7f176a7bfe4c44c13adffa9807917840050c60" kindref="member">CChainParams::TESTNET</ref>);</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="chainparams_8cpp_1ad1af61cf4a31ae487837d1b09b0e125c" kindref="member">SelectParams</ref>(<ref refid="class_c_chain_params_1a5c4bb1d7c0205399ff06ee58fab7f176ab64dab5901e9dc8c7bf79daf9f7a2e1f" kindref="member">CChainParams::MAIN</ref>);</highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(isPrivkey)</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>isCompressed<sp/>=<sp/><ref refid="namespacejson__spirit_1a74f681114641f2ca6250370280ee1089" kindref="member">find_value</ref>(metadata,<sp/></highlight><highlight class="stringliteral">&quot;isCompressed&quot;</highlight><highlight class="normal">).get_bool();</highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_c_key" kindref="compound">CKey</ref><sp/>key;</highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>key.<ref refid="class_c_key_1aaa13d5f08456bba094210c5eeabf64c8" kindref="member">Set</ref>(exp_payload.begin(),<sp/>exp_payload.end(),<sp/>isCompressed);</highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assert(key.<ref refid="class_c_key_1a62094263b7422a45b45ac508396f19eb" kindref="member">IsValid</ref>());</highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_c_dark_silk_secret" kindref="compound">CDarkSilkSecret</ref><sp/>secret;</highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>secret.<ref refid="class_c_dark_silk_secret_1a74deecf3a37ff76ff64ca8b935045bbd" kindref="member">SetKey</ref>(key);</highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>BOOST_CHECK_MESSAGE(secret.ToString()<sp/>==<sp/>exp_base58string,<sp/></highlight><highlight class="stringliteral">&quot;result<sp/>mismatch:<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>strTest);</highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>exp_addrType<sp/>=<sp/><ref refid="namespacejson__spirit_1a74f681114641f2ca6250370280ee1089" kindref="member">find_value</ref>(metadata,<sp/></highlight><highlight class="stringliteral">&quot;addrType&quot;</highlight><highlight class="normal">).get_str();</highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="keystore_8h_1a8f46ecba0ddeb036be6b58d6ed1909cd" kindref="member">CTxDestination</ref><sp/>dest;</highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(exp_addrType<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;pubkey&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dest<sp/>=<sp/><ref refid="class_c_key_i_d" kindref="compound">CKeyID</ref>(<ref refid="classuint160" kindref="compound">uint160</ref>(exp_payload));</highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(exp_addrType<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;script&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dest<sp/>=<sp/><ref refid="class_c_script_i_d" kindref="compound">CScriptID</ref>(<ref refid="classuint160" kindref="compound">uint160</ref>(exp_payload));</highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(exp_addrType<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;none&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dest<sp/>=<sp/><ref refid="class_c_no_destination" kindref="compound">CNoDestination</ref>();</highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>BOOST_ERROR(</highlight><highlight class="stringliteral">&quot;Bad<sp/>addrtype:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>strTest);</highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_c_dark_silk_address" kindref="compound">CDarkSilkAddress</ref><sp/>addrOut;</highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>BOOST_CHECK_MESSAGE(boost::apply_visitor(CDarkSilkAddressVisitor(&amp;addrOut),<sp/>dest),<sp/></highlight><highlight class="stringliteral">&quot;encode<sp/>dest:<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>strTest);</highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>BOOST_CHECK_MESSAGE(addrOut.<ref refid="class_c_base58_data_1a9a47b10dadff15b8d6a6d0e63ce3ae32" kindref="member">ToString</ref>()<sp/>==<sp/>exp_base58string,<sp/></highlight><highlight class="stringliteral">&quot;mismatch:<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>strTest);</highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="222"><highlight class="normal"></highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Visiting<sp/>a<sp/>CNoDestination<sp/>must<sp/>fail</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_c_dark_silk_address" kindref="compound">CDarkSilkAddress</ref><sp/>dummyAddr;</highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="keystore_8h_1a8f46ecba0ddeb036be6b58d6ed1909cd" kindref="member">CTxDestination</ref><sp/>nodest<sp/>=<sp/><ref refid="class_c_no_destination" kindref="compound">CNoDestination</ref>();</highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/><sp/><sp/>BOOST_CHECK(!boost::apply_visitor(CDarkSilkAddressVisitor(&amp;dummyAddr),<sp/>nodest));</highlight></codeline>
<codeline lineno="227"><highlight class="normal"></highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="chainparams_8cpp_1ad1af61cf4a31ae487837d1b09b0e125c" kindref="member">SelectParams</ref>(<ref refid="class_c_chain_params_1a5c4bb1d7c0205399ff06ee58fab7f176ab64dab5901e9dc8c7bf79daf9f7a2e1f" kindref="member">CChainParams::MAIN</ref>);</highlight></codeline>
<codeline lineno="229"><highlight class="normal">}</highlight></codeline>
<codeline lineno="230"><highlight class="normal"></highlight></codeline>
<codeline lineno="231"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Goal:<sp/>check<sp/>that<sp/>base58<sp/>parsing<sp/>code<sp/>is<sp/>robust<sp/>against<sp/>a<sp/>variety<sp/>of<sp/>corrupted<sp/>data</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="232" refid="base58__tests_8cpp_1a0d04f1ee290574d7fbbaba7bfd06da90" refkind="member"><highlight class="normal"><ref refid="base58__tests_8cpp_1ad270e557a9bafea8a9047386547b6615" kindref="member">BOOST_AUTO_TEST_CASE</ref>(base58_keys_invalid)</highlight></codeline>
<codeline lineno="233"><highlight class="normal">{</highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacejson__spirit_1aee299e52bda3816039a53210cbbfea1a" kindref="member">Array</ref><sp/>tests<sp/>=<sp/><ref refid="base58__tests_8cpp_1ab540423fd88bab1f8e933726406f2675" kindref="member">read_json</ref>(</highlight><highlight class="stringliteral">&quot;base58_keys_invalid.json&quot;</highlight><highlight class="normal">);<sp/></highlight><highlight class="comment">//<sp/>Negative<sp/>testcases</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;unsigned<sp/>char&gt;<sp/>result;</highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_c_dark_silk_secret" kindref="compound">CDarkSilkSecret</ref><sp/>secret;</highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_c_dark_silk_address" kindref="compound">CDarkSilkAddress</ref><sp/>addr;</highlight></codeline>
<codeline lineno="238"><highlight class="normal"></highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/><sp/><sp/>BOOST_FOREACH(<ref refid="classjson__spirit_1_1_value__impl" kindref="compound">Value</ref>&amp;<sp/>tv,<sp/>tests)</highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacejson__spirit_1aee299e52bda3816039a53210cbbfea1a" kindref="member">Array</ref><sp/><ref refid="db__test_8cc_1a9cc668c18debdbcad21b45fdd8158648" kindref="member">test</ref><sp/>=<sp/>tv.<ref refid="classjson__spirit_1_1_value__impl_1a03541c56cdbab1f794982fb73a8e4361" kindref="member">get_array</ref>();</highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>strTest<sp/>=<sp/><ref refid="namespacejson__spirit_1ad4b51f460af6cdec5b128f53f233b0c6" kindref="member">write_string</ref>(tv,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(test.size()<sp/>&lt;<sp/>1)<sp/></highlight><highlight class="comment">//<sp/>Allow<sp/>for<sp/>extra<sp/>stuff<sp/>(useful<sp/>for<sp/>comments)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>BOOST_ERROR(</highlight><highlight class="stringliteral">&quot;Bad<sp/>test:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>strTest);</highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>exp_base58string<sp/>=<sp/>test[0].get_str();</highlight></codeline>
<codeline lineno="249"><highlight class="normal"></highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>must<sp/>be<sp/>invalid<sp/>as<sp/>public<sp/>and<sp/>as<sp/>private<sp/>key</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>addr.<ref refid="class_c_base58_data_1a250fa3bc97d03c7d87de5485c8b49b57" kindref="member">SetString</ref>(exp_base58string);</highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>BOOST_CHECK_MESSAGE(!addr.<ref refid="class_c_dark_silk_address_1ab98113189d0746ea660447efe3700103" kindref="member">IsValid</ref>(),<sp/></highlight><highlight class="stringliteral">&quot;IsValid<sp/>pubkey:&quot;</highlight><highlight class="normal"><sp/>+<sp/>strTest);</highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>secret.<ref refid="class_c_dark_silk_secret_1a06075192fb631c3b406a6ca231d2f926" kindref="member">SetString</ref>(exp_base58string);</highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>BOOST_CHECK_MESSAGE(!secret.<ref refid="class_c_dark_silk_secret_1a30db2efc9987de8a743a2aa000c84617" kindref="member">IsValid</ref>(),<sp/></highlight><highlight class="stringliteral">&quot;IsValid<sp/>privkey:&quot;</highlight><highlight class="normal"><sp/>+<sp/>strTest);</highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="256"><highlight class="normal">}</highlight></codeline>
<codeline lineno="257"><highlight class="normal"></highlight></codeline>
<codeline lineno="258"><highlight class="normal"></highlight></codeline>
<codeline lineno="259"><highlight class="normal">BOOST_AUTO_TEST_SUITE_END()</highlight></codeline>
<codeline lineno="260"><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="/home/dev/ds-160209/src/test/base58_tests.cpp"/>
  </compounddef>
</doxygen>
