<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.9.1">
  <compounddef id="class_test_addr_type_visitor" kind="class" language="C++" prot="public">
    <compoundname>TestAddrTypeVisitor</compoundname>
    <basecompoundref prot="public" virt="non-virtual">boost::static_visitor&lt; bool &gt;</basecompoundref>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="class_test_addr_type_visitor_1a555b61e618f28b80be6cf31ab4f111e9" prot="private" static="no" mutable="no">
        <type>std::string</type>
        <definition>std::string TestAddrTypeVisitor::exp_addrType</definition>
        <argsstring></argsstring>
        <name>exp_addrType</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/test/base58_tests.cpp" line="64" column="1" bodyfile="/home/dev/ds-160209/src/test/base58_tests.cpp" bodystart="64" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="class_test_addr_type_visitor_1ae60ae920ab6c864c5543a9a795fde74a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>TestAddrTypeVisitor::TestAddrTypeVisitor</definition>
        <argsstring>(const std::string &amp;exp_addrType)</argsstring>
        <name>TestAddrTypeVisitor</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>exp_addrType</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/test/base58_tests.cpp" line="66" column="1" bodyfile="/home/dev/ds-160209/src/test/base58_tests.cpp" bodystart="66" bodyend="66"/>
      </memberdef>
      <memberdef kind="function" id="class_test_addr_type_visitor_1a48efd26888a968e1b35843950a7c639f" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool TestAddrTypeVisitor::operator()</definition>
        <argsstring>(const CKeyID &amp;id) const </argsstring>
        <name>operator()</name>
        <param>
          <type>const <ref refid="class_c_key_i_d" kindref="compound">CKeyID</ref> &amp;</type>
          <declname>id</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/test/base58_tests.cpp" line="67" column="1" bodyfile="/home/dev/ds-160209/src/test/base58_tests.cpp" bodystart="67" bodyend="70"/>
      </memberdef>
      <memberdef kind="function" id="class_test_addr_type_visitor_1a5168376a62c013762f6777076c456822" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool TestAddrTypeVisitor::operator()</definition>
        <argsstring>(const CScriptID &amp;id) const </argsstring>
        <name>operator()</name>
        <param>
          <type>const <ref refid="class_c_script_i_d" kindref="compound">CScriptID</ref> &amp;</type>
          <declname>id</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/test/base58_tests.cpp" line="71" column="1" bodyfile="/home/dev/ds-160209/src/test/base58_tests.cpp" bodystart="71" bodyend="74"/>
      </memberdef>
      <memberdef kind="function" id="class_test_addr_type_visitor_1ad612b65af5ab7f6aead511daf97196a6" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool TestAddrTypeVisitor::operator()</definition>
        <argsstring>(const CNoDestination &amp;no) const </argsstring>
        <name>operator()</name>
        <param>
          <type>const <ref refid="class_c_no_destination" kindref="compound">CNoDestination</ref> &amp;</type>
          <declname>no</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/test/base58_tests.cpp" line="75" column="1" bodyfile="/home/dev/ds-160209/src/test/base58_tests.cpp" bodystart="75" bodyend="78"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="1809">
        <label>boost::static_visitor&lt; bool &gt;</label>
      </node>
      <node id="1808">
        <label>TestAddrTypeVisitor</label>
        <link refid="class_test_addr_type_visitor"/>
        <childnode refid="1809" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="1811">
        <label>boost::static_visitor&lt; bool &gt;</label>
      </node>
      <node id="1810">
        <label>TestAddrTypeVisitor</label>
        <link refid="class_test_addr_type_visitor"/>
        <childnode refid="1811" relation="public-inheritance">
        </childnode>
      </node>
    </collaborationgraph>
    <location file="/home/dev/ds-160209/src/test/base58_tests.cpp" line="62" column="1" bodyfile="/home/dev/ds-160209/src/test/base58_tests.cpp" bodystart="61" bodyend="79"/>
    <listofallmembers>
      <member refid="class_test_addr_type_visitor_1a555b61e618f28b80be6cf31ab4f111e9" prot="private" virt="non-virtual"><scope>TestAddrTypeVisitor</scope><name>exp_addrType</name></member>
      <member refid="class_test_addr_type_visitor_1a48efd26888a968e1b35843950a7c639f" prot="public" virt="non-virtual"><scope>TestAddrTypeVisitor</scope><name>operator()</name></member>
      <member refid="class_test_addr_type_visitor_1a5168376a62c013762f6777076c456822" prot="public" virt="non-virtual"><scope>TestAddrTypeVisitor</scope><name>operator()</name></member>
      <member refid="class_test_addr_type_visitor_1ad612b65af5ab7f6aead511daf97196a6" prot="public" virt="non-virtual"><scope>TestAddrTypeVisitor</scope><name>operator()</name></member>
      <member refid="class_test_addr_type_visitor_1ae60ae920ab6c864c5543a9a795fde74a" prot="public" virt="non-virtual"><scope>TestAddrTypeVisitor</scope><name>TestAddrTypeVisitor</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
