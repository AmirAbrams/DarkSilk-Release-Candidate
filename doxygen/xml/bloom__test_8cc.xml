<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.9.1">
  <compounddef id="bloom__test_8cc" kind="file" language="C++">
    <compoundname>bloom_test.cc</compoundname>
    <includes refid="filter__policy_8h" local="yes">leveldb/filter_policy.h</includes>
    <includes refid="coding_8h" local="yes">util/coding.h</includes>
    <includes refid="logging_8h" local="yes">util/logging.h</includes>
    <includes refid="testharness_8h" local="yes">util/testharness.h</includes>
    <includes refid="testutil_8h" local="yes">util/testutil.h</includes>
    <incdepgraph>
      <node id="39564">
        <label>stdarg.h</label>
      </node>
      <node id="39566">
        <label>util/random.h</label>
        <link refid="random_8h"/>
        <childnode refid="39551" relation="include">
        </childnode>
      </node>
      <node id="39557">
        <label>util/logging.h</label>
        <link refid="logging_8h"/>
        <childnode refid="39558" relation="include">
        </childnode>
        <childnode refid="39551" relation="include">
        </childnode>
        <childnode refid="39549" relation="include">
        </childnode>
        <childnode refid="39556" relation="include">
        </childnode>
      </node>
      <node id="39554">
        <label>assert.h</label>
      </node>
      <node id="39560">
        <label>stdlib.h</label>
      </node>
      <node id="39547">
        <label>/home/dev/ds-160209/src/leveldb/util/bloom_test.cc</label>
        <link refid="bloom_test.cc"/>
        <childnode refid="39548" relation="include">
        </childnode>
        <childnode refid="39550" relation="include">
        </childnode>
        <childnode refid="39557" relation="include">
        </childnode>
        <childnode refid="39559" relation="include">
        </childnode>
        <childnode refid="39567" relation="include">
        </childnode>
      </node>
      <node id="39549">
        <label>string</label>
      </node>
      <node id="39567">
        <label>util/testutil.h</label>
        <link refid="testutil_8h"/>
        <childnode refid="39562" relation="include">
        </childnode>
        <childnode refid="39553" relation="include">
        </childnode>
        <childnode refid="39566" relation="include">
        </childnode>
      </node>
      <node id="39555">
        <label>stddef.h</label>
      </node>
      <node id="39565">
        <label>leveldb/status.h</label>
        <link refid="status_8h"/>
        <childnode refid="39549" relation="include">
        </childnode>
        <childnode refid="39553" relation="include">
        </childnode>
      </node>
      <node id="39550">
        <label>util/coding.h</label>
        <link refid="coding_8h"/>
        <childnode refid="39551" relation="include">
        </childnode>
        <childnode refid="39552" relation="include">
        </childnode>
        <childnode refid="39549" relation="include">
        </childnode>
        <childnode refid="39553" relation="include">
        </childnode>
        <childnode refid="39556" relation="include">
        </childnode>
      </node>
      <node id="39552">
        <label>string.h</label>
      </node>
      <node id="39563">
        <label>vector</label>
      </node>
      <node id="39561">
        <label>sstream</label>
      </node>
      <node id="39556">
        <label>port/port.h</label>
        <link refid="port_8h"/>
        <childnode refid="39552" relation="include">
        </childnode>
      </node>
      <node id="39551">
        <label>stdint.h</label>
        <link refid="stdint_8h"/>
      </node>
      <node id="39559">
        <label>util/testharness.h</label>
        <link refid="testharness_8h"/>
        <childnode refid="39558" relation="include">
        </childnode>
        <childnode refid="39560" relation="include">
        </childnode>
        <childnode refid="39561" relation="include">
        </childnode>
        <childnode refid="39562" relation="include">
        </childnode>
        <childnode refid="39553" relation="include">
        </childnode>
        <childnode refid="39566" relation="include">
        </childnode>
      </node>
      <node id="39553">
        <label>leveldb/slice.h</label>
        <link refid="slice_8h"/>
        <childnode refid="39554" relation="include">
        </childnode>
        <childnode refid="39555" relation="include">
        </childnode>
        <childnode refid="39552" relation="include">
        </childnode>
        <childnode refid="39549" relation="include">
        </childnode>
      </node>
      <node id="39562">
        <label>leveldb/env.h</label>
        <link refid="env_8h"/>
        <childnode refid="39549" relation="include">
        </childnode>
        <childnode refid="39563" relation="include">
        </childnode>
        <childnode refid="39564" relation="include">
        </childnode>
        <childnode refid="39551" relation="include">
        </childnode>
        <childnode refid="39565" relation="include">
        </childnode>
      </node>
      <node id="39558">
        <label>stdio.h</label>
      </node>
      <node id="39548">
        <label>leveldb/filter_policy.h</label>
        <link refid="filter__policy_8h"/>
        <childnode refid="39549" relation="include">
        </childnode>
      </node>
    </incdepgraph>
    <innerclass refid="classleveldb_1_1_bloom_test" prot="public">leveldb::BloomTest</innerclass>
    <innernamespace refid="namespaceleveldb">leveldb</innernamespace>
      <sectiondef kind="func">
      <memberdef kind="function" id="bloom__test_8cc_1a3c04138a5bfe5d72780bb7e82a18e627" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int main</definition>
        <argsstring>(int argc, char **argv)</argsstring>
        <name>main</name>
        <param>
          <type>int</type>
          <declname>argc</declname>
        </param>
        <param>
          <type>char **</type>
          <declname>argv</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/leveldb/util/bloom_test.cc" line="159" column="1" bodyfile="/home/dev/ds-160209/src/leveldb/util/bloom_test.cc" bodystart="159" bodyend="161"/>
        <references refid="namespaceleveldb_1_1test_1a3329162c54a0bff42d41c2ac86b2580a" compoundref="testharness_8cc" startline="36" endline="58">leveldb::test::RunAllTests</references>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">//<sp/>Copyright<sp/>(c)<sp/>2012<sp/>The<sp/>LevelDB<sp/>Authors.<sp/>All<sp/>rights<sp/>reserved.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Use<sp/>of<sp/>this<sp/>source<sp/>code<sp/>is<sp/>governed<sp/>by<sp/>a<sp/>BSD-style<sp/>license<sp/>that<sp/>can<sp/>be</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="comment">//<sp/>found<sp/>in<sp/>the<sp/>LICENSE<sp/>file.<sp/>See<sp/>the<sp/>AUTHORS<sp/>file<sp/>for<sp/>names<sp/>of<sp/>contributors.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="filter__policy_8h" kindref="compound">leveldb/filter_policy.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="coding_8h" kindref="compound">util/coding.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="logging_8h" kindref="compound">util/logging.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="testharness_8h" kindref="compound">util/testharness.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="testutil_8h" kindref="compound">util/testutil.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespaceleveldb" kindref="compound">leveldb</ref><sp/>{</highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>kVerbose<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>Slice<sp/><ref refid="namespaceleveldb_1a7e9a9725b13fa0bd922d885280dfab95" kindref="member">Key</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>buffer)<sp/>{</highlight></codeline>
<codeline lineno="17"><highlight class="normal"><sp/><sp/><ref refid="namespaceleveldb_1a265d1eea2e5d8e42cf86372ed4904886" kindref="member">EncodeFixed32</ref>(buffer,<sp/>i);</highlight></codeline>
<codeline lineno="18"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Slice(buffer,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="stdint_8h_1a435d1572bf3f880d55459d9805097f62" kindref="member">uint32_t</ref>));</highlight></codeline>
<codeline lineno="19"><highlight class="normal">}</highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight></codeline>
<codeline lineno="21" refid="classleveldb_1_1_bloom_test" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classleveldb_1_1_bloom_test" kindref="compound">BloomTest</ref><sp/>{</highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classleveldb_1_1_filter_policy" kindref="compound">FilterPolicy</ref>*<sp/>policy_;</highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/>std::string<sp/>filter_;</highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/>std::vector&lt;std::string&gt;<sp/>keys_;</highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="28" refid="classleveldb_1_1_bloom_test_1a339a382294295be3e78dfccd25b945fc" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="classleveldb_1_1_bloom_test_1a339a382294295be3e78dfccd25b945fc" kindref="member">BloomTest</ref>()<sp/>:<sp/>policy_(<ref refid="namespaceleveldb_1ae6b34bf2331983721554f284b1eaa1a1" kindref="member">NewBloomFilterPolicy</ref>(10))<sp/>{<sp/>}</highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight></codeline>
<codeline lineno="30" refid="classleveldb_1_1_bloom_test_1a3370b88a1df119a64ced88ac71bfb6e2" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="classleveldb_1_1_bloom_test_1a3370b88a1df119a64ced88ac71bfb6e2" kindref="member">~BloomTest</ref>()<sp/>{</highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>policy_;</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight></codeline>
<codeline lineno="34" refid="classleveldb_1_1_bloom_test_1a067ba6753890a5a924edd7efaad7187a" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classleveldb_1_1_bloom_test_1a067ba6753890a5a924edd7efaad7187a" kindref="member">Reset</ref>()<sp/>{</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/>keys_.clear();</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/>filter_.clear();</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight></codeline>
<codeline lineno="39" refid="classleveldb_1_1_bloom_test_1a2f7777014cec7c35f85373e2832bfd88" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classleveldb_1_1_bloom_test_1a2f7777014cec7c35f85373e2832bfd88" kindref="member">Add</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classleveldb_1_1_slice" kindref="compound">Slice</ref>&amp;<sp/>s)<sp/>{</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/>keys_.push_back(s.<ref refid="classleveldb_1_1_slice_1a2cdd9fb649105033fde510afc9416732" kindref="member">ToString</ref>());</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight></codeline>
<codeline lineno="43" refid="classleveldb_1_1_bloom_test_1ad4fc802152c68599c919d33917523d31" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classleveldb_1_1_bloom_test_1ad4fc802152c68599c919d33917523d31" kindref="member">Build</ref>()<sp/>{</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;Slice&gt;<sp/>key_slices;</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>keys_.size();<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>key_slices.push_back(<ref refid="classleveldb_1_1_slice" kindref="compound">Slice</ref>(keys_[i]));</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/>filter_.clear();</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/>policy_-&gt;<ref refid="classleveldb_1_1_filter_policy_1a355e9797e16dd16b93d19056781126b2" kindref="member">CreateFilter</ref>(&amp;key_slices[0],<sp/>key_slices.size(),<sp/>&amp;filter_);</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/>keys_.clear();</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(kVerbose<sp/>&gt;=<sp/>2)<sp/><ref refid="classleveldb_1_1_bloom_test_1a6f210bc2f2e69c0aeb570fa4dbe4d0da" kindref="member">DumpFilter</ref>();</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight></codeline>
<codeline lineno="54" refid="classleveldb_1_1_bloom_test_1accd2f436396b2324d89043c2a97f0c3a" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="classleveldb_1_1_bloom_test_1accd2f436396b2324d89043c2a97f0c3a" kindref="member">FilterSize</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>filter_.size();</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight></codeline>
<codeline lineno="58" refid="classleveldb_1_1_bloom_test_1a6f210bc2f2e69c0aeb570fa4dbe4d0da" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classleveldb_1_1_bloom_test_1a6f210bc2f2e69c0aeb570fa4dbe4d0da" kindref="member">DumpFilter</ref>()<sp/>{</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/>fprintf(stderr,<sp/></highlight><highlight class="stringliteral">&quot;F(&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i+1<sp/>&lt;<sp/>filter_.size();<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>c<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(filter_[i]);</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>8;<sp/>j++)<sp/>{</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(stderr,<sp/></highlight><highlight class="stringliteral">&quot;%c&quot;</highlight><highlight class="normal">,<sp/>(c<sp/>&amp;<sp/>(1<sp/>&lt;&lt;j))<sp/>?<sp/></highlight><highlight class="charliteral">&apos;1&apos;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="charliteral">&apos;.&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/>fprintf(stderr,<sp/></highlight><highlight class="stringliteral">&quot;)\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="68"><highlight class="normal"></highlight></codeline>
<codeline lineno="69" refid="classleveldb_1_1_bloom_test_1a1d2a9794bd26ac0124a18511689ef211" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classleveldb_1_1_bloom_test_1a1d2a9794bd26ac0124a18511689ef211" kindref="member">Matches</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classleveldb_1_1_slice" kindref="compound">Slice</ref>&amp;<sp/>s)<sp/>{</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!keys_.empty())<sp/>{</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classleveldb_1_1_bloom_test_1ad4fc802152c68599c919d33917523d31" kindref="member">Build</ref>();</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>policy_-&gt;<ref refid="classleveldb_1_1_filter_policy_1a6f8ba10ea25e0b4b8d0a6607c361c718" kindref="member">KeyMayMatch</ref>(s,<sp/>filter_);</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="75"><highlight class="normal"></highlight></codeline>
<codeline lineno="76" refid="classleveldb_1_1_bloom_test_1abf887498db753825b308933df22c0bbb" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="classleveldb_1_1_bloom_test_1abf887498db753825b308933df22c0bbb" kindref="member">FalsePositiveRate</ref>()<sp/>{</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>buffer[</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(int)];</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>result<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>10000;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classleveldb_1_1_bloom_test_1a1d2a9794bd26ac0124a18511689ef211" kindref="member">Matches</ref>(<ref refid="namespaceleveldb_1a7e9a9725b13fa0bd922d885280dfab95" kindref="member">Key</ref>(i<sp/>+<sp/>1000000000,<sp/>buffer)))<sp/>{</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result++;</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result<sp/>/<sp/>10000.0;</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="86"><highlight class="normal">};</highlight></codeline>
<codeline lineno="87"><highlight class="normal"></highlight></codeline>
<codeline lineno="88" refid="namespaceleveldb_1a553e831850c6c7941b67bd6bf31ca86f" refkind="member"><highlight class="normal"><ref refid="namespaceleveldb_1a9c4f7d5038dfc2985100b60ae2549fde" kindref="member">TEST</ref>(<ref refid="classleveldb_1_1_bloom_test" kindref="compound">BloomTest</ref>,<sp/>EmptyFilter)<sp/>{</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><ref refid="testharness_8h_1ac2101fb1ffd0c81c17520b82f0fcfe21" kindref="member">ASSERT_TRUE</ref>(!<sp/>Matches(</highlight><highlight class="stringliteral">&quot;hello&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><ref refid="testharness_8h_1ac2101fb1ffd0c81c17520b82f0fcfe21" kindref="member">ASSERT_TRUE</ref>(!<sp/>Matches(</highlight><highlight class="stringliteral">&quot;world&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="91"><highlight class="normal">}</highlight></codeline>
<codeline lineno="92"><highlight class="normal"></highlight></codeline>
<codeline lineno="93" refid="namespaceleveldb_1a05ff27d65ac0dfa59e930fa501eb7b74" refkind="member"><highlight class="normal"><ref refid="namespaceleveldb_1a9c4f7d5038dfc2985100b60ae2549fde" kindref="member">TEST</ref>(<ref refid="classleveldb_1_1_bloom_test" kindref="compound">BloomTest</ref>,<sp/>Small)<sp/>{</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/>Add(</highlight><highlight class="stringliteral">&quot;hello&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/>Add(</highlight><highlight class="stringliteral">&quot;world&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><ref refid="testharness_8h_1ac2101fb1ffd0c81c17520b82f0fcfe21" kindref="member">ASSERT_TRUE</ref>(Matches(</highlight><highlight class="stringliteral">&quot;hello&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><ref refid="testharness_8h_1ac2101fb1ffd0c81c17520b82f0fcfe21" kindref="member">ASSERT_TRUE</ref>(Matches(</highlight><highlight class="stringliteral">&quot;world&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><ref refid="testharness_8h_1ac2101fb1ffd0c81c17520b82f0fcfe21" kindref="member">ASSERT_TRUE</ref>(!<sp/>Matches(</highlight><highlight class="stringliteral">&quot;x&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><ref refid="testharness_8h_1ac2101fb1ffd0c81c17520b82f0fcfe21" kindref="member">ASSERT_TRUE</ref>(!<sp/>Matches(</highlight><highlight class="stringliteral">&quot;foo&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="100"><highlight class="normal">}</highlight></codeline>
<codeline lineno="101"><highlight class="normal"></highlight></codeline>
<codeline lineno="102"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>NextLength(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>length)<sp/>{</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(length<sp/>&lt;<sp/>10)<sp/>{</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/>length<sp/>+=<sp/>1;</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(length<sp/>&lt;<sp/>100)<sp/>{</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/>length<sp/>+=<sp/>10;</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(length<sp/>&lt;<sp/>1000)<sp/>{</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/>length<sp/>+=<sp/>100;</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/>length<sp/>+=<sp/>1000;</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>length;</highlight></codeline>
<codeline lineno="113"><highlight class="normal">}</highlight></codeline>
<codeline lineno="114"><highlight class="normal"></highlight></codeline>
<codeline lineno="115" refid="namespaceleveldb_1ac2b31308484f9ac58a7bf08a95010751" refkind="member"><highlight class="normal"><ref refid="namespaceleveldb_1a9c4f7d5038dfc2985100b60ae2549fde" kindref="member">TEST</ref>(<ref refid="classleveldb_1_1_bloom_test" kindref="compound">BloomTest</ref>,<sp/>VaryingLengths)<sp/>{</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>buffer[</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(int)];</highlight></codeline>
<codeline lineno="117"><highlight class="normal"></highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Count<sp/>number<sp/>of<sp/>filters<sp/>that<sp/>significantly<sp/>exceed<sp/>the<sp/>false<sp/>positive<sp/>rate</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>mediocre_filters<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>good_filters<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="121"><highlight class="normal"></highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>length<sp/>=<sp/>1;<sp/>length<sp/>&lt;=<sp/>10000;<sp/>length<sp/>=<sp/>NextLength(length))<sp/>{</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/>Reset();</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>length;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Add(<ref refid="namespaceleveldb_1a7e9a9725b13fa0bd922d885280dfab95" kindref="member">Key</ref>(i,<sp/>buffer));</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/>Build();</highlight></codeline>
<codeline lineno="128"><highlight class="normal"></highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="testharness_8h_1ad71f56861528c854666f15f4bad921c2" kindref="member">ASSERT_LE</ref>(FilterSize(),<sp/>static_cast&lt;size_t&gt;((length<sp/>*<sp/>10<sp/>/<sp/>8)<sp/>+<sp/>40))</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>length;</highlight></codeline>
<codeline lineno="131"><highlight class="normal"></highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>All<sp/>added<sp/>keys<sp/>must<sp/>match</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>length;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="testharness_8h_1ac2101fb1ffd0c81c17520b82f0fcfe21" kindref="member">ASSERT_TRUE</ref>(Matches(<ref refid="namespaceleveldb_1a7e9a9725b13fa0bd922d885280dfab95" kindref="member">Key</ref>(i,<sp/>buffer)))</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Length<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>length<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;;<sp/>key<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>i;</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="137"><highlight class="normal"></highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Check<sp/>false<sp/>positive<sp/>rate</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>rate<sp/>=<sp/>FalsePositiveRate();</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(kVerbose<sp/>&gt;=<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(stderr,<sp/></highlight><highlight class="stringliteral">&quot;False<sp/>positives:<sp/>%5.2f%%<sp/>@<sp/>length<sp/>=<sp/>%6d<sp/>;<sp/>bytes<sp/>=<sp/>%6d\n&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rate*100.0,<sp/>length,<sp/>static_cast&lt;int&gt;(FilterSize()));</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="testharness_8h_1ad71f56861528c854666f15f4bad921c2" kindref="member">ASSERT_LE</ref>(rate,<sp/>0.02);<sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Must<sp/>not<sp/>be<sp/>over<sp/>2%</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(rate<sp/>&gt;<sp/>0.0125)<sp/>mediocre_filters++;<sp/><sp/></highlight><highlight class="comment">//<sp/>Allowed,<sp/>but<sp/>not<sp/>too<sp/>often</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>good_filters++;</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(kVerbose<sp/>&gt;=<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/>fprintf(stderr,<sp/></highlight><highlight class="stringliteral">&quot;Filters:<sp/>%d<sp/>good,<sp/>%d<sp/>mediocre\n&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>good_filters,<sp/>mediocre_filters);</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><ref refid="testharness_8h_1ad71f56861528c854666f15f4bad921c2" kindref="member">ASSERT_LE</ref>(mediocre_filters,<sp/>good_filters/5);</highlight></codeline>
<codeline lineno="153"><highlight class="normal">}</highlight></codeline>
<codeline lineno="154"><highlight class="normal"></highlight></codeline>
<codeline lineno="155"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Different<sp/>bits-per-byte</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="156"><highlight class="normal"></highlight></codeline>
<codeline lineno="157"><highlight class="normal">}<sp/><sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>leveldb</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="158"><highlight class="normal"></highlight></codeline>
<codeline lineno="159" refid="bloom__test_8cc_1a3c04138a5bfe5d72780bb7e82a18e627" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="bloom__test_8cc_1a3c04138a5bfe5d72780bb7e82a18e627" kindref="member">main</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>argc,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">**<sp/>argv)<sp/>{</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="namespaceleveldb_1_1test_1a3329162c54a0bff42d41c2ac86b2580a" kindref="member">leveldb::test::RunAllTests</ref>();</highlight></codeline>
<codeline lineno="161"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="/home/dev/ds-160209/src/leveldb/util/bloom_test.cc"/>
  </compounddef>
</doxygen>
