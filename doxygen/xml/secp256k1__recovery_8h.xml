<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.9.1">
  <compounddef id="secp256k1__recovery_8h" kind="file" language="C++">
    <compoundname>secp256k1_recovery.h</compoundname>
    <includes refid="secp256k1_8h" local="yes">secp256k1.h</includes>
    <includedby refid="key_8cpp" local="no">/home/dev/ds-160209/src/key.cpp</includedby>
    <includedby refid="pubkey_8cpp" local="yes">/home/dev/ds-160209/src/pubkey.cpp</includedby>
    <includedby refid="bench__recover_8c" local="yes">/home/dev/ds-160209/src/secp256k1/src/bench_recover.c</includedby>
    <includedby refid="recovery_2main__impl_8h" local="yes">/home/dev/ds-160209/src/secp256k1/src/modules/recovery/main_impl.h</includedby>
    <incdepgraph>
      <node id="51560">
        <label>secp256k1.h</label>
        <link refid="secp256k1_8h"/>
        <childnode refid="51561" relation="include">
        </childnode>
      </node>
      <node id="51561">
        <label>stddef.h</label>
      </node>
      <node id="51559">
        <label>/home/dev/ds-160209/src/secp256k1/include/secp256k1_recovery.h</label>
        <link refid="secp256k1_recovery.h"/>
        <childnode refid="51560" relation="include">
        </childnode>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="51564">
        <label>/home/dev/ds-160209/src/pubkey.cpp</label>
        <link refid="pubkey_8cpp"/>
      </node>
      <node id="51565">
        <label>/home/dev/ds-160209/src/secp256k1/src/bench_recover.c</label>
        <link refid="bench__recover_8c"/>
      </node>
      <node id="51562">
        <label>/home/dev/ds-160209/src/secp256k1/include/secp256k1_recovery.h</label>
        <link refid="secp256k1_recovery.h"/>
        <childnode refid="51563" relation="include">
        </childnode>
        <childnode refid="51564" relation="include">
        </childnode>
        <childnode refid="51565" relation="include">
        </childnode>
        <childnode refid="51566" relation="include">
        </childnode>
      </node>
      <node id="51563">
        <label>/home/dev/ds-160209/src/key.cpp</label>
        <link refid="key_8cpp"/>
      </node>
      <node id="51566">
        <label>/home/dev/ds-160209/src/secp256k1/src/modules/recovery/main_impl.h</label>
        <link refid="recovery_2main__impl_8h"/>
      </node>
    </invincdepgraph>
    <innerclass refid="structsecp256k1__ecdsa__recoverable__signature" prot="public">secp256k1_ecdsa_recoverable_signature</innerclass>
      <sectiondef kind="func">
      <memberdef kind="function" id="secp256k1__recovery_8h_1a6699b45dc75be70f028ac7d8ffaba46e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="secp256k1_8h_1a3f1967acd0fe26283877c61b3f2694a5" kindref="member">SECP256K1_API</ref> int</type>
        <definition>SECP256K1_API int secp256k1_ecdsa_recoverable_signature_parse_compact</definition>
        <argsstring>(const secp256k1_context *ctx, secp256k1_ecdsa_recoverable_signature *sig, const unsigned char *input64, int recid) SECP256K1_ARG_NONNULL(1) SECP256K1_ARG_NONNULL(2) SECP256K1_ARG_NONNULL(3)</argsstring>
        <name>secp256k1_ecdsa_recoverable_signature_parse_compact</name>
        <param>
          <type>const <ref refid="secp256k1_8h_1a282ec9e6dfec8c35955c3eb2f7476e5e" kindref="member">secp256k1_context</ref> *</type>
          <declname>ctx</declname>
        </param>
        <param>
          <type><ref refid="structsecp256k1__ecdsa__recoverable__signature" kindref="compound">secp256k1_ecdsa_recoverable_signature</ref> *</type>
          <declname>sig</declname>
        </param>
        <param>
          <type>const unsigned char *</type>
          <declname>input64</declname>
        </param>
        <param>
          <type>int</type>
          <declname>recid</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Parse a compact ECDSA signature (64 bytes + recovery id).</para><para>Returns: 1 when the signature could be parsed, 0 otherwise Args: ctx: a secp256k1 context object Out: sig: a pointer to a signature object In: input64: a pointer to a 64-byte compact signature recid: the recovery id (0, 1, 2 or 3) </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/secp256k1/include/secp256k1_recovery.h" line="36" column="1" bodyfile="/home/dev/ds-160209/src/secp256k1/src/modules/recovery/main_impl.h" bodystart="38" bodyend="58"/>
        <references refid="secp256k1_8c_1a6e1f88c6ce07376501097b42a2b40727" compoundref="secp256k1_8c" startline="23">ARG_CHECK</references>
        <referencedby refid="class_c_pub_key_1a169505e735a02db385486b0affeb565c" compoundref="pubkey_8cpp" startline="187" endline="205">CPubKey::RecoverCompact</referencedby>
        <referencedby refid="bench__recover_8c_1a6bbc6888c36d93d55e5410b25121db10" compoundref="bench__recover_8c" startline="18" endline="37">bench_recover</referencedby>
        <referencedby refid="recovery_2tests__impl_8h_1a70649882936497184992dfaa06b1106f" compoundref="recovery_2tests__impl_8h" startline="10" endline="66">test_ecdsa_recovery_end_to_end</referencedby>
        <referencedby refid="recovery_2tests__impl_8h_1ad6d3138600637a7c940bc40a22795e46" compoundref="recovery_2tests__impl_8h" startline="69" endline="240">test_ecdsa_recovery_edge_cases</referencedby>
      </memberdef>
      <memberdef kind="function" id="secp256k1__recovery_8h_1ad7a20c9f7ccd9fc6d75a19a3b4195aa5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="secp256k1_8h_1a3f1967acd0fe26283877c61b3f2694a5" kindref="member">SECP256K1_API</ref> int</type>
        <definition>SECP256K1_API int secp256k1_ecdsa_recoverable_signature_convert</definition>
        <argsstring>(const secp256k1_context *ctx, secp256k1_ecdsa_signature *sig, const secp256k1_ecdsa_recoverable_signature *sigin) SECP256K1_ARG_NONNULL(1) SECP256K1_ARG_NONNULL(2) SECP256K1_ARG_NONNULL(3)</argsstring>
        <name>secp256k1_ecdsa_recoverable_signature_convert</name>
        <param>
          <type>const <ref refid="secp256k1_8h_1a282ec9e6dfec8c35955c3eb2f7476e5e" kindref="member">secp256k1_context</ref> *</type>
          <declname>ctx</declname>
        </param>
        <param>
          <type><ref refid="structsecp256k1__ecdsa__signature" kindref="compound">secp256k1_ecdsa_signature</ref> *</type>
          <declname>sig</declname>
        </param>
        <param>
          <type>const <ref refid="structsecp256k1__ecdsa__recoverable__signature" kindref="compound">secp256k1_ecdsa_recoverable_signature</ref> *</type>
          <declname>sigin</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Convert a recoverable signature into a normal signature.</para><para>Returns: 1 Out: sig: a pointer to a normal signature (cannot be NULL). In: sigin: a pointer to a recoverable signature (cannot be NULL). </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/secp256k1/include/secp256k1_recovery.h" line="49" column="1" bodyfile="/home/dev/ds-160209/src/secp256k1/src/modules/recovery/main_impl.h" bodystart="74" bodyend="85"/>
        <references refid="secp256k1_8c_1a6e1f88c6ce07376501097b42a2b40727" compoundref="secp256k1_8c" startline="23">ARG_CHECK</references>
        <referencedby refid="recovery_2tests__impl_8h_1a70649882936497184992dfaa06b1106f" compoundref="recovery_2tests__impl_8h" startline="10" endline="66">test_ecdsa_recovery_end_to_end</referencedby>
      </memberdef>
      <memberdef kind="function" id="secp256k1__recovery_8h_1a12f08c89ceb61949c6a4ec6eb2511185" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="secp256k1_8h_1a3f1967acd0fe26283877c61b3f2694a5" kindref="member">SECP256K1_API</ref> int</type>
        <definition>SECP256K1_API int secp256k1_ecdsa_recoverable_signature_serialize_compact</definition>
        <argsstring>(const secp256k1_context *ctx, unsigned char *output64, int *recid, const secp256k1_ecdsa_recoverable_signature *sig) SECP256K1_ARG_NONNULL(1) SECP256K1_ARG_NONNULL(2) SECP256K1_ARG_NONNULL(3) SECP256K1_ARG_NONNULL(4)</argsstring>
        <name>secp256k1_ecdsa_recoverable_signature_serialize_compact</name>
        <param>
          <type>const <ref refid="secp256k1_8h_1a282ec9e6dfec8c35955c3eb2f7476e5e" kindref="member">secp256k1_context</ref> *</type>
          <declname>ctx</declname>
        </param>
        <param>
          <type>unsigned char *</type>
          <declname>output64</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>recid</declname>
        </param>
        <param>
          <type>const <ref refid="structsecp256k1__ecdsa__recoverable__signature" kindref="compound">secp256k1_ecdsa_recoverable_signature</ref> *</type>
          <declname>sig</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Serialize an ECDSA signature in compact format (64 bytes + recovery id).</para><para>Returns: 1 Args: ctx: a secp256k1 context object Out: output64: a pointer to a 64-byte array of the compact signature (cannot be NULL) recid: a pointer to an integer to hold the recovery id (can be NULL). In: sig: a pointer to an initialized signature object (cannot be NULL) </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/secp256k1/include/secp256k1_recovery.h" line="63" column="1" bodyfile="/home/dev/ds-160209/src/secp256k1/src/modules/recovery/main_impl.h" bodystart="60" bodyend="72"/>
        <references refid="secp256k1_8c_1a6e1f88c6ce07376501097b42a2b40727" compoundref="secp256k1_8c" startline="23">ARG_CHECK</references>
        <referencedby refid="class_c_key_1a59afeabf3f63d99dfdbd3722087853a1" compoundref="key_8cpp" startline="211" endline="224">CKey::SignCompact</referencedby>
        <referencedby refid="recovery_2tests__impl_8h_1a70649882936497184992dfaa06b1106f" compoundref="recovery_2tests__impl_8h" startline="10" endline="66">test_ecdsa_recovery_end_to_end</referencedby>
      </memberdef>
      <memberdef kind="function" id="secp256k1__recovery_8h_1a1b1f4423a232f681e90e5f9d28f3d148" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="secp256k1_8h_1a3f1967acd0fe26283877c61b3f2694a5" kindref="member">SECP256K1_API</ref> int</type>
        <definition>SECP256K1_API int secp256k1_ecdsa_sign_recoverable</definition>
        <argsstring>(const secp256k1_context *ctx, secp256k1_ecdsa_recoverable_signature *sig, const unsigned char *msg32, const unsigned char *seckey, secp256k1_nonce_function noncefp, const void *ndata) SECP256K1_ARG_NONNULL(1) SECP256K1_ARG_NONNULL(2) SECP256K1_ARG_NONNULL(3) SECP256K1_ARG_NONNULL(4)</argsstring>
        <name>secp256k1_ecdsa_sign_recoverable</name>
        <param>
          <type>const <ref refid="secp256k1_8h_1a282ec9e6dfec8c35955c3eb2f7476e5e" kindref="member">secp256k1_context</ref> *</type>
          <declname>ctx</declname>
        </param>
        <param>
          <type><ref refid="structsecp256k1__ecdsa__recoverable__signature" kindref="compound">secp256k1_ecdsa_recoverable_signature</ref> *</type>
          <declname>sig</declname>
        </param>
        <param>
          <type>const unsigned char *</type>
          <declname>msg32</declname>
        </param>
        <param>
          <type>const unsigned char *</type>
          <declname>seckey</declname>
        </param>
        <param>
          <type><ref refid="secp256k1_8h_1a539882fd91bff672712fa19a4cfaeb98" kindref="member">secp256k1_nonce_function</ref></type>
          <declname>noncefp</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>ndata</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Create a recoverable ECDSA signature.</para><para>Returns: 1: signature created 0: the nonce generation function failed, or the private key was invalid. Args: ctx: pointer to a context object, initialized for signing (cannot be NULL) Out: sig: pointer to an array where the signature will be placed (cannot be NULL) In: msg32: the 32-byte message hash being signed (cannot be NULL) seckey: pointer to a 32-byte secret key (cannot be NULL) noncefp:pointer to a nonce generation function. If NULL, secp256k1_nonce_function_default is used ndata: pointer to arbitrary data used by the nonce generation function (can be NULL) </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/secp256k1/include/secp256k1_recovery.h" line="81" column="1" bodyfile="/home/dev/ds-160209/src/secp256k1/src/modules/recovery/main_impl.h" bodystart="123" bodyend="168"/>
        <references refid="secp256k1_2src_2util_8h_1aca8ac5ae73fd966db106de59160a178b" compoundref="secp256k1_2src_2util_8h" startline="64">VERIFY_CHECK</references>
        <references refid="secp256k1_8c_1a6e1f88c6ce07376501097b42a2b40727" compoundref="secp256k1_8c" startline="23">ARG_CHECK</references>
        <references refid="structsecp256k1__context__struct_1aacc2071a68f9c5a6c05eb783f523b9eb" compoundref="secp256k1_8c" startline="55">secp256k1_context_struct::ecmult_gen_ctx</references>
        <references refid="secp256k1_8h_1a22f44df7786a1be5ad93aadfed75b932" compoundref="secp256k1_8c" startline="347">secp256k1_nonce_function_default</references>
        <referencedby refid="class_c_key_1a59afeabf3f63d99dfdbd3722087853a1" compoundref="key_8cpp" startline="211" endline="224">CKey::SignCompact</referencedby>
        <referencedby refid="recovery_2tests__impl_8h_1a70649882936497184992dfaa06b1106f" compoundref="recovery_2tests__impl_8h" startline="10" endline="66">test_ecdsa_recovery_end_to_end</referencedby>
      </memberdef>
      <memberdef kind="function" id="secp256k1__recovery_8h_1a7e156c6f4be24b07f4a563210dcb1a2e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="secp256k1_8h_1a3f1967acd0fe26283877c61b3f2694a5" kindref="member">SECP256K1_API</ref> <ref refid="secp256k1_8h_1aebd5ca8fbfcbb0ba0754a46115143c2c" kindref="member">SECP256K1_WARN_UNUSED_RESULT</ref> int</type>
        <definition>SECP256K1_API SECP256K1_WARN_UNUSED_RESULT int secp256k1_ecdsa_recover</definition>
        <argsstring>(const secp256k1_context *ctx, secp256k1_pubkey *pubkey, const secp256k1_ecdsa_recoverable_signature *sig, const unsigned char *msg32) SECP256K1_ARG_NONNULL(1) SECP256K1_ARG_NONNULL(2) SECP256K1_ARG_NONNULL(3) SECP256K1_ARG_NONNULL(4)</argsstring>
        <name>secp256k1_ecdsa_recover</name>
        <param>
          <type>const <ref refid="secp256k1_8h_1a282ec9e6dfec8c35955c3eb2f7476e5e" kindref="member">secp256k1_context</ref> *</type>
          <declname>ctx</declname>
        </param>
        <param>
          <type><ref refid="structsecp256k1__pubkey" kindref="compound">secp256k1_pubkey</ref> *</type>
          <declname>pubkey</declname>
        </param>
        <param>
          <type>const <ref refid="structsecp256k1__ecdsa__recoverable__signature" kindref="compound">secp256k1_ecdsa_recoverable_signature</ref> *</type>
          <declname>sig</declname>
        </param>
        <param>
          <type>const unsigned char *</type>
          <declname>msg32</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Recover an ECDSA public key from a signature.</para><para>Returns: 1: public key successfully recovered (which guarantees a correct signature). 0: otherwise. Args: ctx: pointer to a context object, initialized for verification (cannot be NULL) Out: pubkey: pointer to the recovered public key (cannot be NULL) In: sig: pointer to initialized signature that supports pubkey recovery (cannot be NULL) msg32: the 32-byte message hash assumed to be signed (cannot be NULL) </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/secp256k1/include/secp256k1_recovery.h" line="99" column="1" bodyfile="/home/dev/ds-160209/src/secp256k1/src/modules/recovery/main_impl.h" bodystart="170" bodyend="191"/>
        <references refid="secp256k1_2src_2util_8h_1aca8ac5ae73fd966db106de59160a178b" compoundref="secp256k1_2src_2util_8h" startline="64">VERIFY_CHECK</references>
        <references refid="secp256k1_8c_1a6e1f88c6ce07376501097b42a2b40727" compoundref="secp256k1_8c" startline="23">ARG_CHECK</references>
        <references refid="structsecp256k1__context__struct_1ab6a825dd98cab724df0f0060cf515eab" compoundref="secp256k1_8c" startline="54">secp256k1_context_struct::ecmult_ctx</references>
        <referencedby refid="class_c_pub_key_1a169505e735a02db385486b0affeb565c" compoundref="pubkey_8cpp" startline="187" endline="205">CPubKey::RecoverCompact</referencedby>
        <referencedby refid="bench__recover_8c_1a6bbc6888c36d93d55e5410b25121db10" compoundref="bench__recover_8c" startline="18" endline="37">bench_recover</referencedby>
        <referencedby refid="recovery_2tests__impl_8h_1a70649882936497184992dfaa06b1106f" compoundref="recovery_2tests__impl_8h" startline="10" endline="66">test_ecdsa_recovery_end_to_end</referencedby>
        <referencedby refid="recovery_2tests__impl_8h_1ad6d3138600637a7c940bc40a22795e46" compoundref="recovery_2tests__impl_8h" startline="69" endline="240">test_ecdsa_recovery_edge_cases</referencedby>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#ifndef<sp/>_SECP256K1_RECOVERY_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>define<sp/>_SECP256K1_RECOVERY_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>include<sp/>&quot;<ref refid="secp256k1_8h" kindref="compound">secp256k1.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;C&quot;</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight></codeline>
<codeline lineno="24" refid="structsecp256k1__ecdsa__recoverable__signature" refkind="compound"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="25" refid="structsecp256k1__ecdsa__recoverable__signature_1a7157f0cd8b8fb97fceacfd9c0024a952" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>data[65];</highlight></codeline>
<codeline lineno="26"><highlight class="normal">}<sp/><ref refid="structsecp256k1__ecdsa__recoverable__signature" kindref="compound">secp256k1_ecdsa_recoverable_signature</ref>;</highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"><ref refid="secp256k1_8h_1a3f1967acd0fe26283877c61b3f2694a5" kindref="member">SECP256K1_API</ref><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="secp256k1__recovery_8h_1a6699b45dc75be70f028ac7d8ffaba46e" kindref="member">secp256k1_ecdsa_recoverable_signature_parse_compact</ref>(</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structsecp256k1__context__struct" kindref="compound">secp256k1_context</ref>*<sp/>ctx,</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structsecp256k1__ecdsa__recoverable__signature" kindref="compound">secp256k1_ecdsa_recoverable_signature</ref>*<sp/>sig,</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*input64,</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>recid</highlight></codeline>
<codeline lineno="41"><highlight class="normal">)<sp/><ref refid="secp256k1_8h_1a03c194d8fa91b9b66758b36c91e0b5cb" kindref="member">SECP256K1_ARG_NONNULL</ref>(1)<sp/><ref refid="secp256k1_8h_1a03c194d8fa91b9b66758b36c91e0b5cb" kindref="member">SECP256K1_ARG_NONNULL</ref>(2)<sp/><ref refid="secp256k1_8h_1a03c194d8fa91b9b66758b36c91e0b5cb" kindref="member">SECP256K1_ARG_NONNULL</ref>(3);</highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"><ref refid="secp256k1_8h_1a3f1967acd0fe26283877c61b3f2694a5" kindref="member">SECP256K1_API</ref><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="secp256k1__recovery_8h_1ad7a20c9f7ccd9fc6d75a19a3b4195aa5" kindref="member">secp256k1_ecdsa_recoverable_signature_convert</ref>(</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/>const<sp/><ref refid="structsecp256k1__context__struct" kindref="compound">secp256k1_context</ref>*<sp/>ctx,</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structsecp256k1__ecdsa__signature" kindref="compound">secp256k1_ecdsa_signature</ref>*<sp/>sig,</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/>const<sp/><ref refid="structsecp256k1__ecdsa__recoverable__signature" kindref="compound">secp256k1_ecdsa_recoverable_signature</ref>*<sp/>sigin</highlight></codeline>
<codeline lineno="53"><highlight class="normal">)<sp/>SECP256K1_ARG_NONNULL(1)<sp/>SECP256K1_ARG_NONNULL(2)<sp/>SECP256K1_ARG_NONNULL(3);</highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight></codeline>
<codeline lineno="63"><highlight class="normal"><ref refid="secp256k1_8h_1a3f1967acd0fe26283877c61b3f2694a5" kindref="member">SECP256K1_API</ref><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="secp256k1__recovery_8h_1a12f08c89ceb61949c6a4ec6eb2511185" kindref="member">secp256k1_ecdsa_recoverable_signature_serialize_compact</ref>(</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/>const<sp/><ref refid="structsecp256k1__context__struct" kindref="compound">secp256k1_context</ref>*<sp/>ctx,</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*output64,</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*recid,</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/>const<sp/><ref refid="structsecp256k1__ecdsa__recoverable__signature" kindref="compound">secp256k1_ecdsa_recoverable_signature</ref>*<sp/>sig</highlight></codeline>
<codeline lineno="68"><highlight class="normal">)<sp/>SECP256K1_ARG_NONNULL(1)<sp/>SECP256K1_ARG_NONNULL(2)<sp/>SECP256K1_ARG_NONNULL(3)<sp/>SECP256K1_ARG_NONNULL(4);</highlight></codeline>
<codeline lineno="69"><highlight class="normal"></highlight></codeline>
<codeline lineno="81"><highlight class="normal"><ref refid="secp256k1_8h_1a3f1967acd0fe26283877c61b3f2694a5" kindref="member">SECP256K1_API</ref><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="secp256k1__recovery_8h_1a1b1f4423a232f681e90e5f9d28f3d148" kindref="member">secp256k1_ecdsa_sign_recoverable</ref>(</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/>const<sp/><ref refid="structsecp256k1__context__struct" kindref="compound">secp256k1_context</ref>*<sp/>ctx,</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structsecp256k1__ecdsa__recoverable__signature" kindref="compound">secp256k1_ecdsa_recoverable_signature</ref><sp/>*sig,</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/>const<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*msg32,</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/>const<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*seckey,</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="secp256k1_8h_1a539882fd91bff672712fa19a4cfaeb98" kindref="member">secp256k1_nonce_function</ref><sp/>noncefp,</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/>const<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*ndata</highlight></codeline>
<codeline lineno="88"><highlight class="normal">)<sp/>SECP256K1_ARG_NONNULL(1)<sp/>SECP256K1_ARG_NONNULL(2)<sp/>SECP256K1_ARG_NONNULL(3)<sp/>SECP256K1_ARG_NONNULL(4);</highlight></codeline>
<codeline lineno="89"><highlight class="normal"></highlight></codeline>
<codeline lineno="99"><highlight class="normal"><ref refid="secp256k1_8h_1a3f1967acd0fe26283877c61b3f2694a5" kindref="member">SECP256K1_API</ref><sp/><ref refid="secp256k1_8h_1aebd5ca8fbfcbb0ba0754a46115143c2c" kindref="member">SECP256K1_WARN_UNUSED_RESULT</ref><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="secp256k1__recovery_8h_1a7e156c6f4be24b07f4a563210dcb1a2e" kindref="member">secp256k1_ecdsa_recover</ref>(</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/>const<sp/><ref refid="structsecp256k1__context__struct" kindref="compound">secp256k1_context</ref>*<sp/>ctx,</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structsecp256k1__pubkey" kindref="compound">secp256k1_pubkey</ref><sp/>*pubkey,</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/>const<sp/><ref refid="structsecp256k1__ecdsa__recoverable__signature" kindref="compound">secp256k1_ecdsa_recoverable_signature</ref><sp/>*sig,</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/>const<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*msg32</highlight></codeline>
<codeline lineno="104"><highlight class="normal">)<sp/>SECP256K1_ARG_NONNULL(1)<sp/>SECP256K1_ARG_NONNULL(2)<sp/>SECP256K1_ARG_NONNULL(3)<sp/>SECP256K1_ARG_NONNULL(4);</highlight></codeline>
<codeline lineno="105"><highlight class="normal"></highlight></codeline>
<codeline lineno="106"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="107"><highlight class="normal">}</highlight></codeline>
<codeline lineno="108"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="109"><highlight class="normal"></highlight></codeline>
<codeline lineno="110"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
    </programlisting>
    <location file="/home/dev/ds-160209/src/secp256k1/include/secp256k1_recovery.h"/>
  </compounddef>
</doxygen>
