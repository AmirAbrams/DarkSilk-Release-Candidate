<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.9.1">
  <compounddef id="recovery_2main__impl_8h" kind="file" language="C++">
    <compoundname>main_impl.h</compoundname>
    <includes refid="secp256k1__recovery_8h" local="yes">include/secp256k1_recovery.h</includes>
    <incdepgraph>
      <node id="51986">
        <label>secp256k1.h</label>
        <link refid="secp256k1_8h"/>
        <childnode refid="51987" relation="include">
        </childnode>
      </node>
      <node id="51987">
        <label>stddef.h</label>
      </node>
      <node id="51985">
        <label>include/secp256k1_recovery.h</label>
        <link refid="secp256k1__recovery_8h"/>
        <childnode refid="51986" relation="include">
        </childnode>
      </node>
      <node id="51984">
        <label>/home/dev/ds-160209/src/secp256k1/src/modules/recovery/main_impl.h</label>
        <link refid="recovery/main_impl.h"/>
        <childnode refid="51985" relation="include">
        </childnode>
      </node>
    </incdepgraph>
      <sectiondef kind="func">
      <memberdef kind="function" id="recovery_2main__impl_8h_1aa3ef0903a865dc9a6e42dfe61f75a9e5" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void secp256k1_ecdsa_recoverable_signature_load</definition>
        <argsstring>(const secp256k1_context *ctx, secp256k1_scalar *r, secp256k1_scalar *s, int *recid, const secp256k1_ecdsa_recoverable_signature *sig)</argsstring>
        <name>secp256k1_ecdsa_recoverable_signature_load</name>
        <param>
          <type>const <ref refid="secp256k1_8h_1a282ec9e6dfec8c35955c3eb2f7476e5e" kindref="member">secp256k1_context</ref> *</type>
          <declname>ctx</declname>
        </param>
        <param>
          <type><ref refid="structsecp256k1__scalar" kindref="compound">secp256k1_scalar</ref> *</type>
          <declname>r</declname>
        </param>
        <param>
          <type><ref refid="structsecp256k1__scalar" kindref="compound">secp256k1_scalar</ref> *</type>
          <declname>s</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>recid</declname>
        </param>
        <param>
          <type>const <ref refid="structsecp256k1__ecdsa__recoverable__signature" kindref="compound">secp256k1_ecdsa_recoverable_signature</ref> *</type>
          <declname>sig</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/secp256k1/src/modules/recovery/main_impl.h" line="12" column="1" bodyfile="/home/dev/ds-160209/src/secp256k1/src/modules/recovery/main_impl.h" bodystart="12" bodyend="25"/>
      </memberdef>
      <memberdef kind="function" id="recovery_2main__impl_8h_1a58a8a03b17aeb5cb4daf2940a58663b9" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void secp256k1_ecdsa_recoverable_signature_save</definition>
        <argsstring>(secp256k1_ecdsa_recoverable_signature *sig, const secp256k1_scalar *r, const secp256k1_scalar *s, int recid)</argsstring>
        <name>secp256k1_ecdsa_recoverable_signature_save</name>
        <param>
          <type><ref refid="structsecp256k1__ecdsa__recoverable__signature" kindref="compound">secp256k1_ecdsa_recoverable_signature</ref> *</type>
          <declname>sig</declname>
        </param>
        <param>
          <type>const <ref refid="structsecp256k1__scalar" kindref="compound">secp256k1_scalar</ref> *</type>
          <declname>r</declname>
        </param>
        <param>
          <type>const <ref refid="structsecp256k1__scalar" kindref="compound">secp256k1_scalar</ref> *</type>
          <declname>s</declname>
        </param>
        <param>
          <type>int</type>
          <declname>recid</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/secp256k1/src/modules/recovery/main_impl.h" line="27" column="1" bodyfile="/home/dev/ds-160209/src/secp256k1/src/modules/recovery/main_impl.h" bodystart="27" bodyend="36"/>
      </memberdef>
      <memberdef kind="function" id="recovery_2main__impl_8h_1a37101568f72e98d7b29de6c6a825a289" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int secp256k1_ecdsa_recoverable_signature_parse_compact</definition>
        <argsstring>(const secp256k1_context *ctx, secp256k1_ecdsa_recoverable_signature *sig, const unsigned char *input64, int recid)</argsstring>
        <name>secp256k1_ecdsa_recoverable_signature_parse_compact</name>
        <param>
          <type>const <ref refid="secp256k1_8h_1a282ec9e6dfec8c35955c3eb2f7476e5e" kindref="member">secp256k1_context</ref> *</type>
          <declname>ctx</declname>
        </param>
        <param>
          <type><ref refid="structsecp256k1__ecdsa__recoverable__signature" kindref="compound">secp256k1_ecdsa_recoverable_signature</ref> *</type>
          <declname>sig</declname>
        </param>
        <param>
          <type>const unsigned char *</type>
          <declname>input64</declname>
        </param>
        <param>
          <type>int</type>
          <declname>recid</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Parse a compact ECDSA signature (64 bytes + recovery id).</para><para>Returns: 1 when the signature could be parsed, 0 otherwise Args: ctx: a secp256k1 context object Out: sig: a pointer to a signature object In: input64: a pointer to a 64-byte compact signature recid: the recovery id (0, 1, 2 or 3) </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/secp256k1/src/modules/recovery/main_impl.h" line="38" column="1" bodyfile="/home/dev/ds-160209/src/secp256k1/src/modules/recovery/main_impl.h" bodystart="38" bodyend="58"/>
        <references refid="secp256k1_8c_1a6e1f88c6ce07376501097b42a2b40727" compoundref="secp256k1_8c" startline="23">ARG_CHECK</references>
        <referencedby refid="class_c_pub_key_1a169505e735a02db385486b0affeb565c" compoundref="pubkey_8cpp" startline="187" endline="205">CPubKey::RecoverCompact</referencedby>
        <referencedby refid="bench__recover_8c_1a6bbc6888c36d93d55e5410b25121db10" compoundref="bench__recover_8c" startline="18" endline="37">bench_recover</referencedby>
        <referencedby refid="recovery_2tests__impl_8h_1a70649882936497184992dfaa06b1106f" compoundref="recovery_2tests__impl_8h" startline="10" endline="66">test_ecdsa_recovery_end_to_end</referencedby>
        <referencedby refid="recovery_2tests__impl_8h_1ad6d3138600637a7c940bc40a22795e46" compoundref="recovery_2tests__impl_8h" startline="69" endline="240">test_ecdsa_recovery_edge_cases</referencedby>
      </memberdef>
      <memberdef kind="function" id="recovery_2main__impl_8h_1ac122392fa6ff6264a7a110875af164b0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int secp256k1_ecdsa_recoverable_signature_serialize_compact</definition>
        <argsstring>(const secp256k1_context *ctx, unsigned char *output64, int *recid, const secp256k1_ecdsa_recoverable_signature *sig)</argsstring>
        <name>secp256k1_ecdsa_recoverable_signature_serialize_compact</name>
        <param>
          <type>const <ref refid="secp256k1_8h_1a282ec9e6dfec8c35955c3eb2f7476e5e" kindref="member">secp256k1_context</ref> *</type>
          <declname>ctx</declname>
        </param>
        <param>
          <type>unsigned char *</type>
          <declname>output64</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>recid</declname>
        </param>
        <param>
          <type>const <ref refid="structsecp256k1__ecdsa__recoverable__signature" kindref="compound">secp256k1_ecdsa_recoverable_signature</ref> *</type>
          <declname>sig</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Serialize an ECDSA signature in compact format (64 bytes + recovery id).</para><para>Returns: 1 Args: ctx: a secp256k1 context object Out: output64: a pointer to a 64-byte array of the compact signature (cannot be NULL) recid: a pointer to an integer to hold the recovery id (can be NULL). In: sig: a pointer to an initialized signature object (cannot be NULL) </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/secp256k1/src/modules/recovery/main_impl.h" line="60" column="1" bodyfile="/home/dev/ds-160209/src/secp256k1/src/modules/recovery/main_impl.h" bodystart="60" bodyend="72"/>
        <references refid="secp256k1_8c_1a6e1f88c6ce07376501097b42a2b40727" compoundref="secp256k1_8c" startline="23">ARG_CHECK</references>
        <referencedby refid="class_c_key_1a59afeabf3f63d99dfdbd3722087853a1" compoundref="key_8cpp" startline="211" endline="224">CKey::SignCompact</referencedby>
        <referencedby refid="recovery_2tests__impl_8h_1a70649882936497184992dfaa06b1106f" compoundref="recovery_2tests__impl_8h" startline="10" endline="66">test_ecdsa_recovery_end_to_end</referencedby>
      </memberdef>
      <memberdef kind="function" id="recovery_2main__impl_8h_1a16ddfc800140d761bc783e571c34548c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int secp256k1_ecdsa_recoverable_signature_convert</definition>
        <argsstring>(const secp256k1_context *ctx, secp256k1_ecdsa_signature *sig, const secp256k1_ecdsa_recoverable_signature *sigin)</argsstring>
        <name>secp256k1_ecdsa_recoverable_signature_convert</name>
        <param>
          <type>const <ref refid="secp256k1_8h_1a282ec9e6dfec8c35955c3eb2f7476e5e" kindref="member">secp256k1_context</ref> *</type>
          <declname>ctx</declname>
        </param>
        <param>
          <type><ref refid="structsecp256k1__ecdsa__signature" kindref="compound">secp256k1_ecdsa_signature</ref> *</type>
          <declname>sig</declname>
        </param>
        <param>
          <type>const <ref refid="structsecp256k1__ecdsa__recoverable__signature" kindref="compound">secp256k1_ecdsa_recoverable_signature</ref> *</type>
          <declname>sigin</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Convert a recoverable signature into a normal signature.</para><para>Returns: 1 Out: sig: a pointer to a normal signature (cannot be NULL). In: sigin: a pointer to a recoverable signature (cannot be NULL). </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/secp256k1/src/modules/recovery/main_impl.h" line="74" column="1" bodyfile="/home/dev/ds-160209/src/secp256k1/src/modules/recovery/main_impl.h" bodystart="74" bodyend="85"/>
        <references refid="secp256k1_8c_1a6e1f88c6ce07376501097b42a2b40727" compoundref="secp256k1_8c" startline="23">ARG_CHECK</references>
        <referencedby refid="recovery_2tests__impl_8h_1a70649882936497184992dfaa06b1106f" compoundref="recovery_2tests__impl_8h" startline="10" endline="66">test_ecdsa_recovery_end_to_end</referencedby>
      </memberdef>
      <memberdef kind="function" id="recovery_2main__impl_8h_1a1a831ed991717749ed9d200bb9d3f03b" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>static int secp256k1_ecdsa_sig_recover</definition>
        <argsstring>(const secp256k1_ecmult_context *ctx, const secp256k1_scalar *sigr, const secp256k1_scalar *sigs, secp256k1_ge *pubkey, const secp256k1_scalar *message, int recid)</argsstring>
        <name>secp256k1_ecdsa_sig_recover</name>
        <param>
          <type>const <ref refid="structsecp256k1__ecmult__context" kindref="compound">secp256k1_ecmult_context</ref> *</type>
          <declname>ctx</declname>
        </param>
        <param>
          <type>const <ref refid="structsecp256k1__scalar" kindref="compound">secp256k1_scalar</ref> *</type>
          <declname>sigr</declname>
        </param>
        <param>
          <type>const <ref refid="structsecp256k1__scalar" kindref="compound">secp256k1_scalar</ref> *</type>
          <declname>sigs</declname>
        </param>
        <param>
          <type><ref refid="structsecp256k1__ge" kindref="compound">secp256k1_ge</ref> *</type>
          <declname>pubkey</declname>
        </param>
        <param>
          <type>const <ref refid="structsecp256k1__scalar" kindref="compound">secp256k1_scalar</ref> *</type>
          <declname>message</declname>
        </param>
        <param>
          <type>int</type>
          <declname>recid</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/secp256k1/src/modules/recovery/main_impl.h" line="87" column="1" bodyfile="/home/dev/ds-160209/src/secp256k1/src/modules/recovery/main_impl.h" bodystart="87" bodyend="121"/>
      </memberdef>
      <memberdef kind="function" id="recovery_2main__impl_8h_1ae06d019b6eaa34e248a502ba9c6d04cb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int secp256k1_ecdsa_sign_recoverable</definition>
        <argsstring>(const secp256k1_context *ctx, secp256k1_ecdsa_recoverable_signature *signature, const unsigned char *msg32, const unsigned char *seckey, secp256k1_nonce_function noncefp, const void *noncedata)</argsstring>
        <name>secp256k1_ecdsa_sign_recoverable</name>
        <param>
          <type>const <ref refid="secp256k1_8h_1a282ec9e6dfec8c35955c3eb2f7476e5e" kindref="member">secp256k1_context</ref> *</type>
          <declname>ctx</declname>
        </param>
        <param>
          <type><ref refid="structsecp256k1__ecdsa__recoverable__signature" kindref="compound">secp256k1_ecdsa_recoverable_signature</ref> *</type>
          <declname>sig</declname>
          <defname>signature</defname>
        </param>
        <param>
          <type>const unsigned char *</type>
          <declname>msg32</declname>
        </param>
        <param>
          <type>const unsigned char *</type>
          <declname>seckey</declname>
        </param>
        <param>
          <type><ref refid="secp256k1_8h_1a539882fd91bff672712fa19a4cfaeb98" kindref="member">secp256k1_nonce_function</ref></type>
          <declname>noncefp</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>ndata</declname>
          <defname>noncedata</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Create a recoverable ECDSA signature.</para><para>Returns: 1: signature created 0: the nonce generation function failed, or the private key was invalid. Args: ctx: pointer to a context object, initialized for signing (cannot be NULL) Out: sig: pointer to an array where the signature will be placed (cannot be NULL) In: msg32: the 32-byte message hash being signed (cannot be NULL) seckey: pointer to a 32-byte secret key (cannot be NULL) noncefp:pointer to a nonce generation function. If NULL, secp256k1_nonce_function_default is used ndata: pointer to arbitrary data used by the nonce generation function (can be NULL) </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/secp256k1/src/modules/recovery/main_impl.h" line="123" column="1" bodyfile="/home/dev/ds-160209/src/secp256k1/src/modules/recovery/main_impl.h" bodystart="123" bodyend="168"/>
        <references refid="secp256k1_2src_2util_8h_1aca8ac5ae73fd966db106de59160a178b" compoundref="secp256k1_2src_2util_8h" startline="64">VERIFY_CHECK</references>
        <references refid="secp256k1_8c_1a6e1f88c6ce07376501097b42a2b40727" compoundref="secp256k1_8c" startline="23">ARG_CHECK</references>
        <references refid="structsecp256k1__context__struct_1aacc2071a68f9c5a6c05eb783f523b9eb" compoundref="secp256k1_8c" startline="55">secp256k1_context_struct::ecmult_gen_ctx</references>
        <references refid="secp256k1_8h_1a22f44df7786a1be5ad93aadfed75b932" compoundref="secp256k1_8c" startline="347">secp256k1_nonce_function_default</references>
        <referencedby refid="class_c_key_1a59afeabf3f63d99dfdbd3722087853a1" compoundref="key_8cpp" startline="211" endline="224">CKey::SignCompact</referencedby>
        <referencedby refid="recovery_2tests__impl_8h_1a70649882936497184992dfaa06b1106f" compoundref="recovery_2tests__impl_8h" startline="10" endline="66">test_ecdsa_recovery_end_to_end</referencedby>
      </memberdef>
      <memberdef kind="function" id="recovery_2main__impl_8h_1a75f3e32e9a25eac9e8f9d3a5a8b0dc94" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int secp256k1_ecdsa_recover</definition>
        <argsstring>(const secp256k1_context *ctx, secp256k1_pubkey *pubkey, const secp256k1_ecdsa_recoverable_signature *signature, const unsigned char *msg32)</argsstring>
        <name>secp256k1_ecdsa_recover</name>
        <param>
          <type>const <ref refid="secp256k1_8h_1a282ec9e6dfec8c35955c3eb2f7476e5e" kindref="member">secp256k1_context</ref> *</type>
          <declname>ctx</declname>
        </param>
        <param>
          <type><ref refid="structsecp256k1__pubkey" kindref="compound">secp256k1_pubkey</ref> *</type>
          <declname>pubkey</declname>
        </param>
        <param>
          <type>const <ref refid="structsecp256k1__ecdsa__recoverable__signature" kindref="compound">secp256k1_ecdsa_recoverable_signature</ref> *</type>
          <declname>sig</declname>
          <defname>signature</defname>
        </param>
        <param>
          <type>const unsigned char *</type>
          <declname>msg32</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Recover an ECDSA public key from a signature.</para><para>Returns: 1: public key successfully recovered (which guarantees a correct signature). 0: otherwise. Args: ctx: pointer to a context object, initialized for verification (cannot be NULL) Out: pubkey: pointer to the recovered public key (cannot be NULL) In: sig: pointer to initialized signature that supports pubkey recovery (cannot be NULL) msg32: the 32-byte message hash assumed to be signed (cannot be NULL) </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/secp256k1/src/modules/recovery/main_impl.h" line="170" column="1" bodyfile="/home/dev/ds-160209/src/secp256k1/src/modules/recovery/main_impl.h" bodystart="170" bodyend="191"/>
        <references refid="secp256k1_2src_2util_8h_1aca8ac5ae73fd966db106de59160a178b" compoundref="secp256k1_2src_2util_8h" startline="64">VERIFY_CHECK</references>
        <references refid="secp256k1_8c_1a6e1f88c6ce07376501097b42a2b40727" compoundref="secp256k1_8c" startline="23">ARG_CHECK</references>
        <references refid="structsecp256k1__context__struct_1ab6a825dd98cab724df0f0060cf515eab" compoundref="secp256k1_8c" startline="54">secp256k1_context_struct::ecmult_ctx</references>
        <referencedby refid="class_c_pub_key_1a169505e735a02db385486b0affeb565c" compoundref="pubkey_8cpp" startline="187" endline="205">CPubKey::RecoverCompact</referencedby>
        <referencedby refid="bench__recover_8c_1a6bbc6888c36d93d55e5410b25121db10" compoundref="bench__recover_8c" startline="18" endline="37">bench_recover</referencedby>
        <referencedby refid="recovery_2tests__impl_8h_1a70649882936497184992dfaa06b1106f" compoundref="recovery_2tests__impl_8h" startline="10" endline="66">test_ecdsa_recovery_end_to_end</referencedby>
        <referencedby refid="recovery_2tests__impl_8h_1ad6d3138600637a7c940bc40a22795e46" compoundref="recovery_2tests__impl_8h" startline="69" endline="240">test_ecdsa_recovery_edge_cases</referencedby>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/**********************************************************************</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/>*<sp/>Copyright<sp/>(c)<sp/>2013-2016<sp/>Pieter<sp/>Wuille<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*<sp/>Distributed<sp/>under<sp/>the<sp/>MIT<sp/>software<sp/>license,<sp/>see<sp/>the<sp/>accompanying<sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*<sp/>file<sp/>COPYING<sp/>or<sp/>http://www.opensource.org/licenses/mit-license.php.*</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/>**********************************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>_SECP256K1_MODULE_RECOVERY_MAIN_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>_SECP256K1_MODULE_RECOVERY_MAIN_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="secp256k1__recovery_8h" kindref="compound">include/secp256k1_recovery.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>secp256k1_ecdsa_recoverable_signature_load(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structsecp256k1__context__struct" kindref="compound">secp256k1_context</ref>*<sp/>ctx,<sp/><ref refid="structsecp256k1__scalar" kindref="compound">secp256k1_scalar</ref>*<sp/>r,<sp/><ref refid="structsecp256k1__scalar" kindref="compound">secp256k1_scalar</ref>*<sp/>s,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*<sp/>recid,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structsecp256k1__ecdsa__recoverable__signature" kindref="compound">secp256k1_ecdsa_recoverable_signature</ref>*<sp/>sig)<sp/>{</highlight></codeline>
<codeline lineno="13"><highlight class="normal"><sp/><sp/><sp/><sp/>(void)ctx;</highlight></codeline>
<codeline lineno="14"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="structsecp256k1__scalar" kindref="compound">secp256k1_scalar</ref>)<sp/>==<sp/>32)<sp/>{</highlight></codeline>
<codeline lineno="15"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>When<sp/>the<sp/>secp256k1_scalar<sp/>type<sp/>is<sp/>exactly<sp/>32<sp/>byte,<sp/>use<sp/>its</highlight></codeline>
<codeline lineno="16"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>representation<sp/>inside<sp/>secp256k1_ecdsa_signature,<sp/>as<sp/>conversion<sp/>is<sp/>very<sp/>fast.</highlight></codeline>
<codeline lineno="17"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>Note<sp/>that<sp/>secp256k1_ecdsa_signature_save<sp/>must<sp/>use<sp/>the<sp/>same<sp/>representation.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>memcpy(r,<sp/>&amp;sig-&gt;<ref refid="structsecp256k1__ecdsa__recoverable__signature_1a7157f0cd8b8fb97fceacfd9c0024a952" kindref="member">data</ref>[0],<sp/>32);</highlight></codeline>
<codeline lineno="19"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>memcpy(s,<sp/>&amp;sig-&gt;<ref refid="structsecp256k1__ecdsa__recoverable__signature_1a7157f0cd8b8fb97fceacfd9c0024a952" kindref="member">data</ref>[32],<sp/>32);</highlight></codeline>
<codeline lineno="20"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>secp256k1_scalar_set_b32(r,<sp/>&amp;sig-&gt;<ref refid="structsecp256k1__ecdsa__recoverable__signature_1a7157f0cd8b8fb97fceacfd9c0024a952" kindref="member">data</ref>[0],<sp/>NULL);</highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>secp256k1_scalar_set_b32(s,<sp/>&amp;sig-&gt;<ref refid="structsecp256k1__ecdsa__recoverable__signature_1a7157f0cd8b8fb97fceacfd9c0024a952" kindref="member">data</ref>[32],<sp/>NULL);</highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/><sp/><sp/>*recid<sp/>=<sp/>sig-&gt;<ref refid="structsecp256k1__ecdsa__recoverable__signature_1a7157f0cd8b8fb97fceacfd9c0024a952" kindref="member">data</ref>[64];</highlight></codeline>
<codeline lineno="25"><highlight class="normal">}</highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>secp256k1_ecdsa_recoverable_signature_save(<ref refid="structsecp256k1__ecdsa__recoverable__signature" kindref="compound">secp256k1_ecdsa_recoverable_signature</ref>*<sp/>sig,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structsecp256k1__scalar" kindref="compound">secp256k1_scalar</ref>*<sp/>r,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structsecp256k1__scalar" kindref="compound">secp256k1_scalar</ref>*<sp/>s,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>recid)<sp/>{</highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="structsecp256k1__scalar" kindref="compound">secp256k1_scalar</ref>)<sp/>==<sp/>32)<sp/>{</highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>memcpy(&amp;sig-&gt;<ref refid="structsecp256k1__ecdsa__recoverable__signature_1a7157f0cd8b8fb97fceacfd9c0024a952" kindref="member">data</ref>[0],<sp/>r,<sp/>32);</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>memcpy(&amp;sig-&gt;<ref refid="structsecp256k1__ecdsa__recoverable__signature_1a7157f0cd8b8fb97fceacfd9c0024a952" kindref="member">data</ref>[32],<sp/>s,<sp/>32);</highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>secp256k1_scalar_get_b32(&amp;sig-&gt;<ref refid="structsecp256k1__ecdsa__recoverable__signature_1a7157f0cd8b8fb97fceacfd9c0024a952" kindref="member">data</ref>[0],<sp/>r);</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>secp256k1_scalar_get_b32(&amp;sig-&gt;<ref refid="structsecp256k1__ecdsa__recoverable__signature_1a7157f0cd8b8fb97fceacfd9c0024a952" kindref="member">data</ref>[32],<sp/>s);</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/>sig-&gt;<ref refid="structsecp256k1__ecdsa__recoverable__signature_1a7157f0cd8b8fb97fceacfd9c0024a952" kindref="member">data</ref>[64]<sp/>=<sp/>recid;</highlight></codeline>
<codeline lineno="36"><highlight class="normal">}</highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight></codeline>
<codeline lineno="38" refid="recovery_2main__impl_8h_1a37101568f72e98d7b29de6c6a825a289" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="recovery_2main__impl_8h_1a37101568f72e98d7b29de6c6a825a289" kindref="member">secp256k1_ecdsa_recoverable_signature_parse_compact</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structsecp256k1__context__struct" kindref="compound">secp256k1_context</ref>*<sp/>ctx,<sp/><ref refid="structsecp256k1__ecdsa__recoverable__signature" kindref="compound">secp256k1_ecdsa_recoverable_signature</ref>*<sp/>sig,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*input64,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>recid)<sp/>{</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structsecp256k1__scalar" kindref="compound">secp256k1_scalar</ref><sp/>r,<sp/>s;</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ret<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>overflow<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/>(void)ctx;</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="secp256k1_8c_1a6e1f88c6ce07376501097b42a2b40727" kindref="member">ARG_CHECK</ref>(sig<sp/>!=<sp/>NULL);</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="secp256k1_8c_1a6e1f88c6ce07376501097b42a2b40727" kindref="member">ARG_CHECK</ref>(input64<sp/>!=<sp/>NULL);</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="secp256k1_8c_1a6e1f88c6ce07376501097b42a2b40727" kindref="member">ARG_CHECK</ref>(recid<sp/>&gt;=<sp/>0<sp/>&amp;&amp;<sp/>recid<sp/>&lt;=<sp/>3);</highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/>secp256k1_scalar_set_b32(&amp;r,<sp/>&amp;input64[0],<sp/>&amp;overflow);</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/>ret<sp/>&amp;=<sp/>!overflow;</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/>secp256k1_scalar_set_b32(&amp;s,<sp/>&amp;input64[32],<sp/>&amp;overflow);</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/>ret<sp/>&amp;=<sp/>!overflow;</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ret)<sp/>{</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>secp256k1_ecdsa_recoverable_signature_save(sig,<sp/>&amp;r,<sp/>&amp;s,<sp/>recid);</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>memset(sig,<sp/>0,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(*sig));</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ret;</highlight></codeline>
<codeline lineno="58"><highlight class="normal">}</highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight></codeline>
<codeline lineno="60" refid="recovery_2main__impl_8h_1ac122392fa6ff6264a7a110875af164b0" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="recovery_2main__impl_8h_1ac122392fa6ff6264a7a110875af164b0" kindref="member">secp256k1_ecdsa_recoverable_signature_serialize_compact</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structsecp256k1__context__struct" kindref="compound">secp256k1_context</ref>*<sp/>ctx,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*output64,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*recid,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structsecp256k1__ecdsa__recoverable__signature" kindref="compound">secp256k1_ecdsa_recoverable_signature</ref>*<sp/>sig)<sp/>{</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structsecp256k1__scalar" kindref="compound">secp256k1_scalar</ref><sp/>r,<sp/>s;</highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/>(void)ctx;</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="secp256k1_8c_1a6e1f88c6ce07376501097b42a2b40727" kindref="member">ARG_CHECK</ref>(output64<sp/>!=<sp/>NULL);</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="secp256k1_8c_1a6e1f88c6ce07376501097b42a2b40727" kindref="member">ARG_CHECK</ref>(sig<sp/>!=<sp/>NULL);</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="secp256k1_8c_1a6e1f88c6ce07376501097b42a2b40727" kindref="member">ARG_CHECK</ref>(recid<sp/>!=<sp/>NULL);</highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/>secp256k1_ecdsa_recoverable_signature_load(ctx,<sp/>&amp;r,<sp/>&amp;s,<sp/>recid,<sp/>sig);</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/>secp256k1_scalar_get_b32(&amp;output64[0],<sp/>&amp;r);</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/>secp256k1_scalar_get_b32(&amp;output64[32],<sp/>&amp;s);</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="72"><highlight class="normal">}</highlight></codeline>
<codeline lineno="73"><highlight class="normal"></highlight></codeline>
<codeline lineno="74" refid="recovery_2main__impl_8h_1a16ddfc800140d761bc783e571c34548c" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="recovery_2main__impl_8h_1a16ddfc800140d761bc783e571c34548c" kindref="member">secp256k1_ecdsa_recoverable_signature_convert</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structsecp256k1__context__struct" kindref="compound">secp256k1_context</ref>*<sp/>ctx,<sp/><ref refid="structsecp256k1__ecdsa__signature" kindref="compound">secp256k1_ecdsa_signature</ref>*<sp/>sig,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structsecp256k1__ecdsa__recoverable__signature" kindref="compound">secp256k1_ecdsa_recoverable_signature</ref>*<sp/>sigin)<sp/>{</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structsecp256k1__scalar" kindref="compound">secp256k1_scalar</ref><sp/>r,<sp/>s;</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>recid;</highlight></codeline>
<codeline lineno="77"><highlight class="normal"></highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/>(void)ctx;</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="secp256k1_8c_1a6e1f88c6ce07376501097b42a2b40727" kindref="member">ARG_CHECK</ref>(sig<sp/>!=<sp/>NULL);</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="secp256k1_8c_1a6e1f88c6ce07376501097b42a2b40727" kindref="member">ARG_CHECK</ref>(sigin<sp/>!=<sp/>NULL);</highlight></codeline>
<codeline lineno="81"><highlight class="normal"></highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/>secp256k1_ecdsa_recoverable_signature_load(ctx,<sp/>&amp;r,<sp/>&amp;s,<sp/>&amp;recid,<sp/>sigin);</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/>secp256k1_ecdsa_signature_save(sig,<sp/>&amp;r,<sp/>&amp;s);</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="85"><highlight class="normal">}</highlight></codeline>
<codeline lineno="86"><highlight class="normal"></highlight></codeline>
<codeline lineno="87"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>secp256k1_ecdsa_sig_recover(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structsecp256k1__ecmult__context" kindref="compound">secp256k1_ecmult_context</ref><sp/>*ctx,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structsecp256k1__scalar" kindref="compound">secp256k1_scalar</ref><sp/>*sigr,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structsecp256k1__scalar" kindref="compound">secp256k1_scalar</ref>*<sp/>sigs,<sp/><ref refid="structsecp256k1__ge" kindref="compound">secp256k1_ge</ref><sp/>*pubkey,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structsecp256k1__scalar" kindref="compound">secp256k1_scalar</ref><sp/>*message,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>recid)<sp/>{</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>brx[32];</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structsecp256k1__fe" kindref="compound">secp256k1_fe</ref><sp/>fx;</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structsecp256k1__ge" kindref="compound">secp256k1_ge</ref><sp/>x;</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structsecp256k1__gej" kindref="compound">secp256k1_gej</ref><sp/>xj;</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structsecp256k1__scalar" kindref="compound">secp256k1_scalar</ref><sp/>rn,<sp/>u1,<sp/>u2;</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structsecp256k1__gej" kindref="compound">secp256k1_gej</ref><sp/>qj;</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>r;</highlight></codeline>
<codeline lineno="95"><highlight class="normal"></highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(secp256k1_scalar_is_zero(sigr)<sp/>||<sp/>secp256k1_scalar_is_zero(sigs))<sp/>{</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="99"><highlight class="normal"></highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/>secp256k1_scalar_get_b32(brx,<sp/>sigr);</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/>r<sp/>=<sp/>secp256k1_fe_set_b32(&amp;fx,<sp/>brx);</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/>(void)r;</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="secp256k1_2src_2util_8h_1aca8ac5ae73fd966db106de59160a178b" kindref="member">VERIFY_CHECK</ref>(r);<sp/></highlight><highlight class="comment">/*<sp/>brx<sp/>comes<sp/>from<sp/>a<sp/>scalar,<sp/>so<sp/>is<sp/>less<sp/>than<sp/>the<sp/>order;<sp/>certainly<sp/>less<sp/>than<sp/>p<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(recid<sp/>&amp;<sp/>2)<sp/>{</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(secp256k1_fe_cmp_var(&amp;fx,<sp/>&amp;secp256k1_ecdsa_const_p_minus_order)<sp/>&gt;=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>secp256k1_fe_add(&amp;fx,<sp/>&amp;secp256k1_ecdsa_const_order_as_fe);</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!secp256k1_ge_set_xo_var(&amp;x,<sp/>&amp;fx,<sp/>recid<sp/>&amp;<sp/>1))<sp/>{</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/>secp256k1_gej_set_ge(&amp;xj,<sp/>&amp;x);</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/>secp256k1_scalar_inverse_var(&amp;rn,<sp/>sigr);</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/>secp256k1_scalar_mul(&amp;u1,<sp/>&amp;rn,<sp/>message);</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/>secp256k1_scalar_negate(&amp;u1,<sp/>&amp;u1);</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/>secp256k1_scalar_mul(&amp;u2,<sp/>&amp;rn,<sp/>sigs);</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/>secp256k1_ecmult(ctx,<sp/>&amp;qj,<sp/>&amp;xj,<sp/>&amp;u2,<sp/>&amp;u1);</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/>secp256k1_ge_set_gej_var(pubkey,<sp/>&amp;qj);</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>!secp256k1_gej_is_infinity(&amp;qj);</highlight></codeline>
<codeline lineno="121"><highlight class="normal">}</highlight></codeline>
<codeline lineno="122"><highlight class="normal"></highlight></codeline>
<codeline lineno="123" refid="recovery_2main__impl_8h_1ae06d019b6eaa34e248a502ba9c6d04cb" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="recovery_2main__impl_8h_1ae06d019b6eaa34e248a502ba9c6d04cb" kindref="member">secp256k1_ecdsa_sign_recoverable</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structsecp256k1__context__struct" kindref="compound">secp256k1_context</ref>*<sp/>ctx,<sp/><ref refid="structsecp256k1__ecdsa__recoverable__signature" kindref="compound">secp256k1_ecdsa_recoverable_signature</ref><sp/>*signature,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*msg32,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*seckey,<sp/><ref refid="secp256k1_8h_1a539882fd91bff672712fa19a4cfaeb98" kindref="member">secp256k1_nonce_function</ref><sp/>noncefp,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>noncedata)<sp/>{</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structsecp256k1__scalar" kindref="compound">secp256k1_scalar</ref><sp/>r,<sp/>s;</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structsecp256k1__scalar" kindref="compound">secp256k1_scalar</ref><sp/>sec,<sp/>non,<sp/>msg;</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>recid;</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ret<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>overflow<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="secp256k1_2src_2util_8h_1aca8ac5ae73fd966db106de59160a178b" kindref="member">VERIFY_CHECK</ref>(ctx<sp/>!=<sp/>NULL);</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="secp256k1_8c_1a6e1f88c6ce07376501097b42a2b40727" kindref="member">ARG_CHECK</ref>(secp256k1_ecmult_gen_context_is_built(&amp;ctx-&gt;<ref refid="structsecp256k1__context__struct_1aacc2071a68f9c5a6c05eb783f523b9eb" kindref="member">ecmult_gen_ctx</ref>));</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="secp256k1_8c_1a6e1f88c6ce07376501097b42a2b40727" kindref="member">ARG_CHECK</ref>(msg32<sp/>!=<sp/>NULL);</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="secp256k1_8c_1a6e1f88c6ce07376501097b42a2b40727" kindref="member">ARG_CHECK</ref>(signature<sp/>!=<sp/>NULL);</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="secp256k1_8c_1a6e1f88c6ce07376501097b42a2b40727" kindref="member">ARG_CHECK</ref>(seckey<sp/>!=<sp/>NULL);</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(noncefp<sp/>==<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>noncefp<sp/>=<sp/><ref refid="secp256k1_8h_1a22f44df7786a1be5ad93aadfed75b932" kindref="member">secp256k1_nonce_function_default</ref>;</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="137"><highlight class="normal"></highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/>secp256k1_scalar_set_b32(&amp;sec,<sp/>seckey,<sp/>&amp;overflow);</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Fail<sp/>if<sp/>the<sp/>secret<sp/>key<sp/>is<sp/>invalid.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!overflow<sp/>&amp;&amp;<sp/>!secp256k1_scalar_is_zero(&amp;sec))<sp/>{</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>count<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>secp256k1_scalar_set_b32(&amp;msg,<sp/>msg32,<sp/>NULL);</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(1)<sp/>{</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>nonce32[32];</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ret<sp/>=<sp/>noncefp(nonce32,<sp/>msg32,<sp/>seckey,<sp/>NULL,<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*)noncedata,<sp/>count);</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!ret)<sp/>{</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>secp256k1_scalar_set_b32(&amp;non,<sp/>nonce32,<sp/>&amp;overflow);</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>memset(nonce32,<sp/>0,<sp/>32);</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!secp256k1_scalar_is_zero(&amp;non)<sp/>&amp;&amp;<sp/>!overflow)<sp/>{</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(secp256k1_ecdsa_sig_sign(&amp;ctx-&gt;<ref refid="structsecp256k1__context__struct_1aacc2071a68f9c5a6c05eb783f523b9eb" kindref="member">ecmult_gen_ctx</ref>,<sp/>&amp;r,<sp/>&amp;s,<sp/>&amp;sec,<sp/>&amp;msg,<sp/>&amp;non,<sp/>&amp;recid))<sp/>{</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>count++;</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>secp256k1_scalar_clear(&amp;msg);</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>secp256k1_scalar_clear(&amp;non);</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>secp256k1_scalar_clear(&amp;sec);</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ret)<sp/>{</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>secp256k1_ecdsa_recoverable_signature_save(signature,<sp/>&amp;r,<sp/>&amp;s,<sp/>recid);</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>memset(signature,<sp/>0,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(*signature));</highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ret;</highlight></codeline>
<codeline lineno="168"><highlight class="normal">}</highlight></codeline>
<codeline lineno="169"><highlight class="normal"></highlight></codeline>
<codeline lineno="170" refid="recovery_2main__impl_8h_1a75f3e32e9a25eac9e8f9d3a5a8b0dc94" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="recovery_2main__impl_8h_1a75f3e32e9a25eac9e8f9d3a5a8b0dc94" kindref="member">secp256k1_ecdsa_recover</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structsecp256k1__context__struct" kindref="compound">secp256k1_context</ref>*<sp/>ctx,<sp/><ref refid="structsecp256k1__pubkey" kindref="compound">secp256k1_pubkey</ref><sp/>*pubkey,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structsecp256k1__ecdsa__recoverable__signature" kindref="compound">secp256k1_ecdsa_recoverable_signature</ref><sp/>*signature,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*msg32)<sp/>{</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structsecp256k1__ge" kindref="compound">secp256k1_ge</ref><sp/>q;</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structsecp256k1__scalar" kindref="compound">secp256k1_scalar</ref><sp/>r,<sp/>s;</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structsecp256k1__scalar" kindref="compound">secp256k1_scalar</ref><sp/>m;</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>recid;</highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="secp256k1_2src_2util_8h_1aca8ac5ae73fd966db106de59160a178b" kindref="member">VERIFY_CHECK</ref>(ctx<sp/>!=<sp/>NULL);</highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="secp256k1_8c_1a6e1f88c6ce07376501097b42a2b40727" kindref="member">ARG_CHECK</ref>(secp256k1_ecmult_context_is_built(&amp;ctx-&gt;<ref refid="structsecp256k1__context__struct_1ab6a825dd98cab724df0f0060cf515eab" kindref="member">ecmult_ctx</ref>));</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="secp256k1_8c_1a6e1f88c6ce07376501097b42a2b40727" kindref="member">ARG_CHECK</ref>(msg32<sp/>!=<sp/>NULL);</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="secp256k1_8c_1a6e1f88c6ce07376501097b42a2b40727" kindref="member">ARG_CHECK</ref>(signature<sp/>!=<sp/>NULL);</highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="secp256k1_8c_1a6e1f88c6ce07376501097b42a2b40727" kindref="member">ARG_CHECK</ref>(pubkey<sp/>!=<sp/>NULL);</highlight></codeline>
<codeline lineno="180"><highlight class="normal"></highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/><sp/>secp256k1_ecdsa_recoverable_signature_load(ctx,<sp/>&amp;r,<sp/>&amp;s,<sp/>&amp;recid,<sp/>signature);</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="secp256k1_8c_1a6e1f88c6ce07376501097b42a2b40727" kindref="member">ARG_CHECK</ref>(recid<sp/>&gt;=<sp/>0<sp/>&amp;&amp;<sp/>recid<sp/>&lt;<sp/>4);</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/><sp/>secp256k1_scalar_set_b32(&amp;m,<sp/>msg32,<sp/>NULL);</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(secp256k1_ecdsa_sig_recover(&amp;ctx-&gt;<ref refid="structsecp256k1__context__struct_1ab6a825dd98cab724df0f0060cf515eab" kindref="member">ecmult_ctx</ref>,<sp/>&amp;r,<sp/>&amp;s,<sp/>&amp;q,<sp/>&amp;m,<sp/>recid))<sp/>{</highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>secp256k1_pubkey_save(pubkey,<sp/>&amp;q);</highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>memset(pubkey,<sp/>0,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(*pubkey));</highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="191"><highlight class="normal">}</highlight></codeline>
<codeline lineno="192"><highlight class="normal"></highlight></codeline>
<codeline lineno="193"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
    </programlisting>
    <location file="/home/dev/ds-160209/src/secp256k1/src/modules/recovery/main_impl.h"/>
  </compounddef>
</doxygen>
