<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.9.1">
  <compounddef id="key_8cpp" kind="file" language="C++">
    <compoundname>key.cpp</compoundname>
    <includes refid="key_8h" local="yes">key.h</includes>
    <includes refid="common_8h" local="yes">crypto/common.h</includes>
    <includes refid="hmac__sha512_8h" local="yes">crypto/hmac_sha512.h</includes>
    <includes refid="pubkey_8h" local="yes">pubkey.h</includes>
    <includes refid="util_8h" local="yes">util.h</includes>
    <includes refid="secp256k1_8h" local="no">secp256k1.h</includes>
    <includes refid="secp256k1__recovery_8h" local="no">secp256k1_recovery.h</includes>
    <incdepgraph>
      <node id="35729">
        <label>list</label>
      </node>
      <node id="35689">
        <label>boost/thread/mutex.hpp</label>
      </node>
      <node id="35728">
        <label>amount.h</label>
        <link refid="amount_8h"/>
        <childnode refid="35702" relation="include">
        </childnode>
        <childnode refid="35686" relation="include">
        </childnode>
        <childnode refid="35688" relation="include">
        </childnode>
      </node>
      <node id="35705">
        <label>limits</label>
      </node>
      <node id="35714">
        <label>crypto/sha256.h</label>
        <link refid="sha256_8h"/>
        <childnode refid="35700" relation="include">
        </childnode>
        <childnode refid="35686" relation="include">
        </childnode>
      </node>
      <node id="35715">
        <label>crypto/argon2/blake2/blake2.h</label>
        <link refid="blake2_8h"/>
        <childnode refid="35716" relation="include">
        </childnode>
        <childnode refid="35700" relation="include">
        </childnode>
        <childnode refid="35692" relation="include">
        </childnode>
      </node>
      <node id="35740">
        <label>openssl/rand.h</label>
      </node>
      <node id="35708">
        <label>boost/tuple/tuple.hpp</label>
      </node>
      <node id="35697">
        <label>assert.h</label>
      </node>
      <node id="35709">
        <label>version.h</label>
        <link refid="version_8h"/>
        <childnode refid="35710" relation="include">
        </childnode>
        <childnode refid="35688" relation="include">
        </childnode>
      </node>
      <node id="35691">
        <label>sys/mman.h</label>
      </node>
      <node id="35686">
        <label>stdlib.h</label>
      </node>
      <node id="35739">
        <label>openssl/crypto.h</label>
      </node>
      <node id="35735">
        <label>boost/date_time/posix_time/posix_time_types.hpp</label>
      </node>
      <node id="35719">
        <label>crypto/hmac_sha512.h</label>
        <link refid="hmac__sha512_8h"/>
        <childnode refid="35720" relation="include">
        </childnode>
        <childnode refid="35700" relation="include">
        </childnode>
        <childnode refid="35686" relation="include">
        </childnode>
      </node>
      <node id="35711">
        <label>openssl/sha.h</label>
      </node>
      <node id="35704">
        <label>cassert</label>
      </node>
      <node id="35699">
        <label>stdexcept</label>
      </node>
      <node id="35721">
        <label>util.h</label>
        <link refid="util_8h"/>
        <childnode refid="35722" relation="include">
        </childnode>
        <childnode refid="35723" relation="include">
        </childnode>
        <childnode refid="35724" relation="include">
        </childnode>
        <childnode refid="35702" relation="include">
        </childnode>
        <childnode refid="35725" relation="include">
        </childnode>
        <childnode refid="35728" relation="include">
        </childnode>
        <childnode refid="35690" relation="include">
        </childnode>
        <childnode refid="35729" relation="include">
        </childnode>
        <childnode refid="35730" relation="include">
        </childnode>
        <childnode refid="35701" relation="include">
        </childnode>
        <childnode refid="35688" relation="include">
        </childnode>
        <childnode refid="35731" relation="include">
        </childnode>
        <childnode refid="35732" relation="include">
        </childnode>
        <childnode refid="35733" relation="include">
        </childnode>
        <childnode refid="35734" relation="include">
        </childnode>
        <childnode refid="35735" relation="include">
        </childnode>
        <childnode refid="35736" relation="include">
        </childnode>
        <childnode refid="35737" relation="include">
        </childnode>
        <childnode refid="35738" relation="include">
        </childnode>
        <childnode refid="35739" relation="include">
        </childnode>
        <childnode refid="35740" relation="include">
        </childnode>
        <childnode refid="35741" relation="include">
        </childnode>
        <childnode refid="35700" relation="include">
        </childnode>
      </node>
      <node id="35742">
        <label>secp256k1.h</label>
        <link refid="secp256k1_8h"/>
        <childnode refid="35716" relation="include">
        </childnode>
      </node>
      <node id="35734">
        <label>boost/date_time/gregorian/gregorian_types.hpp</label>
      </node>
      <node id="35718">
        <label>crypto/common.h</label>
        <link refid="common_8h"/>
        <childnode refid="35700" relation="include">
        </childnode>
      </node>
      <node id="35688">
        <label>string</label>
      </node>
      <node id="35690">
        <label>map</label>
      </node>
      <node id="35731">
        <label>boost/thread.hpp</label>
      </node>
      <node id="35716">
        <label>stddef.h</label>
      </node>
      <node id="35702">
        <label>serialize.h</label>
        <link refid="serialize_8h"/>
        <childnode refid="35688" relation="include">
        </childnode>
        <childnode refid="35701" relation="include">
        </childnode>
        <childnode refid="35690" relation="include">
        </childnode>
        <childnode refid="35703" relation="include">
        </childnode>
        <childnode refid="35704" relation="include">
        </childnode>
        <childnode refid="35705" relation="include">
        </childnode>
        <childnode refid="35700" relation="include">
        </childnode>
        <childnode refid="35698" relation="include">
        </childnode>
        <childnode refid="35706" relation="include">
        </childnode>
        <childnode refid="35707" relation="include">
        </childnode>
        <childnode refid="35708" relation="include">
        </childnode>
        <childnode refid="35684" relation="include">
        </childnode>
        <childnode refid="35709" relation="include">
        </childnode>
      </node>
      <node id="35692">
        <label>limits.h</label>
      </node>
      <node id="35724">
        <label>sys/resource.h</label>
      </node>
      <node id="35736">
        <label>openssl/bio.h</label>
      </node>
      <node id="35695">
        <label>hash.h</label>
        <link refid="hash_8h"/>
        <childnode refid="35696" relation="include">
        </childnode>
        <childnode refid="35702" relation="include">
        </childnode>
        <childnode refid="35711" relation="include">
        </childnode>
        <childnode refid="35712" relation="include">
        </childnode>
        <childnode refid="35713" relation="include">
        </childnode>
        <childnode refid="35714" relation="include">
        </childnode>
        <childnode refid="35715" relation="include">
        </childnode>
        <childnode refid="35717" relation="include">
        </childnode>
        <childnode refid="35701" relation="include">
        </childnode>
      </node>
      <node id="35722">
        <label>sys/types.h</label>
      </node>
      <node id="35687">
        <label>string.h</label>
      </node>
      <node id="35710">
        <label>clientversion.h</label>
        <link refid="clientversion_8h"/>
      </node>
      <node id="35706">
        <label>cstdio</label>
      </node>
      <node id="35720">
        <label>crypto/sha512.h</label>
        <link refid="sha512_8h"/>
        <childnode refid="35700" relation="include">
        </childnode>
        <childnode refid="35686" relation="include">
        </childnode>
      </node>
      <node id="35738">
        <label>openssl/buffer.h</label>
      </node>
      <node id="35707">
        <label>boost/type_traits/is_fundamental.hpp</label>
      </node>
      <node id="35733">
        <label>boost/filesystem/path.hpp</label>
      </node>
      <node id="35694">
        <label>pubkey.h</label>
        <link refid="pubkey_8h"/>
        <childnode refid="35695" relation="include">
        </childnode>
        <childnode refid="35702" relation="include">
        </childnode>
        <childnode refid="35696" relation="include">
        </childnode>
        <childnode refid="35699" relation="include">
        </childnode>
        <childnode refid="35701" relation="include">
        </childnode>
      </node>
      <node id="35693">
        <label>unistd.h</label>
      </node>
      <node id="35701">
        <label>vector</label>
      </node>
      <node id="35712">
        <label>openssl/ripemd.h</label>
      </node>
      <node id="35732">
        <label>boost/filesystem.hpp</label>
      </node>
      <node id="35730">
        <label>utility</label>
      </node>
      <node id="35727">
        <label>sstream</label>
      </node>
      <node id="35683">
        <label>key.h</label>
        <link refid="key_8h"/>
        <childnode refid="35684" relation="include">
        </childnode>
        <childnode refid="35694" relation="include">
        </childnode>
        <childnode refid="35699" relation="include">
        </childnode>
        <childnode refid="35701" relation="include">
        </childnode>
      </node>
      <node id="35737">
        <label>openssl/evp.h</label>
      </node>
      <node id="35725">
        <label>tinyformat.h</label>
        <link refid="tinyformat_8h"/>
        <childnode refid="35704" relation="include">
        </childnode>
        <childnode refid="35726" relation="include">
        </childnode>
        <childnode refid="35727" relation="include">
        </childnode>
        <childnode refid="35699" relation="include">
        </childnode>
      </node>
      <node id="35700">
        <label>stdint.h</label>
        <link refid="stdint_8h"/>
      </node>
      <node id="35717">
        <label>crypto/argon2/argon2.h</label>
        <link refid="argon2_8h"/>
        <childnode refid="35700" relation="include">
        </childnode>
        <childnode refid="35716" relation="include">
        </childnode>
        <childnode refid="35692" relation="include">
        </childnode>
      </node>
      <node id="35723">
        <label>sys/time.h</label>
      </node>
      <node id="35726">
        <label>iostream</label>
      </node>
      <node id="35696">
        <label>uint256.h</label>
        <link refid="uint256_8h"/>
        <childnode refid="35697" relation="include">
        </childnode>
        <childnode refid="35698" relation="include">
        </childnode>
        <childnode refid="35699" relation="include">
        </childnode>
        <childnode refid="35700" relation="include">
        </childnode>
        <childnode refid="35688" relation="include">
        </childnode>
        <childnode refid="35701" relation="include">
        </childnode>
      </node>
      <node id="35743">
        <label>secp256k1_recovery.h</label>
        <link refid="secp256k1__recovery_8h"/>
        <childnode refid="35742" relation="include">
        </childnode>
      </node>
      <node id="35741">
        <label>openssl/bn.h</label>
      </node>
      <node id="35684">
        <label>allocators.h</label>
        <link refid="allocators_8h"/>
        <childnode refid="35685" relation="include">
        </childnode>
        <childnode refid="35687" relation="include">
        </childnode>
        <childnode refid="35688" relation="include">
        </childnode>
        <childnode refid="35689" relation="include">
        </childnode>
        <childnode refid="35690" relation="include">
        </childnode>
        <childnode refid="35691" relation="include">
        </childnode>
        <childnode refid="35692" relation="include">
        </childnode>
        <childnode refid="35693" relation="include">
        </childnode>
      </node>
      <node id="35703">
        <label>set</label>
      </node>
      <node id="35713">
        <label>crypto/ripemd160.h</label>
        <link refid="ripemd160_8h"/>
        <childnode refid="35700" relation="include">
        </childnode>
        <childnode refid="35686" relation="include">
        </childnode>
      </node>
      <node id="35682">
        <label>/home/dev/ds-160209/src/key.cpp</label>
        <link refid="key.cpp"/>
        <childnode refid="35683" relation="include">
        </childnode>
        <childnode refid="35718" relation="include">
        </childnode>
        <childnode refid="35719" relation="include">
        </childnode>
        <childnode refid="35694" relation="include">
        </childnode>
        <childnode refid="35721" relation="include">
        </childnode>
        <childnode refid="35742" relation="include">
        </childnode>
        <childnode refid="35743" relation="include">
        </childnode>
      </node>
      <node id="35685">
        <label>cleanse.h</label>
        <link refid="cleanse_8h"/>
        <childnode refid="35686" relation="include">
        </childnode>
      </node>
      <node id="35698">
        <label>cstring</label>
      </node>
    </incdepgraph>
      <sectiondef kind="var">
      <memberdef kind="variable" id="key_8cpp_1aa353374fd6a64d469d7d2f3540f8ac76" prot="public" static="yes" mutable="no">
        <type><ref refid="secp256k1_8h_1a282ec9e6dfec8c35955c3eb2f7476e5e" kindref="member">secp256k1_context</ref> *</type>
        <definition>secp256k1_context* secp256k1_context_sign</definition>
        <argsstring></argsstring>
        <name>secp256k1_context_sign</name>
        <initializer>= NULL</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/key.cpp" line="29" column="1" bodyfile="/home/dev/ds-160209/src/key.cpp" bodystart="29" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="key_8cpp_1a4b55d97662f6589a6319c363469c501e" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>static int ec_privkey_import_der</definition>
        <argsstring>(const secp256k1_context *ctx, unsigned char *out32, const unsigned char *privkey, size_t privkeylen)</argsstring>
        <name>ec_privkey_import_der</name>
        <param>
          <type>const <ref refid="secp256k1_8h_1a282ec9e6dfec8c35955c3eb2f7476e5e" kindref="member">secp256k1_context</ref> *</type>
          <declname>ctx</declname>
        </param>
        <param>
          <type>unsigned char *</type>
          <declname>out32</declname>
        </param>
        <param>
          <type>const unsigned char *</type>
          <declname>privkey</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>privkeylen</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>These functions are taken from the libsecp256k1 distribution and are very ugly. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/key.cpp" line="32" column="1" bodyfile="/home/dev/ds-160209/src/key.cpp" bodystart="32" bodyend="74"/>
      </memberdef>
      <memberdef kind="function" id="key_8cpp_1a8cafc8a5eaf9a41f141e31d7c42ed7b9" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>static int ec_privkey_export_der</definition>
        <argsstring>(const secp256k1_context *ctx, unsigned char *privkey, size_t *privkeylen, const unsigned char *key32, int compressed)</argsstring>
        <name>ec_privkey_export_der</name>
        <param>
          <type>const <ref refid="secp256k1_8h_1a282ec9e6dfec8c35955c3eb2f7476e5e" kindref="member">secp256k1_context</ref> *</type>
          <declname>ctx</declname>
        </param>
        <param>
          <type>unsigned char *</type>
          <declname>privkey</declname>
        </param>
        <param>
          <type>size_t *</type>
          <declname>privkeylen</declname>
        </param>
        <param>
          <type>const unsigned char *</type>
          <declname>key32</declname>
        </param>
        <param>
          <type>int</type>
          <declname>compressed</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/key.cpp" line="76" column="1" bodyfile="/home/dev/ds-160209/src/key.cpp" bodystart="76" bodyend="133"/>
      </memberdef>
      <memberdef kind="function" id="key_8cpp_1adc8d142f5bcd2ca6646462fb45a7945d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool ECC_InitSanityCheck</definition>
        <argsstring>()</argsstring>
        <name>ECC_InitSanityCheck</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Check that required EC support is available at runtime. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/key.cpp" line="313" column="1" bodyfile="/home/dev/ds-160209/src/key.cpp" bodystart="313" bodyend="318"/>
        <references refid="class_c_key_1a9d12ed9d297e4286250fd7ea6b59e1a5" compoundref="key_8cpp" startline="139" endline="146">CKey::MakeNewKey</references>
        <references refid="class_c_key_1ae4b61da6ec62f676fe6362ac5fc26aca" compoundref="key_8cpp" startline="169" endline="180">CKey::GetPubKey</references>
        <references refid="class_c_key_1a3890764f7a2e5d9cdeffb3e102e4545d" compoundref="key_8cpp" startline="197" endline="209">CKey::VerifyPubKey</references>
        <referencedby refid="init_8cpp_1a878797b40fb8eb0d7f330a41d7742d11" compoundref="init_8cpp" startline="359" endline="370">InitSanityCheck</referencedby>
      </memberdef>
      <memberdef kind="function" id="key_8cpp_1ae4d2893f2f5af1cca247516578171860" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ECC_Start</definition>
        <argsstring>()</argsstring>
        <name>ECC_Start</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Initialize the elliptic curve support. May not be called twice without calling ECC_Stop first. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/key.cpp" line="321" column="1" bodyfile="/home/dev/ds-160209/src/key.cpp" bodystart="321" bodyend="338"/>
        <references refid="secp256k1_8h_1a769d478f352afbb55200e33970533a3c" compoundref="secp256k1_8c" startline="60" endline="83">secp256k1_context_create</references>
        <references refid="secp256k1_8h_1a0d34fe6baa73d3145f2e376e43de0b15" compoundref="secp256k1_8h" startline="161">SECP256K1_CONTEXT_SIGN</references>
        <references refid="allocators_8h_1ab73cc3988a03bed966c0c2bb191a8d2a" compoundref="allocators_8h" startline="185" endline="187">LockObject</references>
        <references refid="util_8cpp_1acf52c2aa8213c7b15e26594a2264ed8a" compoundref="util_8cpp" startline="154" endline="161">GetRandBytes</references>
        <references refid="secp256k1_8h_1a1b81d70feb6ed24dc902cbbd5ba569e7" compoundref="secp256k1_8c" startline="527" endline="532">secp256k1_context_randomize</references>
        <references refid="allocators_8h_1a49577b8da0ecffd2fbc222896283004c" compoundref="allocators_8h" startline="189" endline="192">UnlockObject</references>
        <referencedby refid="init_8h_1a1a4c1bfbf6ba1db77e988b89b9cadfd3" compoundref="init_8cpp" startline="375" endline="1285">AppInit2</referencedby>
      </memberdef>
      <memberdef kind="function" id="key_8cpp_1af3410be5ada18a4d8e9edcd3b0d261c9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ECC_Stop</definition>
        <argsstring>()</argsstring>
        <name>ECC_Stop</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Deinitialize the elliptic curve support. No-op if ECC_Start wasn&apos;t called first. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/key.cpp" line="340" column="1" bodyfile="/home/dev/ds-160209/src/key.cpp" bodystart="340" bodyend="347"/>
        <references refid="secp256k1_8h_1af8569fb9aa73c0acf46afce4df662950" compoundref="secp256k1_8c" startline="94" endline="101">secp256k1_context_destroy</references>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">//<sp/>Copyright<sp/>(c)<sp/>2009-2016<sp/>The<sp/>Bitcoin<sp/>developers</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Distributed<sp/>under<sp/>the<sp/>MIT/X11<sp/>software<sp/>license,<sp/>see<sp/>the<sp/>accompanying</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="comment">//<sp/>file<sp/>COPYING<sp/>or<sp/>http://www.opensource.org/licenses/mit-license.php.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="key_8h" kindref="compound">key.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="common_8h" kindref="compound">crypto/common.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="hmac__sha512_8h" kindref="compound">crypto/hmac_sha512.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="pubkey_8h" kindref="compound">pubkey.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="util_8h" kindref="compound">util.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="secp256k1_8h" kindref="compound">secp256k1.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="secp256k1__recovery_8h" kindref="compound">secp256k1_recovery.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="comment">//<sp/>anonymous<sp/>namespace</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">CSecp256k1Init<sp/>{</highlight></codeline>
<codeline lineno="19"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_e_c_c_verify_handle" kindref="compound">ECCVerifyHandle</ref><sp/>globalVerifyHandle;</highlight></codeline>
<codeline lineno="20"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_e_c_crypto_closure" kindref="compound">ECCryptoClosure</ref><sp/>instance_of_eccryptoclosure;</highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/><sp/><sp/>CSecp256k1Init()<sp/>{<sp/><ref refid="key_8cpp_1ae4d2893f2f5af1cca247516578171860" kindref="member">ECC_Start</ref>();<sp/>}</highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/><sp/><sp/>~CSecp256k1Init()<sp/>{<sp/><ref refid="key_8cpp_1af3410be5ada18a4d8e9edcd3b0d261c9" kindref="member">ECC_Stop</ref>();<sp/>}</highlight></codeline>
<codeline lineno="25"><highlight class="normal">};</highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>end<sp/>of<sp/>anonymous<sp/>namespace</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="structsecp256k1__context__struct" kindref="compound">secp256k1_context</ref>*<sp/>secp256k1_context_sign<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ec_privkey_import_der(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structsecp256k1__context__struct" kindref="compound">secp256k1_context</ref>*<sp/>ctx,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*out32,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*privkey,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>privkeylen)<sp/>{</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*end<sp/>=<sp/>privkey<sp/>+<sp/>privkeylen;</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>lenb<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>len<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/>memset(out32,<sp/>0,<sp/>32);</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>sequence<sp/>header<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(end<sp/>&lt;<sp/>privkey+1<sp/>||<sp/>*privkey<sp/>!=<sp/>0x30)<sp/>{</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/>privkey++;</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>sequence<sp/>length<sp/>constructor<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(end<sp/>&lt;<sp/>privkey+1<sp/>||<sp/>!(*privkey<sp/>&amp;<sp/>0x80))<sp/>{</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/>lenb<sp/>=<sp/>*privkey<sp/>&amp;<sp/>~0x80;<sp/>privkey++;</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(lenb<sp/>&lt;<sp/>1<sp/>||<sp/>lenb<sp/>&gt;<sp/>2)<sp/>{</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(end<sp/>&lt;<sp/>privkey+lenb)<sp/>{</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>sequence<sp/>length<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/>len<sp/>=<sp/>privkey[lenb-1]<sp/>|<sp/>(lenb<sp/>&gt;<sp/>1<sp/>?<sp/>privkey[lenb-2]<sp/>&lt;&lt;<sp/>8<sp/>:<sp/>0);</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/>privkey<sp/>+=<sp/>lenb;</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(end<sp/>&lt;<sp/>privkey+len)<sp/>{</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>sequence<sp/>element<sp/>0:<sp/>version<sp/>number<sp/>(=1)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(end<sp/>&lt;<sp/>privkey+3<sp/>||<sp/>privkey[0]<sp/>!=<sp/>0x02<sp/>||<sp/>privkey[1]<sp/>!=<sp/>0x01<sp/>||<sp/>privkey[2]<sp/>!=<sp/>0x01)<sp/>{</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/>privkey<sp/>+=<sp/>3;</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>sequence<sp/>element<sp/>1:<sp/>octet<sp/>string,<sp/>up<sp/>to<sp/>32<sp/>bytes<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(end<sp/>&lt;<sp/>privkey+2<sp/>||<sp/>privkey[0]<sp/>!=<sp/>0x04<sp/>||<sp/>privkey[1]<sp/>&gt;<sp/>0x20<sp/>||<sp/>end<sp/>&lt;<sp/>privkey+2+privkey[1])<sp/>{</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/>memcpy(out32<sp/>+<sp/>32<sp/>-<sp/>privkey[1],<sp/>privkey<sp/>+<sp/>2,<sp/>privkey[1]);</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="secp256k1_8h_1a366f922fc0c787351e82ff8e3a95f652" kindref="member">secp256k1_ec_seckey_verify</ref>(ctx,<sp/>out32))<sp/>{</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>memset(out32,<sp/>0,<sp/>32);</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="74"><highlight class="normal">}</highlight></codeline>
<codeline lineno="75"><highlight class="normal"></highlight></codeline>
<codeline lineno="76"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ec_privkey_export_der(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structsecp256k1__context__struct" kindref="compound">secp256k1_context</ref><sp/>*ctx,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*privkey,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>*privkeylen,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*key32,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>compressed)<sp/>{</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structsecp256k1__pubkey" kindref="compound">secp256k1_pubkey</ref><sp/>pubkey;</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>pubkeylen<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="secp256k1_8h_1a7438071aa8a6dc4697abe4f4659f2161" kindref="member">secp256k1_ec_pubkey_create</ref>(ctx,<sp/>&amp;pubkey,<sp/>key32))<sp/>{</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*privkeylen<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(compressed)<sp/>{</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>begin[]<sp/>=<sp/>{</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0x30,0x81,0xD3,0x02,0x01,0x01,0x04,0x20</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>middle[]<sp/>=<sp/>{</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0xA0,0x81,0x85,0x30,0x81,0x82,0x02,0x01,0x01,0x30,0x2C,0x06,0x07,0x2A,0x86,0x48,</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0xCE,0x3D,0x01,0x01,0x02,0x21,0x00,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0xFF,0xFF,0xFE,0xFF,0xFF,0xFC,0x2F,0x30,0x06,0x04,0x01,0x00,0x04,0x01,0x07,0x04,</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0x21,0x02,0x79,0xBE,0x66,0x7E,0xF9,0xDC,0xBB,0xAC,0x55,0xA0,0x62,0x95,0xCE,0x87,</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0x0B,0x07,0x02,0x9B,0xFC,0xDB,0x2D,0xCE,0x28,0xD9,0x59,0xF2,0x81,0x5B,0x16,0xF8,</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0x17,0x98,0x02,0x21,0x00,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0xFF,0xFF,0xFF,0xFF,0xFE,0xBA,0xAE,0xDC,0xE6,0xAF,0x48,0xA0,0x3B,0xBF,0xD2,0x5E,</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0x8C,0xD0,0x36,0x41,0x41,0x02,0x01,0x01,0xA1,0x24,0x03,0x22,0x00</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*ptr<sp/>=<sp/>privkey;</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>memcpy(ptr,<sp/>begin,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(begin));<sp/>ptr<sp/>+=<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(begin);</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>memcpy(ptr,<sp/>key32,<sp/>32);<sp/>ptr<sp/>+=<sp/>32;</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>memcpy(ptr,<sp/>middle,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(middle));<sp/>ptr<sp/>+=<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(middle);</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pubkeylen<sp/>=<sp/>33;</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="secp256k1_8h_1a34977bf00322e510e881160c421836d7" kindref="member">secp256k1_ec_pubkey_serialize</ref>(ctx,<sp/>ptr,<sp/>&amp;pubkeylen,<sp/>&amp;pubkey,<sp/><ref refid="secp256k1_8h_1a7b8f642c65e8b5c81fa4421b7c42ab57" kindref="member">SECP256K1_EC_COMPRESSED</ref>);</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ptr<sp/>+=<sp/>pubkeylen;</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*privkeylen<sp/>=<sp/>ptr<sp/>-<sp/>privkey;</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>begin[]<sp/>=<sp/>{</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0x30,0x82,0x01,0x13,0x02,0x01,0x01,0x04,0x20</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>middle[]<sp/>=<sp/>{</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0xA0,0x81,0xA5,0x30,0x81,0xA2,0x02,0x01,0x01,0x30,0x2C,0x06,0x07,0x2A,0x86,0x48,</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0xCE,0x3D,0x01,0x01,0x02,0x21,0x00,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0xFF,0xFF,0xFE,0xFF,0xFF,0xFC,0x2F,0x30,0x06,0x04,0x01,0x00,0x04,0x01,0x07,0x04,</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0x41,0x04,0x79,0xBE,0x66,0x7E,0xF9,0xDC,0xBB,0xAC,0x55,0xA0,0x62,0x95,0xCE,0x87,</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0x0B,0x07,0x02,0x9B,0xFC,0xDB,0x2D,0xCE,0x28,0xD9,0x59,0xF2,0x81,0x5B,0x16,0xF8,</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0x17,0x98,0x48,0x3A,0xDA,0x77,0x26,0xA3,0xC4,0x65,0x5D,0xA4,0xFB,0xFC,0x0E,0x11,</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0x08,0xA8,0xFD,0x17,0xB4,0x48,0xA6,0x85,0x54,0x19,0x9C,0x47,0xD0,0x8F,0xFB,0x10,</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0xD4,0xB8,0x02,0x21,0x00,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0xFF,0xFF,0xFF,0xFF,0xFE,0xBA,0xAE,0xDC,0xE6,0xAF,0x48,0xA0,0x3B,0xBF,0xD2,0x5E,</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0x8C,0xD0,0x36,0x41,0x41,0x02,0x01,0x01,0xA1,0x44,0x03,0x42,0x00</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*ptr<sp/>=<sp/>privkey;</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>memcpy(ptr,<sp/>begin,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(begin));<sp/>ptr<sp/>+=<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(begin);</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>memcpy(ptr,<sp/>key32,<sp/>32);<sp/>ptr<sp/>+=<sp/>32;</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>memcpy(ptr,<sp/>middle,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(middle));<sp/>ptr<sp/>+=<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(middle);</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pubkeylen<sp/>=<sp/>65;</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="secp256k1_8h_1a34977bf00322e510e881160c421836d7" kindref="member">secp256k1_ec_pubkey_serialize</ref>(ctx,<sp/>ptr,<sp/>&amp;pubkeylen,<sp/>&amp;pubkey,<sp/><ref refid="secp256k1_8h_1ab8e25dc58843e83926f95795f9e8a6e2" kindref="member">SECP256K1_EC_UNCOMPRESSED</ref>);</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ptr<sp/>+=<sp/>pubkeylen;</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*privkeylen<sp/>=<sp/>ptr<sp/>-<sp/>privkey;</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="133"><highlight class="normal">}</highlight></codeline>
<codeline lineno="134"><highlight class="normal"></highlight></codeline>
<codeline lineno="135"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>CKey::Check(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*vch)<sp/>{</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="secp256k1_8h_1a366f922fc0c787351e82ff8e3a95f652" kindref="member">secp256k1_ec_seckey_verify</ref>(secp256k1_context_sign,<sp/>vch);</highlight></codeline>
<codeline lineno="137"><highlight class="normal">}</highlight></codeline>
<codeline lineno="138"><highlight class="normal"></highlight></codeline>
<codeline lineno="139" refid="class_c_key_1a9d12ed9d297e4286250fd7ea6b59e1a5" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_c_key_1a9d12ed9d297e4286250fd7ea6b59e1a5" kindref="member">CKey::MakeNewKey</ref>(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>fCompressedIn)<sp/>{</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="util_8cpp_1a786af12a87491f8dc24351d93b9833b6" kindref="member">RandAddSeedPerfmon</ref>();</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">do</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="util_8cpp_1acf52c2aa8213c7b15e26594a2264ed8a" kindref="member">GetRandBytes</ref>(vch,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(vch));</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(!Check(vch));</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/>fValid<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/>fCompressed<sp/>=<sp/>fCompressedIn;</highlight></codeline>
<codeline lineno="146"><highlight class="normal">}</highlight></codeline>
<codeline lineno="147"><highlight class="normal"></highlight></codeline>
<codeline lineno="148" refid="class_c_key_1aa62c082c9037565fce02b457cc335e7b" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="class_c_key_1aa62c082c9037565fce02b457cc335e7b" kindref="member">CKey::SetPrivKey</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="key_8h_1a1da569b8b6e5b3fa1196cc1b877e7f54" kindref="member">CPrivKey</ref><sp/>&amp;privkey,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>fCompressedIn)<sp/>{</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!ec_privkey_import_der(secp256k1_context_sign,<sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*)<ref refid="class_c_key_1aabd29e0d5faf30032cc8519a1ce62a5a" kindref="member">begin</ref>(),<sp/>&amp;privkey[0],<sp/>privkey.size()))</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/>fCompressed<sp/>=<sp/>fCompressedIn;</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/>fValid<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="154"><highlight class="normal">}</highlight></codeline>
<codeline lineno="155"><highlight class="normal"></highlight></codeline>
<codeline lineno="156" refid="class_c_key_1ab38813e7091f658612dfb14f17c9e317" refkind="member"><highlight class="normal"><ref refid="key_8h_1a1da569b8b6e5b3fa1196cc1b877e7f54" kindref="member">CPrivKey</ref><sp/><ref refid="class_c_key_1ab38813e7091f658612dfb14f17c9e317" kindref="member">CKey::GetPrivKey</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(fValid);</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="key_8h_1a1da569b8b6e5b3fa1196cc1b877e7f54" kindref="member">CPrivKey</ref><sp/>privkey;</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ret;</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>privkeylen;</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/>privkey.resize(279);</highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/>privkeylen<sp/>=<sp/>279;</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/>ret<sp/>=<sp/>ec_privkey_export_der(secp256k1_context_sign,<sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*)&amp;privkey[0],<sp/>&amp;privkeylen,<sp/><ref refid="class_c_key_1aabd29e0d5faf30032cc8519a1ce62a5a" kindref="member">begin</ref>(),<sp/>fCompressed<sp/>?<sp/><ref refid="secp256k1_8h_1a7b8f642c65e8b5c81fa4421b7c42ab57" kindref="member">SECP256K1_EC_COMPRESSED</ref><sp/>:<sp/><ref refid="secp256k1_8h_1ab8e25dc58843e83926f95795f9e8a6e2" kindref="member">SECP256K1_EC_UNCOMPRESSED</ref>);</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(ret);</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/>privkey.resize(privkeylen);</highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>privkey;</highlight></codeline>
<codeline lineno="167"><highlight class="normal">}</highlight></codeline>
<codeline lineno="168"><highlight class="normal"></highlight></codeline>
<codeline lineno="169" refid="class_c_key_1ae4b61da6ec62f676fe6362ac5fc26aca" refkind="member"><highlight class="normal"><ref refid="class_c_pub_key" kindref="compound">CPubKey</ref><sp/><ref refid="class_c_key_1ae4b61da6ec62f676fe6362ac5fc26aca" kindref="member">CKey::GetPubKey</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(fValid);</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structsecp256k1__pubkey" kindref="compound">secp256k1_pubkey</ref><sp/>pubkey;</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>clen<sp/>=<sp/>65;</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_c_pub_key" kindref="compound">CPubKey</ref><sp/>result;</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ret<sp/>=<sp/><ref refid="secp256k1_8h_1a7438071aa8a6dc4697abe4f4659f2161" kindref="member">secp256k1_ec_pubkey_create</ref>(secp256k1_context_sign,<sp/>&amp;pubkey,<sp/><ref refid="class_c_key_1aabd29e0d5faf30032cc8519a1ce62a5a" kindref="member">begin</ref>());</highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(ret);</highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="secp256k1_8h_1a34977bf00322e510e881160c421836d7" kindref="member">secp256k1_ec_pubkey_serialize</ref>(secp256k1_context_sign,<sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*)result.<ref refid="class_c_pub_key_1add9987e0d25aff11181f5ad70413994b" kindref="member">begin</ref>(),<sp/>&amp;clen,<sp/>&amp;pubkey,<sp/>fCompressed<sp/>?<sp/><ref refid="secp256k1_8h_1a7b8f642c65e8b5c81fa4421b7c42ab57" kindref="member">SECP256K1_EC_COMPRESSED</ref><sp/>:<sp/><ref refid="secp256k1_8h_1ab8e25dc58843e83926f95795f9e8a6e2" kindref="member">SECP256K1_EC_UNCOMPRESSED</ref>);</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(result.<ref refid="class_c_pub_key_1a9d7129b65b6dee792b4f3923cd64ed59" kindref="member">size</ref>()<sp/>==<sp/>clen);</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(result.<ref refid="class_c_pub_key_1aad6f369d7972f2244466ca6db900c2a4" kindref="member">IsValid</ref>());</highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="180"><highlight class="normal">}</highlight></codeline>
<codeline lineno="181"><highlight class="normal"></highlight></codeline>
<codeline lineno="182" refid="class_c_key_1a3b161899b4fa79f5a7036d2ccf12ce3a" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="class_c_key_1a3b161899b4fa79f5a7036d2ccf12ce3a" kindref="member">CKey::Sign</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classuint256" kindref="compound">uint256</ref><sp/>&amp;<ref refid="cache_8cc_1a11ecb029164e055f28f4123ce3748862" kindref="member">hash</ref>,<sp/>std::vector&lt;unsigned<sp/>char&gt;&amp;<sp/>vchSig,<sp/><ref refid="stdint_8h_1a435d1572bf3f880d55459d9805097f62" kindref="member">uint32_t</ref><sp/>test_case)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!fValid)</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><sp/><sp/>vchSig.resize(72);</highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>nSigLen<sp/>=<sp/>72;</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>extra_entropy[32]<sp/>=<sp/>{0};</highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><sp/><sp/>WriteLE32(extra_entropy,<sp/>test_case);</highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structsecp256k1__ecdsa__signature" kindref="compound">secp256k1_ecdsa_signature</ref><sp/>sig;</highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ret<sp/>=<sp/><ref refid="secp256k1_8h_1a691c048f3a3b4e7f51417c57ec058be7" kindref="member">secp256k1_ecdsa_sign</ref>(secp256k1_context_sign,<sp/>&amp;sig,<sp/>hash.<ref refid="classbase__uint_1aaa32054bf4e8fbb31d54a75f6065174d" kindref="member">begin</ref>(),<sp/><ref refid="class_c_key_1aabd29e0d5faf30032cc8519a1ce62a5a" kindref="member">begin</ref>(),<sp/><ref refid="secp256k1_8h_1ac03ab067f194eb561175a6b522def2d8" kindref="member">secp256k1_nonce_function_rfc6979</ref>,<sp/>test_case<sp/>?<sp/>extra_entropy<sp/>:<sp/>NULL);</highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(ret);</highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="secp256k1_8h_1ac07809ca872ec967ab4d3b1a95eafe0b" kindref="member">secp256k1_ecdsa_signature_serialize_der</ref>(secp256k1_context_sign,<sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*)&amp;vchSig[0],<sp/>&amp;nSigLen,<sp/>&amp;sig);</highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/><sp/>vchSig.resize(nSigLen);</highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="195"><highlight class="normal">}</highlight></codeline>
<codeline lineno="196"><highlight class="normal"></highlight></codeline>
<codeline lineno="197" refid="class_c_key_1a3890764f7a2e5d9cdeffb3e102e4545d" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="class_c_key_1a3890764f7a2e5d9cdeffb3e102e4545d" kindref="member">CKey::VerifyPubKey</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_c_pub_key" kindref="compound">CPubKey</ref>&amp;<sp/>pubkey)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(pubkey.<ref refid="class_c_pub_key_1a397e437d9d0a008e2641892147b0931a" kindref="member">IsCompressed</ref>()<sp/>!=<sp/>fCompressed)<sp/>{</highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>rnd[8];</highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>str<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;Bitcoin<sp/>key<sp/>verification\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="util_8cpp_1acf52c2aa8213c7b15e26594a2264ed8a" kindref="member">GetRandBytes</ref>(rnd,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(rnd));</highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classuint256" kindref="compound">uint256</ref><sp/><ref refid="cache_8cc_1a11ecb029164e055f28f4123ce3748862" kindref="member">hash</ref>;</highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_c_hash256" kindref="compound">CHash256</ref>().<ref refid="class_c_hash256_1a9cc25033c6435cb28e2e8e377c949a7a" kindref="member">Write</ref>((</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*)str.data(),<sp/>str.size()).Write(rnd,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(rnd)).Finalize(hash.<ref refid="classbase__uint_1aaa32054bf4e8fbb31d54a75f6065174d" kindref="member">begin</ref>());</highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;unsigned<sp/>char&gt;<sp/>vchSig;</highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_c_key_1a3b161899b4fa79f5a7036d2ccf12ce3a" kindref="member">Sign</ref>(hash,<sp/>vchSig);</highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>pubkey.<ref refid="class_c_pub_key_1ab4047c7ce31b72591d8108a2563cd21b" kindref="member">Verify</ref>(hash,<sp/>vchSig);</highlight></codeline>
<codeline lineno="209"><highlight class="normal">}</highlight></codeline>
<codeline lineno="210"><highlight class="normal"></highlight></codeline>
<codeline lineno="211" refid="class_c_key_1a59afeabf3f63d99dfdbd3722087853a1" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="class_c_key_1a59afeabf3f63d99dfdbd3722087853a1" kindref="member">CKey::SignCompact</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classuint256" kindref="compound">uint256</ref><sp/>&amp;<ref refid="cache_8cc_1a11ecb029164e055f28f4123ce3748862" kindref="member">hash</ref>,<sp/>std::vector&lt;unsigned<sp/>char&gt;&amp;<sp/>vchSig)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!fValid)</highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/><sp/><sp/>vchSig.resize(65);</highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>rec<sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structsecp256k1__ecdsa__recoverable__signature" kindref="compound">secp256k1_ecdsa_recoverable_signature</ref><sp/>sig;</highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ret<sp/>=<sp/><ref refid="secp256k1__recovery_8h_1a1b1f4423a232f681e90e5f9d28f3d148" kindref="member">secp256k1_ecdsa_sign_recoverable</ref>(secp256k1_context_sign,<sp/>&amp;sig,<sp/>hash.<ref refid="classbase__uint_1aaa32054bf4e8fbb31d54a75f6065174d" kindref="member">begin</ref>(),<sp/><ref refid="class_c_key_1aabd29e0d5faf30032cc8519a1ce62a5a" kindref="member">begin</ref>(),<sp/><ref refid="secp256k1_8h_1ac03ab067f194eb561175a6b522def2d8" kindref="member">secp256k1_nonce_function_rfc6979</ref>,<sp/>NULL);</highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(ret);</highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="secp256k1__recovery_8h_1a12f08c89ceb61949c6a4ec6eb2511185" kindref="member">secp256k1_ecdsa_recoverable_signature_serialize_compact</ref>(secp256k1_context_sign,<sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*)&amp;vchSig[1],<sp/>&amp;rec,<sp/>&amp;sig);</highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(ret);</highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(rec<sp/>!=<sp/>-1);</highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/><sp/><sp/>vchSig[0]<sp/>=<sp/>27<sp/>+<sp/>rec<sp/>+<sp/>(fCompressed<sp/>?<sp/>4<sp/>:<sp/>0);</highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="224"><highlight class="normal">}</highlight></codeline>
<codeline lineno="225"><highlight class="normal"></highlight></codeline>
<codeline lineno="226" refid="class_c_key_1a141751588f8bfe5f1b6fc27f4e64b63f" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="class_c_key_1a141751588f8bfe5f1b6fc27f4e64b63f" kindref="member">CKey::Load</ref>(<ref refid="key_8h_1a1da569b8b6e5b3fa1196cc1b877e7f54" kindref="member">CPrivKey</ref><sp/>&amp;privkey,<sp/><ref refid="class_c_pub_key" kindref="compound">CPubKey</ref><sp/>&amp;vchPubKey,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>fSkipCheck=</highlight><highlight class="keyword">false</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!ec_privkey_import_der(secp256k1_context_sign,<sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*)<ref refid="class_c_key_1aabd29e0d5faf30032cc8519a1ce62a5a" kindref="member">begin</ref>(),<sp/>&amp;privkey[0],<sp/>privkey.size()))</highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/><sp/><sp/>fCompressed<sp/>=<sp/>vchPubKey.<ref refid="class_c_pub_key_1a397e437d9d0a008e2641892147b0931a" kindref="member">IsCompressed</ref>();</highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/><sp/><sp/>fValid<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="231"><highlight class="normal"></highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fSkipCheck)</highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="234"><highlight class="normal"></highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="class_c_key_1a3890764f7a2e5d9cdeffb3e102e4545d" kindref="member">VerifyPubKey</ref>(vchPubKey);</highlight></codeline>
<codeline lineno="236"><highlight class="normal">}</highlight></codeline>
<codeline lineno="237"><highlight class="normal"></highlight></codeline>
<codeline lineno="238" refid="class_c_key_1abb0091d4390dcece3c56ea4c1fdd6036" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="class_c_key_1abb0091d4390dcece3c56ea4c1fdd6036" kindref="member">CKey::Derive</ref>(<ref refid="class_c_key" kindref="compound">CKey</ref>&amp;<sp/>keyChild,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>ccChild[32],<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nChild,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>cc[32])</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(<ref refid="class_c_key_1a62094263b7422a45b45ac508396f19eb" kindref="member">IsValid</ref>());</highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(<ref refid="class_c_key_1abdc7d807f7a1b27ff3ad9dd5164a2273" kindref="member">IsCompressed</ref>());</highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>out[64];</highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="allocators_8h_1ab73cc3988a03bed966c0c2bb191a8d2a" kindref="member">LockObject</ref>(out);</highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((nChild<sp/>&gt;&gt;<sp/>31)<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_c_pub_key" kindref="compound">CPubKey</ref><sp/>pubkey<sp/>=<sp/><ref refid="class_c_key_1ae4b61da6ec62f676fe6362ac5fc26aca" kindref="member">GetPubKey</ref>();</highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assert(pubkey.<ref refid="class_c_pub_key_1add9987e0d25aff11181f5ad70413994b" kindref="member">begin</ref>()<sp/>+<sp/>33<sp/>==<sp/>pubkey.<ref refid="class_c_pub_key_1aa559d2a4f2cbdec84c02a4adc18fa657" kindref="member">end</ref>());</highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="hash_8cpp_1af81a4d88d7eaba27c63313aec22b01a4" kindref="member">BIP32Hash</ref>(cc,<sp/>nChild,<sp/>*pubkey.<ref refid="class_c_pub_key_1add9987e0d25aff11181f5ad70413994b" kindref="member">begin</ref>(),<sp/>pubkey.<ref refid="class_c_pub_key_1add9987e0d25aff11181f5ad70413994b" kindref="member">begin</ref>()+1,<sp/>out);</highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assert(<ref refid="class_c_key_1aabd29e0d5faf30032cc8519a1ce62a5a" kindref="member">begin</ref>()<sp/>+<sp/>32<sp/>==<sp/><ref refid="class_c_key_1a651d1e10b4085da5e4c4a764f3a384df" kindref="member">end</ref>());</highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="hash_8cpp_1af81a4d88d7eaba27c63313aec22b01a4" kindref="member">BIP32Hash</ref>(cc,<sp/>nChild,<sp/>0,<sp/><ref refid="class_c_key_1aabd29e0d5faf30032cc8519a1ce62a5a" kindref="member">begin</ref>(),<sp/>out);</highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/><sp/><sp/>memcpy(ccChild,<sp/>out+32,<sp/>32);</highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/><sp/><sp/>memcpy((</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*)keyChild.<ref refid="class_c_key_1aabd29e0d5faf30032cc8519a1ce62a5a" kindref="member">begin</ref>(),<sp/><ref refid="class_c_key_1aabd29e0d5faf30032cc8519a1ce62a5a" kindref="member">begin</ref>(),<sp/>32);</highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>ret<sp/>=<sp/><ref refid="secp256k1_8h_1a0f9125cd8c970342ec5118f7bfacc0c5" kindref="member">secp256k1_ec_privkey_tweak_add</ref>(secp256k1_context_sign,<sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*)keyChild.<ref refid="class_c_key_1aabd29e0d5faf30032cc8519a1ce62a5a" kindref="member">begin</ref>(),<sp/>out);</highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="allocators_8h_1a49577b8da0ecffd2fbc222896283004c" kindref="member">UnlockObject</ref>(out);</highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/><sp/><sp/>keyChild.fCompressed<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/><sp/><sp/>keyChild.fValid<sp/>=<sp/>ret;</highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ret;</highlight></codeline>
<codeline lineno="258"><highlight class="normal">}</highlight></codeline>
<codeline lineno="259"><highlight class="normal"></highlight></codeline>
<codeline lineno="260" refid="struct_c_ext_key_1a2fa3a39434ae09efbbd4058d1d081aa2" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="struct_c_ext_key_1a2fa3a39434ae09efbbd4058d1d081aa2" kindref="member">CExtKey::Derive</ref>(<ref refid="struct_c_ext_key" kindref="compound">CExtKey</ref><sp/>&amp;out,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nChild)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/><sp/><sp/>out.<ref refid="struct_c_ext_key_1ab197a253f41646975405b4ead8027b55" kindref="member">nDepth</ref><sp/>=<sp/><ref refid="struct_c_ext_key_1ab197a253f41646975405b4ead8027b55" kindref="member">nDepth</ref><sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_c_key_i_d" kindref="compound">CKeyID</ref><sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal"><sp/>=<sp/><ref refid="struct_c_ext_key_1a93cd93ef3311d9dbcf475282a5f80fb2" kindref="member">key</ref>.<ref refid="class_c_key_1ae4b61da6ec62f676fe6362ac5fc26aca" kindref="member">GetPubKey</ref>().<ref refid="class_c_pub_key_1a9c1908fef34fd9e1c4b5e0ffd5d3834e" kindref="member">GetID</ref>();</highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/><sp/><sp/>memcpy(&amp;out.<ref refid="struct_c_ext_key_1a22efb3f5dfb26cd8d88d2ab5db885978" kindref="member">vchFingerprint</ref>[0],<sp/>&amp;</highlight><highlight class="keywordtype">id</highlight><highlight class="normal">,<sp/>4);</highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/><sp/><sp/>out.<ref refid="struct_c_ext_key_1ad15cb7ab68b59495eec71f6586803048" kindref="member">nChild</ref><sp/>=<sp/><ref refid="struct_c_ext_key_1ad15cb7ab68b59495eec71f6586803048" kindref="member">nChild</ref>;</highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="struct_c_ext_key_1a93cd93ef3311d9dbcf475282a5f80fb2" kindref="member">key</ref>.<ref refid="class_c_key_1abb0091d4390dcece3c56ea4c1fdd6036" kindref="member">Derive</ref>(out.<ref refid="struct_c_ext_key_1a93cd93ef3311d9dbcf475282a5f80fb2" kindref="member">key</ref>,<sp/>out.<ref refid="struct_c_ext_key_1a637ce75955e2883d20172b707c26a459" kindref="member">vchChainCode</ref>,<sp/>nChild,<sp/><ref refid="struct_c_ext_key_1a637ce75955e2883d20172b707c26a459" kindref="member">vchChainCode</ref>);</highlight></codeline>
<codeline lineno="266"><highlight class="normal">}</highlight></codeline>
<codeline lineno="267"><highlight class="normal"></highlight></codeline>
<codeline lineno="268" refid="struct_c_ext_key_1a8cd6ecafdd649082601d7eebbec79688" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="struct_c_ext_key_1a8cd6ecafdd649082601d7eebbec79688" kindref="member">CExtKey::SetMaster</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*seed,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nSeedLen)<sp/>{</highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>hashkey[]<sp/>=<sp/>{</highlight><highlight class="charliteral">&apos;D&apos;</highlight><highlight class="normal">,</highlight><highlight class="charliteral">&apos;a&apos;</highlight><highlight class="normal">,</highlight><highlight class="charliteral">&apos;r&apos;</highlight><highlight class="normal">,</highlight><highlight class="charliteral">&apos;k&apos;</highlight><highlight class="normal">,</highlight><highlight class="charliteral">&apos;S&apos;</highlight><highlight class="normal">,</highlight><highlight class="charliteral">&apos;i&apos;</highlight><highlight class="normal">,</highlight><highlight class="charliteral">&apos;l&apos;</highlight><highlight class="normal">,</highlight><highlight class="charliteral">&apos;k&apos;</highlight><highlight class="normal">,</highlight><highlight class="charliteral">&apos;<sp/>&apos;</highlight><highlight class="normal">,</highlight><highlight class="charliteral">&apos;s&apos;</highlight><highlight class="normal">,</highlight><highlight class="charliteral">&apos;e&apos;</highlight><highlight class="normal">,</highlight><highlight class="charliteral">&apos;e&apos;</highlight><highlight class="normal">,</highlight><highlight class="charliteral">&apos;d&apos;</highlight><highlight class="normal">};</highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_h_m_a_c___s_h_a512___c_t_x" kindref="compound">HMAC_SHA512_CTX</ref><sp/>ctx;</highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="hash_8cpp_1a4b8c72838f26539d69f31e256fd6dc5c" kindref="member">HMAC_SHA512_Init</ref>(&amp;ctx,<sp/>hashkey,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(hashkey));</highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="hash_8cpp_1a252e477655e0e6373143178d65e7a931" kindref="member">HMAC_SHA512_Update</ref>(&amp;ctx,<sp/>seed,<sp/>nSeedLen);</highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>out[64];</highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="allocators_8h_1ab73cc3988a03bed966c0c2bb191a8d2a" kindref="member">LockObject</ref>(out);</highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="hash_8cpp_1a3e0fccfdb4599881e52d5fe8497f961f" kindref="member">HMAC_SHA512_Final</ref>(out,<sp/>&amp;ctx);</highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_c_ext_key_1a93cd93ef3311d9dbcf475282a5f80fb2" kindref="member">key</ref>.<ref refid="class_c_key_1aaa13d5f08456bba094210c5eeabf64c8" kindref="member">Set</ref>(&amp;out[0],<sp/>&amp;out[32],<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/><sp/><sp/>memcpy(<ref refid="struct_c_ext_key_1a637ce75955e2883d20172b707c26a459" kindref="member">vchChainCode</ref>,<sp/>&amp;out[32],<sp/>32);</highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="allocators_8h_1a49577b8da0ecffd2fbc222896283004c" kindref="member">UnlockObject</ref>(out);</highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_c_ext_key_1ab197a253f41646975405b4ead8027b55" kindref="member">nDepth</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_c_ext_key_1ad15cb7ab68b59495eec71f6586803048" kindref="member">nChild</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/><sp/><sp/>memset(<ref refid="struct_c_ext_key_1a22efb3f5dfb26cd8d88d2ab5db885978" kindref="member">vchFingerprint</ref>,<sp/>0,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="struct_c_ext_key_1a22efb3f5dfb26cd8d88d2ab5db885978" kindref="member">vchFingerprint</ref>));</highlight></codeline>
<codeline lineno="282"><highlight class="normal">}</highlight></codeline>
<codeline lineno="283"><highlight class="normal"></highlight></codeline>
<codeline lineno="284" refid="struct_c_ext_key_1a49f98a470d61ab1f2948b7c414ec9563" refkind="member"><highlight class="normal"><ref refid="struct_c_ext_pub_key" kindref="compound">CExtPubKey</ref><sp/><ref refid="struct_c_ext_key_1a49f98a470d61ab1f2948b7c414ec9563" kindref="member">CExtKey::Neuter</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_c_ext_pub_key" kindref="compound">CExtPubKey</ref><sp/>ret;</highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/><sp/><sp/>ret.<ref refid="struct_c_ext_pub_key_1a58a0724855654eab688cdb00738e3dba" kindref="member">nDepth</ref><sp/>=<sp/><ref refid="struct_c_ext_key_1ab197a253f41646975405b4ead8027b55" kindref="member">nDepth</ref>;</highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/><sp/><sp/>memcpy(&amp;ret.<ref refid="struct_c_ext_pub_key_1a57101a84d16d7897bcec224e488143d9" kindref="member">vchFingerprint</ref>[0],<sp/>&amp;<ref refid="struct_c_ext_key_1a22efb3f5dfb26cd8d88d2ab5db885978" kindref="member">vchFingerprint</ref>[0],<sp/>4);</highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/><sp/><sp/>ret.<ref refid="struct_c_ext_pub_key_1af816bc2798e9d9aaa94f56af4775d9bf" kindref="member">nChild</ref><sp/>=<sp/><ref refid="struct_c_ext_key_1ad15cb7ab68b59495eec71f6586803048" kindref="member">nChild</ref>;</highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/><sp/><sp/>ret.<ref refid="struct_c_ext_pub_key_1ab18c8520919d20bbfd068565ae566ea8" kindref="member">pubkey</ref><sp/>=<sp/><ref refid="struct_c_ext_key_1a93cd93ef3311d9dbcf475282a5f80fb2" kindref="member">key</ref>.<ref refid="class_c_key_1ae4b61da6ec62f676fe6362ac5fc26aca" kindref="member">GetPubKey</ref>();</highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/><sp/><sp/>memcpy(&amp;ret.<ref refid="struct_c_ext_pub_key_1a208836888dcc295ca1510de459ca1fc7" kindref="member">vchChainCode</ref>[0],<sp/>&amp;<ref refid="struct_c_ext_key_1a637ce75955e2883d20172b707c26a459" kindref="member">vchChainCode</ref>[0],<sp/>32);</highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ret;</highlight></codeline>
<codeline lineno="292"><highlight class="normal">}</highlight></codeline>
<codeline lineno="293"><highlight class="normal"></highlight></codeline>
<codeline lineno="294" refid="struct_c_ext_key_1aa60d612abaa124e00f66f81ac4a74699" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="struct_c_ext_key_1aa60d612abaa124e00f66f81ac4a74699" kindref="member">CExtKey::Encode</ref>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>code[74])</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/><sp/><sp/>code[0]<sp/>=<sp/><ref refid="struct_c_ext_key_1ab197a253f41646975405b4ead8027b55" kindref="member">nDepth</ref>;</highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/><sp/><sp/>memcpy(code+1,<sp/><ref refid="struct_c_ext_key_1a22efb3f5dfb26cd8d88d2ab5db885978" kindref="member">vchFingerprint</ref>,<sp/>4);</highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/><sp/><sp/>code[5]<sp/>=<sp/>(<ref refid="struct_c_ext_key_1ad15cb7ab68b59495eec71f6586803048" kindref="member">nChild</ref><sp/>&gt;&gt;<sp/>24)<sp/>&amp;<sp/>0xFF;<sp/>code[6]<sp/>=<sp/>(<ref refid="struct_c_ext_key_1ad15cb7ab68b59495eec71f6586803048" kindref="member">nChild</ref><sp/>&gt;&gt;<sp/>16)<sp/>&amp;<sp/>0xFF;</highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/><sp/><sp/>code[7]<sp/>=<sp/>(<ref refid="struct_c_ext_key_1ad15cb7ab68b59495eec71f6586803048" kindref="member">nChild</ref><sp/>&gt;&gt;<sp/><sp/>8)<sp/>&amp;<sp/>0xFF;<sp/>code[8]<sp/>=<sp/>(<ref refid="struct_c_ext_key_1ad15cb7ab68b59495eec71f6586803048" kindref="member">nChild</ref><sp/>&gt;&gt;<sp/><sp/>0)<sp/>&amp;<sp/>0xFF;</highlight></codeline>
<codeline lineno="299"><highlight class="normal"><sp/><sp/><sp/><sp/>memcpy(code+9,<sp/><ref refid="struct_c_ext_key_1a637ce75955e2883d20172b707c26a459" kindref="member">vchChainCode</ref>,<sp/>32);</highlight></codeline>
<codeline lineno="300"><highlight class="normal"><sp/><sp/><sp/><sp/>code[41]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="301"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(<ref refid="struct_c_ext_key_1a93cd93ef3311d9dbcf475282a5f80fb2" kindref="member">key</ref>.<ref refid="class_c_key_1a6329a38926a8af8112d06da96afbfe39" kindref="member">size</ref>()<sp/>==<sp/>32);</highlight></codeline>
<codeline lineno="302"><highlight class="normal"><sp/><sp/><sp/><sp/>memcpy(code+42,<sp/><ref refid="struct_c_ext_key_1a93cd93ef3311d9dbcf475282a5f80fb2" kindref="member">key</ref>.<ref refid="class_c_key_1aabd29e0d5faf30032cc8519a1ce62a5a" kindref="member">begin</ref>(),<sp/>32);</highlight></codeline>
<codeline lineno="303"><highlight class="normal">}</highlight></codeline>
<codeline lineno="304"><highlight class="normal"></highlight></codeline>
<codeline lineno="305" refid="struct_c_ext_key_1a9720e119745472336b6729e19f0819dd" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="struct_c_ext_key_1a9720e119745472336b6729e19f0819dd" kindref="member">CExtKey::Decode</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>code[74])<sp/>{</highlight></codeline>
<codeline lineno="306"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_c_ext_key_1ab197a253f41646975405b4ead8027b55" kindref="member">nDepth</ref><sp/>=<sp/>code[0];</highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/><sp/><sp/><sp/>memcpy(<ref refid="struct_c_ext_key_1a22efb3f5dfb26cd8d88d2ab5db885978" kindref="member">vchFingerprint</ref>,<sp/>code+1,<sp/>4);</highlight></codeline>
<codeline lineno="308"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_c_ext_key_1ad15cb7ab68b59495eec71f6586803048" kindref="member">nChild</ref><sp/>=<sp/>(code[5]<sp/>&lt;&lt;<sp/>24)<sp/>|<sp/>(code[6]<sp/>&lt;&lt;<sp/>16)<sp/>|<sp/>(code[7]<sp/>&lt;&lt;<sp/>8)<sp/>|<sp/>code[8];</highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/><sp/><sp/>memcpy(<ref refid="struct_c_ext_key_1a637ce75955e2883d20172b707c26a459" kindref="member">vchChainCode</ref>,<sp/>code+9,<sp/>32);</highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_c_ext_key_1a93cd93ef3311d9dbcf475282a5f80fb2" kindref="member">key</ref>.<ref refid="class_c_key_1aaa13d5f08456bba094210c5eeabf64c8" kindref="member">Set</ref>(code+42,<sp/>code+74,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="311"><highlight class="normal">}</highlight></codeline>
<codeline lineno="312"><highlight class="normal"></highlight></codeline>
<codeline lineno="313" refid="key_8h_1a55cc40f04bf887c1000667caccb0684a" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="key_8cpp_1adc8d142f5bcd2ca6646462fb45a7945d" kindref="member">ECC_InitSanityCheck</ref>()<sp/>{</highlight></codeline>
<codeline lineno="314"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_c_key" kindref="compound">CKey</ref><sp/>key;</highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/><sp/><sp/>key.<ref refid="class_c_key_1a9d12ed9d297e4286250fd7ea6b59e1a5" kindref="member">MakeNewKey</ref>(</highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_c_pub_key" kindref="compound">CPubKey</ref><sp/>pubkey<sp/>=<sp/>key.<ref refid="class_c_key_1ae4b61da6ec62f676fe6362ac5fc26aca" kindref="member">GetPubKey</ref>();</highlight></codeline>
<codeline lineno="317"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>key.<ref refid="class_c_key_1a3890764f7a2e5d9cdeffb3e102e4545d" kindref="member">VerifyPubKey</ref>(pubkey);</highlight></codeline>
<codeline lineno="318"><highlight class="normal">}</highlight></codeline>
<codeline lineno="319"><highlight class="normal"></highlight></codeline>
<codeline lineno="320"><highlight class="normal"></highlight></codeline>
<codeline lineno="321" refid="key_8h_1a5ee69136607b1012d64a045ee44ccae2" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="key_8cpp_1ae4d2893f2f5af1cca247516578171860" kindref="member">ECC_Start</ref>()<sp/>{</highlight></codeline>
<codeline lineno="322"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(secp256k1_context_sign<sp/>==<sp/>NULL);</highlight></codeline>
<codeline lineno="323"><highlight class="normal"></highlight></codeline>
<codeline lineno="324"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structsecp256k1__context__struct" kindref="compound">secp256k1_context</ref><sp/>*ctx<sp/>=<sp/><ref refid="secp256k1_8h_1a769d478f352afbb55200e33970533a3c" kindref="member">secp256k1_context_create</ref>(<ref refid="secp256k1_8h_1a0d34fe6baa73d3145f2e376e43de0b15" kindref="member">SECP256K1_CONTEXT_SIGN</ref>);</highlight></codeline>
<codeline lineno="325"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(ctx<sp/>!=<sp/>NULL);</highlight></codeline>
<codeline lineno="326"><highlight class="normal"></highlight></codeline>
<codeline lineno="327"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="328"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Pass<sp/>in<sp/>a<sp/>random<sp/>blinding<sp/>seed<sp/>to<sp/>the<sp/>secp256k1<sp/>context.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="329"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>seed[32];</highlight></codeline>
<codeline lineno="330"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="allocators_8h_1ab73cc3988a03bed966c0c2bb191a8d2a" kindref="member">LockObject</ref>(seed);</highlight></codeline>
<codeline lineno="331"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="util_8cpp_1acf52c2aa8213c7b15e26594a2264ed8a" kindref="member">GetRandBytes</ref>(seed,<sp/>32);</highlight></codeline>
<codeline lineno="332"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>ret<sp/>=<sp/><ref refid="secp256k1_8h_1a1b81d70feb6ed24dc902cbbd5ba569e7" kindref="member">secp256k1_context_randomize</ref>(ctx,<sp/>seed);</highlight></codeline>
<codeline lineno="333"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assert(ret);</highlight></codeline>
<codeline lineno="334"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="allocators_8h_1a49577b8da0ecffd2fbc222896283004c" kindref="member">UnlockObject</ref>(seed);</highlight></codeline>
<codeline lineno="335"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="336"><highlight class="normal"></highlight></codeline>
<codeline lineno="337"><highlight class="normal"><sp/><sp/><sp/><sp/>secp256k1_context_sign<sp/>=<sp/>ctx;</highlight></codeline>
<codeline lineno="338"><highlight class="normal">}</highlight></codeline>
<codeline lineno="339"><highlight class="normal"></highlight></codeline>
<codeline lineno="340" refid="key_8h_1a8fb68c634cf5491218253147eb4e04c8" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="key_8cpp_1af3410be5ada18a4d8e9edcd3b0d261c9" kindref="member">ECC_Stop</ref>()<sp/>{</highlight></codeline>
<codeline lineno="341"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structsecp256k1__context__struct" kindref="compound">secp256k1_context</ref><sp/>*ctx<sp/>=<sp/>secp256k1_context_sign;</highlight></codeline>
<codeline lineno="342"><highlight class="normal"><sp/><sp/><sp/><sp/>secp256k1_context_sign<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="343"><highlight class="normal"></highlight></codeline>
<codeline lineno="344"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ctx)<sp/>{</highlight></codeline>
<codeline lineno="345"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="secp256k1_8h_1af8569fb9aa73c0acf46afce4df662950" kindref="member">secp256k1_context_destroy</ref>(ctx);</highlight></codeline>
<codeline lineno="346"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="347"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="/home/dev/ds-160209/src/key.cpp"/>
  </compounddef>
</doxygen>
