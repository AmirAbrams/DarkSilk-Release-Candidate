<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.9.1">
  <compounddef id="ecdsa_8h" kind="file" language="C++">
    <compoundname>ecdsa.h</compoundname>
    <includes local="no">stddef.h</includes>
    <includes refid="scalar_8h" local="yes">scalar.h</includes>
    <includes refid="group_8h" local="yes">group.h</includes>
    <includes refid="ecmult_8h" local="yes">ecmult.h</includes>
    <includedby refid="ecdsa__impl_8h" local="yes">/home/dev/ds-160209/src/secp256k1/src/ecdsa_impl.h</includedby>
    <incdepgraph>
      <node id="51684">
        <label>scalar.h</label>
        <link refid="scalar_8h"/>
        <childnode refid="51685" relation="include">
        </childnode>
      </node>
      <node id="51685">
        <label>num.h</label>
        <link refid="num_8h"/>
      </node>
      <node id="51686">
        <label>group.h</label>
        <link refid="group_8h"/>
        <childnode refid="51685" relation="include">
        </childnode>
        <childnode refid="51687" relation="include">
        </childnode>
      </node>
      <node id="51683">
        <label>stddef.h</label>
      </node>
      <node id="51688">
        <label>ecmult.h</label>
        <link refid="ecmult_8h"/>
        <childnode refid="51685" relation="include">
        </childnode>
        <childnode refid="51686" relation="include">
        </childnode>
      </node>
      <node id="51682">
        <label>/home/dev/ds-160209/src/secp256k1/src/ecdsa.h</label>
        <link refid="ecdsa.h"/>
        <childnode refid="51683" relation="include">
        </childnode>
        <childnode refid="51684" relation="include">
        </childnode>
        <childnode refid="51686" relation="include">
        </childnode>
        <childnode refid="51688" relation="include">
        </childnode>
      </node>
      <node id="51687">
        <label>field.h</label>
        <link refid="field_8h"/>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="51693">
        <label>/home/dev/ds-160209/src/secp256k1/src/tests.c</label>
        <link refid="tests_8c"/>
      </node>
      <node id="51691">
        <label>/home/dev/ds-160209/src/secp256k1/src/secp256k1.c</label>
        <link refid="secp256k1_8c"/>
        <childnode refid="51692" relation="include">
        </childnode>
        <childnode refid="51693" relation="include">
        </childnode>
      </node>
      <node id="51689">
        <label>/home/dev/ds-160209/src/secp256k1/src/ecdsa.h</label>
        <link refid="ecdsa.h"/>
        <childnode refid="51690" relation="include">
        </childnode>
      </node>
      <node id="51692">
        <label>/home/dev/ds-160209/src/secp256k1/src/bench_internal.c</label>
        <link refid="bench__internal_8c"/>
      </node>
      <node id="51690">
        <label>/home/dev/ds-160209/src/secp256k1/src/ecdsa_impl.h</label>
        <link refid="ecdsa__impl_8h"/>
        <childnode refid="51691" relation="include">
        </childnode>
      </node>
    </invincdepgraph>
      <sectiondef kind="func">
      <memberdef kind="function" id="ecdsa_8h_1aae25c4b1cdf2ccaddc49b42d43cc82a1" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>static int secp256k1_ecdsa_sig_parse</definition>
        <argsstring>(secp256k1_scalar *r, secp256k1_scalar *s, const unsigned char *sig, size_t size)</argsstring>
        <name>secp256k1_ecdsa_sig_parse</name>
        <param>
          <type><ref refid="structsecp256k1__scalar" kindref="compound">secp256k1_scalar</ref> *</type>
          <declname>r</declname>
        </param>
        <param>
          <type><ref refid="structsecp256k1__scalar" kindref="compound">secp256k1_scalar</ref> *</type>
          <declname>s</declname>
        </param>
        <param>
          <type>const unsigned char *</type>
          <declname>sig</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>size</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/secp256k1/src/ecdsa.h" line="16" column="1"/>
      </memberdef>
      <memberdef kind="function" id="ecdsa_8h_1a313b6733f5b079162fa15332d4b2ef36" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>static int secp256k1_ecdsa_sig_serialize</definition>
        <argsstring>(unsigned char *sig, size_t *size, const secp256k1_scalar *r, const secp256k1_scalar *s)</argsstring>
        <name>secp256k1_ecdsa_sig_serialize</name>
        <param>
          <type>unsigned char *</type>
          <declname>sig</declname>
        </param>
        <param>
          <type>size_t *</type>
          <declname>size</declname>
        </param>
        <param>
          <type>const <ref refid="structsecp256k1__scalar" kindref="compound">secp256k1_scalar</ref> *</type>
          <declname>r</declname>
        </param>
        <param>
          <type>const <ref refid="structsecp256k1__scalar" kindref="compound">secp256k1_scalar</ref> *</type>
          <declname>s</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/secp256k1/src/ecdsa.h" line="17" column="1"/>
      </memberdef>
      <memberdef kind="function" id="ecdsa_8h_1a6e24b57323f9c38b266c5e28b60c92bd" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>static int secp256k1_ecdsa_sig_verify</definition>
        <argsstring>(const secp256k1_ecmult_context *ctx, const secp256k1_scalar *r, const secp256k1_scalar *s, const secp256k1_ge *pubkey, const secp256k1_scalar *message)</argsstring>
        <name>secp256k1_ecdsa_sig_verify</name>
        <param>
          <type>const <ref refid="structsecp256k1__ecmult__context" kindref="compound">secp256k1_ecmult_context</ref> *</type>
          <declname>ctx</declname>
        </param>
        <param>
          <type>const <ref refid="structsecp256k1__scalar" kindref="compound">secp256k1_scalar</ref> *</type>
          <declname>r</declname>
        </param>
        <param>
          <type>const <ref refid="structsecp256k1__scalar" kindref="compound">secp256k1_scalar</ref> *</type>
          <declname>s</declname>
        </param>
        <param>
          <type>const <ref refid="structsecp256k1__ge" kindref="compound">secp256k1_ge</ref> *</type>
          <declname>pubkey</declname>
        </param>
        <param>
          <type>const <ref refid="structsecp256k1__scalar" kindref="compound">secp256k1_scalar</ref> *</type>
          <declname>message</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/secp256k1/src/ecdsa.h" line="18" column="1"/>
      </memberdef>
      <memberdef kind="function" id="ecdsa_8h_1a5bf6905e00ae8571465a52e3165c6e6e" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>static int secp256k1_ecdsa_sig_sign</definition>
        <argsstring>(const secp256k1_ecmult_gen_context *ctx, secp256k1_scalar *r, secp256k1_scalar *s, const secp256k1_scalar *seckey, const secp256k1_scalar *message, const secp256k1_scalar *nonce, int *recid)</argsstring>
        <name>secp256k1_ecdsa_sig_sign</name>
        <param>
          <type>const <ref refid="structsecp256k1__ecmult__gen__context" kindref="compound">secp256k1_ecmult_gen_context</ref> *</type>
          <declname>ctx</declname>
        </param>
        <param>
          <type><ref refid="structsecp256k1__scalar" kindref="compound">secp256k1_scalar</ref> *</type>
          <declname>r</declname>
        </param>
        <param>
          <type><ref refid="structsecp256k1__scalar" kindref="compound">secp256k1_scalar</ref> *</type>
          <declname>s</declname>
        </param>
        <param>
          <type>const <ref refid="structsecp256k1__scalar" kindref="compound">secp256k1_scalar</ref> *</type>
          <declname>seckey</declname>
        </param>
        <param>
          <type>const <ref refid="structsecp256k1__scalar" kindref="compound">secp256k1_scalar</ref> *</type>
          <declname>message</declname>
        </param>
        <param>
          <type>const <ref refid="structsecp256k1__scalar" kindref="compound">secp256k1_scalar</ref> *</type>
          <declname>nonce</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>recid</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/secp256k1/src/ecdsa.h" line="19" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/**********************************************************************</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/>*<sp/>Copyright<sp/>(c)<sp/>2013,<sp/>2014<sp/>Pieter<sp/>Wuille<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*<sp/>Distributed<sp/>under<sp/>the<sp/>MIT<sp/>software<sp/>license,<sp/>see<sp/>the<sp/>accompanying<sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*<sp/>file<sp/>COPYING<sp/>or<sp/>http://www.opensource.org/licenses/mit-license.php.*</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/>**********************************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>_SECP256K1_ECDSA_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>_SECP256K1_ECDSA_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stddef.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="scalar_8h" kindref="compound">scalar.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="group_8h" kindref="compound">group.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="ecmult_8h" kindref="compound">ecmult.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>secp256k1_ecdsa_sig_parse(<ref refid="structsecp256k1__scalar" kindref="compound">secp256k1_scalar</ref><sp/>*r,<sp/><ref refid="structsecp256k1__scalar" kindref="compound">secp256k1_scalar</ref><sp/>*s,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*sig,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>size);</highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>secp256k1_ecdsa_sig_serialize(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*sig,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>*size,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structsecp256k1__scalar" kindref="compound">secp256k1_scalar</ref><sp/>*r,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structsecp256k1__scalar" kindref="compound">secp256k1_scalar</ref><sp/>*s);</highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>secp256k1_ecdsa_sig_verify(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structsecp256k1__ecmult__context" kindref="compound">secp256k1_ecmult_context</ref><sp/>*ctx,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structsecp256k1__scalar" kindref="compound">secp256k1_scalar</ref>*<sp/>r,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structsecp256k1__scalar" kindref="compound">secp256k1_scalar</ref>*<sp/>s,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structsecp256k1__ge" kindref="compound">secp256k1_ge</ref><sp/>*pubkey,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structsecp256k1__scalar" kindref="compound">secp256k1_scalar</ref><sp/>*message);</highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>secp256k1_ecdsa_sig_sign(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structsecp256k1__ecmult__gen__context" kindref="compound">secp256k1_ecmult_gen_context</ref><sp/>*ctx,<sp/><ref refid="structsecp256k1__scalar" kindref="compound">secp256k1_scalar</ref>*<sp/>r,<sp/><ref refid="structsecp256k1__scalar" kindref="compound">secp256k1_scalar</ref>*<sp/>s,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structsecp256k1__scalar" kindref="compound">secp256k1_scalar</ref><sp/>*seckey,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structsecp256k1__scalar" kindref="compound">secp256k1_scalar</ref><sp/>*message,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structsecp256k1__scalar" kindref="compound">secp256k1_scalar</ref><sp/>*nonce,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*recid);</highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
    </programlisting>
    <location file="/home/dev/ds-160209/src/secp256k1/src/ecdsa.h"/>
  </compounddef>
</doxygen>
