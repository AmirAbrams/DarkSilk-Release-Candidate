<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.9.1">
  <compounddef id="stealth_8cpp" kind="file" language="C++">
    <compoundname>stealth.cpp</compoundname>
    <includes refid="stealth_8h" local="yes">stealth.h</includes>
    <includes refid="base58_8h" local="yes">base58.h</includes>
    <includes local="no">openssl/rand.h</includes>
    <includes local="no">openssl/ec.h</includes>
    <includes local="no">openssl/ecdsa.h</includes>
    <includes local="no">openssl/obj_mac.h</includes>
    <incdepgraph>
      <node id="23730">
        <label>list</label>
      </node>
      <node id="23719">
        <label>boost/thread/mutex.hpp</label>
      </node>
      <node id="23729">
        <label>amount.h</label>
        <link refid="amount_8h"/>
        <childnode refid="23703" relation="include">
        </childnode>
        <childnode refid="23717" relation="include">
        </childnode>
        <childnode refid="23704" relation="include">
        </childnode>
      </node>
      <node id="23709">
        <label>limits</label>
      </node>
      <node id="23755">
        <label>crypto/sha256.h</label>
        <link refid="sha256_8h"/>
        <childnode refid="23710" relation="include">
        </childnode>
        <childnode refid="23717" relation="include">
        </childnode>
      </node>
      <node id="23756">
        <label>crypto/argon2/blake2/blake2.h</label>
        <link refid="blake2_8h"/>
        <childnode refid="23757" relation="include">
        </childnode>
        <childnode refid="23710" relation="include">
        </childnode>
        <childnode refid="23721" relation="include">
        </childnode>
      </node>
      <node id="23760">
        <label>script.h</label>
        <link refid="script_8h"/>
        <childnode refid="23704" relation="include">
        </childnode>
        <childnode refid="23705" relation="include">
        </childnode>
        <childnode refid="23710" relation="include">
        </childnode>
        <childnode refid="23761" relation="include">
        </childnode>
        <childnode refid="23762" relation="include">
        </childnode>
        <childnode refid="23750" relation="include">
        </childnode>
        <childnode refid="23747" relation="include">
        </childnode>
        <childnode refid="23699" relation="include">
        </childnode>
        <childnode refid="23698" relation="include">
        </childnode>
      </node>
      <node id="23741">
        <label>openssl/rand.h</label>
      </node>
      <node id="23749">
        <label>assert.h</label>
      </node>
      <node id="23714">
        <label>boost/tuple/tuple.hpp</label>
      </node>
      <node id="23745">
        <label>base58.h</label>
        <link refid="base58_8h"/>
        <childnode refid="23746" relation="include">
        </childnode>
        <childnode refid="23750" relation="include">
        </childnode>
        <childnode refid="23759" relation="include">
        </childnode>
        <childnode refid="23760" relation="include">
        </childnode>
        <childnode refid="23715" relation="include">
        </childnode>
        <childnode refid="23704" relation="include">
        </childnode>
        <childnode refid="23705" relation="include">
        </childnode>
      </node>
      <node id="23723">
        <label>version.h</label>
        <link refid="version_8h"/>
        <childnode refid="23724" relation="include">
        </childnode>
        <childnode refid="23704" relation="include">
        </childnode>
      </node>
      <node id="23720">
        <label>sys/mman.h</label>
      </node>
      <node id="23717">
        <label>stdlib.h</label>
      </node>
      <node id="23761">
        <label>boost/foreach.hpp</label>
      </node>
      <node id="23740">
        <label>openssl/crypto.h</label>
      </node>
      <node id="23765">
        <label>openssl/obj_mac.h</label>
      </node>
      <node id="23736">
        <label>boost/date_time/posix_time/posix_time_types.hpp</label>
      </node>
      <node id="23752">
        <label>openssl/sha.h</label>
      </node>
      <node id="23708">
        <label>cassert</label>
      </node>
      <node id="23728">
        <label>stdexcept</label>
      </node>
      <node id="23699">
        <label>util.h</label>
        <link refid="util_8h"/>
        <childnode refid="23700" relation="include">
        </childnode>
        <childnode refid="23701" relation="include">
        </childnode>
        <childnode refid="23702" relation="include">
        </childnode>
        <childnode refid="23703" relation="include">
        </childnode>
        <childnode refid="23725" relation="include">
        </childnode>
        <childnode refid="23729" relation="include">
        </childnode>
        <childnode refid="23706" relation="include">
        </childnode>
        <childnode refid="23730" relation="include">
        </childnode>
        <childnode refid="23731" relation="include">
        </childnode>
        <childnode refid="23705" relation="include">
        </childnode>
        <childnode refid="23704" relation="include">
        </childnode>
        <childnode refid="23732" relation="include">
        </childnode>
        <childnode refid="23733" relation="include">
        </childnode>
        <childnode refid="23734" relation="include">
        </childnode>
        <childnode refid="23735" relation="include">
        </childnode>
        <childnode refid="23736" relation="include">
        </childnode>
        <childnode refid="23737" relation="include">
        </childnode>
        <childnode refid="23738" relation="include">
        </childnode>
        <childnode refid="23739" relation="include">
        </childnode>
        <childnode refid="23740" relation="include">
        </childnode>
        <childnode refid="23741" relation="include">
        </childnode>
        <childnode refid="23742" relation="include">
        </childnode>
        <childnode refid="23710" relation="include">
        </childnode>
      </node>
      <node id="23735">
        <label>boost/date_time/gregorian/gregorian_types.hpp</label>
      </node>
      <node id="23704">
        <label>string</label>
      </node>
      <node id="23706">
        <label>map</label>
      </node>
      <node id="23732">
        <label>boost/thread.hpp</label>
      </node>
      <node id="23757">
        <label>stddef.h</label>
      </node>
      <node id="23762">
        <label>boost/variant.hpp</label>
      </node>
      <node id="23703">
        <label>serialize.h</label>
        <link refid="serialize_8h"/>
        <childnode refid="23704" relation="include">
        </childnode>
        <childnode refid="23705" relation="include">
        </childnode>
        <childnode refid="23706" relation="include">
        </childnode>
        <childnode refid="23707" relation="include">
        </childnode>
        <childnode refid="23708" relation="include">
        </childnode>
        <childnode refid="23709" relation="include">
        </childnode>
        <childnode refid="23710" relation="include">
        </childnode>
        <childnode refid="23711" relation="include">
        </childnode>
        <childnode refid="23712" relation="include">
        </childnode>
        <childnode refid="23713" relation="include">
        </childnode>
        <childnode refid="23714" relation="include">
        </childnode>
        <childnode refid="23715" relation="include">
        </childnode>
        <childnode refid="23723" relation="include">
        </childnode>
      </node>
      <node id="23721">
        <label>limits.h</label>
      </node>
      <node id="23702">
        <label>sys/resource.h</label>
      </node>
      <node id="23737">
        <label>openssl/bio.h</label>
      </node>
      <node id="23751">
        <label>hash.h</label>
        <link refid="hash_8h"/>
        <childnode refid="23748" relation="include">
        </childnode>
        <childnode refid="23703" relation="include">
        </childnode>
        <childnode refid="23752" relation="include">
        </childnode>
        <childnode refid="23753" relation="include">
        </childnode>
        <childnode refid="23754" relation="include">
        </childnode>
        <childnode refid="23755" relation="include">
        </childnode>
        <childnode refid="23756" relation="include">
        </childnode>
        <childnode refid="23758" relation="include">
        </childnode>
        <childnode refid="23705" relation="include">
        </childnode>
      </node>
      <node id="23698">
        <label>stealth.h</label>
        <link refid="stealth_8h"/>
        <childnode refid="23699" relation="include">
        </childnode>
        <childnode refid="23703" relation="include">
        </childnode>
        <childnode refid="23717" relation="include">
        </childnode>
        <childnode refid="23743" relation="include">
        </childnode>
        <childnode refid="23705" relation="include">
        </childnode>
        <childnode refid="23744" relation="include">
        </childnode>
      </node>
      <node id="23700">
        <label>sys/types.h</label>
      </node>
      <node id="23697">
        <label>/home/dev/ds-160209/src/stealth.cpp</label>
        <link refid="stealth.cpp"/>
        <childnode refid="23698" relation="include">
        </childnode>
        <childnode refid="23745" relation="include">
        </childnode>
        <childnode refid="23741" relation="include">
        </childnode>
        <childnode refid="23763" relation="include">
        </childnode>
        <childnode refid="23764" relation="include">
        </childnode>
        <childnode refid="23765" relation="include">
        </childnode>
      </node>
      <node id="23718">
        <label>string.h</label>
      </node>
      <node id="23724">
        <label>clientversion.h</label>
        <link refid="clientversion_8h"/>
      </node>
      <node id="23712">
        <label>cstdio</label>
      </node>
      <node id="23739">
        <label>openssl/buffer.h</label>
      </node>
      <node id="23713">
        <label>boost/type_traits/is_fundamental.hpp</label>
      </node>
      <node id="23734">
        <label>boost/filesystem/path.hpp</label>
      </node>
      <node id="23750">
        <label>pubkey.h</label>
        <link refid="pubkey_8h"/>
        <childnode refid="23751" relation="include">
        </childnode>
        <childnode refid="23703" relation="include">
        </childnode>
        <childnode refid="23748" relation="include">
        </childnode>
        <childnode refid="23728" relation="include">
        </childnode>
        <childnode refid="23705" relation="include">
        </childnode>
      </node>
      <node id="23722">
        <label>unistd.h</label>
      </node>
      <node id="23705">
        <label>vector</label>
      </node>
      <node id="23747">
        <label>bignum.h</label>
        <link refid="bignum_8h"/>
        <childnode refid="23703" relation="include">
        </childnode>
        <childnode refid="23748" relation="include">
        </childnode>
        <childnode refid="23742" relation="include">
        </childnode>
        <childnode refid="23728" relation="include">
        </childnode>
        <childnode refid="23705" relation="include">
        </childnode>
        <childnode refid="23710" relation="include">
        </childnode>
      </node>
      <node id="23753">
        <label>openssl/ripemd.h</label>
      </node>
      <node id="23733">
        <label>boost/filesystem.hpp</label>
      </node>
      <node id="23731">
        <label>utility</label>
      </node>
      <node id="23727">
        <label>sstream</label>
      </node>
      <node id="23759">
        <label>key.h</label>
        <link refid="key_8h"/>
        <childnode refid="23715" relation="include">
        </childnode>
        <childnode refid="23750" relation="include">
        </childnode>
        <childnode refid="23728" relation="include">
        </childnode>
        <childnode refid="23705" relation="include">
        </childnode>
      </node>
      <node id="23738">
        <label>openssl/evp.h</label>
      </node>
      <node id="23763">
        <label>openssl/ec.h</label>
      </node>
      <node id="23725">
        <label>tinyformat.h</label>
        <link refid="tinyformat_8h"/>
        <childnode refid="23708" relation="include">
        </childnode>
        <childnode refid="23726" relation="include">
        </childnode>
        <childnode refid="23727" relation="include">
        </childnode>
        <childnode refid="23728" relation="include">
        </childnode>
      </node>
      <node id="23710">
        <label>stdint.h</label>
        <link refid="stdint_8h"/>
      </node>
      <node id="23758">
        <label>crypto/argon2/argon2.h</label>
        <link refid="argon2_8h"/>
        <childnode refid="23710" relation="include">
        </childnode>
        <childnode refid="23757" relation="include">
        </childnode>
        <childnode refid="23721" relation="include">
        </childnode>
      </node>
      <node id="23701">
        <label>sys/time.h</label>
      </node>
      <node id="23726">
        <label>iostream</label>
      </node>
      <node id="23748">
        <label>uint256.h</label>
        <link refid="uint256_8h"/>
        <childnode refid="23749" relation="include">
        </childnode>
        <childnode refid="23711" relation="include">
        </childnode>
        <childnode refid="23728" relation="include">
        </childnode>
        <childnode refid="23710" relation="include">
        </childnode>
        <childnode refid="23704" relation="include">
        </childnode>
        <childnode refid="23705" relation="include">
        </childnode>
      </node>
      <node id="23742">
        <label>openssl/bn.h</label>
      </node>
      <node id="23715">
        <label>allocators.h</label>
        <link refid="allocators_8h"/>
        <childnode refid="23716" relation="include">
        </childnode>
        <childnode refid="23718" relation="include">
        </childnode>
        <childnode refid="23704" relation="include">
        </childnode>
        <childnode refid="23719" relation="include">
        </childnode>
        <childnode refid="23706" relation="include">
        </childnode>
        <childnode refid="23720" relation="include">
        </childnode>
        <childnode refid="23721" relation="include">
        </childnode>
        <childnode refid="23722" relation="include">
        </childnode>
      </node>
      <node id="23746">
        <label>chainparams.h</label>
        <link refid="chainparams_8h"/>
        <childnode refid="23747" relation="include">
        </childnode>
        <childnode refid="23748" relation="include">
        </childnode>
        <childnode refid="23705" relation="include">
        </childnode>
      </node>
      <node id="23707">
        <label>set</label>
      </node>
      <node id="23764">
        <label>openssl/ecdsa.h</label>
      </node>
      <node id="23754">
        <label>crypto/ripemd160.h</label>
        <link refid="ripemd160_8h"/>
        <childnode refid="23710" relation="include">
        </childnode>
        <childnode refid="23717" relation="include">
        </childnode>
      </node>
      <node id="23743">
        <label>stdio.h</label>
      </node>
      <node id="23716">
        <label>cleanse.h</label>
        <link refid="cleanse_8h"/>
        <childnode refid="23717" relation="include">
        </childnode>
      </node>
      <node id="23711">
        <label>cstring</label>
      </node>
      <node id="23744">
        <label>inttypes.h</label>
      </node>
    </incdepgraph>
      <sectiondef kind="var">
      <memberdef kind="variable" id="stealth_8cpp_1acc1bbf7ae299f533a101421f19dab8af" prot="public" static="no" mutable="no">
        <type>const <ref refid="stdint_8h_1aba7bc1797add20fe3efdf37ced1182c5" kindref="member">uint8_t</ref></type>
        <definition>const uint8_t stealth_version_byte</definition>
        <argsstring></argsstring>
        <name>stealth_version_byte</name>
        <initializer>= 0x4b</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/stealth.cpp" line="14" column="1" bodyfile="/home/dev/ds-160209/src/stealth.cpp" bodystart="14" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="stealth_8cpp_1a17ac148f09fd58afe318fe78f24dfee3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="stdint_8h_1a435d1572bf3f880d55459d9805097f62" kindref="member">uint32_t</ref></type>
        <definition>uint32_t DarkSilkChecksum</definition>
        <argsstring>(uint8_t *p, uint32_t nBytes)</argsstring>
        <name>DarkSilkChecksum</name>
        <param>
          <type><ref refid="stdint_8h_1aba7bc1797add20fe3efdf37ced1182c5" kindref="member">uint8_t</ref> *</type>
          <declname>p</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a435d1572bf3f880d55459d9805097f62" kindref="member">uint32_t</ref></type>
          <declname>nBytes</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/stealth.cpp" line="88" column="1" bodyfile="/home/dev/ds-160209/src/stealth.cpp" bodystart="88" bodyend="102"/>
      </memberdef>
      <memberdef kind="function" id="stealth_8cpp_1aa4f182dc0efd181cef81ca75ae960533" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void AppendChecksum</definition>
        <argsstring>(data_chunk &amp;data)</argsstring>
        <name>AppendChecksum</name>
        <param>
          <type><ref refid="stealth_8h_1ad92186dd18ebcc998b0efbbafed7a398" kindref="member">data_chunk</ref> &amp;</type>
          <declname>data</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/stealth.cpp" line="104" column="1" bodyfile="/home/dev/ds-160209/src/stealth.cpp" bodystart="104" bodyend="119"/>
      </memberdef>
      <memberdef kind="function" id="stealth_8cpp_1a5ff6f6775db5f747f5088c7ef8264b74" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool VerifyChecksum</definition>
        <argsstring>(const data_chunk &amp;data)</argsstring>
        <name>VerifyChecksum</name>
        <param>
          <type>const <ref refid="stealth_8h_1ad92186dd18ebcc998b0efbbafed7a398" kindref="member">data_chunk</ref> &amp;</type>
          <declname>data</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/stealth.cpp" line="121" column="1" bodyfile="/home/dev/ds-160209/src/stealth.cpp" bodystart="121" bodyend="129"/>
      </memberdef>
      <memberdef kind="function" id="stealth_8cpp_1ab09bf0ded4faa17a866c79087b0b20a8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int GenerateRandomSecret</definition>
        <argsstring>(ec_secret &amp;out)</argsstring>
        <name>GenerateRandomSecret</name>
        <param>
          <type><ref refid="structec__secret" kindref="compound">ec_secret</ref> &amp;</type>
          <declname>out</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/stealth.cpp" line="132" column="1" bodyfile="/home/dev/ds-160209/src/stealth.cpp" bodystart="132" bodyend="160"/>
      </memberdef>
      <memberdef kind="function" id="stealth_8cpp_1a002000940ba18203d651e6d83164c0e7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int SecretToPublicKey</definition>
        <argsstring>(const ec_secret &amp;secret, ec_point &amp;out)</argsstring>
        <name>SecretToPublicKey</name>
        <param>
          <type>const <ref refid="structec__secret" kindref="compound">ec_secret</ref> &amp;</type>
          <declname>secret</declname>
        </param>
        <param>
          <type><ref refid="stealth_8h_1ad3f41152eaa5a117a5e3f553c8aacec0" kindref="member">ec_point</ref> &amp;</type>
          <declname>out</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/stealth.cpp" line="162" column="1" bodyfile="/home/dev/ds-160209/src/stealth.cpp" bodystart="162" bodyend="211"/>
      </memberdef>
      <memberdef kind="function" id="stealth_8cpp_1a855232bf5220ad0159c57e75887a60db" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int StealthSecret</definition>
        <argsstring>(ec_secret &amp;secret, ec_point &amp;pubkey, const ec_point &amp;pkSpend, ec_secret &amp;sharedSOut, ec_point &amp;pkOut)</argsstring>
        <name>StealthSecret</name>
        <param>
          <type><ref refid="structec__secret" kindref="compound">ec_secret</ref> &amp;</type>
          <declname>secret</declname>
        </param>
        <param>
          <type><ref refid="stealth_8h_1ad3f41152eaa5a117a5e3f553c8aacec0" kindref="member">ec_point</ref> &amp;</type>
          <declname>pubkey</declname>
        </param>
        <param>
          <type>const <ref refid="stealth_8h_1ad3f41152eaa5a117a5e3f553c8aacec0" kindref="member">ec_point</ref> &amp;</type>
          <declname>pkSpend</declname>
        </param>
        <param>
          <type><ref refid="structec__secret" kindref="compound">ec_secret</ref> &amp;</type>
          <declname>sharedSOut</declname>
        </param>
        <param>
          <type><ref refid="stealth_8h_1ad3f41152eaa5a117a5e3f553c8aacec0" kindref="member">ec_point</ref> &amp;</type>
          <declname>pkOut</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/stealth.cpp" line="214" column="1" bodyfile="/home/dev/ds-160209/src/stealth.cpp" bodystart="214" bodyend="416"/>
      </memberdef>
      <memberdef kind="function" id="stealth_8cpp_1affc748a85c8f88db9b08acf27f371053" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int StealthSecretSpend</definition>
        <argsstring>(ec_secret &amp;scanSecret, ec_point &amp;ephemPubkey, ec_secret &amp;spendSecret, ec_secret &amp;secretOut)</argsstring>
        <name>StealthSecretSpend</name>
        <param>
          <type><ref refid="structec__secret" kindref="compound">ec_secret</ref> &amp;</type>
          <declname>scanSecret</declname>
        </param>
        <param>
          <type><ref refid="stealth_8h_1ad3f41152eaa5a117a5e3f553c8aacec0" kindref="member">ec_point</ref> &amp;</type>
          <declname>ephemPubkey</declname>
        </param>
        <param>
          <type><ref refid="structec__secret" kindref="compound">ec_secret</ref> &amp;</type>
          <declname>spendSecret</declname>
        </param>
        <param>
          <type><ref refid="structec__secret" kindref="compound">ec_secret</ref> &amp;</type>
          <declname>secretOut</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/stealth.cpp" line="419" column="1" bodyfile="/home/dev/ds-160209/src/stealth.cpp" bodystart="419" bodyend="564"/>
      </memberdef>
      <memberdef kind="function" id="stealth_8cpp_1a2ac1f28c3a2a9e8e9fd67fb6bbbd5325" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int StealthSharedToSecretSpend</definition>
        <argsstring>(ec_secret &amp;sharedS, ec_secret &amp;spendSecret, ec_secret &amp;secretOut)</argsstring>
        <name>StealthSharedToSecretSpend</name>
        <param>
          <type><ref refid="structec__secret" kindref="compound">ec_secret</ref> &amp;</type>
          <declname>sharedS</declname>
        </param>
        <param>
          <type><ref refid="structec__secret" kindref="compound">ec_secret</ref> &amp;</type>
          <declname>spendSecret</declname>
        </param>
        <param>
          <type><ref refid="structec__secret" kindref="compound">ec_secret</ref> &amp;</type>
          <declname>secretOut</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/stealth.cpp" line="567" column="1" bodyfile="/home/dev/ds-160209/src/stealth.cpp" bodystart="567" bodyend="647"/>
      </memberdef>
      <memberdef kind="function" id="stealth_8cpp_1a26c89afcb720e8b1a9c9dadaee26757b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool IsStealthAddress</definition>
        <argsstring>(const std::string &amp;encodedAddress)</argsstring>
        <name>IsStealthAddress</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>encodedAddress</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/stealth.cpp" line="649" column="1" bodyfile="/home/dev/ds-160209/src/stealth.cpp" bodystart="649" bodyend="682"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">//<sp/>Copyright<sp/>(c)<sp/>2014-2016<sp/>The<sp/>ShadowCoin<sp/>developers</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Distributed<sp/>under<sp/>the<sp/>MIT/X11<sp/>software<sp/>license,<sp/>see<sp/>the<sp/>accompanying</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="comment">//<sp/>file<sp/>license.txt<sp/>or<sp/>http://www.opensource.org/licenses/mit-license.php.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="stealth_8h" kindref="compound">stealth.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="base58_8h" kindref="compound">base58.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;openssl/rand.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;openssl/ec.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;openssl/ecdsa.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;openssl/obj_mac.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight></codeline>
<codeline lineno="14" refid="stealth_8cpp_1acc1bbf7ae299f533a101421f19dab8af" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="stdint_8h_1aba7bc1797add20fe3efdf37ced1182c5" kindref="member">uint8_t</ref><sp/><ref refid="stealth_8cpp_1acc1bbf7ae299f533a101421f19dab8af" kindref="member">stealth_version_byte</ref><sp/>=<sp/>0x4b;<sp/></highlight><highlight class="comment">//Stealth<sp/>addresses<sp/>start<sp/>with<sp/>X</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight></codeline>
<codeline lineno="17" refid="class_c_stealth_address_1aa3f4655dced125bf698c208b6e7ac4b8" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="class_c_stealth_address_1aa3f4655dced125bf698c208b6e7ac4b8" kindref="member">CStealthAddress::SetEncoded</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>encodedAddress)</highlight></codeline>
<codeline lineno="18"><highlight class="normal">{</highlight></codeline>
<codeline lineno="19"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="stealth_8h_1ad92186dd18ebcc998b0efbbafed7a398" kindref="member">data_chunk</ref><sp/>raw;</highlight></codeline>
<codeline lineno="20"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="base58_8cpp_1a0f74d1d6e7e982cad4b0e538acea4538" kindref="member">DecodeBase58</ref>(encodedAddress,<sp/>raw))</highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="util_8cpp_1a2ba7badc843121dde40a6f109d224a42" kindref="member">fDebug</ref>)</highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;CStealthAddress::SetEncoded<sp/>DecodeBase58<sp/>falied.\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="stealth_8cpp_1a5ff6f6775db5f747f5088c7ef8264b74" kindref="member">VerifyChecksum</ref>(raw))</highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="util_8cpp_1a2ba7badc843121dde40a6f109d224a42" kindref="member">fDebug</ref>)</highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;CStealthAddress::SetEncoded<sp/>verify_checksum<sp/>falied.\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(raw.size()<sp/>&lt;<sp/>1<sp/>+<sp/>1<sp/>+<sp/>33<sp/>+<sp/>1<sp/>+<sp/>33<sp/>+<sp/>1<sp/>+<sp/>1<sp/>+<sp/>4)</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="util_8cpp_1a2ba7badc843121dde40a6f109d224a42" kindref="member">fDebug</ref>)</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;CStealthAddress::SetEncoded()<sp/>too<sp/>few<sp/>bytes<sp/>provided.\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="stdint_8h_1aba7bc1797add20fe3efdf37ced1182c5" kindref="member">uint8_t</ref>*<sp/>p<sp/>=<sp/>&amp;raw[0];</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="stdint_8h_1aba7bc1797add20fe3efdf37ced1182c5" kindref="member">uint8_t</ref><sp/><ref refid="db__impl_8cc_1afc25f30ab1a6d04798c360a2ce70b87d" kindref="member">version</ref><sp/>=<sp/>*p++;</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(version<sp/>!=<sp/><ref refid="stealth_8cpp_1acc1bbf7ae299f533a101421f19dab8af" kindref="member">stealth_version_byte</ref>)</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;CStealthAddress::SetEncoded<sp/>version<sp/>mismatch<sp/>0x%x<sp/>!=<sp/>0x%x.\n&quot;</highlight><highlight class="normal">,<sp/>version,<sp/><ref refid="stealth_8cpp_1acc1bbf7ae299f533a101421f19dab8af" kindref="member">stealth_version_byte</ref>);</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_c_stealth_address_1a5dc6e5ddb43a2ecdede5278abb9495ed" kindref="member">options</ref><sp/>=<sp/>*p++;</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_c_stealth_address_1ae695d1d4c649d3f78b253de7d273b1d9" kindref="member">scan_pubkey</ref>.resize(33);</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/>memcpy(&amp;<ref refid="class_c_stealth_address_1ae695d1d4c649d3f78b253de7d273b1d9" kindref="member">scan_pubkey</ref>[0],<sp/>p,<sp/>33);</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/>p<sp/>+=<sp/>33;</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//uint8_t<sp/>spend_pubkeys<sp/>=<sp/>*p++;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/>p++;</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_c_stealth_address_1ac66ac2e04abb7ee90555c702dfa3049c" kindref="member">spend_pubkey</ref>.resize(33);</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/>memcpy(&amp;<ref refid="class_c_stealth_address_1ac66ac2e04abb7ee90555c702dfa3049c" kindref="member">spend_pubkey</ref>[0],<sp/>p,<sp/>33);</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="64"><highlight class="normal">};</highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight></codeline>
<codeline lineno="66" refid="class_c_stealth_address_1a7d331c1fb6e9479b31d35a50c4bb0f0c" refkind="member"><highlight class="normal">std::string<sp/><ref refid="class_c_stealth_address_1a7d331c1fb6e9479b31d35a50c4bb0f0c" kindref="member">CStealthAddress::Encoded</ref>()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="67"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>https://wiki.unsystem.net/index.php/DarkWallet/Stealth#Address_format</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>[version]<sp/>[options]<sp/>[scan_key]<sp/>[N]<sp/>...<sp/>[Nsigs]<sp/>[prefix_length]<sp/>...</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="stealth_8h_1ad92186dd18ebcc998b0efbbafed7a398" kindref="member">data_chunk</ref><sp/>raw;</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/>raw.push_back(<ref refid="stealth_8cpp_1acc1bbf7ae299f533a101421f19dab8af" kindref="member">stealth_version_byte</ref>);</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/>raw.push_back(<ref refid="class_c_stealth_address_1a5dc6e5ddb43a2ecdede5278abb9495ed" kindref="member">options</ref>);</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/>raw.insert(raw.end(),<sp/><ref refid="class_c_stealth_address_1ae695d1d4c649d3f78b253de7d273b1d9" kindref="member">scan_pubkey</ref>.begin(),<sp/><ref refid="class_c_stealth_address_1ae695d1d4c649d3f78b253de7d273b1d9" kindref="member">scan_pubkey</ref>.end());</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/>raw.push_back(1);<sp/></highlight><highlight class="comment">//<sp/>number<sp/>of<sp/>spend<sp/>pubkeys</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/>raw.insert(raw.end(),<sp/><ref refid="class_c_stealth_address_1ac66ac2e04abb7ee90555c702dfa3049c" kindref="member">spend_pubkey</ref>.begin(),<sp/><ref refid="class_c_stealth_address_1ac66ac2e04abb7ee90555c702dfa3049c" kindref="member">spend_pubkey</ref>.end());</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/>raw.push_back(0);<sp/></highlight><highlight class="comment">//<sp/>number<sp/>of<sp/>signatures</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/>raw.push_back(0);<sp/></highlight><highlight class="comment">//<sp/>?</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="stealth_8cpp_1aa4f182dc0efd181cef81ca75ae960533" kindref="member">AppendChecksum</ref>(raw);</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="base58_8cpp_1a8d6f0e9d5df175b4966dcede31dc90ad" kindref="member">EncodeBase58</ref>(raw);</highlight></codeline>
<codeline lineno="85"><highlight class="normal">};</highlight></codeline>
<codeline lineno="86"><highlight class="normal"></highlight></codeline>
<codeline lineno="87"><highlight class="normal"></highlight></codeline>
<codeline lineno="88" refid="stealth_8cpp_1a17ac148f09fd58afe318fe78f24dfee3" refkind="member"><highlight class="normal"><ref refid="stdint_8h_1a435d1572bf3f880d55459d9805097f62" kindref="member">uint32_t</ref><sp/><ref refid="stealth_8cpp_1a17ac148f09fd58afe318fe78f24dfee3" kindref="member">DarkSilkChecksum</ref>(<ref refid="stdint_8h_1aba7bc1797add20fe3efdf37ced1182c5" kindref="member">uint8_t</ref>*<sp/>p,<sp/><ref refid="stdint_8h_1a435d1572bf3f880d55459d9805097f62" kindref="member">uint32_t</ref><sp/>nBytes)</highlight></codeline>
<codeline lineno="89"><highlight class="normal">{</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!p<sp/>||<sp/>nBytes<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="stdint_8h_1aba7bc1797add20fe3efdf37ced1182c5" kindref="member">uint8_t</ref><sp/>hash1[32];</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/>SHA256(p,<sp/>nBytes,<sp/>(<ref refid="stdint_8h_1aba7bc1797add20fe3efdf37ced1182c5" kindref="member">uint8_t</ref>*)hash1);</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="stdint_8h_1aba7bc1797add20fe3efdf37ced1182c5" kindref="member">uint8_t</ref><sp/>hash2[32];</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/>SHA256((<ref refid="stdint_8h_1aba7bc1797add20fe3efdf37ced1182c5" kindref="member">uint8_t</ref>*)hash1,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(hash1),<sp/>(<ref refid="stdint_8h_1aba7bc1797add20fe3efdf37ced1182c5" kindref="member">uint8_t</ref>*)hash2);</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>--<sp/>checksum<sp/>is<sp/>the<sp/>1st<sp/>4<sp/>bytes<sp/>of<sp/>the<sp/>hash</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="stdint_8h_1a435d1572bf3f880d55459d9805097f62" kindref="member">uint32_t</ref><sp/>checksum<sp/>=<sp/>from_little_endian&lt;uint32_t&gt;(&amp;hash2[0]);</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>checksum;</highlight></codeline>
<codeline lineno="102"><highlight class="normal">};</highlight></codeline>
<codeline lineno="103"><highlight class="normal"></highlight></codeline>
<codeline lineno="104" refid="stealth_8h_1aa4f182dc0efd181cef81ca75ae960533" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="stealth_8cpp_1aa4f182dc0efd181cef81ca75ae960533" kindref="member">AppendChecksum</ref>(<ref refid="stealth_8h_1ad92186dd18ebcc998b0efbbafed7a398" kindref="member">data_chunk</ref>&amp;<sp/>data)</highlight></codeline>
<codeline lineno="105"><highlight class="normal">{</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="stdint_8h_1a435d1572bf3f880d55459d9805097f62" kindref="member">uint32_t</ref><sp/>checksum<sp/>=<sp/><ref refid="stealth_8cpp_1a17ac148f09fd58afe318fe78f24dfee3" kindref="member">DarkSilkChecksum</ref>(&amp;data[0],<sp/>data.size());</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>--<sp/>to_little_endian</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;uint8_t&gt;<sp/>tmp(4);</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//memcpy(&amp;tmp[0],<sp/>&amp;checksum,<sp/>4);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>4;<sp/>++i)</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tmp[i]<sp/>=<sp/>checksum<sp/>&amp;<sp/>0xFF;</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>checksum<sp/>&gt;&gt;=<sp/>8;</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/>data.insert(data.end(),<sp/>tmp.begin(),<sp/>tmp.end());</highlight></codeline>
<codeline lineno="119"><highlight class="normal">};</highlight></codeline>
<codeline lineno="120"><highlight class="normal"></highlight></codeline>
<codeline lineno="121" refid="stealth_8h_1a5ff6f6775db5f747f5088c7ef8264b74" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="stealth_8cpp_1a5ff6f6775db5f747f5088c7ef8264b74" kindref="member">VerifyChecksum</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="stealth_8h_1ad92186dd18ebcc998b0efbbafed7a398" kindref="member">data_chunk</ref>&amp;<sp/>data)</highlight></codeline>
<codeline lineno="122"><highlight class="normal">{</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(data.size()<sp/>&lt;<sp/>4)</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="stdint_8h_1a435d1572bf3f880d55459d9805097f62" kindref="member">uint32_t</ref><sp/>checksum<sp/>=<sp/>from_little_endian&lt;uint32_t&gt;(data.end()<sp/>-<sp/>4);</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="stealth_8cpp_1a17ac148f09fd58afe318fe78f24dfee3" kindref="member">DarkSilkChecksum</ref>((<ref refid="stdint_8h_1aba7bc1797add20fe3efdf37ced1182c5" kindref="member">uint8_t</ref>*)&amp;data[0],<sp/>data.size()-4)<sp/>==<sp/>checksum;</highlight></codeline>
<codeline lineno="129"><highlight class="normal">};</highlight></codeline>
<codeline lineno="130"><highlight class="normal"></highlight></codeline>
<codeline lineno="131"><highlight class="normal"></highlight></codeline>
<codeline lineno="132" refid="stealth_8h_1ab09bf0ded4faa17a866c79087b0b20a8" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="stealth_8cpp_1ab09bf0ded4faa17a866c79087b0b20a8" kindref="member">GenerateRandomSecret</ref>(<ref refid="structec__secret" kindref="compound">ec_secret</ref>&amp;<sp/>out)</highlight></codeline>
<codeline lineno="133"><highlight class="normal">{</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="util_8cpp_1a786af12a87491f8dc24351d93b9833b6" kindref="member">RandAddSeedPerfmon</ref>();</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="classuint256" kindref="compound">uint256</ref><sp/>max(</highlight><highlight class="stringliteral">&quot;FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364140&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="classuint256" kindref="compound">uint256</ref><sp/>min(16000);<sp/></highlight><highlight class="comment">//<sp/>increase?<sp/>min<sp/>valid<sp/>key<sp/>is<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classuint256" kindref="compound">uint256</ref><sp/><ref refid="db__test_8cc_1a9cc668c18debdbcad21b45fdd8158648" kindref="member">test</ref>;</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>--<sp/>check<sp/>max,<sp/>try<sp/>max<sp/>32<sp/>times</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>32;<sp/>++i)</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>RAND_bytes((</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*)<sp/>test.<ref refid="classbase__uint_1aaa32054bf4e8fbb31d54a75f6065174d" kindref="member">begin</ref>(),<sp/>32);</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(test<sp/>&gt;<sp/>min<sp/>&amp;&amp;<sp/>test<sp/>&lt;<sp/>max)</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>memcpy(&amp;out.<ref refid="structec__secret_1a67a32d917614aee8dc96e5e92c821e03" kindref="member">e</ref>[0],<sp/>test.<ref refid="classbase__uint_1aaa32054bf4e8fbb31d54a75f6065174d" kindref="member">begin</ref>(),<sp/>32);</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(i<sp/>&gt;<sp/>31)</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;Error:<sp/>GenerateRandomSecret<sp/>failed<sp/>to<sp/>generate<sp/>a<sp/>valid<sp/>key.\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="160"><highlight class="normal">};</highlight></codeline>
<codeline lineno="161"><highlight class="normal"></highlight></codeline>
<codeline lineno="162" refid="stealth_8h_1a002000940ba18203d651e6d83164c0e7" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="stealth_8cpp_1a002000940ba18203d651e6d83164c0e7" kindref="member">SecretToPublicKey</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structec__secret" kindref="compound">ec_secret</ref>&amp;<sp/>secret,<sp/><ref refid="stealth_8h_1ad3f41152eaa5a117a5e3f553c8aacec0" kindref="member">ec_point</ref>&amp;<sp/>out)</highlight></codeline>
<codeline lineno="163"><highlight class="normal">{</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>--<sp/>public<sp/>key<sp/>=<sp/>private<sp/>*<sp/>G</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>rv<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/>EC_GROUP<sp/>*ecgrp<sp/>=<sp/>EC_GROUP_new_by_curve_name(NID_secp256k1);</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!ecgrp)</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;SecretToPublicKey():<sp/>EC_GROUP_new_by_curve_name<sp/>failed.\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="174"><highlight class="normal"></highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><sp/><sp/>BIGNUM*<sp/>bnIn<sp/>=<sp/>BN_bin2bn(&amp;secret.<ref refid="structec__secret_1a67a32d917614aee8dc96e5e92c821e03" kindref="member">e</ref>[0],<sp/><ref refid="stealth_8h_1a9ebf73ce7586af72448f2d5f3dd57c78" kindref="member">ec_secret_size</ref>,<sp/>BN_new());</highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!bnIn)</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EC_GROUP_free(ecgrp);</highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;SecretToPublicKey():<sp/>BN_bin2bn<sp/>failed\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/><sp/>EC_POINT*<sp/>pub<sp/>=<sp/>EC_POINT_new(ecgrp);</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><sp/><sp/>EC_POINT_mul(ecgrp,<sp/>pub,<sp/>bnIn,<sp/>NULL,<sp/>NULL,<sp/>NULL);</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><sp/><sp/>BIGNUM*<sp/>bnOut<sp/>=<sp/>EC_POINT_point2bn(ecgrp,<sp/>pub,<sp/>POINT_CONVERSION_COMPRESSED,<sp/>BN_new(),<sp/>NULL);</highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!bnOut)</highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;SecretToPublicKey():<sp/>point2bn<sp/>failed\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rv<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>out.resize(<ref refid="stealth_8h_1a84da682045a61e4ebcebe1f7459365a6" kindref="member">ec_compressed_size</ref>);</highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(BN_num_bytes(bnOut)<sp/>!=<sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)<sp/><ref refid="stealth_8h_1a84da682045a61e4ebcebe1f7459365a6" kindref="member">ec_compressed_size</ref></highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>||<sp/>BN_bn2bin(bnOut,<sp/>&amp;out[0])<sp/>!=<sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)<sp/><ref refid="stealth_8h_1a84da682045a61e4ebcebe1f7459365a6" kindref="member">ec_compressed_size</ref>)</highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;SecretToPublicKey():<sp/>bnOut<sp/>incorrect<sp/>length.\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rv<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>BN_free(bnOut);</highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/><sp/>EC_GROUP_free(ecgrp);</highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/><sp/><sp/>BN_free(bnIn);</highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/><sp/><sp/>EC_POINT_free(pub);</highlight></codeline>
<codeline lineno="209"><highlight class="normal"></highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>rv;</highlight></codeline>
<codeline lineno="211"><highlight class="normal">};</highlight></codeline>
<codeline lineno="212"><highlight class="normal"></highlight></codeline>
<codeline lineno="213"><highlight class="normal"></highlight></codeline>
<codeline lineno="214" refid="stealth_8h_1a855232bf5220ad0159c57e75887a60db" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="stealth_8cpp_1a855232bf5220ad0159c57e75887a60db" kindref="member">StealthSecret</ref>(<ref refid="structec__secret" kindref="compound">ec_secret</ref>&amp;<sp/>secret,<sp/><ref refid="stealth_8h_1ad3f41152eaa5a117a5e3f553c8aacec0" kindref="member">ec_point</ref>&amp;<sp/>pubkey,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="stealth_8h_1ad3f41152eaa5a117a5e3f553c8aacec0" kindref="member">ec_point</ref>&amp;<sp/>pkSpend,<sp/><ref refid="structec__secret" kindref="compound">ec_secret</ref>&amp;<sp/>sharedSOut,<sp/><ref refid="stealth_8h_1ad3f41152eaa5a117a5e3f553c8aacec0" kindref="member">ec_point</ref>&amp;<sp/>pkOut)</highlight></codeline>
<codeline lineno="215"><highlight class="normal">{</highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="217"><highlight class="comment"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="218"><highlight class="comment"><sp/><sp/><sp/><sp/>send:</highlight></codeline>
<codeline lineno="219"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>secret<sp/>=<sp/>ephem_secret,<sp/>pubkey<sp/>=<sp/>scan_pubkey</highlight></codeline>
<codeline lineno="220"><highlight class="comment"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="221"><highlight class="comment"><sp/><sp/><sp/><sp/>receive:</highlight></codeline>
<codeline lineno="222"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>secret<sp/>=<sp/>scan_secret,<sp/>pubkey<sp/>=<sp/>ephem_pubkey</highlight></codeline>
<codeline lineno="223"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>c<sp/>=<sp/>H(dP)</highlight></codeline>
<codeline lineno="224"><highlight class="comment"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="225"><highlight class="comment"><sp/><sp/><sp/><sp/>Q<sp/>=<sp/>public<sp/>scan<sp/>key<sp/>(EC<sp/>point,<sp/>33<sp/>bytes)</highlight></codeline>
<codeline lineno="226"><highlight class="comment"><sp/><sp/><sp/><sp/>d<sp/>=<sp/>private<sp/>scan<sp/>key<sp/>(integer,<sp/>32<sp/>bytes)</highlight></codeline>
<codeline lineno="227"><highlight class="comment"><sp/><sp/><sp/><sp/>R<sp/>=<sp/>public<sp/>spend<sp/>key</highlight></codeline>
<codeline lineno="228"><highlight class="comment"><sp/><sp/><sp/><sp/>f<sp/>=<sp/>private<sp/>spend<sp/>key</highlight></codeline>
<codeline lineno="229"><highlight class="comment"></highlight></codeline>
<codeline lineno="230"><highlight class="comment"><sp/><sp/><sp/><sp/>Q<sp/>=<sp/>dG</highlight></codeline>
<codeline lineno="231"><highlight class="comment"><sp/><sp/><sp/><sp/>R<sp/>=<sp/>fG</highlight></codeline>
<codeline lineno="232"><highlight class="comment"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="233"><highlight class="comment"><sp/><sp/><sp/><sp/>Sender<sp/>(has<sp/>Q<sp/>and<sp/>R,<sp/>not<sp/>d<sp/>or<sp/>f):</highlight></codeline>
<codeline lineno="234"><highlight class="comment"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="235"><highlight class="comment"><sp/><sp/><sp/><sp/>P<sp/>=<sp/>eG</highlight></codeline>
<codeline lineno="236"><highlight class="comment"></highlight></codeline>
<codeline lineno="237"><highlight class="comment"><sp/><sp/><sp/><sp/>c<sp/>=<sp/>H(eQ)<sp/>=<sp/>H(dP)</highlight></codeline>
<codeline lineno="238"><highlight class="comment"><sp/><sp/><sp/><sp/>R&apos;<sp/>=<sp/>R<sp/>+<sp/>cG</highlight></codeline>
<codeline lineno="239"><highlight class="comment"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="240"><highlight class="comment"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="241"><highlight class="comment"><sp/><sp/><sp/><sp/>Recipient<sp/>gets<sp/>R&apos;<sp/>and<sp/>P</highlight></codeline>
<codeline lineno="242"><highlight class="comment"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="243"><highlight class="comment"><sp/><sp/><sp/><sp/>test<sp/>0<sp/>and<sp/>infinity?</highlight></codeline>
<codeline lineno="244"><highlight class="comment"><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>rv<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;uint8_t&gt;<sp/>vchOutQ;</highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/><sp/><sp/>BN_CTX*<sp/>bnCtx<sp/><sp/><sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/><sp/><sp/>BIGNUM*<sp/>bnEphem<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/><sp/><sp/>BIGNUM*<sp/>bnQ<sp/><sp/><sp/><sp/><sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/><sp/><sp/>EC_POINT*<sp/>Q<sp/><sp/><sp/><sp/><sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/><sp/><sp/>BIGNUM*<sp/>bnOutQ<sp/><sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/><sp/><sp/>BIGNUM*<sp/>bnc<sp/><sp/><sp/><sp/><sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/><sp/><sp/>EC_POINT*<sp/>C<sp/><sp/><sp/><sp/><sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/><sp/><sp/>BIGNUM*<sp/>bnR<sp/><sp/><sp/><sp/><sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/><sp/><sp/>EC_POINT*<sp/><ref refid="scrypt_8cpp_1a8011d6dab73e8808981c948e35610884" kindref="member">R</ref><sp/><sp/><sp/><sp/><sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/><sp/><sp/>EC_POINT*<sp/>Rout<sp/><sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/><sp/><sp/>BIGNUM*<sp/>bnOutR<sp/><sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/><sp/><sp/>EC_GROUP*<sp/>ecgrp<sp/>=<sp/>EC_GROUP_new_by_curve_name(NID_secp256k1);</highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!ecgrp)</highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;StealthSecret():<sp/>EC_GROUP_new_by_curve_name<sp/>failed.\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!(bnCtx<sp/>=<sp/>BN_CTX_new()))</highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;StealthSecret():<sp/>BN_CTX_new<sp/>failed.\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rv<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>End;</highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!(bnEphem<sp/>=<sp/>BN_bin2bn(&amp;secret.<ref refid="structec__secret_1a67a32d917614aee8dc96e5e92c821e03" kindref="member">e</ref>[0],<sp/><ref refid="stealth_8h_1a9ebf73ce7586af72448f2d5f3dd57c78" kindref="member">ec_secret_size</ref>,<sp/>BN_new())))</highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;StealthSecret():<sp/>bnEphem<sp/>BN_bin2bn<sp/>failed.\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rv<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>End;</highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!(bnQ<sp/>=<sp/>BN_bin2bn(&amp;pubkey[0],<sp/>pubkey.size(),<sp/>BN_new())))</highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;StealthSecret():<sp/>bnQ<sp/>BN_bin2bn<sp/>failed\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rv<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>End;</highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!(Q<sp/>=<sp/>EC_POINT_bn2point(ecgrp,<sp/>bnQ,<sp/>NULL,<sp/>bnCtx)))</highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;StealthSecret():<sp/>Q<sp/>EC_POINT_bn2point<sp/>failed\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rv<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>End;</highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>--<sp/>eQ</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>EC_POINT_mul(const<sp/>EC_GROUP<sp/>*group,<sp/>EC_POINT<sp/>*r,<sp/>const<sp/>BIGNUM<sp/>*n,<sp/>const<sp/>EC_POINT<sp/>*q,<sp/>const<sp/>BIGNUM<sp/>*m,<sp/>BN_CTX<sp/>*ctx);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="299"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>EC_POINT_mul<sp/>calculates<sp/>the<sp/>value<sp/>generator<sp/>*<sp/>n<sp/>+<sp/>q<sp/>*<sp/>m<sp/>and<sp/>stores<sp/>the<sp/>result<sp/>in<sp/>r.<sp/>The<sp/>value<sp/>n<sp/>may<sp/>be<sp/>NULL<sp/>in<sp/>which<sp/>case<sp/>the<sp/>result<sp/>is<sp/>just<sp/>q<sp/>*<sp/>m.<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="300"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!EC_POINT_mul(ecgrp,<sp/>Q,<sp/>NULL,<sp/>Q,<sp/>bnEphem,<sp/>bnCtx))</highlight></codeline>
<codeline lineno="301"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="302"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;StealthSecret():<sp/>eQ<sp/>EC_POINT_mul<sp/>failed\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="303"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rv<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>End;</highlight></codeline>
<codeline lineno="305"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="306"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!(bnOutQ<sp/>=<sp/>EC_POINT_point2bn(ecgrp,<sp/>Q,<sp/>POINT_CONVERSION_COMPRESSED,<sp/>BN_new(),<sp/>bnCtx)))</highlight></codeline>
<codeline lineno="308"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;StealthSecret():<sp/>Q<sp/>EC_POINT_bn2point<sp/>failed\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rv<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>End;</highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="314"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/><sp/><sp/>vchOutQ.resize(<ref refid="stealth_8h_1a84da682045a61e4ebcebe1f7459365a6" kindref="member">ec_compressed_size</ref>);</highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(BN_num_bytes(bnOutQ)<sp/>!=<sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)<sp/><ref refid="stealth_8h_1a84da682045a61e4ebcebe1f7459365a6" kindref="member">ec_compressed_size</ref></highlight></codeline>
<codeline lineno="317"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>||<sp/>BN_bn2bin(bnOutQ,<sp/>&amp;vchOutQ[0])<sp/>!=<sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)<sp/><ref refid="stealth_8h_1a84da682045a61e4ebcebe1f7459365a6" kindref="member">ec_compressed_size</ref>)</highlight></codeline>
<codeline lineno="318"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;StealthSecret():<sp/>bnOutQ<sp/>incorrect<sp/>length.\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="320"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rv<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="321"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>End;</highlight></codeline>
<codeline lineno="322"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="324"><highlight class="normal"><sp/><sp/><sp/><sp/>SHA256(&amp;vchOutQ[0],<sp/>vchOutQ.size(),<sp/>&amp;sharedSOut.<ref refid="structec__secret_1a67a32d917614aee8dc96e5e92c821e03" kindref="member">e</ref>[0]);</highlight></codeline>
<codeline lineno="325"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="326"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!(bnc<sp/>=<sp/>BN_bin2bn(&amp;sharedSOut.<ref refid="structec__secret_1a67a32d917614aee8dc96e5e92c821e03" kindref="member">e</ref>[0],<sp/><ref refid="stealth_8h_1a9ebf73ce7586af72448f2d5f3dd57c78" kindref="member">ec_secret_size</ref>,<sp/>BN_new())))</highlight></codeline>
<codeline lineno="327"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="328"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;StealthSecret():<sp/>BN_bin2bn<sp/>failed\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="329"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rv<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="330"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>End;</highlight></codeline>
<codeline lineno="331"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="332"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="333"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>--<sp/>cG</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="334"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!(C<sp/>=<sp/>EC_POINT_new(ecgrp)))</highlight></codeline>
<codeline lineno="335"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="336"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;StealthSecret():<sp/>C<sp/>EC_POINT_new<sp/>failed\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="337"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rv<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="338"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>End;</highlight></codeline>
<codeline lineno="339"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="340"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="341"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!EC_POINT_mul(ecgrp,<sp/>C,<sp/>bnc,<sp/>NULL,<sp/>NULL,<sp/>bnCtx))</highlight></codeline>
<codeline lineno="342"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="343"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;StealthSecret():<sp/>C<sp/>EC_POINT_mul<sp/>failed\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="344"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rv<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="345"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>End;</highlight></codeline>
<codeline lineno="346"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="347"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="348"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!(bnR<sp/>=<sp/>BN_bin2bn(&amp;pkSpend[0],<sp/>pkSpend.size(),<sp/>BN_new())))</highlight></codeline>
<codeline lineno="349"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="350"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;StealthSecret():<sp/>bnR<sp/>BN_bin2bn<sp/>failed\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="351"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rv<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="352"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>End;</highlight></codeline>
<codeline lineno="353"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="354"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="355"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="356"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!(R<sp/>=<sp/>EC_POINT_bn2point(ecgrp,<sp/>bnR,<sp/>NULL,<sp/>bnCtx)))</highlight></codeline>
<codeline lineno="357"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="358"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;StealthSecret():<sp/>R<sp/>EC_POINT_bn2point<sp/>failed\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="359"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rv<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="360"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>End;</highlight></codeline>
<codeline lineno="361"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="362"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="363"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!EC_POINT_mul(ecgrp,<sp/>C,<sp/>bnc,<sp/>NULL,<sp/>NULL,<sp/>bnCtx))</highlight></codeline>
<codeline lineno="364"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="365"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;StealthSecret():<sp/>C<sp/>EC_POINT_mul<sp/>failed\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="366"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rv<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="367"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>End;</highlight></codeline>
<codeline lineno="368"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="369"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="370"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!(Rout<sp/>=<sp/>EC_POINT_new(ecgrp)))</highlight></codeline>
<codeline lineno="371"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="372"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;StealthSecret():<sp/>Rout<sp/>EC_POINT_new<sp/>failed\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="373"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rv<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="374"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>End;</highlight></codeline>
<codeline lineno="375"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="376"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="377"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!EC_POINT_add(ecgrp,<sp/>Rout,<sp/>R,<sp/>C,<sp/>bnCtx))</highlight></codeline>
<codeline lineno="378"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="379"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;StealthSecret():<sp/>Rout<sp/>EC_POINT_add<sp/>failed\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="380"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rv<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="381"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>End;</highlight></codeline>
<codeline lineno="382"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="383"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="384"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!(bnOutR<sp/>=<sp/>EC_POINT_point2bn(ecgrp,<sp/>Rout,<sp/>POINT_CONVERSION_COMPRESSED,<sp/>BN_new(),<sp/>bnCtx)))</highlight></codeline>
<codeline lineno="385"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="386"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;StealthSecret():<sp/>Rout<sp/>EC_POINT_bn2point<sp/>failed\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="387"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rv<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="388"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>End;</highlight></codeline>
<codeline lineno="389"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="390"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="391"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="392"><highlight class="normal"><sp/><sp/><sp/><sp/>pkOut.resize(ec_compressed_size);</highlight></codeline>
<codeline lineno="393"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(BN_num_bytes(bnOutR)<sp/>!=<sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)<sp/>ec_compressed_size</highlight></codeline>
<codeline lineno="394"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>||<sp/>BN_bn2bin(bnOutR,<sp/>&amp;pkOut[0])<sp/>!=<sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)<sp/>ec_compressed_size)</highlight></codeline>
<codeline lineno="395"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="396"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;StealthSecret():<sp/>pkOut<sp/>incorrect<sp/>length.\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="397"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rv<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="398"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>End;</highlight></codeline>
<codeline lineno="399"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="400"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="401"><highlight class="normal"><sp/><sp/><sp/><sp/>End:</highlight></codeline>
<codeline lineno="402"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(bnOutR)<sp/><sp/><sp/><sp/><sp/>BN_free(bnOutR);</highlight></codeline>
<codeline lineno="403"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Rout)<sp/><sp/><sp/><sp/><sp/><sp/><sp/>EC_POINT_free(Rout);</highlight></codeline>
<codeline lineno="404"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(R)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EC_POINT_free(R);</highlight></codeline>
<codeline lineno="405"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(bnR)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>BN_free(bnR);</highlight></codeline>
<codeline lineno="406"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(C)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EC_POINT_free(C);</highlight></codeline>
<codeline lineno="407"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(bnc)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>BN_free(bnc);</highlight></codeline>
<codeline lineno="408"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(bnOutQ)<sp/><sp/><sp/><sp/><sp/>BN_free(bnOutQ);</highlight></codeline>
<codeline lineno="409"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Q)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EC_POINT_free(Q);</highlight></codeline>
<codeline lineno="410"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(bnQ)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>BN_free(bnQ);</highlight></codeline>
<codeline lineno="411"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(bnEphem)<sp/><sp/><sp/><sp/>BN_free(bnEphem);</highlight></codeline>
<codeline lineno="412"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(bnCtx)<sp/><sp/><sp/><sp/><sp/><sp/>BN_CTX_free(bnCtx);</highlight></codeline>
<codeline lineno="413"><highlight class="normal"><sp/><sp/><sp/><sp/>EC_GROUP_free(ecgrp);</highlight></codeline>
<codeline lineno="414"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="415"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>rv;</highlight></codeline>
<codeline lineno="416"><highlight class="normal">};</highlight></codeline>
<codeline lineno="417"><highlight class="normal"></highlight></codeline>
<codeline lineno="418"><highlight class="normal"></highlight></codeline>
<codeline lineno="419" refid="stealth_8h_1affc748a85c8f88db9b08acf27f371053" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="stealth_8cpp_1affc748a85c8f88db9b08acf27f371053" kindref="member">StealthSecretSpend</ref>(<ref refid="structec__secret" kindref="compound">ec_secret</ref>&amp;<sp/>scanSecret,<sp/><ref refid="stealth_8h_1ad3f41152eaa5a117a5e3f553c8aacec0" kindref="member">ec_point</ref>&amp;<sp/>ephemPubkey,<sp/><ref refid="structec__secret" kindref="compound">ec_secret</ref>&amp;<sp/>spendSecret,<sp/><ref refid="structec__secret" kindref="compound">ec_secret</ref>&amp;<sp/>secretOut)</highlight></codeline>
<codeline lineno="420"><highlight class="normal">{</highlight></codeline>
<codeline lineno="421"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="422"><highlight class="comment"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="423"><highlight class="comment"><sp/><sp/><sp/><sp/>c<sp/><sp/>=<sp/>H(dP)</highlight></codeline>
<codeline lineno="424"><highlight class="comment"><sp/><sp/><sp/><sp/>R&apos;<sp/>=<sp/>R<sp/>+<sp/>cG<sp/><sp/><sp/><sp/><sp/>[without<sp/>decrypting<sp/>wallet]</highlight></codeline>
<codeline lineno="425"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>(f<sp/>+<sp/>c)G<sp/><sp/><sp/>[after<sp/>decryption<sp/>of<sp/>wallet]</highlight></codeline>
<codeline lineno="426"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Remember:<sp/>mod<sp/>curve.order,<sp/>pad<sp/>with<sp/>0x00s<sp/>where<sp/>necessary?</highlight></codeline>
<codeline lineno="427"><highlight class="comment"><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="428"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="429"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>rv<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="430"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;uint8_t&gt;<sp/>vchOutP;</highlight></codeline>
<codeline lineno="431"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="432"><highlight class="normal"><sp/><sp/><sp/><sp/>BN_CTX*<sp/>bnCtx<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="433"><highlight class="normal"><sp/><sp/><sp/><sp/>BIGNUM*<sp/>bnScanSecret<sp/><sp/><sp/><sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="434"><highlight class="normal"><sp/><sp/><sp/><sp/>BIGNUM*<sp/>bnP<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="435"><highlight class="normal"><sp/><sp/><sp/><sp/>EC_POINT*<sp/>P<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="436"><highlight class="normal"><sp/><sp/><sp/><sp/>BIGNUM*<sp/>bnOutP<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="437"><highlight class="normal"><sp/><sp/><sp/><sp/>BIGNUM*<sp/>bnc<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="438"><highlight class="normal"><sp/><sp/><sp/><sp/>BIGNUM*<sp/>bnOrder<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="439"><highlight class="normal"><sp/><sp/><sp/><sp/>BIGNUM*<sp/>bnSpend<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="440"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="441"><highlight class="normal"><sp/><sp/><sp/><sp/>EC_GROUP*<sp/>ecgrp<sp/>=<sp/>EC_GROUP_new_by_curve_name(NID_secp256k1);</highlight></codeline>
<codeline lineno="442"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="443"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!ecgrp)</highlight></codeline>
<codeline lineno="444"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="445"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;StealthSecretSpend():<sp/>EC_GROUP_new_by_curve_name<sp/>failed.\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="446"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="447"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="448"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="449"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!(bnCtx<sp/>=<sp/>BN_CTX_new()))</highlight></codeline>
<codeline lineno="450"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="451"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;StealthSecretSpend():<sp/>BN_CTX_new<sp/>failed.\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="452"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rv<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="453"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>End;</highlight></codeline>
<codeline lineno="454"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="455"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="456"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!(bnScanSecret<sp/>=<sp/>BN_bin2bn(&amp;scanSecret.<ref refid="structec__secret_1a67a32d917614aee8dc96e5e92c821e03" kindref="member">e</ref>[0],<sp/><ref refid="stealth_8h_1a9ebf73ce7586af72448f2d5f3dd57c78" kindref="member">ec_secret_size</ref>,<sp/>BN_new())))</highlight></codeline>
<codeline lineno="457"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="458"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;StealthSecretSpend():<sp/>bnScanSecret<sp/>BN_bin2bn<sp/>failed.\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="459"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rv<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="460"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>End;</highlight></codeline>
<codeline lineno="461"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="462"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="463"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!(bnP<sp/>=<sp/>BN_bin2bn(&amp;ephemPubkey[0],<sp/>ephemPubkey.size(),<sp/>BN_new())))</highlight></codeline>
<codeline lineno="464"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="465"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;StealthSecretSpend():<sp/>bnP<sp/>BN_bin2bn<sp/>failed\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="466"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rv<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="467"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>End;</highlight></codeline>
<codeline lineno="468"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="469"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="470"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!(P<sp/>=<sp/>EC_POINT_bn2point(ecgrp,<sp/>bnP,<sp/>NULL,<sp/>bnCtx)))</highlight></codeline>
<codeline lineno="471"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="472"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;StealthSecretSpend():<sp/>P<sp/>EC_POINT_bn2point<sp/>failed\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="473"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rv<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="474"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>End;</highlight></codeline>
<codeline lineno="475"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="476"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="477"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>--<sp/>dP</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="478"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!EC_POINT_mul(ecgrp,<sp/>P,<sp/>NULL,<sp/>P,<sp/>bnScanSecret,<sp/>bnCtx))</highlight></codeline>
<codeline lineno="479"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="480"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;StealthSecretSpend():<sp/>dP<sp/>EC_POINT_mul<sp/>failed\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="481"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rv<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="482"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>End;</highlight></codeline>
<codeline lineno="483"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="484"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="485"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!(bnOutP<sp/>=<sp/>EC_POINT_point2bn(ecgrp,<sp/>P,<sp/>POINT_CONVERSION_COMPRESSED,<sp/>BN_new(),<sp/>bnCtx)))</highlight></codeline>
<codeline lineno="486"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="487"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;StealthSecretSpend():<sp/>P<sp/>EC_POINT_bn2point<sp/>failed\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="488"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rv<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="489"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>End;</highlight></codeline>
<codeline lineno="490"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="491"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="492"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="493"><highlight class="normal"><sp/><sp/><sp/><sp/>vchOutP.resize(<ref refid="stealth_8h_1a84da682045a61e4ebcebe1f7459365a6" kindref="member">ec_compressed_size</ref>);</highlight></codeline>
<codeline lineno="494"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(BN_num_bytes(bnOutP)<sp/>!=<sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)<sp/><ref refid="stealth_8h_1a84da682045a61e4ebcebe1f7459365a6" kindref="member">ec_compressed_size</ref></highlight></codeline>
<codeline lineno="495"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>||<sp/>BN_bn2bin(bnOutP,<sp/>&amp;vchOutP[0])<sp/>!=<sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)<sp/><ref refid="stealth_8h_1a84da682045a61e4ebcebe1f7459365a6" kindref="member">ec_compressed_size</ref>)</highlight></codeline>
<codeline lineno="496"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="497"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;StealthSecretSpend():<sp/>bnOutP<sp/>incorrect<sp/>length.\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="498"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rv<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="499"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>End;</highlight></codeline>
<codeline lineno="500"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="501"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="502"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="stdint_8h_1aba7bc1797add20fe3efdf37ced1182c5" kindref="member">uint8_t</ref><sp/>hash1[32];</highlight></codeline>
<codeline lineno="503"><highlight class="normal"><sp/><sp/><sp/><sp/>SHA256(&amp;vchOutP[0],<sp/>vchOutP.size(),<sp/>(<ref refid="stdint_8h_1aba7bc1797add20fe3efdf37ced1182c5" kindref="member">uint8_t</ref>*)hash1);</highlight></codeline>
<codeline lineno="504"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="505"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="506"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!(bnc<sp/>=<sp/>BN_bin2bn(&amp;hash1[0],<sp/>32,<sp/>BN_new())))</highlight></codeline>
<codeline lineno="507"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="508"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;StealthSecretSpend():<sp/>BN_bin2bn<sp/>failed\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="509"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rv<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="510"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>End;</highlight></codeline>
<codeline lineno="511"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="512"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="513"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!(bnOrder<sp/>=<sp/>BN_new())</highlight></codeline>
<codeline lineno="514"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>||<sp/>!EC_GROUP_get_order(ecgrp,<sp/>bnOrder,<sp/>bnCtx))</highlight></codeline>
<codeline lineno="515"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="516"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;StealthSecretSpend():<sp/>EC_GROUP_get_order<sp/>failed\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="517"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rv<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="518"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>End;</highlight></codeline>
<codeline lineno="519"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="520"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="521"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!(bnSpend<sp/>=<sp/>BN_bin2bn(&amp;spendSecret.<ref refid="structec__secret_1a67a32d917614aee8dc96e5e92c821e03" kindref="member">e</ref>[0],<sp/><ref refid="stealth_8h_1a9ebf73ce7586af72448f2d5f3dd57c78" kindref="member">ec_secret_size</ref>,<sp/>BN_new())))</highlight></codeline>
<codeline lineno="522"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="523"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;StealthSecretSpend():<sp/>bnSpend<sp/>BN_bin2bn<sp/>failed.\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="524"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rv<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="525"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>End;</highlight></codeline>
<codeline lineno="526"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="527"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="528"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//if<sp/>(!BN_add(r,<sp/>a,<sp/>b))<sp/>return<sp/>0;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="529"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//return<sp/>BN_nnmod(r,<sp/>r,<sp/>m,<sp/>ctx);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="530"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!BN_mod_add(bnSpend,<sp/>bnSpend,<sp/>bnc,<sp/>bnOrder,<sp/>bnCtx))</highlight></codeline>
<codeline lineno="531"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="532"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;StealthSecretSpend():<sp/>bnSpend<sp/>BN_mod_add<sp/>failed.\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="533"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rv<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="534"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>End;</highlight></codeline>
<codeline lineno="535"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="536"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="537"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(BN_is_zero(bnSpend))<sp/></highlight><highlight class="comment">//<sp/>possible?</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="538"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="539"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;StealthSecretSpend():<sp/>bnSpend<sp/>is<sp/>zero.\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="540"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rv<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="541"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>End;</highlight></codeline>
<codeline lineno="542"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="543"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="544"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(BN_num_bytes(bnSpend)<sp/>!=<sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)<sp/><ref refid="stealth_8h_1a9ebf73ce7586af72448f2d5f3dd57c78" kindref="member">ec_secret_size</ref></highlight></codeline>
<codeline lineno="545"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>||<sp/>BN_bn2bin(bnSpend,<sp/>&amp;secretOut.<ref refid="structec__secret_1a67a32d917614aee8dc96e5e92c821e03" kindref="member">e</ref>[0])<sp/>!=<sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)<sp/><ref refid="stealth_8h_1a9ebf73ce7586af72448f2d5f3dd57c78" kindref="member">ec_secret_size</ref>)</highlight></codeline>
<codeline lineno="546"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="547"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;StealthSecretSpend():<sp/>bnSpend<sp/>incorrect<sp/>length.\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="548"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rv<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="549"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>End;</highlight></codeline>
<codeline lineno="550"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="551"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="552"><highlight class="normal"><sp/><sp/><sp/><sp/>End:</highlight></codeline>
<codeline lineno="553"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(bnSpend)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>BN_free(bnSpend);</highlight></codeline>
<codeline lineno="554"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(bnOrder)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>BN_free(bnOrder);</highlight></codeline>
<codeline lineno="555"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(bnc)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>BN_free(bnc);</highlight></codeline>
<codeline lineno="556"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(bnOutP)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>BN_free(bnOutP);</highlight></codeline>
<codeline lineno="557"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(P)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EC_POINT_free(P);</highlight></codeline>
<codeline lineno="558"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(bnP)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>BN_free(bnP);</highlight></codeline>
<codeline lineno="559"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(bnScanSecret)<sp/><sp/><sp/>BN_free(bnScanSecret);</highlight></codeline>
<codeline lineno="560"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(bnCtx)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>BN_CTX_free(bnCtx);</highlight></codeline>
<codeline lineno="561"><highlight class="normal"><sp/><sp/><sp/><sp/>EC_GROUP_free(ecgrp);</highlight></codeline>
<codeline lineno="562"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="563"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>rv;</highlight></codeline>
<codeline lineno="564"><highlight class="normal">};</highlight></codeline>
<codeline lineno="565"><highlight class="normal"></highlight></codeline>
<codeline lineno="566"><highlight class="normal"></highlight></codeline>
<codeline lineno="567" refid="stealth_8h_1a2ac1f28c3a2a9e8e9fd67fb6bbbd5325" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="stealth_8cpp_1a2ac1f28c3a2a9e8e9fd67fb6bbbd5325" kindref="member">StealthSharedToSecretSpend</ref>(<ref refid="structec__secret" kindref="compound">ec_secret</ref>&amp;<sp/>sharedS,<sp/><ref refid="structec__secret" kindref="compound">ec_secret</ref>&amp;<sp/>spendSecret,<sp/><ref refid="structec__secret" kindref="compound">ec_secret</ref>&amp;<sp/>secretOut)</highlight></codeline>
<codeline lineno="568"><highlight class="normal">{</highlight></codeline>
<codeline lineno="569"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="570"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>rv<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="571"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;uint8_t&gt;<sp/>vchOutP;</highlight></codeline>
<codeline lineno="572"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="573"><highlight class="normal"><sp/><sp/><sp/><sp/>BN_CTX*<sp/>bnCtx<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="574"><highlight class="normal"><sp/><sp/><sp/><sp/>BIGNUM*<sp/>bnc<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="575"><highlight class="normal"><sp/><sp/><sp/><sp/>BIGNUM*<sp/>bnOrder<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="576"><highlight class="normal"><sp/><sp/><sp/><sp/>BIGNUM*<sp/>bnSpend<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="577"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="578"><highlight class="normal"><sp/><sp/><sp/><sp/>EC_GROUP*<sp/>ecgrp<sp/>=<sp/>EC_GROUP_new_by_curve_name(NID_secp256k1);</highlight></codeline>
<codeline lineno="579"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="580"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!ecgrp)</highlight></codeline>
<codeline lineno="581"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="582"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;StealthSecretSpend():<sp/>EC_GROUP_new_by_curve_name<sp/>failed.\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="583"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="584"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="585"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="586"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!(bnCtx<sp/>=<sp/>BN_CTX_new()))</highlight></codeline>
<codeline lineno="587"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="588"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;StealthSecretSpend():<sp/>BN_CTX_new<sp/>failed.\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="589"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rv<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="590"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>End;</highlight></codeline>
<codeline lineno="591"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="592"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="593"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!(bnc<sp/>=<sp/>BN_bin2bn(&amp;sharedS.<ref refid="structec__secret_1a67a32d917614aee8dc96e5e92c821e03" kindref="member">e</ref>[0],<sp/><ref refid="stealth_8h_1a9ebf73ce7586af72448f2d5f3dd57c78" kindref="member">ec_secret_size</ref>,<sp/>BN_new())))</highlight></codeline>
<codeline lineno="594"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="595"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;StealthSecretSpend():<sp/>BN_bin2bn<sp/>failed\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="596"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rv<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="597"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>End;</highlight></codeline>
<codeline lineno="598"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="599"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="600"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!(bnOrder<sp/>=<sp/>BN_new())</highlight></codeline>
<codeline lineno="601"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>||<sp/>!EC_GROUP_get_order(ecgrp,<sp/>bnOrder,<sp/>bnCtx))</highlight></codeline>
<codeline lineno="602"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="603"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;StealthSecretSpend():<sp/>EC_GROUP_get_order<sp/>failed\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="604"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rv<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="605"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>End;</highlight></codeline>
<codeline lineno="606"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="607"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="608"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!(bnSpend<sp/>=<sp/>BN_bin2bn(&amp;spendSecret.<ref refid="structec__secret_1a67a32d917614aee8dc96e5e92c821e03" kindref="member">e</ref>[0],<sp/><ref refid="stealth_8h_1a9ebf73ce7586af72448f2d5f3dd57c78" kindref="member">ec_secret_size</ref>,<sp/>BN_new())))</highlight></codeline>
<codeline lineno="609"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="610"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;StealthSecretSpend():<sp/>bnSpend<sp/>BN_bin2bn<sp/>failed.\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="611"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rv<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="612"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>End;</highlight></codeline>
<codeline lineno="613"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="614"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="615"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//if<sp/>(!BN_add(r,<sp/>a,<sp/>b))<sp/>return<sp/>0;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="616"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//return<sp/>BN_nnmod(r,<sp/>r,<sp/>m,<sp/>ctx);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="617"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!BN_mod_add(bnSpend,<sp/>bnSpend,<sp/>bnc,<sp/>bnOrder,<sp/>bnCtx))</highlight></codeline>
<codeline lineno="618"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="619"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;StealthSecretSpend():<sp/>bnSpend<sp/>BN_mod_add<sp/>failed.\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="620"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rv<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="621"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>End;</highlight></codeline>
<codeline lineno="622"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="623"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="624"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(BN_is_zero(bnSpend))<sp/></highlight><highlight class="comment">//<sp/>possible?</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="625"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="626"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;StealthSecretSpend():<sp/>bnSpend<sp/>is<sp/>zero.\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="627"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rv<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="628"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>End;</highlight></codeline>
<codeline lineno="629"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="630"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="631"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(BN_num_bytes(bnSpend)<sp/>!=<sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)<sp/><ref refid="stealth_8h_1a9ebf73ce7586af72448f2d5f3dd57c78" kindref="member">ec_secret_size</ref></highlight></codeline>
<codeline lineno="632"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>||<sp/>BN_bn2bin(bnSpend,<sp/>&amp;secretOut.<ref refid="structec__secret_1a67a32d917614aee8dc96e5e92c821e03" kindref="member">e</ref>[0])<sp/>!=<sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)<sp/><ref refid="stealth_8h_1a9ebf73ce7586af72448f2d5f3dd57c78" kindref="member">ec_secret_size</ref>)</highlight></codeline>
<codeline lineno="633"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="634"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;StealthSecretSpend():<sp/>bnSpend<sp/>incorrect<sp/>length.\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="635"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rv<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="636"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>End;</highlight></codeline>
<codeline lineno="637"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="638"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="639"><highlight class="normal"><sp/><sp/><sp/><sp/>End:</highlight></codeline>
<codeline lineno="640"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(bnSpend)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>BN_free(bnSpend);</highlight></codeline>
<codeline lineno="641"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(bnOrder)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>BN_free(bnOrder);</highlight></codeline>
<codeline lineno="642"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(bnc)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>BN_free(bnc);</highlight></codeline>
<codeline lineno="643"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(bnCtx)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>BN_CTX_free(bnCtx);</highlight></codeline>
<codeline lineno="644"><highlight class="normal"><sp/><sp/><sp/><sp/>EC_GROUP_free(ecgrp);</highlight></codeline>
<codeline lineno="645"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="646"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>rv;</highlight></codeline>
<codeline lineno="647"><highlight class="normal">};</highlight></codeline>
<codeline lineno="648"><highlight class="normal"></highlight></codeline>
<codeline lineno="649" refid="stealth_8h_1a26c89afcb720e8b1a9c9dadaee26757b" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="stealth_8cpp_1a26c89afcb720e8b1a9c9dadaee26757b" kindref="member">IsStealthAddress</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>encodedAddress)</highlight></codeline>
<codeline lineno="650"><highlight class="normal">{</highlight></codeline>
<codeline lineno="651"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="stealth_8h_1ad92186dd18ebcc998b0efbbafed7a398" kindref="member">data_chunk</ref><sp/>raw;</highlight></codeline>
<codeline lineno="652"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="653"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="base58_8cpp_1a0f74d1d6e7e982cad4b0e538acea4538" kindref="member">DecodeBase58</ref>(encodedAddress,<sp/>raw))</highlight></codeline>
<codeline lineno="654"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="655"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//printf(&quot;IsStealthAddress<sp/>DecodeBase58<sp/>falied.\n&quot;);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="656"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="657"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="658"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="659"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="stealth_8cpp_1a5ff6f6775db5f747f5088c7ef8264b74" kindref="member">VerifyChecksum</ref>(raw))</highlight></codeline>
<codeline lineno="660"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="661"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//printf(&quot;IsStealthAddress<sp/>verify_checksum<sp/>falied.\n&quot;);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="662"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="663"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="664"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="665"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(raw.size()<sp/>&lt;<sp/>1<sp/>+<sp/>1<sp/>+<sp/>33<sp/>+<sp/>1<sp/>+<sp/>33<sp/>+<sp/>1<sp/>+<sp/>1<sp/>+<sp/>4)</highlight></codeline>
<codeline lineno="666"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="667"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//printf(&quot;IsStealthAddress<sp/>too<sp/>few<sp/>bytes<sp/>provided.\n&quot;);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="668"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="669"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="670"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="671"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="672"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="stdint_8h_1aba7bc1797add20fe3efdf37ced1182c5" kindref="member">uint8_t</ref>*<sp/>p<sp/>=<sp/>&amp;raw[0];</highlight></codeline>
<codeline lineno="673"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="stdint_8h_1aba7bc1797add20fe3efdf37ced1182c5" kindref="member">uint8_t</ref><sp/><ref refid="db__impl_8cc_1afc25f30ab1a6d04798c360a2ce70b87d" kindref="member">version</ref><sp/>=<sp/>*p++;</highlight></codeline>
<codeline lineno="674"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="675"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(version<sp/>!=<sp/><ref refid="stealth_8cpp_1acc1bbf7ae299f533a101421f19dab8af" kindref="member">stealth_version_byte</ref>)</highlight></codeline>
<codeline lineno="676"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="677"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//printf(&quot;IsStealthAddress<sp/>version<sp/>mismatch<sp/>0x%x<sp/>!=<sp/>0x%x.\n&quot;,<sp/>version,<sp/>stealth_version_byte);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="678"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="679"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="680"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="681"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="682"><highlight class="normal">};</highlight></codeline>
    </programlisting>
    <location file="/home/dev/ds-160209/src/stealth.cpp"/>
  </compounddef>
</doxygen>
