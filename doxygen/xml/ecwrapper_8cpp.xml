<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.9.1">
  <compounddef id="ecwrapper_8cpp" kind="file" language="C++">
    <compoundname>ecwrapper.cpp</compoundname>
    <includes refid="ecwrapper_8h" local="yes">ecwrapper.h</includes>
    <includes refid="serialize_8h" local="yes">serialize.h</includes>
    <includes refid="uint256_8h" local="yes">uint256.h</includes>
    <includes local="no">openssl/bn.h</includes>
    <includes local="no">openssl/ecdsa.h</includes>
    <includes local="no">openssl/obj_mac.h</includes>
    <incdepgraph>
      <node id="4888">
        <label>boost/thread/mutex.hpp</label>
      </node>
      <node id="4878">
        <label>limits</label>
      </node>
      <node id="4895">
        <label>assert.h</label>
      </node>
      <node id="4883">
        <label>boost/tuple/tuple.hpp</label>
      </node>
      <node id="4892">
        <label>version.h</label>
        <link refid="version_8h"/>
        <childnode refid="4893" relation="include">
        </childnode>
        <childnode refid="4874" relation="include">
        </childnode>
      </node>
      <node id="4889">
        <label>sys/mman.h</label>
      </node>
      <node id="4886">
        <label>stdlib.h</label>
      </node>
      <node id="4899">
        <label>openssl/obj_mac.h</label>
      </node>
      <node id="4877">
        <label>cassert</label>
      </node>
      <node id="4896">
        <label>stdexcept</label>
      </node>
      <node id="4874">
        <label>string</label>
      </node>
      <node id="4875">
        <label>map</label>
      </node>
      <node id="4868">
        <label>/home/dev/ds-160209/src/ecwrapper.cpp</label>
        <link refid="ecwrapper.cpp"/>
        <childnode refid="4869" relation="include">
        </childnode>
        <childnode refid="4873" relation="include">
        </childnode>
        <childnode refid="4894" relation="include">
        </childnode>
        <childnode refid="4897" relation="include">
        </childnode>
        <childnode refid="4898" relation="include">
        </childnode>
        <childnode refid="4899" relation="include">
        </childnode>
      </node>
      <node id="4873">
        <label>serialize.h</label>
        <link refid="serialize_8h"/>
        <childnode refid="4874" relation="include">
        </childnode>
        <childnode refid="4871" relation="include">
        </childnode>
        <childnode refid="4875" relation="include">
        </childnode>
        <childnode refid="4876" relation="include">
        </childnode>
        <childnode refid="4877" relation="include">
        </childnode>
        <childnode refid="4878" relation="include">
        </childnode>
        <childnode refid="4879" relation="include">
        </childnode>
        <childnode refid="4880" relation="include">
        </childnode>
        <childnode refid="4881" relation="include">
        </childnode>
        <childnode refid="4882" relation="include">
        </childnode>
        <childnode refid="4883" relation="include">
        </childnode>
        <childnode refid="4884" relation="include">
        </childnode>
        <childnode refid="4892" relation="include">
        </childnode>
      </node>
      <node id="4890">
        <label>limits.h</label>
      </node>
      <node id="4887">
        <label>string.h</label>
      </node>
      <node id="4893">
        <label>clientversion.h</label>
        <link refid="clientversion_8h"/>
      </node>
      <node id="4881">
        <label>cstdio</label>
      </node>
      <node id="4882">
        <label>boost/type_traits/is_fundamental.hpp</label>
      </node>
      <node id="4891">
        <label>unistd.h</label>
      </node>
      <node id="4871">
        <label>vector</label>
      </node>
      <node id="4872">
        <label>openssl/ec.h</label>
      </node>
      <node id="4879">
        <label>stdint.h</label>
        <link refid="stdint_8h"/>
      </node>
      <node id="4869">
        <label>ecwrapper.h</label>
        <link refid="ecwrapper_8h"/>
        <childnode refid="4870" relation="include">
        </childnode>
        <childnode refid="4871" relation="include">
        </childnode>
        <childnode refid="4872" relation="include">
        </childnode>
      </node>
      <node id="4870">
        <label>cstddef</label>
      </node>
      <node id="4894">
        <label>uint256.h</label>
        <link refid="uint256_8h"/>
        <childnode refid="4895" relation="include">
        </childnode>
        <childnode refid="4880" relation="include">
        </childnode>
        <childnode refid="4896" relation="include">
        </childnode>
        <childnode refid="4879" relation="include">
        </childnode>
        <childnode refid="4874" relation="include">
        </childnode>
        <childnode refid="4871" relation="include">
        </childnode>
      </node>
      <node id="4897">
        <label>openssl/bn.h</label>
      </node>
      <node id="4884">
        <label>allocators.h</label>
        <link refid="allocators_8h"/>
        <childnode refid="4885" relation="include">
        </childnode>
        <childnode refid="4887" relation="include">
        </childnode>
        <childnode refid="4874" relation="include">
        </childnode>
        <childnode refid="4888" relation="include">
        </childnode>
        <childnode refid="4875" relation="include">
        </childnode>
        <childnode refid="4889" relation="include">
        </childnode>
        <childnode refid="4890" relation="include">
        </childnode>
        <childnode refid="4891" relation="include">
        </childnode>
      </node>
      <node id="4876">
        <label>set</label>
      </node>
      <node id="4898">
        <label>openssl/ecdsa.h</label>
      </node>
      <node id="4885">
        <label>cleanse.h</label>
        <link refid="cleanse_8h"/>
        <childnode refid="4886" relation="include">
        </childnode>
      </node>
      <node id="4880">
        <label>cstring</label>
      </node>
    </incdepgraph>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">//<sp/>Copyright<sp/>(c)<sp/>2009-2016<sp/>The<sp/>Bitcoin<sp/>Developers</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Distributed<sp/>under<sp/>the<sp/>MIT/X11<sp/>software<sp/>license,<sp/>see<sp/>the<sp/>accompanying</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="comment">//<sp/>file<sp/>COPYING<sp/>or<sp/>http://www.opensource.org/licenses/mit-license.php.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="ecwrapper_8h" kindref="compound">ecwrapper.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="serialize_8h" kindref="compound">serialize.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="uint256_8h" kindref="compound">uint256.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;openssl/bn.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;openssl/ecdsa.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;openssl/obj_mac.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="comment">//<sp/>anon<sp/>namespace</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Generate<sp/>a<sp/>private<sp/>key<sp/>from<sp/>just<sp/>the<sp/>secret<sp/>parameter</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>EC_KEY_regenerate_key(EC_KEY<sp/>*eckey,<sp/>BIGNUM<sp/>*priv_key)</highlight></codeline>
<codeline lineno="18"><highlight class="normal">{</highlight></codeline>
<codeline lineno="19"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ok<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="20"><highlight class="normal"><sp/><sp/><sp/><sp/>BN_CTX<sp/>*ctx<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/><sp/><sp/><sp/>EC_POINT<sp/>*pub_key<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!eckey)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>EC_GROUP<sp/>*group<sp/>=<sp/>EC_KEY_get0_group(eckey);</highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((ctx<sp/>=<sp/>BN_CTX_new())<sp/>==<sp/>NULL)</highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>err;</highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/><sp/>pub_key<sp/>=<sp/>EC_POINT_new(group);</highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(pub_key<sp/>==<sp/>NULL)</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>err;</highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!EC_POINT_mul(group,<sp/>pub_key,<sp/>priv_key,<sp/>NULL,<sp/>NULL,<sp/>ctx))</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>err;</highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/>EC_KEY_set_private_key(eckey,priv_key);</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/>EC_KEY_set_public_key(eckey,pub_key);</highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/>ok<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal">err:</highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(pub_key)</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EC_POINT_free(pub_key);</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ctx<sp/>!=<sp/>NULL)</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>BN_CTX_free(ctx);</highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(ok);</highlight></codeline>
<codeline lineno="51"><highlight class="normal">}</highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Perform<sp/>ECDSA<sp/>key<sp/>recovery<sp/>(see<sp/>SEC1<sp/>4.1.6)<sp/>for<sp/>curves<sp/>over<sp/>(mod<sp/>p)-fields</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight><highlight class="comment">//<sp/>recid<sp/>selects<sp/>which<sp/>key<sp/>is<sp/>recovered</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight><highlight class="comment">//<sp/>if<sp/>check<sp/>is<sp/>non-zero,<sp/>additional<sp/>checks<sp/>are<sp/>performed</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ECDSA_SIG_recover_key_GFp(EC_KEY<sp/>*eckey,<sp/>ECDSA_SIG<sp/>*ecsig,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*msg,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>msglen,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>recid,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>check)</highlight></codeline>
<codeline lineno="57"><highlight class="normal">{</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!eckey)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ret<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/>BN_CTX<sp/>*ctx<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/>BIGNUM<sp/>*x<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/>BIGNUM<sp/>*e<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/>BIGNUM<sp/>*order<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/>BIGNUM<sp/>*sor<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/>BIGNUM<sp/>*eor<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/>BIGNUM<sp/>*field<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/>EC_POINT<sp/>*<ref refid="scrypt_8cpp_1a8011d6dab73e8808981c948e35610884" kindref="member">R</ref><sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/>EC_POINT<sp/>*O<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/>EC_POINT<sp/>*Q<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/>BIGNUM<sp/>*rr<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/>BIGNUM<sp/>*zero<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>recid<sp/>/<sp/>2;</highlight></codeline>
<codeline lineno="76"><highlight class="normal"></highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>EC_GROUP<sp/>*group<sp/>=<sp/>EC_KEY_get0_group(eckey);</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((ctx<sp/>=<sp/>BN_CTX_new())<sp/>==<sp/>NULL)<sp/>{<sp/>ret<sp/>=<sp/>-1;<sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>err;<sp/>}</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/>BN_CTX_start(ctx);</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/>order<sp/>=<sp/>BN_CTX_get(ctx);</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!EC_GROUP_get_order(group,<sp/>order,<sp/>ctx))<sp/>{<sp/>ret<sp/>=<sp/>-2;<sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>err;<sp/>}</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/>x<sp/>=<sp/>BN_CTX_get(ctx);</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!BN_copy(x,<sp/>order))<sp/>{<sp/>ret=-1;<sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>err;<sp/>}</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!BN_mul_word(x,<sp/>i))<sp/>{<sp/>ret=-1;<sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>err;<sp/>}</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!BN_add(x,<sp/>x,<sp/>ecsig-&gt;r))<sp/>{<sp/>ret=-1;<sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>err;<sp/>}</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/>field<sp/>=<sp/>BN_CTX_get(ctx);</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!EC_GROUP_get_curve_GFp(group,<sp/>field,<sp/>NULL,<sp/>NULL,<sp/>ctx))<sp/>{<sp/>ret=-2;<sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>err;<sp/>}</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(BN_cmp(x,<sp/>field)<sp/>&gt;=<sp/>0)<sp/>{<sp/>ret=0;<sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>err;<sp/>}</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((R<sp/>=<sp/>EC_POINT_new(group))<sp/>==<sp/>NULL)<sp/>{<sp/>ret<sp/>=<sp/>-2;<sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>err;<sp/>}</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!EC_POINT_set_compressed_coordinates_GFp(group,<sp/>R,<sp/>x,<sp/>recid<sp/>%<sp/>2,<sp/>ctx))<sp/>{<sp/>ret=0;<sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>err;<sp/>}</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(check)</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((O<sp/>=<sp/>EC_POINT_new(group))<sp/>==<sp/>NULL)<sp/>{<sp/>ret<sp/>=<sp/>-2;<sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>err;<sp/>}</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!EC_POINT_mul(group,<sp/>O,<sp/>NULL,<sp/>R,<sp/>order,<sp/>ctx))<sp/>{<sp/>ret=-2;<sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>err;<sp/>}</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!EC_POINT_is_at_infinity(group,<sp/>O))<sp/>{<sp/>ret<sp/>=<sp/>0;<sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>err;<sp/>}</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((Q<sp/>=<sp/>EC_POINT_new(group))<sp/>==<sp/>NULL)<sp/>{<sp/>ret<sp/>=<sp/>-2;<sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>err;<sp/>}</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/>n<sp/>=<sp/>EC_GROUP_get_degree(group);</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/>e<sp/>=<sp/>BN_CTX_get(ctx);</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!BN_bin2bn(msg,<sp/>msglen,<sp/>e))<sp/>{<sp/>ret=-1;<sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>err;<sp/>}</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(8*msglen<sp/>&gt;<sp/>n)<sp/>BN_rshift(e,<sp/>e,<sp/>8-(n<sp/>&amp;<sp/>7));</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/>zero<sp/>=<sp/>BN_CTX_get(ctx);</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!BN_zero(zero))<sp/>{<sp/>ret=-1;<sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>err;<sp/>}</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!BN_mod_sub(e,<sp/>zero,<sp/>e,<sp/>order,<sp/>ctx))<sp/>{<sp/>ret=-1;<sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>err;<sp/>}</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/>rr<sp/>=<sp/>BN_CTX_get(ctx);</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!BN_mod_inverse(rr,<sp/>ecsig-&gt;r,<sp/>order,<sp/>ctx))<sp/>{<sp/>ret=-1;<sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>err;<sp/>}</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/>sor<sp/>=<sp/>BN_CTX_get(ctx);</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!BN_mod_mul(sor,<sp/>ecsig-&gt;s,<sp/>rr,<sp/>order,<sp/>ctx))<sp/>{<sp/>ret=-1;<sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>err;<sp/>}</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/>eor<sp/>=<sp/>BN_CTX_get(ctx);</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!BN_mod_mul(eor,<sp/>e,<sp/>rr,<sp/>order,<sp/>ctx))<sp/>{<sp/>ret=-1;<sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>err;<sp/>}</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!EC_POINT_mul(group,<sp/>Q,<sp/>eor,<sp/>R,<sp/>sor,<sp/>ctx))<sp/>{<sp/>ret=-2;<sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>err;<sp/>}</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!EC_KEY_set_public_key(eckey,<sp/>Q))<sp/>{<sp/>ret=-2;<sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>err;<sp/>}</highlight></codeline>
<codeline lineno="113"><highlight class="normal"></highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/>ret<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="115"><highlight class="normal"></highlight></codeline>
<codeline lineno="116"><highlight class="normal">err:</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ctx)<sp/>{</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>BN_CTX_end(ctx);</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>BN_CTX_free(ctx);</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(R<sp/>!=<sp/>NULL)<sp/>EC_POINT_free(R);</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(O<sp/>!=<sp/>NULL)<sp/>EC_POINT_free(O);</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Q<sp/>!=<sp/>NULL)<sp/>EC_POINT_free(Q);</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ret;</highlight></codeline>
<codeline lineno="125"><highlight class="normal">}</highlight></codeline>
<codeline lineno="126"><highlight class="normal"></highlight></codeline>
<codeline lineno="127"><highlight class="normal">};<sp/></highlight><highlight class="comment">//<sp/>end<sp/>of<sp/>anon<sp/>namespace</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="128"><highlight class="normal"></highlight></codeline>
<codeline lineno="129" refid="class_c_e_c_key_1a5ee51ce7e5435b8d337913540947e58a" refkind="member"><highlight class="normal"><ref refid="class_c_e_c_key_1a5ee51ce7e5435b8d337913540947e58a" kindref="member">CECKey::CECKey</ref>()<sp/>{</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/>pkey<sp/>=<sp/>EC_KEY_new_by_curve_name(NID_secp256k1);</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(pkey<sp/>!=<sp/>NULL);</highlight></codeline>
<codeline lineno="132"><highlight class="normal">}</highlight></codeline>
<codeline lineno="133"><highlight class="normal"></highlight></codeline>
<codeline lineno="134" refid="class_c_e_c_key_1abc742c7fb8362b693745eeb76324dbde" refkind="member"><highlight class="normal"><ref refid="class_c_e_c_key_1abc742c7fb8362b693745eeb76324dbde" kindref="member">CECKey::~CECKey</ref>()<sp/>{</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/>EC_KEY_free(pkey);</highlight></codeline>
<codeline lineno="136"><highlight class="normal">}</highlight></codeline>
<codeline lineno="137"><highlight class="normal"></highlight></codeline>
<codeline lineno="138" refid="class_c_e_c_key_1adff4951e1273996177ba4361b71c666b" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_c_e_c_key_1adff4951e1273996177ba4361b71c666b" kindref="member">CECKey::GetSecretBytes</ref>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>vch[32])</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>BIGNUM<sp/>*bn<sp/>=<sp/>EC_KEY_get0_private_key(pkey);</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(bn);</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nBytes<sp/>=<sp/>BN_num_bytes(bn);</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n=BN_bn2bin(bn,&amp;vch[32<sp/>-<sp/>nBytes]);</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(n<sp/>==<sp/>nBytes);</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/>memset(vch,<sp/>0,<sp/>32<sp/>-<sp/>nBytes);</highlight></codeline>
<codeline lineno="145"><highlight class="normal">}</highlight></codeline>
<codeline lineno="146"><highlight class="normal"></highlight></codeline>
<codeline lineno="147" refid="class_c_e_c_key_1a4f5a374f5aaa622749b7772392c2ef30" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_c_e_c_key_1a4f5a374f5aaa622749b7772392c2ef30" kindref="member">CECKey::SetSecretBytes</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>vch[32])<sp/>{</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>ret;</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/>BIGNUM<sp/>bn;</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/>BN_init(&amp;bn);</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/>ret<sp/>=<sp/>BN_bin2bn(vch,<sp/>32,<sp/>&amp;bn)<sp/>!=<sp/>NULL;</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(ret);</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/>ret<sp/>=<sp/>EC_KEY_regenerate_key(pkey,<sp/>&amp;bn)<sp/>!=<sp/>0;</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(ret);</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/>BN_clear_free(&amp;bn);</highlight></codeline>
<codeline lineno="156"><highlight class="normal">}</highlight></codeline>
<codeline lineno="157"><highlight class="normal"></highlight></codeline>
<codeline lineno="158" refid="class_c_e_c_key_1ab2f0dea297ce8546ebb5bb0478c1e7a0" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="class_c_e_c_key_1ab2f0dea297ce8546ebb5bb0478c1e7a0" kindref="member">CECKey::GetPrivKeySize</ref>(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>fCompressed)<sp/>{</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/>EC_KEY_set_conv_form(pkey,<sp/>fCompressed<sp/>?<sp/>POINT_CONVERSION_COMPRESSED<sp/>:<sp/>POINT_CONVERSION_UNCOMPRESSED);</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>i2d_ECPrivateKey(pkey,<sp/>NULL);</highlight></codeline>
<codeline lineno="161"><highlight class="normal">}</highlight></codeline>
<codeline lineno="162"><highlight class="normal"></highlight></codeline>
<codeline lineno="163" refid="class_c_e_c_key_1a3f6c872fae22de283c2cd7a15b0327ea" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="class_c_e_c_key_1a3f6c872fae22de283c2cd7a15b0327ea" kindref="member">CECKey::GetPrivKey</ref>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>privkey,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>fCompressed)<sp/>{</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/>EC_KEY_set_conv_form(pkey,<sp/>fCompressed<sp/>?<sp/>POINT_CONVERSION_COMPRESSED<sp/>:<sp/>POINT_CONVERSION_UNCOMPRESSED);</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>i2d_ECPrivateKey(pkey,<sp/>&amp;privkey);</highlight></codeline>
<codeline lineno="166"><highlight class="normal">}</highlight></codeline>
<codeline lineno="167"><highlight class="normal"></highlight></codeline>
<codeline lineno="168" refid="class_c_e_c_key_1a9d81b04876307c2e13df32798fe264a3" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="class_c_e_c_key_1a9d81b04876307c2e13df32798fe264a3" kindref="member">CECKey::SetPrivKey</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>privkey,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>size,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>fSkipCheck)<sp/>{</highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(d2i_ECPrivateKey(&amp;pkey,<sp/>&amp;privkey,<sp/>size))<sp/>{</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(fSkipCheck)</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="172"><highlight class="normal"></highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>d2i_ECPrivateKey<sp/>returns<sp/>true<sp/>if<sp/>parsing<sp/>succeeds.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>This<sp/>doesn&apos;t<sp/>necessarily<sp/>mean<sp/>the<sp/>key<sp/>is<sp/>valid.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(EC_KEY_check_key(pkey))</highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="179"><highlight class="normal">}</highlight></codeline>
<codeline lineno="180"><highlight class="normal"></highlight></codeline>
<codeline lineno="181" refid="class_c_e_c_key_1ab3cb52ca6bf3bdd55be9152a76da9112" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_c_e_c_key_1ab3cb52ca6bf3bdd55be9152a76da9112" kindref="member">CECKey::GetPubKey</ref>(std::vector&lt;unsigned<sp/>char&gt;<sp/>&amp;pubkey,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>fCompressed)<sp/>{</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/><sp/>EC_KEY_set_conv_form(pkey,<sp/>fCompressed<sp/>?<sp/>POINT_CONVERSION_COMPRESSED<sp/>:<sp/>POINT_CONVERSION_UNCOMPRESSED);</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nSize<sp/>=<sp/>i2o_ECPublicKey(pkey,<sp/>NULL);</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(nSize);</highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(nSize<sp/>&lt;=<sp/>65);</highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><sp/><sp/>pubkey.clear();</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/>pubkey.resize(nSize);</highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*pbegin(<ref refid="serialize_8h_1a19966d167c527d2be493ac9aba27c249" kindref="member">begin_ptr</ref>(pubkey));</highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nSize2<sp/>=<sp/>i2o_ECPublicKey(pkey,<sp/>&amp;pbegin);</highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(nSize<sp/>==<sp/>nSize2);</highlight></codeline>
<codeline lineno="191"><highlight class="normal">}</highlight></codeline>
<codeline lineno="192"><highlight class="normal"></highlight></codeline>
<codeline lineno="193" refid="class_c_e_c_key_1a07055de929aa6e4f4b692fb2bd272fdd" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="class_c_e_c_key_1a07055de929aa6e4f4b692fb2bd272fdd" kindref="member">CECKey::SetPubKey</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>pubkey,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>size)<sp/>{</highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>o2i_ECPublicKey(&amp;pkey,<sp/>&amp;pubkey,<sp/>size)<sp/>!=<sp/>NULL;</highlight></codeline>
<codeline lineno="195"><highlight class="normal">}</highlight></codeline>
<codeline lineno="196"><highlight class="normal"></highlight></codeline>
<codeline lineno="197" refid="class_c_e_c_key_1abb845b49a9befd527a568b2b39271d37" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="class_c_e_c_key_1abb845b49a9befd527a568b2b39271d37" kindref="member">CECKey::Sign</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classuint256" kindref="compound">uint256</ref><sp/>&amp;<ref refid="cache_8cc_1a11ecb029164e055f28f4123ce3748862" kindref="member">hash</ref>,<sp/>std::vector&lt;unsigned<sp/>char&gt;&amp;<sp/>vchSig)<sp/>{</highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/><sp/><sp/>vchSig.clear();</highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/><sp/><sp/>ECDSA_SIG<sp/>*sig<sp/>=<sp/>ECDSA_do_sign((</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*)&amp;hash,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(hash),<sp/>pkey);</highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(sig<sp/>==<sp/>NULL)</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/><sp/><sp/>BN_CTX<sp/>*ctx<sp/>=<sp/>BN_CTX_new();</highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><sp/><sp/>BN_CTX_start(ctx);</highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>EC_GROUP<sp/>*group<sp/>=<sp/>EC_KEY_get0_group(pkey);</highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><sp/><sp/>BIGNUM<sp/>*order<sp/>=<sp/>BN_CTX_get(ctx);</highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/><sp/>BIGNUM<sp/>*halforder<sp/>=<sp/>BN_CTX_get(ctx);</highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/><sp/><sp/>EC_GROUP_get_order(group,<sp/>order,<sp/>ctx);</highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/><sp/><sp/>BN_rshift1(halforder,<sp/>order);</highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(BN_cmp(sig-&gt;s,<sp/>halforder)<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>enforce<sp/>low<sp/>S<sp/>values,<sp/>by<sp/>negating<sp/>the<sp/>value<sp/>(modulo<sp/>the<sp/>order)<sp/>if<sp/>above<sp/>order/2.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>BN_sub(sig-&gt;s,<sp/>order,<sp/>sig-&gt;s);</highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/><sp/><sp/>BN_CTX_end(ctx);</highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/><sp/><sp/>BN_CTX_free(ctx);</highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nSize<sp/>=<sp/>ECDSA_size(pkey);</highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/><sp/><sp/>vchSig.resize(nSize);<sp/></highlight><highlight class="comment">//<sp/>Make<sp/>sure<sp/>it<sp/>is<sp/>big<sp/>enough</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*pos<sp/>=<sp/>&amp;vchSig[0];</highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/><sp/><sp/>nSize<sp/>=<sp/>i2d_ECDSA_SIG(sig,<sp/>&amp;pos);</highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/><sp/><sp/>ECDSA_SIG_free(sig);</highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/><sp/><sp/>vchSig.resize(nSize);<sp/></highlight><highlight class="comment">//<sp/>Shrink<sp/>to<sp/>fit<sp/>actual<sp/>size</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="222"><highlight class="normal">}</highlight></codeline>
<codeline lineno="223"><highlight class="normal"></highlight></codeline>
<codeline lineno="224" refid="class_c_e_c_key_1abbefe8d295d0bbed97d2709a3a534375" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="class_c_e_c_key_1abbefe8d295d0bbed97d2709a3a534375" kindref="member">CECKey::Verify</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classuint256" kindref="compound">uint256</ref><sp/>&amp;<ref refid="cache_8cc_1a11ecb029164e055f28f4123ce3748862" kindref="member">hash</ref>,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;unsigned<sp/>char&gt;&amp;<sp/>vchSig)<sp/>{</highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>-1<sp/>=<sp/>error,<sp/>0<sp/>=<sp/>bad<sp/>sig,<sp/>1<sp/>=<sp/>good</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ECDSA_verify(0,<sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*)&amp;hash,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(hash),<sp/>&amp;vchSig[0],<sp/>vchSig.<ref refid="classbase__uint_1ae0e221686cd63384569a8db5cc06d4c9" kindref="member">size</ref>(),<sp/>pkey)<sp/>!=<sp/>1)</highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="229"><highlight class="normal">}</highlight></codeline>
<codeline lineno="230"><highlight class="normal"></highlight></codeline>
<codeline lineno="231" refid="class_c_e_c_key_1ae7dae2b7062d1ba864c923e72fb5ede3" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="class_c_e_c_key_1ae7dae2b7062d1ba864c923e72fb5ede3" kindref="member">CECKey::SignCompact</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classuint256" kindref="compound">uint256</ref><sp/>&amp;<ref refid="cache_8cc_1a11ecb029164e055f28f4123ce3748862" kindref="member">hash</ref>,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*p64,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>&amp;rec)<sp/>{</highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>fOk<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/><sp/><sp/>ECDSA_SIG<sp/>*sig<sp/>=<sp/>ECDSA_do_sign((</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*)&amp;hash,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(hash),<sp/>pkey);</highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(sig==NULL)</highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/><sp/><sp/>memset(p64,<sp/>0,<sp/>64);</highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nBitsR<sp/>=<sp/>BN_num_bits(sig-&gt;r);</highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nBitsS<sp/>=<sp/>BN_num_bits(sig-&gt;s);</highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(nBitsR<sp/>&lt;=<sp/>256<sp/>&amp;&amp;<sp/>nBitsS<sp/>&lt;=<sp/>256)<sp/>{</highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;unsigned<sp/>char&gt;<sp/>pubkey;</highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_c_e_c_key_1ab3cb52ca6bf3bdd55be9152a76da9112" kindref="member">GetPubKey</ref>(pubkey,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i=0;<sp/>i&lt;4;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_c_e_c_key" kindref="compound">CECKey</ref><sp/>keyRec;</highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ECDSA_SIG_recover_key_GFp(keyRec.pkey,<sp/>sig,<sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*)&amp;hash,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(hash),<sp/>i,<sp/>1)<sp/>==<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;unsigned<sp/>char&gt;<sp/>pubkeyRec;</highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>keyRec.<ref refid="class_c_e_c_key_1ab3cb52ca6bf3bdd55be9152a76da9112" kindref="member">GetPubKey</ref>(pubkeyRec,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(pubkeyRec<sp/>==<sp/>pubkey)<sp/>{</highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rec<sp/>=<sp/>i;</highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fOk<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assert(fOk);</highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>BN_bn2bin(sig-&gt;r,&amp;p64[32-(nBitsR+7)/8]);</highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>BN_bn2bin(sig-&gt;s,&amp;p64[64-(nBitsS+7)/8]);</highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/><sp/><sp/>ECDSA_SIG_free(sig);</highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>fOk;</highlight></codeline>
<codeline lineno="260"><highlight class="normal">}</highlight></codeline>
<codeline lineno="261"><highlight class="normal"></highlight></codeline>
<codeline lineno="262" refid="class_c_e_c_key_1a5d7ed3acdc6c2798af3242cacc7b755b" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="class_c_e_c_key_1a5d7ed3acdc6c2798af3242cacc7b755b" kindref="member">CECKey::Recover</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classuint256" kindref="compound">uint256</ref><sp/>&amp;<ref refid="cache_8cc_1a11ecb029164e055f28f4123ce3748862" kindref="member">hash</ref>,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*p64,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>rec)</highlight></codeline>
<codeline lineno="263"><highlight class="normal">{</highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(rec&lt;0<sp/>||<sp/>rec&gt;=3)</highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/><sp/><sp/>ECDSA_SIG<sp/>*sig<sp/>=<sp/>ECDSA_SIG_new();</highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/><sp/><sp/>BN_bin2bn(&amp;p64[0],<sp/><sp/>32,<sp/>sig-&gt;r);</highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/><sp/><sp/>BN_bin2bn(&amp;p64[32],<sp/>32,<sp/>sig-&gt;s);</highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>ret<sp/>=<sp/>ECDSA_SIG_recover_key_GFp(pkey,<sp/>sig,<sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*)&amp;hash,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(hash),<sp/>rec,<sp/>0)<sp/>==<sp/>1;</highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/><sp/><sp/>ECDSA_SIG_free(sig);</highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ret;</highlight></codeline>
<codeline lineno="272"><highlight class="normal">}</highlight></codeline>
<codeline lineno="273"><highlight class="normal"></highlight></codeline>
<codeline lineno="274" refid="class_c_e_c_key_1a5964ca5e2e3f7204c59613d2aedca165" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="class_c_e_c_key_1a5964ca5e2e3f7204c59613d2aedca165" kindref="member">CECKey::TweakSecret</ref>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>vchSecretOut[32],<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>vchSecretIn[32],<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>vchTweak[32])<sp/></highlight></codeline>
<codeline lineno="275"><highlight class="normal">{</highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>ret<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/><sp/><sp/>BN_CTX<sp/>*ctx<sp/>=<sp/>BN_CTX_new();</highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/><sp/><sp/>BN_CTX_start(ctx);</highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/><sp/><sp/>BIGNUM<sp/>*bnSecret<sp/>=<sp/>BN_CTX_get(ctx);</highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/><sp/><sp/>BIGNUM<sp/>*bnTweak<sp/>=<sp/>BN_CTX_get(ctx);</highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/><sp/><sp/>BIGNUM<sp/>*bnOrder<sp/>=<sp/>BN_CTX_get(ctx);</highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/><sp/><sp/>EC_GROUP<sp/>*group<sp/>=<sp/>EC_GROUP_new_by_curve_name(NID_secp256k1);</highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/><sp/><sp/>EC_GROUP_get_order(group,<sp/>bnOrder,<sp/>ctx);<sp/></highlight><highlight class="comment">//<sp/>what<sp/>a<sp/>grossly<sp/>inefficient<sp/>way<sp/>to<sp/>get<sp/>the<sp/>(constant)<sp/>group<sp/>order...</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/><sp/><sp/>BN_bin2bn(vchTweak,<sp/>32,<sp/>bnTweak);</highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(BN_cmp(bnTweak,<sp/>bnOrder)<sp/>&gt;=<sp/>0)</highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ret<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;<sp/></highlight><highlight class="comment">//<sp/>extremely<sp/>unlikely</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/><sp/><sp/>BN_bin2bn(vchSecretIn,<sp/>32,<sp/>bnSecret);</highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/><sp/><sp/>BN_add(bnSecret,<sp/>bnSecret,<sp/>bnTweak);</highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/><sp/><sp/>BN_nnmod(bnSecret,<sp/>bnSecret,<sp/>bnOrder,<sp/>ctx);</highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(BN_is_zero(bnSecret))</highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ret<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;<sp/></highlight><highlight class="comment">//<sp/>ridiculously<sp/>unlikely</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nBits<sp/>=<sp/>BN_num_bits(bnSecret);</highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/><sp/><sp/>memset(vchSecretOut,<sp/>0,<sp/>32);</highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/><sp/><sp/>BN_bn2bin(bnSecret,<sp/>&amp;vchSecretOut[32-(nBits+7)/8]);</highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/><sp/><sp/>EC_GROUP_free(group);</highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/><sp/><sp/>BN_CTX_end(ctx);</highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/><sp/><sp/>BN_CTX_free(ctx);</highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ret;</highlight></codeline>
<codeline lineno="299"><highlight class="normal">}</highlight></codeline>
<codeline lineno="300"><highlight class="normal"></highlight></codeline>
<codeline lineno="301" refid="class_c_e_c_key_1a5f6013e6314a8ca9645a49106091ad89" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="class_c_e_c_key_1a5f6013e6314a8ca9645a49106091ad89" kindref="member">CECKey::TweakPublic</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>vchTweak[32])<sp/></highlight></codeline>
<codeline lineno="302"><highlight class="normal">{</highlight></codeline>
<codeline lineno="303"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>ret<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/><sp/><sp/>BN_CTX<sp/>*ctx<sp/>=<sp/>BN_CTX_new();</highlight></codeline>
<codeline lineno="305"><highlight class="normal"><sp/><sp/><sp/><sp/>BN_CTX_start(ctx);</highlight></codeline>
<codeline lineno="306"><highlight class="normal"><sp/><sp/><sp/><sp/>BIGNUM<sp/>*bnTweak<sp/>=<sp/>BN_CTX_get(ctx);</highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/><sp/><sp/><sp/>BIGNUM<sp/>*bnOrder<sp/>=<sp/>BN_CTX_get(ctx);</highlight></codeline>
<codeline lineno="308"><highlight class="normal"><sp/><sp/><sp/><sp/>BIGNUM<sp/>*bnOne<sp/>=<sp/>BN_CTX_get(ctx);</highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>EC_GROUP<sp/>*group<sp/>=<sp/>EC_KEY_get0_group(pkey);</highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/><sp/><sp/>EC_GROUP_get_order(group,<sp/>bnOrder,<sp/>ctx);<sp/></highlight><highlight class="comment">//<sp/>what<sp/>a<sp/>grossly<sp/>inefficient<sp/>way<sp/>to<sp/>get<sp/>the<sp/>(constant)<sp/>group<sp/>order...</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/><sp/><sp/>BN_bin2bn(vchTweak,<sp/>32,<sp/>bnTweak);</highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(BN_cmp(bnTweak,<sp/>bnOrder)<sp/>&gt;=<sp/>0)</highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ret<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;<sp/></highlight><highlight class="comment">//<sp/>extremely<sp/>unlikely</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="314"><highlight class="normal"><sp/><sp/><sp/><sp/>EC_POINT<sp/>*point<sp/>=<sp/>EC_POINT_dup(EC_KEY_get0_public_key(pkey),<sp/>group);</highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/><sp/><sp/>BN_one(bnOne);</highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/><sp/><sp/>EC_POINT_mul(group,<sp/>point,<sp/>bnTweak,<sp/>point,<sp/>bnOne,<sp/>ctx);</highlight></codeline>
<codeline lineno="317"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(EC_POINT_is_at_infinity(group,<sp/>point))</highlight></codeline>
<codeline lineno="318"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ret<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;<sp/></highlight><highlight class="comment">//<sp/>ridiculously<sp/>unlikely</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/><sp/><sp/>EC_KEY_set_public_key(pkey,<sp/>point);</highlight></codeline>
<codeline lineno="320"><highlight class="normal"><sp/><sp/><sp/><sp/>EC_POINT_free(point);</highlight></codeline>
<codeline lineno="321"><highlight class="normal"><sp/><sp/><sp/><sp/>BN_CTX_end(ctx);</highlight></codeline>
<codeline lineno="322"><highlight class="normal"><sp/><sp/><sp/><sp/>BN_CTX_free(ctx);</highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ret;</highlight></codeline>
<codeline lineno="324"><highlight class="normal">}</highlight></codeline>
<codeline lineno="325"><highlight class="normal"></highlight></codeline>
<codeline lineno="326" refid="class_c_e_c_key_1a3d11821aa2328baf3bd684e5c1835314" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="class_c_e_c_key_1a3d11821aa2328baf3bd684e5c1835314" kindref="member">CECKey::SanityCheck</ref>()</highlight></codeline>
<codeline lineno="327"><highlight class="normal">{</highlight></codeline>
<codeline lineno="328"><highlight class="normal"><sp/><sp/><sp/><sp/>EC_KEY<sp/>*pkey<sp/>=<sp/>EC_KEY_new_by_curve_name(NID_secp256k1);</highlight></codeline>
<codeline lineno="329"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(pkey<sp/>==<sp/>NULL)</highlight></codeline>
<codeline lineno="330"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="331"><highlight class="normal"><sp/><sp/><sp/><sp/>EC_KEY_free(pkey);</highlight></codeline>
<codeline lineno="332"><highlight class="normal"></highlight></codeline>
<codeline lineno="333"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>TODO<sp/>Is<sp/>there<sp/>more<sp/>EC<sp/>functionality<sp/>that<sp/>could<sp/>be<sp/>missing?</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="334"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="335"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="/home/dev/ds-160209/src/ecwrapper.cpp"/>
  </compounddef>
</doxygen>
