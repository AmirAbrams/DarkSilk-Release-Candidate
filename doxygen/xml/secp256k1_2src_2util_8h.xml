<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.9.1">
  <compounddef id="secp256k1_2src_2util_8h" kind="file" language="C++">
    <compoundname>util.h</compoundname>
    <includes local="no">stdlib.h</includes>
    <includes refid="stdint_8h" local="no">stdint.h</includes>
    <includes local="no">stdio.h</includes>
    <includedby refid="bench__ecdh_8c" local="yes">/home/dev/ds-160209/src/secp256k1/src/bench_ecdh.c</includedby>
    <includedby refid="bench__internal_8c" local="yes">/home/dev/ds-160209/src/secp256k1/src/bench_internal.c</includedby>
    <includedby refid="field__impl_8h" local="yes">/home/dev/ds-160209/src/secp256k1/src/field_impl.h</includedby>
    <includedby refid="secp256k1_8c" local="yes">/home/dev/ds-160209/src/secp256k1/src/secp256k1.c</includedby>
    <includedby refid="bench__recover_8c" local="yes">/home/dev/ds-160209/src/secp256k1/src/bench_recover.c</includedby>
    <includedby refid="bench__schnorr__verify_8c" local="yes">/home/dev/ds-160209/src/secp256k1/src/bench_schnorr_verify.c</includedby>
    <includedby refid="bench__sign_8c" local="yes">/home/dev/ds-160209/src/secp256k1/src/bench_sign.c</includedby>
    <includedby refid="bench__verify_8c" local="yes">/home/dev/ds-160209/src/secp256k1/src/bench_verify.c</includedby>
    <includedby refid="field__10x26__impl_8h" local="yes">/home/dev/ds-160209/src/secp256k1/src/field_10x26_impl.h</includedby>
    <includedby refid="field__5x52__impl_8h" local="yes">/home/dev/ds-160209/src/secp256k1/src/field_5x52_impl.h</includedby>
    <includedby refid="num__gmp__impl_8h" local="yes">/home/dev/ds-160209/src/secp256k1/src/num_gmp_impl.h</includedby>
    <incdepgraph>
      <node id="22739">
        <label>stdlib.h</label>
      </node>
      <node id="22738">
        <label>/home/dev/ds-160209/src/secp256k1/src/util.h</label>
        <link refid="secp256k1/src/util.h"/>
        <childnode refid="22739" relation="include">
        </childnode>
        <childnode refid="22740" relation="include">
        </childnode>
        <childnode refid="22741" relation="include">
        </childnode>
      </node>
      <node id="22740">
        <label>stdint.h</label>
        <link refid="stdint_8h"/>
      </node>
      <node id="22741">
        <label>stdio.h</label>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="22750">
        <label>/home/dev/ds-160209/src/secp256k1/src/bench_schnorr_verify.c</label>
        <link refid="bench__schnorr__verify_8c"/>
      </node>
      <node id="22748">
        <label>/home/dev/ds-160209/src/secp256k1/src/gen_context.c</label>
        <link refid="gen__context_8c"/>
      </node>
      <node id="22752">
        <label>/home/dev/ds-160209/src/secp256k1/src/bench_verify.c</label>
        <link refid="bench__verify_8c"/>
      </node>
      <node id="22754">
        <label>/home/dev/ds-160209/src/secp256k1/src/field_5x52_impl.h</label>
        <link refid="field__5x52__impl_8h"/>
      </node>
      <node id="22747">
        <label>/home/dev/ds-160209/src/secp256k1/src/tests.c</label>
        <link refid="tests_8c"/>
      </node>
      <node id="22746">
        <label>/home/dev/ds-160209/src/secp256k1/src/secp256k1.c</label>
        <link refid="secp256k1_8c"/>
        <childnode refid="22744" relation="include">
        </childnode>
        <childnode refid="22747" relation="include">
        </childnode>
      </node>
      <node id="22753">
        <label>/home/dev/ds-160209/src/secp256k1/src/field_10x26_impl.h</label>
        <link refid="field__10x26__impl_8h"/>
      </node>
      <node id="22751">
        <label>/home/dev/ds-160209/src/secp256k1/src/bench_sign.c</label>
        <link refid="bench__sign_8c"/>
      </node>
      <node id="22742">
        <label>/home/dev/ds-160209/src/secp256k1/src/util.h</label>
        <link refid="secp256k1/src/util.h"/>
        <childnode refid="22743" relation="include">
        </childnode>
        <childnode refid="22744" relation="include">
        </childnode>
        <childnode refid="22745" relation="include">
        </childnode>
        <childnode refid="22746" relation="include">
        </childnode>
        <childnode refid="22749" relation="include">
        </childnode>
        <childnode refid="22750" relation="include">
        </childnode>
        <childnode refid="22751" relation="include">
        </childnode>
        <childnode refid="22752" relation="include">
        </childnode>
        <childnode refid="22753" relation="include">
        </childnode>
        <childnode refid="22754" relation="include">
        </childnode>
        <childnode refid="22755" relation="include">
        </childnode>
      </node>
      <node id="22749">
        <label>/home/dev/ds-160209/src/secp256k1/src/bench_recover.c</label>
        <link refid="bench__recover_8c"/>
      </node>
      <node id="22745">
        <label>/home/dev/ds-160209/src/secp256k1/src/field_impl.h</label>
        <link refid="field__impl_8h"/>
        <childnode refid="22744" relation="include">
        </childnode>
        <childnode refid="22746" relation="include">
        </childnode>
        <childnode refid="22748" relation="include">
        </childnode>
      </node>
      <node id="22744">
        <label>/home/dev/ds-160209/src/secp256k1/src/bench_internal.c</label>
        <link refid="bench__internal_8c"/>
      </node>
      <node id="22755">
        <label>/home/dev/ds-160209/src/secp256k1/src/num_gmp_impl.h</label>
        <link refid="num__gmp__impl_8h"/>
      </node>
      <node id="22743">
        <label>/home/dev/ds-160209/src/secp256k1/src/bench_ecdh.c</label>
        <link refid="bench__ecdh_8c"/>
      </node>
    </invincdepgraph>
    <innerclass refid="structsecp256k1__callback" prot="public">secp256k1_callback</innerclass>
      <sectiondef kind="define">
      <memberdef kind="define" id="secp256k1_2src_2util_8h_1ac39417c5a18bbf27875c39fcfc8b271b" prot="public" static="no">
        <name>TEST_FAILURE</name>
        <param><defname>msg</defname></param>
        <initializer>do { \
    fprintf(stderr, &quot;%s:%d: %s\n&quot;, __FILE__, __LINE__, msg); \
    abort(); \
} while(0)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/secp256k1/src/util.h" line="33" column="10" bodyfile="/home/dev/ds-160209/src/secp256k1/src/util.h" bodystart="33" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="secp256k1_2src_2util_8h_1a76e8a689f16456e44a2cc438a6821025" prot="public" static="no">
        <name>EXPECT</name>
        <param><defname>x</defname></param>
        <param><defname>c</defname></param>
        <initializer>(x)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/secp256k1/src/util.h" line="42" column="10" bodyfile="/home/dev/ds-160209/src/secp256k1/src/util.h" bodystart="42" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="secp256k1_2src_2util_8h_1aba1590ff86288c886c47dc8a27b30467" prot="public" static="no">
        <name>CHECK</name>
        <param><defname>cond</defname></param>
        <initializer>do { \
    if (<ref refid="secp256k1_2src_2util_8h_1a76e8a689f16456e44a2cc438a6821025" kindref="member">EXPECT</ref>(!(cond), 0)) { \
        <ref refid="secp256k1_2src_2util_8h_1ac39417c5a18bbf27875c39fcfc8b271b" kindref="member">TEST_FAILURE</ref>(&quot;test condition failed: &quot; #cond); \
    } \
} while(0)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/secp256k1/src/util.h" line="52" column="10" bodyfile="/home/dev/ds-160209/src/secp256k1/src/util.h" bodystart="52" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="secp256k1_2src_2util_8h_1aca8ac5ae73fd966db106de59160a178b" prot="public" static="no">
        <name>VERIFY_CHECK</name>
        <param><defname>cond</defname></param>
        <initializer>do { (void)(cond); } while(0)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/secp256k1/src/util.h" line="64" column="10" bodyfile="/home/dev/ds-160209/src/secp256k1/src/util.h" bodystart="64" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="secp256k1_2src_2util_8h_1aa116d8999575e97182121de504f7a130" prot="public" static="no">
        <name>VERIFY_SETUP</name>
        <param><defname>stmt</defname></param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/secp256k1/src/util.h" line="65" column="9" bodyfile="/home/dev/ds-160209/src/secp256k1/src/util.h" bodystart="65" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="secp256k1_2src_2util_8h_1ad3e284f8cb00286e85a753265f6b17b8" prot="public" static="no">
        <name>SECP256K1_RESTRICT</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/secp256k1/src/util.h" line="86" column="15" bodyfile="/home/dev/ds-160209/src/secp256k1/src/util.h" bodystart="86" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="secp256k1_2src_2util_8h_1a125544a079312fb3a28a8d1a40ebc7e6" prot="public" static="no">
        <name>I64FORMAT</name>
        <initializer>&quot;lld&quot;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/secp256k1/src/util.h" line="97" column="11" bodyfile="/home/dev/ds-160209/src/secp256k1/src/util.h" bodystart="97" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="secp256k1_2src_2util_8h_1aa4f83048799b3a95129ed0671519f456" prot="public" static="no">
        <name>I64uFORMAT</name>
        <initializer>&quot;llu&quot;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/secp256k1/src/util.h" line="98" column="10" bodyfile="/home/dev/ds-160209/src/secp256k1/src/util.h" bodystart="98" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="secp256k1_2src_2util_8h_1af3f36140c71c09ed1d274671518466e0" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="secp256k1_8h_1a7ddc487fd46aee88f21cabedb7268b1e" kindref="member">SECP256K1_INLINE</ref> void</type>
        <definition>static SECP256K1_INLINE void secp256k1_callback_call</definition>
        <argsstring>(const secp256k1_callback *const cb, const char *const text)</argsstring>
        <name>secp256k1_callback_call</name>
        <param>
          <type>const <ref refid="structsecp256k1__callback" kindref="compound">secp256k1_callback</ref> *const</type>
          <declname>cb</declname>
        </param>
        <param>
          <type>const char *const</type>
          <declname>text</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/secp256k1/src/util.h" line="23" column="1" bodyfile="/home/dev/ds-160209/src/secp256k1/src/util.h" bodystart="23" bodyend="25"/>
      </memberdef>
      <memberdef kind="function" id="secp256k1_2src_2util_8h_1a20790114658c559e5048a38694708c3e" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="secp256k1_8h_1a7ddc487fd46aee88f21cabedb7268b1e" kindref="member">SECP256K1_INLINE</ref> void *</type>
        <definition>static SECP256K1_INLINE void* checked_malloc</definition>
        <argsstring>(const secp256k1_callback *cb, size_t size)</argsstring>
        <name>checked_malloc</name>
        <param>
          <type>const <ref refid="structsecp256k1__callback" kindref="compound">secp256k1_callback</ref> *</type>
          <declname>cb</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>size</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/secp256k1/src/util.h" line="68" column="1" bodyfile="/home/dev/ds-160209/src/secp256k1/src/util.h" bodystart="68" bodyend="74"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/**********************************************************************</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/>*<sp/>Copyright<sp/>(c)<sp/>2013,<sp/>2014<sp/>Pieter<sp/>Wuille<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*<sp/>Distributed<sp/>under<sp/>the<sp/>MIT<sp/>software<sp/>license,<sp/>see<sp/>the<sp/>accompanying<sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*<sp/>file<sp/>COPYING<sp/>or<sp/>http://www.opensource.org/licenses/mit-license.php.*</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/>**********************************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>_SECP256K1_UTIL_H_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>_SECP256K1_UTIL_H_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined<sp/>HAVE_CONFIG_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="libsecp256k1-config_8h" kindref="compound">libsecp256k1-config.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdlib.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="stdint_8h" kindref="compound">stdint.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdio.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight></codeline>
<codeline lineno="18" refid="structsecp256k1__callback" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="19" refid="structsecp256k1__callback_1ab53dda8f586b668b302a0955de4de44c" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>void<sp/>(*fn)(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*text,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>data);</highlight></codeline>
<codeline lineno="20" refid="structsecp256k1__callback_1acd5a72114709ca9841ad31f88c1744bc" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/><ref refid="structsecp256k1__callback_1acd5a72114709ca9841ad31f88c1744bc" kindref="member">data</ref>;</highlight></codeline>
<codeline lineno="21"><highlight class="normal">}<sp/><ref refid="structsecp256k1__callback" kindref="compound">secp256k1_callback</ref>;</highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="secp256k1_8h_1a7ddc487fd46aee88f21cabedb7268b1e" kindref="member">SECP256K1_INLINE</ref><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>secp256k1_callback_call(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structsecp256k1__callback" kindref="compound">secp256k1_callback</ref><sp/>*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>cb,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>text)<sp/>{</highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/><sp/><sp/>cb-&gt;<ref refid="structsecp256k1__callback_1ab53dda8f586b668b302a0955de4de44c" kindref="member">fn</ref>(text,<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*)cb-&gt;<ref refid="structsecp256k1__callback_1acd5a72114709ca9841ad31f88c1744bc" kindref="member">data</ref>);</highlight></codeline>
<codeline lineno="25"><highlight class="normal">}</highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>DETERMINISTIC</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>TEST_FAILURE(msg)<sp/>do<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="29"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>fprintf(stderr,<sp/>&quot;%s\n&quot;,<sp/>msg);<sp/>\</highlight></codeline>
<codeline lineno="30"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>abort();<sp/>\</highlight></codeline>
<codeline lineno="31"><highlight class="preprocessor">}<sp/>while(0);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="33" refid="secp256k1_2src_2util_8h_1ac39417c5a18bbf27875c39fcfc8b271b" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>TEST_FAILURE(msg)<sp/>do<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="34"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>fprintf(stderr,<sp/>&quot;%s:%d:<sp/>%s\n&quot;,<sp/>__FILE__,<sp/>__LINE__,<sp/>msg);<sp/>\</highlight></codeline>
<codeline lineno="35"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>abort();<sp/>\</highlight></codeline>
<codeline lineno="36"><highlight class="preprocessor">}<sp/>while(0)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>HAVE_BUILTIN_EXPECT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>EXPECT(x,c)<sp/>__builtin_expect((x),(c))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="42" refid="secp256k1_2src_2util_8h_1a76e8a689f16456e44a2cc438a6821025" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>EXPECT(x,c)<sp/>(x)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>DETERMINISTIC</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>CHECK(cond)<sp/>do<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="47"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>if<sp/>(EXPECT(!(cond),<sp/>0))<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="48"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TEST_FAILURE(&quot;test<sp/>condition<sp/>failed&quot;);<sp/>\</highlight></codeline>
<codeline lineno="49"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>}<sp/>\</highlight></codeline>
<codeline lineno="50"><highlight class="preprocessor">}<sp/>while(0)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="52" refid="secp256k1_2src_2util_8h_1aba1590ff86288c886c47dc8a27b30467" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>CHECK(cond)<sp/>do<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="53"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>if<sp/>(EXPECT(!(cond),<sp/>0))<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="54"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TEST_FAILURE(&quot;test<sp/>condition<sp/>failed:<sp/>&quot;<sp/>#cond);<sp/>\</highlight></codeline>
<codeline lineno="55"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>}<sp/>\</highlight></codeline>
<codeline lineno="56"><highlight class="preprocessor">}<sp/>while(0)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Like<sp/>assert(),<sp/>but<sp/>when<sp/>VERIFY<sp/>is<sp/>defined,<sp/>and<sp/>side-effect<sp/>safe.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>VERIFY</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>VERIFY_CHECK<sp/>CHECK</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>VERIFY_SETUP(stmt)<sp/>do<sp/>{<sp/>stmt;<sp/>}<sp/>while(0)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="64" refid="secp256k1_2src_2util_8h_1aca8ac5ae73fd966db106de59160a178b" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>VERIFY_CHECK(cond)<sp/>do<sp/>{<sp/>(void)(cond);<sp/>}<sp/>while(0)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="65" refid="secp256k1_2src_2util_8h_1aa116d8999575e97182121de504f7a130" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>VERIFY_SETUP(stmt)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight></codeline>
<codeline lineno="68"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="secp256k1_8h_1a7ddc487fd46aee88f21cabedb7268b1e" kindref="member">SECP256K1_INLINE</ref><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*checked_malloc(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structsecp256k1__callback" kindref="compound">secp256k1_callback</ref>*<sp/>cb,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>size)<sp/>{</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*ret<sp/>=<sp/>malloc(size);</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ret<sp/>==<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>secp256k1_callback_call(cb,<sp/></highlight><highlight class="stringliteral">&quot;Out<sp/>of<sp/>memory&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ret;</highlight></codeline>
<codeline lineno="74"><highlight class="normal">}</highlight></codeline>
<codeline lineno="75"><highlight class="normal"></highlight></codeline>
<codeline lineno="76"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Macro<sp/>for<sp/>restrict,<sp/>when<sp/>available<sp/>and<sp/>not<sp/>in<sp/>a<sp/>VERIFY<sp/>build.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="77"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(SECP256K1_BUILD)<sp/>&amp;&amp;<sp/>defined(VERIFY)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="78"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>define<sp/>SECP256K1_RESTRICT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="79"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="80"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>if<sp/>(!defined(__STDC_VERSION__)<sp/>||<sp/>(__STDC_VERSION__<sp/>&lt;<sp/>199901L)<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="81"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>if<sp/>SECP256K1_GNUC_PREREQ(3,0)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="82"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/>define<sp/>SECP256K1_RESTRICT<sp/>__restrict__</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="83"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>elif<sp/>(defined(_MSC_VER)<sp/>&amp;&amp;<sp/>_MSC_VER<sp/>&gt;=<sp/>1400)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="84"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/>define<sp/>SECP256K1_RESTRICT<sp/>__restrict</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="85"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="86" refid="secp256k1_2src_2util_8h_1ad3e284f8cb00286e85a753265f6b17b8" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/>define<sp/>SECP256K1_RESTRICT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="87"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="88"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="89"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>define<sp/>SECP256K1_RESTRICT<sp/>restrict</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="90"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="91"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="92"><highlight class="normal"></highlight></codeline>
<codeline lineno="93"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(_WIN32)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="94"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>define<sp/>I64FORMAT<sp/>&quot;I64d&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="95"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>define<sp/>I64uFORMAT<sp/>&quot;I64u&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="96"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="97" refid="secp256k1_2src_2util_8h_1a125544a079312fb3a28a8d1a40ebc7e6" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>define<sp/>I64FORMAT<sp/>&quot;lld&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="98" refid="secp256k1_2src_2util_8h_1aa4f83048799b3a95129ed0671519f456" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>define<sp/>I64uFORMAT<sp/>&quot;llu&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="99"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="100"><highlight class="normal"></highlight></codeline>
<codeline lineno="101"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(HAVE___INT128)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="102"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>if<sp/>defined(__GNUC__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="103"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>define<sp/>SECP256K1_GNUC_EXT<sp/>__extension__</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="104"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="105"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>define<sp/>SECP256K1_GNUC_EXT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="106"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="107"><highlight class="normal">SECP256K1_GNUC_EXT<sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>__int128<sp/>uint128_t;</highlight></codeline>
<codeline lineno="108"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="109"><highlight class="normal"></highlight></codeline>
<codeline lineno="110"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
    </programlisting>
    <location file="/home/dev/ds-160209/src/secp256k1/src/util.h"/>
  </compounddef>
</doxygen>
