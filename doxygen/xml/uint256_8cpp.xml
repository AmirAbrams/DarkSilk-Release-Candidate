<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.9.1">
  <compounddef id="uint256_8cpp" kind="file" language="C++">
    <compoundname>uint256.cpp</compoundname>
    <includes refid="uint256_8h" local="yes">uint256.h</includes>
    <includes refid="utilstrencodings_8h" local="yes">utilstrencodings.h</includes>
    <includes local="no">stdio.h</includes>
    <includes local="no">string.h</includes>
    <incdepgraph>
      <node id="57494">
        <label>boost/thread/mutex.hpp</label>
      </node>
      <node id="57486">
        <label>limits</label>
      </node>
      <node id="57505">
        <label>openssl/rand.h</label>
      </node>
      <node id="57489">
        <label>boost/tuple/tuple.hpp</label>
      </node>
      <node id="57475">
        <label>assert.h</label>
      </node>
      <node id="57498">
        <label>version.h</label>
        <link refid="version_8h"/>
        <childnode refid="57499" relation="include">
        </childnode>
        <childnode refid="57479" relation="include">
        </childnode>
      </node>
      <node id="57495">
        <label>sys/mman.h</label>
      </node>
      <node id="57492">
        <label>stdlib.h</label>
      </node>
      <node id="57504">
        <label>openssl/crypto.h</label>
      </node>
      <node id="57485">
        <label>cassert</label>
      </node>
      <node id="57477">
        <label>stdexcept</label>
      </node>
      <node id="57479">
        <label>string</label>
      </node>
      <node id="57483">
        <label>map</label>
      </node>
      <node id="57482">
        <label>serialize.h</label>
        <link refid="serialize_8h"/>
        <childnode refid="57479" relation="include">
        </childnode>
        <childnode refid="57480" relation="include">
        </childnode>
        <childnode refid="57483" relation="include">
        </childnode>
        <childnode refid="57484" relation="include">
        </childnode>
        <childnode refid="57485" relation="include">
        </childnode>
        <childnode refid="57486" relation="include">
        </childnode>
        <childnode refid="57478" relation="include">
        </childnode>
        <childnode refid="57476" relation="include">
        </childnode>
        <childnode refid="57487" relation="include">
        </childnode>
        <childnode refid="57488" relation="include">
        </childnode>
        <childnode refid="57489" relation="include">
        </childnode>
        <childnode refid="57490" relation="include">
        </childnode>
        <childnode refid="57498" relation="include">
        </childnode>
      </node>
      <node id="57496">
        <label>limits.h</label>
      </node>
      <node id="57501">
        <label>openssl/bio.h</label>
      </node>
      <node id="57500">
        <label>boost/date_time/posix_time/posix_time.hpp</label>
      </node>
      <node id="57493">
        <label>string.h</label>
      </node>
      <node id="57499">
        <label>clientversion.h</label>
        <link refid="clientversion_8h"/>
      </node>
      <node id="57487">
        <label>cstdio</label>
      </node>
      <node id="57503">
        <label>openssl/buffer.h</label>
      </node>
      <node id="57488">
        <label>boost/type_traits/is_fundamental.hpp</label>
      </node>
      <node id="57497">
        <label>unistd.h</label>
      </node>
      <node id="57480">
        <label>vector</label>
      </node>
      <node id="57502">
        <label>openssl/evp.h</label>
      </node>
      <node id="57478">
        <label>stdint.h</label>
        <link refid="stdint_8h"/>
      </node>
      <node id="57481">
        <label>utilstrencodings.h</label>
        <link refid="utilstrencodings_8h"/>
        <childnode refid="57478" relation="include">
        </childnode>
        <childnode refid="57479" relation="include">
        </childnode>
        <childnode refid="57480" relation="include">
        </childnode>
        <childnode refid="57482" relation="include">
        </childnode>
        <childnode refid="57490" relation="include">
        </childnode>
        <childnode refid="57500" relation="include">
        </childnode>
        <childnode refid="57501" relation="include">
        </childnode>
        <childnode refid="57502" relation="include">
        </childnode>
        <childnode refid="57503" relation="include">
        </childnode>
        <childnode refid="57504" relation="include">
        </childnode>
        <childnode refid="57505" relation="include">
        </childnode>
        <childnode refid="57506" relation="include">
        </childnode>
      </node>
      <node id="57474">
        <label>uint256.h</label>
        <link refid="uint256_8h"/>
        <childnode refid="57475" relation="include">
        </childnode>
        <childnode refid="57476" relation="include">
        </childnode>
        <childnode refid="57477" relation="include">
        </childnode>
        <childnode refid="57478" relation="include">
        </childnode>
        <childnode refid="57479" relation="include">
        </childnode>
        <childnode refid="57480" relation="include">
        </childnode>
      </node>
      <node id="57473">
        <label>/home/dev/ds-160209/src/uint256.cpp</label>
        <link refid="uint256.cpp"/>
        <childnode refid="57474" relation="include">
        </childnode>
        <childnode refid="57481" relation="include">
        </childnode>
        <childnode refid="57507" relation="include">
        </childnode>
        <childnode refid="57493" relation="include">
        </childnode>
      </node>
      <node id="57506">
        <label>openssl/bn.h</label>
      </node>
      <node id="57490">
        <label>allocators.h</label>
        <link refid="allocators_8h"/>
        <childnode refid="57491" relation="include">
        </childnode>
        <childnode refid="57493" relation="include">
        </childnode>
        <childnode refid="57479" relation="include">
        </childnode>
        <childnode refid="57494" relation="include">
        </childnode>
        <childnode refid="57483" relation="include">
        </childnode>
        <childnode refid="57495" relation="include">
        </childnode>
        <childnode refid="57496" relation="include">
        </childnode>
        <childnode refid="57497" relation="include">
        </childnode>
      </node>
      <node id="57484">
        <label>set</label>
      </node>
      <node id="57507">
        <label>stdio.h</label>
      </node>
      <node id="57491">
        <label>cleanse.h</label>
        <link refid="cleanse_8h"/>
        <childnode refid="57492" relation="include">
        </childnode>
      </node>
      <node id="57476">
        <label>cstring</label>
      </node>
    </incdepgraph>
      <sectiondef kind="func">
      <memberdef kind="function" id="uint256_8cpp_1ada85ad950dccb83783b00377e8e80345" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void HashMix</definition>
        <argsstring>(uint32_t &amp;a, uint32_t &amp;b, uint32_t &amp;c)</argsstring>
        <name>HashMix</name>
        <param>
          <type><ref refid="stdint_8h_1a435d1572bf3f880d55459d9805097f62" kindref="member">uint32_t</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a435d1572bf3f880d55459d9805097f62" kindref="member">uint32_t</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a435d1572bf3f880d55459d9805097f62" kindref="member">uint32_t</ref> &amp;</type>
          <declname>c</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/uint256.cpp" line="297" column="1" bodyfile="/home/dev/ds-160209/src/uint256.cpp" bodystart="297" bodyend="318"/>
      </memberdef>
      <memberdef kind="function" id="uint256_8cpp_1a4748a0be192d5c847de43d05ad4bea64" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void HashFinal</definition>
        <argsstring>(uint32_t &amp;a, uint32_t &amp;b, uint32_t &amp;c)</argsstring>
        <name>HashFinal</name>
        <param>
          <type><ref refid="stdint_8h_1a435d1572bf3f880d55459d9805097f62" kindref="member">uint32_t</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a435d1572bf3f880d55459d9805097f62" kindref="member">uint32_t</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a435d1572bf3f880d55459d9805097f62" kindref="member">uint32_t</ref> &amp;</type>
          <declname>c</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/uint256.cpp" line="320" column="1" bodyfile="/home/dev/ds-160209/src/uint256.cpp" bodystart="320" bodyend="337"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">//<sp/>Copyright<sp/>(c)<sp/>2009-2016<sp/>Satoshi<sp/>Nakamoto</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Copyright<sp/>(c)<sp/>2009-2016<sp/>The<sp/>Bitcoin<sp/>developers</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Distributed<sp/>under<sp/>the<sp/>MIT/X11<sp/>software<sp/>license,<sp/>see<sp/>the<sp/>accompanying</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="comment">//<sp/>file<sp/>COPYING<sp/>or<sp/>http://www.opensource.org/licenses/mit-license.php.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="uint256_8h" kindref="compound">uint256.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="utilstrencodings_8h" kindref="compound">utilstrencodings.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdio.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;string.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>BITS&gt;</highlight></codeline>
<codeline lineno="14" refid="classbase__uint_1aa1ebaba47302da3e120879d186355736" refkind="member"><highlight class="normal"><ref refid="classbase__uint_1aafd4418923a92b58a1c360e657fa7d83" kindref="member">base_uint&lt;BITS&gt;::base_uint</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>str)</highlight></codeline>
<codeline lineno="15"><highlight class="normal">{</highlight></codeline>
<codeline lineno="16"><highlight class="normal"><sp/><sp/><sp/><sp/>SetHex(str);</highlight></codeline>
<codeline lineno="17"><highlight class="normal">}</highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>BITS&gt;</highlight></codeline>
<codeline lineno="20" refid="classbase__uint_1ab6dd7d7921572078a4733e4acc22b2a9" refkind="member"><highlight class="normal"><ref refid="classbase__uint_1aafd4418923a92b58a1c360e657fa7d83" kindref="member">base_uint&lt;BITS&gt;::base_uint</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;unsigned<sp/>char&gt;&amp;<sp/>vch)</highlight></codeline>
<codeline lineno="21"><highlight class="normal">{</highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(vch.size()<sp/>!=<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(pn))</highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/><ref refid="classuint__error" kindref="compound">uint_error</ref>(</highlight><highlight class="stringliteral">&quot;Converting<sp/>vector<sp/>of<sp/>wrong<sp/>size<sp/>to<sp/>base_uint&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/><sp/><sp/>memcpy(pn,<sp/>&amp;vch[0],<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(pn));</highlight></codeline>
<codeline lineno="25"><highlight class="normal">}</highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>BITS&gt;</highlight></codeline>
<codeline lineno="28" refid="classbase__uint_1acb449d2fcb5af767fa6b01890e836a4e" refkind="member"><highlight class="normal"><ref refid="classbase__uint" kindref="compound">base_uint&lt;BITS&gt;</ref>&amp;<sp/><ref refid="classbase__uint_1acb449d2fcb5af767fa6b01890e836a4e" kindref="member">base_uint&lt;BITS&gt;::operator&lt;&lt;=</ref>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>shift)</highlight></codeline>
<codeline lineno="29"><highlight class="normal">{</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classbase__uint" kindref="compound">base_uint&lt;BITS&gt;</ref><sp/>a(*</highlight><highlight class="keyword">this</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>WIDTH;<sp/>i++)</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pn[i]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>k<sp/>=<sp/>shift<sp/>/<sp/>32;</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/>shift<sp/>=<sp/>shift<sp/>%<sp/>32;</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>WIDTH;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(i<sp/>+<sp/>k<sp/>+<sp/>1<sp/>&lt;<sp/>WIDTH<sp/>&amp;&amp;<sp/>shift<sp/>!=<sp/>0)</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pn[i<sp/>+<sp/>k<sp/>+<sp/>1]<sp/>|=<sp/>(a.<ref refid="classbase__uint_1a0edb1465d540fadd92b21659f27083a2" kindref="member">pn</ref>[i]<sp/>&gt;&gt;<sp/>(32<sp/>-<sp/>shift));</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(i<sp/>+<sp/>k<sp/>&lt;<sp/>WIDTH)</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pn[i<sp/>+<sp/>k]<sp/>|=<sp/>(a.<ref refid="classbase__uint_1a0edb1465d540fadd92b21659f27083a2" kindref="member">pn</ref>[i]<sp/>&lt;&lt;<sp/>shift);</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="42"><highlight class="normal">}</highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>BITS&gt;</highlight></codeline>
<codeline lineno="45" refid="classbase__uint_1a4e0344432bbcce79525fd2c182173b3b" refkind="member"><highlight class="normal"><ref refid="classbase__uint" kindref="compound">base_uint&lt;BITS&gt;</ref>&amp;<sp/><ref refid="classbase__uint_1a4e0344432bbcce79525fd2c182173b3b" kindref="member">base_uint&lt;BITS&gt;::operator&gt;&gt;=</ref>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>shift)</highlight></codeline>
<codeline lineno="46"><highlight class="normal">{</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classbase__uint" kindref="compound">base_uint&lt;BITS&gt;</ref><sp/>a(*</highlight><highlight class="keyword">this</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>WIDTH;<sp/>i++)</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pn[i]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>k<sp/>=<sp/>shift<sp/>/<sp/>32;</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/>shift<sp/>=<sp/>shift<sp/>%<sp/>32;</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>WIDTH;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(i<sp/>-<sp/>k<sp/>-<sp/>1<sp/>&gt;=<sp/>0<sp/>&amp;&amp;<sp/>shift<sp/>!=<sp/>0)</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pn[i<sp/>-<sp/>k<sp/>-<sp/>1]<sp/>|=<sp/>(a.<ref refid="classbase__uint_1a0edb1465d540fadd92b21659f27083a2" kindref="member">pn</ref>[i]<sp/>&lt;&lt;<sp/>(32<sp/>-<sp/>shift));</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(i<sp/>-<sp/>k<sp/>&gt;=<sp/>0)</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pn[i<sp/>-<sp/>k]<sp/>|=<sp/>(a.<ref refid="classbase__uint_1a0edb1465d540fadd92b21659f27083a2" kindref="member">pn</ref>[i]<sp/>&gt;&gt;<sp/>shift);</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="59"><highlight class="normal">}</highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>BITS&gt;</highlight></codeline>
<codeline lineno="62" refid="classbase__uint_1aa70b7d954258d2cd4bb77721e357fd40" refkind="member"><highlight class="normal"><ref refid="classbase__uint" kindref="compound">base_uint&lt;BITS&gt;</ref>&amp;<sp/><ref refid="classbase__uint_1aa70b7d954258d2cd4bb77721e357fd40" kindref="member">base_uint&lt;BITS&gt;::operator*=</ref>(<ref refid="stdint_8h_1a435d1572bf3f880d55459d9805097f62" kindref="member">uint32_t</ref><sp/>b32)</highlight></codeline>
<codeline lineno="63"><highlight class="normal">{</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="stdint_8h_1aaa5d1cd013383c889537491c3cfd9aad" kindref="member">uint64_t</ref><sp/>carry<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>WIDTH;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stdint_8h_1aaa5d1cd013383c889537491c3cfd9aad" kindref="member">uint64_t</ref><sp/>n<sp/>=<sp/>carry<sp/>+<sp/>(<ref refid="stdint_8h_1aaa5d1cd013383c889537491c3cfd9aad" kindref="member">uint64_t</ref>)b32<sp/>*<sp/>pn[i];</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pn[i]<sp/>=<sp/>n<sp/>&amp;<sp/>0xffffffff;</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>carry<sp/>=<sp/>n<sp/>&gt;&gt;<sp/>32;</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="71"><highlight class="normal">}</highlight></codeline>
<codeline lineno="72"><highlight class="normal"></highlight></codeline>
<codeline lineno="73"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>BITS&gt;</highlight></codeline>
<codeline lineno="74" refid="classbase__uint_1a806b2ba843181e9dd4c824414fbcc13d" refkind="member"><highlight class="normal"><ref refid="classbase__uint" kindref="compound">base_uint&lt;BITS&gt;</ref>&amp;<sp/><ref refid="classbase__uint_1aa70b7d954258d2cd4bb77721e357fd40" kindref="member">base_uint&lt;BITS&gt;::operator*=</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classbase__uint" kindref="compound">base_uint</ref>&amp;<sp/>b)</highlight></codeline>
<codeline lineno="75"><highlight class="normal">{</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classbase__uint" kindref="compound">base_uint&lt;BITS&gt;</ref><sp/>a<sp/>=<sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal"><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>WIDTH;<sp/>j++)<sp/>{</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stdint_8h_1aaa5d1cd013383c889537491c3cfd9aad" kindref="member">uint64_t</ref><sp/>carry<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>+<sp/>j<sp/>&lt;<sp/>WIDTH;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stdint_8h_1aaa5d1cd013383c889537491c3cfd9aad" kindref="member">uint64_t</ref><sp/>n<sp/>=<sp/>carry<sp/>+<sp/>pn[i<sp/>+<sp/>j]<sp/>+<sp/>(<ref refid="stdint_8h_1aaa5d1cd013383c889537491c3cfd9aad" kindref="member">uint64_t</ref>)a.<ref refid="classbase__uint_1a0edb1465d540fadd92b21659f27083a2" kindref="member">pn</ref>[j]<sp/>*<sp/>b.<ref refid="classbase__uint_1a0edb1465d540fadd92b21659f27083a2" kindref="member">pn</ref>[i];</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pn[i<sp/>+<sp/>j]<sp/>=<sp/>n<sp/>&amp;<sp/>0xffffffff;</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>carry<sp/>=<sp/>n<sp/>&gt;&gt;<sp/>32;</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="87"><highlight class="normal">}</highlight></codeline>
<codeline lineno="88"><highlight class="normal"></highlight></codeline>
<codeline lineno="89"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>BITS&gt;</highlight></codeline>
<codeline lineno="90" refid="classbase__uint_1ad6fa7e22ab995247c0bf298069732e1d" refkind="member"><highlight class="normal"><ref refid="classbase__uint" kindref="compound">base_uint&lt;BITS&gt;</ref>&amp;<sp/><ref refid="classbase__uint_1ad6fa7e22ab995247c0bf298069732e1d" kindref="member">base_uint&lt;BITS&gt;::operator/=</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classbase__uint" kindref="compound">base_uint</ref>&amp;<sp/>b)</highlight></codeline>
<codeline lineno="91"><highlight class="normal">{</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classbase__uint" kindref="compound">base_uint&lt;BITS&gt;</ref><sp/>div<sp/>=<sp/>b;<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>make<sp/>a<sp/>copy,<sp/>so<sp/>we<sp/>can<sp/>shift.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classbase__uint" kindref="compound">base_uint&lt;BITS&gt;</ref><sp/>num<sp/>=<sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;<sp/></highlight><highlight class="comment">//<sp/>make<sp/>a<sp/>copy,<sp/>so<sp/>we<sp/>can<sp/>subtract.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal"><sp/>=<sp/>0;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>quotient.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>num_bits<sp/>=<sp/>num.<ref refid="classbase__uint_1a4867652ab4163a10ac4e3d04f0352423" kindref="member">bits</ref>();</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>div_bits<sp/>=<sp/>div.<ref refid="classbase__uint_1a4867652ab4163a10ac4e3d04f0352423" kindref="member">bits</ref>();</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(div_bits<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/><ref refid="classuint__error" kindref="compound">uint_error</ref>(</highlight><highlight class="stringliteral">&quot;Division<sp/>by<sp/>zero&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(div_bits<sp/>&gt;<sp/>num_bits)<sp/></highlight><highlight class="comment">//<sp/>the<sp/>result<sp/>is<sp/>certainly<sp/>0.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>shift<sp/>=<sp/>num_bits<sp/>-<sp/>div_bits;</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/>div<sp/>&lt;&lt;=<sp/>shift;<sp/></highlight><highlight class="comment">//<sp/>shift<sp/>so<sp/>that<sp/>div<sp/>and<sp/>nun<sp/>align.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(shift<sp/>&gt;=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(num<sp/>&gt;=<sp/>div)<sp/>{</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>num<sp/>-=<sp/>div;</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pn[shift<sp/>/<sp/>32]<sp/>|=<sp/>(1<sp/>&lt;&lt;<sp/>(shift<sp/>&amp;<sp/>31));<sp/></highlight><highlight class="comment">//<sp/>set<sp/>a<sp/>bit<sp/>of<sp/>the<sp/>result.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>div<sp/>&gt;&gt;=<sp/>1;<sp/></highlight><highlight class="comment">//<sp/>shift<sp/>back.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>shift--;</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>num<sp/>now<sp/>contains<sp/>the<sp/>remainder<sp/>of<sp/>the<sp/>division.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="113"><highlight class="normal">}</highlight></codeline>
<codeline lineno="114"><highlight class="normal"></highlight></codeline>
<codeline lineno="115"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>BITS&gt;</highlight></codeline>
<codeline lineno="116" refid="classbase__uint_1ac9777c80cfcf1355cf17258027ca35bb" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="classbase__uint_1ac9777c80cfcf1355cf17258027ca35bb" kindref="member">base_uint&lt;BITS&gt;::CompareTo</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classbase__uint" kindref="compound">base_uint&lt;BITS&gt;</ref>&amp;<sp/>b)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="117"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>WIDTH<sp/>-<sp/>1;<sp/>i<sp/>&gt;=<sp/>0;<sp/>i--)<sp/>{</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(pn[i]<sp/>&lt;<sp/>b.<ref refid="classbase__uint_1a0edb1465d540fadd92b21659f27083a2" kindref="member">pn</ref>[i])</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(pn[i]<sp/>&gt;<sp/>b.<ref refid="classbase__uint_1a0edb1465d540fadd92b21659f27083a2" kindref="member">pn</ref>[i])</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="125"><highlight class="normal">}</highlight></codeline>
<codeline lineno="126"><highlight class="normal"></highlight></codeline>
<codeline lineno="127"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>BITS&gt;</highlight></codeline>
<codeline lineno="128" refid="classbase__uint_1a39817436d7ba143e8d52abc475097384" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classbase__uint_1a39817436d7ba143e8d52abc475097384" kindref="member">base_uint&lt;BITS&gt;::EqualTo</ref>(<ref refid="stdint_8h_1aaa5d1cd013383c889537491c3cfd9aad" kindref="member">uint64_t</ref><sp/>b)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="129"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>WIDTH<sp/>-<sp/>1;<sp/>i<sp/>&gt;=<sp/>2;<sp/>i--)<sp/>{</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(pn[i])</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(pn[1]<sp/>!=<sp/>(b<sp/>&gt;&gt;<sp/>32))</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(pn[0]<sp/>!=<sp/>(b<sp/>&amp;<sp/>0xfffffffful))</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="139"><highlight class="normal">}</highlight></codeline>
<codeline lineno="140"><highlight class="normal"></highlight></codeline>
<codeline lineno="141"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>BITS&gt;</highlight></codeline>
<codeline lineno="142" refid="classbase__uint_1aa701be5115bacf02c299b05598cf616d" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="classbase__uint_1aa701be5115bacf02c299b05598cf616d" kindref="member">base_uint&lt;BITS&gt;::getdouble</ref>()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="143"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>ret<sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>fact<sp/>=<sp/>1.0;</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>WIDTH;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ret<sp/>+=<sp/>fact<sp/>*<sp/>pn[i];</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fact<sp/>*=<sp/>4294967296.0;</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ret;</highlight></codeline>
<codeline lineno="151"><highlight class="normal">}</highlight></codeline>
<codeline lineno="152"><highlight class="normal"></highlight></codeline>
<codeline lineno="153"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>BITS&gt;</highlight></codeline>
<codeline lineno="154" refid="classbase__uint_1ac9929c28600796a9acf75881bb750576" refkind="member"><highlight class="normal">std::string<sp/><ref refid="classbase__uint_1ac9929c28600796a9acf75881bb750576" kindref="member">base_uint&lt;BITS&gt;::GetHex</ref>()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="155"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>psz[</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(pn)<sp/>*<sp/>2<sp/>+<sp/>1];</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(pn);<sp/>i++)</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sprintf(psz<sp/>+<sp/>i<sp/>*<sp/>2,<sp/></highlight><highlight class="stringliteral">&quot;%02x&quot;</highlight><highlight class="normal">,<sp/>((</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*)pn)[</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(pn)<sp/>-<sp/>i<sp/>-<sp/>1]);</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::string(psz,<sp/>psz<sp/>+<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(pn)<sp/>*<sp/>2);</highlight></codeline>
<codeline lineno="160"><highlight class="normal">}</highlight></codeline>
<codeline lineno="161"><highlight class="normal"></highlight></codeline>
<codeline lineno="162"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>BITS&gt;</highlight></codeline>
<codeline lineno="163" refid="classbase__uint_1ade1a897fac931f28f54998c92c797228" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classbase__uint_1ade1a897fac931f28f54998c92c797228" kindref="member">base_uint&lt;BITS&gt;::SetHex</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>psz)</highlight></codeline>
<codeline lineno="164"><highlight class="normal">{</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/>memset(pn,<sp/>0,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(pn));</highlight></codeline>
<codeline lineno="166"><highlight class="normal"></highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>skip<sp/>leading<sp/>spaces</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(isspace(*psz))</highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>psz++;</highlight></codeline>
<codeline lineno="170"><highlight class="normal"></highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>skip<sp/>0x</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(psz[0]<sp/>==<sp/></highlight><highlight class="charliteral">&apos;0&apos;</highlight><highlight class="normal"><sp/>&amp;&amp;<sp/>tolower(psz[1])<sp/>==<sp/></highlight><highlight class="charliteral">&apos;x&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>psz<sp/>+=<sp/>2;</highlight></codeline>
<codeline lineno="174"><highlight class="normal"></highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>hex<sp/>string<sp/>to<sp/>uint</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>pbegin<sp/>=<sp/>psz;</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(::<ref refid="uint256_8h_1aa59e8a8c5a39cb5041f93bb95dd02119" kindref="member">HexDigit</ref>(*psz)<sp/>!=<sp/>-1)</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>psz++;</highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/><sp/><sp/>psz--;</highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>p1<sp/>=<sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*)pn;</highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>pend<sp/>=<sp/>p1<sp/>+<sp/>WIDTH<sp/>*<sp/>4;</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(psz<sp/>&gt;=<sp/>pbegin<sp/>&amp;&amp;<sp/>p1<sp/>&lt;<sp/>pend)<sp/>{</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*p1<sp/>=<sp/><ref refid="uint256_8h_1aa59e8a8c5a39cb5041f93bb95dd02119" kindref="member">::HexDigit</ref>(*psz--);</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(psz<sp/>&gt;=<sp/>pbegin)<sp/>{</highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*p1<sp/>|=<sp/>((</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>char)::<ref refid="uint256_8h_1aa59e8a8c5a39cb5041f93bb95dd02119" kindref="member">HexDigit</ref>(*psz--)<sp/>&lt;&lt;<sp/>4);</highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p1++;</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="189"><highlight class="normal">}</highlight></codeline>
<codeline lineno="190"><highlight class="normal"></highlight></codeline>
<codeline lineno="191"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>BITS&gt;</highlight></codeline>
<codeline lineno="192" refid="classbase__uint_1afe3600e6ae4e9f69e1c036581a2716c8" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classbase__uint_1ade1a897fac931f28f54998c92c797228" kindref="member">base_uint&lt;BITS&gt;::SetHex</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>str)</highlight></codeline>
<codeline lineno="193"><highlight class="normal">{</highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/><sp/><sp/>SetHex(str.c_str());</highlight></codeline>
<codeline lineno="195"><highlight class="normal">}</highlight></codeline>
<codeline lineno="196"><highlight class="normal"></highlight></codeline>
<codeline lineno="197"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>BITS&gt;</highlight></codeline>
<codeline lineno="198" refid="classbase__uint_1ac3080a72402cadf28dbc9f9b69cc60be" refkind="member"><highlight class="normal">std::string<sp/><ref refid="classbase__uint_1ac3080a72402cadf28dbc9f9b69cc60be" kindref="member">base_uint&lt;BITS&gt;::ToString</ref>()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="199"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(GetHex());</highlight></codeline>
<codeline lineno="201"><highlight class="normal">}</highlight></codeline>
<codeline lineno="202"><highlight class="normal"></highlight></codeline>
<codeline lineno="203"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>BITS&gt;</highlight></codeline>
<codeline lineno="204" refid="classbase__uint_1a4867652ab4163a10ac4e3d04f0352423" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="classbase__uint_1a4867652ab4163a10ac4e3d04f0352423" kindref="member">base_uint&lt;BITS&gt;::bits</ref>()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="205"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>pos<sp/>=<sp/>WIDTH<sp/>-<sp/>1;<sp/>pos<sp/>&gt;=<sp/>0;<sp/>pos--)<sp/>{</highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(pn[pos])<sp/>{</highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>bits<sp/>=<sp/>31;<sp/>bits<sp/>&gt;<sp/>0;<sp/>bits--)<sp/>{</highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(pn[pos]<sp/>&amp;<sp/>1<sp/>&lt;&lt;<sp/>bits)</highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>32<sp/>*<sp/>pos<sp/>+<sp/>bits<sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>32<sp/>*<sp/>pos<sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="216"><highlight class="normal">}</highlight></codeline>
<codeline lineno="217"><highlight class="normal"></highlight></codeline>
<codeline lineno="218"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Explicit<sp/>instantiations<sp/>for<sp/>base_uint&lt;160&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="219"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/><ref refid="classbase__uint_1aafd4418923a92b58a1c360e657fa7d83" kindref="member">base_uint&lt;160&gt;::base_uint</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;);</highlight></codeline>
<codeline lineno="220"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/><ref refid="classbase__uint_1aafd4418923a92b58a1c360e657fa7d83" kindref="member">base_uint&lt;160&gt;::base_uint</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;unsigned<sp/>char&gt;&amp;);</highlight></codeline>
<codeline lineno="221"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/><ref refid="classbase__uint" kindref="compound">base_uint&lt;160&gt;</ref>&amp;<sp/><ref refid="classbase__uint_1acb449d2fcb5af767fa6b01890e836a4e" kindref="member">base_uint&lt;160&gt;::operator&lt;&lt;=</ref>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="222"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/><ref refid="classbase__uint" kindref="compound">base_uint&lt;160&gt;</ref>&amp;<sp/><ref refid="classbase__uint_1a4e0344432bbcce79525fd2c182173b3b" kindref="member">base_uint&lt;160&gt;::operator&gt;&gt;=</ref>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="223"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/><ref refid="classbase__uint" kindref="compound">base_uint&lt;160&gt;</ref>&amp;<sp/><ref refid="classbase__uint_1aa70b7d954258d2cd4bb77721e357fd40" kindref="member">base_uint&lt;160&gt;::operator*=</ref>(<ref refid="stdint_8h_1a435d1572bf3f880d55459d9805097f62" kindref="member">uint32_t</ref><sp/>b32);</highlight></codeline>
<codeline lineno="224"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/><ref refid="classbase__uint" kindref="compound">base_uint&lt;160&gt;</ref>&amp;<sp/><ref refid="classbase__uint_1aa70b7d954258d2cd4bb77721e357fd40" kindref="member">base_uint&lt;160&gt;::operator*=</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classbase__uint" kindref="compound">base_uint&lt;160&gt;</ref>&amp;<sp/>b);</highlight></codeline>
<codeline lineno="225"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/><ref refid="classbase__uint" kindref="compound">base_uint&lt;160&gt;</ref>&amp;<sp/><ref refid="classbase__uint_1ad6fa7e22ab995247c0bf298069732e1d" kindref="member">base_uint&lt;160&gt;::operator/=</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classbase__uint" kindref="compound">base_uint&lt;160&gt;</ref>&amp;<sp/>b);</highlight></codeline>
<codeline lineno="226"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="classbase__uint_1ac9777c80cfcf1355cf17258027ca35bb" kindref="member">base_uint&lt;160&gt;::CompareTo</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classbase__uint" kindref="compound">base_uint&lt;160&gt;</ref>&amp;)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="227"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classbase__uint_1a39817436d7ba143e8d52abc475097384" kindref="member">base_uint&lt;160&gt;::EqualTo</ref>(<ref refid="stdint_8h_1aaa5d1cd013383c889537491c3cfd9aad" kindref="member">uint64_t</ref>)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="228"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="classbase__uint_1aa701be5115bacf02c299b05598cf616d" kindref="member">base_uint&lt;160&gt;::getdouble</ref>()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="229"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>std::string<sp/><ref refid="classbase__uint_1ac9929c28600796a9acf75881bb750576" kindref="member">base_uint&lt;160&gt;::GetHex</ref>()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="230"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>std::string<sp/><ref refid="classbase__uint_1ac3080a72402cadf28dbc9f9b69cc60be" kindref="member">base_uint&lt;160&gt;::ToString</ref>()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="231"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classbase__uint_1ade1a897fac931f28f54998c92c797228" kindref="member">base_uint&lt;160&gt;::SetHex</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*);</highlight></codeline>
<codeline lineno="232"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classbase__uint_1ade1a897fac931f28f54998c92c797228" kindref="member">base_uint&lt;160&gt;::SetHex</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;);</highlight></codeline>
<codeline lineno="233"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="classbase__uint_1a4867652ab4163a10ac4e3d04f0352423" kindref="member">base_uint&lt;160&gt;::bits</ref>()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="234"><highlight class="normal"></highlight></codeline>
<codeline lineno="235"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Explicit<sp/>instantiations<sp/>for<sp/>base_uint&lt;256&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="236"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/><ref refid="classbase__uint_1aafd4418923a92b58a1c360e657fa7d83" kindref="member">base_uint&lt;256&gt;::base_uint</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;);</highlight></codeline>
<codeline lineno="237"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/><ref refid="classbase__uint_1aafd4418923a92b58a1c360e657fa7d83" kindref="member">base_uint&lt;256&gt;::base_uint</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;unsigned<sp/>char&gt;&amp;);</highlight></codeline>
<codeline lineno="238"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/><ref refid="classbase__uint" kindref="compound">base_uint&lt;256&gt;</ref>&amp;<sp/><ref refid="classbase__uint_1acb449d2fcb5af767fa6b01890e836a4e" kindref="member">base_uint&lt;256&gt;::operator&lt;&lt;=</ref>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="239"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/><ref refid="classbase__uint" kindref="compound">base_uint&lt;256&gt;</ref>&amp;<sp/><ref refid="classbase__uint_1a4e0344432bbcce79525fd2c182173b3b" kindref="member">base_uint&lt;256&gt;::operator&gt;&gt;=</ref>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="240"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/><ref refid="classbase__uint" kindref="compound">base_uint&lt;256&gt;</ref>&amp;<sp/><ref refid="classbase__uint_1aa70b7d954258d2cd4bb77721e357fd40" kindref="member">base_uint&lt;256&gt;::operator*=</ref>(<ref refid="stdint_8h_1a435d1572bf3f880d55459d9805097f62" kindref="member">uint32_t</ref><sp/>b32);</highlight></codeline>
<codeline lineno="241"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/><ref refid="classbase__uint" kindref="compound">base_uint&lt;256&gt;</ref>&amp;<sp/><ref refid="classbase__uint_1aa70b7d954258d2cd4bb77721e357fd40" kindref="member">base_uint&lt;256&gt;::operator*=</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classbase__uint" kindref="compound">base_uint&lt;256&gt;</ref>&amp;<sp/>b);</highlight></codeline>
<codeline lineno="242"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/><ref refid="classbase__uint" kindref="compound">base_uint&lt;256&gt;</ref>&amp;<sp/><ref refid="classbase__uint_1ad6fa7e22ab995247c0bf298069732e1d" kindref="member">base_uint&lt;256&gt;::operator/=</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classbase__uint" kindref="compound">base_uint&lt;256&gt;</ref>&amp;<sp/>b);</highlight></codeline>
<codeline lineno="243"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="classbase__uint_1ac9777c80cfcf1355cf17258027ca35bb" kindref="member">base_uint&lt;256&gt;::CompareTo</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classbase__uint" kindref="compound">base_uint&lt;256&gt;</ref>&amp;)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="244"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classbase__uint_1a39817436d7ba143e8d52abc475097384" kindref="member">base_uint&lt;256&gt;::EqualTo</ref>(<ref refid="stdint_8h_1aaa5d1cd013383c889537491c3cfd9aad" kindref="member">uint64_t</ref>)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="245"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="classbase__uint_1aa701be5115bacf02c299b05598cf616d" kindref="member">base_uint&lt;256&gt;::getdouble</ref>()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="246"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>std::string<sp/><ref refid="classbase__uint_1ac9929c28600796a9acf75881bb750576" kindref="member">base_uint&lt;256&gt;::GetHex</ref>()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="247"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>std::string<sp/><ref refid="classbase__uint_1ac3080a72402cadf28dbc9f9b69cc60be" kindref="member">base_uint&lt;256&gt;::ToString</ref>()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="248"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classbase__uint_1ade1a897fac931f28f54998c92c797228" kindref="member">base_uint&lt;256&gt;::SetHex</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*);</highlight></codeline>
<codeline lineno="249"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classbase__uint_1ade1a897fac931f28f54998c92c797228" kindref="member">base_uint&lt;256&gt;::SetHex</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;);</highlight></codeline>
<codeline lineno="250"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="classbase__uint_1a4867652ab4163a10ac4e3d04f0352423" kindref="member">base_uint&lt;256&gt;::bits</ref>()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="251"><highlight class="normal"></highlight></codeline>
<codeline lineno="252"><highlight class="normal"></highlight><highlight class="comment">//<sp/>This<sp/>implementation<sp/>directly<sp/>uses<sp/>shifts<sp/>instead<sp/>of<sp/>going</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="253"><highlight class="normal"></highlight><highlight class="comment">//<sp/>through<sp/>an<sp/>intermediate<sp/>MPI<sp/>representation.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="254" refid="classuint256_1a54bc91c8535c43f881bba1fdb11ca7fa" refkind="member"><highlight class="normal"><ref refid="classuint256" kindref="compound">uint256</ref>&amp;<sp/><ref refid="classuint256_1a54bc91c8535c43f881bba1fdb11ca7fa" kindref="member">uint256::SetCompact</ref>(<ref refid="stdint_8h_1a435d1572bf3f880d55459d9805097f62" kindref="member">uint32_t</ref><sp/>nCompact,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal">*<sp/>pfNegative,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal">*<sp/>pfOverflow)</highlight></codeline>
<codeline lineno="255"><highlight class="normal">{</highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nSize<sp/>=<sp/>nCompact<sp/>&gt;&gt;<sp/>24;</highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="stdint_8h_1a435d1572bf3f880d55459d9805097f62" kindref="member">uint32_t</ref><sp/>nWord<sp/>=<sp/>nCompact<sp/>&amp;<sp/>0x007fffff;</highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(nSize<sp/>&lt;=<sp/>3)<sp/>{</highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nWord<sp/>&gt;&gt;=<sp/>8<sp/>*<sp/>(3<sp/>-<sp/>nSize);</highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal"><sp/>=<sp/>nWord;</highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal"><sp/>=<sp/>nWord;</highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal"><sp/>&lt;&lt;=<sp/>8<sp/>*<sp/>(nSize<sp/>-<sp/>3);</highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(pfNegative)</highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*pfNegative<sp/>=<sp/>nWord<sp/>!=<sp/>0<sp/>&amp;&amp;<sp/>(nCompact<sp/>&amp;<sp/>0x00800000)<sp/>!=<sp/>0;</highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(pfOverflow)</highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*pfOverflow<sp/>=<sp/>nWord<sp/>!=<sp/>0<sp/>&amp;&amp;<sp/>((nSize<sp/>&gt;<sp/>34)<sp/>||</highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(nWord<sp/>&gt;<sp/>0xff<sp/>&amp;&amp;<sp/>nSize<sp/>&gt;<sp/>33)<sp/>||</highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(nWord<sp/>&gt;<sp/>0xffff<sp/>&amp;&amp;<sp/>nSize<sp/>&gt;<sp/>32));</highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="272"><highlight class="normal">}</highlight></codeline>
<codeline lineno="273"><highlight class="normal"></highlight></codeline>
<codeline lineno="274" refid="classuint256_1af30486eee47f077f91ed762d0db6ddca" refkind="member"><highlight class="normal"><ref refid="stdint_8h_1a435d1572bf3f880d55459d9805097f62" kindref="member">uint32_t</ref><sp/><ref refid="classuint256_1af30486eee47f077f91ed762d0db6ddca" kindref="member">uint256::GetCompact</ref>(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>fNegative)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="275"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nSize<sp/>=<sp/>(<ref refid="classbase__uint_1a4867652ab4163a10ac4e3d04f0352423" kindref="member">bits</ref>()<sp/>+<sp/>7)<sp/>/<sp/>8;</highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="stdint_8h_1a435d1572bf3f880d55459d9805097f62" kindref="member">uint32_t</ref><sp/>nCompact<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(nSize<sp/>&lt;=<sp/>3)<sp/>{</highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nCompact<sp/>=<sp/><ref refid="classbase__uint_1abf39b71afc016b333b8996def4c6bc40" kindref="member">GetLow64</ref>()<sp/>&lt;&lt;<sp/>8<sp/>*<sp/>(3<sp/>-<sp/>nSize);</highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classuint256" kindref="compound">uint256</ref><sp/>bn<sp/>=<sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal"><sp/>&gt;&gt;<sp/>8<sp/>*<sp/>(nSize<sp/>-<sp/>3);</highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nCompact<sp/>=<sp/>bn.<ref refid="classbase__uint_1abf39b71afc016b333b8996def4c6bc40" kindref="member">GetLow64</ref>();</highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>0x00800000<sp/>bit<sp/>denotes<sp/>the<sp/>sign.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Thus,<sp/>if<sp/>it<sp/>is<sp/>already<sp/>set,<sp/>divide<sp/>the<sp/>mantissa<sp/>by<sp/>256<sp/>and<sp/>increase<sp/>the<sp/>exponent.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(nCompact<sp/>&amp;<sp/>0x00800000)<sp/>{</highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nCompact<sp/>&gt;&gt;=<sp/>8;</highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nSize++;</highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/><sp/><sp/>assert((nCompact<sp/>&amp;<sp/>~0x007fffff)<sp/>==<sp/>0);</highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(nSize<sp/>&lt;<sp/>256);</highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/><sp/><sp/>nCompact<sp/>|=<sp/>nSize<sp/>&lt;&lt;<sp/>24;</highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/><sp/><sp/>nCompact<sp/>|=<sp/>(fNegative<sp/>&amp;&amp;<sp/>(nCompact<sp/>&amp;<sp/>0x007fffff)<sp/>?<sp/>0x00800000<sp/>:<sp/>0);</highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>nCompact;</highlight></codeline>
<codeline lineno="295"><highlight class="normal">}</highlight></codeline>
<codeline lineno="296"><highlight class="normal"></highlight></codeline>
<codeline lineno="297"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>HashMix(<ref refid="stdint_8h_1a435d1572bf3f880d55459d9805097f62" kindref="member">uint32_t</ref>&amp;<sp/>a,<sp/><ref refid="stdint_8h_1a435d1572bf3f880d55459d9805097f62" kindref="member">uint32_t</ref>&amp;<sp/>b,<sp/><ref refid="stdint_8h_1a435d1572bf3f880d55459d9805097f62" kindref="member">uint32_t</ref>&amp;<sp/>c)</highlight></codeline>
<codeline lineno="298"><highlight class="normal">{</highlight></codeline>
<codeline lineno="299"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Taken<sp/>from<sp/>lookup3,<sp/>by<sp/>Bob<sp/>Jenkins.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="300"><highlight class="normal"><sp/><sp/><sp/><sp/>a<sp/>-=<sp/>c;</highlight></codeline>
<codeline lineno="301"><highlight class="normal"><sp/><sp/><sp/><sp/>a<sp/>^=<sp/>((c<sp/>&lt;&lt;<sp/>4)<sp/>|<sp/>(c<sp/>&gt;&gt;<sp/>28));</highlight></codeline>
<codeline lineno="302"><highlight class="normal"><sp/><sp/><sp/><sp/>c<sp/>+=<sp/>b;</highlight></codeline>
<codeline lineno="303"><highlight class="normal"><sp/><sp/><sp/><sp/>b<sp/>-=<sp/>a;</highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/><sp/><sp/>b<sp/>^=<sp/>((a<sp/>&lt;&lt;<sp/>6)<sp/>|<sp/>(a<sp/>&gt;&gt;<sp/>26));</highlight></codeline>
<codeline lineno="305"><highlight class="normal"><sp/><sp/><sp/><sp/>a<sp/>+=<sp/>c;</highlight></codeline>
<codeline lineno="306"><highlight class="normal"><sp/><sp/><sp/><sp/>c<sp/>-=<sp/>b;</highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/><sp/><sp/><sp/>c<sp/>^=<sp/>((b<sp/>&lt;&lt;<sp/>8)<sp/>|<sp/>(b<sp/>&gt;&gt;<sp/>24));</highlight></codeline>
<codeline lineno="308"><highlight class="normal"><sp/><sp/><sp/><sp/>b<sp/>+=<sp/>a;</highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/><sp/><sp/>a<sp/>-=<sp/>c;</highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/><sp/><sp/>a<sp/>^=<sp/>((c<sp/>&lt;&lt;<sp/>16)<sp/>|<sp/>(c<sp/>&gt;&gt;<sp/>16));</highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/><sp/><sp/>c<sp/>+=<sp/>b;</highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/><sp/><sp/>b<sp/>-=<sp/>a;</highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/><sp/><sp/>b<sp/>^=<sp/>((a<sp/>&lt;&lt;<sp/>19)<sp/>|<sp/>(a<sp/>&gt;&gt;<sp/>13));</highlight></codeline>
<codeline lineno="314"><highlight class="normal"><sp/><sp/><sp/><sp/>a<sp/>+=<sp/>c;</highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/><sp/><sp/>c<sp/>-=<sp/>b;</highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/><sp/><sp/>c<sp/>^=<sp/>((b<sp/>&lt;&lt;<sp/>4)<sp/>|<sp/>(b<sp/>&gt;&gt;<sp/>28));</highlight></codeline>
<codeline lineno="317"><highlight class="normal"><sp/><sp/><sp/><sp/>b<sp/>+=<sp/>a;</highlight></codeline>
<codeline lineno="318"><highlight class="normal">}</highlight></codeline>
<codeline lineno="319"><highlight class="normal"></highlight></codeline>
<codeline lineno="320"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>HashFinal(<ref refid="stdint_8h_1a435d1572bf3f880d55459d9805097f62" kindref="member">uint32_t</ref>&amp;<sp/>a,<sp/><ref refid="stdint_8h_1a435d1572bf3f880d55459d9805097f62" kindref="member">uint32_t</ref>&amp;<sp/>b,<sp/><ref refid="stdint_8h_1a435d1572bf3f880d55459d9805097f62" kindref="member">uint32_t</ref>&amp;<sp/>c)</highlight></codeline>
<codeline lineno="321"><highlight class="normal">{</highlight></codeline>
<codeline lineno="322"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Taken<sp/>from<sp/>lookup3,<sp/>by<sp/>Bob<sp/>Jenkins.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/><sp/><sp/>c<sp/>^=<sp/>b;</highlight></codeline>
<codeline lineno="324"><highlight class="normal"><sp/><sp/><sp/><sp/>c<sp/>-=<sp/>((b<sp/>&lt;&lt;<sp/>14)<sp/>|<sp/>(b<sp/>&gt;&gt;<sp/>18));</highlight></codeline>
<codeline lineno="325"><highlight class="normal"><sp/><sp/><sp/><sp/>a<sp/>^=<sp/>c;</highlight></codeline>
<codeline lineno="326"><highlight class="normal"><sp/><sp/><sp/><sp/>a<sp/>-=<sp/>((c<sp/>&lt;&lt;<sp/>11)<sp/>|<sp/>(c<sp/>&gt;&gt;<sp/>21));</highlight></codeline>
<codeline lineno="327"><highlight class="normal"><sp/><sp/><sp/><sp/>b<sp/>^=<sp/>a;</highlight></codeline>
<codeline lineno="328"><highlight class="normal"><sp/><sp/><sp/><sp/>b<sp/>-=<sp/>((a<sp/>&lt;&lt;<sp/>25)<sp/>|<sp/>(a<sp/>&gt;&gt;<sp/>7));</highlight></codeline>
<codeline lineno="329"><highlight class="normal"><sp/><sp/><sp/><sp/>c<sp/>^=<sp/>b;</highlight></codeline>
<codeline lineno="330"><highlight class="normal"><sp/><sp/><sp/><sp/>c<sp/>-=<sp/>((b<sp/>&lt;&lt;<sp/>16)<sp/>|<sp/>(b<sp/>&gt;&gt;<sp/>16));</highlight></codeline>
<codeline lineno="331"><highlight class="normal"><sp/><sp/><sp/><sp/>a<sp/>^=<sp/>c;</highlight></codeline>
<codeline lineno="332"><highlight class="normal"><sp/><sp/><sp/><sp/>a<sp/>-=<sp/>((c<sp/>&lt;&lt;<sp/>4)<sp/>|<sp/>(c<sp/>&gt;&gt;<sp/>28));</highlight></codeline>
<codeline lineno="333"><highlight class="normal"><sp/><sp/><sp/><sp/>b<sp/>^=<sp/>a;</highlight></codeline>
<codeline lineno="334"><highlight class="normal"><sp/><sp/><sp/><sp/>b<sp/>-=<sp/>((a<sp/>&lt;&lt;<sp/>14)<sp/>|<sp/>(a<sp/>&gt;&gt;<sp/>18));</highlight></codeline>
<codeline lineno="335"><highlight class="normal"><sp/><sp/><sp/><sp/>c<sp/>^=<sp/>b;</highlight></codeline>
<codeline lineno="336"><highlight class="normal"><sp/><sp/><sp/><sp/>c<sp/>-=<sp/>((b<sp/>&lt;&lt;<sp/>24)<sp/>|<sp/>(b<sp/>&gt;&gt;<sp/>8));</highlight></codeline>
<codeline lineno="337"><highlight class="normal">}</highlight></codeline>
<codeline lineno="338"><highlight class="normal"></highlight></codeline>
<codeline lineno="339" refid="classuint256_1a2ed8bd4e54421a37430768374a7e91b3" refkind="member"><highlight class="normal"><ref refid="stdint_8h_1aaa5d1cd013383c889537491c3cfd9aad" kindref="member">uint64_t</ref><sp/><ref refid="classuint256_1a2ed8bd4e54421a37430768374a7e91b3" kindref="member">uint256::GetHash</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classuint256" kindref="compound">uint256</ref>&amp;<sp/>salt)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="340"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="341"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="stdint_8h_1a435d1572bf3f880d55459d9805097f62" kindref="member">uint32_t</ref><sp/>a,<sp/>b,<sp/>c;</highlight></codeline>
<codeline lineno="342"><highlight class="normal"><sp/><sp/><sp/><sp/>a<sp/>=<sp/>b<sp/>=<sp/>c<sp/>=<sp/>0xdeadbeef<sp/>+<sp/>(<ref refid="classbase__uint_1ac5863fc3d36ac3e887fbca5e08efe046adf579395d753e2d9607ecd61424f0853" kindref="member">WIDTH</ref><sp/>&lt;&lt;<sp/>2);</highlight></codeline>
<codeline lineno="343"><highlight class="normal"></highlight></codeline>
<codeline lineno="344"><highlight class="normal"><sp/><sp/><sp/><sp/>a<sp/>+=<sp/><ref refid="classbase__uint_1a0edb1465d540fadd92b21659f27083a2" kindref="member">pn</ref>[0]<sp/>^<sp/>salt.<ref refid="classbase__uint_1a0edb1465d540fadd92b21659f27083a2" kindref="member">pn</ref>[0];</highlight></codeline>
<codeline lineno="345"><highlight class="normal"><sp/><sp/><sp/><sp/>b<sp/>+=<sp/><ref refid="classbase__uint_1a0edb1465d540fadd92b21659f27083a2" kindref="member">pn</ref>[1]<sp/>^<sp/>salt.<ref refid="classbase__uint_1a0edb1465d540fadd92b21659f27083a2" kindref="member">pn</ref>[1];</highlight></codeline>
<codeline lineno="346"><highlight class="normal"><sp/><sp/><sp/><sp/>c<sp/>+=<sp/><ref refid="classbase__uint_1a0edb1465d540fadd92b21659f27083a2" kindref="member">pn</ref>[2]<sp/>^<sp/>salt.<ref refid="classbase__uint_1a0edb1465d540fadd92b21659f27083a2" kindref="member">pn</ref>[2];</highlight></codeline>
<codeline lineno="347"><highlight class="normal"><sp/><sp/><sp/><sp/>HashMix(a,<sp/>b,<sp/>c);</highlight></codeline>
<codeline lineno="348"><highlight class="normal"><sp/><sp/><sp/><sp/>a<sp/>+=<sp/><ref refid="classbase__uint_1a0edb1465d540fadd92b21659f27083a2" kindref="member">pn</ref>[3]<sp/>^<sp/>salt.<ref refid="classbase__uint_1a0edb1465d540fadd92b21659f27083a2" kindref="member">pn</ref>[3];</highlight></codeline>
<codeline lineno="349"><highlight class="normal"><sp/><sp/><sp/><sp/>b<sp/>+=<sp/><ref refid="classbase__uint_1a0edb1465d540fadd92b21659f27083a2" kindref="member">pn</ref>[4]<sp/>^<sp/>salt.<ref refid="classbase__uint_1a0edb1465d540fadd92b21659f27083a2" kindref="member">pn</ref>[4];</highlight></codeline>
<codeline lineno="350"><highlight class="normal"><sp/><sp/><sp/><sp/>c<sp/>+=<sp/><ref refid="classbase__uint_1a0edb1465d540fadd92b21659f27083a2" kindref="member">pn</ref>[5]<sp/>^<sp/>salt.<ref refid="classbase__uint_1a0edb1465d540fadd92b21659f27083a2" kindref="member">pn</ref>[5];</highlight></codeline>
<codeline lineno="351"><highlight class="normal"><sp/><sp/><sp/><sp/>HashMix(a,<sp/>b,<sp/>c);</highlight></codeline>
<codeline lineno="352"><highlight class="normal"><sp/><sp/><sp/><sp/>a<sp/>+=<sp/><ref refid="classbase__uint_1a0edb1465d540fadd92b21659f27083a2" kindref="member">pn</ref>[6]<sp/>^<sp/>salt.<ref refid="classbase__uint_1a0edb1465d540fadd92b21659f27083a2" kindref="member">pn</ref>[6];</highlight></codeline>
<codeline lineno="353"><highlight class="normal"><sp/><sp/><sp/><sp/>b<sp/>+=<sp/><ref refid="classbase__uint_1a0edb1465d540fadd92b21659f27083a2" kindref="member">pn</ref>[7]<sp/>^<sp/>salt.<ref refid="classbase__uint_1a0edb1465d540fadd92b21659f27083a2" kindref="member">pn</ref>[7];</highlight></codeline>
<codeline lineno="354"><highlight class="normal"><sp/><sp/><sp/><sp/>HashFinal(a,<sp/>b,<sp/>c);</highlight></codeline>
<codeline lineno="355"><highlight class="normal"></highlight></codeline>
<codeline lineno="356"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>((((<ref refid="stdint_8h_1aaa5d1cd013383c889537491c3cfd9aad" kindref="member">uint64_t</ref>)b)<sp/>&lt;&lt;<sp/>32)<sp/>|<sp/>c);</highlight></codeline>
<codeline lineno="357"><highlight class="normal">}</highlight></codeline>
<codeline lineno="358"><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="/home/dev/ds-160209/src/uint256.cpp"/>
  </compounddef>
</doxygen>
