<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.9.1">
  <compounddef id="group__impl_8h" kind="file" language="C++">
    <compoundname>group_impl.h</compoundname>
    <includes local="no">string.h</includes>
    <includes refid="num_8h" local="yes">num.h</includes>
    <includes refid="field_8h" local="yes">field.h</includes>
    <includes refid="group_8h" local="yes">group.h</includes>
    <includedby refid="bench__internal_8c" local="yes">/home/dev/ds-160209/src/secp256k1/src/bench_internal.c</includedby>
    <includedby refid="secp256k1_8c" local="yes">/home/dev/ds-160209/src/secp256k1/src/secp256k1.c</includedby>
    <includedby refid="gen__context_8c" local="yes">/home/dev/ds-160209/src/secp256k1/src/gen_context.c</includedby>
    <incdepgraph>
      <node id="51938">
        <label>num.h</label>
        <link refid="num_8h"/>
      </node>
      <node id="51940">
        <label>group.h</label>
        <link refid="group_8h"/>
        <childnode refid="51938" relation="include">
        </childnode>
        <childnode refid="51939" relation="include">
        </childnode>
      </node>
      <node id="51936">
        <label>/home/dev/ds-160209/src/secp256k1/src/group_impl.h</label>
        <link refid="group_impl.h"/>
        <childnode refid="51937" relation="include">
        </childnode>
        <childnode refid="51938" relation="include">
        </childnode>
        <childnode refid="51939" relation="include">
        </childnode>
        <childnode refid="51940" relation="include">
        </childnode>
      </node>
      <node id="51937">
        <label>string.h</label>
      </node>
      <node id="51939">
        <label>field.h</label>
        <link refid="field_8h"/>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="51945">
        <label>/home/dev/ds-160209/src/secp256k1/src/gen_context.c</label>
        <link refid="gen__context_8c"/>
      </node>
      <node id="51944">
        <label>/home/dev/ds-160209/src/secp256k1/src/tests.c</label>
        <link refid="tests_8c"/>
      </node>
      <node id="51943">
        <label>/home/dev/ds-160209/src/secp256k1/src/secp256k1.c</label>
        <link refid="secp256k1_8c"/>
        <childnode refid="51942" relation="include">
        </childnode>
        <childnode refid="51944" relation="include">
        </childnode>
      </node>
      <node id="51941">
        <label>/home/dev/ds-160209/src/secp256k1/src/group_impl.h</label>
        <link refid="group_impl.h"/>
        <childnode refid="51942" relation="include">
        </childnode>
        <childnode refid="51943" relation="include">
        </childnode>
        <childnode refid="51945" relation="include">
        </childnode>
      </node>
      <node id="51942">
        <label>/home/dev/ds-160209/src/secp256k1/src/bench_internal.c</label>
        <link refid="bench__internal_8c"/>
      </node>
    </invincdepgraph>
      <sectiondef kind="var">
      <memberdef kind="variable" id="group__impl_8h_1ac2075a99877abe469ea60a119fe68e6c" prot="public" static="yes" mutable="no">
        <type>const <ref refid="structsecp256k1__ge" kindref="compound">secp256k1_ge</ref></type>
        <definition>const secp256k1_ge secp256k1_ge_const_g</definition>
        <argsstring></argsstring>
        <name>secp256k1_ge_const_g</name>
        <initializer>= <ref refid="group_8h_1adb0cb248ca6d0aabe3a82423233e6ce3" kindref="member">SECP256K1_GE_CONST</ref>(
    0x79BE667EUL, 0xF9DCBBACUL, 0x55A06295UL, 0xCE870B07UL,
    0x029BFCDBUL, 0x2DCE28D9UL, 0x59F2815BUL, 0x16F81798UL,
    0x483ADA77UL, 0x26A3C465UL, 0x5DA4FBFCUL, 0x0E1108A8UL,
    0xFD17B448UL, 0xA6855419UL, 0x9C47D08FUL, 0xFB10D4B8UL
)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Generator for secp256k1, value &apos;g&apos; defined in &quot;Standards for Efficient Cryptography&quot; (SEC2) 2.7.1. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/secp256k1/src/group_impl.h" line="19" column="1" bodyfile="/home/dev/ds-160209/src/secp256k1/src/group_impl.h" bodystart="19" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="group__impl_8h_1a6492f6aad16e545239c0ec52780d2e1f" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void secp256k1_ge_set_gej_zinv</definition>
        <argsstring>(secp256k1_ge *r, const secp256k1_gej *a, const secp256k1_fe *zi)</argsstring>
        <name>secp256k1_ge_set_gej_zinv</name>
        <param>
          <type><ref refid="structsecp256k1__ge" kindref="compound">secp256k1_ge</ref> *</type>
          <declname>r</declname>
        </param>
        <param>
          <type>const <ref refid="structsecp256k1__gej" kindref="compound">secp256k1_gej</ref> *</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="structsecp256k1__fe" kindref="compound">secp256k1_fe</ref> *</type>
          <declname>zi</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/secp256k1/src/group_impl.h" line="26" column="1" bodyfile="/home/dev/ds-160209/src/secp256k1/src/group_impl.h" bodystart="26" bodyend="34"/>
      </memberdef>
      <memberdef kind="function" id="group__impl_8h_1a34ab3d1a9a0a7ff0ed1cedff9db5f73c" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void secp256k1_ge_set_xy</definition>
        <argsstring>(secp256k1_ge *r, const secp256k1_fe *x, const secp256k1_fe *y)</argsstring>
        <name>secp256k1_ge_set_xy</name>
        <param>
          <type><ref refid="structsecp256k1__ge" kindref="compound">secp256k1_ge</ref> *</type>
          <declname>r</declname>
        </param>
        <param>
          <type>const <ref refid="structsecp256k1__fe" kindref="compound">secp256k1_fe</ref> *</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const <ref refid="structsecp256k1__fe" kindref="compound">secp256k1_fe</ref> *</type>
          <declname>y</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/secp256k1/src/group_impl.h" line="36" column="1" bodyfile="/home/dev/ds-160209/src/secp256k1/src/group_impl.h" bodystart="36" bodyend="40"/>
      </memberdef>
      <memberdef kind="function" id="group__impl_8h_1ac83592db46af97faf7ba9b9a39a1f6ff" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>static int secp256k1_ge_is_infinity</definition>
        <argsstring>(const secp256k1_ge *a)</argsstring>
        <name>secp256k1_ge_is_infinity</name>
        <param>
          <type>const <ref refid="structsecp256k1__ge" kindref="compound">secp256k1_ge</ref> *</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/secp256k1/src/group_impl.h" line="42" column="1" bodyfile="/home/dev/ds-160209/src/secp256k1/src/group_impl.h" bodystart="42" bodyend="44"/>
      </memberdef>
      <memberdef kind="function" id="group__impl_8h_1abcb34de0cfdf82a125e059f4f98de1d9" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void secp256k1_ge_neg</definition>
        <argsstring>(secp256k1_ge *r, const secp256k1_ge *a)</argsstring>
        <name>secp256k1_ge_neg</name>
        <param>
          <type><ref refid="structsecp256k1__ge" kindref="compound">secp256k1_ge</ref> *</type>
          <declname>r</declname>
        </param>
        <param>
          <type>const <ref refid="structsecp256k1__ge" kindref="compound">secp256k1_ge</ref> *</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/secp256k1/src/group_impl.h" line="46" column="1" bodyfile="/home/dev/ds-160209/src/secp256k1/src/group_impl.h" bodystart="46" bodyend="50"/>
      </memberdef>
      <memberdef kind="function" id="group__impl_8h_1aa511eebf8cd7419763f06555ed4fb62d" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void secp256k1_ge_set_gej</definition>
        <argsstring>(secp256k1_ge *r, secp256k1_gej *a)</argsstring>
        <name>secp256k1_ge_set_gej</name>
        <param>
          <type><ref refid="structsecp256k1__ge" kindref="compound">secp256k1_ge</ref> *</type>
          <declname>r</declname>
        </param>
        <param>
          <type><ref refid="structsecp256k1__gej" kindref="compound">secp256k1_gej</ref> *</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/secp256k1/src/group_impl.h" line="52" column="1" bodyfile="/home/dev/ds-160209/src/secp256k1/src/group_impl.h" bodystart="52" bodyend="63"/>
      </memberdef>
      <memberdef kind="function" id="group__impl_8h_1aea803cf52c0f33c2cb3bfb82d5790d71" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void secp256k1_ge_set_gej_var</definition>
        <argsstring>(secp256k1_ge *r, secp256k1_gej *a)</argsstring>
        <name>secp256k1_ge_set_gej_var</name>
        <param>
          <type><ref refid="structsecp256k1__ge" kindref="compound">secp256k1_ge</ref> *</type>
          <declname>r</declname>
        </param>
        <param>
          <type><ref refid="structsecp256k1__gej" kindref="compound">secp256k1_gej</ref> *</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/secp256k1/src/group_impl.h" line="65" column="1" bodyfile="/home/dev/ds-160209/src/secp256k1/src/group_impl.h" bodystart="65" bodyend="79"/>
      </memberdef>
      <memberdef kind="function" id="group__impl_8h_1ada58b0cf328a74cfdd1f8b35083668a1" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void secp256k1_ge_set_all_gej_var</definition>
        <argsstring>(size_t len, secp256k1_ge *r, const secp256k1_gej *a, const secp256k1_callback *cb)</argsstring>
        <name>secp256k1_ge_set_all_gej_var</name>
        <param>
          <type>size_t</type>
          <declname>len</declname>
        </param>
        <param>
          <type><ref refid="structsecp256k1__ge" kindref="compound">secp256k1_ge</ref> *</type>
          <declname>r</declname>
        </param>
        <param>
          <type>const <ref refid="structsecp256k1__gej" kindref="compound">secp256k1_gej</ref> *</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="structsecp256k1__callback" kindref="compound">secp256k1_callback</ref> *</type>
          <declname>cb</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/secp256k1/src/group_impl.h" line="81" column="1" bodyfile="/home/dev/ds-160209/src/secp256k1/src/group_impl.h" bodystart="81" bodyend="105"/>
      </memberdef>
      <memberdef kind="function" id="group__impl_8h_1a1cf9611464711ed63bde94d92ecc70de" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void secp256k1_ge_set_table_gej_var</definition>
        <argsstring>(size_t len, secp256k1_ge *r, const secp256k1_gej *a, const secp256k1_fe *zr)</argsstring>
        <name>secp256k1_ge_set_table_gej_var</name>
        <param>
          <type>size_t</type>
          <declname>len</declname>
        </param>
        <param>
          <type><ref refid="structsecp256k1__ge" kindref="compound">secp256k1_ge</ref> *</type>
          <declname>r</declname>
        </param>
        <param>
          <type>const <ref refid="structsecp256k1__gej" kindref="compound">secp256k1_gej</ref> *</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="structsecp256k1__fe" kindref="compound">secp256k1_fe</ref> *</type>
          <declname>zr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/secp256k1/src/group_impl.h" line="107" column="1" bodyfile="/home/dev/ds-160209/src/secp256k1/src/group_impl.h" bodystart="107" bodyend="123"/>
      </memberdef>
      <memberdef kind="function" id="group__impl_8h_1a5391d63ab98be9202d5f14611133fe35" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void secp256k1_ge_globalz_set_table_gej</definition>
        <argsstring>(size_t len, secp256k1_ge *r, secp256k1_fe *globalz, const secp256k1_gej *a, const secp256k1_fe *zr)</argsstring>
        <name>secp256k1_ge_globalz_set_table_gej</name>
        <param>
          <type>size_t</type>
          <declname>len</declname>
        </param>
        <param>
          <type><ref refid="structsecp256k1__ge" kindref="compound">secp256k1_ge</ref> *</type>
          <declname>r</declname>
        </param>
        <param>
          <type><ref refid="structsecp256k1__fe" kindref="compound">secp256k1_fe</ref> *</type>
          <declname>globalz</declname>
        </param>
        <param>
          <type>const <ref refid="structsecp256k1__gej" kindref="compound">secp256k1_gej</ref> *</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="structsecp256k1__fe" kindref="compound">secp256k1_fe</ref> *</type>
          <declname>zr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/secp256k1/src/group_impl.h" line="125" column="1" bodyfile="/home/dev/ds-160209/src/secp256k1/src/group_impl.h" bodystart="125" bodyend="146"/>
      </memberdef>
      <memberdef kind="function" id="group__impl_8h_1a2c6b24a2db08260d89e891eab7035b2c" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void secp256k1_gej_set_infinity</definition>
        <argsstring>(secp256k1_gej *r)</argsstring>
        <name>secp256k1_gej_set_infinity</name>
        <param>
          <type><ref refid="structsecp256k1__gej" kindref="compound">secp256k1_gej</ref> *</type>
          <declname>r</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/secp256k1/src/group_impl.h" line="148" column="1" bodyfile="/home/dev/ds-160209/src/secp256k1/src/group_impl.h" bodystart="148" bodyend="153"/>
      </memberdef>
      <memberdef kind="function" id="group__impl_8h_1a2454dfbe1e75eba118d2c0a4184a9acc" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void secp256k1_gej_clear</definition>
        <argsstring>(secp256k1_gej *r)</argsstring>
        <name>secp256k1_gej_clear</name>
        <param>
          <type><ref refid="structsecp256k1__gej" kindref="compound">secp256k1_gej</ref> *</type>
          <declname>r</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/secp256k1/src/group_impl.h" line="155" column="1" bodyfile="/home/dev/ds-160209/src/secp256k1/src/group_impl.h" bodystart="155" bodyend="160"/>
      </memberdef>
      <memberdef kind="function" id="group__impl_8h_1a34793cf48794f089bb28597d1a9f23b2" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void secp256k1_ge_clear</definition>
        <argsstring>(secp256k1_ge *r)</argsstring>
        <name>secp256k1_ge_clear</name>
        <param>
          <type><ref refid="structsecp256k1__ge" kindref="compound">secp256k1_ge</ref> *</type>
          <declname>r</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/secp256k1/src/group_impl.h" line="162" column="1" bodyfile="/home/dev/ds-160209/src/secp256k1/src/group_impl.h" bodystart="162" bodyend="166"/>
      </memberdef>
      <memberdef kind="function" id="group__impl_8h_1a767d4255b822bcd84f84d9b440b3af86" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>static int secp256k1_ge_set_xquad_var</definition>
        <argsstring>(secp256k1_ge *r, const secp256k1_fe *x)</argsstring>
        <name>secp256k1_ge_set_xquad_var</name>
        <param>
          <type><ref refid="structsecp256k1__ge" kindref="compound">secp256k1_ge</ref> *</type>
          <declname>r</declname>
        </param>
        <param>
          <type>const <ref refid="structsecp256k1__fe" kindref="compound">secp256k1_fe</ref> *</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/secp256k1/src/group_impl.h" line="168" column="1" bodyfile="/home/dev/ds-160209/src/secp256k1/src/group_impl.h" bodystart="168" bodyend="177"/>
      </memberdef>
      <memberdef kind="function" id="group__impl_8h_1a3c3d9154b093bb4ed48ba55e4c28a0b5" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>static int secp256k1_ge_set_xo_var</definition>
        <argsstring>(secp256k1_ge *r, const secp256k1_fe *x, int odd)</argsstring>
        <name>secp256k1_ge_set_xo_var</name>
        <param>
          <type><ref refid="structsecp256k1__ge" kindref="compound">secp256k1_ge</ref> *</type>
          <declname>r</declname>
        </param>
        <param>
          <type>const <ref refid="structsecp256k1__fe" kindref="compound">secp256k1_fe</ref> *</type>
          <declname>x</declname>
        </param>
        <param>
          <type>int</type>
          <declname>odd</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/secp256k1/src/group_impl.h" line="179" column="1" bodyfile="/home/dev/ds-160209/src/secp256k1/src/group_impl.h" bodystart="179" bodyend="189"/>
      </memberdef>
      <memberdef kind="function" id="group__impl_8h_1ad5f813e26afb239f03e83f0e61e05498" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void secp256k1_gej_set_ge</definition>
        <argsstring>(secp256k1_gej *r, const secp256k1_ge *a)</argsstring>
        <name>secp256k1_gej_set_ge</name>
        <param>
          <type><ref refid="structsecp256k1__gej" kindref="compound">secp256k1_gej</ref> *</type>
          <declname>r</declname>
        </param>
        <param>
          <type>const <ref refid="structsecp256k1__ge" kindref="compound">secp256k1_ge</ref> *</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/secp256k1/src/group_impl.h" line="191" column="1" bodyfile="/home/dev/ds-160209/src/secp256k1/src/group_impl.h" bodystart="191" bodyend="196"/>
      </memberdef>
      <memberdef kind="function" id="group__impl_8h_1aa32fc177f081f16d5979045d3632cf8b" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>static int secp256k1_gej_eq_x_var</definition>
        <argsstring>(const secp256k1_fe *x, const secp256k1_gej *a)</argsstring>
        <name>secp256k1_gej_eq_x_var</name>
        <param>
          <type>const <ref refid="structsecp256k1__fe" kindref="compound">secp256k1_fe</ref> *</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const <ref refid="structsecp256k1__gej" kindref="compound">secp256k1_gej</ref> *</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/secp256k1/src/group_impl.h" line="198" column="1" bodyfile="/home/dev/ds-160209/src/secp256k1/src/group_impl.h" bodystart="198" bodyend="204"/>
      </memberdef>
      <memberdef kind="function" id="group__impl_8h_1af9194949a7aaf18aceab1dee73fe4027" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void secp256k1_gej_neg</definition>
        <argsstring>(secp256k1_gej *r, const secp256k1_gej *a)</argsstring>
        <name>secp256k1_gej_neg</name>
        <param>
          <type><ref refid="structsecp256k1__gej" kindref="compound">secp256k1_gej</ref> *</type>
          <declname>r</declname>
        </param>
        <param>
          <type>const <ref refid="structsecp256k1__gej" kindref="compound">secp256k1_gej</ref> *</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/secp256k1/src/group_impl.h" line="206" column="1" bodyfile="/home/dev/ds-160209/src/secp256k1/src/group_impl.h" bodystart="206" bodyend="213"/>
      </memberdef>
      <memberdef kind="function" id="group__impl_8h_1a33786d5853579c92d46fac51f6a40093" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>static int secp256k1_gej_is_infinity</definition>
        <argsstring>(const secp256k1_gej *a)</argsstring>
        <name>secp256k1_gej_is_infinity</name>
        <param>
          <type>const <ref refid="structsecp256k1__gej" kindref="compound">secp256k1_gej</ref> *</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/secp256k1/src/group_impl.h" line="215" column="1" bodyfile="/home/dev/ds-160209/src/secp256k1/src/group_impl.h" bodystart="215" bodyend="217"/>
      </memberdef>
      <memberdef kind="function" id="group__impl_8h_1aaf14c34acab0a279530f58c7e7d50749" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>static int secp256k1_gej_is_valid_var</definition>
        <argsstring>(const secp256k1_gej *a)</argsstring>
        <name>secp256k1_gej_is_valid_var</name>
        <param>
          <type>const <ref refid="structsecp256k1__gej" kindref="compound">secp256k1_gej</ref> *</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>y^2 = x^3 + 7 (Y/Z^3)^2 = (X/Z^2)^3 + 7 Y^2 / Z^6 = X^3 / Z^6 + 7 Y^2 = X^3 + 7*Z^6</para>        </inbodydescription>
        <location file="/home/dev/ds-160209/src/secp256k1/src/group_impl.h" line="219" column="1" bodyfile="/home/dev/ds-160209/src/secp256k1/src/group_impl.h" bodystart="219" bodyend="237"/>
      </memberdef>
      <memberdef kind="function" id="group__impl_8h_1a83600b0c4d8e95a8b2e730b4e2f207dc" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>static int secp256k1_ge_is_valid_var</definition>
        <argsstring>(const secp256k1_ge *a)</argsstring>
        <name>secp256k1_ge_is_valid_var</name>
        <param>
          <type>const <ref refid="structsecp256k1__ge" kindref="compound">secp256k1_ge</ref> *</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/secp256k1/src/group_impl.h" line="239" column="1" bodyfile="/home/dev/ds-160209/src/secp256k1/src/group_impl.h" bodystart="239" bodyend="251"/>
      </memberdef>
      <memberdef kind="function" id="group__impl_8h_1a033aa434a4d0838f649ad757dd44db46" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void secp256k1_gej_double_var</definition>
        <argsstring>(secp256k1_gej *r, const secp256k1_gej *a, secp256k1_fe *rzr)</argsstring>
        <name>secp256k1_gej_double_var</name>
        <param>
          <type><ref refid="structsecp256k1__gej" kindref="compound">secp256k1_gej</ref> *</type>
          <declname>r</declname>
        </param>
        <param>
          <type>const <ref refid="structsecp256k1__gej" kindref="compound">secp256k1_gej</ref> *</type>
          <declname>a</declname>
        </param>
        <param>
          <type><ref refid="structsecp256k1__fe" kindref="compound">secp256k1_fe</ref> *</type>
          <declname>rzr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>For secp256k1, 2Q is infinity if and only if Q is infinity. This is because if 2Q = infinity, Q must equal -Q, or that Q.y == -(Q.y), or Q.y is 0. For a point on y^2 = x^3 + 7 to have y=0, x^3 must be -7 mod p. However, -7 has no cube root mod p.</para>        </inbodydescription>
        <location file="/home/dev/ds-160209/src/secp256k1/src/group_impl.h" line="253" column="1" bodyfile="/home/dev/ds-160209/src/secp256k1/src/group_impl.h" bodystart="253" bodyend="294"/>
      </memberdef>
      <memberdef kind="function" id="group__impl_8h_1accf4e481cd660b1df01b4b90f5d28bb4" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="secp256k1_8h_1a7ddc487fd46aee88f21cabedb7268b1e" kindref="member">SECP256K1_INLINE</ref> void</type>
        <definition>static SECP256K1_INLINE void secp256k1_gej_double_nonzero</definition>
        <argsstring>(secp256k1_gej *r, const secp256k1_gej *a, secp256k1_fe *rzr)</argsstring>
        <name>secp256k1_gej_double_nonzero</name>
        <param>
          <type><ref refid="structsecp256k1__gej" kindref="compound">secp256k1_gej</ref> *</type>
          <declname>r</declname>
        </param>
        <param>
          <type>const <ref refid="structsecp256k1__gej" kindref="compound">secp256k1_gej</ref> *</type>
          <declname>a</declname>
        </param>
        <param>
          <type><ref refid="structsecp256k1__fe" kindref="compound">secp256k1_fe</ref> *</type>
          <declname>rzr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/secp256k1/src/group_impl.h" line="296" column="1" bodyfile="/home/dev/ds-160209/src/secp256k1/src/group_impl.h" bodystart="296" bodyend="299"/>
      </memberdef>
      <memberdef kind="function" id="group__impl_8h_1a8df21f3ef7412e6c4d39fb67dc0140c6" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void secp256k1_gej_add_var</definition>
        <argsstring>(secp256k1_gej *r, const secp256k1_gej *a, const secp256k1_gej *b, secp256k1_fe *rzr)</argsstring>
        <name>secp256k1_gej_add_var</name>
        <param>
          <type><ref refid="structsecp256k1__gej" kindref="compound">secp256k1_gej</ref> *</type>
          <declname>r</declname>
        </param>
        <param>
          <type>const <ref refid="structsecp256k1__gej" kindref="compound">secp256k1_gej</ref> *</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="structsecp256k1__gej" kindref="compound">secp256k1_gej</ref> *</type>
          <declname>b</declname>
        </param>
        <param>
          <type><ref refid="structsecp256k1__fe" kindref="compound">secp256k1_fe</ref> *</type>
          <declname>rzr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/secp256k1/src/group_impl.h" line="301" column="1" bodyfile="/home/dev/ds-160209/src/secp256k1/src/group_impl.h" bodystart="301" bodyend="352"/>
      </memberdef>
      <memberdef kind="function" id="group__impl_8h_1a4d0338f50b08d082caa32f8e72707b55" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void secp256k1_gej_add_ge_var</definition>
        <argsstring>(secp256k1_gej *r, const secp256k1_gej *a, const secp256k1_ge *b, secp256k1_fe *rzr)</argsstring>
        <name>secp256k1_gej_add_ge_var</name>
        <param>
          <type><ref refid="structsecp256k1__gej" kindref="compound">secp256k1_gej</ref> *</type>
          <declname>r</declname>
        </param>
        <param>
          <type>const <ref refid="structsecp256k1__gej" kindref="compound">secp256k1_gej</ref> *</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="structsecp256k1__ge" kindref="compound">secp256k1_ge</ref> *</type>
          <declname>b</declname>
        </param>
        <param>
          <type><ref refid="structsecp256k1__fe" kindref="compound">secp256k1_fe</ref> *</type>
          <declname>rzr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/secp256k1/src/group_impl.h" line="354" column="1" bodyfile="/home/dev/ds-160209/src/secp256k1/src/group_impl.h" bodystart="354" bodyend="401"/>
      </memberdef>
      <memberdef kind="function" id="group__impl_8h_1a180d4e54e906f101ce0f1e74563ce5f6" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void secp256k1_gej_add_zinv_var</definition>
        <argsstring>(secp256k1_gej *r, const secp256k1_gej *a, const secp256k1_ge *b, const secp256k1_fe *bzinv)</argsstring>
        <name>secp256k1_gej_add_zinv_var</name>
        <param>
          <type><ref refid="structsecp256k1__gej" kindref="compound">secp256k1_gej</ref> *</type>
          <declname>r</declname>
        </param>
        <param>
          <type>const <ref refid="structsecp256k1__gej" kindref="compound">secp256k1_gej</ref> *</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="structsecp256k1__ge" kindref="compound">secp256k1_ge</ref> *</type>
          <declname>b</declname>
        </param>
        <param>
          <type>const <ref refid="structsecp256k1__fe" kindref="compound">secp256k1_fe</ref> *</type>
          <declname>bzinv</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>We need to calculate (rx,ry,rz) = (ax,ay,az) + (bx,by,1/bzinv). Due to secp256k1&apos;s isomorphism we can multiply the Z coordinates on both sides by bzinv, and get: (rx,ry,rz*bzinv) = (ax,ay,az*bzinv) + (bx,by,1). This means that (rx,ry,rz) can be calculated as (ax,ay,az*bzinv) + (bx,by,1), when not applying the bzinv factor to rz. The variable az below holds the modified Z coordinate for a, which is used for the computation of rx and ry, but not for rz.</para>        </inbodydescription>
        <location file="/home/dev/ds-160209/src/secp256k1/src/group_impl.h" line="403" column="1" bodyfile="/home/dev/ds-160209/src/secp256k1/src/group_impl.h" bodystart="403" bodyend="457"/>
      </memberdef>
      <memberdef kind="function" id="group__impl_8h_1a586b55d5921edcd68799f584c0a3c58d" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void secp256k1_gej_add_ge</definition>
        <argsstring>(secp256k1_gej *r, const secp256k1_gej *a, const secp256k1_ge *b)</argsstring>
        <name>secp256k1_gej_add_ge</name>
        <param>
          <type><ref refid="structsecp256k1__gej" kindref="compound">secp256k1_gej</ref> *</type>
          <declname>r</declname>
        </param>
        <param>
          <type>const <ref refid="structsecp256k1__gej" kindref="compound">secp256k1_gej</ref> *</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="structsecp256k1__ge" kindref="compound">secp256k1_ge</ref> *</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>In: Eric Brier and Marc Joye, Weierstrass Elliptic Curves and Side-Channel Attacks. In D. Naccache and P. Paillier, Eds., Public Key Cryptography, vol. 2274 of Lecture Notes in Computer Science, pages 335-345. Springer-Verlag, 2002. we find as solution for a unified addition/doubling formula: lambda = ((x1 + x2)^2 - x1 * x2 + a) / (y1 + y2), with a = 0 for secp256k1&apos;s curve equation. x3 = lambda^2 - (x1 + x2) 2*y3 = lambda * (x1 + x2 - 2 * x3) - (y1 + y2).</para><para>Substituting x_i = Xi / Zi^2 and yi = Yi / Zi^3, for i=1,2,3, gives: U1 = X1*Z2^2, U2 = X2*Z1^2 S1 = Y1*Z2^3, S2 = Y2*Z1^3 Z = Z1*Z2 T = U1+U2 M = S1+S2 Q = T*M^2 R = T^2-U1*U2 X3 = 4*(R^2-Q) Y3 = 4*(R*(3*Q-2*R^2)-M^4) Z3 = 2*M*Z (Note that the paper uses xi = Xi / Zi and yi = Yi / Zi instead.)</para><para>This formula has the benefit of being the same for both addition of distinct points and doubling. However, it breaks down in the case that either point is infinity, or that y1 = -y2. We handle these cases in the following ways:</para><para><itemizedlist>
<listitem><para>If b is infinity we simply bail by means of a VERIFY_CHECK.</para></listitem><listitem><para>If a is infinity, we detect this, and at the end of the computation replace the result (which will be meaningless, but we compute to be constant-time) with b.x : b.y : 1.</para></listitem><listitem><para>If a = -b, we have y1 = -y2, which is a degenerate case. But here the answer is infinity, so we simply set the infinity flag of the result, overriding the computed values without even needing to cmov.</para></listitem><listitem><para>If y1 = -y2 but x1 != x2, which does occur thanks to certain properties of our curve (specifically, 1 has nontrivial cube roots in our field, and the curve equation has no x coefficient) then the answer is not infinity but also not given by the above equation. In this case, we cmov in place an alternate expression for lambda. Specifically (y1 - y2)/(x1 - x2). Where both these expressions for lambda are defined, they are equal, and can be obtained from each other by multiplication by (y1 + y2)/(y1 + y2) then substitution of x^3 + 7 for y^2 (using the curve equation). For all pairs of nonzero points (a, b) at least one is defined, so this covers everything.</para></listitem></itemizedlist>
</para><para>If lambda = R/M = 0/0 we have a problem (except in the &quot;trivial&quot; case that Z = z1z2 = 0, and this is special-cased later on).</para><para>In case a-&gt;infinity == 1, replace r with (b-&gt;x, b-&gt;y, 1). </para>        </inbodydescription>
        <location file="/home/dev/ds-160209/src/secp256k1/src/group_impl.h" line="460" column="1" bodyfile="/home/dev/ds-160209/src/secp256k1/src/group_impl.h" bodystart="460" bodyend="580"/>
      </memberdef>
      <memberdef kind="function" id="group__impl_8h_1a9ca39d1f8a0d1d833dc682f0fc318137" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void secp256k1_gej_rescale</definition>
        <argsstring>(secp256k1_gej *r, const secp256k1_fe *s)</argsstring>
        <name>secp256k1_gej_rescale</name>
        <param>
          <type><ref refid="structsecp256k1__gej" kindref="compound">secp256k1_gej</ref> *</type>
          <declname>r</declname>
        </param>
        <param>
          <type>const <ref refid="structsecp256k1__fe" kindref="compound">secp256k1_fe</ref> *</type>
          <declname>s</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/secp256k1/src/group_impl.h" line="582" column="1" bodyfile="/home/dev/ds-160209/src/secp256k1/src/group_impl.h" bodystart="582" bodyend="591"/>
      </memberdef>
      <memberdef kind="function" id="group__impl_8h_1ad6499ae629f998e50d8614869ee3c67f" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void secp256k1_ge_to_storage</definition>
        <argsstring>(secp256k1_ge_storage *r, const secp256k1_ge *a)</argsstring>
        <name>secp256k1_ge_to_storage</name>
        <param>
          <type><ref refid="structsecp256k1__ge__storage" kindref="compound">secp256k1_ge_storage</ref> *</type>
          <declname>r</declname>
        </param>
        <param>
          <type>const <ref refid="structsecp256k1__ge" kindref="compound">secp256k1_ge</ref> *</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/secp256k1/src/group_impl.h" line="593" column="1" bodyfile="/home/dev/ds-160209/src/secp256k1/src/group_impl.h" bodystart="593" bodyend="602"/>
      </memberdef>
      <memberdef kind="function" id="group__impl_8h_1a8c1e7f328284d9ba56404bb8d99bf765" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void secp256k1_ge_from_storage</definition>
        <argsstring>(secp256k1_ge *r, const secp256k1_ge_storage *a)</argsstring>
        <name>secp256k1_ge_from_storage</name>
        <param>
          <type><ref refid="structsecp256k1__ge" kindref="compound">secp256k1_ge</ref> *</type>
          <declname>r</declname>
        </param>
        <param>
          <type>const <ref refid="structsecp256k1__ge__storage" kindref="compound">secp256k1_ge_storage</ref> *</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/secp256k1/src/group_impl.h" line="604" column="1" bodyfile="/home/dev/ds-160209/src/secp256k1/src/group_impl.h" bodystart="604" bodyend="608"/>
      </memberdef>
      <memberdef kind="function" id="group__impl_8h_1ae6d54bcae540118ce4190f457db78ca8" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="secp256k1_8h_1a7ddc487fd46aee88f21cabedb7268b1e" kindref="member">SECP256K1_INLINE</ref> void</type>
        <definition>static SECP256K1_INLINE void secp256k1_ge_storage_cmov</definition>
        <argsstring>(secp256k1_ge_storage *r, const secp256k1_ge_storage *a, int flag)</argsstring>
        <name>secp256k1_ge_storage_cmov</name>
        <param>
          <type><ref refid="structsecp256k1__ge__storage" kindref="compound">secp256k1_ge_storage</ref> *</type>
          <declname>r</declname>
        </param>
        <param>
          <type>const <ref refid="structsecp256k1__ge__storage" kindref="compound">secp256k1_ge_storage</ref> *</type>
          <declname>a</declname>
        </param>
        <param>
          <type>int</type>
          <declname>flag</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/secp256k1/src/group_impl.h" line="610" column="1" bodyfile="/home/dev/ds-160209/src/secp256k1/src/group_impl.h" bodystart="610" bodyend="613"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/**********************************************************************</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/>*<sp/>Copyright<sp/>(c)<sp/>2013,<sp/>2014<sp/>Pieter<sp/>Wuille<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*<sp/>Distributed<sp/>under<sp/>the<sp/>MIT<sp/>software<sp/>license,<sp/>see<sp/>the<sp/>accompanying<sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*<sp/>file<sp/>COPYING<sp/>or<sp/>http://www.opensource.org/licenses/mit-license.php.*</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/>**********************************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>_SECP256K1_GROUP_IMPL_H_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>_SECP256K1_GROUP_IMPL_H_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;string.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="num_8h" kindref="compound">num.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="field_8h" kindref="compound">field.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="group_8h" kindref="compound">group.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structsecp256k1__ge" kindref="compound">secp256k1_ge</ref><sp/>secp256k1_ge_const_g<sp/>=<sp/><ref refid="group_8h_1adb0cb248ca6d0aabe3a82423233e6ce3" kindref="member">SECP256K1_GE_CONST</ref>(</highlight></codeline>
<codeline lineno="20"><highlight class="normal"><sp/><sp/><sp/><sp/>0x79BE667EUL,<sp/>0xF9DCBBACUL,<sp/>0x55A06295UL,<sp/>0xCE870B07UL,</highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/><sp/><sp/><sp/>0x029BFCDBUL,<sp/>0x2DCE28D9UL,<sp/>0x59F2815BUL,<sp/>0x16F81798UL,</highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/><sp/><sp/>0x483ADA77UL,<sp/>0x26A3C465UL,<sp/>0x5DA4FBFCUL,<sp/>0x0E1108A8UL,</highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/><sp/><sp/>0xFD17B448UL,<sp/>0xA6855419UL,<sp/>0x9C47D08FUL,<sp/>0xFB10D4B8UL</highlight></codeline>
<codeline lineno="24"><highlight class="normal">);</highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>secp256k1_ge_set_gej_zinv(<ref refid="structsecp256k1__ge" kindref="compound">secp256k1_ge</ref><sp/>*r,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structsecp256k1__gej" kindref="compound">secp256k1_gej</ref><sp/>*a,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structsecp256k1__fe" kindref="compound">secp256k1_fe</ref><sp/>*zi)<sp/>{</highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structsecp256k1__fe" kindref="compound">secp256k1_fe</ref><sp/>zi2;<sp/></highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structsecp256k1__fe" kindref="compound">secp256k1_fe</ref><sp/>zi3;</highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/><sp/><sp/>secp256k1_fe_sqr(&amp;zi2,<sp/>zi);</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/><sp/>secp256k1_fe_mul(&amp;zi3,<sp/>&amp;zi2,<sp/>zi);</highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/><sp/><sp/>secp256k1_fe_mul(&amp;r-&gt;<ref refid="structsecp256k1__ge_1a3c04a97b606c82ea87e55d4a06f06b6e" kindref="member">x</ref>,<sp/>&amp;a-&gt;<ref refid="structsecp256k1__gej_1a7d2451c89411d62628ac466eb28c8ff5" kindref="member">x</ref>,<sp/>&amp;zi2);</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/><sp/>secp256k1_fe_mul(&amp;r-&gt;<ref refid="structsecp256k1__ge_1a604295983a1f4aa6e8b5b0f1e46f9ee0" kindref="member">y</ref>,<sp/>&amp;a-&gt;<ref refid="structsecp256k1__gej_1a29d5184060ad790d85a0c89a13820e0d" kindref="member">y</ref>,<sp/>&amp;zi3);</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/>r-&gt;<ref refid="structsecp256k1__ge_1a1cdb35fe7abf6f17c08e4375eeb26628" kindref="member">infinity</ref><sp/>=<sp/>a-&gt;<ref refid="structsecp256k1__gej_1ab3ec8168caf27aa3a092d512eaadaad9" kindref="member">infinity</ref>;</highlight></codeline>
<codeline lineno="34"><highlight class="normal">}</highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>secp256k1_ge_set_xy(<ref refid="structsecp256k1__ge" kindref="compound">secp256k1_ge</ref><sp/>*r,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structsecp256k1__fe" kindref="compound">secp256k1_fe</ref><sp/>*x,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structsecp256k1__fe" kindref="compound">secp256k1_fe</ref><sp/>*y)<sp/>{</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/>r-&gt;<ref refid="structsecp256k1__ge_1a1cdb35fe7abf6f17c08e4375eeb26628" kindref="member">infinity</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/>r-&gt;<ref refid="structsecp256k1__ge_1a3c04a97b606c82ea87e55d4a06f06b6e" kindref="member">x</ref><sp/>=<sp/>*x;</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/>r-&gt;<ref refid="structsecp256k1__ge_1a604295983a1f4aa6e8b5b0f1e46f9ee0" kindref="member">y</ref><sp/>=<sp/>*y;</highlight></codeline>
<codeline lineno="40"><highlight class="normal">}</highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>secp256k1_ge_is_infinity(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structsecp256k1__ge" kindref="compound">secp256k1_ge</ref><sp/>*a)<sp/>{</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>a-&gt;<ref refid="structsecp256k1__ge_1a1cdb35fe7abf6f17c08e4375eeb26628" kindref="member">infinity</ref>;</highlight></codeline>
<codeline lineno="44"><highlight class="normal">}</highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>secp256k1_ge_neg(<ref refid="structsecp256k1__ge" kindref="compound">secp256k1_ge</ref><sp/>*r,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structsecp256k1__ge" kindref="compound">secp256k1_ge</ref><sp/>*a)<sp/>{</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/>*r<sp/>=<sp/>*a;</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/>secp256k1_fe_normalize_weak(&amp;r-&gt;<ref refid="structsecp256k1__ge_1a604295983a1f4aa6e8b5b0f1e46f9ee0" kindref="member">y</ref>);</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/>secp256k1_fe_negate(&amp;r-&gt;<ref refid="structsecp256k1__ge_1a604295983a1f4aa6e8b5b0f1e46f9ee0" kindref="member">y</ref>,<sp/>&amp;r-&gt;<ref refid="structsecp256k1__ge_1a604295983a1f4aa6e8b5b0f1e46f9ee0" kindref="member">y</ref>,<sp/>1);</highlight></codeline>
<codeline lineno="50"><highlight class="normal">}</highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>secp256k1_ge_set_gej(<ref refid="structsecp256k1__ge" kindref="compound">secp256k1_ge</ref><sp/>*r,<sp/><ref refid="structsecp256k1__gej" kindref="compound">secp256k1_gej</ref><sp/>*a)<sp/>{</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structsecp256k1__fe" kindref="compound">secp256k1_fe</ref><sp/>z2,<sp/>z3;</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/>r-&gt;<ref refid="structsecp256k1__ge_1a1cdb35fe7abf6f17c08e4375eeb26628" kindref="member">infinity</ref><sp/>=<sp/>a-&gt;<ref refid="structsecp256k1__gej_1ab3ec8168caf27aa3a092d512eaadaad9" kindref="member">infinity</ref>;</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/>secp256k1_fe_inv(&amp;a-&gt;<ref refid="structsecp256k1__gej_1ae41776408dba32cbe28b5e345b5f2286" kindref="member">z</ref>,<sp/>&amp;a-&gt;<ref refid="structsecp256k1__gej_1ae41776408dba32cbe28b5e345b5f2286" kindref="member">z</ref>);</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/>secp256k1_fe_sqr(&amp;z2,<sp/>&amp;a-&gt;<ref refid="structsecp256k1__gej_1ae41776408dba32cbe28b5e345b5f2286" kindref="member">z</ref>);</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/>secp256k1_fe_mul(&amp;z3,<sp/>&amp;a-&gt;<ref refid="structsecp256k1__gej_1ae41776408dba32cbe28b5e345b5f2286" kindref="member">z</ref>,<sp/>&amp;z2);</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/>secp256k1_fe_mul(&amp;a-&gt;<ref refid="structsecp256k1__gej_1a7d2451c89411d62628ac466eb28c8ff5" kindref="member">x</ref>,<sp/>&amp;a-&gt;<ref refid="structsecp256k1__gej_1a7d2451c89411d62628ac466eb28c8ff5" kindref="member">x</ref>,<sp/>&amp;z2);</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/>secp256k1_fe_mul(&amp;a-&gt;<ref refid="structsecp256k1__gej_1a29d5184060ad790d85a0c89a13820e0d" kindref="member">y</ref>,<sp/>&amp;a-&gt;<ref refid="structsecp256k1__gej_1a29d5184060ad790d85a0c89a13820e0d" kindref="member">y</ref>,<sp/>&amp;z3);</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/>secp256k1_fe_set_int(&amp;a-&gt;<ref refid="structsecp256k1__gej_1ae41776408dba32cbe28b5e345b5f2286" kindref="member">z</ref>,<sp/>1);</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/>r-&gt;<ref refid="structsecp256k1__ge_1a3c04a97b606c82ea87e55d4a06f06b6e" kindref="member">x</ref><sp/>=<sp/>a-&gt;<ref refid="structsecp256k1__gej_1a7d2451c89411d62628ac466eb28c8ff5" kindref="member">x</ref>;</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/>r-&gt;<ref refid="structsecp256k1__ge_1a604295983a1f4aa6e8b5b0f1e46f9ee0" kindref="member">y</ref><sp/>=<sp/>a-&gt;<ref refid="structsecp256k1__gej_1a29d5184060ad790d85a0c89a13820e0d" kindref="member">y</ref>;</highlight></codeline>
<codeline lineno="63"><highlight class="normal">}</highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>secp256k1_ge_set_gej_var(<ref refid="structsecp256k1__ge" kindref="compound">secp256k1_ge</ref><sp/>*r,<sp/><ref refid="structsecp256k1__gej" kindref="compound">secp256k1_gej</ref><sp/>*a)<sp/>{</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structsecp256k1__fe" kindref="compound">secp256k1_fe</ref><sp/>z2,<sp/>z3;</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/>r-&gt;<ref refid="structsecp256k1__ge_1a1cdb35fe7abf6f17c08e4375eeb26628" kindref="member">infinity</ref><sp/>=<sp/>a-&gt;<ref refid="structsecp256k1__gej_1ab3ec8168caf27aa3a092d512eaadaad9" kindref="member">infinity</ref>;</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(a-&gt;<ref refid="structsecp256k1__gej_1ab3ec8168caf27aa3a092d512eaadaad9" kindref="member">infinity</ref>)<sp/>{</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/>secp256k1_fe_inv_var(&amp;a-&gt;<ref refid="structsecp256k1__gej_1ae41776408dba32cbe28b5e345b5f2286" kindref="member">z</ref>,<sp/>&amp;a-&gt;<ref refid="structsecp256k1__gej_1ae41776408dba32cbe28b5e345b5f2286" kindref="member">z</ref>);</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/>secp256k1_fe_sqr(&amp;z2,<sp/>&amp;a-&gt;<ref refid="structsecp256k1__gej_1ae41776408dba32cbe28b5e345b5f2286" kindref="member">z</ref>);</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/>secp256k1_fe_mul(&amp;z3,<sp/>&amp;a-&gt;<ref refid="structsecp256k1__gej_1ae41776408dba32cbe28b5e345b5f2286" kindref="member">z</ref>,<sp/>&amp;z2);</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/>secp256k1_fe_mul(&amp;a-&gt;<ref refid="structsecp256k1__gej_1a7d2451c89411d62628ac466eb28c8ff5" kindref="member">x</ref>,<sp/>&amp;a-&gt;<ref refid="structsecp256k1__gej_1a7d2451c89411d62628ac466eb28c8ff5" kindref="member">x</ref>,<sp/>&amp;z2);</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/>secp256k1_fe_mul(&amp;a-&gt;<ref refid="structsecp256k1__gej_1a29d5184060ad790d85a0c89a13820e0d" kindref="member">y</ref>,<sp/>&amp;a-&gt;<ref refid="structsecp256k1__gej_1a29d5184060ad790d85a0c89a13820e0d" kindref="member">y</ref>,<sp/>&amp;z3);</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/>secp256k1_fe_set_int(&amp;a-&gt;<ref refid="structsecp256k1__gej_1ae41776408dba32cbe28b5e345b5f2286" kindref="member">z</ref>,<sp/>1);</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/>r-&gt;<ref refid="structsecp256k1__ge_1a3c04a97b606c82ea87e55d4a06f06b6e" kindref="member">x</ref><sp/>=<sp/>a-&gt;<ref refid="structsecp256k1__gej_1a7d2451c89411d62628ac466eb28c8ff5" kindref="member">x</ref>;</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/>r-&gt;<ref refid="structsecp256k1__ge_1a604295983a1f4aa6e8b5b0f1e46f9ee0" kindref="member">y</ref><sp/>=<sp/>a-&gt;<ref refid="structsecp256k1__gej_1a29d5184060ad790d85a0c89a13820e0d" kindref="member">y</ref>;</highlight></codeline>
<codeline lineno="79"><highlight class="normal">}</highlight></codeline>
<codeline lineno="80"><highlight class="normal"></highlight></codeline>
<codeline lineno="81"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>secp256k1_ge_set_all_gej_var(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>len,<sp/><ref refid="structsecp256k1__ge" kindref="compound">secp256k1_ge</ref><sp/>*r,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structsecp256k1__gej" kindref="compound">secp256k1_gej</ref><sp/>*a,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structsecp256k1__callback" kindref="compound">secp256k1_callback</ref><sp/>*cb)<sp/>{</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structsecp256k1__fe" kindref="compound">secp256k1_fe</ref><sp/>*az;</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structsecp256k1__fe" kindref="compound">secp256k1_fe</ref><sp/>*azi;</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>count<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/>az<sp/>=<sp/>(<ref refid="structsecp256k1__fe" kindref="compound">secp256k1_fe</ref><sp/>*)checked_malloc(cb,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="structsecp256k1__fe" kindref="compound">secp256k1_fe</ref>)<sp/>*<sp/>len);</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>len;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!a[i].infinity)<sp/>{</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>az[count++]<sp/>=<sp/>a[i].<ref refid="structsecp256k1__gej_1ae41776408dba32cbe28b5e345b5f2286" kindref="member">z</ref>;</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="92"><highlight class="normal"></highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/>azi<sp/>=<sp/>(<ref refid="structsecp256k1__fe" kindref="compound">secp256k1_fe</ref><sp/>*)checked_malloc(cb,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="structsecp256k1__fe" kindref="compound">secp256k1_fe</ref>)<sp/>*<sp/>count);</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/>secp256k1_fe_inv_all_var(count,<sp/>azi,<sp/>az);</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/>free(az);</highlight></codeline>
<codeline lineno="96"><highlight class="normal"></highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/>count<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>len;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>r[i].<ref refid="structsecp256k1__ge_1a1cdb35fe7abf6f17c08e4375eeb26628" kindref="member">infinity</ref><sp/>=<sp/>a[i].<ref refid="structsecp256k1__gej_1ab3ec8168caf27aa3a092d512eaadaad9" kindref="member">infinity</ref>;</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!a[i].infinity)<sp/>{</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>secp256k1_ge_set_gej_zinv(&amp;r[i],<sp/>&amp;a[i],<sp/>&amp;azi[count++]);</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/>free(azi);</highlight></codeline>
<codeline lineno="105"><highlight class="normal">}</highlight></codeline>
<codeline lineno="106"><highlight class="normal"></highlight></codeline>
<codeline lineno="107"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>secp256k1_ge_set_table_gej_var(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>len,<sp/><ref refid="structsecp256k1__ge" kindref="compound">secp256k1_ge</ref><sp/>*r,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structsecp256k1__gej" kindref="compound">secp256k1_gej</ref><sp/>*a,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structsecp256k1__fe" kindref="compound">secp256k1_fe</ref><sp/>*zr)<sp/>{</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>len<sp/>-<sp/>1;</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structsecp256k1__fe" kindref="compound">secp256k1_fe</ref><sp/>zi;</highlight></codeline>
<codeline lineno="110"><highlight class="normal"></highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(len<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Compute<sp/>the<sp/>inverse<sp/>of<sp/>the<sp/>last<sp/>z<sp/>coordinate,<sp/>and<sp/>use<sp/>it<sp/>to<sp/>compute<sp/>the<sp/>last<sp/>affine<sp/>output.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>secp256k1_fe_inv(&amp;zi,<sp/>&amp;a[i].z);</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>secp256k1_ge_set_gej_zinv(&amp;r[i],<sp/>&amp;a[i],<sp/>&amp;zi);</highlight></codeline>
<codeline lineno="115"><highlight class="normal"></highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Work<sp/>out<sp/>way<sp/>backwards,<sp/>using<sp/>the<sp/>z-ratios<sp/>to<sp/>scale<sp/>the<sp/>x/y<sp/>values.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(i<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>secp256k1_fe_mul(&amp;zi,<sp/>&amp;zi,<sp/>&amp;zr[i]);</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>i--;</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>secp256k1_ge_set_gej_zinv(&amp;r[i],<sp/>&amp;a[i],<sp/>&amp;zi);</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="123"><highlight class="normal">}</highlight></codeline>
<codeline lineno="124"><highlight class="normal"></highlight></codeline>
<codeline lineno="125"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>secp256k1_ge_globalz_set_table_gej(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>len,<sp/><ref refid="structsecp256k1__ge" kindref="compound">secp256k1_ge</ref><sp/>*r,<sp/><ref refid="structsecp256k1__fe" kindref="compound">secp256k1_fe</ref><sp/>*globalz,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structsecp256k1__gej" kindref="compound">secp256k1_gej</ref><sp/>*a,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structsecp256k1__fe" kindref="compound">secp256k1_fe</ref><sp/>*zr)<sp/>{</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>len<sp/>-<sp/>1;</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structsecp256k1__fe" kindref="compound">secp256k1_fe</ref><sp/>zs;</highlight></codeline>
<codeline lineno="128"><highlight class="normal"></highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(len<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>The<sp/>z<sp/>of<sp/>the<sp/>final<sp/>point<sp/>gives<sp/>us<sp/>the<sp/>&quot;global<sp/>Z&quot;<sp/>for<sp/>the<sp/>table.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>r[i].<ref refid="structsecp256k1__ge_1a3c04a97b606c82ea87e55d4a06f06b6e" kindref="member">x</ref><sp/>=<sp/>a[i].<ref refid="structsecp256k1__gej_1a7d2451c89411d62628ac466eb28c8ff5" kindref="member">x</ref>;</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>r[i].<ref refid="structsecp256k1__ge_1a604295983a1f4aa6e8b5b0f1e46f9ee0" kindref="member">y</ref><sp/>=<sp/>a[i].<ref refid="structsecp256k1__gej_1a29d5184060ad790d85a0c89a13820e0d" kindref="member">y</ref>;</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*globalz<sp/>=<sp/>a[i].<ref refid="structsecp256k1__gej_1ae41776408dba32cbe28b5e345b5f2286" kindref="member">z</ref>;</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>r[i].<ref refid="structsecp256k1__ge_1a1cdb35fe7abf6f17c08e4375eeb26628" kindref="member">infinity</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>zs<sp/>=<sp/>zr[i];</highlight></codeline>
<codeline lineno="136"><highlight class="normal"></highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Work<sp/>our<sp/>way<sp/>backwards,<sp/>using<sp/>the<sp/>z-ratios<sp/>to<sp/>scale<sp/>the<sp/>x/y<sp/>values.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(i<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(i<sp/>!=<sp/>len<sp/>-<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>secp256k1_fe_mul(&amp;zs,<sp/>&amp;zs,<sp/>&amp;zr[i]);</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>i--;</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>secp256k1_ge_set_gej_zinv(&amp;r[i],<sp/>&amp;a[i],<sp/>&amp;zs);</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="146"><highlight class="normal">}</highlight></codeline>
<codeline lineno="147"><highlight class="normal"></highlight></codeline>
<codeline lineno="148"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>secp256k1_gej_set_infinity(<ref refid="structsecp256k1__gej" kindref="compound">secp256k1_gej</ref><sp/>*r)<sp/>{</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/>r-&gt;<ref refid="structsecp256k1__gej_1ab3ec8168caf27aa3a092d512eaadaad9" kindref="member">infinity</ref><sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/>secp256k1_fe_set_int(&amp;r-&gt;<ref refid="structsecp256k1__gej_1a7d2451c89411d62628ac466eb28c8ff5" kindref="member">x</ref>,<sp/>0);</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/>secp256k1_fe_set_int(&amp;r-&gt;<ref refid="structsecp256k1__gej_1a29d5184060ad790d85a0c89a13820e0d" kindref="member">y</ref>,<sp/>0);</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/>secp256k1_fe_set_int(&amp;r-&gt;<ref refid="structsecp256k1__gej_1ae41776408dba32cbe28b5e345b5f2286" kindref="member">z</ref>,<sp/>0);</highlight></codeline>
<codeline lineno="153"><highlight class="normal">}</highlight></codeline>
<codeline lineno="154"><highlight class="normal"></highlight></codeline>
<codeline lineno="155"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>secp256k1_gej_clear(<ref refid="structsecp256k1__gej" kindref="compound">secp256k1_gej</ref><sp/>*r)<sp/>{</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/>r-&gt;<ref refid="structsecp256k1__gej_1ab3ec8168caf27aa3a092d512eaadaad9" kindref="member">infinity</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/>secp256k1_fe_clear(&amp;r-&gt;<ref refid="structsecp256k1__gej_1a7d2451c89411d62628ac466eb28c8ff5" kindref="member">x</ref>);</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/>secp256k1_fe_clear(&amp;r-&gt;<ref refid="structsecp256k1__gej_1a29d5184060ad790d85a0c89a13820e0d" kindref="member">y</ref>);</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/>secp256k1_fe_clear(&amp;r-&gt;<ref refid="structsecp256k1__gej_1ae41776408dba32cbe28b5e345b5f2286" kindref="member">z</ref>);</highlight></codeline>
<codeline lineno="160"><highlight class="normal">}</highlight></codeline>
<codeline lineno="161"><highlight class="normal"></highlight></codeline>
<codeline lineno="162"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>secp256k1_ge_clear(<ref refid="structsecp256k1__ge" kindref="compound">secp256k1_ge</ref><sp/>*r)<sp/>{</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/>r-&gt;<ref refid="structsecp256k1__ge_1a1cdb35fe7abf6f17c08e4375eeb26628" kindref="member">infinity</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/>secp256k1_fe_clear(&amp;r-&gt;<ref refid="structsecp256k1__ge_1a3c04a97b606c82ea87e55d4a06f06b6e" kindref="member">x</ref>);</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/>secp256k1_fe_clear(&amp;r-&gt;<ref refid="structsecp256k1__ge_1a604295983a1f4aa6e8b5b0f1e46f9ee0" kindref="member">y</ref>);</highlight></codeline>
<codeline lineno="166"><highlight class="normal">}</highlight></codeline>
<codeline lineno="167"><highlight class="normal"></highlight></codeline>
<codeline lineno="168"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>secp256k1_ge_set_xquad_var(<ref refid="structsecp256k1__ge" kindref="compound">secp256k1_ge</ref><sp/>*r,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structsecp256k1__fe" kindref="compound">secp256k1_fe</ref><sp/>*x)<sp/>{</highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structsecp256k1__fe" kindref="compound">secp256k1_fe</ref><sp/>x2,<sp/>x3,<sp/>c;</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/>r-&gt;<ref refid="structsecp256k1__ge_1a3c04a97b606c82ea87e55d4a06f06b6e" kindref="member">x</ref><sp/>=<sp/>*x;</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/>secp256k1_fe_sqr(&amp;x2,<sp/>x);</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/>secp256k1_fe_mul(&amp;x3,<sp/>x,<sp/>&amp;x2);</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/>r-&gt;<ref refid="structsecp256k1__ge_1a1cdb35fe7abf6f17c08e4375eeb26628" kindref="member">infinity</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><sp/>secp256k1_fe_set_int(&amp;c,<sp/>7);</highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><sp/><sp/>secp256k1_fe_add(&amp;c,<sp/>&amp;x3);</highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>secp256k1_fe_sqrt_var(&amp;r-&gt;<ref refid="structsecp256k1__ge_1a604295983a1f4aa6e8b5b0f1e46f9ee0" kindref="member">y</ref>,<sp/>&amp;c);</highlight></codeline>
<codeline lineno="177"><highlight class="normal">}</highlight></codeline>
<codeline lineno="178"><highlight class="normal"></highlight></codeline>
<codeline lineno="179"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>secp256k1_ge_set_xo_var(<ref refid="structsecp256k1__ge" kindref="compound">secp256k1_ge</ref><sp/>*r,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structsecp256k1__fe" kindref="compound">secp256k1_fe</ref><sp/>*x,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>odd)<sp/>{</highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!secp256k1_ge_set_xquad_var(r,<sp/>x))<sp/>{</highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/><sp/>secp256k1_fe_normalize_var(&amp;r-&gt;<ref refid="structsecp256k1__ge_1a604295983a1f4aa6e8b5b0f1e46f9ee0" kindref="member">y</ref>);</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(secp256k1_fe_is_odd(&amp;r-&gt;<ref refid="structsecp256k1__ge_1a604295983a1f4aa6e8b5b0f1e46f9ee0" kindref="member">y</ref>)<sp/>!=<sp/>odd)<sp/>{</highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>secp256k1_fe_negate(&amp;r-&gt;<ref refid="structsecp256k1__ge_1a604295983a1f4aa6e8b5b0f1e46f9ee0" kindref="member">y</ref>,<sp/>&amp;r-&gt;<ref refid="structsecp256k1__ge_1a604295983a1f4aa6e8b5b0f1e46f9ee0" kindref="member">y</ref>,<sp/>1);</highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="188"><highlight class="normal"></highlight></codeline>
<codeline lineno="189"><highlight class="normal">}</highlight></codeline>
<codeline lineno="190"><highlight class="normal"></highlight></codeline>
<codeline lineno="191"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>secp256k1_gej_set_ge(<ref refid="structsecp256k1__gej" kindref="compound">secp256k1_gej</ref><sp/>*r,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structsecp256k1__ge" kindref="compound">secp256k1_ge</ref><sp/>*a)<sp/>{</highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/>r-&gt;<ref refid="structsecp256k1__gej_1ab3ec8168caf27aa3a092d512eaadaad9" kindref="member">infinity</ref><sp/>=<sp/>a-&gt;<ref refid="structsecp256k1__ge_1a1cdb35fe7abf6f17c08e4375eeb26628" kindref="member">infinity</ref>;</highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/>r-&gt;<ref refid="structsecp256k1__gej_1a7d2451c89411d62628ac466eb28c8ff5" kindref="member">x</ref><sp/>=<sp/>a-&gt;<ref refid="structsecp256k1__ge_1a3c04a97b606c82ea87e55d4a06f06b6e" kindref="member">x</ref>;</highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/><sp/>r-&gt;<ref refid="structsecp256k1__gej_1a29d5184060ad790d85a0c89a13820e0d" kindref="member">y</ref><sp/>=<sp/>a-&gt;<ref refid="structsecp256k1__ge_1a604295983a1f4aa6e8b5b0f1e46f9ee0" kindref="member">y</ref>;</highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/><sp/>secp256k1_fe_set_int(&amp;r-&gt;<ref refid="structsecp256k1__gej_1ae41776408dba32cbe28b5e345b5f2286" kindref="member">z</ref>,<sp/>1);</highlight></codeline>
<codeline lineno="196"><highlight class="normal">}</highlight></codeline>
<codeline lineno="197"><highlight class="normal"></highlight></codeline>
<codeline lineno="198"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>secp256k1_gej_eq_x_var(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structsecp256k1__fe" kindref="compound">secp256k1_fe</ref><sp/>*x,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structsecp256k1__gej" kindref="compound">secp256k1_gej</ref><sp/>*a)<sp/>{</highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structsecp256k1__fe" kindref="compound">secp256k1_fe</ref><sp/>r,<sp/>r2;</highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="secp256k1_2src_2util_8h_1aca8ac5ae73fd966db106de59160a178b" kindref="member">VERIFY_CHECK</ref>(!a-&gt;<ref refid="structsecp256k1__gej_1ab3ec8168caf27aa3a092d512eaadaad9" kindref="member">infinity</ref>);</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/>secp256k1_fe_sqr(&amp;r,<sp/>&amp;a-&gt;<ref refid="structsecp256k1__gej_1ae41776408dba32cbe28b5e345b5f2286" kindref="member">z</ref>);<sp/>secp256k1_fe_mul(&amp;r,<sp/>&amp;r,<sp/>x);</highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/><sp/><sp/>r2<sp/>=<sp/>a-&gt;<ref refid="structsecp256k1__gej_1a7d2451c89411d62628ac466eb28c8ff5" kindref="member">x</ref>;<sp/>secp256k1_fe_normalize_weak(&amp;r2);</highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>secp256k1_fe_equal_var(&amp;r,<sp/>&amp;r2);</highlight></codeline>
<codeline lineno="204"><highlight class="normal">}</highlight></codeline>
<codeline lineno="205"><highlight class="normal"></highlight></codeline>
<codeline lineno="206"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>secp256k1_gej_neg(<ref refid="structsecp256k1__gej" kindref="compound">secp256k1_gej</ref><sp/>*r,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structsecp256k1__gej" kindref="compound">secp256k1_gej</ref><sp/>*a)<sp/>{</highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/><sp/><sp/>r-&gt;<ref refid="structsecp256k1__gej_1ab3ec8168caf27aa3a092d512eaadaad9" kindref="member">infinity</ref><sp/>=<sp/>a-&gt;<ref refid="structsecp256k1__gej_1ab3ec8168caf27aa3a092d512eaadaad9" kindref="member">infinity</ref>;</highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/><sp/><sp/>r-&gt;<ref refid="structsecp256k1__gej_1a7d2451c89411d62628ac466eb28c8ff5" kindref="member">x</ref><sp/>=<sp/>a-&gt;<ref refid="structsecp256k1__gej_1a7d2451c89411d62628ac466eb28c8ff5" kindref="member">x</ref>;</highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/><sp/><sp/>r-&gt;<ref refid="structsecp256k1__gej_1a29d5184060ad790d85a0c89a13820e0d" kindref="member">y</ref><sp/>=<sp/>a-&gt;<ref refid="structsecp256k1__gej_1a29d5184060ad790d85a0c89a13820e0d" kindref="member">y</ref>;</highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/><sp/><sp/>r-&gt;<ref refid="structsecp256k1__gej_1ae41776408dba32cbe28b5e345b5f2286" kindref="member">z</ref><sp/>=<sp/>a-&gt;<ref refid="structsecp256k1__gej_1ae41776408dba32cbe28b5e345b5f2286" kindref="member">z</ref>;</highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/><sp/><sp/>secp256k1_fe_normalize_weak(&amp;r-&gt;<ref refid="structsecp256k1__gej_1a29d5184060ad790d85a0c89a13820e0d" kindref="member">y</ref>);</highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/><sp/><sp/>secp256k1_fe_negate(&amp;r-&gt;<ref refid="structsecp256k1__gej_1a29d5184060ad790d85a0c89a13820e0d" kindref="member">y</ref>,<sp/>&amp;r-&gt;<ref refid="structsecp256k1__gej_1a29d5184060ad790d85a0c89a13820e0d" kindref="member">y</ref>,<sp/>1);</highlight></codeline>
<codeline lineno="213"><highlight class="normal">}</highlight></codeline>
<codeline lineno="214"><highlight class="normal"></highlight></codeline>
<codeline lineno="215"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>secp256k1_gej_is_infinity(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structsecp256k1__gej" kindref="compound">secp256k1_gej</ref><sp/>*a)<sp/>{</highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>a-&gt;<ref refid="structsecp256k1__gej_1ab3ec8168caf27aa3a092d512eaadaad9" kindref="member">infinity</ref>;</highlight></codeline>
<codeline lineno="217"><highlight class="normal">}</highlight></codeline>
<codeline lineno="218"><highlight class="normal"></highlight></codeline>
<codeline lineno="219"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>secp256k1_gej_is_valid_var(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structsecp256k1__gej" kindref="compound">secp256k1_gej</ref><sp/>*a)<sp/>{</highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structsecp256k1__fe" kindref="compound">secp256k1_fe</ref><sp/>y2,<sp/>x3,<sp/>z2,<sp/>z6;</highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(a-&gt;<ref refid="structsecp256k1__gej_1ab3ec8168caf27aa3a092d512eaadaad9" kindref="member">infinity</ref>)<sp/>{</highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/><sp/><sp/>secp256k1_fe_sqr(&amp;y2,<sp/>&amp;a-&gt;<ref refid="structsecp256k1__gej_1a29d5184060ad790d85a0c89a13820e0d" kindref="member">y</ref>);</highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/><sp/><sp/>secp256k1_fe_sqr(&amp;x3,<sp/>&amp;a-&gt;<ref refid="structsecp256k1__gej_1a7d2451c89411d62628ac466eb28c8ff5" kindref="member">x</ref>);<sp/>secp256k1_fe_mul(&amp;x3,<sp/>&amp;x3,<sp/>&amp;a-&gt;<ref refid="structsecp256k1__gej_1a7d2451c89411d62628ac466eb28c8ff5" kindref="member">x</ref>);</highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/><sp/><sp/>secp256k1_fe_sqr(&amp;z2,<sp/>&amp;a-&gt;<ref refid="structsecp256k1__gej_1ae41776408dba32cbe28b5e345b5f2286" kindref="member">z</ref>);</highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/><sp/><sp/>secp256k1_fe_sqr(&amp;z6,<sp/>&amp;z2);<sp/>secp256k1_fe_mul(&amp;z6,<sp/>&amp;z6,<sp/>&amp;z2);</highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/><sp/><sp/>secp256k1_fe_mul_int(&amp;z6,<sp/>7);</highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/><sp/><sp/>secp256k1_fe_add(&amp;x3,<sp/>&amp;z6);</highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/><sp/><sp/>secp256k1_fe_normalize_weak(&amp;x3);</highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>secp256k1_fe_equal_var(&amp;y2,<sp/>&amp;x3);</highlight></codeline>
<codeline lineno="237"><highlight class="normal">}</highlight></codeline>
<codeline lineno="238"><highlight class="normal"></highlight></codeline>
<codeline lineno="239"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>secp256k1_ge_is_valid_var(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structsecp256k1__ge" kindref="compound">secp256k1_ge</ref><sp/>*a)<sp/>{</highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structsecp256k1__fe" kindref="compound">secp256k1_fe</ref><sp/>y2,<sp/>x3,<sp/>c;</highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(a-&gt;<ref refid="structsecp256k1__ge_1a1cdb35fe7abf6f17c08e4375eeb26628" kindref="member">infinity</ref>)<sp/>{</highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>y^2<sp/>=<sp/>x^3<sp/>+<sp/>7<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/><sp/><sp/>secp256k1_fe_sqr(&amp;y2,<sp/>&amp;a-&gt;<ref refid="structsecp256k1__ge_1a604295983a1f4aa6e8b5b0f1e46f9ee0" kindref="member">y</ref>);</highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/><sp/><sp/>secp256k1_fe_sqr(&amp;x3,<sp/>&amp;a-&gt;<ref refid="structsecp256k1__ge_1a3c04a97b606c82ea87e55d4a06f06b6e" kindref="member">x</ref>);<sp/>secp256k1_fe_mul(&amp;x3,<sp/>&amp;x3,<sp/>&amp;a-&gt;<ref refid="structsecp256k1__ge_1a3c04a97b606c82ea87e55d4a06f06b6e" kindref="member">x</ref>);</highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/><sp/><sp/>secp256k1_fe_set_int(&amp;c,<sp/>7);</highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/><sp/><sp/>secp256k1_fe_add(&amp;x3,<sp/>&amp;c);</highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/><sp/><sp/>secp256k1_fe_normalize_weak(&amp;x3);</highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>secp256k1_fe_equal_var(&amp;y2,<sp/>&amp;x3);</highlight></codeline>
<codeline lineno="251"><highlight class="normal">}</highlight></codeline>
<codeline lineno="252"><highlight class="normal"></highlight></codeline>
<codeline lineno="253"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>secp256k1_gej_double_var(<ref refid="structsecp256k1__gej" kindref="compound">secp256k1_gej</ref><sp/>*r,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structsecp256k1__gej" kindref="compound">secp256k1_gej</ref><sp/>*a,<sp/><ref refid="structsecp256k1__fe" kindref="compound">secp256k1_fe</ref><sp/>*rzr)<sp/>{</highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Operations:<sp/>3<sp/>mul,<sp/>4<sp/>sqr,<sp/>0<sp/>normalize,<sp/>12<sp/>mul_int/add/negate<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structsecp256k1__fe" kindref="compound">secp256k1_fe</ref><sp/>t1,t2,t3,t4;</highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/><sp/><sp/>r-&gt;<ref refid="structsecp256k1__gej_1ab3ec8168caf27aa3a092d512eaadaad9" kindref="member">infinity</ref><sp/>=<sp/>a-&gt;<ref refid="structsecp256k1__gej_1ab3ec8168caf27aa3a092d512eaadaad9" kindref="member">infinity</ref>;</highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(r-&gt;<ref refid="structsecp256k1__gej_1ab3ec8168caf27aa3a092d512eaadaad9" kindref="member">infinity</ref>)<sp/>{</highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(rzr<sp/>!=<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>secp256k1_fe_set_int(rzr,<sp/>1);</highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="267"><highlight class="normal"></highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(rzr<sp/>!=<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*rzr<sp/>=<sp/>a-&gt;<ref refid="structsecp256k1__gej_1a29d5184060ad790d85a0c89a13820e0d" kindref="member">y</ref>;</highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>secp256k1_fe_normalize_weak(rzr);</highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>secp256k1_fe_mul_int(rzr,<sp/>2);</highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="273"><highlight class="normal"></highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/><sp/><sp/>secp256k1_fe_mul(&amp;r-&gt;<ref refid="structsecp256k1__gej_1ae41776408dba32cbe28b5e345b5f2286" kindref="member">z</ref>,<sp/>&amp;a-&gt;<ref refid="structsecp256k1__gej_1ae41776408dba32cbe28b5e345b5f2286" kindref="member">z</ref>,<sp/>&amp;a-&gt;<ref refid="structsecp256k1__gej_1a29d5184060ad790d85a0c89a13820e0d" kindref="member">y</ref>);</highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/><sp/><sp/>secp256k1_fe_mul_int(&amp;r-&gt;<ref refid="structsecp256k1__gej_1ae41776408dba32cbe28b5e345b5f2286" kindref="member">z</ref>,<sp/>2);<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Z&apos;<sp/>=<sp/>2*Y*Z<sp/>(2)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/><sp/><sp/>secp256k1_fe_sqr(&amp;t1,<sp/>&amp;a-&gt;<ref refid="structsecp256k1__gej_1a7d2451c89411d62628ac466eb28c8ff5" kindref="member">x</ref>);</highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/><sp/><sp/>secp256k1_fe_mul_int(&amp;t1,<sp/>3);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>T1<sp/>=<sp/>3*X^2<sp/>(3)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/><sp/><sp/>secp256k1_fe_sqr(&amp;t2,<sp/>&amp;t1);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>T2<sp/>=<sp/>9*X^4<sp/>(1)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/><sp/><sp/>secp256k1_fe_sqr(&amp;t3,<sp/>&amp;a-&gt;<ref refid="structsecp256k1__gej_1a29d5184060ad790d85a0c89a13820e0d" kindref="member">y</ref>);</highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/><sp/><sp/>secp256k1_fe_mul_int(&amp;t3,<sp/>2);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>T3<sp/>=<sp/>2*Y^2<sp/>(2)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/><sp/><sp/>secp256k1_fe_sqr(&amp;t4,<sp/>&amp;t3);</highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/><sp/><sp/>secp256k1_fe_mul_int(&amp;t4,<sp/>2);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>T4<sp/>=<sp/>8*Y^4<sp/>(2)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/><sp/><sp/>secp256k1_fe_mul(&amp;t3,<sp/>&amp;t3,<sp/>&amp;a-&gt;<ref refid="structsecp256k1__gej_1a7d2451c89411d62628ac466eb28c8ff5" kindref="member">x</ref>);<sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>T3<sp/>=<sp/>2*X*Y^2<sp/>(1)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/><sp/><sp/>r-&gt;<ref refid="structsecp256k1__gej_1a7d2451c89411d62628ac466eb28c8ff5" kindref="member">x</ref><sp/>=<sp/>t3;</highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/><sp/><sp/>secp256k1_fe_mul_int(&amp;r-&gt;<ref refid="structsecp256k1__gej_1a7d2451c89411d62628ac466eb28c8ff5" kindref="member">x</ref>,<sp/>4);<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>X&apos;<sp/>=<sp/>8*X*Y^2<sp/>(4)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/><sp/><sp/>secp256k1_fe_negate(&amp;r-&gt;<ref refid="structsecp256k1__gej_1a7d2451c89411d62628ac466eb28c8ff5" kindref="member">x</ref>,<sp/>&amp;r-&gt;<ref refid="structsecp256k1__gej_1a7d2451c89411d62628ac466eb28c8ff5" kindref="member">x</ref>,<sp/>4);<sp/></highlight><highlight class="comment">/*<sp/>X&apos;<sp/>=<sp/>-8*X*Y^2<sp/>(5)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/><sp/><sp/>secp256k1_fe_add(&amp;r-&gt;<ref refid="structsecp256k1__gej_1a7d2451c89411d62628ac466eb28c8ff5" kindref="member">x</ref>,<sp/>&amp;t2);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>X&apos;<sp/>=<sp/>9*X^4<sp/>-<sp/>8*X*Y^2<sp/>(6)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/><sp/><sp/>secp256k1_fe_negate(&amp;t2,<sp/>&amp;t2,<sp/>1);<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>T2<sp/>=<sp/>-9*X^4<sp/>(2)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/><sp/><sp/>secp256k1_fe_mul_int(&amp;t3,<sp/>6);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>T3<sp/>=<sp/>12*X*Y^2<sp/>(6)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/><sp/><sp/>secp256k1_fe_add(&amp;t3,<sp/>&amp;t2);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>T3<sp/>=<sp/>12*X*Y^2<sp/>-<sp/>9*X^4<sp/>(8)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/><sp/><sp/>secp256k1_fe_mul(&amp;r-&gt;<ref refid="structsecp256k1__gej_1a29d5184060ad790d85a0c89a13820e0d" kindref="member">y</ref>,<sp/>&amp;t1,<sp/>&amp;t3);<sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Y&apos;<sp/>=<sp/>36*X^3*Y^2<sp/>-<sp/>27*X^6<sp/>(1)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/><sp/><sp/>secp256k1_fe_negate(&amp;t2,<sp/>&amp;t4,<sp/>2);<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>T2<sp/>=<sp/>-8*Y^4<sp/>(3)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/><sp/><sp/>secp256k1_fe_add(&amp;r-&gt;<ref refid="structsecp256k1__gej_1a29d5184060ad790d85a0c89a13820e0d" kindref="member">y</ref>,<sp/>&amp;t2);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Y&apos;<sp/>=<sp/>36*X^3*Y^2<sp/>-<sp/>27*X^6<sp/>-<sp/>8*Y^4<sp/>(4)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="294"><highlight class="normal">}</highlight></codeline>
<codeline lineno="295"><highlight class="normal"></highlight></codeline>
<codeline lineno="296"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="secp256k1_8h_1a7ddc487fd46aee88f21cabedb7268b1e" kindref="member">SECP256K1_INLINE</ref><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>secp256k1_gej_double_nonzero(<ref refid="structsecp256k1__gej" kindref="compound">secp256k1_gej</ref><sp/>*r,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structsecp256k1__gej" kindref="compound">secp256k1_gej</ref><sp/>*a,<sp/><ref refid="structsecp256k1__fe" kindref="compound">secp256k1_fe</ref><sp/>*rzr)<sp/>{</highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="secp256k1_2src_2util_8h_1aca8ac5ae73fd966db106de59160a178b" kindref="member">VERIFY_CHECK</ref>(!secp256k1_gej_is_infinity(a));</highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/><sp/><sp/>secp256k1_gej_double_var(r,<sp/>a,<sp/>rzr);</highlight></codeline>
<codeline lineno="299"><highlight class="normal">}</highlight></codeline>
<codeline lineno="300"><highlight class="normal"></highlight></codeline>
<codeline lineno="301"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>secp256k1_gej_add_var(<ref refid="structsecp256k1__gej" kindref="compound">secp256k1_gej</ref><sp/>*r,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structsecp256k1__gej" kindref="compound">secp256k1_gej</ref><sp/>*a,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structsecp256k1__gej" kindref="compound">secp256k1_gej</ref><sp/>*b,<sp/><ref refid="structsecp256k1__fe" kindref="compound">secp256k1_fe</ref><sp/>*rzr)<sp/>{</highlight></codeline>
<codeline lineno="302"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Operations:<sp/>12<sp/>mul,<sp/>4<sp/>sqr,<sp/>2<sp/>normalize,<sp/>12<sp/>mul_int/add/negate<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="303"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structsecp256k1__fe" kindref="compound">secp256k1_fe</ref><sp/>z22,<sp/>z12,<sp/>u1,<sp/>u2,<sp/>s1,<sp/>s2,<sp/>h,<sp/>i,<sp/>i2,<sp/>h2,<sp/>h3,<sp/>t;</highlight></codeline>
<codeline lineno="304"><highlight class="normal"></highlight></codeline>
<codeline lineno="305"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(a-&gt;<ref refid="structsecp256k1__gej_1ab3ec8168caf27aa3a092d512eaadaad9" kindref="member">infinity</ref>)<sp/>{</highlight></codeline>
<codeline lineno="306"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="secp256k1_2src_2util_8h_1aca8ac5ae73fd966db106de59160a178b" kindref="member">VERIFY_CHECK</ref>(rzr<sp/>==<sp/>NULL);</highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*r<sp/>=<sp/>*b;</highlight></codeline>
<codeline lineno="308"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="310"><highlight class="normal"></highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(b-&gt;<ref refid="structsecp256k1__gej_1ab3ec8168caf27aa3a092d512eaadaad9" kindref="member">infinity</ref>)<sp/>{</highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(rzr<sp/>!=<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>secp256k1_fe_set_int(rzr,<sp/>1);</highlight></codeline>
<codeline lineno="314"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*r<sp/>=<sp/>*a;</highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="317"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="318"><highlight class="normal"></highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/><sp/><sp/>r-&gt;<ref refid="structsecp256k1__gej_1ab3ec8168caf27aa3a092d512eaadaad9" kindref="member">infinity</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="320"><highlight class="normal"><sp/><sp/><sp/><sp/>secp256k1_fe_sqr(&amp;z22,<sp/>&amp;b-&gt;<ref refid="structsecp256k1__gej_1ae41776408dba32cbe28b5e345b5f2286" kindref="member">z</ref>);</highlight></codeline>
<codeline lineno="321"><highlight class="normal"><sp/><sp/><sp/><sp/>secp256k1_fe_sqr(&amp;z12,<sp/>&amp;a-&gt;<ref refid="structsecp256k1__gej_1ae41776408dba32cbe28b5e345b5f2286" kindref="member">z</ref>);</highlight></codeline>
<codeline lineno="322"><highlight class="normal"><sp/><sp/><sp/><sp/>secp256k1_fe_mul(&amp;u1,<sp/>&amp;a-&gt;<ref refid="structsecp256k1__gej_1a7d2451c89411d62628ac466eb28c8ff5" kindref="member">x</ref>,<sp/>&amp;z22);</highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/><sp/><sp/>secp256k1_fe_mul(&amp;u2,<sp/>&amp;b-&gt;<ref refid="structsecp256k1__gej_1a7d2451c89411d62628ac466eb28c8ff5" kindref="member">x</ref>,<sp/>&amp;z12);</highlight></codeline>
<codeline lineno="324"><highlight class="normal"><sp/><sp/><sp/><sp/>secp256k1_fe_mul(&amp;s1,<sp/>&amp;a-&gt;<ref refid="structsecp256k1__gej_1a29d5184060ad790d85a0c89a13820e0d" kindref="member">y</ref>,<sp/>&amp;z22);<sp/>secp256k1_fe_mul(&amp;s1,<sp/>&amp;s1,<sp/>&amp;b-&gt;<ref refid="structsecp256k1__gej_1ae41776408dba32cbe28b5e345b5f2286" kindref="member">z</ref>);</highlight></codeline>
<codeline lineno="325"><highlight class="normal"><sp/><sp/><sp/><sp/>secp256k1_fe_mul(&amp;s2,<sp/>&amp;b-&gt;<ref refid="structsecp256k1__gej_1a29d5184060ad790d85a0c89a13820e0d" kindref="member">y</ref>,<sp/>&amp;z12);<sp/>secp256k1_fe_mul(&amp;s2,<sp/>&amp;s2,<sp/>&amp;a-&gt;<ref refid="structsecp256k1__gej_1ae41776408dba32cbe28b5e345b5f2286" kindref="member">z</ref>);</highlight></codeline>
<codeline lineno="326"><highlight class="normal"><sp/><sp/><sp/><sp/>secp256k1_fe_negate(&amp;h,<sp/>&amp;u1,<sp/>1);<sp/>secp256k1_fe_add(&amp;h,<sp/>&amp;u2);</highlight></codeline>
<codeline lineno="327"><highlight class="normal"><sp/><sp/><sp/><sp/>secp256k1_fe_negate(&amp;i,<sp/>&amp;s1,<sp/>1);<sp/>secp256k1_fe_add(&amp;i,<sp/>&amp;s2);</highlight></codeline>
<codeline lineno="328"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(secp256k1_fe_normalizes_to_zero_var(&amp;h))<sp/>{</highlight></codeline>
<codeline lineno="329"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(secp256k1_fe_normalizes_to_zero_var(&amp;i))<sp/>{</highlight></codeline>
<codeline lineno="330"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>secp256k1_gej_double_var(r,<sp/>a,<sp/>rzr);</highlight></codeline>
<codeline lineno="331"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="332"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(rzr<sp/>!=<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="333"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>secp256k1_fe_set_int(rzr,<sp/>0);</highlight></codeline>
<codeline lineno="334"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="335"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>r-&gt;<ref refid="structsecp256k1__gej_1ab3ec8168caf27aa3a092d512eaadaad9" kindref="member">infinity</ref><sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="336"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="337"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="338"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="339"><highlight class="normal"><sp/><sp/><sp/><sp/>secp256k1_fe_sqr(&amp;i2,<sp/>&amp;i);</highlight></codeline>
<codeline lineno="340"><highlight class="normal"><sp/><sp/><sp/><sp/>secp256k1_fe_sqr(&amp;h2,<sp/>&amp;h);</highlight></codeline>
<codeline lineno="341"><highlight class="normal"><sp/><sp/><sp/><sp/>secp256k1_fe_mul(&amp;h3,<sp/>&amp;h,<sp/>&amp;h2);</highlight></codeline>
<codeline lineno="342"><highlight class="normal"><sp/><sp/><sp/><sp/>secp256k1_fe_mul(&amp;h,<sp/>&amp;h,<sp/>&amp;b-&gt;<ref refid="structsecp256k1__gej_1ae41776408dba32cbe28b5e345b5f2286" kindref="member">z</ref>);</highlight></codeline>
<codeline lineno="343"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(rzr<sp/>!=<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="344"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*rzr<sp/>=<sp/>h;</highlight></codeline>
<codeline lineno="345"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="346"><highlight class="normal"><sp/><sp/><sp/><sp/>secp256k1_fe_mul(&amp;r-&gt;<ref refid="structsecp256k1__gej_1ae41776408dba32cbe28b5e345b5f2286" kindref="member">z</ref>,<sp/>&amp;a-&gt;<ref refid="structsecp256k1__gej_1ae41776408dba32cbe28b5e345b5f2286" kindref="member">z</ref>,<sp/>&amp;h);</highlight></codeline>
<codeline lineno="347"><highlight class="normal"><sp/><sp/><sp/><sp/>secp256k1_fe_mul(&amp;t,<sp/>&amp;u1,<sp/>&amp;h2);</highlight></codeline>
<codeline lineno="348"><highlight class="normal"><sp/><sp/><sp/><sp/>r-&gt;<ref refid="structsecp256k1__gej_1a7d2451c89411d62628ac466eb28c8ff5" kindref="member">x</ref><sp/>=<sp/>t;<sp/>secp256k1_fe_mul_int(&amp;r-&gt;<ref refid="structsecp256k1__gej_1a7d2451c89411d62628ac466eb28c8ff5" kindref="member">x</ref>,<sp/>2);<sp/>secp256k1_fe_add(&amp;r-&gt;<ref refid="structsecp256k1__gej_1a7d2451c89411d62628ac466eb28c8ff5" kindref="member">x</ref>,<sp/>&amp;h3);<sp/>secp256k1_fe_negate(&amp;r-&gt;<ref refid="structsecp256k1__gej_1a7d2451c89411d62628ac466eb28c8ff5" kindref="member">x</ref>,<sp/>&amp;r-&gt;<ref refid="structsecp256k1__gej_1a7d2451c89411d62628ac466eb28c8ff5" kindref="member">x</ref>,<sp/>3);<sp/>secp256k1_fe_add(&amp;r-&gt;<ref refid="structsecp256k1__gej_1a7d2451c89411d62628ac466eb28c8ff5" kindref="member">x</ref>,<sp/>&amp;i2);</highlight></codeline>
<codeline lineno="349"><highlight class="normal"><sp/><sp/><sp/><sp/>secp256k1_fe_negate(&amp;r-&gt;<ref refid="structsecp256k1__gej_1a29d5184060ad790d85a0c89a13820e0d" kindref="member">y</ref>,<sp/>&amp;r-&gt;<ref refid="structsecp256k1__gej_1a7d2451c89411d62628ac466eb28c8ff5" kindref="member">x</ref>,<sp/>5);<sp/>secp256k1_fe_add(&amp;r-&gt;<ref refid="structsecp256k1__gej_1a29d5184060ad790d85a0c89a13820e0d" kindref="member">y</ref>,<sp/>&amp;t);<sp/>secp256k1_fe_mul(&amp;r-&gt;<ref refid="structsecp256k1__gej_1a29d5184060ad790d85a0c89a13820e0d" kindref="member">y</ref>,<sp/>&amp;r-&gt;<ref refid="structsecp256k1__gej_1a29d5184060ad790d85a0c89a13820e0d" kindref="member">y</ref>,<sp/>&amp;i);</highlight></codeline>
<codeline lineno="350"><highlight class="normal"><sp/><sp/><sp/><sp/>secp256k1_fe_mul(&amp;h3,<sp/>&amp;h3,<sp/>&amp;s1);<sp/>secp256k1_fe_negate(&amp;h3,<sp/>&amp;h3,<sp/>1);</highlight></codeline>
<codeline lineno="351"><highlight class="normal"><sp/><sp/><sp/><sp/>secp256k1_fe_add(&amp;r-&gt;<ref refid="structsecp256k1__gej_1a29d5184060ad790d85a0c89a13820e0d" kindref="member">y</ref>,<sp/>&amp;h3);</highlight></codeline>
<codeline lineno="352"><highlight class="normal">}</highlight></codeline>
<codeline lineno="353"><highlight class="normal"></highlight></codeline>
<codeline lineno="354"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>secp256k1_gej_add_ge_var(<ref refid="structsecp256k1__gej" kindref="compound">secp256k1_gej</ref><sp/>*r,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structsecp256k1__gej" kindref="compound">secp256k1_gej</ref><sp/>*a,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structsecp256k1__ge" kindref="compound">secp256k1_ge</ref><sp/>*b,<sp/><ref refid="structsecp256k1__fe" kindref="compound">secp256k1_fe</ref><sp/>*rzr)<sp/>{</highlight></codeline>
<codeline lineno="355"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>8<sp/>mul,<sp/>3<sp/>sqr,<sp/>4<sp/>normalize,<sp/>12<sp/>mul_int/add/negate<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="356"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structsecp256k1__fe" kindref="compound">secp256k1_fe</ref><sp/>z12,<sp/>u1,<sp/>u2,<sp/>s1,<sp/>s2,<sp/>h,<sp/>i,<sp/>i2,<sp/>h2,<sp/>h3,<sp/>t;</highlight></codeline>
<codeline lineno="357"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(a-&gt;<ref refid="structsecp256k1__gej_1ab3ec8168caf27aa3a092d512eaadaad9" kindref="member">infinity</ref>)<sp/>{</highlight></codeline>
<codeline lineno="358"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="secp256k1_2src_2util_8h_1aca8ac5ae73fd966db106de59160a178b" kindref="member">VERIFY_CHECK</ref>(rzr<sp/>==<sp/>NULL);</highlight></codeline>
<codeline lineno="359"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>secp256k1_gej_set_ge(r,<sp/>b);</highlight></codeline>
<codeline lineno="360"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="361"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="362"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(b-&gt;<ref refid="structsecp256k1__ge_1a1cdb35fe7abf6f17c08e4375eeb26628" kindref="member">infinity</ref>)<sp/>{</highlight></codeline>
<codeline lineno="363"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(rzr<sp/>!=<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="364"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>secp256k1_fe_set_int(rzr,<sp/>1);</highlight></codeline>
<codeline lineno="365"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="366"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*r<sp/>=<sp/>*a;</highlight></codeline>
<codeline lineno="367"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="368"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="369"><highlight class="normal"><sp/><sp/><sp/><sp/>r-&gt;<ref refid="structsecp256k1__gej_1ab3ec8168caf27aa3a092d512eaadaad9" kindref="member">infinity</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="370"><highlight class="normal"></highlight></codeline>
<codeline lineno="371"><highlight class="normal"><sp/><sp/><sp/><sp/>secp256k1_fe_sqr(&amp;z12,<sp/>&amp;a-&gt;<ref refid="structsecp256k1__gej_1ae41776408dba32cbe28b5e345b5f2286" kindref="member">z</ref>);</highlight></codeline>
<codeline lineno="372"><highlight class="normal"><sp/><sp/><sp/><sp/>u1<sp/>=<sp/>a-&gt;<ref refid="structsecp256k1__gej_1a7d2451c89411d62628ac466eb28c8ff5" kindref="member">x</ref>;<sp/>secp256k1_fe_normalize_weak(&amp;u1);</highlight></codeline>
<codeline lineno="373"><highlight class="normal"><sp/><sp/><sp/><sp/>secp256k1_fe_mul(&amp;u2,<sp/>&amp;b-&gt;<ref refid="structsecp256k1__ge_1a3c04a97b606c82ea87e55d4a06f06b6e" kindref="member">x</ref>,<sp/>&amp;z12);</highlight></codeline>
<codeline lineno="374"><highlight class="normal"><sp/><sp/><sp/><sp/>s1<sp/>=<sp/>a-&gt;<ref refid="structsecp256k1__gej_1a29d5184060ad790d85a0c89a13820e0d" kindref="member">y</ref>;<sp/>secp256k1_fe_normalize_weak(&amp;s1);</highlight></codeline>
<codeline lineno="375"><highlight class="normal"><sp/><sp/><sp/><sp/>secp256k1_fe_mul(&amp;s2,<sp/>&amp;b-&gt;<ref refid="structsecp256k1__ge_1a604295983a1f4aa6e8b5b0f1e46f9ee0" kindref="member">y</ref>,<sp/>&amp;z12);<sp/>secp256k1_fe_mul(&amp;s2,<sp/>&amp;s2,<sp/>&amp;a-&gt;<ref refid="structsecp256k1__gej_1ae41776408dba32cbe28b5e345b5f2286" kindref="member">z</ref>);</highlight></codeline>
<codeline lineno="376"><highlight class="normal"><sp/><sp/><sp/><sp/>secp256k1_fe_negate(&amp;h,<sp/>&amp;u1,<sp/>1);<sp/>secp256k1_fe_add(&amp;h,<sp/>&amp;u2);</highlight></codeline>
<codeline lineno="377"><highlight class="normal"><sp/><sp/><sp/><sp/>secp256k1_fe_negate(&amp;i,<sp/>&amp;s1,<sp/>1);<sp/>secp256k1_fe_add(&amp;i,<sp/>&amp;s2);</highlight></codeline>
<codeline lineno="378"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(secp256k1_fe_normalizes_to_zero_var(&amp;h))<sp/>{</highlight></codeline>
<codeline lineno="379"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(secp256k1_fe_normalizes_to_zero_var(&amp;i))<sp/>{</highlight></codeline>
<codeline lineno="380"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>secp256k1_gej_double_var(r,<sp/>a,<sp/>rzr);</highlight></codeline>
<codeline lineno="381"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="382"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(rzr<sp/>!=<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="383"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>secp256k1_fe_set_int(rzr,<sp/>0);</highlight></codeline>
<codeline lineno="384"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="385"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>r-&gt;<ref refid="structsecp256k1__gej_1ab3ec8168caf27aa3a092d512eaadaad9" kindref="member">infinity</ref><sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="386"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="387"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="388"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="389"><highlight class="normal"><sp/><sp/><sp/><sp/>secp256k1_fe_sqr(&amp;i2,<sp/>&amp;i);</highlight></codeline>
<codeline lineno="390"><highlight class="normal"><sp/><sp/><sp/><sp/>secp256k1_fe_sqr(&amp;h2,<sp/>&amp;h);</highlight></codeline>
<codeline lineno="391"><highlight class="normal"><sp/><sp/><sp/><sp/>secp256k1_fe_mul(&amp;h3,<sp/>&amp;h,<sp/>&amp;h2);</highlight></codeline>
<codeline lineno="392"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(rzr<sp/>!=<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="393"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*rzr<sp/>=<sp/>h;</highlight></codeline>
<codeline lineno="394"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="395"><highlight class="normal"><sp/><sp/><sp/><sp/>secp256k1_fe_mul(&amp;r-&gt;<ref refid="structsecp256k1__gej_1ae41776408dba32cbe28b5e345b5f2286" kindref="member">z</ref>,<sp/>&amp;a-&gt;<ref refid="structsecp256k1__gej_1ae41776408dba32cbe28b5e345b5f2286" kindref="member">z</ref>,<sp/>&amp;h);</highlight></codeline>
<codeline lineno="396"><highlight class="normal"><sp/><sp/><sp/><sp/>secp256k1_fe_mul(&amp;t,<sp/>&amp;u1,<sp/>&amp;h2);</highlight></codeline>
<codeline lineno="397"><highlight class="normal"><sp/><sp/><sp/><sp/>r-&gt;<ref refid="structsecp256k1__gej_1a7d2451c89411d62628ac466eb28c8ff5" kindref="member">x</ref><sp/>=<sp/>t;<sp/>secp256k1_fe_mul_int(&amp;r-&gt;<ref refid="structsecp256k1__gej_1a7d2451c89411d62628ac466eb28c8ff5" kindref="member">x</ref>,<sp/>2);<sp/>secp256k1_fe_add(&amp;r-&gt;<ref refid="structsecp256k1__gej_1a7d2451c89411d62628ac466eb28c8ff5" kindref="member">x</ref>,<sp/>&amp;h3);<sp/>secp256k1_fe_negate(&amp;r-&gt;<ref refid="structsecp256k1__gej_1a7d2451c89411d62628ac466eb28c8ff5" kindref="member">x</ref>,<sp/>&amp;r-&gt;<ref refid="structsecp256k1__gej_1a7d2451c89411d62628ac466eb28c8ff5" kindref="member">x</ref>,<sp/>3);<sp/>secp256k1_fe_add(&amp;r-&gt;<ref refid="structsecp256k1__gej_1a7d2451c89411d62628ac466eb28c8ff5" kindref="member">x</ref>,<sp/>&amp;i2);</highlight></codeline>
<codeline lineno="398"><highlight class="normal"><sp/><sp/><sp/><sp/>secp256k1_fe_negate(&amp;r-&gt;<ref refid="structsecp256k1__gej_1a29d5184060ad790d85a0c89a13820e0d" kindref="member">y</ref>,<sp/>&amp;r-&gt;<ref refid="structsecp256k1__gej_1a7d2451c89411d62628ac466eb28c8ff5" kindref="member">x</ref>,<sp/>5);<sp/>secp256k1_fe_add(&amp;r-&gt;<ref refid="structsecp256k1__gej_1a29d5184060ad790d85a0c89a13820e0d" kindref="member">y</ref>,<sp/>&amp;t);<sp/>secp256k1_fe_mul(&amp;r-&gt;<ref refid="structsecp256k1__gej_1a29d5184060ad790d85a0c89a13820e0d" kindref="member">y</ref>,<sp/>&amp;r-&gt;<ref refid="structsecp256k1__gej_1a29d5184060ad790d85a0c89a13820e0d" kindref="member">y</ref>,<sp/>&amp;i);</highlight></codeline>
<codeline lineno="399"><highlight class="normal"><sp/><sp/><sp/><sp/>secp256k1_fe_mul(&amp;h3,<sp/>&amp;h3,<sp/>&amp;s1);<sp/>secp256k1_fe_negate(&amp;h3,<sp/>&amp;h3,<sp/>1);</highlight></codeline>
<codeline lineno="400"><highlight class="normal"><sp/><sp/><sp/><sp/>secp256k1_fe_add(&amp;r-&gt;<ref refid="structsecp256k1__gej_1a29d5184060ad790d85a0c89a13820e0d" kindref="member">y</ref>,<sp/>&amp;h3);</highlight></codeline>
<codeline lineno="401"><highlight class="normal">}</highlight></codeline>
<codeline lineno="402"><highlight class="normal"></highlight></codeline>
<codeline lineno="403"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>secp256k1_gej_add_zinv_var(<ref refid="structsecp256k1__gej" kindref="compound">secp256k1_gej</ref><sp/>*r,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structsecp256k1__gej" kindref="compound">secp256k1_gej</ref><sp/>*a,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structsecp256k1__ge" kindref="compound">secp256k1_ge</ref><sp/>*b,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structsecp256k1__fe" kindref="compound">secp256k1_fe</ref><sp/>*bzinv)<sp/>{</highlight></codeline>
<codeline lineno="404"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>9<sp/>mul,<sp/>3<sp/>sqr,<sp/>4<sp/>normalize,<sp/>12<sp/>mul_int/add/negate<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="405"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structsecp256k1__fe" kindref="compound">secp256k1_fe</ref><sp/>az,<sp/>z12,<sp/>u1,<sp/>u2,<sp/>s1,<sp/>s2,<sp/>h,<sp/>i,<sp/>i2,<sp/>h2,<sp/>h3,<sp/>t;</highlight></codeline>
<codeline lineno="406"><highlight class="normal"></highlight></codeline>
<codeline lineno="407"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(b-&gt;<ref refid="structsecp256k1__ge_1a1cdb35fe7abf6f17c08e4375eeb26628" kindref="member">infinity</ref>)<sp/>{</highlight></codeline>
<codeline lineno="408"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*r<sp/>=<sp/>*a;</highlight></codeline>
<codeline lineno="409"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="410"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="411"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(a-&gt;<ref refid="structsecp256k1__gej_1ab3ec8168caf27aa3a092d512eaadaad9" kindref="member">infinity</ref>)<sp/>{</highlight></codeline>
<codeline lineno="412"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structsecp256k1__fe" kindref="compound">secp256k1_fe</ref><sp/>bzinv2,<sp/>bzinv3;</highlight></codeline>
<codeline lineno="413"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>r-&gt;<ref refid="structsecp256k1__gej_1ab3ec8168caf27aa3a092d512eaadaad9" kindref="member">infinity</ref><sp/>=<sp/>b-&gt;<ref refid="structsecp256k1__ge_1a1cdb35fe7abf6f17c08e4375eeb26628" kindref="member">infinity</ref>;</highlight></codeline>
<codeline lineno="414"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>secp256k1_fe_sqr(&amp;bzinv2,<sp/>bzinv);</highlight></codeline>
<codeline lineno="415"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>secp256k1_fe_mul(&amp;bzinv3,<sp/>&amp;bzinv2,<sp/>bzinv);</highlight></codeline>
<codeline lineno="416"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>secp256k1_fe_mul(&amp;r-&gt;<ref refid="structsecp256k1__gej_1a7d2451c89411d62628ac466eb28c8ff5" kindref="member">x</ref>,<sp/>&amp;b-&gt;<ref refid="structsecp256k1__ge_1a3c04a97b606c82ea87e55d4a06f06b6e" kindref="member">x</ref>,<sp/>&amp;bzinv2);</highlight></codeline>
<codeline lineno="417"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>secp256k1_fe_mul(&amp;r-&gt;<ref refid="structsecp256k1__gej_1a29d5184060ad790d85a0c89a13820e0d" kindref="member">y</ref>,<sp/>&amp;b-&gt;<ref refid="structsecp256k1__ge_1a604295983a1f4aa6e8b5b0f1e46f9ee0" kindref="member">y</ref>,<sp/>&amp;bzinv3);</highlight></codeline>
<codeline lineno="418"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>secp256k1_fe_set_int(&amp;r-&gt;<ref refid="structsecp256k1__gej_1ae41776408dba32cbe28b5e345b5f2286" kindref="member">z</ref>,<sp/>1);</highlight></codeline>
<codeline lineno="419"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="420"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="421"><highlight class="normal"><sp/><sp/><sp/><sp/>r-&gt;<ref refid="structsecp256k1__gej_1ab3ec8168caf27aa3a092d512eaadaad9" kindref="member">infinity</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="422"><highlight class="normal"></highlight></codeline>
<codeline lineno="431"><highlight class="normal"><sp/><sp/><sp/><sp/>secp256k1_fe_mul(&amp;az,<sp/>&amp;a-&gt;<ref refid="structsecp256k1__gej_1ae41776408dba32cbe28b5e345b5f2286" kindref="member">z</ref>,<sp/>bzinv);</highlight></codeline>
<codeline lineno="432"><highlight class="normal"></highlight></codeline>
<codeline lineno="433"><highlight class="normal"><sp/><sp/><sp/><sp/>secp256k1_fe_sqr(&amp;z12,<sp/>&amp;az);</highlight></codeline>
<codeline lineno="434"><highlight class="normal"><sp/><sp/><sp/><sp/>u1<sp/>=<sp/>a-&gt;<ref refid="structsecp256k1__gej_1a7d2451c89411d62628ac466eb28c8ff5" kindref="member">x</ref>;<sp/>secp256k1_fe_normalize_weak(&amp;u1);</highlight></codeline>
<codeline lineno="435"><highlight class="normal"><sp/><sp/><sp/><sp/>secp256k1_fe_mul(&amp;u2,<sp/>&amp;b-&gt;<ref refid="structsecp256k1__ge_1a3c04a97b606c82ea87e55d4a06f06b6e" kindref="member">x</ref>,<sp/>&amp;z12);</highlight></codeline>
<codeline lineno="436"><highlight class="normal"><sp/><sp/><sp/><sp/>s1<sp/>=<sp/>a-&gt;<ref refid="structsecp256k1__gej_1a29d5184060ad790d85a0c89a13820e0d" kindref="member">y</ref>;<sp/>secp256k1_fe_normalize_weak(&amp;s1);</highlight></codeline>
<codeline lineno="437"><highlight class="normal"><sp/><sp/><sp/><sp/>secp256k1_fe_mul(&amp;s2,<sp/>&amp;b-&gt;<ref refid="structsecp256k1__ge_1a604295983a1f4aa6e8b5b0f1e46f9ee0" kindref="member">y</ref>,<sp/>&amp;z12);<sp/>secp256k1_fe_mul(&amp;s2,<sp/>&amp;s2,<sp/>&amp;az);</highlight></codeline>
<codeline lineno="438"><highlight class="normal"><sp/><sp/><sp/><sp/>secp256k1_fe_negate(&amp;h,<sp/>&amp;u1,<sp/>1);<sp/>secp256k1_fe_add(&amp;h,<sp/>&amp;u2);</highlight></codeline>
<codeline lineno="439"><highlight class="normal"><sp/><sp/><sp/><sp/>secp256k1_fe_negate(&amp;i,<sp/>&amp;s1,<sp/>1);<sp/>secp256k1_fe_add(&amp;i,<sp/>&amp;s2);</highlight></codeline>
<codeline lineno="440"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(secp256k1_fe_normalizes_to_zero_var(&amp;h))<sp/>{</highlight></codeline>
<codeline lineno="441"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(secp256k1_fe_normalizes_to_zero_var(&amp;i))<sp/>{</highlight></codeline>
<codeline lineno="442"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>secp256k1_gej_double_var(r,<sp/>a,<sp/>NULL);</highlight></codeline>
<codeline lineno="443"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="444"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>r-&gt;<ref refid="structsecp256k1__gej_1ab3ec8168caf27aa3a092d512eaadaad9" kindref="member">infinity</ref><sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="445"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="446"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="447"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="448"><highlight class="normal"><sp/><sp/><sp/><sp/>secp256k1_fe_sqr(&amp;i2,<sp/>&amp;i);</highlight></codeline>
<codeline lineno="449"><highlight class="normal"><sp/><sp/><sp/><sp/>secp256k1_fe_sqr(&amp;h2,<sp/>&amp;h);</highlight></codeline>
<codeline lineno="450"><highlight class="normal"><sp/><sp/><sp/><sp/>secp256k1_fe_mul(&amp;h3,<sp/>&amp;h,<sp/>&amp;h2);</highlight></codeline>
<codeline lineno="451"><highlight class="normal"><sp/><sp/><sp/><sp/>r-&gt;<ref refid="structsecp256k1__gej_1ae41776408dba32cbe28b5e345b5f2286" kindref="member">z</ref><sp/>=<sp/>a-&gt;<ref refid="structsecp256k1__gej_1ae41776408dba32cbe28b5e345b5f2286" kindref="member">z</ref>;<sp/>secp256k1_fe_mul(&amp;r-&gt;<ref refid="structsecp256k1__gej_1ae41776408dba32cbe28b5e345b5f2286" kindref="member">z</ref>,<sp/>&amp;r-&gt;<ref refid="structsecp256k1__gej_1ae41776408dba32cbe28b5e345b5f2286" kindref="member">z</ref>,<sp/>&amp;h);</highlight></codeline>
<codeline lineno="452"><highlight class="normal"><sp/><sp/><sp/><sp/>secp256k1_fe_mul(&amp;t,<sp/>&amp;u1,<sp/>&amp;h2);</highlight></codeline>
<codeline lineno="453"><highlight class="normal"><sp/><sp/><sp/><sp/>r-&gt;<ref refid="structsecp256k1__gej_1a7d2451c89411d62628ac466eb28c8ff5" kindref="member">x</ref><sp/>=<sp/>t;<sp/>secp256k1_fe_mul_int(&amp;r-&gt;<ref refid="structsecp256k1__gej_1a7d2451c89411d62628ac466eb28c8ff5" kindref="member">x</ref>,<sp/>2);<sp/>secp256k1_fe_add(&amp;r-&gt;<ref refid="structsecp256k1__gej_1a7d2451c89411d62628ac466eb28c8ff5" kindref="member">x</ref>,<sp/>&amp;h3);<sp/>secp256k1_fe_negate(&amp;r-&gt;<ref refid="structsecp256k1__gej_1a7d2451c89411d62628ac466eb28c8ff5" kindref="member">x</ref>,<sp/>&amp;r-&gt;<ref refid="structsecp256k1__gej_1a7d2451c89411d62628ac466eb28c8ff5" kindref="member">x</ref>,<sp/>3);<sp/>secp256k1_fe_add(&amp;r-&gt;<ref refid="structsecp256k1__gej_1a7d2451c89411d62628ac466eb28c8ff5" kindref="member">x</ref>,<sp/>&amp;i2);</highlight></codeline>
<codeline lineno="454"><highlight class="normal"><sp/><sp/><sp/><sp/>secp256k1_fe_negate(&amp;r-&gt;<ref refid="structsecp256k1__gej_1a29d5184060ad790d85a0c89a13820e0d" kindref="member">y</ref>,<sp/>&amp;r-&gt;<ref refid="structsecp256k1__gej_1a7d2451c89411d62628ac466eb28c8ff5" kindref="member">x</ref>,<sp/>5);<sp/>secp256k1_fe_add(&amp;r-&gt;<ref refid="structsecp256k1__gej_1a29d5184060ad790d85a0c89a13820e0d" kindref="member">y</ref>,<sp/>&amp;t);<sp/>secp256k1_fe_mul(&amp;r-&gt;<ref refid="structsecp256k1__gej_1a29d5184060ad790d85a0c89a13820e0d" kindref="member">y</ref>,<sp/>&amp;r-&gt;<ref refid="structsecp256k1__gej_1a29d5184060ad790d85a0c89a13820e0d" kindref="member">y</ref>,<sp/>&amp;i);</highlight></codeline>
<codeline lineno="455"><highlight class="normal"><sp/><sp/><sp/><sp/>secp256k1_fe_mul(&amp;h3,<sp/>&amp;h3,<sp/>&amp;s1);<sp/>secp256k1_fe_negate(&amp;h3,<sp/>&amp;h3,<sp/>1);</highlight></codeline>
<codeline lineno="456"><highlight class="normal"><sp/><sp/><sp/><sp/>secp256k1_fe_add(&amp;r-&gt;<ref refid="structsecp256k1__gej_1a29d5184060ad790d85a0c89a13820e0d" kindref="member">y</ref>,<sp/>&amp;h3);</highlight></codeline>
<codeline lineno="457"><highlight class="normal">}</highlight></codeline>
<codeline lineno="458"><highlight class="normal"></highlight></codeline>
<codeline lineno="459"><highlight class="normal"></highlight></codeline>
<codeline lineno="460"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>secp256k1_gej_add_ge(<ref refid="structsecp256k1__gej" kindref="compound">secp256k1_gej</ref><sp/>*r,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structsecp256k1__gej" kindref="compound">secp256k1_gej</ref><sp/>*a,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structsecp256k1__ge" kindref="compound">secp256k1_ge</ref><sp/>*b)<sp/>{</highlight></codeline>
<codeline lineno="461"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Operations:<sp/>7<sp/>mul,<sp/>5<sp/>sqr,<sp/>4<sp/>normalize,<sp/>21<sp/>mul_int/add/negate/cmov<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="462"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structsecp256k1__fe" kindref="compound">secp256k1_fe</ref><sp/>fe_1<sp/>=<sp/><ref refid="field__10x26_8h_1a8c00ba3d97ea0d9b0d461463e890de15" kindref="member">SECP256K1_FE_CONST</ref>(0,<sp/>0,<sp/>0,<sp/>0,<sp/>0,<sp/>0,<sp/>0,<sp/>1);</highlight></codeline>
<codeline lineno="463"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structsecp256k1__fe" kindref="compound">secp256k1_fe</ref><sp/>zz,<sp/>u1,<sp/>u2,<sp/>s1,<sp/>s2,<sp/>t,<sp/>tt,<sp/>m,<sp/>n,<sp/>q,<sp/>rr;</highlight></codeline>
<codeline lineno="464"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structsecp256k1__fe" kindref="compound">secp256k1_fe</ref><sp/>m_alt,<sp/>rr_alt;</highlight></codeline>
<codeline lineno="465"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>infinity,<sp/>degenerate;</highlight></codeline>
<codeline lineno="466"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="secp256k1_2src_2util_8h_1aca8ac5ae73fd966db106de59160a178b" kindref="member">VERIFY_CHECK</ref>(!b-&gt;<ref refid="structsecp256k1__ge_1a1cdb35fe7abf6f17c08e4375eeb26628" kindref="member">infinity</ref>);</highlight></codeline>
<codeline lineno="467"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="secp256k1_2src_2util_8h_1aca8ac5ae73fd966db106de59160a178b" kindref="member">VERIFY_CHECK</ref>(a-&gt;<ref refid="structsecp256k1__gej_1ab3ec8168caf27aa3a092d512eaadaad9" kindref="member">infinity</ref><sp/>==<sp/>0<sp/>||<sp/>a-&gt;<ref refid="structsecp256k1__gej_1ab3ec8168caf27aa3a092d512eaadaad9" kindref="member">infinity</ref><sp/>==<sp/>1);</highlight></codeline>
<codeline lineno="468"><highlight class="normal"></highlight></codeline>
<codeline lineno="519"><highlight class="normal"><sp/><sp/><sp/><sp/>secp256k1_fe_sqr(&amp;zz,<sp/>&amp;a-&gt;<ref refid="structsecp256k1__gej_1ae41776408dba32cbe28b5e345b5f2286" kindref="member">z</ref>);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>z<sp/>=<sp/>Z1^2<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="520"><highlight class="normal"><sp/><sp/><sp/><sp/>u1<sp/>=<sp/>a-&gt;<ref refid="structsecp256k1__gej_1a7d2451c89411d62628ac466eb28c8ff5" kindref="member">x</ref>;<sp/>secp256k1_fe_normalize_weak(&amp;u1);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>u1<sp/>=<sp/>U1<sp/>=<sp/>X1*Z2^2<sp/>(1)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="521"><highlight class="normal"><sp/><sp/><sp/><sp/>secp256k1_fe_mul(&amp;u2,<sp/>&amp;b-&gt;<ref refid="structsecp256k1__ge_1a3c04a97b606c82ea87e55d4a06f06b6e" kindref="member">x</ref>,<sp/>&amp;zz);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>u2<sp/>=<sp/>U2<sp/>=<sp/>X2*Z1^2<sp/>(1)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="522"><highlight class="normal"><sp/><sp/><sp/><sp/>s1<sp/>=<sp/>a-&gt;<ref refid="structsecp256k1__gej_1a29d5184060ad790d85a0c89a13820e0d" kindref="member">y</ref>;<sp/>secp256k1_fe_normalize_weak(&amp;s1);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>s1<sp/>=<sp/>S1<sp/>=<sp/>Y1*Z2^3<sp/>(1)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="523"><highlight class="normal"><sp/><sp/><sp/><sp/>secp256k1_fe_mul(&amp;s2,<sp/>&amp;b-&gt;<ref refid="structsecp256k1__ge_1a604295983a1f4aa6e8b5b0f1e46f9ee0" kindref="member">y</ref>,<sp/>&amp;zz);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>s2<sp/>=<sp/>Y2*Z1^2<sp/>(1)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="524"><highlight class="normal"><sp/><sp/><sp/><sp/>secp256k1_fe_mul(&amp;s2,<sp/>&amp;s2,<sp/>&amp;a-&gt;<ref refid="structsecp256k1__gej_1ae41776408dba32cbe28b5e345b5f2286" kindref="member">z</ref>);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>s2<sp/>=<sp/>S2<sp/>=<sp/>Y2*Z1^3<sp/>(1)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="525"><highlight class="normal"><sp/><sp/><sp/><sp/>t<sp/>=<sp/>u1;<sp/>secp256k1_fe_add(&amp;t,<sp/>&amp;u2);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>t<sp/>=<sp/>T<sp/>=<sp/>U1+U2<sp/>(2)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="526"><highlight class="normal"><sp/><sp/><sp/><sp/>m<sp/>=<sp/>s1;<sp/>secp256k1_fe_add(&amp;m,<sp/>&amp;s2);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>m<sp/>=<sp/>M<sp/>=<sp/>S1+S2<sp/>(2)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="527"><highlight class="normal"><sp/><sp/><sp/><sp/>secp256k1_fe_sqr(&amp;rr,<sp/>&amp;t);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>rr<sp/>=<sp/>T^2<sp/>(1)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="528"><highlight class="normal"><sp/><sp/><sp/><sp/>secp256k1_fe_negate(&amp;m_alt,<sp/>&amp;u2,<sp/>1);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Malt<sp/>=<sp/>-X2*Z1^2<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="529"><highlight class="normal"><sp/><sp/><sp/><sp/>secp256k1_fe_mul(&amp;tt,<sp/>&amp;u1,<sp/>&amp;m_alt);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>tt<sp/>=<sp/>-U1*U2<sp/>(2)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="530"><highlight class="normal"><sp/><sp/><sp/><sp/>secp256k1_fe_add(&amp;rr,<sp/>&amp;tt);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>rr<sp/>=<sp/>R<sp/>=<sp/>T^2-U1*U2<sp/>(3)<sp/>*/</highlight></codeline>
<codeline lineno="533"><highlight class="normal"><sp/><sp/><sp/><sp/>degenerate<sp/>=<sp/>secp256k1_fe_normalizes_to_zero(&amp;m)<sp/>&amp;</highlight></codeline>
<codeline lineno="534"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>secp256k1_fe_normalizes_to_zero(&amp;rr);</highlight></codeline>
<codeline lineno="535"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>This<sp/>only<sp/>occurs<sp/>when<sp/>y1<sp/>==<sp/>-y2<sp/>and<sp/>x1^3<sp/>==<sp/>x2^3,<sp/>but<sp/>x1<sp/>!=<sp/>x2.</highlight></codeline>
<codeline lineno="536"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>This<sp/>means<sp/>either<sp/>x1<sp/>==<sp/>beta*x2<sp/>or<sp/>beta*x1<sp/>==<sp/>x2,<sp/>where<sp/>beta<sp/>is</highlight></codeline>
<codeline lineno="537"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>a<sp/>nontrivial<sp/>cube<sp/>root<sp/>of<sp/>one.<sp/>In<sp/>either<sp/>case,<sp/>an<sp/>alternate</highlight></codeline>
<codeline lineno="538"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>non-indeterminate<sp/>expression<sp/>for<sp/>lambda<sp/>is<sp/>(y1<sp/>-<sp/>y2)/(x1<sp/>-<sp/>x2),</highlight></codeline>
<codeline lineno="539"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>so<sp/>we<sp/>set<sp/>R/M<sp/>equal<sp/>to<sp/>this.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="540"><highlight class="normal"><sp/><sp/><sp/><sp/>rr_alt<sp/>=<sp/>s1;</highlight></codeline>
<codeline lineno="541"><highlight class="normal"><sp/><sp/><sp/><sp/>secp256k1_fe_mul_int(&amp;rr_alt,<sp/>2);<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>rr<sp/>=<sp/>Y1*Z2^3<sp/>-<sp/>Y2*Z1^3<sp/>(2)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="542"><highlight class="normal"><sp/><sp/><sp/><sp/>secp256k1_fe_add(&amp;m_alt,<sp/>&amp;u1);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Malt<sp/>=<sp/>X1*Z2^2<sp/>-<sp/>X2*Z1^2<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="543"><highlight class="normal"></highlight></codeline>
<codeline lineno="544"><highlight class="normal"><sp/><sp/><sp/><sp/>secp256k1_fe_cmov(&amp;rr_alt,<sp/>&amp;rr,<sp/>!degenerate);</highlight></codeline>
<codeline lineno="545"><highlight class="normal"><sp/><sp/><sp/><sp/>secp256k1_fe_cmov(&amp;m_alt,<sp/>&amp;m,<sp/>!degenerate);</highlight></codeline>
<codeline lineno="546"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Now<sp/>Ralt<sp/>/<sp/>Malt<sp/>=<sp/>lambda<sp/>and<sp/>is<sp/>guaranteed<sp/>not<sp/>to<sp/>be<sp/>0/0.</highlight></codeline>
<codeline lineno="547"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>From<sp/>here<sp/>on<sp/>out<sp/>Ralt<sp/>and<sp/>Malt<sp/>represent<sp/>the<sp/>numerator</highlight></codeline>
<codeline lineno="548"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>and<sp/>denominator<sp/>of<sp/>lambda;<sp/>R<sp/>and<sp/>M<sp/>represent<sp/>the<sp/>explicit</highlight></codeline>
<codeline lineno="549"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>expressions<sp/>x1^2<sp/>+<sp/>x2^2<sp/>+<sp/>x1x2<sp/>and<sp/>y1<sp/>+<sp/>y2.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="550"><highlight class="normal"><sp/><sp/><sp/><sp/>secp256k1_fe_sqr(&amp;n,<sp/>&amp;m_alt);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>n<sp/>=<sp/>Malt^2<sp/>(1)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="551"><highlight class="normal"><sp/><sp/><sp/><sp/>secp256k1_fe_mul(&amp;q,<sp/>&amp;n,<sp/>&amp;t);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>q<sp/>=<sp/>Q<sp/>=<sp/>T*Malt^2<sp/>(1)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="552"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>These<sp/>two<sp/>lines<sp/>use<sp/>the<sp/>observation<sp/>that<sp/>either<sp/>M<sp/>==<sp/>Malt<sp/>or<sp/>M<sp/>==<sp/>0,</highlight></codeline>
<codeline lineno="553"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>so<sp/>M^3<sp/>*<sp/>Malt<sp/>is<sp/>either<sp/>Malt^4<sp/>(which<sp/>is<sp/>computed<sp/>by<sp/>squaring),<sp/>or</highlight></codeline>
<codeline lineno="554"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>zero<sp/>(which<sp/>is<sp/>&quot;computed&quot;<sp/>by<sp/>cmov).<sp/>So<sp/>the<sp/>cost<sp/>is<sp/>one<sp/>squaring</highlight></codeline>
<codeline lineno="555"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>versus<sp/>two<sp/>multiplications.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="556"><highlight class="normal"><sp/><sp/><sp/><sp/>secp256k1_fe_sqr(&amp;n,<sp/>&amp;n);</highlight></codeline>
<codeline lineno="557"><highlight class="normal"><sp/><sp/><sp/><sp/>secp256k1_fe_cmov(&amp;n,<sp/>&amp;m,<sp/>degenerate);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>n<sp/>=<sp/>M^3<sp/>*<sp/>Malt<sp/>(2)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="558"><highlight class="normal"><sp/><sp/><sp/><sp/>secp256k1_fe_sqr(&amp;t,<sp/>&amp;rr_alt);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>t<sp/>=<sp/>Ralt^2<sp/>(1)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="559"><highlight class="normal"><sp/><sp/><sp/><sp/>secp256k1_fe_mul(&amp;r-&gt;<ref refid="structsecp256k1__gej_1ae41776408dba32cbe28b5e345b5f2286" kindref="member">z</ref>,<sp/>&amp;a-&gt;<ref refid="structsecp256k1__gej_1ae41776408dba32cbe28b5e345b5f2286" kindref="member">z</ref>,<sp/>&amp;m_alt);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>r-&gt;z<sp/>=<sp/>Malt*Z<sp/>(1)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="560"><highlight class="normal"><sp/><sp/><sp/><sp/>infinity<sp/>=<sp/>secp256k1_fe_normalizes_to_zero(&amp;r-&gt;<ref refid="structsecp256k1__gej_1ae41776408dba32cbe28b5e345b5f2286" kindref="member">z</ref>)<sp/>*<sp/>(1<sp/>-<sp/>a-&gt;<ref refid="structsecp256k1__gej_1ab3ec8168caf27aa3a092d512eaadaad9" kindref="member">infinity</ref>);</highlight></codeline>
<codeline lineno="561"><highlight class="normal"><sp/><sp/><sp/><sp/>secp256k1_fe_mul_int(&amp;r-&gt;<ref refid="structsecp256k1__gej_1ae41776408dba32cbe28b5e345b5f2286" kindref="member">z</ref>,<sp/>2);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>r-&gt;z<sp/>=<sp/>Z3<sp/>=<sp/>2*Malt*Z<sp/>(2)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="562"><highlight class="normal"><sp/><sp/><sp/><sp/>secp256k1_fe_negate(&amp;q,<sp/>&amp;q,<sp/>1);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>q<sp/>=<sp/>-Q<sp/>(2)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="563"><highlight class="normal"><sp/><sp/><sp/><sp/>secp256k1_fe_add(&amp;t,<sp/>&amp;q);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>t<sp/>=<sp/>Ralt^2-Q<sp/>(3)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="564"><highlight class="normal"><sp/><sp/><sp/><sp/>secp256k1_fe_normalize_weak(&amp;t);</highlight></codeline>
<codeline lineno="565"><highlight class="normal"><sp/><sp/><sp/><sp/>r-&gt;<ref refid="structsecp256k1__gej_1a7d2451c89411d62628ac466eb28c8ff5" kindref="member">x</ref><sp/>=<sp/>t;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>r-&gt;x<sp/>=<sp/>Ralt^2-Q<sp/>(1)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="566"><highlight class="normal"><sp/><sp/><sp/><sp/>secp256k1_fe_mul_int(&amp;t,<sp/>2);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>t<sp/>=<sp/>2*x3<sp/>(2)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="567"><highlight class="normal"><sp/><sp/><sp/><sp/>secp256k1_fe_add(&amp;t,<sp/>&amp;q);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>t<sp/>=<sp/>2*x3<sp/>-<sp/>Q:<sp/>(4)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="568"><highlight class="normal"><sp/><sp/><sp/><sp/>secp256k1_fe_mul(&amp;t,<sp/>&amp;t,<sp/>&amp;rr_alt);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>t<sp/>=<sp/>Ralt*(2*x3<sp/>-<sp/>Q)<sp/>(1)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="569"><highlight class="normal"><sp/><sp/><sp/><sp/>secp256k1_fe_add(&amp;t,<sp/>&amp;n);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>t<sp/>=<sp/>Ralt*(2*x3<sp/>-<sp/>Q)<sp/>+<sp/>M^3*Malt<sp/>(3)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="570"><highlight class="normal"><sp/><sp/><sp/><sp/>secp256k1_fe_negate(&amp;r-&gt;<ref refid="structsecp256k1__gej_1a29d5184060ad790d85a0c89a13820e0d" kindref="member">y</ref>,<sp/>&amp;t,<sp/>3);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>r-&gt;y<sp/>=<sp/>Ralt*(Q<sp/>-<sp/>2x3)<sp/>-<sp/>M^3*Malt<sp/>(4)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="571"><highlight class="normal"><sp/><sp/><sp/><sp/>secp256k1_fe_normalize_weak(&amp;r-&gt;<ref refid="structsecp256k1__gej_1a29d5184060ad790d85a0c89a13820e0d" kindref="member">y</ref>);</highlight></codeline>
<codeline lineno="572"><highlight class="normal"><sp/><sp/><sp/><sp/>secp256k1_fe_mul_int(&amp;r-&gt;<ref refid="structsecp256k1__gej_1a7d2451c89411d62628ac466eb28c8ff5" kindref="member">x</ref>,<sp/>4);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>r-&gt;x<sp/>=<sp/>X3<sp/>=<sp/>4*(Ralt^2-Q)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="573"><highlight class="normal"><sp/><sp/><sp/><sp/>secp256k1_fe_mul_int(&amp;r-&gt;<ref refid="structsecp256k1__gej_1a29d5184060ad790d85a0c89a13820e0d" kindref="member">y</ref>,<sp/>4);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>r-&gt;y<sp/>=<sp/>Y3<sp/>=<sp/>4*Ralt*(Q<sp/>-<sp/>2x3)<sp/>-<sp/>4*M^3*Malt<sp/>(4)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="574"><highlight class="normal"></highlight></codeline>
<codeline lineno="576"><highlight class="normal"><sp/><sp/><sp/><sp/>secp256k1_fe_cmov(&amp;r-&gt;<ref refid="structsecp256k1__gej_1a7d2451c89411d62628ac466eb28c8ff5" kindref="member">x</ref>,<sp/>&amp;b-&gt;<ref refid="structsecp256k1__ge_1a3c04a97b606c82ea87e55d4a06f06b6e" kindref="member">x</ref>,<sp/>a-&gt;<ref refid="structsecp256k1__gej_1ab3ec8168caf27aa3a092d512eaadaad9" kindref="member">infinity</ref>);</highlight></codeline>
<codeline lineno="577"><highlight class="normal"><sp/><sp/><sp/><sp/>secp256k1_fe_cmov(&amp;r-&gt;<ref refid="structsecp256k1__gej_1a29d5184060ad790d85a0c89a13820e0d" kindref="member">y</ref>,<sp/>&amp;b-&gt;<ref refid="structsecp256k1__ge_1a604295983a1f4aa6e8b5b0f1e46f9ee0" kindref="member">y</ref>,<sp/>a-&gt;<ref refid="structsecp256k1__gej_1ab3ec8168caf27aa3a092d512eaadaad9" kindref="member">infinity</ref>);</highlight></codeline>
<codeline lineno="578"><highlight class="normal"><sp/><sp/><sp/><sp/>secp256k1_fe_cmov(&amp;r-&gt;<ref refid="structsecp256k1__gej_1ae41776408dba32cbe28b5e345b5f2286" kindref="member">z</ref>,<sp/>&amp;fe_1,<sp/>a-&gt;<ref refid="structsecp256k1__gej_1ab3ec8168caf27aa3a092d512eaadaad9" kindref="member">infinity</ref>);</highlight></codeline>
<codeline lineno="579"><highlight class="normal"><sp/><sp/><sp/><sp/>r-&gt;<ref refid="structsecp256k1__gej_1ab3ec8168caf27aa3a092d512eaadaad9" kindref="member">infinity</ref><sp/>=<sp/>infinity;</highlight></codeline>
<codeline lineno="580"><highlight class="normal">}</highlight></codeline>
<codeline lineno="581"><highlight class="normal"></highlight></codeline>
<codeline lineno="582"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>secp256k1_gej_rescale(<ref refid="structsecp256k1__gej" kindref="compound">secp256k1_gej</ref><sp/>*r,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structsecp256k1__fe" kindref="compound">secp256k1_fe</ref><sp/>*s)<sp/>{</highlight></codeline>
<codeline lineno="583"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Operations:<sp/>4<sp/>mul,<sp/>1<sp/>sqr<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="584"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structsecp256k1__fe" kindref="compound">secp256k1_fe</ref><sp/>zz;</highlight></codeline>
<codeline lineno="585"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="secp256k1_2src_2util_8h_1aca8ac5ae73fd966db106de59160a178b" kindref="member">VERIFY_CHECK</ref>(!secp256k1_fe_is_zero(s));</highlight></codeline>
<codeline lineno="586"><highlight class="normal"><sp/><sp/><sp/><sp/>secp256k1_fe_sqr(&amp;zz,<sp/>s);</highlight></codeline>
<codeline lineno="587"><highlight class="normal"><sp/><sp/><sp/><sp/>secp256k1_fe_mul(&amp;r-&gt;<ref refid="structsecp256k1__gej_1a7d2451c89411d62628ac466eb28c8ff5" kindref="member">x</ref>,<sp/>&amp;r-&gt;<ref refid="structsecp256k1__gej_1a7d2451c89411d62628ac466eb28c8ff5" kindref="member">x</ref>,<sp/>&amp;zz);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>r-&gt;x<sp/>*=<sp/>s^2<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="588"><highlight class="normal"><sp/><sp/><sp/><sp/>secp256k1_fe_mul(&amp;r-&gt;<ref refid="structsecp256k1__gej_1a29d5184060ad790d85a0c89a13820e0d" kindref="member">y</ref>,<sp/>&amp;r-&gt;<ref refid="structsecp256k1__gej_1a29d5184060ad790d85a0c89a13820e0d" kindref="member">y</ref>,<sp/>&amp;zz);</highlight></codeline>
<codeline lineno="589"><highlight class="normal"><sp/><sp/><sp/><sp/>secp256k1_fe_mul(&amp;r-&gt;<ref refid="structsecp256k1__gej_1a29d5184060ad790d85a0c89a13820e0d" kindref="member">y</ref>,<sp/>&amp;r-&gt;<ref refid="structsecp256k1__gej_1a29d5184060ad790d85a0c89a13820e0d" kindref="member">y</ref>,<sp/>s);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>r-&gt;y<sp/>*=<sp/>s^3<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="590"><highlight class="normal"><sp/><sp/><sp/><sp/>secp256k1_fe_mul(&amp;r-&gt;<ref refid="structsecp256k1__gej_1ae41776408dba32cbe28b5e345b5f2286" kindref="member">z</ref>,<sp/>&amp;r-&gt;<ref refid="structsecp256k1__gej_1ae41776408dba32cbe28b5e345b5f2286" kindref="member">z</ref>,<sp/>s);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>r-&gt;z<sp/>*=<sp/>s<sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="591"><highlight class="normal">}</highlight></codeline>
<codeline lineno="592"><highlight class="normal"></highlight></codeline>
<codeline lineno="593"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>secp256k1_ge_to_storage(<ref refid="structsecp256k1__ge__storage" kindref="compound">secp256k1_ge_storage</ref><sp/>*r,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structsecp256k1__ge" kindref="compound">secp256k1_ge</ref><sp/>*a)<sp/>{</highlight></codeline>
<codeline lineno="594"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structsecp256k1__fe" kindref="compound">secp256k1_fe</ref><sp/>x,<sp/>y;</highlight></codeline>
<codeline lineno="595"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="secp256k1_2src_2util_8h_1aca8ac5ae73fd966db106de59160a178b" kindref="member">VERIFY_CHECK</ref>(!a-&gt;<ref refid="structsecp256k1__ge_1a1cdb35fe7abf6f17c08e4375eeb26628" kindref="member">infinity</ref>);</highlight></codeline>
<codeline lineno="596"><highlight class="normal"><sp/><sp/><sp/><sp/>x<sp/>=<sp/>a-&gt;<ref refid="structsecp256k1__ge_1a3c04a97b606c82ea87e55d4a06f06b6e" kindref="member">x</ref>;</highlight></codeline>
<codeline lineno="597"><highlight class="normal"><sp/><sp/><sp/><sp/>secp256k1_fe_normalize(&amp;x);</highlight></codeline>
<codeline lineno="598"><highlight class="normal"><sp/><sp/><sp/><sp/>y<sp/>=<sp/>a-&gt;<ref refid="structsecp256k1__ge_1a604295983a1f4aa6e8b5b0f1e46f9ee0" kindref="member">y</ref>;</highlight></codeline>
<codeline lineno="599"><highlight class="normal"><sp/><sp/><sp/><sp/>secp256k1_fe_normalize(&amp;y);</highlight></codeline>
<codeline lineno="600"><highlight class="normal"><sp/><sp/><sp/><sp/>secp256k1_fe_to_storage(&amp;r-&gt;<ref refid="structsecp256k1__ge__storage_1abace3c7f244d8e7e42ac1b66a071371b" kindref="member">x</ref>,<sp/>&amp;x);</highlight></codeline>
<codeline lineno="601"><highlight class="normal"><sp/><sp/><sp/><sp/>secp256k1_fe_to_storage(&amp;r-&gt;<ref refid="structsecp256k1__ge__storage_1af0b13f3e06135a94484cc6f6dd4ef3cc" kindref="member">y</ref>,<sp/>&amp;y);</highlight></codeline>
<codeline lineno="602"><highlight class="normal">}</highlight></codeline>
<codeline lineno="603"><highlight class="normal"></highlight></codeline>
<codeline lineno="604"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>secp256k1_ge_from_storage(<ref refid="structsecp256k1__ge" kindref="compound">secp256k1_ge</ref><sp/>*r,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structsecp256k1__ge__storage" kindref="compound">secp256k1_ge_storage</ref><sp/>*a)<sp/>{</highlight></codeline>
<codeline lineno="605"><highlight class="normal"><sp/><sp/><sp/><sp/>secp256k1_fe_from_storage(&amp;r-&gt;<ref refid="structsecp256k1__ge_1a3c04a97b606c82ea87e55d4a06f06b6e" kindref="member">x</ref>,<sp/>&amp;a-&gt;<ref refid="structsecp256k1__ge__storage_1abace3c7f244d8e7e42ac1b66a071371b" kindref="member">x</ref>);</highlight></codeline>
<codeline lineno="606"><highlight class="normal"><sp/><sp/><sp/><sp/>secp256k1_fe_from_storage(&amp;r-&gt;<ref refid="structsecp256k1__ge_1a604295983a1f4aa6e8b5b0f1e46f9ee0" kindref="member">y</ref>,<sp/>&amp;a-&gt;<ref refid="structsecp256k1__ge__storage_1af0b13f3e06135a94484cc6f6dd4ef3cc" kindref="member">y</ref>);</highlight></codeline>
<codeline lineno="607"><highlight class="normal"><sp/><sp/><sp/><sp/>r-&gt;<ref refid="structsecp256k1__ge_1a1cdb35fe7abf6f17c08e4375eeb26628" kindref="member">infinity</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="608"><highlight class="normal">}</highlight></codeline>
<codeline lineno="609"><highlight class="normal"></highlight></codeline>
<codeline lineno="610"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="secp256k1_8h_1a7ddc487fd46aee88f21cabedb7268b1e" kindref="member">SECP256K1_INLINE</ref><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>secp256k1_ge_storage_cmov(<ref refid="structsecp256k1__ge__storage" kindref="compound">secp256k1_ge_storage</ref><sp/>*r,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structsecp256k1__ge__storage" kindref="compound">secp256k1_ge_storage</ref><sp/>*a,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>flag)<sp/>{</highlight></codeline>
<codeline lineno="611"><highlight class="normal"><sp/><sp/><sp/><sp/>secp256k1_fe_storage_cmov(&amp;r-&gt;<ref refid="structsecp256k1__ge__storage_1abace3c7f244d8e7e42ac1b66a071371b" kindref="member">x</ref>,<sp/>&amp;a-&gt;<ref refid="structsecp256k1__ge__storage_1abace3c7f244d8e7e42ac1b66a071371b" kindref="member">x</ref>,<sp/>flag);</highlight></codeline>
<codeline lineno="612"><highlight class="normal"><sp/><sp/><sp/><sp/>secp256k1_fe_storage_cmov(&amp;r-&gt;<ref refid="structsecp256k1__ge__storage_1af0b13f3e06135a94484cc6f6dd4ef3cc" kindref="member">y</ref>,<sp/>&amp;a-&gt;<ref refid="structsecp256k1__ge__storage_1af0b13f3e06135a94484cc6f6dd4ef3cc" kindref="member">y</ref>,<sp/>flag);</highlight></codeline>
<codeline lineno="613"><highlight class="normal">}</highlight></codeline>
<codeline lineno="614"><highlight class="normal"></highlight></codeline>
<codeline lineno="615"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>USE_ENDOMORPHISM</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="616"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>secp256k1_ge_mul_lambda(<ref refid="structsecp256k1__ge" kindref="compound">secp256k1_ge</ref><sp/>*r,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structsecp256k1__ge" kindref="compound">secp256k1_ge</ref><sp/>*a)<sp/>{</highlight></codeline>
<codeline lineno="617"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structsecp256k1__fe" kindref="compound">secp256k1_fe</ref><sp/>beta<sp/>=<sp/><ref refid="field__10x26_8h_1a8c00ba3d97ea0d9b0d461463e890de15" kindref="member">SECP256K1_FE_CONST</ref>(</highlight></codeline>
<codeline lineno="618"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0x7ae96a2bul,<sp/>0x657c0710ul,<sp/>0x6e64479eul,<sp/>0xac3434e9ul,</highlight></codeline>
<codeline lineno="619"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0x9cf04975ul,<sp/>0x12f58995ul,<sp/>0xc1396c28ul,<sp/>0x719501eeul</highlight></codeline>
<codeline lineno="620"><highlight class="normal"><sp/><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="621"><highlight class="normal"><sp/><sp/><sp/><sp/>*r<sp/>=<sp/>*a;</highlight></codeline>
<codeline lineno="622"><highlight class="normal"><sp/><sp/><sp/><sp/>secp256k1_fe_mul(&amp;r-&gt;<ref refid="structsecp256k1__ge_1a3c04a97b606c82ea87e55d4a06f06b6e" kindref="member">x</ref>,<sp/>&amp;r-&gt;<ref refid="structsecp256k1__ge_1a3c04a97b606c82ea87e55d4a06f06b6e" kindref="member">x</ref>,<sp/>&amp;beta);</highlight></codeline>
<codeline lineno="623"><highlight class="normal">}</highlight></codeline>
<codeline lineno="624"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="625"><highlight class="normal"></highlight></codeline>
<codeline lineno="626"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
    </programlisting>
    <location file="/home/dev/ds-160209/src/secp256k1/src/group_impl.h"/>
  </compounddef>
</doxygen>
