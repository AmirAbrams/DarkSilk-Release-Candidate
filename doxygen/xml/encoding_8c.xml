<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.9.1">
  <compounddef id="encoding_8c" kind="file" language="C++">
    <compoundname>encoding.c</compoundname>
    <includes local="no">stdio.h</includes>
    <includes local="no">stdlib.h</includes>
    <includes local="no">string.h</includes>
    <includes local="no">limits.h</includes>
    <includes refid="encoding_8h" local="yes">encoding.h</includes>
    <incdepgraph>
      <node id="33467">
        <label>stdlib.h</label>
      </node>
      <node id="33473">
        <label>stddef.h</label>
      </node>
      <node id="33469">
        <label>limits.h</label>
      </node>
      <node id="33465">
        <label>/home/dev/ds-160209/src/crypto/argon2/encoding.c</label>
        <link refid="encoding.c"/>
        <childnode refid="33466" relation="include">
        </childnode>
        <childnode refid="33467" relation="include">
        </childnode>
        <childnode refid="33468" relation="include">
        </childnode>
        <childnode refid="33469" relation="include">
        </childnode>
        <childnode refid="33470" relation="include">
        </childnode>
      </node>
      <node id="33470">
        <label>encoding.h</label>
        <link refid="encoding_8h"/>
        <childnode refid="33471" relation="include">
        </childnode>
      </node>
      <node id="33468">
        <label>string.h</label>
      </node>
      <node id="33472">
        <label>stdint.h</label>
        <link refid="stdint_8h"/>
      </node>
      <node id="33471">
        <label>argon2.h</label>
        <link refid="argon2_8h"/>
        <childnode refid="33472" relation="include">
        </childnode>
        <childnode refid="33473" relation="include">
        </childnode>
        <childnode refid="33469" relation="include">
        </childnode>
      </node>
      <node id="33466">
        <label>stdio.h</label>
      </node>
    </incdepgraph>
      <sectiondef kind="define">
      <memberdef kind="define" id="encoding_8c_1a67a26698612a951cb54a963f77cee538" prot="public" static="no">
        <name>EQ</name>
        <param><defname>x</defname></param>
        <param><defname>y</defname></param>
        <initializer>((((0U-((unsigned)(x) ^ (unsigned)(y))) &gt;&gt; 8) &amp; 0xFF) ^ 0xFF)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/crypto/argon2/encoding.c" line="61" column="9" bodyfile="/home/dev/ds-160209/src/crypto/argon2/encoding.c" bodystart="61" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="encoding_8c_1a8df7ad109bbbe1c1278157e968aecc1d" prot="public" static="no">
        <name>GT</name>
        <param><defname>x</defname></param>
        <param><defname>y</defname></param>
        <initializer>((((unsigned)(y) - (unsigned)(x)) &gt;&gt; 8) &amp; 0xFF)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/crypto/argon2/encoding.c" line="62" column="9" bodyfile="/home/dev/ds-160209/src/crypto/argon2/encoding.c" bodystart="62" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="encoding_8c_1a14e32c27dc9b188856093ae003f78b5c" prot="public" static="no">
        <name>GE</name>
        <param><defname>x</defname></param>
        <param><defname>y</defname></param>
        <initializer>(<ref refid="encoding_8c_1a8df7ad109bbbe1c1278157e968aecc1d" kindref="member">GT</ref>(y, x) ^ 0xFF)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/crypto/argon2/encoding.c" line="63" column="9" bodyfile="/home/dev/ds-160209/src/crypto/argon2/encoding.c" bodystart="63" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="encoding_8c_1a375b5090161790d5783d4bdd92f3f750" prot="public" static="no">
        <name>LT</name>
        <param><defname>x</defname></param>
        <param><defname>y</defname></param>
        <initializer><ref refid="encoding_8c_1a8df7ad109bbbe1c1278157e968aecc1d" kindref="member">GT</ref>(y, x)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/crypto/argon2/encoding.c" line="64" column="9" bodyfile="/home/dev/ds-160209/src/crypto/argon2/encoding.c" bodystart="64" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="encoding_8c_1a2196b2e9c04f037b20b9c064276ee7c9" prot="public" static="no">
        <name>LE</name>
        <param><defname>x</defname></param>
        <param><defname>y</defname></param>
        <initializer><ref refid="encoding_8c_1a14e32c27dc9b188856093ae003f78b5c" kindref="member">GE</ref>(y, x)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/crypto/argon2/encoding.c" line="65" column="9" bodyfile="/home/dev/ds-160209/src/crypto/argon2/encoding.c" bodystart="65" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="encoding_8c_1ac6381bc4d22ad438bf6147de6e70f92d" prot="public" static="no">
        <name>CC</name>
        <param><defname>prefix</defname></param>
        <initializer>do {                                                                       \
        size_t cc_len = strlen(prefix);                                        \
        if (strncmp(str, prefix, cc_len) != 0) {                               \
            return 0;                                                          \
        }                                                                      \
        str += cc_len;                                                         \
    } while ((void)0, 0)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/crypto/argon2/encoding.c" line="250" column="9"/>
        <referencedby refid="encoding_8h_1ada8ceb318c3429ae16f8fe41ee7eb61b" compoundref="encoding_8c" startline="249" endline="357">decode_string</referencedby>
      </memberdef>
      <memberdef kind="define" id="encoding_8c_1adbfcfbedd27ae340a857ead140cc35c4" prot="public" static="no">
        <name>CC_opt</name>
        <param><defname>prefix</defname></param>
        <param><defname>code</defname></param>
        <initializer>do {                                                                       \
        size_t cc_len = strlen(prefix);                                        \
        if (strncmp(str, prefix, cc_len) == 0) {                               \
            str += cc_len;                                                     \
            { code; }                                                          \
        }                                                                      \
    } while ((void)0, 0)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/crypto/argon2/encoding.c" line="259" column="9"/>
        <referencedby refid="encoding_8h_1ada8ceb318c3429ae16f8fe41ee7eb61b" compoundref="encoding_8c" startline="249" endline="357">decode_string</referencedby>
      </memberdef>
      <memberdef kind="define" id="encoding_8c_1a261bd8f8874ffe8d498f9c3cb9af7f5c" prot="public" static="no">
        <name>DECIMAL</name>
        <param><defname>x</defname></param>
        <initializer>do {                                                                       \
        unsigned long dec_x;                                                   \
        str = decode_decimal(str, &amp;dec_x);                                     \
        if (str == NULL) {                                                     \
            return 0;                                                          \
        }                                                                      \
        (x) = dec_x;                                                           \
    } while ((void)0, 0)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/crypto/argon2/encoding.c" line="268" column="9"/>
        <referencedby refid="encoding_8h_1ada8ceb318c3429ae16f8fe41ee7eb61b" compoundref="encoding_8c" startline="249" endline="357">decode_string</referencedby>
      </memberdef>
      <memberdef kind="define" id="encoding_8c_1a3950f91d72812c941f721b223375c05b" prot="public" static="no">
        <name>BIN</name>
        <param><defname>buf</defname></param>
        <param><defname>max_len</defname></param>
        <param><defname>len</defname></param>
        <initializer>do {                                                                       \
        size_t bin_len = (max_len);                                            \
        str = from_base64(buf, &amp;bin_len, str);                                 \
        if (str == NULL || bin_len &gt; UINT32_MAX) {                             \
            return 0;                                                          \
        }                                                                      \
        (len) = (<ref refid="stdint_8h_1a435d1572bf3f880d55459d9805097f62" kindref="member">uint32_t</ref>)bin_len;                                             \
    } while ((void)0, 0)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/crypto/argon2/encoding.c" line="278" column="9"/>
        <referencedby refid="encoding_8h_1ada8ceb318c3429ae16f8fe41ee7eb61b" compoundref="encoding_8c" startline="249" endline="357">decode_string</referencedby>
      </memberdef>
      <memberdef kind="define" id="encoding_8c_1af1fd7ab6e49ecda96b670504d375aa62" prot="public" static="no">
        <name>SS</name>
        <param><defname>str</defname></param>
        <initializer>do {                                                                       \
        size_t pp_len = strlen(str);                                           \
        if (pp_len &gt;= dst_len) {                                               \
            return 0;                                                          \
        }                                                                      \
        memcpy(dst, str, pp_len + 1);                                          \
        dst += pp_len;                                                         \
        dst_len -= pp_len;                                                     \
    } while ((void)0, 0)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/crypto/argon2/encoding.c" line="373" column="9"/>
        <referencedby refid="encoding_8h_1ad48815d59634a275959d0cbaf09756b7" compoundref="encoding_8c" startline="371" endline="434">encode_string</referencedby>
      </memberdef>
      <memberdef kind="define" id="encoding_8c_1a7a8f554f6ea8ea5af44d22d1b6e58650" prot="public" static="no">
        <name>SX</name>
        <param><defname>x</defname></param>
        <initializer>do {                                                                       \
        char tmp[30];                                                          \
        sprintf(tmp, &quot;%lu&quot;, (unsigned long)(x));                               \
        <ref refid="encoding_8c_1af1fd7ab6e49ecda96b670504d375aa62" kindref="member">SS</ref>(tmp);                                                               \
    } while ((void)0, 0)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/crypto/argon2/encoding.c" line="384" column="9"/>
        <referencedby refid="encoding_8h_1ad48815d59634a275959d0cbaf09756b7" compoundref="encoding_8c" startline="371" endline="434">encode_string</referencedby>
      </memberdef>
      <memberdef kind="define" id="encoding_8c_1a5f842c4b7ea72ba8f526d8c0d5122a62" prot="public" static="no">
        <name>SB</name>
        <param><defname>buf</defname></param>
        <param><defname>len</defname></param>
        <initializer>do {                                                                       \
        size_t sb_len = to_base64(dst, dst_len, buf, len);                     \
        if (sb_len == (size_t)-1) {                                            \
            return 0;                                                          \
        }                                                                      \
        dst += sb_len;                                                         \
        dst_len -= sb_len;                                                     \
    } while ((void)0, 0)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/crypto/argon2/encoding.c" line="391" column="9"/>
        <referencedby refid="encoding_8h_1ad48815d59634a275959d0cbaf09756b7" compoundref="encoding_8c" startline="371" endline="434">encode_string</referencedby>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="encoding_8c_1a832fe5ac462b5036c74b3b05d2971ae7" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>static int b64_byte_to_char</definition>
        <argsstring>(unsigned x)</argsstring>
        <name>b64_byte_to_char</name>
        <param>
          <type>unsigned</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/crypto/argon2/encoding.c" line="70" column="1" bodyfile="/home/dev/ds-160209/src/crypto/argon2/encoding.c" bodystart="70" bodyend="75"/>
      </memberdef>
      <memberdef kind="function" id="encoding_8c_1a192562974c72c8e3d126b9cb10cbe172" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>unsigned</type>
        <definition>static unsigned b64_char_to_byte</definition>
        <argsstring>(int c)</argsstring>
        <name>b64_char_to_byte</name>
        <param>
          <type>int</type>
          <declname>c</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/crypto/argon2/encoding.c" line="81" column="1" bodyfile="/home/dev/ds-160209/src/crypto/argon2/encoding.c" bodystart="81" bodyend="89"/>
      </memberdef>
      <memberdef kind="function" id="encoding_8c_1a866cea7c26fcd1bc9fbe88d96d644c28" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>size_t</type>
        <definition>static size_t to_base64</definition>
        <argsstring>(char *dst, size_t dst_len, const void *src, size_t src_len)</argsstring>
        <name>to_base64</name>
        <param>
          <type>char *</type>
          <declname>dst</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>dst_len</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>src</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>src_len</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/crypto/argon2/encoding.c" line="99" column="1" bodyfile="/home/dev/ds-160209/src/crypto/argon2/encoding.c" bodystart="99" bodyend="133"/>
      </memberdef>
      <memberdef kind="function" id="encoding_8c_1a95644f396dd65e6839d3ba9dc11107c8" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const char *</type>
        <definition>static const char* from_base64</definition>
        <argsstring>(void *dst, size_t *dst_len, const char *src)</argsstring>
        <name>from_base64</name>
        <param>
          <type>void *</type>
          <declname>dst</declname>
        </param>
        <param>
          <type>size_t *</type>
          <declname>dst_len</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>src</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/crypto/argon2/encoding.c" line="148" column="1" bodyfile="/home/dev/ds-160209/src/crypto/argon2/encoding.c" bodystart="148" bodyend="187"/>
      </memberdef>
      <memberdef kind="function" id="encoding_8c_1a3bf0794b156ebed6c7569ea6835abd45" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const char *</type>
        <definition>static const char* decode_decimal</definition>
        <argsstring>(const char *str, unsigned long *v)</argsstring>
        <name>decode_decimal</name>
        <param>
          <type>const char *</type>
          <declname>str</declname>
        </param>
        <param>
          <type>unsigned long *</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/crypto/argon2/encoding.c" line="196" column="1" bodyfile="/home/dev/ds-160209/src/crypto/argon2/encoding.c" bodystart="196" bodyend="223"/>
      </memberdef>
      <memberdef kind="function" id="encoding_8c_1ada8ceb318c3429ae16f8fe41ee7eb61b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int decode_string</definition>
        <argsstring>(argon2_context *ctx, const char *str, argon2_type type)</argsstring>
        <name>decode_string</name>
        <param>
          <type><ref refid="argon2_8h_1a43c74dc5ed515632feee9b2e1ff3e09f" kindref="member">argon2_context</ref> *</type>
          <declname>ctx</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>str</declname>
        </param>
        <param>
          <type><ref refid="argon2_8h_1af51eac9927f7f234943d076166aacf84" kindref="member">argon2_type</ref></type>
          <declname>type</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/crypto/argon2/encoding.c" line="249" column="1" bodyfile="/home/dev/ds-160209/src/crypto/argon2/encoding.c" bodystart="249" bodyend="357"/>
        <references refid="struct_argon2___context_1a27f944c49530b5a43d754c1a5ec30918" compoundref="argon2_8h" startline="183">Argon2_Context::adlen</references>
        <references refid="struct_argon2___context_1a1f151741022a0b25c66c704408522cca" compoundref="argon2_8h" startline="177">Argon2_Context::saltlen</references>
        <references refid="struct_argon2___context_1a11cb0932b2a6fd6fa0e6f5f5148f3ba9" compoundref="argon2_8h" startline="171">Argon2_Context::outlen</references>
        <references refid="argon2_8h_1a5d5d088fc49f3e133161c81e15fe1695ad879f03535165a16f3040eeae7eedefa" compoundref="argon2_8h" startline="197">Argon2_i</references>
        <references refid="encoding_8c_1ac6381bc4d22ad438bf6147de6e70f92d">CC</references>
        <references refid="argon2_8h_1a5d5d088fc49f3e133161c81e15fe1695a48ce300350099ad17bb3d5fe7da1c1cc" compoundref="argon2_8h" startline="197">Argon2_d</references>
        <references refid="encoding_8c_1a261bd8f8874ffe8d498f9c3cb9af7f5c">DECIMAL</references>
        <references refid="struct_argon2___context_1a78b6d500cdb208f3b09a10c07716d6ab" compoundref="argon2_8h" startline="186">Argon2_Context::m_cost</references>
        <references refid="struct_argon2___context_1adffe97f0527779835c511385dfc5d63d" compoundref="argon2_8h" startline="185">Argon2_Context::t_cost</references>
        <references refid="struct_argon2___context_1a8ab1ecf163c039d8db1d9eeb119b6112" compoundref="argon2_8h" startline="187">Argon2_Context::lanes</references>
        <references refid="struct_argon2___context_1a1efec02e4fd164068c7e77ec5f8b5b01" compoundref="argon2_8h" startline="188">Argon2_Context::threads</references>
        <references refid="encoding_8c_1adbfcfbedd27ae340a857ead140cc35c4">CC_opt</references>
        <references refid="encoding_8c_1a3950f91d72812c941f721b223375c05b">BIN</references>
        <references refid="struct_argon2___context_1a20329e319449d710c4f5bf591690b4c4" compoundref="argon2_8h" startline="182">Argon2_Context::ad</references>
        <references refid="struct_argon2___context_1a36bfd9d93195daafa0d7e4afdbbee1dc" compoundref="argon2_8h" startline="176">Argon2_Context::salt</references>
        <references refid="struct_argon2___context_1a53bc334f5ca86d2ff639abddb9b08177" compoundref="argon2_8h" startline="170">Argon2_Context::out</references>
        <referencedby refid="argon2_8h_1a6dbd567c6037a5c55987312158d5bb0a" compoundref="argon2_8c" startline="289" endline="341">argon2_verify</referencedby>
      </memberdef>
      <memberdef kind="function" id="encoding_8c_1ad48815d59634a275959d0cbaf09756b7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int encode_string</definition>
        <argsstring>(char *dst, size_t dst_len, argon2_context *ctx, argon2_type type)</argsstring>
        <name>encode_string</name>
        <param>
          <type>char *</type>
          <declname>dst</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>dst_len</declname>
        </param>
        <param>
          <type><ref refid="argon2_8h_1a43c74dc5ed515632feee9b2e1ff3e09f" kindref="member">argon2_context</ref> *</type>
          <declname>ctx</declname>
        </param>
        <param>
          <type><ref refid="argon2_8h_1af51eac9927f7f234943d076166aacf84" kindref="member">argon2_type</ref></type>
          <declname>type</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/crypto/argon2/encoding.c" line="371" column="1" bodyfile="/home/dev/ds-160209/src/crypto/argon2/encoding.c" bodystart="371" bodyend="434"/>
        <references refid="argon2_8h_1a5d5d088fc49f3e133161c81e15fe1695ad879f03535165a16f3040eeae7eedefa" compoundref="argon2_8h" startline="197">Argon2_i</references>
        <references refid="encoding_8c_1af1fd7ab6e49ecda96b670504d375aa62">SS</references>
        <references refid="argon2_8h_1a5d5d088fc49f3e133161c81e15fe1695a48ce300350099ad17bb3d5fe7da1c1cc" compoundref="argon2_8h" startline="197">Argon2_d</references>
        <references refid="encoding_8c_1a7a8f554f6ea8ea5af44d22d1b6e58650">SX</references>
        <references refid="struct_argon2___context_1a78b6d500cdb208f3b09a10c07716d6ab" compoundref="argon2_8h" startline="186">Argon2_Context::m_cost</references>
        <references refid="struct_argon2___context_1adffe97f0527779835c511385dfc5d63d" compoundref="argon2_8h" startline="185">Argon2_Context::t_cost</references>
        <references refid="struct_argon2___context_1a8ab1ecf163c039d8db1d9eeb119b6112" compoundref="argon2_8h" startline="187">Argon2_Context::lanes</references>
        <references refid="struct_argon2___context_1a27f944c49530b5a43d754c1a5ec30918" compoundref="argon2_8h" startline="183">Argon2_Context::adlen</references>
        <references refid="encoding_8c_1a5f842c4b7ea72ba8f526d8c0d5122a62">SB</references>
        <references refid="struct_argon2___context_1a20329e319449d710c4f5bf591690b4c4" compoundref="argon2_8h" startline="182">Argon2_Context::ad</references>
        <references refid="struct_argon2___context_1a1f151741022a0b25c66c704408522cca" compoundref="argon2_8h" startline="177">Argon2_Context::saltlen</references>
        <references refid="struct_argon2___context_1a36bfd9d93195daafa0d7e4afdbbee1dc" compoundref="argon2_8h" startline="176">Argon2_Context::salt</references>
        <references refid="struct_argon2___context_1a11cb0932b2a6fd6fa0e6f5f5148f3ba9" compoundref="argon2_8h" startline="171">Argon2_Context::outlen</references>
        <references refid="struct_argon2___context_1a53bc334f5ca86d2ff639abddb9b08177" compoundref="argon2_8h" startline="170">Argon2_Context::out</references>
        <referencedby refid="argon2_8h_1a49e50c1bc7f51a1230d1ce7bbcf18f9f" compoundref="argon2_8c" startline="166" endline="239">argon2_hash</referencedby>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#include<sp/>&lt;stdio.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdlib.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;string.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;limits.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="encoding_8h" kindref="compound">encoding.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="preprocessor">#</highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="8"><highlight class="comment"><sp/>*<sp/>Example<sp/>code<sp/>for<sp/>a<sp/>decoder<sp/>and<sp/>encoder<sp/>of<sp/>&quot;hash<sp/>strings&quot;,<sp/>with<sp/>Argon2i</highlight></codeline>
<codeline lineno="9"><highlight class="comment"><sp/>*<sp/>parameters.</highlight></codeline>
<codeline lineno="10"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="11"><highlight class="comment"><sp/>*<sp/>This<sp/>code<sp/>comprises<sp/>three<sp/>sections:</highlight></codeline>
<codeline lineno="12"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="13"><highlight class="comment"><sp/>*<sp/><sp/><sp/>--<sp/>The<sp/>first<sp/>section<sp/>contains<sp/>generic<sp/>Base64<sp/>encoding<sp/>and<sp/>decoding</highlight></codeline>
<codeline lineno="14"><highlight class="comment"><sp/>*<sp/><sp/><sp/>functions.<sp/>It<sp/>is<sp/>conceptually<sp/>applicable<sp/>to<sp/>any<sp/>hash<sp/>function</highlight></codeline>
<codeline lineno="15"><highlight class="comment"><sp/>*<sp/><sp/><sp/>implementation<sp/>that<sp/>uses<sp/>Base64<sp/>to<sp/>encode<sp/>and<sp/>decode<sp/>parameters,</highlight></codeline>
<codeline lineno="16"><highlight class="comment"><sp/>*<sp/><sp/><sp/>salts<sp/>and<sp/>outputs.<sp/>It<sp/>could<sp/>be<sp/>made<sp/>into<sp/>a<sp/>library,<sp/>provided<sp/>that</highlight></codeline>
<codeline lineno="17"><highlight class="comment"><sp/>*<sp/><sp/><sp/>the<sp/>relevant<sp/>functions<sp/>are<sp/>made<sp/>public<sp/>(non-static)<sp/>and<sp/>be<sp/>given</highlight></codeline>
<codeline lineno="18"><highlight class="comment"><sp/>*<sp/><sp/><sp/>reasonable<sp/>names<sp/>to<sp/>avoid<sp/>collisions<sp/>with<sp/>other<sp/>functions.</highlight></codeline>
<codeline lineno="19"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="20"><highlight class="comment"><sp/>*<sp/><sp/><sp/>--<sp/>The<sp/>second<sp/>section<sp/>is<sp/>specific<sp/>to<sp/>Argon2i.<sp/>It<sp/>encodes<sp/>and<sp/>decodes</highlight></codeline>
<codeline lineno="21"><highlight class="comment"><sp/>*<sp/><sp/><sp/>the<sp/>parameters,<sp/>salts<sp/>and<sp/>outputs.<sp/>It<sp/>does<sp/>not<sp/>compute<sp/>the<sp/>hash</highlight></codeline>
<codeline lineno="22"><highlight class="comment"><sp/>*<sp/><sp/><sp/>itself.</highlight></codeline>
<codeline lineno="23"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="24"><highlight class="comment"><sp/>*<sp/><sp/><sp/>--<sp/>The<sp/>third<sp/>section<sp/>is<sp/>test<sp/>code,<sp/>with<sp/>a<sp/>main()<sp/>function.<sp/>With</highlight></codeline>
<codeline lineno="25"><highlight class="comment"><sp/>*<sp/><sp/><sp/>this<sp/>section,<sp/>the<sp/>whole<sp/>file<sp/>compiles<sp/>as<sp/>a<sp/>stand-alone<sp/>program</highlight></codeline>
<codeline lineno="26"><highlight class="comment"><sp/>*<sp/><sp/><sp/>that<sp/>exercises<sp/>the<sp/>encoding<sp/>and<sp/>decoding<sp/>functions<sp/>with<sp/>some</highlight></codeline>
<codeline lineno="27"><highlight class="comment"><sp/>*<sp/><sp/><sp/>test<sp/>vectors.</highlight></codeline>
<codeline lineno="28"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="29"><highlight class="comment"><sp/>*<sp/>The<sp/>code<sp/>was<sp/>originally<sp/>written<sp/>by<sp/>Thomas<sp/>Pornin<sp/>&lt;pornin@bolet.org&gt;,</highlight></codeline>
<codeline lineno="30"><highlight class="comment"><sp/>*<sp/>to<sp/>whom<sp/>comments<sp/>and<sp/>remarks<sp/>may<sp/>be<sp/>sent.<sp/>It<sp/>is<sp/>released<sp/>under<sp/>what</highlight></codeline>
<codeline lineno="31"><highlight class="comment"><sp/>*<sp/>should<sp/>amount<sp/>to<sp/>Public<sp/>Domain<sp/>or<sp/>its<sp/>closest<sp/>equivalent;<sp/>the</highlight></codeline>
<codeline lineno="32"><highlight class="comment"><sp/>*<sp/>following<sp/>mantra<sp/>is<sp/>supposed<sp/>to<sp/>incarnate<sp/>that<sp/>fact<sp/>with<sp/>all<sp/>the</highlight></codeline>
<codeline lineno="33"><highlight class="comment"><sp/>*<sp/>proper<sp/>legal<sp/>rituals:</highlight></codeline>
<codeline lineno="34"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="35"><highlight class="comment"><sp/>*<sp/>---------------------------------------------------------------------</highlight></codeline>
<codeline lineno="36"><highlight class="comment"><sp/>*<sp/>This<sp/>file<sp/>is<sp/>provided<sp/>under<sp/>the<sp/>terms<sp/>of<sp/>Creative<sp/>Commons<sp/>CC0<sp/>1.0</highlight></codeline>
<codeline lineno="37"><highlight class="comment"><sp/>*<sp/>Public<sp/>Domain<sp/>Dedication.<sp/>To<sp/>the<sp/>extent<sp/>possible<sp/>under<sp/>law,<sp/>the</highlight></codeline>
<codeline lineno="38"><highlight class="comment"><sp/>*<sp/>author<sp/>(Thomas<sp/>Pornin)<sp/>has<sp/>waived<sp/>all<sp/>copyright<sp/>and<sp/>related<sp/>or</highlight></codeline>
<codeline lineno="39"><highlight class="comment"><sp/>*<sp/>neighboring<sp/>rights<sp/>to<sp/>this<sp/>file.<sp/>This<sp/>work<sp/>is<sp/>published<sp/>from:<sp/>Canada.</highlight></codeline>
<codeline lineno="40"><highlight class="comment"><sp/>*<sp/>---------------------------------------------------------------------</highlight></codeline>
<codeline lineno="41"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="42"><highlight class="comment"><sp/>*<sp/>Copyright<sp/>(c)<sp/>2015-2016<sp/>Thomas<sp/>Pornin</highlight></codeline>
<codeline lineno="43"><highlight class="comment"><sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>====================================================================<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="47"><highlight class="comment"><sp/>*<sp/>Common<sp/>code;<sp/>could<sp/>be<sp/>shared<sp/>between<sp/>different<sp/>hash<sp/>functions.</highlight></codeline>
<codeline lineno="48"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="49"><highlight class="comment"><sp/>*<sp/>Note:<sp/>the<sp/>Base64<sp/>functions<sp/>below<sp/>assume<sp/>that<sp/>uppercase<sp/>letters<sp/>(resp.</highlight></codeline>
<codeline lineno="50"><highlight class="comment"><sp/>*<sp/>lowercase<sp/>letters)<sp/>have<sp/>consecutive<sp/>numerical<sp/>codes,<sp/>that<sp/>fit<sp/>on<sp/>8</highlight></codeline>
<codeline lineno="51"><highlight class="comment"><sp/>*<sp/>bits.<sp/>All<sp/>modern<sp/>systems<sp/>use<sp/>ASCII-compatible<sp/>charsets,<sp/>where<sp/>these</highlight></codeline>
<codeline lineno="52"><highlight class="comment"><sp/>*<sp/>properties<sp/>are<sp/>true.<sp/>If<sp/>you<sp/>are<sp/>stuck<sp/>with<sp/>a<sp/>dinosaur<sp/>of<sp/>a<sp/>system</highlight></codeline>
<codeline lineno="53"><highlight class="comment"><sp/>*<sp/>that<sp/>still<sp/>defaults<sp/>to<sp/>EBCDIC<sp/>then<sp/>you<sp/>already<sp/>have<sp/>much<sp/>bigger</highlight></codeline>
<codeline lineno="54"><highlight class="comment"><sp/>*<sp/>interoperability<sp/>issues<sp/>to<sp/>deal<sp/>with.</highlight></codeline>
<codeline lineno="55"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="58"><highlight class="comment"><sp/>*<sp/>Some<sp/>macros<sp/>for<sp/>constant-time<sp/>comparisons.<sp/>These<sp/>work<sp/>over<sp/>values<sp/>in</highlight></codeline>
<codeline lineno="59"><highlight class="comment"><sp/>*<sp/>the<sp/>0..255<sp/>range.<sp/>Returned<sp/>value<sp/>is<sp/>0x00<sp/>on<sp/>&quot;false&quot;,<sp/>0xFF<sp/>on<sp/>&quot;true&quot;.</highlight></codeline>
<codeline lineno="60"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="61" refid="encoding_8c_1a67a26698612a951cb54a963f77cee538" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>EQ(x,<sp/>y)<sp/>((((0U-((unsigned)(x)<sp/>^<sp/>(unsigned)(y)))<sp/>&gt;&gt;<sp/>8)<sp/>&amp;<sp/>0xFF)<sp/>^<sp/>0xFF)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="62" refid="encoding_8c_1a8df7ad109bbbe1c1278157e968aecc1d" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>GT(x,<sp/>y)<sp/>((((unsigned)(y)<sp/>-<sp/>(unsigned)(x))<sp/>&gt;&gt;<sp/>8)<sp/>&amp;<sp/>0xFF)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="63" refid="encoding_8c_1a14e32c27dc9b188856093ae003f78b5c" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>GE(x,<sp/>y)<sp/>(GT(y,<sp/>x)<sp/>^<sp/>0xFF)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="64" refid="encoding_8c_1a375b5090161790d5783d4bdd92f3f750" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>LT(x,<sp/>y)<sp/>GT(y,<sp/>x)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="65" refid="encoding_8c_1a2196b2e9c04f037b20b9c064276ee7c9" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>LE(x,<sp/>y)<sp/>GE(y,<sp/>x)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="68"><highlight class="comment"><sp/>*<sp/>Convert<sp/>value<sp/>x<sp/>(0..63)<sp/>to<sp/>corresponding<sp/>Base64<sp/>character.</highlight></codeline>
<codeline lineno="69"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="70"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>b64_byte_to_char(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>x)<sp/>{</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="encoding_8c_1a375b5090161790d5783d4bdd92f3f750" kindref="member">LT</ref>(x,<sp/>26)<sp/>&amp;<sp/>(x<sp/>+<sp/></highlight><highlight class="charliteral">&apos;A&apos;</highlight><highlight class="normal">))<sp/>|</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(<ref refid="encoding_8c_1a14e32c27dc9b188856093ae003f78b5c" kindref="member">GE</ref>(x,<sp/>26)<sp/>&amp;<sp/><ref refid="encoding_8c_1a375b5090161790d5783d4bdd92f3f750" kindref="member">LT</ref>(x,<sp/>52)<sp/>&amp;<sp/>(x<sp/>+<sp/>(</highlight><highlight class="charliteral">&apos;a&apos;</highlight><highlight class="normal"><sp/>-<sp/>26)))<sp/>|</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(<ref refid="encoding_8c_1a14e32c27dc9b188856093ae003f78b5c" kindref="member">GE</ref>(x,<sp/>52)<sp/>&amp;<sp/><ref refid="encoding_8c_1a375b5090161790d5783d4bdd92f3f750" kindref="member">LT</ref>(x,<sp/>62)<sp/>&amp;<sp/>(x<sp/>+<sp/>(</highlight><highlight class="charliteral">&apos;0&apos;</highlight><highlight class="normal"><sp/>-<sp/>52)))<sp/>|<sp/>(<ref refid="encoding_8c_1a67a26698612a951cb54a963f77cee538" kindref="member">EQ</ref>(x,<sp/>62)<sp/>&amp;<sp/></highlight><highlight class="charliteral">&apos;+&apos;</highlight><highlight class="normal">)<sp/>|</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(<ref refid="encoding_8c_1a67a26698612a951cb54a963f77cee538" kindref="member">EQ</ref>(x,<sp/>63)<sp/>&amp;<sp/></highlight><highlight class="charliteral">&apos;/&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="75"><highlight class="normal">}</highlight></codeline>
<codeline lineno="76"><highlight class="normal"></highlight></codeline>
<codeline lineno="77"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="78"><highlight class="comment"><sp/>*<sp/>Convert<sp/>character<sp/>c<sp/>to<sp/>the<sp/>corresponding<sp/>6-bit<sp/>value.<sp/>If<sp/>character<sp/>c</highlight></codeline>
<codeline lineno="79"><highlight class="comment"><sp/>*<sp/>is<sp/>not<sp/>a<sp/>Base64<sp/>character,<sp/>then<sp/>0xFF<sp/>(255)<sp/>is<sp/>returned.</highlight></codeline>
<codeline lineno="80"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="81"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>b64_char_to_byte(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>c)<sp/>{</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>x;</highlight></codeline>
<codeline lineno="83"><highlight class="normal"></highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/>x<sp/>=<sp/>(<ref refid="encoding_8c_1a14e32c27dc9b188856093ae003f78b5c" kindref="member">GE</ref>(c,<sp/></highlight><highlight class="charliteral">&apos;A&apos;</highlight><highlight class="normal">)<sp/>&amp;<sp/><ref refid="encoding_8c_1a2196b2e9c04f037b20b9c064276ee7c9" kindref="member">LE</ref>(c,<sp/></highlight><highlight class="charliteral">&apos;Z&apos;</highlight><highlight class="normal">)<sp/>&amp;<sp/>(c<sp/>-<sp/></highlight><highlight class="charliteral">&apos;A&apos;</highlight><highlight class="normal">))<sp/>|</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(<ref refid="encoding_8c_1a14e32c27dc9b188856093ae003f78b5c" kindref="member">GE</ref>(c,<sp/></highlight><highlight class="charliteral">&apos;a&apos;</highlight><highlight class="normal">)<sp/>&amp;<sp/><ref refid="encoding_8c_1a2196b2e9c04f037b20b9c064276ee7c9" kindref="member">LE</ref>(c,<sp/></highlight><highlight class="charliteral">&apos;z&apos;</highlight><highlight class="normal">)<sp/>&amp;<sp/>(c<sp/>-<sp/>(</highlight><highlight class="charliteral">&apos;a&apos;</highlight><highlight class="normal"><sp/>-<sp/>26)))<sp/>|</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(<ref refid="encoding_8c_1a14e32c27dc9b188856093ae003f78b5c" kindref="member">GE</ref>(c,<sp/></highlight><highlight class="charliteral">&apos;0&apos;</highlight><highlight class="normal">)<sp/>&amp;<sp/><ref refid="encoding_8c_1a2196b2e9c04f037b20b9c064276ee7c9" kindref="member">LE</ref>(c,<sp/></highlight><highlight class="charliteral">&apos;9&apos;</highlight><highlight class="normal">)<sp/>&amp;<sp/>(c<sp/>-<sp/>(</highlight><highlight class="charliteral">&apos;0&apos;</highlight><highlight class="normal"><sp/>-<sp/>52)))<sp/>|<sp/>(<ref refid="encoding_8c_1a67a26698612a951cb54a963f77cee538" kindref="member">EQ</ref>(c,<sp/></highlight><highlight class="charliteral">&apos;+&apos;</highlight><highlight class="normal">)<sp/>&amp;<sp/>62)<sp/>|</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(<ref refid="encoding_8c_1a67a26698612a951cb54a963f77cee538" kindref="member">EQ</ref>(c,<sp/></highlight><highlight class="charliteral">&apos;/&apos;</highlight><highlight class="normal">)<sp/>&amp;<sp/>63);</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>x<sp/>|<sp/>(<ref refid="encoding_8c_1a67a26698612a951cb54a963f77cee538" kindref="member">EQ</ref>(x,<sp/>0)<sp/>&amp;<sp/>(<ref refid="encoding_8c_1a67a26698612a951cb54a963f77cee538" kindref="member">EQ</ref>(c,<sp/></highlight><highlight class="charliteral">&apos;A&apos;</highlight><highlight class="normal">)<sp/>^<sp/>0xFF));</highlight></codeline>
<codeline lineno="89"><highlight class="normal">}</highlight></codeline>
<codeline lineno="90"><highlight class="normal"></highlight></codeline>
<codeline lineno="91"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="92"><highlight class="comment"><sp/>*<sp/>Convert<sp/>some<sp/>bytes<sp/>to<sp/>Base64.<sp/>&apos;dst_len&apos;<sp/>is<sp/>the<sp/>length<sp/>(in<sp/>characters)</highlight></codeline>
<codeline lineno="93"><highlight class="comment"><sp/>*<sp/>of<sp/>the<sp/>output<sp/>buffer<sp/>&apos;dst&apos;;<sp/>if<sp/>that<sp/>buffer<sp/>is<sp/>not<sp/>large<sp/>enough<sp/>to</highlight></codeline>
<codeline lineno="94"><highlight class="comment"><sp/>*<sp/>receive<sp/>the<sp/>result<sp/>(including<sp/>the<sp/>terminating<sp/>0),<sp/>then<sp/>(size_t)-1</highlight></codeline>
<codeline lineno="95"><highlight class="comment"><sp/>*<sp/>is<sp/>returned.<sp/>Otherwise,<sp/>the<sp/>zero-terminated<sp/>Base64<sp/>string<sp/>is<sp/>written</highlight></codeline>
<codeline lineno="96"><highlight class="comment"><sp/>*<sp/>in<sp/>the<sp/>buffer,<sp/>and<sp/>the<sp/>output<sp/>length<sp/>(counted<sp/>WITHOUT<sp/>the<sp/>terminating</highlight></codeline>
<codeline lineno="97"><highlight class="comment"><sp/>*<sp/>zero)<sp/>is<sp/>returned.</highlight></codeline>
<codeline lineno="98"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="99"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>to_base64(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*dst,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>dst_len,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*src,</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>src_len)<sp/>{</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>olen;</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*buf;</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>acc,<sp/>acc_len;</highlight></codeline>
<codeline lineno="104"><highlight class="normal"></highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/>olen<sp/>=<sp/>(src_len<sp/>/<sp/>3)<sp/>&lt;&lt;<sp/>2;</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(src_len<sp/>%<sp/>3)<sp/>{</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>2:</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>olen++;</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>fall<sp/>through<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>1:</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>olen<sp/>+=<sp/>2;</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(dst_len<sp/>&lt;=<sp/>olen)<sp/>{</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">)-1;</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/>acc<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/>acc_len<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/>buf<sp/>=<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)src;</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(src_len--<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>acc<sp/>=<sp/>(acc<sp/>&lt;&lt;<sp/>8)<sp/>+<sp/>(*buf++);</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>acc_len<sp/>+=<sp/>8;</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(acc_len<sp/>&gt;=<sp/>6)<sp/>{</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>acc_len<sp/>-=<sp/>6;</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*dst++<sp/>=<sp/>(char)<sp/>b64_byte_to_char((acc<sp/>&gt;&gt;<sp/>acc_len)<sp/>&amp;<sp/>0x3F);</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(acc_len<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*dst++<sp/>=<sp/>(char)<sp/>b64_byte_to_char((acc<sp/>&lt;&lt;<sp/>(6<sp/>-<sp/>acc_len))<sp/>&amp;<sp/>0x3F);</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/>*dst++<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>olen;</highlight></codeline>
<codeline lineno="133"><highlight class="normal">}</highlight></codeline>
<codeline lineno="134"><highlight class="normal"></highlight></codeline>
<codeline lineno="135"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="136"><highlight class="comment"><sp/>*<sp/>Decode<sp/>Base64<sp/>chars<sp/>into<sp/>bytes.<sp/>The<sp/>&apos;*dst_len&apos;<sp/>value<sp/>must<sp/>initially</highlight></codeline>
<codeline lineno="137"><highlight class="comment"><sp/>*<sp/>contain<sp/>the<sp/>length<sp/>of<sp/>the<sp/>output<sp/>buffer<sp/>&apos;*dst&apos;;<sp/>when<sp/>the<sp/>decoding</highlight></codeline>
<codeline lineno="138"><highlight class="comment"><sp/>*<sp/>ends,<sp/>the<sp/>actual<sp/>number<sp/>of<sp/>decoded<sp/>bytes<sp/>is<sp/>written<sp/>back<sp/>in</highlight></codeline>
<codeline lineno="139"><highlight class="comment"><sp/>*<sp/>&apos;*dst_len&apos;.</highlight></codeline>
<codeline lineno="140"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="141"><highlight class="comment"><sp/>*<sp/>Decoding<sp/>stops<sp/>when<sp/>a<sp/>non-Base64<sp/>character<sp/>is<sp/>encountered,<sp/>or<sp/>when</highlight></codeline>
<codeline lineno="142"><highlight class="comment"><sp/>*<sp/>the<sp/>output<sp/>buffer<sp/>capacity<sp/>is<sp/>exceeded.<sp/>If<sp/>an<sp/>error<sp/>occurred<sp/>(output</highlight></codeline>
<codeline lineno="143"><highlight class="comment"><sp/>*<sp/>buffer<sp/>is<sp/>too<sp/>small,<sp/>invalid<sp/>last<sp/>characters<sp/>leading<sp/>to<sp/>unprocessed</highlight></codeline>
<codeline lineno="144"><highlight class="comment"><sp/>*<sp/>buffered<sp/>bits),<sp/>then<sp/>NULL<sp/>is<sp/>returned;<sp/>otherwise,<sp/>the<sp/>returned<sp/>value</highlight></codeline>
<codeline lineno="145"><highlight class="comment"><sp/>*<sp/>points<sp/>to<sp/>the<sp/>first<sp/>non-Base64<sp/>character<sp/>in<sp/>the<sp/>source<sp/>stream,<sp/>which</highlight></codeline>
<codeline lineno="146"><highlight class="comment"><sp/>*<sp/>may<sp/>be<sp/>the<sp/>terminating<sp/>zero.</highlight></codeline>
<codeline lineno="147"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="148"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*from_base64(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*dst,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>*dst_len,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*src)<sp/>{</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>len;</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*buf;</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>acc,<sp/>acc_len;</highlight></codeline>
<codeline lineno="152"><highlight class="normal"></highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/>buf<sp/>=<sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)dst;</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/>len<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/>acc<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/>acc_len<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(;;)<sp/>{</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>d;</highlight></codeline>
<codeline lineno="159"><highlight class="normal"></highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>d<sp/>=<sp/>b64_char_to_byte(*src);</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(d<sp/>==<sp/>0xFF)<sp/>{</highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>src++;</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>acc<sp/>=<sp/>(acc<sp/>&lt;&lt;<sp/>6)<sp/>+<sp/>d;</highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>acc_len<sp/>+=<sp/>6;</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(acc_len<sp/>&gt;=<sp/>8)<sp/>{</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>acc_len<sp/>-=<sp/>8;</highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((len++)<sp/>&gt;=<sp/>*dst_len)<sp/>{</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*buf++<sp/>=<sp/>(acc<sp/>&gt;&gt;<sp/>acc_len)<sp/>&amp;<sp/>0xFF;</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="175"><highlight class="normal"></highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="177"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>If<sp/>the<sp/>input<sp/>length<sp/>is<sp/>equal<sp/>to<sp/>1<sp/>modulo<sp/>4<sp/>(which<sp/>is</highlight></codeline>
<codeline lineno="178"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>invalid),<sp/>then<sp/>there<sp/>will<sp/>remain<sp/>6<sp/>unprocessed<sp/>bits;</highlight></codeline>
<codeline lineno="179"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>otherwise,<sp/>only<sp/>0,<sp/>2<sp/>or<sp/>4<sp/>bits<sp/>are<sp/>buffered.<sp/>The<sp/>buffered</highlight></codeline>
<codeline lineno="180"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>bits<sp/>must<sp/>also<sp/>all<sp/>be<sp/>zero.</highlight></codeline>
<codeline lineno="181"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(acc_len<sp/>&gt;<sp/>4<sp/>||<sp/>(acc<sp/>&amp;<sp/>(((</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal">)1<sp/>&lt;&lt;<sp/>acc_len)<sp/>-<sp/>1))<sp/>!=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><sp/><sp/>*dst_len<sp/>=<sp/>len;</highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>src;</highlight></codeline>
<codeline lineno="187"><highlight class="normal">}</highlight></codeline>
<codeline lineno="188"><highlight class="normal"></highlight></codeline>
<codeline lineno="189"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="190"><highlight class="comment"><sp/>*<sp/>Decode<sp/>decimal<sp/>integer<sp/>from<sp/>&apos;str&apos;;<sp/>the<sp/>value<sp/>is<sp/>written<sp/>in<sp/>&apos;*v&apos;.</highlight></codeline>
<codeline lineno="191"><highlight class="comment"><sp/>*<sp/>Returned<sp/>value<sp/>is<sp/>a<sp/>pointer<sp/>to<sp/>the<sp/>next<sp/>non-decimal<sp/>character<sp/>in<sp/>the</highlight></codeline>
<codeline lineno="192"><highlight class="comment"><sp/>*<sp/>string.<sp/>If<sp/>there<sp/>is<sp/>no<sp/>digit<sp/>at<sp/>all,<sp/>or<sp/>the<sp/>value<sp/>encoding<sp/>is<sp/>not</highlight></codeline>
<codeline lineno="193"><highlight class="comment"><sp/>*<sp/>minimal<sp/>(extra<sp/>leading<sp/>zeros),<sp/>or<sp/>the<sp/>value<sp/>does<sp/>not<sp/>fit<sp/>in<sp/>an</highlight></codeline>
<codeline lineno="194"><highlight class="comment"><sp/>*<sp/>&apos;unsigned<sp/>long&apos;,<sp/>then<sp/>NULL<sp/>is<sp/>returned.</highlight></codeline>
<codeline lineno="195"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="196"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*decode_decimal(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*str,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>*v)<sp/>{</highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*orig;</highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>acc;</highlight></codeline>
<codeline lineno="199"><highlight class="normal"></highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/><sp/><sp/>acc<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(orig<sp/>=<sp/>str;;<sp/>str++)<sp/>{</highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>c;</highlight></codeline>
<codeline lineno="203"><highlight class="normal"></highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>c<sp/>=<sp/>*str;</highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(c<sp/>&lt;<sp/>&apos;0&apos;<sp/>||<sp/>c<sp/>&gt;<sp/></highlight><highlight class="charliteral">&apos;9&apos;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>c<sp/>-=<sp/></highlight><highlight class="charliteral">&apos;0&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(acc<sp/>&gt;<sp/>(ULONG_MAX<sp/>/<sp/>10))<sp/>{</highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>acc<sp/>*=<sp/>10;</highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal">)c<sp/>&gt;<sp/>(ULONG_MAX<sp/>-<sp/>acc))<sp/>{</highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>acc<sp/>+=<sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>long)c;</highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(str<sp/>==<sp/>orig<sp/>||<sp/>(*orig<sp/>==<sp/></highlight><highlight class="charliteral">&apos;0&apos;</highlight><highlight class="normal"><sp/>&amp;&amp;<sp/>str<sp/>!=<sp/>(orig<sp/>+<sp/>1)))<sp/>{</highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/><sp/><sp/>*v<sp/>=<sp/>acc;</highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>str;</highlight></codeline>
<codeline lineno="223"><highlight class="normal">}</highlight></codeline>
<codeline lineno="224"><highlight class="normal"></highlight></codeline>
<codeline lineno="225"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>====================================================================<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="226"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="227"><highlight class="comment"><sp/>*<sp/>Code<sp/>specific<sp/>to<sp/>Argon2i.</highlight></codeline>
<codeline lineno="228"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="229"><highlight class="comment"><sp/>*<sp/>The<sp/>code<sp/>below<sp/>applies<sp/>the<sp/>following<sp/>format:</highlight></codeline>
<codeline lineno="230"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="231"><highlight class="comment"><sp/>*<sp/><sp/>$argon2i$m=&lt;num&gt;,t=&lt;num&gt;,p=&lt;num&gt;[,keyid=&lt;bin&gt;][,data=&lt;bin&gt;][$&lt;bin&gt;[$&lt;bin&gt;]]</highlight></codeline>
<codeline lineno="232"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="233"><highlight class="comment"><sp/>*<sp/>where<sp/>&lt;num&gt;<sp/>is<sp/>a<sp/>decimal<sp/>integer<sp/>(positive,<sp/>fits<sp/>in<sp/>an<sp/>&apos;unsigned<sp/>long&apos;)</highlight></codeline>
<codeline lineno="234"><highlight class="comment"><sp/>*<sp/>and<sp/>&lt;bin&gt;<sp/>is<sp/>Base64-encoded<sp/>data<sp/>(no<sp/>&apos;=&apos;<sp/>padding<sp/>characters,<sp/>no<sp/>newline</highlight></codeline>
<codeline lineno="235"><highlight class="comment"><sp/>*<sp/>or<sp/>whitespace).<sp/>The<sp/>&quot;keyid&quot;<sp/>is<sp/>a<sp/>binary<sp/>identifier<sp/>for<sp/>a<sp/>key<sp/>(up<sp/>to<sp/>8</highlight></codeline>
<codeline lineno="236"><highlight class="comment"><sp/>*<sp/>bytes);<sp/>&quot;data&quot;<sp/>is<sp/>associated<sp/>data<sp/>(up<sp/>to<sp/>32<sp/>bytes).<sp/>When<sp/>the<sp/>&apos;keyid&apos;</highlight></codeline>
<codeline lineno="237"><highlight class="comment"><sp/>*<sp/>(resp.<sp/>the<sp/>&apos;data&apos;)<sp/>is<sp/>empty,<sp/>then<sp/>it<sp/>is<sp/>ommitted<sp/>from<sp/>the<sp/>output.</highlight></codeline>
<codeline lineno="238"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="239"><highlight class="comment"><sp/>*<sp/>The<sp/>last<sp/>two<sp/>binary<sp/>chunks<sp/>(encoded<sp/>in<sp/>Base64)<sp/>are,<sp/>in<sp/>that<sp/>order,</highlight></codeline>
<codeline lineno="240"><highlight class="comment"><sp/>*<sp/>the<sp/>salt<sp/>and<sp/>the<sp/>output.<sp/>Both<sp/>are<sp/>optional,<sp/>but<sp/>you<sp/>cannot<sp/>have<sp/>an</highlight></codeline>
<codeline lineno="241"><highlight class="comment"><sp/>*<sp/>output<sp/>without<sp/>a<sp/>salt.<sp/>The<sp/>binary<sp/>salt<sp/>length<sp/>is<sp/>between<sp/>8<sp/>and<sp/>48<sp/>bytes.</highlight></codeline>
<codeline lineno="242"><highlight class="comment"><sp/>*<sp/>The<sp/>output<sp/>length<sp/>is<sp/>always<sp/>exactly<sp/>32<sp/>bytes.</highlight></codeline>
<codeline lineno="243"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="244"><highlight class="normal"></highlight></codeline>
<codeline lineno="245"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="246"><highlight class="comment"><sp/>*<sp/>Decode<sp/>an<sp/>Argon2i<sp/>hash<sp/>string<sp/>into<sp/>the<sp/>provided<sp/>structure<sp/>&apos;ctx&apos;.</highlight></codeline>
<codeline lineno="247"><highlight class="comment"><sp/>*<sp/>Returned<sp/>value<sp/>is<sp/>1<sp/>on<sp/>success,<sp/>0<sp/>on<sp/>error.</highlight></codeline>
<codeline lineno="248"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="249" refid="encoding_8h_1ada8ceb318c3429ae16f8fe41ee7eb61b" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="encoding_8c_1ada8ceb318c3429ae16f8fe41ee7eb61b" kindref="member">decode_string</ref>(<ref refid="struct_argon2___context" kindref="compound">argon2_context</ref><sp/>*ctx,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*str,<sp/><ref refid="argon2_8h_1af51eac9927f7f234943d076166aacf84" kindref="member">argon2_type</ref><sp/>type)<sp/>{</highlight></codeline>
<codeline lineno="250"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>CC(prefix)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="251"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>do<sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="252"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>size_t<sp/>cc_len<sp/>=<sp/>strlen(prefix);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="253"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(strncmp(str,<sp/>prefix,<sp/>cc_len)<sp/>!=<sp/>0)<sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="254"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>0;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="255"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="256"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>str<sp/>+=<sp/>cc_len;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="257"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>}<sp/>while<sp/>((void)0,<sp/>0)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="258"><highlight class="normal"></highlight></codeline>
<codeline lineno="259"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>CC_opt(prefix,<sp/>code)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="260"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>do<sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="261"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>size_t<sp/>cc_len<sp/>=<sp/>strlen(prefix);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="262"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(strncmp(str,<sp/>prefix,<sp/>cc_len)<sp/>==<sp/>0)<sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="263"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>str<sp/>+=<sp/>cc_len;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="264"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/>code;<sp/>}<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="265"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="266"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>}<sp/>while<sp/>((void)0,<sp/>0)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="267"><highlight class="normal"></highlight></codeline>
<codeline lineno="268"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DECIMAL(x)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="269"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>do<sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="270"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>unsigned<sp/>long<sp/>dec_x;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="271"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>str<sp/>=<sp/>decode_decimal(str,<sp/>&amp;dec_x);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="272"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(str<sp/>==<sp/>NULL)<sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="273"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>0;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="274"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="275"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(x)<sp/>=<sp/>dec_x;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="276"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>}<sp/>while<sp/>((void)0,<sp/>0)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="277"><highlight class="normal"></highlight></codeline>
<codeline lineno="278"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>BIN(buf,<sp/>max_len,<sp/>len)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="279"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>do<sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="280"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>size_t<sp/>bin_len<sp/>=<sp/>(max_len);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="281"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>str<sp/>=<sp/>from_base64(buf,<sp/>&amp;bin_len,<sp/>str);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="282"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(str<sp/>==<sp/>NULL<sp/>||<sp/>bin_len<sp/>&gt;<sp/>UINT32_MAX)<sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="283"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>0;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="284"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="285"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(len)<sp/>=<sp/>(uint32_t)bin_len;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="286"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>}<sp/>while<sp/>((void)0,<sp/>0)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="287"><highlight class="normal"></highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>maxadlen<sp/>=<sp/>ctx-&gt;<ref refid="struct_argon2___context_1a27f944c49530b5a43d754c1a5ec30918" kindref="member">adlen</ref>;</highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>maxsaltlen<sp/>=<sp/>ctx-&gt;<ref refid="struct_argon2___context_1a1f151741022a0b25c66c704408522cca" kindref="member">saltlen</ref>;</highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>maxoutlen<sp/>=<sp/>ctx-&gt;<ref refid="struct_argon2___context_1a11cb0932b2a6fd6fa0e6f5f5148f3ba9" kindref="member">outlen</ref>;</highlight></codeline>
<codeline lineno="291"><highlight class="normal"></highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/><sp/><sp/>ctx-&gt;<ref refid="struct_argon2___context_1a27f944c49530b5a43d754c1a5ec30918" kindref="member">adlen</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/><sp/><sp/>ctx-&gt;<ref refid="struct_argon2___context_1a1f151741022a0b25c66c704408522cca" kindref="member">saltlen</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/><sp/><sp/>ctx-&gt;<ref refid="struct_argon2___context_1a11cb0932b2a6fd6fa0e6f5f5148f3ba9" kindref="member">outlen</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(type<sp/>==<sp/><ref refid="argon2_8h_1a5d5d088fc49f3e133161c81e15fe1695ad879f03535165a16f3040eeae7eedefa" kindref="member">Argon2_i</ref>)</highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="encoding_8c_1ac6381bc4d22ad438bf6147de6e70f92d" kindref="member">CC</ref>(</highlight><highlight class="stringliteral">&quot;$argon2i&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(type<sp/>==<sp/><ref refid="argon2_8h_1a5d5d088fc49f3e133161c81e15fe1695a48ce300350099ad17bb3d5fe7da1c1cc" kindref="member">Argon2_d</ref>)</highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="encoding_8c_1ac6381bc4d22ad438bf6147de6e70f92d" kindref="member">CC</ref>(</highlight><highlight class="stringliteral">&quot;$argon2d&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="299"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="300"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="301"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="encoding_8c_1ac6381bc4d22ad438bf6147de6e70f92d" kindref="member">CC</ref>(</highlight><highlight class="stringliteral">&quot;$m=&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="302"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="encoding_8c_1a261bd8f8874ffe8d498f9c3cb9af7f5c" kindref="member">DECIMAL</ref>(ctx-&gt;<ref refid="struct_argon2___context_1a78b6d500cdb208f3b09a10c07716d6ab" kindref="member">m_cost</ref>);</highlight></codeline>
<codeline lineno="303"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="encoding_8c_1ac6381bc4d22ad438bf6147de6e70f92d" kindref="member">CC</ref>(</highlight><highlight class="stringliteral">&quot;,t=&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="encoding_8c_1a261bd8f8874ffe8d498f9c3cb9af7f5c" kindref="member">DECIMAL</ref>(ctx-&gt;<ref refid="struct_argon2___context_1adffe97f0527779835c511385dfc5d63d" kindref="member">t_cost</ref>);</highlight></codeline>
<codeline lineno="305"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="encoding_8c_1ac6381bc4d22ad438bf6147de6e70f92d" kindref="member">CC</ref>(</highlight><highlight class="stringliteral">&quot;,p=&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="306"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="encoding_8c_1a261bd8f8874ffe8d498f9c3cb9af7f5c" kindref="member">DECIMAL</ref>(ctx-&gt;<ref refid="struct_argon2___context_1a8ab1ecf163c039d8db1d9eeb119b6112" kindref="member">lanes</ref>);</highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/><sp/><sp/><sp/>ctx-&gt;<ref refid="struct_argon2___context_1a1efec02e4fd164068c7e77ec5f8b5b01" kindref="member">threads</ref><sp/>=<sp/>ctx-&gt;<ref refid="struct_argon2___context_1a8ab1ecf163c039d8db1d9eeb119b6112" kindref="member">lanes</ref>;</highlight></codeline>
<codeline lineno="308"><highlight class="normal"></highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="310"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>Both<sp/>m<sp/>and<sp/>t<sp/>must<sp/>be<sp/>no<sp/>more<sp/>than<sp/>2^32-1.<sp/>The<sp/>tests<sp/>below</highlight></codeline>
<codeline lineno="311"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>use<sp/>a<sp/>shift<sp/>by<sp/>30<sp/>bits<sp/>to<sp/>avoid<sp/>a<sp/>direct<sp/>comparison<sp/>with</highlight></codeline>
<codeline lineno="312"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>0xFFFFFFFF,<sp/>which<sp/>may<sp/>trigger<sp/>a<sp/>spurious<sp/>compiler<sp/>warning</highlight></codeline>
<codeline lineno="313"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>on<sp/>machines<sp/>where<sp/>&apos;unsigned<sp/>long&apos;<sp/>is<sp/>a<sp/>32-bit<sp/>type.</highlight></codeline>
<codeline lineno="314"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ctx-&gt;<ref refid="struct_argon2___context_1a78b6d500cdb208f3b09a10c07716d6ab" kindref="member">m_cost</ref><sp/>&lt;<sp/>1<sp/>||<sp/>(ctx-&gt;<ref refid="struct_argon2___context_1a78b6d500cdb208f3b09a10c07716d6ab" kindref="member">m_cost</ref><sp/>&gt;&gt;<sp/>30)<sp/>&gt;<sp/>3)<sp/>{</highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="317"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="318"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ctx-&gt;<ref refid="struct_argon2___context_1adffe97f0527779835c511385dfc5d63d" kindref="member">t_cost</ref><sp/>&lt;<sp/>1<sp/>||<sp/>(ctx-&gt;<ref refid="struct_argon2___context_1adffe97f0527779835c511385dfc5d63d" kindref="member">t_cost</ref><sp/>&gt;&gt;<sp/>30)<sp/>&gt;<sp/>3)<sp/>{</highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="320"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="321"><highlight class="normal"></highlight></codeline>
<codeline lineno="322"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="323"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>The<sp/>parallelism<sp/>p<sp/>must<sp/>be<sp/>between<sp/>1<sp/>and<sp/>255.<sp/>The<sp/>memory<sp/>cost</highlight></codeline>
<codeline lineno="324"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>parameter,<sp/>expressed<sp/>in<sp/>kilobytes,<sp/>must<sp/>be<sp/>at<sp/>least<sp/>8<sp/>times</highlight></codeline>
<codeline lineno="325"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>the<sp/>value<sp/>of<sp/>p.</highlight></codeline>
<codeline lineno="326"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="327"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ctx-&gt;<ref refid="struct_argon2___context_1a8ab1ecf163c039d8db1d9eeb119b6112" kindref="member">lanes</ref><sp/>&lt;<sp/>1<sp/>||<sp/>ctx-&gt;<ref refid="struct_argon2___context_1a8ab1ecf163c039d8db1d9eeb119b6112" kindref="member">lanes</ref><sp/>&gt;<sp/>255)<sp/>{</highlight></codeline>
<codeline lineno="328"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="329"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="330"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ctx-&gt;<ref refid="struct_argon2___context_1a78b6d500cdb208f3b09a10c07716d6ab" kindref="member">m_cost</ref><sp/>&lt;<sp/>(ctx-&gt;<ref refid="struct_argon2___context_1a8ab1ecf163c039d8db1d9eeb119b6112" kindref="member">lanes</ref><sp/>&lt;&lt;<sp/>3))<sp/>{</highlight></codeline>
<codeline lineno="331"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="332"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="333"><highlight class="normal"></highlight></codeline>
<codeline lineno="334"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="encoding_8c_1adbfcfbedd27ae340a857ead140cc35c4" kindref="member">CC_opt</ref>(</highlight><highlight class="stringliteral">&quot;,data=&quot;</highlight><highlight class="normal">,<sp/><ref refid="encoding_8c_1a3950f91d72812c941f721b223375c05b" kindref="member">BIN</ref>(ctx-&gt;<ref refid="struct_argon2___context_1a20329e319449d710c4f5bf591690b4c4" kindref="member">ad</ref>,<sp/>maxadlen,<sp/>ctx-&gt;<ref refid="struct_argon2___context_1a27f944c49530b5a43d754c1a5ec30918" kindref="member">adlen</ref>));</highlight></codeline>
<codeline lineno="335"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(*str<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="336"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="337"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="338"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="encoding_8c_1ac6381bc4d22ad438bf6147de6e70f92d" kindref="member">CC</ref>(</highlight><highlight class="stringliteral">&quot;$&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="339"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="encoding_8c_1a3950f91d72812c941f721b223375c05b" kindref="member">BIN</ref>(ctx-&gt;<ref refid="struct_argon2___context_1a36bfd9d93195daafa0d7e4afdbbee1dc" kindref="member">salt</ref>,<sp/>maxsaltlen,<sp/>ctx-&gt;<ref refid="struct_argon2___context_1a1f151741022a0b25c66c704408522cca" kindref="member">saltlen</ref>);</highlight></codeline>
<codeline lineno="340"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ctx-&gt;<ref refid="struct_argon2___context_1a1f151741022a0b25c66c704408522cca" kindref="member">saltlen</ref><sp/>&lt;<sp/>8)<sp/>{</highlight></codeline>
<codeline lineno="341"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="342"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="343"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(*str<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="344"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="345"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="346"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="encoding_8c_1ac6381bc4d22ad438bf6147de6e70f92d" kindref="member">CC</ref>(</highlight><highlight class="stringliteral">&quot;$&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="347"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="encoding_8c_1a3950f91d72812c941f721b223375c05b" kindref="member">BIN</ref>(ctx-&gt;<ref refid="struct_argon2___context_1a53bc334f5ca86d2ff639abddb9b08177" kindref="member">out</ref>,<sp/>maxoutlen,<sp/>ctx-&gt;<ref refid="struct_argon2___context_1a11cb0932b2a6fd6fa0e6f5f5148f3ba9" kindref="member">outlen</ref>);</highlight></codeline>
<codeline lineno="348"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ctx-&gt;<ref refid="struct_argon2___context_1a11cb0932b2a6fd6fa0e6f5f5148f3ba9" kindref="member">outlen</ref><sp/>&lt;<sp/>12)<sp/>{</highlight></codeline>
<codeline lineno="349"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="350"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="351"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*str<sp/>==<sp/>0;</highlight></codeline>
<codeline lineno="352"><highlight class="normal"></highlight></codeline>
<codeline lineno="353"><highlight class="normal"></highlight><highlight class="preprocessor">#undef<sp/>CC</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="354"><highlight class="normal"></highlight><highlight class="preprocessor">#undef<sp/>CC_opt</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="355"><highlight class="normal"></highlight><highlight class="preprocessor">#undef<sp/>DECIMAL</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="356"><highlight class="normal"></highlight><highlight class="preprocessor">#undef<sp/>BIN</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="357"><highlight class="normal">}</highlight></codeline>
<codeline lineno="358"><highlight class="normal"></highlight></codeline>
<codeline lineno="359"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="360"><highlight class="comment"><sp/>*<sp/>encode<sp/>an<sp/>argon2i<sp/>hash<sp/>string<sp/>into<sp/>the<sp/>provided<sp/>buffer.<sp/>&apos;dst_len&apos;</highlight></codeline>
<codeline lineno="361"><highlight class="comment"><sp/>*<sp/>contains<sp/>the<sp/>size,<sp/>in<sp/>characters,<sp/>of<sp/>the<sp/>&apos;dst&apos;<sp/>buffer;<sp/>if<sp/>&apos;dst_len&apos;</highlight></codeline>
<codeline lineno="362"><highlight class="comment"><sp/>*<sp/>is<sp/>less<sp/>than<sp/>the<sp/>number<sp/>of<sp/>required<sp/>characters<sp/>(including<sp/>the</highlight></codeline>
<codeline lineno="363"><highlight class="comment"><sp/>*<sp/>terminating<sp/>0),<sp/>then<sp/>this<sp/>function<sp/>returns<sp/>0.</highlight></codeline>
<codeline lineno="364"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="365"><highlight class="comment"><sp/>*<sp/>if<sp/>pp-&gt;output_len<sp/>is<sp/>0,<sp/>then<sp/>the<sp/>hash<sp/>string<sp/>will<sp/>be<sp/>a<sp/>salt<sp/>string</highlight></codeline>
<codeline lineno="366"><highlight class="comment"><sp/>*<sp/>(no<sp/>output).<sp/>if<sp/>pp-&gt;salt_len<sp/>is<sp/>also<sp/>0,<sp/>then<sp/>the<sp/>string<sp/>will<sp/>be<sp/>a</highlight></codeline>
<codeline lineno="367"><highlight class="comment"><sp/>*<sp/>parameter-only<sp/>string<sp/>(no<sp/>salt<sp/>and<sp/>no<sp/>output).</highlight></codeline>
<codeline lineno="368"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="369"><highlight class="comment"><sp/>*<sp/>on<sp/>success,<sp/>1<sp/>is<sp/>returned.</highlight></codeline>
<codeline lineno="370"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="371" refid="encoding_8h_1ad48815d59634a275959d0cbaf09756b7" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="encoding_8c_1ad48815d59634a275959d0cbaf09756b7" kindref="member">encode_string</ref>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*dst,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>dst_len,<sp/><ref refid="struct_argon2___context" kindref="compound">argon2_context</ref><sp/>*ctx,</highlight></codeline>
<codeline lineno="372"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="argon2_8h_1af51eac9927f7f234943d076166aacf84" kindref="member">argon2_type</ref><sp/>type)<sp/>{</highlight></codeline>
<codeline lineno="373"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SS(str)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="374"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>do<sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="375"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>size_t<sp/>pp_len<sp/>=<sp/>strlen(str);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="376"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(pp_len<sp/>&gt;=<sp/>dst_len)<sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="377"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>0;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="378"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="379"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>memcpy(dst,<sp/>str,<sp/>pp_len<sp/>+<sp/>1);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="380"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dst<sp/>+=<sp/>pp_len;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="381"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dst_len<sp/>-=<sp/>pp_len;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="382"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>}<sp/>while<sp/>((void)0,<sp/>0)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="383"><highlight class="normal"></highlight></codeline>
<codeline lineno="384"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SX(x)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="385"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>do<sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="386"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>char<sp/>tmp[30];<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="387"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sprintf(tmp,<sp/>&quot;%lu&quot;,<sp/>(unsigned<sp/>long)(x));<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="388"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SS(tmp);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="389"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>}<sp/>while<sp/>((void)0,<sp/>0)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="390"><highlight class="normal"></highlight></codeline>
<codeline lineno="391"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SB(buf,<sp/>len)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="392"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>do<sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="393"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>size_t<sp/>sb_len<sp/>=<sp/>to_base64(dst,<sp/>dst_len,<sp/>buf,<sp/>len);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="394"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(sb_len<sp/>==<sp/>(size_t)-1)<sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="395"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>0;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="396"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="397"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dst<sp/>+=<sp/>sb_len;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="398"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dst_len<sp/>-=<sp/>sb_len;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="399"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>}<sp/>while<sp/>((void)0,<sp/>0)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="400"><highlight class="normal"></highlight></codeline>
<codeline lineno="401"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(type<sp/>==<sp/><ref refid="argon2_8h_1a5d5d088fc49f3e133161c81e15fe1695ad879f03535165a16f3040eeae7eedefa" kindref="member">Argon2_i</ref>)</highlight></codeline>
<codeline lineno="402"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="encoding_8c_1af1fd7ab6e49ecda96b670504d375aa62" kindref="member">SS</ref>(</highlight><highlight class="stringliteral">&quot;$argon2i$m=&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="403"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(type<sp/>==<sp/><ref refid="argon2_8h_1a5d5d088fc49f3e133161c81e15fe1695a48ce300350099ad17bb3d5fe7da1c1cc" kindref="member">Argon2_d</ref>)</highlight></codeline>
<codeline lineno="404"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="encoding_8c_1af1fd7ab6e49ecda96b670504d375aa62" kindref="member">SS</ref>(</highlight><highlight class="stringliteral">&quot;$argon2d$m=&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="405"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="406"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="407"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="encoding_8c_1a7a8f554f6ea8ea5af44d22d1b6e58650" kindref="member">SX</ref>(ctx-&gt;<ref refid="struct_argon2___context_1a78b6d500cdb208f3b09a10c07716d6ab" kindref="member">m_cost</ref>);</highlight></codeline>
<codeline lineno="408"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="encoding_8c_1af1fd7ab6e49ecda96b670504d375aa62" kindref="member">SS</ref>(</highlight><highlight class="stringliteral">&quot;,t=&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="409"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="encoding_8c_1a7a8f554f6ea8ea5af44d22d1b6e58650" kindref="member">SX</ref>(ctx-&gt;<ref refid="struct_argon2___context_1adffe97f0527779835c511385dfc5d63d" kindref="member">t_cost</ref>);</highlight></codeline>
<codeline lineno="410"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="encoding_8c_1af1fd7ab6e49ecda96b670504d375aa62" kindref="member">SS</ref>(</highlight><highlight class="stringliteral">&quot;,p=&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="411"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="encoding_8c_1a7a8f554f6ea8ea5af44d22d1b6e58650" kindref="member">SX</ref>(ctx-&gt;<ref refid="struct_argon2___context_1a8ab1ecf163c039d8db1d9eeb119b6112" kindref="member">lanes</ref>);</highlight></codeline>
<codeline lineno="412"><highlight class="normal"></highlight></codeline>
<codeline lineno="413"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ctx-&gt;<ref refid="struct_argon2___context_1a27f944c49530b5a43d754c1a5ec30918" kindref="member">adlen</ref><sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="414"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="encoding_8c_1af1fd7ab6e49ecda96b670504d375aa62" kindref="member">SS</ref>(</highlight><highlight class="stringliteral">&quot;,data=&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="415"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="encoding_8c_1a5f842c4b7ea72ba8f526d8c0d5122a62" kindref="member">SB</ref>(ctx-&gt;<ref refid="struct_argon2___context_1a20329e319449d710c4f5bf591690b4c4" kindref="member">ad</ref>,<sp/>ctx-&gt;<ref refid="struct_argon2___context_1a27f944c49530b5a43d754c1a5ec30918" kindref="member">adlen</ref>);</highlight></codeline>
<codeline lineno="416"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="417"><highlight class="normal"></highlight></codeline>
<codeline lineno="418"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ctx-&gt;<ref refid="struct_argon2___context_1a1f151741022a0b25c66c704408522cca" kindref="member">saltlen</ref><sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="419"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="420"><highlight class="normal"></highlight></codeline>
<codeline lineno="421"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="encoding_8c_1af1fd7ab6e49ecda96b670504d375aa62" kindref="member">SS</ref>(</highlight><highlight class="stringliteral">&quot;$&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="422"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="encoding_8c_1a5f842c4b7ea72ba8f526d8c0d5122a62" kindref="member">SB</ref>(ctx-&gt;<ref refid="struct_argon2___context_1a36bfd9d93195daafa0d7e4afdbbee1dc" kindref="member">salt</ref>,<sp/>ctx-&gt;<ref refid="struct_argon2___context_1a1f151741022a0b25c66c704408522cca" kindref="member">saltlen</ref>);</highlight></codeline>
<codeline lineno="423"><highlight class="normal"></highlight></codeline>
<codeline lineno="424"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ctx-&gt;<ref refid="struct_argon2___context_1a11cb0932b2a6fd6fa0e6f5f5148f3ba9" kindref="member">outlen</ref><sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="425"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="426"><highlight class="normal"></highlight></codeline>
<codeline lineno="427"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="encoding_8c_1af1fd7ab6e49ecda96b670504d375aa62" kindref="member">SS</ref>(</highlight><highlight class="stringliteral">&quot;$&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="428"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="encoding_8c_1a5f842c4b7ea72ba8f526d8c0d5122a62" kindref="member">SB</ref>(ctx-&gt;<ref refid="struct_argon2___context_1a53bc334f5ca86d2ff639abddb9b08177" kindref="member">out</ref>,<sp/>ctx-&gt;<ref refid="struct_argon2___context_1a11cb0932b2a6fd6fa0e6f5f5148f3ba9" kindref="member">outlen</ref>);</highlight></codeline>
<codeline lineno="429"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="430"><highlight class="normal"></highlight></codeline>
<codeline lineno="431"><highlight class="normal"></highlight><highlight class="preprocessor">#undef<sp/>SS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="432"><highlight class="normal"></highlight><highlight class="preprocessor">#undef<sp/>SX</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="433"><highlight class="normal"></highlight><highlight class="preprocessor">#undef<sp/>SB</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="434"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="/home/dev/ds-160209/src/crypto/argon2/encoding.c"/>
  </compounddef>
</doxygen>
