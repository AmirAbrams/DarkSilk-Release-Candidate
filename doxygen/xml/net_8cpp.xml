<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.9.1">
  <compounddef id="net_8cpp" kind="file" language="C++">
    <compoundname>net.cpp</compoundname>
    <includes refid="transaction_8h" local="yes">primitives/transaction.h</includes>
    <includes refid="init_8h" local="yes">init.h</includes>
    <includes refid="chainparams_8h" local="yes">chainparams.h</includes>
    <includes refid="db_8h" local="yes">db.h</includes>
    <includes refid="net_8h" local="yes">net.h</includes>
    <includes refid="main_8h" local="yes">main.h</includes>
    <includes refid="ui__interface_8h" local="yes">ui_interface.h</includes>
    <includes refid="sandstorm_8h" local="yes">sandstorm.h</includes>
    <includes refid="wallet_8h" local="yes">wallet.h</includes>
    <incdepgraph>
      <node id="41102">
        <label>list</label>
      </node>
      <node id="41071">
        <label>boost/thread/mutex.hpp</label>
      </node>
      <node id="41159">
        <label>leveldb/write_batch.h</label>
        <link refid="write__batch_8h"/>
        <childnode refid="41056" relation="include">
        </childnode>
        <childnode refid="41157" relation="include">
        </childnode>
      </node>
      <node id="41141">
        <label>netinet/in.h</label>
      </node>
      <node id="41054">
        <label>amount.h</label>
        <link refid="amount_8h"/>
        <childnode refid="41055" relation="include">
        </childnode>
        <childnode refid="41069" relation="include">
        </childnode>
        <childnode refid="41056" relation="include">
        </childnode>
      </node>
      <node id="41134">
        <label>arpa/inet.h</label>
      </node>
      <node id="41123">
        <label>boost/thread/condition_variable.hpp</label>
      </node>
      <node id="41061">
        <label>limits</label>
      </node>
      <node id="41118">
        <label>init.h</label>
        <link refid="init_8h"/>
      </node>
      <node id="41089">
        <label>crypto/sha256.h</label>
        <link refid="sha256_8h"/>
        <childnode refid="41062" relation="include">
        </childnode>
        <childnode refid="41069" relation="include">
        </childnode>
      </node>
      <node id="41090">
        <label>crypto/argon2/blake2/blake2.h</label>
        <link refid="blake2_8h"/>
        <childnode refid="41091" relation="include">
        </childnode>
        <childnode refid="41062" relation="include">
        </childnode>
        <childnode refid="41073" relation="include">
        </childnode>
      </node>
      <node id="41053">
        <label>primitives/transaction.h</label>
        <link refid="transaction_8h"/>
        <childnode refid="41054" relation="include">
        </childnode>
        <childnode refid="41077" relation="include">
        </childnode>
        <childnode refid="41055" relation="include">
        </childnode>
        <childnode refid="41080" relation="include">
        </childnode>
        <childnode refid="41081" relation="include">
        </childnode>
        <childnode refid="41117" relation="include">
        </childnode>
        <childnode refid="41115" relation="include">
        </childnode>
      </node>
      <node id="41081">
        <label>script.h</label>
        <link refid="script_8h"/>
        <childnode refid="41056" relation="include">
        </childnode>
        <childnode refid="41057" relation="include">
        </childnode>
        <childnode refid="41062" relation="include">
        </childnode>
        <childnode refid="41082" relation="include">
        </childnode>
        <childnode refid="41083" relation="include">
        </childnode>
        <childnode refid="41084" relation="include">
        </childnode>
        <childnode refid="41093" relation="include">
        </childnode>
        <childnode refid="41095" relation="include">
        </childnode>
        <childnode refid="41114" relation="include">
        </childnode>
      </node>
      <node id="41113">
        <label>openssl/rand.h</label>
      </node>
      <node id="41052">
        <label>/home/dev/ds-160209/src/net.cpp</label>
        <link refid="net.cpp"/>
        <childnode refid="41053" relation="include">
        </childnode>
        <childnode refid="41118" relation="include">
        </childnode>
        <childnode refid="41119" relation="include">
        </childnode>
        <childnode refid="41120" relation="include">
        </childnode>
        <childnode refid="41130" relation="include">
        </childnode>
        <childnode refid="41147" relation="include">
        </childnode>
        <childnode refid="41165" relation="include">
        </childnode>
        <childnode refid="41167" relation="include">
        </childnode>
        <childnode refid="41170" relation="include">
        </childnode>
      </node>
      <node id="41171">
        <label>walletdb.h</label>
        <link refid="walletdb_8h"/>
        <childnode refid="41120" relation="include">
        </childnode>
        <childnode refid="41172" relation="include">
        </childnode>
        <childnode refid="41114" relation="include">
        </childnode>
        <childnode refid="41054" relation="include">
        </childnode>
        <childnode refid="41102" relation="include">
        </childnode>
        <childnode refid="41056" relation="include">
        </childnode>
        <childnode refid="41103" relation="include">
        </childnode>
        <childnode refid="41057" relation="include">
        </childnode>
      </node>
      <node id="41078">
        <label>assert.h</label>
      </node>
      <node id="41066">
        <label>boost/tuple/tuple.hpp</label>
      </node>
      <node id="41140">
        <label>net/if.h</label>
      </node>
      <node id="41167">
        <label>sandstorm.h</label>
        <link refid="sandstorm_8h"/>
        <childnode refid="41121" relation="include">
        </childnode>
        <childnode refid="41168" relation="include">
        </childnode>
        <childnode refid="41174" relation="include">
        </childnode>
      </node>
      <node id="41148">
        <label>txmempool.h</label>
        <link refid="txmempool_8h"/>
        <childnode refid="41053" relation="include">
        </childnode>
        <childnode refid="41121" relation="include">
        </childnode>
        <childnode refid="41149" relation="include">
        </childnode>
        <childnode refid="41054" relation="include">
        </childnode>
        <childnode refid="41161" relation="include">
        </childnode>
      </node>
      <node id="41158">
        <label>leveldb/options.h</label>
        <link refid="options_8h"/>
        <childnode refid="41091" relation="include">
        </childnode>
      </node>
      <node id="41125">
        <label>boost/thread/recursive_mutex.hpp</label>
      </node>
      <node id="41175">
        <label>base58.h</label>
        <link refid="base58_8h"/>
        <childnode refid="41119" relation="include">
        </childnode>
        <childnode refid="41084" relation="include">
        </childnode>
        <childnode refid="41169" relation="include">
        </childnode>
        <childnode refid="41081" relation="include">
        </childnode>
        <childnode refid="41067" relation="include">
        </childnode>
        <childnode refid="41056" relation="include">
        </childnode>
        <childnode refid="41057" relation="include">
        </childnode>
      </node>
      <node id="41075">
        <label>version.h</label>
        <link refid="version_8h"/>
        <childnode refid="41076" relation="include">
        </childnode>
        <childnode refid="41056" relation="include">
        </childnode>
      </node>
      <node id="41149">
        <label>coins.h</label>
        <link refid="coins_8h"/>
        <childnode refid="41150" relation="include">
        </childnode>
        <childnode refid="41148" relation="include">
        </childnode>
        <childnode refid="41078" relation="include">
        </childnode>
        <childnode refid="41062" relation="include">
        </childnode>
        <childnode refid="41082" relation="include">
        </childnode>
        <childnode refid="41160" relation="include">
        </childnode>
      </node>
      <node id="41072">
        <label>sys/mman.h</label>
      </node>
      <node id="41069">
        <label>stdlib.h</label>
      </node>
      <node id="41162">
        <label>chain.h</label>
        <link refid="chain_8h"/>
        <childnode refid="41163" relation="include">
        </childnode>
        <childnode refid="41095" relation="include">
        </childnode>
        <childnode refid="41119" relation="include">
        </childnode>
        <childnode refid="41057" relation="include">
        </childnode>
        <childnode refid="41082" relation="include">
        </childnode>
      </node>
      <node id="41082">
        <label>boost/foreach.hpp</label>
      </node>
      <node id="41112">
        <label>openssl/crypto.h</label>
      </node>
      <node id="41137">
        <label>compat.h</label>
        <link refid="compat_8h"/>
        <childnode refid="41138" relation="include">
        </childnode>
        <childnode refid="41072" relation="include">
        </childnode>
        <childnode refid="41139" relation="include">
        </childnode>
        <childnode refid="41096" relation="include">
        </childnode>
        <childnode refid="41140" relation="include">
        </childnode>
        <childnode refid="41141" relation="include">
        </childnode>
        <childnode refid="41134" relation="include">
        </childnode>
        <childnode refid="41142" relation="include">
        </childnode>
        <childnode refid="41073" relation="include">
        </childnode>
        <childnode refid="41143" relation="include">
        </childnode>
        <childnode refid="41074" relation="include">
        </childnode>
        <childnode refid="41144" relation="include">
        </childnode>
      </node>
      <node id="41108">
        <label>boost/date_time/posix_time/posix_time_types.hpp</label>
      </node>
      <node id="41086">
        <label>openssl/sha.h</label>
      </node>
      <node id="41144">
        <label>errno.h</label>
      </node>
      <node id="41060">
        <label>cassert</label>
      </node>
      <node id="41079">
        <label>stdexcept</label>
      </node>
      <node id="41095">
        <label>util.h</label>
        <link refid="util_8h"/>
        <childnode refid="41096" relation="include">
        </childnode>
        <childnode refid="41097" relation="include">
        </childnode>
        <childnode refid="41098" relation="include">
        </childnode>
        <childnode refid="41055" relation="include">
        </childnode>
        <childnode refid="41099" relation="include">
        </childnode>
        <childnode refid="41054" relation="include">
        </childnode>
        <childnode refid="41058" relation="include">
        </childnode>
        <childnode refid="41102" relation="include">
        </childnode>
        <childnode refid="41103" relation="include">
        </childnode>
        <childnode refid="41057" relation="include">
        </childnode>
        <childnode refid="41056" relation="include">
        </childnode>
        <childnode refid="41104" relation="include">
        </childnode>
        <childnode refid="41105" relation="include">
        </childnode>
        <childnode refid="41106" relation="include">
        </childnode>
        <childnode refid="41107" relation="include">
        </childnode>
        <childnode refid="41108" relation="include">
        </childnode>
        <childnode refid="41109" relation="include">
        </childnode>
        <childnode refid="41110" relation="include">
        </childnode>
        <childnode refid="41111" relation="include">
        </childnode>
        <childnode refid="41112" relation="include">
        </childnode>
        <childnode refid="41113" relation="include">
        </childnode>
        <childnode refid="41094" relation="include">
        </childnode>
        <childnode refid="41062" relation="include">
        </childnode>
      </node>
      <node id="41145">
        <label>protocol.h</label>
        <link refid="protocol_8h"/>
        <childnode refid="41119" relation="include">
        </childnode>
        <childnode refid="41055" relation="include">
        </childnode>
        <childnode refid="41136" relation="include">
        </childnode>
        <childnode refid="41062" relation="include">
        </childnode>
        <childnode refid="41056" relation="include">
        </childnode>
      </node>
      <node id="41107">
        <label>boost/date_time/gregorian/gregorian_types.hpp</label>
      </node>
      <node id="41154">
        <label>leveldb/db.h</label>
        <link refid="leveldb_2include_2leveldb_2db_8h"/>
        <childnode refid="41062" relation="include">
        </childnode>
        <childnode refid="41115" relation="include">
        </childnode>
        <childnode refid="41155" relation="include">
        </childnode>
        <childnode refid="41158" relation="include">
        </childnode>
      </node>
      <node id="41056">
        <label>string</label>
      </node>
      <node id="41170">
        <label>wallet.h</label>
        <link refid="wallet_8h"/>
        <childnode refid="41171" relation="include">
        </childnode>
        <childnode refid="41056" relation="include">
        </childnode>
        <childnode refid="41057" relation="include">
        </childnode>
        <childnode refid="41069" relation="include">
        </childnode>
        <childnode refid="41163" relation="include">
        </childnode>
        <childnode refid="41053" relation="include">
        </childnode>
        <childnode refid="41173" relation="include">
        </childnode>
        <childnode refid="41147" relation="include">
        </childnode>
        <childnode refid="41169" relation="include">
        </childnode>
        <childnode refid="41172" relation="include">
        </childnode>
        <childnode refid="41081" relation="include">
        </childnode>
        <childnode refid="41165" relation="include">
        </childnode>
        <childnode refid="41095" relation="include">
        </childnode>
        <childnode refid="41114" relation="include">
        </childnode>
      </node>
      <node id="41164">
        <label>scrypt.h</label>
        <link refid="scrypt_8h"/>
        <childnode refid="41062" relation="include">
        </childnode>
        <childnode refid="41069" relation="include">
        </childnode>
        <childnode refid="41095" relation="include">
        </childnode>
        <childnode refid="41130" relation="include">
        </childnode>
      </node>
      <node id="41058">
        <label>map</label>
      </node>
      <node id="41104">
        <label>boost/thread.hpp</label>
      </node>
      <node id="41146">
        <label>addrman.h</label>
        <link refid="addrman_8h"/>
        <childnode refid="41136" relation="include">
        </childnode>
        <childnode refid="41145" relation="include">
        </childnode>
        <childnode refid="41121" relation="include">
        </childnode>
        <childnode refid="41117" relation="include">
        </childnode>
        <childnode refid="41095" relation="include">
        </childnode>
        <childnode refid="41058" relation="include">
        </childnode>
        <childnode refid="41057" relation="include">
        </childnode>
      </node>
      <node id="41176">
        <label>stormnode.h</label>
        <link refid="stormnode_8h"/>
        <childnode refid="41121" relation="include">
        </childnode>
        <childnode refid="41130" relation="include">
        </childnode>
        <childnode refid="41169" relation="include">
        </childnode>
        <childnode refid="41095" relation="include">
        </childnode>
        <childnode refid="41175" relation="include">
        </childnode>
        <childnode refid="41147" relation="include">
        </childnode>
        <childnode refid="41117" relation="include">
        </childnode>
      </node>
      <node id="41165">
        <label>ui_interface.h</label>
        <link refid="ui__interface_8h"/>
        <childnode refid="41054" relation="include">
        </childnode>
        <childnode refid="41166" relation="include">
        </childnode>
        <childnode refid="41133" relation="include">
        </childnode>
        <childnode refid="41056" relation="include">
        </childnode>
        <childnode refid="41062" relation="include">
        </childnode>
      </node>
      <node id="41153">
        <label>leveldbwrapper.h</label>
        <link refid="leveldbwrapper_8h"/>
        <childnode refid="41055" relation="include">
        </childnode>
        <childnode refid="41126" relation="include">
        </childnode>
        <childnode refid="41095" relation="include">
        </childnode>
        <childnode refid="41106" relation="include">
        </childnode>
        <childnode refid="41154" relation="include">
        </childnode>
        <childnode refid="41159" relation="include">
        </childnode>
      </node>
      <node id="41091">
        <label>stddef.h</label>
      </node>
      <node id="41083">
        <label>boost/variant.hpp</label>
      </node>
      <node id="41143">
        <label>netdb.h</label>
      </node>
      <node id="41138">
        <label>sys/fcntl.h</label>
      </node>
      <node id="41150">
        <label>undo.h</label>
        <link refid="undo_8h"/>
        <childnode refid="41151" relation="include">
        </childnode>
      </node>
      <node id="41157">
        <label>leveldb/status.h</label>
        <link refid="status_8h"/>
        <childnode refid="41056" relation="include">
        </childnode>
        <childnode refid="41156" relation="include">
        </childnode>
      </node>
      <node id="41161">
        <label>boost/circular_buffer.hpp</label>
      </node>
      <node id="41055">
        <label>serialize.h</label>
        <link refid="serialize_8h"/>
        <childnode refid="41056" relation="include">
        </childnode>
        <childnode refid="41057" relation="include">
        </childnode>
        <childnode refid="41058" relation="include">
        </childnode>
        <childnode refid="41059" relation="include">
        </childnode>
        <childnode refid="41060" relation="include">
        </childnode>
        <childnode refid="41061" relation="include">
        </childnode>
        <childnode refid="41062" relation="include">
        </childnode>
        <childnode refid="41063" relation="include">
        </childnode>
        <childnode refid="41064" relation="include">
        </childnode>
        <childnode refid="41065" relation="include">
        </childnode>
        <childnode refid="41066" relation="include">
        </childnode>
        <childnode refid="41067" relation="include">
        </childnode>
        <childnode refid="41075" relation="include">
        </childnode>
      </node>
      <node id="41073">
        <label>limits.h</label>
      </node>
      <node id="41122">
        <label>threadsafety.h</label>
        <link refid="threadsafety_8h"/>
      </node>
      <node id="41135">
        <label>mruset.h</label>
        <link refid="mruset_8h"/>
        <childnode refid="41059" relation="include">
        </childnode>
        <childnode refid="41131" relation="include">
        </childnode>
      </node>
      <node id="41098">
        <label>sys/resource.h</label>
      </node>
      <node id="41109">
        <label>openssl/bio.h</label>
      </node>
      <node id="41173">
        <label>crypter.h</label>
        <link refid="crypter_8h"/>
        <childnode refid="41067" relation="include">
        </childnode>
        <childnode refid="41055" relation="include">
        </childnode>
        <childnode refid="41172" relation="include">
        </childnode>
      </node>
      <node id="41133">
        <label>boost/signals2/signal.hpp</label>
      </node>
      <node id="41136">
        <label>netbase.h</label>
        <link refid="netbase_8h"/>
        <childnode refid="41056" relation="include">
        </childnode>
        <childnode refid="41057" relation="include">
        </childnode>
        <childnode refid="41055" relation="include">
        </childnode>
        <childnode refid="41137" relation="include">
        </childnode>
      </node>
      <node id="41172">
        <label>keystore.h</label>
        <link refid="keystore_8h"/>
        <childnode refid="41169" relation="include">
        </childnode>
        <childnode refid="41084" relation="include">
        </childnode>
        <childnode refid="41121" relation="include">
        </childnode>
        <childnode refid="41081" relation="include">
        </childnode>
        <childnode refid="41133" relation="include">
        </childnode>
        <childnode refid="41083" relation="include">
        </childnode>
      </node>
      <node id="41085">
        <label>hash.h</label>
        <link refid="hash_8h"/>
        <childnode refid="41077" relation="include">
        </childnode>
        <childnode refid="41055" relation="include">
        </childnode>
        <childnode refid="41086" relation="include">
        </childnode>
        <childnode refid="41087" relation="include">
        </childnode>
        <childnode refid="41088" relation="include">
        </childnode>
        <childnode refid="41089" relation="include">
        </childnode>
        <childnode refid="41090" relation="include">
        </childnode>
        <childnode refid="41092" relation="include">
        </childnode>
        <childnode refid="41057" relation="include">
        </childnode>
      </node>
      <node id="41142">
        <label>ifaddrs.h</label>
      </node>
      <node id="41114">
        <label>stealth.h</label>
        <link refid="stealth_8h"/>
        <childnode refid="41095" relation="include">
        </childnode>
        <childnode refid="41055" relation="include">
        </childnode>
        <childnode refid="41069" relation="include">
        </childnode>
        <childnode refid="41115" relation="include">
        </childnode>
        <childnode refid="41057" relation="include">
        </childnode>
        <childnode refid="41116" relation="include">
        </childnode>
      </node>
      <node id="41096">
        <label>sys/types.h</label>
      </node>
      <node id="41128">
        <label>ios</label>
      </node>
      <node id="41070">
        <label>string.h</label>
      </node>
      <node id="41076">
        <label>clientversion.h</label>
        <link refid="clientversion_8h"/>
      </node>
      <node id="41064">
        <label>cstdio</label>
      </node>
      <node id="41124">
        <label>boost/thread/locks.hpp</label>
      </node>
      <node id="41111">
        <label>openssl/buffer.h</label>
      </node>
      <node id="41065">
        <label>boost/type_traits/is_fundamental.hpp</label>
      </node>
      <node id="41147">
        <label>main.h</label>
        <link refid="main_8h"/>
        <childnode refid="41148" relation="include">
        </childnode>
        <childnode refid="41130" relation="include">
        </childnode>
        <childnode refid="41081" relation="include">
        </childnode>
        <childnode refid="41126" relation="include">
        </childnode>
        <childnode refid="41152" relation="include">
        </childnode>
        <childnode refid="41162" relation="include">
        </childnode>
        <childnode refid="41102" relation="include">
        </childnode>
        <childnode refid="41160" relation="include">
        </childnode>
      </node>
      <node id="41106">
        <label>boost/filesystem/path.hpp</label>
      </node>
      <node id="41174">
        <label>stormnodeman.h</label>
        <link refid="stormnodeman_8h"/>
        <childnode refid="41121" relation="include">
        </childnode>
        <childnode refid="41130" relation="include">
        </childnode>
        <childnode refid="41169" relation="include">
        </childnode>
        <childnode refid="41095" relation="include">
        </childnode>
        <childnode refid="41175" relation="include">
        </childnode>
        <childnode refid="41147" relation="include">
        </childnode>
        <childnode refid="41176" relation="include">
        </childnode>
      </node>
      <node id="41160">
        <label>boost/unordered_map.hpp</label>
      </node>
      <node id="41084">
        <label>pubkey.h</label>
        <link refid="pubkey_8h"/>
        <childnode refid="41085" relation="include">
        </childnode>
        <childnode refid="41055" relation="include">
        </childnode>
        <childnode refid="41077" relation="include">
        </childnode>
        <childnode refid="41079" relation="include">
        </childnode>
        <childnode refid="41057" relation="include">
        </childnode>
      </node>
      <node id="41074">
        <label>unistd.h</label>
      </node>
      <node id="41129">
        <label>db_cxx.h</label>
      </node>
      <node id="41057">
        <label>vector</label>
      </node>
      <node id="41093">
        <label>bignum.h</label>
        <link refid="bignum_8h"/>
        <childnode refid="41055" relation="include">
        </childnode>
        <childnode refid="41077" relation="include">
        </childnode>
        <childnode refid="41094" relation="include">
        </childnode>
        <childnode refid="41079" relation="include">
        </childnode>
        <childnode refid="41057" relation="include">
        </childnode>
        <childnode refid="41062" relation="include">
        </childnode>
      </node>
      <node id="41130">
        <label>net.h</label>
        <link refid="net_8h"/>
        <childnode refid="41131" relation="include">
        </childnode>
        <childnode refid="41132" relation="include">
        </childnode>
        <childnode refid="41082" relation="include">
        </childnode>
        <childnode refid="41133" relation="include">
        </childnode>
        <childnode refid="41113" relation="include">
        </childnode>
        <childnode refid="41134" relation="include">
        </childnode>
        <childnode refid="41135" relation="include">
        </childnode>
        <childnode refid="41136" relation="include">
        </childnode>
        <childnode refid="41145" relation="include">
        </childnode>
        <childnode refid="41146" relation="include">
        </childnode>
        <childnode refid="41085" relation="include">
        </childnode>
        <childnode refid="41126" relation="include">
        </childnode>
      </node>
      <node id="41087">
        <label>openssl/ripemd.h</label>
      </node>
      <node id="41105">
        <label>boost/filesystem.hpp</label>
      </node>
      <node id="41103">
        <label>utility</label>
      </node>
      <node id="41151">
        <label>compressor.h</label>
        <link refid="compressor_8h"/>
        <childnode refid="41053" relation="include">
        </childnode>
        <childnode refid="41152" relation="include">
        </childnode>
      </node>
      <node id="41101">
        <label>sstream</label>
      </node>
      <node id="41166">
        <label>boost/signals2/last_value.hpp</label>
      </node>
      <node id="41169">
        <label>key.h</label>
        <link refid="key_8h"/>
        <childnode refid="41067" relation="include">
        </childnode>
        <childnode refid="41084" relation="include">
        </childnode>
        <childnode refid="41079" relation="include">
        </childnode>
        <childnode refid="41057" relation="include">
        </childnode>
      </node>
      <node id="41110">
        <label>openssl/evp.h</label>
      </node>
      <node id="41099">
        <label>tinyformat.h</label>
        <link refid="tinyformat_8h"/>
        <childnode refid="41060" relation="include">
        </childnode>
        <childnode refid="41100" relation="include">
        </childnode>
        <childnode refid="41101" relation="include">
        </childnode>
        <childnode refid="41079" relation="include">
        </childnode>
      </node>
      <node id="41062">
        <label>stdint.h</label>
        <link refid="stdint_8h"/>
      </node>
      <node id="41120">
        <label>db.h</label>
        <link refid="db_8h"/>
        <childnode refid="41055" relation="include">
        </childnode>
        <childnode refid="41121" relation="include">
        </childnode>
        <childnode refid="41126" relation="include">
        </childnode>
        <childnode refid="41058" relation="include">
        </childnode>
        <childnode refid="41056" relation="include">
        </childnode>
        <childnode refid="41057" relation="include">
        </childnode>
        <childnode refid="41106" relation="include">
        </childnode>
        <childnode refid="41129" relation="include">
        </childnode>
      </node>
      <node id="41126">
        <label>streams.h</label>
        <link refid="streams_8h"/>
        <childnode refid="41067" relation="include">
        </childnode>
        <childnode refid="41055" relation="include">
        </childnode>
        <childnode refid="41127" relation="include">
        </childnode>
        <childnode refid="41078" relation="include">
        </childnode>
        <childnode refid="41128" relation="include">
        </childnode>
        <childnode refid="41061" relation="include">
        </childnode>
        <childnode refid="41058" relation="include">
        </childnode>
        <childnode refid="41059" relation="include">
        </childnode>
        <childnode refid="41062" relation="include">
        </childnode>
        <childnode refid="41056" relation="include">
        </childnode>
        <childnode refid="41070" relation="include">
        </childnode>
        <childnode refid="41103" relation="include">
        </childnode>
        <childnode refid="41057" relation="include">
        </childnode>
      </node>
      <node id="41092">
        <label>crypto/argon2/argon2.h</label>
        <link refid="argon2_8h"/>
        <childnode refid="41062" relation="include">
        </childnode>
        <childnode refid="41091" relation="include">
        </childnode>
        <childnode refid="41073" relation="include">
        </childnode>
      </node>
      <node id="41097">
        <label>sys/time.h</label>
      </node>
      <node id="41100">
        <label>iostream</label>
      </node>
      <node id="41131">
        <label>deque</label>
      </node>
      <node id="41077">
        <label>uint256.h</label>
        <link refid="uint256_8h"/>
        <childnode refid="41078" relation="include">
        </childnode>
        <childnode refid="41063" relation="include">
        </childnode>
        <childnode refid="41079" relation="include">
        </childnode>
        <childnode refid="41062" relation="include">
        </childnode>
        <childnode refid="41056" relation="include">
        </childnode>
        <childnode refid="41057" relation="include">
        </childnode>
      </node>
      <node id="41139">
        <label>sys/socket.h</label>
      </node>
      <node id="41156">
        <label>leveldb/slice.h</label>
        <link refid="slice_8h"/>
        <childnode refid="41078" relation="include">
        </childnode>
        <childnode refid="41091" relation="include">
        </childnode>
        <childnode refid="41070" relation="include">
        </childnode>
        <childnode refid="41056" relation="include">
        </childnode>
      </node>
      <node id="41132">
        <label>boost/array.hpp</label>
      </node>
      <node id="41094">
        <label>openssl/bn.h</label>
      </node>
      <node id="41152">
        <label>txdb.h</label>
        <link refid="txdb_8h"/>
        <childnode refid="41153" relation="include">
        </childnode>
        <childnode refid="41147" relation="include">
        </childnode>
        <childnode refid="41058" relation="include">
        </childnode>
        <childnode refid="41056" relation="include">
        </childnode>
        <childnode refid="41103" relation="include">
        </childnode>
        <childnode refid="41057" relation="include">
        </childnode>
      </node>
      <node id="41117">
        <label>timedata.h</label>
        <link refid="timedata_8h"/>
        <childnode refid="41062" relation="include">
        </childnode>
      </node>
      <node id="41067">
        <label>allocators.h</label>
        <link refid="allocators_8h"/>
        <childnode refid="41068" relation="include">
        </childnode>
        <childnode refid="41070" relation="include">
        </childnode>
        <childnode refid="41056" relation="include">
        </childnode>
        <childnode refid="41071" relation="include">
        </childnode>
        <childnode refid="41058" relation="include">
        </childnode>
        <childnode refid="41072" relation="include">
        </childnode>
        <childnode refid="41073" relation="include">
        </childnode>
        <childnode refid="41074" relation="include">
        </childnode>
      </node>
      <node id="41119">
        <label>chainparams.h</label>
        <link refid="chainparams_8h"/>
        <childnode refid="41093" relation="include">
        </childnode>
        <childnode refid="41077" relation="include">
        </childnode>
        <childnode refid="41057" relation="include">
        </childnode>
      </node>
      <node id="41059">
        <label>set</label>
      </node>
      <node id="41127">
        <label>algorithm</label>
      </node>
      <node id="41168">
        <label>activestormnode.h</label>
        <link refid="activestormnode_8h"/>
        <childnode refid="41121" relation="include">
        </childnode>
        <childnode refid="41169" relation="include">
        </childnode>
        <childnode refid="41170" relation="include">
        </childnode>
      </node>
      <node id="41088">
        <label>crypto/ripemd160.h</label>
        <link refid="ripemd160_8h"/>
        <childnode refid="41062" relation="include">
        </childnode>
        <childnode refid="41069" relation="include">
        </childnode>
      </node>
      <node id="41080">
        <label>util.h</label>
      </node>
      <node id="41115">
        <label>stdio.h</label>
      </node>
      <node id="41068">
        <label>cleanse.h</label>
        <link refid="cleanse_8h"/>
        <childnode refid="41069" relation="include">
        </childnode>
      </node>
      <node id="41063">
        <label>cstring</label>
      </node>
      <node id="41121">
        <label>sync.h</label>
        <link refid="sync_8h"/>
        <childnode refid="41122" relation="include">
        </childnode>
        <childnode refid="41123" relation="include">
        </childnode>
        <childnode refid="41124" relation="include">
        </childnode>
        <childnode refid="41071" relation="include">
        </childnode>
        <childnode refid="41125" relation="include">
        </childnode>
      </node>
      <node id="41116">
        <label>inttypes.h</label>
      </node>
      <node id="41155">
        <label>leveldb/iterator.h</label>
        <link refid="iterator_8h"/>
        <childnode refid="41156" relation="include">
        </childnode>
        <childnode refid="41157" relation="include">
        </childnode>
      </node>
      <node id="41163">
        <label>primitives/block.h</label>
        <link refid="primitives_2block_8h"/>
        <childnode refid="41053" relation="include">
        </childnode>
        <childnode refid="41092" relation="include">
        </childnode>
        <childnode refid="41164" relation="include">
        </childnode>
      </node>
    </incdepgraph>
    <innerclass refid="class_c_net_cleanup" prot="public">CNetCleanup</innerclass>
      <sectiondef kind="define">
      <memberdef kind="define" id="net_8cpp_1a62f02a22afd2d43dded4ce814f0f0e99" prot="public" static="no">
        <name>TOR_NET_STRING</name>
        <initializer>&quot;tor&quot;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/net.cpp" line="32" column="9" bodyfile="/home/dev/ds-160209/src/net.cpp" bodystart="32" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="net_8cpp_1a272e900bb201601d6842e465bec135af" prot="public" static="no">
        <name>DUMP_ADDRESSES_INTERVAL</name>
        <initializer>900</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/net.cpp" line="35" column="9" bodyfile="/home/dev/ds-160209/src/net.cpp" bodystart="35" bodyend="-1"/>
        <referencedby refid="net_8h_1a9396d8054e8f74959e9391871aaddde0" compoundref="net_8cpp" startline="1858" endline="1899">StartNode</referencedby>
      </memberdef>
      <memberdef kind="define" id="net_8cpp_1a826edd40636cbaa44266b97c8c6a4fa3" prot="public" static="no">
        <name>X</name>
        <param><defname>name</defname></param>
        <initializer><ref refid="testharness_8cc_1a8f8f80d37794cde9472343e4487ba3eb" kindref="member">stats.name</ref> = <ref refid="testharness_8cc_1a8f8f80d37794cde9472343e4487ba3eb" kindref="member">name</ref></initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/net.cpp" line="531" column="10" bodyfile="/home/dev/ds-160209/src/net.cpp" bodystart="531" bodyend="-1"/>
        <referencedby refid="class_c_node_1aaa77188d9df85b80e3f8a30292acf6a9" compoundref="net_8cpp" startline="532" endline="568">CNode::copyStats</referencedby>
      </memberdef>
      </sectiondef>
      <sectiondef kind="var">
      <memberdef kind="variable" id="net_8cpp_1a517820e441633664d6e96ce8f6a10ef2" prot="public" static="yes" mutable="no">
        <type>const int</type>
        <definition>const int MAX_OUTBOUND_CONNECTIONS</definition>
        <argsstring></argsstring>
        <name>MAX_OUTBOUND_CONNECTIONS</name>
        <initializer>= 32</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/net.cpp" line="40" column="1" bodyfile="/home/dev/ds-160209/src/net.cpp" bodystart="40" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="net_8cpp_1a37089835ec27ad8bf945a458708165b9" prot="public" static="no" mutable="no">
        <type>bool</type>
        <definition>bool fDiscover</definition>
        <argsstring></argsstring>
        <name>fDiscover</name>
        <initializer>= true</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/net.cpp" line="47" column="1" bodyfile="/home/dev/ds-160209/src/net.cpp" bodystart="47" bodyend="-1"/>
        <referencedby refid="init_8h_1a1a4c1bfbf6ba1db77e988b89b9cadfd3" compoundref="init_8cpp" startline="375" endline="1285">AppInit2</referencedby>
        <referencedby refid="net_8h_1a058b75c6fcc94a0643184c237ad6de93" compoundref="net_8cpp" startline="213" endline="217">IsPeerAddrLocalGood</referencedby>
        <referencedby refid="net_8h_1a337d6af198a6b0d75f830e56da9b91e9" compoundref="net_8cpp" startline="247" endline="274">AddLocal</referencedby>
        <referencedby refid="net_8cpp_1a0c8010ad96acff7cca6aca684ec42b71" compoundref="net_8cpp" startline="1702" endline="1805">BindListenPort</referencedby>
      </memberdef>
      <memberdef kind="variable" id="net_8cpp_1aac7a5df09042b8fc16272947ca022c2c" prot="public" static="no" mutable="no">
        <type><ref refid="stdint_8h_1aaa5d1cd013383c889537491c3cfd9aad" kindref="member">uint64_t</ref></type>
        <definition>uint64_t nLocalServices</definition>
        <argsstring></argsstring>
        <name>nLocalServices</name>
        <initializer>= <ref refid="protocol_8h_1abc5c98fcc1211af2b80116dd6e0a035da9d1154f0e7e56f183a5c8373abe2e86c" kindref="member">NODE_NETWORK</ref></initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/net.cpp" line="51" column="1" bodyfile="/home/dev/ds-160209/src/net.cpp" bodystart="51" bodyend="-1"/>
        <referencedby refid="net_8h_1af0cb3bbd4d42cac8723e22004ffb43af" compoundref="net_8cpp" startline="133" endline="144">GetLocalAddress</referencedby>
        <referencedby refid="class_c_node_1a4dbfe4f6c1fd162aaa905e4bd201d536" compoundref="net_8cpp" startline="465" endline="475">CNode::PushVersion</referencedby>
        <referencedby refid="net_8h_1a9396d8054e8f74959e9391871aaddde0" compoundref="net_8cpp" startline="1858" endline="1899">StartNode</referencedby>
        <referencedby refid="rpcnet_8cpp_1a3a10a507386b9bbcc48ebd3004bfe58a" compoundref="rpcnet_8cpp" startline="338" endline="398">getnetworkinfo</referencedby>
      </memberdef>
      <memberdef kind="variable" id="net_8cpp_1a62111271618110807cc534e55c13cb70" prot="public" static="no" mutable="no">
        <type><ref refid="sync_8h_1a37a4692b2d517f2843655ca11af7668a" kindref="member">CCriticalSection</ref></type>
        <definition>CCriticalSection cs_mapLocalHost</definition>
        <argsstring></argsstring>
        <name>cs_mapLocalHost</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/net.cpp" line="53" column="1" bodyfile="/home/dev/ds-160209/src/net.cpp" bodystart="53" bodyend="-1"/>
        <referencedby refid="rpcnet_8cpp_1a3a10a507386b9bbcc48ebd3004bfe58a" compoundref="rpcnet_8cpp" startline="338" endline="398">getnetworkinfo</referencedby>
      </memberdef>
      <memberdef kind="variable" id="net_8cpp_1ac585e737c081ba921335070264a93a79" prot="public" static="no" mutable="no">
        <type>map&lt; <ref refid="class_c_net_addr" kindref="compound">CNetAddr</ref>, <ref refid="struct_local_service_info" kindref="compound">LocalServiceInfo</ref> &gt;</type>
        <definition>map&lt;CNetAddr, LocalServiceInfo&gt; mapLocalHost</definition>
        <argsstring></argsstring>
        <name>mapLocalHost</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/net.cpp" line="54" column="1" bodyfile="/home/dev/ds-160209/src/net.cpp" bodystart="54" bodyend="-1"/>
        <referencedby refid="net_8h_1ac18517ca5500f0d8e1550ffd4ac56b77" compoundref="net_8cpp" startline="105" endline="127">GetLocal</referencedby>
        <referencedby refid="net_8cpp_1afa6b10687ddaa84fa7ba65b83ad1f069" compoundref="net_8cpp" startline="204" endline="210">GetnScore</referencedby>
        <referencedby refid="net_8h_1a337d6af198a6b0d75f830e56da9b91e9" compoundref="net_8cpp" startline="247" endline="274">AddLocal</referencedby>
        <referencedby refid="net_8h_1af7487aacfc9d708b3db40c255ec070a8" compoundref="net_8cpp" startline="302" endline="314">SeenLocal</referencedby>
        <referencedby refid="net_8h_1a16fa1bd4d34c4c29c90903fc3cdf7517" compoundref="net_8cpp" startline="317" endline="321">IsLocal</referencedby>
        <referencedby refid="rpcnet_8cpp_1a3a10a507386b9bbcc48ebd3004bfe58a" compoundref="rpcnet_8cpp" startline="338" endline="398">getnetworkinfo</referencedby>
      </memberdef>
      <memberdef kind="variable" id="net_8cpp_1a3b223adaa24a18416d28af91b71bed1e" prot="public" static="yes" mutable="no">
        <type>bool</type>
        <definition>bool vfReachable[NET_MAX]</definition>
        <argsstring>[NET_MAX]</argsstring>
        <name>vfReachable</name>
        <initializer>= {}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/net.cpp" line="55" column="1" bodyfile="/home/dev/ds-160209/src/net.cpp" bodystart="55" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="net_8cpp_1a5e487e1c7c859212aa23f8707096a8a4" prot="public" static="yes" mutable="no">
        <type>bool</type>
        <definition>bool vfLimited[NET_MAX]</definition>
        <argsstring>[NET_MAX]</argsstring>
        <name>vfLimited</name>
        <initializer>= {}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/net.cpp" line="56" column="1" bodyfile="/home/dev/ds-160209/src/net.cpp" bodystart="56" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="net_8cpp_1a1e6c74cfb67940ce1cf68ac2b2934011" prot="public" static="yes" mutable="no">
        <type><ref refid="class_c_node" kindref="compound">CNode</ref> *</type>
        <definition>CNode* pnodeLocalHost</definition>
        <argsstring></argsstring>
        <name>pnodeLocalHost</name>
        <initializer>= NULL</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/net.cpp" line="57" column="1" bodyfile="/home/dev/ds-160209/src/net.cpp" bodystart="57" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="net_8cpp_1ac6995fb3fbc9ce3f4f86ab4f7e3a4380" prot="public" static="yes" mutable="no">
        <type><ref refid="class_c_node" kindref="compound">CNode</ref> *</type>
        <definition>CNode* pnodeSync</definition>
        <argsstring></argsstring>
        <name>pnodeSync</name>
        <initializer>= NULL</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/net.cpp" line="58" column="1" bodyfile="/home/dev/ds-160209/src/net.cpp" bodystart="58" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="net_8cpp_1a8c1a78575c0e397b5af7e6b4cc4493f2" prot="public" static="no" mutable="no">
        <type><ref refid="stdint_8h_1aaa5d1cd013383c889537491c3cfd9aad" kindref="member">uint64_t</ref></type>
        <definition>uint64_t nLocalHostNonce</definition>
        <argsstring></argsstring>
        <name>nLocalHostNonce</name>
        <initializer>= 0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/net.cpp" line="59" column="1" bodyfile="/home/dev/ds-160209/src/net.cpp" bodystart="59" bodyend="-1"/>
        <referencedby refid="class_c_node_1a4dbfe4f6c1fd162aaa905e4bd201d536" compoundref="net_8cpp" startline="465" endline="475">CNode::PushVersion</referencedby>
      </memberdef>
      <memberdef kind="variable" id="net_8cpp_1a8c3c56f6b07f26bf3bd17e92aa5917de" prot="public" static="yes" mutable="no">
        <type>std::vector&lt; <ref refid="compat_8h_1a26ef1173e2f2c0d3db27eca28397d723" kindref="member">SOCKET</ref> &gt;</type>
        <definition>std::vector&lt;SOCKET&gt; vhListenSocket</definition>
        <argsstring></argsstring>
        <name>vhListenSocket</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/net.cpp" line="60" column="1" bodyfile="/home/dev/ds-160209/src/net.cpp" bodystart="60" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="net_8cpp_1ac575e3335fd15a19b567026491f8f01a" prot="public" static="no" mutable="no">
        <type><ref refid="class_c_addr_man" kindref="compound">CAddrMan</ref></type>
        <definition>CAddrMan addrman</definition>
        <argsstring></argsstring>
        <name>addrman</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/net.cpp" line="61" column="1" bodyfile="/home/dev/ds-160209/src/net.cpp" bodystart="61" bodyend="-1"/>
        <referencedby refid="class_c_active_stormnode_1a23b6459a057d50230f258050e9b2d6f8" compoundref="activestormnode_8cpp" startline="209" endline="252">CActiveStormnode::Register</referencedby>
        <referencedby refid="init_8h_1a1a4c1bfbf6ba1db77e988b89b9cadfd3" compoundref="init_8cpp" startline="375" endline="1285">AppInit2</referencedby>
        <referencedby refid="class_c_stormnode_man_1ae30d0b9b493e23c3d14ec48c77be7b6f" compoundref="stormnodeman_8cpp" startline="674" endline="803">CStormnodeMan::ProcessMessage</referencedby>
      </memberdef>
      <memberdef kind="variable" id="net_8cpp_1aa5a11f8873e230cea77bc7e91ee51918" prot="public" static="no" mutable="no">
        <type>vector&lt; <ref refid="class_c_node" kindref="compound">CNode</ref> * &gt;</type>
        <definition>vector&lt;CNode*&gt; vNodes</definition>
        <argsstring></argsstring>
        <name>vNodes</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/net.cpp" line="68" column="1" bodyfile="/home/dev/ds-160209/src/net.cpp" bodystart="68" bodyend="-1"/>
        <referencedby refid="class_c_block_1a3f990a713116bd15c1f221c88b012ccf" compoundref="chain_8cpp" startline="92" endline="189">CBlock::AcceptBlock</referencedby>
        <referencedby refid="main_8h_1a4b04650c6aa3e5b02921ba992658d647" compoundref="main_8cpp" startline="1741" endline="1764">Misbehaving</referencedby>
        <referencedby refid="main_8h_1a711a5bdb30c9c9bbdc83011b1cbbe2f3" compoundref="main_8cpp" startline="3426" endline="3631">SendMessages</referencedby>
        <referencedby refid="miner_8cpp_1a31faece5ef0e403969b3d3debd79b352" compoundref="miner_8cpp" startline="536" endline="591">ThreadStakeMiner</referencedby>
        <referencedby refid="net_8h_1a43efd96d0433d8a19fb210e77cc4c3ae" compoundref="net_8cpp" startline="196" endline="202">RelayInv</referencedby>
        <referencedby refid="net_8h_1a66a7371d8e724cac0b4495169cdf2859" compoundref="net_8cpp" startline="347" endline="356">FindNode</referencedby>
        <referencedby refid="net_8h_1a57ffc895ab641207e0eb30fd7e00a585" compoundref="net_8cpp" startline="378" endline="443">ConnectNode</referencedby>
        <referencedby refid="net_8cpp_1aa1111c12121e039bbd8eedb556e4514a" compoundref="net_8cpp" startline="754" endline="1131">ThreadSocketHandler</referencedby>
        <referencedby refid="net_8cpp_1ab2d8883b5524ec7b80d3b9535e73a3ed" compoundref="net_8cpp" startline="1259" endline="1300">ThreadDNSAddressSeed</referencedby>
        <referencedby refid="net_8cpp_1a3b4720330e61127963a43df26b80f804" compoundref="net_8cpp" startline="1339" endline="1441">ThreadOpenConnections</referencedby>
        <referencedby refid="net_8cpp_1a2d1ca95557ae336582b886a251e7fe94" compoundref="net_8cpp" startline="1443" endline="1513">ThreadOpenAddedConnections</referencedby>
        <referencedby refid="net_8cpp_1a379b0d3521bdd62ac296f219d70c4e30" compoundref="net_8cpp" startline="1582" endline="1654">ThreadMessageHandler</referencedby>
        <referencedby refid="class_client_model_1a46a5b1e03c1dfdf151e440abc47946c7" compoundref="clientmodel_8cpp" startline="54" endline="57">ClientModel::getNumConnections</referencedby>
        <referencedby refid="class_peer_table_priv_1a304d99874f6cd0c67ed207546a5ca904" compoundref="peertablemodel_8cpp" startline="53" endline="97">PeerTablePriv::refreshPeers</referencedby>
        <referencedby refid="rpcmining_8cpp_1a36ee2284a7252841b8a62a9531b6acbc" compoundref="rpcmining_8cpp" startline="150" endline="234">checkkernel</referencedby>
        <referencedby refid="rpcmining_8cpp_1aa40f86dc468a3f2ef4a3bba99e20a069" compoundref="rpcmining_8cpp" startline="236" endline="360">getworkex</referencedby>
        <referencedby refid="rpcmining_8cpp_1a356be62c93d38267a7da9e1cb644d547" compoundref="rpcmining_8cpp" startline="363" endline="473">getwork</referencedby>
        <referencedby refid="rpcmining_8cpp_1a27347eecedd59156c914fcb5ce488f9a" compoundref="rpcmining_8cpp" startline="476" endline="653">getblocktemplate</referencedby>
        <referencedby refid="rpcmisc_8cpp_1a70335b93783d51e48d276a1e08bd721a" compoundref="rpcmisc_8cpp" startline="34" endline="81">getinfo</referencedby>
        <referencedby refid="rpcnet_8cpp_1a1aec1e08b6e84d6094d2b3a4f78cec87" compoundref="rpcnet_8cpp" startline="23" endline="32">getconnectioncount</referencedby>
        <referencedby refid="rpcnet_8cpp_1a8755bbfea9d792e60e50ecad82a5504d" compoundref="rpcnet_8cpp" startline="34" endline="50">ping</referencedby>
        <referencedby refid="rpcnet_8cpp_1a2a6994d3b180c8e9ce81e0da65a41bb3" compoundref="rpcnet_8cpp" startline="148" endline="238">getaddednodeinfo</referencedby>
        <referencedby refid="rpcnet_8cpp_1a89a8e338923aea165bb7d8d572d76203" compoundref="rpcnet_8cpp" startline="244" endline="301">sendalert</referencedby>
        <referencedby refid="rpcnet_8cpp_1a3a10a507386b9bbcc48ebd3004bfe58a" compoundref="rpcnet_8cpp" startline="338" endline="398">getnetworkinfo</referencedby>
        <referencedby refid="class_c_sandstorm_queue_1af5d648df81c6159c92f20d88af3974d3" compoundref="sandstorm_8cpp" startline="2120" endline="2130">CSandstormQueue::Relay</referencedby>
        <referencedby refid="class_c_sandstorm_pool_1aa07e994eb333486b5aa63733ba3b5ac5" compoundref="sandstorm_8cpp" startline="2152" endline="2159">CSandstormPool::RelayFinalTransaction</referencedby>
        <referencedby refid="class_c_sandstorm_pool_1a1b21018ceeb726bdb554b56b8f7f03d1" compoundref="sandstorm_8cpp" startline="2181" endline="2186">CSandstormPool::RelayStatus</referencedby>
        <referencedby refid="class_c_sandstorm_pool_1a6679f34e84daacfceddb01b74ebb2a4e" compoundref="sandstorm_8cpp" startline="2188" endline="2193">CSandstormPool::RelayCompletedTransaction</referencedby>
        <referencedby refid="smessage_8cpp_1a67cfe472b1e783b85b09ebfeb43afbab" compoundref="smessage_8cpp" startline="579" endline="685">ThreadSecureMsg</referencedby>
        <referencedby refid="smessage_8h_1a7e096c63f30bea527e14fef0e7cca460" compoundref="smessage_8cpp" startline="1170" endline="1229">SecureMsgEnable</referencedby>
        <referencedby refid="smessage_8h_1a37253b307b8569fe0d8c3548c15e8e20" compoundref="smessage_8cpp" startline="1231" endline="1289">SecureMsgDisable</referencedby>
        <referencedby refid="class_c_spork_manager_1ae8651894670c02ecb5f99806376d5af2" compoundref="spork_8cpp" startline="235" endline="245">CSporkManager::Relay</referencedby>
        <referencedby refid="class_c_budget_manager_1a9c62c8f18b6f101465415952349ce203" compoundref="stormnode-budget_8cpp" startline="799" endline="902">CBudgetManager::NewBlock</referencedby>
        <referencedby refid="class_c_stormnode_sync_1a4852378d102b54360f8656731d264c04" compoundref="stormnode-sync_8cpp" startline="211" endline="223">CStormnodeSync::ClearFulfilledRequest</referencedby>
        <referencedby refid="class_c_stormnode_sync_1adaaeb592c3432c8a459560523c7be207" compoundref="stormnode-sync_8cpp" startline="225" endline="405">CStormnodeSync::Process</referencedby>
        <referencedby refid="class_c_stormnode_man_1a52708159ad91808d18a0b6082ed6daca" compoundref="stormnodeman_8cpp" startline="662" endline="672">CStormnodeMan::ProcessStormnodeConnections</referencedby>
      </memberdef>
      <memberdef kind="variable" id="net_8cpp_1a8282e3a7948351ac96516573cd31f9d0" prot="public" static="no" mutable="no">
        <type><ref refid="sync_8h_1a37a4692b2d517f2843655ca11af7668a" kindref="member">CCriticalSection</ref></type>
        <definition>CCriticalSection cs_vNodes</definition>
        <argsstring></argsstring>
        <name>cs_vNodes</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/net.cpp" line="69" column="1" bodyfile="/home/dev/ds-160209/src/net.cpp" bodystart="69" bodyend="-1"/>
        <referencedby refid="class_c_block_1a3f990a713116bd15c1f221c88b012ccf" compoundref="chain_8cpp" startline="92" endline="189">CBlock::AcceptBlock</referencedby>
        <referencedby refid="main_8h_1a4b04650c6aa3e5b02921ba992658d647" compoundref="main_8cpp" startline="1741" endline="1764">Misbehaving</referencedby>
        <referencedby refid="main_8h_1a711a5bdb30c9c9bbdc83011b1cbbe2f3" compoundref="main_8cpp" startline="3426" endline="3631">SendMessages</referencedby>
        <referencedby refid="class_peer_table_priv_1a304d99874f6cd0c67ed207546a5ca904" compoundref="peertablemodel_8cpp" startline="53" endline="97">PeerTablePriv::refreshPeers</referencedby>
        <referencedby refid="rpcnet_8cpp_1a1aec1e08b6e84d6094d2b3a4f78cec87" compoundref="rpcnet_8cpp" startline="23" endline="32">getconnectioncount</referencedby>
        <referencedby refid="rpcnet_8cpp_1a8755bbfea9d792e60e50ecad82a5504d" compoundref="rpcnet_8cpp" startline="34" endline="50">ping</referencedby>
        <referencedby refid="rpcnet_8cpp_1a2a6994d3b180c8e9ce81e0da65a41bb3" compoundref="rpcnet_8cpp" startline="148" endline="238">getaddednodeinfo</referencedby>
        <referencedby refid="rpcnet_8cpp_1a89a8e338923aea165bb7d8d572d76203" compoundref="rpcnet_8cpp" startline="244" endline="301">sendalert</referencedby>
        <referencedby refid="class_c_sandstorm_queue_1af5d648df81c6159c92f20d88af3974d3" compoundref="sandstorm_8cpp" startline="2120" endline="2130">CSandstormQueue::Relay</referencedby>
        <referencedby refid="class_c_sandstorm_pool_1aa07e994eb333486b5aa63733ba3b5ac5" compoundref="sandstorm_8cpp" startline="2152" endline="2159">CSandstormPool::RelayFinalTransaction</referencedby>
        <referencedby refid="class_c_sandstorm_pool_1a1b21018ceeb726bdb554b56b8f7f03d1" compoundref="sandstorm_8cpp" startline="2181" endline="2186">CSandstormPool::RelayStatus</referencedby>
        <referencedby refid="class_c_sandstorm_pool_1a6679f34e84daacfceddb01b74ebb2a4e" compoundref="sandstorm_8cpp" startline="2188" endline="2193">CSandstormPool::RelayCompletedTransaction</referencedby>
        <referencedby refid="smessage_8cpp_1a67cfe472b1e783b85b09ebfeb43afbab" compoundref="smessage_8cpp" startline="579" endline="685">ThreadSecureMsg</referencedby>
        <referencedby refid="smessage_8h_1a7e096c63f30bea527e14fef0e7cca460" compoundref="smessage_8cpp" startline="1170" endline="1229">SecureMsgEnable</referencedby>
        <referencedby refid="smessage_8h_1a37253b307b8569fe0d8c3548c15e8e20" compoundref="smessage_8cpp" startline="1231" endline="1289">SecureMsgDisable</referencedby>
        <referencedby refid="class_c_spork_manager_1ae8651894670c02ecb5f99806376d5af2" compoundref="spork_8cpp" startline="235" endline="245">CSporkManager::Relay</referencedby>
        <referencedby refid="class_c_budget_manager_1a9c62c8f18b6f101465415952349ce203" compoundref="stormnode-budget_8cpp" startline="799" endline="902">CBudgetManager::NewBlock</referencedby>
        <referencedby refid="class_c_stormnode_sync_1a4852378d102b54360f8656731d264c04" compoundref="stormnode-sync_8cpp" startline="211" endline="223">CStormnodeSync::ClearFulfilledRequest</referencedby>
        <referencedby refid="class_c_stormnode_sync_1adaaeb592c3432c8a459560523c7be207" compoundref="stormnode-sync_8cpp" startline="225" endline="405">CStormnodeSync::Process</referencedby>
        <referencedby refid="class_c_stormnode_man_1a52708159ad91808d18a0b6082ed6daca" compoundref="stormnodeman_8cpp" startline="662" endline="672">CStormnodeMan::ProcessStormnodeConnections</referencedby>
      </memberdef>
      <memberdef kind="variable" id="net_8cpp_1a2c9eaa799e02fdf8a5c52eb9a5f750f6" prot="public" static="no" mutable="no">
        <type>map&lt; <ref refid="class_c_inv" kindref="compound">CInv</ref>, <ref refid="class_c_data_stream" kindref="compound">CDataStream</ref> &gt;</type>
        <definition>map&lt;CInv, CDataStream&gt; mapRelay</definition>
        <argsstring></argsstring>
        <name>mapRelay</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/net.cpp" line="70" column="1" bodyfile="/home/dev/ds-160209/src/net.cpp" bodystart="70" bodyend="-1"/>
        <referencedby refid="net_8h_1aa7eea5ebcc85b5a7a0ae3716608bfffe" compoundref="net_8cpp" startline="1953" endline="1971">RelayTransaction</referencedby>
      </memberdef>
      <memberdef kind="variable" id="net_8cpp_1aebaeae1f0ac40d20a7aa3dd851176ae8" prot="public" static="no" mutable="no">
        <type>deque&lt; pair&lt; <ref refid="stdint_8h_1adec1df1b8b51cb32b77e5b86fff46471" kindref="member">int64_t</ref>, <ref refid="class_c_inv" kindref="compound">CInv</ref> &gt; &gt;</type>
        <definition>deque&lt;pair&lt;int64_t, CInv&gt; &gt; vRelayExpiration</definition>
        <argsstring></argsstring>
        <name>vRelayExpiration</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/net.cpp" line="71" column="1" bodyfile="/home/dev/ds-160209/src/net.cpp" bodystart="71" bodyend="-1"/>
        <referencedby refid="net_8h_1aa7eea5ebcc85b5a7a0ae3716608bfffe" compoundref="net_8cpp" startline="1953" endline="1971">RelayTransaction</referencedby>
      </memberdef>
      <memberdef kind="variable" id="net_8cpp_1ae1ed86ae54e13fe5f0ae1c12e48e3a0e" prot="public" static="no" mutable="no">
        <type><ref refid="sync_8h_1a37a4692b2d517f2843655ca11af7668a" kindref="member">CCriticalSection</ref></type>
        <definition>CCriticalSection cs_mapRelay</definition>
        <argsstring></argsstring>
        <name>cs_mapRelay</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/net.cpp" line="72" column="1" bodyfile="/home/dev/ds-160209/src/net.cpp" bodystart="72" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="net_8cpp_1a1791b4ef08160ee954e7a711a0587172" prot="public" static="no" mutable="no">
        <type>map&lt; <ref refid="class_c_inv" kindref="compound">CInv</ref>, <ref refid="stdint_8h_1adec1df1b8b51cb32b77e5b86fff46471" kindref="member">int64_t</ref> &gt;</type>
        <definition>map&lt;CInv, int64_t&gt; mapAlreadyAskedFor</definition>
        <argsstring></argsstring>
        <name>mapAlreadyAskedFor</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/net.cpp" line="73" column="1" bodyfile="/home/dev/ds-160209/src/net.cpp" bodystart="73" bodyend="-1"/>
        <referencedby refid="main_8h_1a711a5bdb30c9c9bbdc83011b1cbbe2f3" compoundref="main_8cpp" startline="3426" endline="3631">SendMessages</referencedby>
      </memberdef>
      <memberdef kind="variable" id="net_8cpp_1a0552b88339e25f48e82a8168a857e738" prot="public" static="yes" mutable="no">
        <type>deque&lt; string &gt;</type>
        <definition>deque&lt;string&gt; vOneShots</definition>
        <argsstring></argsstring>
        <name>vOneShots</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/net.cpp" line="75" column="1" bodyfile="/home/dev/ds-160209/src/net.cpp" bodystart="75" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="net_8cpp_1a0600e532fa61e857559ac0327d5a5324" prot="public" static="no" mutable="no">
        <type><ref refid="sync_8h_1a37a4692b2d517f2843655ca11af7668a" kindref="member">CCriticalSection</ref></type>
        <definition>CCriticalSection cs_vOneShots</definition>
        <argsstring></argsstring>
        <name>cs_vOneShots</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/net.cpp" line="76" column="1" bodyfile="/home/dev/ds-160209/src/net.cpp" bodystart="76" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="net_8cpp_1adfc6e2c8b106da3807ca34d27577b37e" prot="public" static="no" mutable="no">
        <type>set&lt; <ref refid="class_c_net_addr" kindref="compound">CNetAddr</ref> &gt;</type>
        <definition>set&lt;CNetAddr&gt; setservAddNodeAddresses</definition>
        <argsstring></argsstring>
        <name>setservAddNodeAddresses</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/net.cpp" line="78" column="1" bodyfile="/home/dev/ds-160209/src/net.cpp" bodystart="78" bodyend="-1"/>
        <referencedby refid="net_8cpp_1a2d1ca95557ae336582b886a251e7fe94" compoundref="net_8cpp" startline="1443" endline="1513">ThreadOpenAddedConnections</referencedby>
      </memberdef>
      <memberdef kind="variable" id="net_8cpp_1a670309f2c43b90009fc727bf9ed3be37" prot="public" static="no" mutable="no">
        <type><ref refid="sync_8h_1a37a4692b2d517f2843655ca11af7668a" kindref="member">CCriticalSection</ref></type>
        <definition>CCriticalSection cs_setservAddNodeAddresses</definition>
        <argsstring></argsstring>
        <name>cs_setservAddNodeAddresses</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/net.cpp" line="79" column="1" bodyfile="/home/dev/ds-160209/src/net.cpp" bodystart="79" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="net_8cpp_1aea576e413065756784b47d68d5051f72" prot="public" static="no" mutable="no">
        <type>vector&lt; std::string &gt;</type>
        <definition>vector&lt;std::string&gt; vAddedNodes</definition>
        <argsstring></argsstring>
        <name>vAddedNodes</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/net.cpp" line="81" column="1" bodyfile="/home/dev/ds-160209/src/net.cpp" bodystart="81" bodyend="-1"/>
        <referencedby refid="net_8cpp_1a2d1ca95557ae336582b886a251e7fe94" compoundref="net_8cpp" startline="1443" endline="1513">ThreadOpenAddedConnections</referencedby>
        <referencedby refid="rpcnet_8cpp_1ab455bfd729ba34d3bb55b716e62405a3" compoundref="rpcnet_8cpp" startline="106" endline="146">addnode</referencedby>
        <referencedby refid="rpcnet_8cpp_1a2a6994d3b180c8e9ce81e0da65a41bb3" compoundref="rpcnet_8cpp" startline="148" endline="238">getaddednodeinfo</referencedby>
      </memberdef>
      <memberdef kind="variable" id="net_8cpp_1a899fdfda20966914780d1937d7ab47a3" prot="public" static="no" mutable="no">
        <type><ref refid="sync_8h_1a37a4692b2d517f2843655ca11af7668a" kindref="member">CCriticalSection</ref></type>
        <definition>CCriticalSection cs_vAddedNodes</definition>
        <argsstring></argsstring>
        <name>cs_vAddedNodes</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/net.cpp" line="82" column="1" bodyfile="/home/dev/ds-160209/src/net.cpp" bodystart="82" bodyend="-1"/>
        <referencedby refid="rpcnet_8cpp_1ab455bfd729ba34d3bb55b716e62405a3" compoundref="rpcnet_8cpp" startline="106" endline="146">addnode</referencedby>
        <referencedby refid="rpcnet_8cpp_1a2a6994d3b180c8e9ce81e0da65a41bb3" compoundref="rpcnet_8cpp" startline="148" endline="238">getaddednodeinfo</referencedby>
      </memberdef>
      <memberdef kind="variable" id="net_8cpp_1a5232bdb878735fcc15a65c964f29f2b7" prot="public" static="no" mutable="no">
        <type><ref refid="net_8h_1a954d746a58632565552615fd0a4ee660" kindref="member">NodeId</ref></type>
        <definition>NodeId nLastNodeId</definition>
        <argsstring></argsstring>
        <name>nLastNodeId</name>
        <initializer>= 0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/net.cpp" line="84" column="1" bodyfile="/home/dev/ds-160209/src/net.cpp" bodystart="84" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="net_8cpp_1a96f4c71f3c36f02b7edbdf04117e0e8c" prot="public" static="no" mutable="no">
        <type><ref refid="sync_8h_1a37a4692b2d517f2843655ca11af7668a" kindref="member">CCriticalSection</ref></type>
        <definition>CCriticalSection cs_nLastNodeId</definition>
        <argsstring></argsstring>
        <name>cs_nLastNodeId</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/net.cpp" line="85" column="1" bodyfile="/home/dev/ds-160209/src/net.cpp" bodystart="85" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="net_8cpp_1a2983786e462d4040afb1bfacf1151296" prot="public" static="yes" mutable="no">
        <type><ref refid="class_c_semaphore" kindref="compound">CSemaphore</ref> *</type>
        <definition>CSemaphore* semOutbound</definition>
        <argsstring></argsstring>
        <name>semOutbound</name>
        <initializer>= NULL</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/net.cpp" line="87" column="1" bodyfile="/home/dev/ds-160209/src/net.cpp" bodystart="87" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="net_8cpp_1a968f94b454db5090ddf7f9d37865bc75" prot="public" static="yes" mutable="no">
        <type><ref refid="struct_c_node_signals" kindref="compound">CNodeSignals</ref></type>
        <definition>CNodeSignals n_signals</definition>
        <argsstring></argsstring>
        <name>n_signals</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/net.cpp" line="90" column="1" bodyfile="/home/dev/ds-160209/src/net.cpp" bodystart="90" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="net_8cpp_1a9465e742a512416e38a52919fd5e3699" prot="public" static="yes" mutable="no">
        <type>list&lt; <ref refid="class_c_node" kindref="compound">CNode</ref> * &gt;</type>
        <definition>list&lt;CNode*&gt; vNodesDisconnected</definition>
        <argsstring></argsstring>
        <name>vNodesDisconnected</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/net.cpp" line="752" column="1" bodyfile="/home/dev/ds-160209/src/net.cpp" bodystart="752" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="net_8cpp_1ae560d3fdf794873af9a1212644985fdd" prot="public" static="no" mutable="no">
        <type>class <ref refid="class_c_net_cleanup" kindref="compound">CNetCleanup</ref></type>
        <definition>class CNetCleanup
 instance_of_cnetcleanup</definition>
        <argsstring></argsstring>
        <name>instance_of_cnetcleanup</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/net.cpp" line="1943" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="net_8cpp_1aa19cb8e6cf23a990e585f2bbf9ece276" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool OpenNetworkConnection</definition>
        <argsstring>(const CAddress &amp;addrConnect, CSemaphoreGrant *grantOutbound=NULL, const char *strDest=NULL, bool fOneShot=false)</argsstring>
        <name>OpenNetworkConnection</name>
        <param>
          <type>const <ref refid="class_c_address" kindref="compound">CAddress</ref> &amp;</type>
          <declname>addrConnect</declname>
        </param>
        <param>
          <type><ref refid="class_c_semaphore_grant" kindref="compound">CSemaphoreGrant</ref> *</type>
          <declname>grantOutbound</declname>
          <defval>NULL</defval>
        </param>
        <param>
          <type>const char *</type>
          <declname>strDest</declname>
          <defval>NULL</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>fOneShot</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/net.cpp" line="42" column="1" bodyfile="/home/dev/ds-160209/src/net.cpp" bodystart="1516" bodyend="1542"/>
        <references refid="net_8cpp_1a16fa1bd4d34c4c29c90903fc3cdf7517" compoundref="net_8cpp" startline="317" endline="321">IsLocal</references>
        <references refid="net_8cpp_1a66a7371d8e724cac0b4495169cdf2859" compoundref="net_8cpp" startline="347" endline="356">FindNode</references>
        <references refid="class_c_node_1aefa8b81afa53b4c6635dc4c6c024211a" compoundref="net_8cpp" startline="489" endline="503">CNode::IsBanned</references>
        <references refid="net_8cpp_1ac6e0da5071d4eaa6960dbf889c765834" compoundref="net_8cpp" startline="378" endline="443">ConnectNode</references>
        <references refid="class_c_semaphore_grant_1ab3e6f84f304703abc52517b0c8de26cf" compoundref="sync_8h" startline="238" endline="244">CSemaphoreGrant::MoveTo</references>
        <references refid="class_c_node_1a4bb25f8bdeeaff5e8cb08abc97bbc44d" compoundref="net_8h" startline="266">CNode::grantOutbound</references>
        <references refid="class_c_node_1a933adb2b192939545a01d602b1d7b53a" compoundref="net_8h" startline="257">CNode::fNetworkNode</references>
        <references refid="class_c_node_1a2bb91c9968a9f855c05b1121100a8797" compoundref="net_8h" startline="254">CNode::fOneShot</references>
        <referencedby refid="net_8cpp_1a3b4720330e61127963a43df26b80f804" compoundref="net_8cpp" startline="1339" endline="1441">ThreadOpenConnections</referencedby>
        <referencedby refid="net_8cpp_1a2d1ca95557ae336582b886a251e7fe94" compoundref="net_8cpp" startline="1443" endline="1513">ThreadOpenAddedConnections</referencedby>
      </memberdef>
      <memberdef kind="function" id="net_8cpp_1a475f2fc7d8f5cd7511db253cae8fe28a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_c_node_signals" kindref="compound">CNodeSignals</ref> &amp;</type>
        <definition>CNodeSignals&amp; GetNodeSignals</definition>
        <argsstring>()</argsstring>
        <name>GetNodeSignals</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/net.cpp" line="91" column="1" bodyfile="/home/dev/ds-160209/src/net.cpp" bodystart="91" bodyend="91"/>
        <referencedby refid="init_8h_1ac5f038c2b480cf9ef5e19e3eba8dbaf9" compoundref="init_8cpp" startline="130" endline="194">Shutdown</referencedby>
        <referencedby refid="init_8h_1a1a4c1bfbf6ba1db77e988b89b9cadfd3" compoundref="init_8cpp" startline="375" endline="1285">AppInit2</referencedby>
        <referencedby refid="class_c_node_1a51556705550511146245b9fb2fec09c1" compoundref="net_8h" startline="314" endline="369">CNode::CNode</referencedby>
        <referencedby refid="class_c_node_1ac9b30cb93e91a48dacc58821abfc44f0" compoundref="net_8h" startline="371" endline="379">CNode::~CNode</referencedby>
      </memberdef>
      <memberdef kind="function" id="net_8cpp_1a5230a9dcbf8f7663e386b358f8d2fdc8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void AddOneShot</definition>
        <argsstring>(string strDest)</argsstring>
        <name>AddOneShot</name>
        <param>
          <type>string</type>
          <declname>strDest</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/net.cpp" line="93" column="1" bodyfile="/home/dev/ds-160209/src/net.cpp" bodystart="93" bodyend="97"/>
        <references refid="sync_8h_1a911fe23f057c2fe5aad629162d6c99d0" compoundref="sync_8h" startline="159">LOCK</references>
        <referencedby refid="init_8h_1a1a4c1bfbf6ba1db77e988b89b9cadfd3" compoundref="init_8cpp" startline="375" endline="1285">AppInit2</referencedby>
        <referencedby refid="net_8cpp_1ab2d8883b5524ec7b80d3b9535e73a3ed" compoundref="net_8cpp" startline="1259" endline="1300">ThreadDNSAddressSeed</referencedby>
      </memberdef>
      <memberdef kind="function" id="net_8cpp_1af6d341a24d761a509fca026458cf2f72" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>unsigned short</type>
        <definition>unsigned short GetListenPort</definition>
        <argsstring>()</argsstring>
        <name>GetListenPort</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/net.cpp" line="99" column="1" bodyfile="/home/dev/ds-160209/src/net.cpp" bodystart="99" bodyend="102"/>
        <references refid="util_8cpp_1a24f685720bf40370e5bd2a192ad50cd8" compoundref="util_8cpp" startline="536" endline="541">GetArg</references>
        <references refid="chainparams_8cpp_1ace5c5b706d71a324a417dd2db394fd4a" compoundref="chainparams_8cpp" startline="186" endline="188">Params</references>
        <referencedby refid="init_8h_1a1a4c1bfbf6ba1db77e988b89b9cadfd3" compoundref="init_8cpp" startline="375" endline="1285">AppInit2</referencedby>
        <referencedby refid="net_8h_1af0cb3bbd4d42cac8723e22004ffb43af" compoundref="net_8cpp" startline="133" endline="144">GetLocalAddress</referencedby>
        <referencedby refid="net_8h_1abda4e8f87772f9a9d9d8f52a93791ffc" compoundref="net_8cpp" startline="276" endline="279">AddLocal</referencedby>
      </memberdef>
      <memberdef kind="function" id="net_8cpp_1a51605827c953a7843f9b165eada26857" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool GetLocal</definition>
        <argsstring>(CService &amp;addr, const CNetAddr *paddrPeer)</argsstring>
        <name>GetLocal</name>
        <param>
          <type><ref refid="class_c_service" kindref="compound">CService</ref> &amp;</type>
          <declname>addr</declname>
        </param>
        <param>
          <type>const <ref refid="class_c_net_addr" kindref="compound">CNetAddr</ref> *</type>
          <declname>paddrPeer</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/net.cpp" line="105" column="1" bodyfile="/home/dev/ds-160209/src/net.cpp" bodystart="105" bodyend="127"/>
        <references refid="util_8cpp_1a53f30a9fc322fa65a5c4e3732e4ad410" compoundref="util_8cpp" startline="105">fNoListen</references>
        <references refid="sync_8h_1a911fe23f057c2fe5aad629162d6c99d0" compoundref="sync_8h" startline="159">LOCK</references>
        <references refid="net_8cpp_1ac585e737c081ba921335070264a93a79" compoundref="net_8cpp" startline="54">mapLocalHost</references>
        <referencedby refid="class_c_active_stormnode_1a9532e0804ea4c96ad7d58ab3e9da6891" compoundref="activestormnode_8cpp" startline="17" endline="140">CActiveStormnode::ManageStatus</referencedby>
        <referencedby refid="net_8h_1af0cb3bbd4d42cac8723e22004ffb43af" compoundref="net_8cpp" startline="133" endline="144">GetLocalAddress</referencedby>
      </memberdef>
      <memberdef kind="function" id="net_8cpp_1a66f5f0bc1dad5cfe429157d5637a93dc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_c_address" kindref="compound">CAddress</ref></type>
        <definition>CAddress GetLocalAddress</definition>
        <argsstring>(const CNetAddr *paddrPeer)</argsstring>
        <name>GetLocalAddress</name>
        <param>
          <type>const <ref refid="class_c_net_addr" kindref="compound">CNetAddr</ref> *</type>
          <declname>paddrPeer</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/net.cpp" line="133" column="1" bodyfile="/home/dev/ds-160209/src/net.cpp" bodystart="133" bodyend="144"/>
        <references refid="net_8cpp_1af6d341a24d761a509fca026458cf2f72" compoundref="net_8cpp" startline="99" endline="102">GetListenPort</references>
        <references refid="net_8cpp_1a51605827c953a7843f9b165eada26857" compoundref="net_8cpp" startline="105" endline="127">GetLocal</references>
        <references refid="class_c_address_1a6a4a6aa020d0d558f238c7d04dd986c3" compoundref="protocol_8h" startline="103">CAddress::nServices</references>
        <references refid="net_8cpp_1aac7a5df09042b8fc16272947ca022c2c" compoundref="net_8cpp" startline="51">nLocalServices</references>
        <references refid="class_c_address_1ac1c44aac968b11f90ce529b133ae4e9b" compoundref="protocol_8h" startline="106">CAddress::nTime</references>
        <references refid="timedata_8cpp_1a09f81b9c7650f898cf3cf305b87547e6" compoundref="timedata_8cpp" startline="33" endline="36">GetAdjustedTime</references>
        <referencedby refid="main_8h_1a711a5bdb30c9c9bbdc83011b1cbbe2f3" compoundref="main_8cpp" startline="3426" endline="3631">SendMessages</referencedby>
        <referencedby refid="class_c_node_1a4dbfe4f6c1fd162aaa905e4bd201d536" compoundref="net_8cpp" startline="465" endline="475">CNode::PushVersion</referencedby>
        <referencedby refid="rpcmisc_8cpp_1a70335b93783d51e48d276a1e08bd721a" compoundref="rpcmisc_8cpp" startline="34" endline="81">getinfo</referencedby>
      </memberdef>
      <memberdef kind="function" id="net_8cpp_1a1974b789f25e8ac412052f627488e0ad" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool RecvLine</definition>
        <argsstring>(SOCKET hSocket, string &amp;strLine)</argsstring>
        <name>RecvLine</name>
        <param>
          <type><ref refid="compat_8h_1a26ef1173e2f2c0d3db27eca28397d723" kindref="member">SOCKET</ref></type>
          <declname>hSocket</declname>
        </param>
        <param>
          <type>string &amp;</type>
          <declname>strLine</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/net.cpp" line="146" column="1" bodyfile="/home/dev/ds-160209/src/net.cpp" bodystart="146" bodyend="194"/>
        <references refid="compat_8h_1a6d24fe3ab2906c21c373505ca244f90b" compoundref="compat_8h" startline="50">WSAGetLastError</references>
        <references refid="compat_8h_1a7ce1c171e08d68442124bf6189f8aec5" compoundref="compat_8h" startline="54">WSAEMSGSIZE</references>
        <references refid="compat_8h_1a4ba23242bee4784b72a0a170e2f975a0" compoundref="compat_8h" startline="53">WSAEWOULDBLOCK</references>
        <references refid="compat_8h_1aef81890a7d46cb9dda85df9b96cba6b1" compoundref="compat_8h" startline="55">WSAEINTR</references>
        <references refid="compat_8h_1ada8711ffab59910a2732cfa4b7c24e29" compoundref="compat_8h" startline="56">WSAEINPROGRESS</references>
        <references refid="util_8h_1ac635182d3e845eda4af4fa5ab31609da" compoundref="util_8h" startline="107" endline="114">MilliSleep</references>
      </memberdef>
      <memberdef kind="function" id="net_8cpp_1a4f89efc38cf3b6bbb552ba9624bddfaf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void RelayInv</definition>
        <argsstring>(CInv &amp;inv, const int minProtoVersion)</argsstring>
        <name>RelayInv</name>
        <param>
          <type><ref refid="class_c_inv" kindref="compound">CInv</ref> &amp;</type>
          <declname>inv</declname>
        </param>
        <param>
          <type>const int</type>
          <declname>minProtoVersion</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/net.cpp" line="196" column="1" bodyfile="/home/dev/ds-160209/src/net.cpp" bodystart="196" bodyend="202"/>
        <references refid="sync_8h_1a911fe23f057c2fe5aad629162d6c99d0" compoundref="sync_8h" startline="159">LOCK</references>
        <references refid="net_8cpp_1aa5a11f8873e230cea77bc7e91ee51918" compoundref="net_8cpp" startline="68">vNodes</references>
        <references refid="class_c_node_1a99173eb3cef17e699ba21a5249ac33d2" compoundref="net_8h" startline="248">CNode::nVersion</references>
        <references refid="class_c_node_1a7cef2333aa8776127a7e7fcab659eb6a" compoundref="net_8h" startline="494" endline="501">CNode::PushInventory</references>
        <referencedby refid="instantx_8h_1aa516cb499ead2691d8ab216a499db5d0" compoundref="instantx_8cpp" startline="38" endline="173">ProcessMessageInstantX</referencedby>
        <referencedby refid="instantx_8h_1a0753801d6e6eb2cb230a85a6ba6fd371" compoundref="instantx_8cpp" startline="259" endline="299">DoConsensusVote</referencedby>
        <referencedby refid="class_c_sandstorm_pool_1a287096eef4d6e8dcd778e7fab1dd9c11" compoundref="sandstorm_8cpp" startline="559" endline="632">CSandstormPool::CheckFinalTransaction</referencedby>
        <referencedby refid="class_c_budget_proposal_broadcast_1a7a791236cedfc5beb5fefa438d5626fb" compoundref="stormnode-budget_8cpp" startline="1569" endline="1573">CBudgetProposalBroadcast::Relay</referencedby>
        <referencedby refid="class_c_budget_vote_1a2c761ac435fa5a5da6ccbeb308350a8f" compoundref="stormnode-budget_8cpp" startline="1595" endline="1599">CBudgetVote::Relay</referencedby>
        <referencedby refid="class_c_finalized_budget_broadcast_1abb4cfac3327e7cb912b368054d23fc9c" compoundref="stormnode-budget_8cpp" startline="1970" endline="1974">CFinalizedBudgetBroadcast::Relay</referencedby>
        <referencedby refid="class_c_finalized_budget_vote_1a7c95f6ac01efc3975369bc7bdb8b83d0" compoundref="stormnode-budget_8cpp" startline="1996" endline="2000">CFinalizedBudgetVote::Relay</referencedby>
        <referencedby refid="class_c_stormnode_payment_winner_1a39a19ceedef26c1b54d44853450a71eb" compoundref="stormnode-payments_8cpp" startline="764" endline="768">CStormnodePaymentWinner::Relay</referencedby>
        <referencedby refid="class_c_stormnode_broadcast_1a6022d4cda8f1676aef30a3eaa2c512e5" compoundref="stormnode_8cpp" startline="509" endline="513">CStormnodeBroadcast::Relay</referencedby>
        <referencedby refid="class_c_stormnode_ping_1a1f9010915780b43dffae9965531a951a" compoundref="stormnode_8cpp" startline="666" endline="670">CStormnodePing::Relay</referencedby>
      </memberdef>
      <memberdef kind="function" id="net_8cpp_1afa6b10687ddaa84fa7ba65b83ad1f069" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int GetnScore</definition>
        <argsstring>(const CService &amp;addr)</argsstring>
        <name>GetnScore</name>
        <param>
          <type>const <ref refid="class_c_service" kindref="compound">CService</ref> &amp;</type>
          <declname>addr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/net.cpp" line="204" column="1" bodyfile="/home/dev/ds-160209/src/net.cpp" bodystart="204" bodyend="210"/>
        <references refid="sync_8h_1a911fe23f057c2fe5aad629162d6c99d0" compoundref="sync_8h" startline="159">LOCK</references>
        <references refid="net_8cpp_1ac585e737c081ba921335070264a93a79" compoundref="net_8cpp" startline="54">mapLocalHost</references>
        <references refid="net_8h_1a385c44f6fb256e5716a2302a5b940388a1d33b76bcbc0dbb757cc02bb2259775b" compoundref="net_8h" startline="81">LOCAL_NONE</references>
      </memberdef>
      <memberdef kind="function" id="net_8cpp_1a058b75c6fcc94a0643184c237ad6de93" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool IsPeerAddrLocalGood</definition>
        <argsstring>(CNode *pnode)</argsstring>
        <name>IsPeerAddrLocalGood</name>
        <param>
          <type><ref refid="class_c_node" kindref="compound">CNode</ref> *</type>
          <declname>pnode</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/net.cpp" line="213" column="1" bodyfile="/home/dev/ds-160209/src/net.cpp" bodystart="213" bodyend="217"/>
        <references refid="net_8cpp_1a37089835ec27ad8bf945a458708165b9" compoundref="net_8cpp" startline="47">fDiscover</references>
        <references refid="class_c_node_1a3993ecb1de2a2135a3cf0904346a6f88" compoundref="net_8h" startline="245">CNode::addr</references>
        <references refid="class_c_net_addr_1a35131b2792434d1c9a860c583b610ab6" compoundref="netbase_8cpp" startline="795" endline="798">CNetAddr::IsRoutable</references>
        <references refid="class_c_node_1a1b6517682efa0709f44780a95384c4ec" compoundref="net_8h" startline="247">CNode::addrLocal</references>
        <references refid="net_8cpp_1a96eb2fba6d80870802ac787b6ada4beb" compoundref="net_8cpp" startline="290" endline="294">IsLimited</references>
        <references refid="class_c_net_addr_1a34a4760424f5c51998fc3baf82ccb5c8" compoundref="netbase_8cpp" startline="800" endline="820">CNetAddr::GetNetwork</references>
      </memberdef>
      <memberdef kind="function" id="net_8cpp_1a11932bbb34fc72238e9069c6e5363108" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void AdvertizeLocal</definition>
        <argsstring>()</argsstring>
        <name>AdvertizeLocal</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/net.cpp" line="221" column="1" bodyfile="/home/dev/ds-160209/src/net.cpp" bodystart="221" bodyend="236"/>
      </memberdef>
      <memberdef kind="function" id="net_8cpp_1a89098b55df7d627a7a3c7f367cae24e6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void SetReachable</definition>
        <argsstring>(enum Network net, bool fFlag)</argsstring>
        <name>SetReachable</name>
        <param>
          <type>enum <ref refid="netbase_8h_1acc9a38c714afe79b5035cb36f560dac3" kindref="member">Network</ref></type>
          <declname>net</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>fFlag</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/net.cpp" line="238" column="1" bodyfile="/home/dev/ds-160209/src/net.cpp" bodystart="238" bodyend="244"/>
        <references refid="sync_8h_1a911fe23f057c2fe5aad629162d6c99d0" compoundref="sync_8h" startline="159">LOCK</references>
        <references refid="netbase_8h_1acc9a38c714afe79b5035cb36f560dac3a9a9d9355a4923b33382f9894ba80688d" compoundref="netbase_8h" startline="32">NET_IPV6</references>
        <references refid="netbase_8h_1acc9a38c714afe79b5035cb36f560dac3ae1598b317168b96919bc3131ee149ebb" compoundref="netbase_8h" startline="31">NET_IPV4</references>
        <referencedby refid="init_8h_1a1a4c1bfbf6ba1db77e988b89b9cadfd3" compoundref="init_8cpp" startline="375" endline="1285">AppInit2</referencedby>
        <referencedby refid="net_8h_1a337d6af198a6b0d75f830e56da9b91e9" compoundref="net_8cpp" startline="247" endline="274">AddLocal</referencedby>
      </memberdef>
      <memberdef kind="function" id="net_8cpp_1abb92a02eecc581e8927c8a6e31968645" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool AddLocal</definition>
        <argsstring>(const CService &amp;addr, int nScore)</argsstring>
        <name>AddLocal</name>
        <param>
          <type>const <ref refid="class_c_service" kindref="compound">CService</ref> &amp;</type>
          <declname>addr</declname>
        </param>
        <param>
          <type>int</type>
          <declname>nScore</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/net.cpp" line="247" column="1" bodyfile="/home/dev/ds-160209/src/net.cpp" bodystart="247" bodyend="274"/>
        <references refid="class_c_net_addr_1a35131b2792434d1c9a860c583b610ab6" compoundref="netbase_8cpp" startline="795" endline="798">CNetAddr::IsRoutable</references>
        <references refid="net_8cpp_1a37089835ec27ad8bf945a458708165b9" compoundref="net_8cpp" startline="47">fDiscover</references>
        <references refid="net_8h_1a385c44f6fb256e5716a2302a5b940388a85f937846a9820dce1ac928efee52a91" compoundref="net_8h" startline="85">LOCAL_MANUAL</references>
        <references refid="net_8cpp_1a96eb2fba6d80870802ac787b6ada4beb" compoundref="net_8cpp" startline="290" endline="294">IsLimited</references>
        <references refid="util_8h_1afc02c0a4258fedfb316be612bb659ba8" compoundref="util_8h" startline="158">LogPrintf</references>
        <references refid="class_c_service_1a336f9848fe9364e260c76499be0351a5" compoundref="netbase_8cpp" startline="1222" endline="1225">CService::ToString</references>
        <references refid="sync_8h_1a911fe23f057c2fe5aad629162d6c99d0" compoundref="sync_8h" startline="159">LOCK</references>
        <references refid="net_8cpp_1ac585e737c081ba921335070264a93a79" compoundref="net_8cpp" startline="54">mapLocalHost</references>
        <references refid="struct_local_service_info_1ad6a9d404fb109ba1506df3f6ca842ed5" compoundref="net_8h" startline="124">LocalServiceInfo::nScore</references>
        <references refid="struct_local_service_info_1aa5c39fec8cc69a43e393bb158f69224b" compoundref="net_8h" startline="125">LocalServiceInfo::nPort</references>
        <references refid="class_c_service_1a49df6ecaf59be814632c4d7755f26637" compoundref="netbase_8cpp" startline="1149" endline="1152">CService::GetPort</references>
        <references refid="net_8cpp_1a89098b55df7d627a7a3c7f367cae24e6" compoundref="net_8cpp" startline="238" endline="244">SetReachable</references>
        <references refid="class_c_net_addr_1a34a4760424f5c51998fc3baf82ccb5c8" compoundref="netbase_8cpp" startline="800" endline="820">CNetAddr::GetNetwork</references>
        <referencedby refid="init_8h_1a1a4c1bfbf6ba1db77e988b89b9cadfd3" compoundref="init_8cpp" startline="375" endline="1285">AppInit2</referencedby>
        <referencedby refid="net_8h_1abda4e8f87772f9a9d9d8f52a93791ffc" compoundref="net_8cpp" startline="276" endline="279">AddLocal</referencedby>
        <referencedby refid="net_8cpp_1a0c8010ad96acff7cca6aca684ec42b71" compoundref="net_8cpp" startline="1702" endline="1805">BindListenPort</referencedby>
      </memberdef>
      <memberdef kind="function" id="net_8cpp_1a5a95db59a5d1a78e0d8694ae48d205cd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool AddLocal</definition>
        <argsstring>(const CNetAddr &amp;addr, int nScore)</argsstring>
        <name>AddLocal</name>
        <param>
          <type>const <ref refid="class_c_net_addr" kindref="compound">CNetAddr</ref> &amp;</type>
          <declname>addr</declname>
        </param>
        <param>
          <type>int</type>
          <declname>nScore</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/net.cpp" line="276" column="1" bodyfile="/home/dev/ds-160209/src/net.cpp" bodystart="276" bodyend="279"/>
        <references refid="net_8cpp_1abb92a02eecc581e8927c8a6e31968645" compoundref="net_8cpp" startline="247" endline="274">AddLocal</references>
        <references refid="net_8cpp_1af6d341a24d761a509fca026458cf2f72" compoundref="net_8cpp" startline="99" endline="102">GetListenPort</references>
      </memberdef>
      <memberdef kind="function" id="net_8cpp_1a2f6d62a9d456bf38003df3815b707f46" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void SetLimited</definition>
        <argsstring>(enum Network net, bool fLimited)</argsstring>
        <name>SetLimited</name>
        <param>
          <type>enum <ref refid="netbase_8h_1acc9a38c714afe79b5035cb36f560dac3" kindref="member">Network</ref></type>
          <declname>net</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>fLimited</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Make a particular network entirely off-limits (no automatic connects to it) </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/net.cpp" line="282" column="1" bodyfile="/home/dev/ds-160209/src/net.cpp" bodystart="282" bodyend="288"/>
        <references refid="netbase_8h_1acc9a38c714afe79b5035cb36f560dac3af66f60a80e2a5d99813c3f322cf8a6e1" compoundref="netbase_8h" startline="30">NET_UNROUTABLE</references>
        <references refid="sync_8h_1a911fe23f057c2fe5aad629162d6c99d0" compoundref="sync_8h" startline="159">LOCK</references>
        <referencedby refid="init_8h_1a1a4c1bfbf6ba1db77e988b89b9cadfd3" compoundref="init_8cpp" startline="375" endline="1285">AppInit2</referencedby>
      </memberdef>
      <memberdef kind="function" id="net_8cpp_1a96eb2fba6d80870802ac787b6ada4beb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool IsLimited</definition>
        <argsstring>(enum Network net)</argsstring>
        <name>IsLimited</name>
        <param>
          <type>enum <ref refid="netbase_8h_1acc9a38c714afe79b5035cb36f560dac3" kindref="member">Network</ref></type>
          <declname>net</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/net.cpp" line="290" column="1" bodyfile="/home/dev/ds-160209/src/net.cpp" bodystart="290" bodyend="294"/>
        <references refid="sync_8h_1a911fe23f057c2fe5aad629162d6c99d0" compoundref="sync_8h" startline="159">LOCK</references>
        <referencedby refid="init_8h_1a1a4c1bfbf6ba1db77e988b89b9cadfd3" compoundref="init_8cpp" startline="375" endline="1285">AppInit2</referencedby>
        <referencedby refid="net_8h_1a058b75c6fcc94a0643184c237ad6de93" compoundref="net_8cpp" startline="213" endline="217">IsPeerAddrLocalGood</referencedby>
        <referencedby refid="net_8h_1a337d6af198a6b0d75f830e56da9b91e9" compoundref="net_8cpp" startline="247" endline="274">AddLocal</referencedby>
        <referencedby refid="net_8h_1a7f5f5a0bf934e49c7137ee4aa6eb8732" compoundref="net_8cpp" startline="296" endline="299">IsLimited</referencedby>
        <referencedby refid="net_8cpp_1a3b4720330e61127963a43df26b80f804" compoundref="net_8cpp" startline="1339" endline="1441">ThreadOpenConnections</referencedby>
        <referencedby refid="class_dark_silk_g_u_i_1a671bf7d03e729b88040ede8ae3a86ac5" compoundref="darksilkgui_8cpp" startline="570" endline="647">DarkSilkGUI::setClientModel</referencedby>
      </memberdef>
      <memberdef kind="function" id="net_8cpp_1a7f5f5a0bf934e49c7137ee4aa6eb8732" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool IsLimited</definition>
        <argsstring>(const CNetAddr &amp;addr)</argsstring>
        <name>IsLimited</name>
        <param>
          <type>const <ref refid="class_c_net_addr" kindref="compound">CNetAddr</ref> &amp;</type>
          <declname>addr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/net.cpp" line="296" column="1" bodyfile="/home/dev/ds-160209/src/net.cpp" bodystart="296" bodyend="299"/>
        <references refid="net_8cpp_1a96eb2fba6d80870802ac787b6ada4beb" compoundref="net_8cpp" startline="290" endline="294">IsLimited</references>
        <references refid="class_c_net_addr_1a34a4760424f5c51998fc3baf82ccb5c8" compoundref="netbase_8cpp" startline="800" endline="820">CNetAddr::GetNetwork</references>
      </memberdef>
      <memberdef kind="function" id="net_8cpp_1af7487aacfc9d708b3db40c255ec070a8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool SeenLocal</definition>
        <argsstring>(const CService &amp;addr)</argsstring>
        <name>SeenLocal</name>
        <param>
          <type>const <ref refid="class_c_service" kindref="compound">CService</ref> &amp;</type>
          <declname>addr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>vote for a local address </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/net.cpp" line="302" column="1" bodyfile="/home/dev/ds-160209/src/net.cpp" bodystart="302" bodyend="314"/>
        <references refid="sync_8h_1a911fe23f057c2fe5aad629162d6c99d0" compoundref="sync_8h" startline="159">LOCK</references>
        <references refid="net_8cpp_1ac585e737c081ba921335070264a93a79" compoundref="net_8cpp" startline="54">mapLocalHost</references>
      </memberdef>
      <memberdef kind="function" id="net_8cpp_1a16fa1bd4d34c4c29c90903fc3cdf7517" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool IsLocal</definition>
        <argsstring>(const CService &amp;addr)</argsstring>
        <name>IsLocal</name>
        <param>
          <type>const <ref refid="class_c_service" kindref="compound">CService</ref> &amp;</type>
          <declname>addr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>check whether a given address is potentially local </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/net.cpp" line="317" column="1" bodyfile="/home/dev/ds-160209/src/net.cpp" bodystart="317" bodyend="321"/>
        <references refid="sync_8h_1a911fe23f057c2fe5aad629162d6c99d0" compoundref="sync_8h" startline="159">LOCK</references>
        <references refid="net_8cpp_1ac585e737c081ba921335070264a93a79" compoundref="net_8cpp" startline="54">mapLocalHost</references>
        <referencedby refid="net_8h_1a57ffc895ab641207e0eb30fd7e00a585" compoundref="net_8cpp" startline="378" endline="443">ConnectNode</referencedby>
        <referencedby refid="net_8cpp_1a3b4720330e61127963a43df26b80f804" compoundref="net_8cpp" startline="1339" endline="1441">ThreadOpenConnections</referencedby>
        <referencedby refid="net_8cpp_1aa19cb8e6cf23a990e585f2bbf9ece276" compoundref="net_8cpp" startline="1516" endline="1542">OpenNetworkConnection</referencedby>
        <referencedby refid="class_c_net_addr_1a35131b2792434d1c9a860c583b610ab6" compoundref="netbase_8cpp" startline="795" endline="798">CNetAddr::IsRoutable</referencedby>
        <referencedby refid="class_c_net_addr_1af196f306433562cb088dc83fd314a267" compoundref="netbase_8cpp" startline="902" endline="983">CNetAddr::GetGroup</referencedby>
        <referencedby refid="netbase__tests_8cpp_1adbc1c20ef7fc0ca6790a9f162e284cde" compoundref="netbase__tests_8cpp" startline="21" endline="43">BOOST_AUTO_TEST_CASE</referencedby>
      </memberdef>
      <memberdef kind="function" id="net_8cpp_1af6de8e47b01a96206402ddef734114f2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool IsReachable</definition>
        <argsstring>(enum Network net)</argsstring>
        <name>IsReachable</name>
        <param>
          <type>enum <ref refid="netbase_8h_1acc9a38c714afe79b5035cb36f560dac3" kindref="member">Network</ref></type>
          <declname>net</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>check whether a given network is one we can probably connect to </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/net.cpp" line="324" column="1" bodyfile="/home/dev/ds-160209/src/net.cpp" bodystart="324" bodyend="328"/>
        <references refid="sync_8h_1a911fe23f057c2fe5aad629162d6c99d0" compoundref="sync_8h" startline="159">LOCK</references>
        <referencedby refid="net_8h_1a0eb7db987ad1a1bf139d0cd46873ed29" compoundref="net_8cpp" startline="331" endline="335">IsReachable</referencedby>
      </memberdef>
      <memberdef kind="function" id="net_8cpp_1a0eb7db987ad1a1bf139d0cd46873ed29" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool IsReachable</definition>
        <argsstring>(const CNetAddr &amp;addr)</argsstring>
        <name>IsReachable</name>
        <param>
          <type>const <ref refid="class_c_net_addr" kindref="compound">CNetAddr</ref> &amp;</type>
          <declname>addr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>check whether a given address is in a network we can probably connect to </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/net.cpp" line="331" column="1" bodyfile="/home/dev/ds-160209/src/net.cpp" bodystart="331" bodyend="335"/>
        <references refid="class_c_net_addr_1a34a4760424f5c51998fc3baf82ccb5c8" compoundref="netbase_8cpp" startline="800" endline="820">CNetAddr::GetNetwork</references>
        <references refid="net_8cpp_1af6de8e47b01a96206402ddef734114f2" compoundref="net_8cpp" startline="324" endline="328">IsReachable</references>
      </memberdef>
      <memberdef kind="function" id="net_8cpp_1ad4aabaa937cd6f4b708c47dbbdb8ea60" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void AddressCurrentlyConnected</definition>
        <argsstring>(const CService &amp;addr)</argsstring>
        <name>AddressCurrentlyConnected</name>
        <param>
          <type>const <ref refid="class_c_service" kindref="compound">CService</ref> &amp;</type>
          <declname>addr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/net.cpp" line="337" column="1" bodyfile="/home/dev/ds-160209/src/net.cpp" bodystart="337" bodyend="340"/>
        <references refid="class_c_addr_man_1a7aba66d9e9527522fed974567d34c322" compoundref="addrman_8h" startline="494" endline="502">CAddrMan::Connected</references>
      </memberdef>
      <memberdef kind="function" id="net_8cpp_1a66a7371d8e724cac0b4495169cdf2859" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_c_node" kindref="compound">CNode</ref> *</type>
        <definition>CNode* FindNode</definition>
        <argsstring>(const CNetAddr &amp;ip)</argsstring>
        <name>FindNode</name>
        <param>
          <type>const <ref refid="class_c_net_addr" kindref="compound">CNetAddr</ref> &amp;</type>
          <declname>ip</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/net.cpp" line="347" column="1" bodyfile="/home/dev/ds-160209/src/net.cpp" bodystart="347" bodyend="356"/>
        <references refid="sync_8h_1a911fe23f057c2fe5aad629162d6c99d0" compoundref="sync_8h" startline="159">LOCK</references>
        <references refid="net_8cpp_1aa5a11f8873e230cea77bc7e91ee51918" compoundref="net_8cpp" startline="68">vNodes</references>
        <references refid="class_c_node_1a3993ecb1de2a2135a3cf0904346a6f88" compoundref="net_8h" startline="245">CNode::addr</references>
        <referencedby refid="net_8h_1a57ffc895ab641207e0eb30fd7e00a585" compoundref="net_8cpp" startline="378" endline="443">ConnectNode</referencedby>
        <referencedby refid="net_8cpp_1aa19cb8e6cf23a990e585f2bbf9ece276" compoundref="net_8cpp" startline="1516" endline="1542">OpenNetworkConnection</referencedby>
        <referencedby refid="class_c_sandstorm_pool_1ade2ee9d0faa6598f90f672302d17eba8" compoundref="sandstorm_8cpp" startline="2161" endline="2179">CSandstormPool::RelayIn</referencedby>
      </memberdef>
      <memberdef kind="function" id="net_8cpp_1abebbeb89006ec148ba3c184e123170c5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_c_node" kindref="compound">CNode</ref> *</type>
        <definition>CNode* FindNode</definition>
        <argsstring>(const std::string &amp;addrName)</argsstring>
        <name>FindNode</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>addrName</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/net.cpp" line="358" column="1" bodyfile="/home/dev/ds-160209/src/net.cpp" bodystart="358" bodyend="365"/>
        <references refid="sync_8h_1a911fe23f057c2fe5aad629162d6c99d0" compoundref="sync_8h" startline="159">LOCK</references>
        <references refid="net_8cpp_1aa5a11f8873e230cea77bc7e91ee51918" compoundref="net_8cpp" startline="68">vNodes</references>
        <references refid="class_c_node_1a3155cd313d85ec3ff691f8259a5f5345" compoundref="net_8h" startline="246">CNode::addrName</references>
      </memberdef>
      <memberdef kind="function" id="net_8cpp_1aaef21dfcc9b267d3f4e698d7c2b60eed" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_c_node" kindref="compound">CNode</ref> *</type>
        <definition>CNode* FindNode</definition>
        <argsstring>(const CService &amp;addr)</argsstring>
        <name>FindNode</name>
        <param>
          <type>const <ref refid="class_c_service" kindref="compound">CService</ref> &amp;</type>
          <declname>addr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/net.cpp" line="367" column="1" bodyfile="/home/dev/ds-160209/src/net.cpp" bodystart="367" bodyend="376"/>
        <references refid="sync_8h_1a911fe23f057c2fe5aad629162d6c99d0" compoundref="sync_8h" startline="159">LOCK</references>
        <references refid="net_8cpp_1aa5a11f8873e230cea77bc7e91ee51918" compoundref="net_8cpp" startline="68">vNodes</references>
        <references refid="class_c_node_1a3993ecb1de2a2135a3cf0904346a6f88" compoundref="net_8h" startline="245">CNode::addr</references>
      </memberdef>
      <memberdef kind="function" id="net_8cpp_1ac6e0da5071d4eaa6960dbf889c765834" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_c_node" kindref="compound">CNode</ref> *</type>
        <definition>CNode* ConnectNode</definition>
        <argsstring>(CAddress addrConnect, const char *pszDest, bool sandStormnode)</argsstring>
        <name>ConnectNode</name>
        <param>
          <type><ref refid="class_c_address" kindref="compound">CAddress</ref></type>
          <declname>addrConnect</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>pszDest</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>sandStormnode</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>debug print </para>        </inbodydescription>
        <location file="/home/dev/ds-160209/src/net.cpp" line="378" column="1" bodyfile="/home/dev/ds-160209/src/net.cpp" bodystart="378" bodyend="443"/>
        <references refid="net_8cpp_1a16fa1bd4d34c4c29c90903fc3cdf7517" compoundref="net_8cpp" startline="317" endline="321">IsLocal</references>
        <references refid="net_8cpp_1a66a7371d8e724cac0b4495169cdf2859" compoundref="net_8cpp" startline="347" endline="356">FindNode</references>
        <references refid="class_c_node_1aab66b45769e6c8009d224c63704a1859" compoundref="net_8h" startline="265">CNode::fSandStorm</references>
        <references refid="class_c_node_1afb65ed679f7bda59aab89e0f5afae292" compoundref="net_8h" startline="454" endline="458">CNode::AddRef</references>
        <references refid="class_c_service_1a336f9848fe9364e260c76499be0351a5" compoundref="netbase_8cpp" startline="1222" endline="1225">CService::ToString</references>
        <references refid="timedata_8cpp_1a09f81b9c7650f898cf3cf305b87547e6" compoundref="timedata_8cpp" startline="33" endline="36">GetAdjustedTime</references>
        <references refid="class_c_address_1ac1c44aac968b11f90ce529b133ae4e9b" compoundref="protocol_8h" startline="106">CAddress::nTime</references>
        <references refid="netbase_8cpp_1a5da7129cf2a5f0ea9e9020e38d2bddc8" compoundref="netbase_8cpp" startline="502" endline="539">ConnectSocketByName</references>
        <references refid="chainparams_8cpp_1ace5c5b706d71a324a417dd2db394fd4a" compoundref="chainparams_8cpp" startline="186" endline="188">Params</references>
        <references refid="netbase_8cpp_1ac8115c6e2874217f2e487b5391cbe963" compoundref="netbase_8cpp" startline="29">nConnectTimeout</references>
        <references refid="netbase_8cpp_1a0bbba84024b924fe188fbb49125191d5" compoundref="netbase_8cpp" startline="463" endline="500">ConnectSocket</references>
        <references refid="class_c_addr_man_1afcddc2573121065177dc981cea710789" compoundref="addrman_8h" startline="456" endline="464">CAddrMan::Attempt</references>
        <references refid="compat_8h_1a633b0396ff93d336a088412a190a5072" compoundref="compat_8h" startline="60">SOCKET_ERROR</references>
        <references refid="util_8h_1afc02c0a4258fedfb316be612bb659ba8" compoundref="util_8h" startline="158">LogPrintf</references>
        <references refid="compat_8h_1a6d24fe3ab2906c21c373505ca244f90b" compoundref="compat_8h" startline="50">WSAGetLastError</references>
        <references refid="sync_8h_1a911fe23f057c2fe5aad629162d6c99d0" compoundref="sync_8h" startline="159">LOCK</references>
        <references refid="net_8cpp_1aa5a11f8873e230cea77bc7e91ee51918" compoundref="net_8cpp" startline="68">vNodes</references>
        <references refid="class_c_node_1abb39393ef08cb5668ded6cb14cdbc147" compoundref="net_8h" startline="243">CNode::nTimeConnected</references>
        <references refid="util_8cpp_1a46fac5fba8ba905b5f9acb364f5d8c6f" compoundref="util_8cpp" startline="1352" endline="1357">GetTime</references>
        <referencedby refid="class_c_active_stormnode_1a9532e0804ea4c96ad7d58ab3e9da6891" compoundref="activestormnode_8cpp" startline="17" endline="140">CActiveStormnode::ManageStatus</referencedby>
        <referencedby refid="net_8cpp_1aa19cb8e6cf23a990e585f2bbf9ece276" compoundref="net_8cpp" startline="1516" endline="1542">OpenNetworkConnection</referencedby>
        <referencedby refid="rpcnet_8cpp_1ab455bfd729ba34d3bb55b716e62405a3" compoundref="rpcnet_8cpp" startline="106" endline="146">addnode</referencedby>
        <referencedby refid="rpcstormnode_8cpp_1a1b562b4a6a627758a7c1080f23a82aa0" compoundref="rpcstormnode_8cpp" startline="81" endline="471">stormnode</referencedby>
        <referencedby refid="class_c_sand_storm_relay_1aae4c929f8831a4c678812b1da8f82a55" compoundref="sandstorm-relay_8cpp" startline="105" endline="120">CSandStormRelay::RelayThroughNode</referencedby>
        <referencedby refid="class_c_sandstorm_pool_1a459d1986058ad736773fa9857390ba96" compoundref="sandstorm_8cpp" startline="1353" endline="1625">CSandstormPool::DoAutomaticDenominating</referencedby>
      </memberdef>
      <memberdef kind="function" id="net_8cpp_1aff6b7f2f213ce1e8d3aea65c41c99cb8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void SocketSendData</definition>
        <argsstring>(CNode *pnode)</argsstring>
        <name>SocketSendData</name>
        <param>
          <type><ref refid="class_c_node" kindref="compound">CNode</ref> *</type>
          <declname>pnode</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/net.cpp" line="709" column="1" bodyfile="/home/dev/ds-160209/src/net.cpp" bodystart="709" bodyend="750"/>
        <references refid="class_c_node_1a68e5fb1a80fe4247aa577a3c9a74b399" compoundref="net_8h" startline="232">CNode::vSendMsg</references>
        <references refid="class_c_node_1a090bda86de6b84c3db83e1f029d4f453" compoundref="net_8h" startline="230">CNode::nSendOffset</references>
        <references refid="class_c_node_1a7cda6efa6a9ef9db3eebe70fc3bdd45a" compoundref="net_8h" startline="227">CNode::hSocket</references>
        <references refid="class_c_node_1af39253ad525733ca64ab3fc785dfc4eb" compoundref="net_8h" startline="241">CNode::nLastSend</references>
        <references refid="util_8cpp_1a46fac5fba8ba905b5f9acb364f5d8c6f" compoundref="util_8cpp" startline="1352" endline="1357">GetTime</references>
        <references refid="class_c_node_1a33e24a9544df3c60f9e1ec05b5e91051" compoundref="net_8h" startline="231">CNode::nSendBytes</references>
        <references refid="class_c_node_1a945c993a84eaa9d6bca18284befaccbe" compoundref="net_8cpp" startline="1995" endline="1999">CNode::RecordBytesSent</references>
        <references refid="class_c_node_1a3c99b7e2b0e53feb58f6859453456f74" compoundref="net_8h" startline="229">CNode::nSendSize</references>
        <references refid="compat_8h_1a6d24fe3ab2906c21c373505ca244f90b" compoundref="compat_8h" startline="50">WSAGetLastError</references>
        <references refid="compat_8h_1a4ba23242bee4784b72a0a170e2f975a0" compoundref="compat_8h" startline="53">WSAEWOULDBLOCK</references>
        <references refid="compat_8h_1a7ce1c171e08d68442124bf6189f8aec5" compoundref="compat_8h" startline="54">WSAEMSGSIZE</references>
        <references refid="compat_8h_1aef81890a7d46cb9dda85df9b96cba6b1" compoundref="compat_8h" startline="55">WSAEINTR</references>
        <references refid="compat_8h_1ada8711ffab59910a2732cfa4b7c24e29" compoundref="compat_8h" startline="56">WSAEINPROGRESS</references>
        <references refid="util_8h_1afc02c0a4258fedfb316be612bb659ba8" compoundref="util_8h" startline="158">LogPrintf</references>
        <references refid="class_c_node_1a63a6091a0b0fc0987d9436e1ec708423" compoundref="net_8cpp" startline="445" endline="463">CNode::CloseSocketDisconnect</references>
        <referencedby refid="net_8cpp_1aa1111c12121e039bbd8eedb556e4514a" compoundref="net_8cpp" startline="754" endline="1131">ThreadSocketHandler</referencedby>
        <referencedby refid="class_c_node_1af8d4b8c0f883afffcb62d906c31b2cdf" compoundref="net_8h" startline="544" endline="578">CNode::EndMessage</referencedby>
      </memberdef>
      <memberdef kind="function" id="net_8cpp_1aa1111c12121e039bbd8eedb556e4514a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ThreadSocketHandler</definition>
        <argsstring>()</argsstring>
        <name>ThreadSocketHandler</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/net.cpp" line="754" column="1" bodyfile="/home/dev/ds-160209/src/net.cpp" bodystart="754" bodyend="1131"/>
        <references refid="sync_8h_1a911fe23f057c2fe5aad629162d6c99d0" compoundref="sync_8h" startline="159">LOCK</references>
        <references refid="net_8cpp_1aa5a11f8873e230cea77bc7e91ee51918" compoundref="net_8cpp" startline="68">vNodes</references>
        <references refid="class_c_node_1af2f7ea958313974e8a948292f060922e" compoundref="net_8h" startline="259">CNode::fDisconnect</references>
        <references refid="class_c_node_1a72211aaf51af2e981e6b8a1deb73c836" compoundref="net_8h" startline="428" endline="432">CNode::GetRefCount</references>
        <references refid="class_c_node_1a015361812daa5b6ebb9a5692ddf67a54" compoundref="net_8h" startline="236">CNode::vRecvMsg</references>
        <references refid="class_c_node_1a3c99b7e2b0e53feb58f6859453456f74" compoundref="net_8h" startline="229">CNode::nSendSize</references>
        <references refid="class_c_node_1a6174b5a3d8d8f6a2daf02be3cf04dc63" compoundref="net_8h" startline="228">CNode::ssSend</references>
        <references refid="class_c_data_stream_1a6e50e788d33080ac804e4d8ba7150279" compoundref="streams_8h" startline="117" endline="117">CDataStream::empty</references>
        <references refid="class_c_node_1a4bb25f8bdeeaff5e8cb08abc97bbc44d" compoundref="net_8h" startline="266">CNode::grantOutbound</references>
        <references refid="class_c_semaphore_grant_1a8d985eeace74e037baeb39bd2d586576" compoundref="sync_8h" startline="225" endline="230">CSemaphoreGrant::Release</references>
        <references refid="class_c_node_1a63a6091a0b0fc0987d9436e1ec708423" compoundref="net_8cpp" startline="445" endline="463">CNode::CloseSocketDisconnect</references>
        <references refid="class_c_node_1a933adb2b192939545a01d602b1d7b53a" compoundref="net_8h" startline="257">CNode::fNetworkNode</references>
        <references refid="class_c_node_1a64b2550ec558b6106ebc122d450ad35b" compoundref="net_8h" startline="256">CNode::fInbound</references>
        <references refid="class_c_node_1af804bf7c7f9794e80a3b916e1befece9" compoundref="net_8h" startline="460" endline="463">CNode::Release</references>
        <references refid="class_c_node_1a3993ecb1de2a2135a3cf0904346a6f88" compoundref="net_8h" startline="245">CNode::addr</references>
        <references refid="sync_8h_1aca08e7299069c2d60b8aa726fc550612" compoundref="sync_8h" startline="161">TRY_LOCK</references>
        <references refid="class_c_node_1a79edcac83fc5067567c7b41c26fcc56f" compoundref="net_8h" startline="233">CNode::cs_vSend</references>
        <references refid="class_c_node_1abaebfaf8fff7e2e99366ae2bc69af6cd" compoundref="net_8h" startline="237">CNode::cs_vRecvMsg</references>
        <references refid="class_c_node_1a1e8b0784cc82f33edc2dc4e2834d1ff0" compoundref="net_8h" startline="297">CNode::cs_inventory</references>
        <references refid="init_8cpp_1a4fe31b510fc1c2b95321cedb9f89e8de" compoundref="init_8cpp" startline="52">uiInterface</references>
        <references refid="class_c_client_u_i_interface_1a496995d44db8dc3e3ef84d345e25967d" compoundref="ui__interface_8h" startline="99">CClientUIInterface::NotifyNumConnectionsChanged</references>
        <references refid="class_c_node_1a7cda6efa6a9ef9db3eebe70fc3bdd45a" compoundref="net_8h" startline="227">CNode::hSocket</references>
        <references refid="class_c_node_1a68e5fb1a80fe4247aa577a3c9a74b399" compoundref="net_8h" startline="232">CNode::vSendMsg</references>
        <references refid="compat_8h_1a633b0396ff93d336a088412a190a5072" compoundref="compat_8h" startline="60">SOCKET_ERROR</references>
        <references refid="compat_8h_1a6d24fe3ab2906c21c373505ca244f90b" compoundref="compat_8h" startline="50">WSAGetLastError</references>
        <references refid="util_8h_1afc02c0a4258fedfb316be612bb659ba8" compoundref="util_8h" startline="158">LogPrintf</references>
        <references refid="util_8h_1ac635182d3e845eda4af4fa5ab31609da" compoundref="util_8h" startline="107" endline="114">MilliSleep</references>
        <references refid="class_c_service_1a77782219f5d85f326b4c089cb2636e6f" compoundref="netbase_8cpp" startline="1103" endline="1115">CService::SetSockAddr</references>
        <references refid="compat_8h_1a4ba23242bee4784b72a0a170e2f975a0" compoundref="compat_8h" startline="53">WSAEWOULDBLOCK</references>
        <references refid="util_8cpp_1a24f685720bf40370e5bd2a192ad50cd8" compoundref="util_8cpp" startline="536" endline="541">GetArg</references>
        <references refid="compat_8h_1a5a3eb971b466278ada4f7f87399a537c" compoundref="compat_8h" startline="75">closesocket</references>
        <references refid="class_c_node_1aefa8b81afa53b4c6635dc4c6c024211a" compoundref="net_8cpp" startline="489" endline="503">CNode::IsBanned</references>
        <references refid="class_c_service_1a336f9848fe9364e260c76499be0351a5" compoundref="netbase_8cpp" startline="1222" endline="1225">CService::ToString</references>
        <references refid="class_c_net_addr_1aa3e44dfd064d9d8da1cb48cdcb7dd231" compoundref="netbase_8cpp" startline="560" endline="591">CNetAddr::SetSpecial</references>
        <references refid="compat_8h_1a7ce1c171e08d68442124bf6189f8aec5" compoundref="compat_8h" startline="54">WSAEMSGSIZE</references>
        <references refid="compat_8h_1aef81890a7d46cb9dda85df9b96cba6b1" compoundref="compat_8h" startline="55">WSAEINTR</references>
        <references refid="compat_8h_1ada8711ffab59910a2732cfa4b7c24e29" compoundref="compat_8h" startline="56">WSAEINPROGRESS</references>
        <references refid="compat_8h_1a26769957ec1a2beaf223f33b66ee64ab" compoundref="compat_8h" startline="59">INVALID_SOCKET</references>
        <references refid="class_c_node_1afb65ed679f7bda59aab89e0f5afae292" compoundref="net_8h" startline="454" endline="458">CNode::AddRef</references>
        <references refid="class_c_node_1a2cff79a034258ba032257e993fc42e62" compoundref="net_8h" startline="435" endline="441">CNode::GetTotalRecvSize</references>
        <references refid="net_8h_1a7b020b8dc4437a88cf92570b82c55f25" compoundref="net_8h" startline="37" endline="37">ReceiveFloodSize</references>
        <references refid="class_c_node_1a84a10eb3aec7fdddafeb354527b50b75" compoundref="net_8cpp" startline="572" endline="605">CNode::ReceiveMsgBytes</references>
        <references refid="class_c_node_1afb40f43a51ba686de93256727351af07" compoundref="net_8h" startline="242">CNode::nLastRecv</references>
        <references refid="util_8cpp_1a46fac5fba8ba905b5f9acb364f5d8c6f" compoundref="util_8cpp" startline="1352" endline="1357">GetTime</references>
        <references refid="class_c_node_1a8bbe2a7052476d62acf7f0a5a9c5981b" compoundref="net_8h" startline="238">CNode::nRecvBytes</references>
        <references refid="class_c_node_1af72b4b6e454c743af071896019ae1c69" compoundref="net_8cpp" startline="1989" endline="1993">CNode::RecordBytesRecv</references>
        <references refid="net_8cpp_1aff6b7f2f213ce1e8d3aea65c41c99cb8" compoundref="net_8cpp" startline="709" endline="750">SocketSendData</references>
        <references refid="class_c_node_1abb39393ef08cb5668ded6cb14cdbc147" compoundref="net_8h" startline="243">CNode::nTimeConnected</references>
        <references refid="class_c_node_1af39253ad525733ca64ab3fc785dfc4eb" compoundref="net_8h" startline="241">CNode::nLastSend</references>
        <references refid="class_c_node_1a9a077fbd09ddee1d81f027bc01a4ec68" compoundref="net_8h" startline="304">CNode::nPingNonceSent</references>
        <references refid="class_c_node_1a8352aa332af726ff117fb890c4dd3869" compoundref="net_8h" startline="306">CNode::nPingUsecStart</references>
        <references refid="util_8h_1a0c5a06b50cd805b1923552114494c029" compoundref="util_8h" startline="389" endline="393">GetTimeMicros</references>
        <referencedby refid="net_8h_1a9396d8054e8f74959e9391871aaddde0" compoundref="net_8cpp" startline="1858" endline="1899">StartNode</referencedby>
      </memberdef>
      <memberdef kind="function" id="net_8cpp_1a93e4e6fbe288b6e882e697918695f88e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void MapPort</definition>
        <argsstring>(bool)</argsstring>
        <name>MapPort</name>
        <param>
          <type>bool</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/net.cpp" line="1248" column="1" bodyfile="/home/dev/ds-160209/src/net.cpp" bodystart="1248" bodyend="1251"/>
        <referencedby refid="net_8h_1a9396d8054e8f74959e9391871aaddde0" compoundref="net_8cpp" startline="1858" endline="1899">StartNode</referencedby>
        <referencedby refid="net_8h_1ac9110488f45c160d58f3c7ab7197bcea" compoundref="net_8cpp" startline="1901" endline="1911">StopNode</referencedby>
        <referencedby refid="class_options_model_1a3102b457f4d46efac8ecb03b3d536b62" compoundref="optionsmodel_8cpp" startline="315" endline="526">OptionsModel::setData</referencedby>
      </memberdef>
      <memberdef kind="function" id="net_8cpp_1ab2d8883b5524ec7b80d3b9535e73a3ed" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ThreadDNSAddressSeed</definition>
        <argsstring>()</argsstring>
        <name>ThreadDNSAddressSeed</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/net.cpp" line="1259" column="1" bodyfile="/home/dev/ds-160209/src/net.cpp" bodystart="1259" bodyend="1300"/>
        <references refid="class_c_addr_man_1a15b8e72f55344b6fbd1bc1bda3cdc5bc" compoundref="addrman_8h" startline="395" endline="398">CAddrMan::size</references>
        <references refid="util_8cpp_1a64d956f1dda7f9a80ab5d594532b906d" compoundref="util_8cpp" startline="550" endline="559">GetBoolArg</references>
        <references refid="util_8h_1ac635182d3e845eda4af4fa5ab31609da" compoundref="util_8h" startline="107" endline="114">MilliSleep</references>
        <references refid="sync_8h_1a911fe23f057c2fe5aad629162d6c99d0" compoundref="sync_8h" startline="159">LOCK</references>
        <references refid="net_8cpp_1aa5a11f8873e230cea77bc7e91ee51918" compoundref="net_8cpp" startline="68">vNodes</references>
        <references refid="util_8h_1afc02c0a4258fedfb316be612bb659ba8" compoundref="util_8h" startline="158">LogPrintf</references>
        <references refid="chainparams_8cpp_1ace5c5b706d71a324a417dd2db394fd4a" compoundref="chainparams_8cpp" startline="186" endline="188">Params</references>
        <references refid="class_c_chain_params_1a6ad644576193885d2be4959abd2a7317" compoundref="chainparams_8h" startline="65" endline="65">CChainParams::DNSSeeds</references>
        <references refid="netbase_8cpp_1a4a0df7ebe15572508e61c38406e49732" compoundref="netbase_8cpp" startline="422" endline="425">HaveNameProxy</references>
        <references refid="net_8cpp_1a5230a9dcbf8f7663e386b358f8d2fdc8" compoundref="net_8cpp" startline="93" endline="97">AddOneShot</references>
        <references refid="struct_c_d_n_s_seed_data_1a19b30302d59eafcd286a7e7609fc0073" compoundref="chainparams_8h" startline="24">CDNSSeedData::host</references>
        <references refid="netbase_8cpp_1a3cdc8ba9f8d72752ff5cdd1e7407cdef" compoundref="netbase_8cpp" startline="130" endline="142">LookupHost</references>
        <references refid="class_c_address_1ac1c44aac968b11f90ce529b133ae4e9b" compoundref="protocol_8h" startline="106">CAddress::nTime</references>
        <references refid="util_8cpp_1a46fac5fba8ba905b5f9acb364f5d8c6f" compoundref="util_8cpp" startline="1352" endline="1357">GetTime</references>
        <references refid="util_8cpp_1a27d9149d522b1fa87d84e5e9ca902aef" compoundref="util_8cpp" startline="198" endline="211">GetRand</references>
        <references refid="class_c_addr_man_1a03fcc7109b5f014760dc50a81f68c5ec" compoundref="addrman_8h" startline="414" endline="426">CAddrMan::Add</references>
        <references refid="struct_c_d_n_s_seed_data_1afd774485f34a942ee37dc2182f9ffadf" compoundref="chainparams_8h" startline="24">CDNSSeedData::name</references>
        <referencedby refid="net_8h_1a9396d8054e8f74959e9391871aaddde0" compoundref="net_8cpp" startline="1858" endline="1899">StartNode</referencedby>
      </memberdef>
      <memberdef kind="function" id="net_8cpp_1ab8b5323f5ef61499582a5a6e53b49b6e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void DumpAddresses</definition>
        <argsstring>()</argsstring>
        <name>DumpAddresses</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/net.cpp" line="1310" column="1" bodyfile="/home/dev/ds-160209/src/net.cpp" bodystart="1310" bodyend="1319"/>
        <references refid="util_8h_1a139d0fe6387b9e230a9b8bb12d9b43b9" compoundref="util_8h" startline="383" endline="387">GetTimeMillis</references>
        <references refid="class_c_addr_d_b_1aaec90dba59cd69a2f25bc5630a1dde39" compoundref="net_8cpp" startline="2022" endline="2058">CAddrDB::Write</references>
        <references refid="class_c_addr_man_1a15b8e72f55344b6fbd1bc1bda3cdc5bc" compoundref="addrman_8h" startline="395" endline="398">CAddrMan::size</references>
        <referencedby refid="net_8h_1a9396d8054e8f74959e9391871aaddde0" compoundref="net_8cpp" startline="1858" endline="1899">StartNode</referencedby>
        <referencedby refid="net_8h_1ac9110488f45c160d58f3c7ab7197bcea" compoundref="net_8cpp" startline="1901" endline="1911">StopNode</referencedby>
      </memberdef>
      <memberdef kind="function" id="net_8cpp_1af2ec2d087be42005dc76eac64a531088" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ProcessOneShot</definition>
        <argsstring>()</argsstring>
        <name>ProcessOneShot</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/net.cpp" line="1321" column="1" bodyfile="/home/dev/ds-160209/src/net.cpp" bodystart="1321" bodyend="1337"/>
      </memberdef>
      <memberdef kind="function" id="net_8cpp_1a3b4720330e61127963a43df26b80f804" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ThreadOpenConnections</definition>
        <argsstring>()</argsstring>
        <name>ThreadOpenConnections</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/net.cpp" line="1339" column="1" bodyfile="/home/dev/ds-160209/src/net.cpp" bodystart="1339" bodyend="1441"/>
        <references refid="util_8cpp_1a0502b74b88db99500ee21dcb446311e5" compoundref="util_8cpp" startline="94">mapArgs</references>
        <references refid="util_8cpp_1a34d23466f937db99d45620bc7ea5d2fb" compoundref="util_8cpp" startline="95">mapMultiArgs</references>
        <references refid="net_8cpp_1aa19cb8e6cf23a990e585f2bbf9ece276" compoundref="net_8cpp" startline="1516" endline="1542">OpenNetworkConnection</references>
        <references refid="util_8h_1ac635182d3e845eda4af4fa5ab31609da" compoundref="util_8h" startline="107" endline="114">MilliSleep</references>
        <references refid="util_8cpp_1a46fac5fba8ba905b5f9acb364f5d8c6f" compoundref="util_8cpp" startline="1352" endline="1357">GetTime</references>
        <references refid="class_c_addr_man_1a15b8e72f55344b6fbd1bc1bda3cdc5bc" compoundref="addrman_8h" startline="395" endline="398">CAddrMan::size</references>
        <references refid="util_8h_1afc02c0a4258fedfb316be612bb659ba8" compoundref="util_8h" startline="158">LogPrintf</references>
        <references refid="class_c_addr_man_1a03fcc7109b5f014760dc50a81f68c5ec" compoundref="addrman_8h" startline="414" endline="426">CAddrMan::Add</references>
        <references refid="chainparams_8cpp_1ace5c5b706d71a324a417dd2db394fd4a" compoundref="chainparams_8cpp" startline="186" endline="188">Params</references>
        <references refid="sync_8h_1a911fe23f057c2fe5aad629162d6c99d0" compoundref="sync_8h" startline="159">LOCK</references>
        <references refid="net_8cpp_1aa5a11f8873e230cea77bc7e91ee51918" compoundref="net_8cpp" startline="68">vNodes</references>
        <references refid="class_c_node_1a64b2550ec558b6106ebc122d450ad35b" compoundref="net_8h" startline="256">CNode::fInbound</references>
        <references refid="class_c_node_1a3993ecb1de2a2135a3cf0904346a6f88" compoundref="net_8h" startline="245">CNode::addr</references>
        <references refid="class_c_net_addr_1af196f306433562cb088dc83fd314a267" compoundref="netbase_8cpp" startline="902" endline="983">CNetAddr::GetGroup</references>
        <references refid="timedata_8cpp_1a09f81b9c7650f898cf3cf305b87547e6" compoundref="timedata_8cpp" startline="33" endline="36">GetAdjustedTime</references>
        <references refid="class_c_addr_man_1a6aa6708d0ee55dba9ec6cefc9811c8e3" compoundref="addrman_8h" startline="468" endline="478">CAddrMan::Select</references>
        <references refid="class_c_net_addr_1a52a1b506f07e5450057e12a8b5a7fbcd" compoundref="netbase_8cpp" startline="754" endline="793">CNetAddr::IsValid</references>
        <references refid="net_8cpp_1a16fa1bd4d34c4c29c90903fc3cdf7517" compoundref="net_8cpp" startline="317" endline="321">IsLocal</references>
        <references refid="net_8cpp_1a96eb2fba6d80870802ac787b6ada4beb" compoundref="net_8cpp" startline="290" endline="294">IsLimited</references>
        <references refid="class_c_address_1abcf198429efe135fa2424f7dbc0048b0" compoundref="protocol_8h" startline="109">CAddress::nLastTry</references>
        <references refid="class_c_service_1a49df6ecaf59be814632c4d7755f26637" compoundref="netbase_8cpp" startline="1149" endline="1152">CService::GetPort</references>
        <references refid="class_c_chain_params_1afdb7793273cdb87cc5fd75450eb2258b" compoundref="chainparams_8h" startline="58" endline="58">CChainParams::GetDefaultPort</references>
        <referencedby refid="net_8h_1a9396d8054e8f74959e9391871aaddde0" compoundref="net_8cpp" startline="1858" endline="1899">StartNode</referencedby>
      </memberdef>
      <memberdef kind="function" id="net_8cpp_1a2d1ca95557ae336582b886a251e7fe94" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ThreadOpenAddedConnections</definition>
        <argsstring>()</argsstring>
        <name>ThreadOpenAddedConnections</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/net.cpp" line="1443" column="1" bodyfile="/home/dev/ds-160209/src/net.cpp" bodystart="1443" bodyend="1513"/>
        <references refid="sync_8h_1a911fe23f057c2fe5aad629162d6c99d0" compoundref="sync_8h" startline="159">LOCK</references>
        <references refid="net_8cpp_1aea576e413065756784b47d68d5051f72" compoundref="net_8cpp" startline="81">vAddedNodes</references>
        <references refid="util_8cpp_1a34d23466f937db99d45620bc7ea5d2fb" compoundref="util_8cpp" startline="95">mapMultiArgs</references>
        <references refid="netbase_8cpp_1a4a0df7ebe15572508e61c38406e49732" compoundref="netbase_8cpp" startline="422" endline="425">HaveNameProxy</references>
        <references refid="net_8cpp_1aa19cb8e6cf23a990e585f2bbf9ece276" compoundref="net_8cpp" startline="1516" endline="1542">OpenNetworkConnection</references>
        <references refid="util_8h_1ac635182d3e845eda4af4fa5ab31609da" compoundref="util_8h" startline="107" endline="114">MilliSleep</references>
        <references refid="netbase_8cpp_1a56a2f4bcb9fb77b5efe358f804f642cc" compoundref="netbase_8cpp" startline="144" endline="160">Lookup</references>
        <references refid="chainparams_8cpp_1ace5c5b706d71a324a417dd2db394fd4a" compoundref="chainparams_8cpp" startline="186" endline="188">Params</references>
        <references refid="class_c_chain_params_1afdb7793273cdb87cc5fd75450eb2258b" compoundref="chainparams_8h" startline="58" endline="58">CChainParams::GetDefaultPort</references>
        <references refid="netbase_8cpp_1ab5335ec17aee4d4fdd4c735b85707b56" compoundref="netbase_8cpp" startline="30">fNameLookup</references>
        <references refid="net_8cpp_1adfc6e2c8b106da3807ca34d27577b37e" compoundref="net_8cpp" startline="78">setservAddNodeAddresses</references>
        <references refid="net_8cpp_1aa5a11f8873e230cea77bc7e91ee51918" compoundref="net_8cpp" startline="68">vNodes</references>
        <references refid="class_c_node_1a3993ecb1de2a2135a3cf0904346a6f88" compoundref="net_8h" startline="245">CNode::addr</references>
        <referencedby refid="net_8h_1a9396d8054e8f74959e9391871aaddde0" compoundref="net_8cpp" startline="1858" endline="1899">StartNode</referencedby>
      </memberdef>
      <memberdef kind="function" id="net_8cpp_1ab029931e3a3cbb4cd4116a4737198a17" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="stdint_8h_1adec1df1b8b51cb32b77e5b86fff46471" kindref="member">int64_t</ref></type>
        <definition>static int64_t NodeSyncScore</definition>
        <argsstring>(const CNode *pnode)</argsstring>
        <name>NodeSyncScore</name>
        <param>
          <type>const <ref refid="class_c_node" kindref="compound">CNode</ref> *</type>
          <declname>pnode</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/net.cpp" line="1547" column="1" bodyfile="/home/dev/ds-160209/src/net.cpp" bodystart="1547" bodyend="1549"/>
      </memberdef>
      <memberdef kind="function" id="net_8cpp_1a9bbab8aacbed5f70503d620aad9d6b2f" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void StartSync</definition>
        <argsstring>(const vector&lt; CNode * &gt; &amp;vNodes)</argsstring>
        <name>StartSync</name>
        <param>
          <type>const vector&lt; <ref refid="class_c_node" kindref="compound">CNode</ref> * &gt; &amp;</type>
          <declname>vNodes</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/net.cpp" line="1551" column="1" bodyfile="/home/dev/ds-160209/src/net.cpp" bodystart="1551" bodyend="1580"/>
      </memberdef>
      <memberdef kind="function" id="net_8cpp_1a379b0d3521bdd62ac296f219d70c4e30" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ThreadMessageHandler</definition>
        <argsstring>()</argsstring>
        <name>ThreadMessageHandler</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/net.cpp" line="1582" column="1" bodyfile="/home/dev/ds-160209/src/net.cpp" bodystart="1582" bodyend="1654"/>
        <references refid="util_8h_1a8d620b8c9865456b925cd0eea4b2ffc1" compoundref="util_8h" startline="570" endline="579">SetThreadPriority</references>
        <references refid="util_8h_1aff5dd15d0754df75650eb9c3bfa5f86f" compoundref="util_8h" startline="566">THREAD_PRIORITY_BELOW_NORMAL</references>
        <references refid="sync_8h_1a911fe23f057c2fe5aad629162d6c99d0" compoundref="sync_8h" startline="159">LOCK</references>
        <references refid="net_8cpp_1aa5a11f8873e230cea77bc7e91ee51918" compoundref="net_8cpp" startline="68">vNodes</references>
        <references refid="class_c_node_1afb65ed679f7bda59aab89e0f5afae292" compoundref="net_8h" startline="454" endline="458">CNode::AddRef</references>
        <references refid="util_8cpp_1a27d9149d522b1fa87d84e5e9ca902aef" compoundref="util_8cpp" startline="198" endline="211">GetRand</references>
        <references refid="class_c_node_1af2f7ea958313974e8a948292f060922e" compoundref="net_8h" startline="259">CNode::fDisconnect</references>
        <references refid="sync_8h_1aca08e7299069c2d60b8aa726fc550612" compoundref="sync_8h" startline="161">TRY_LOCK</references>
        <references refid="class_c_node_1abaebfaf8fff7e2e99366ae2bc69af6cd" compoundref="net_8h" startline="237">CNode::cs_vRecvMsg</references>
        <references refid="struct_c_node_signals_1a9d5d5e496f424ee3331b3dcb0a0c558b" compoundref="net_8h" startline="61">CNodeSignals::ProcessMessages</references>
        <references refid="class_c_node_1a63a6091a0b0fc0987d9436e1ec708423" compoundref="net_8cpp" startline="445" endline="463">CNode::CloseSocketDisconnect</references>
        <references refid="class_c_node_1a3c99b7e2b0e53feb58f6859453456f74" compoundref="net_8h" startline="229">CNode::nSendSize</references>
        <references refid="net_8h_1a13f289d6233bd32b78a38793f76bdccb" compoundref="net_8h" startline="38" endline="38">SendBufferSize</references>
        <references refid="class_c_node_1a9649c1f27ff0d8f0ba89eb1ea5bee139" compoundref="net_8h" startline="235">CNode::vRecvGetData</references>
        <references refid="class_c_node_1a015361812daa5b6ebb9a5692ddf67a54" compoundref="net_8h" startline="236">CNode::vRecvMsg</references>
        <references refid="class_c_node_1a79edcac83fc5067567c7b41c26fcc56f" compoundref="net_8h" startline="233">CNode::cs_vSend</references>
        <references refid="struct_c_node_signals_1a72f761e2001b2cd5355b20e1168bf903" compoundref="net_8h" startline="62">CNodeSignals::SendMessages</references>
        <references refid="class_c_node_1af804bf7c7f9794e80a3b916e1befece9" compoundref="net_8h" startline="460" endline="463">CNode::Release</references>
        <references refid="util_8h_1ac635182d3e845eda4af4fa5ab31609da" compoundref="util_8h" startline="107" endline="114">MilliSleep</references>
        <referencedby refid="net_8h_1a9396d8054e8f74959e9391871aaddde0" compoundref="net_8cpp" startline="1858" endline="1899">StartNode</referencedby>
      </memberdef>
      <memberdef kind="function" id="net_8cpp_1a0c8010ad96acff7cca6aca684ec42b71" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool BindListenPort</definition>
        <argsstring>(const CService &amp;addrBind, string &amp;strError)</argsstring>
        <name>BindListenPort</name>
        <param>
          <type>const <ref refid="class_c_service" kindref="compound">CService</ref> &amp;</type>
          <declname>addrBind</declname>
        </param>
        <param>
          <type>string &amp;</type>
          <declname>strError</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/net.cpp" line="1702" column="1" bodyfile="/home/dev/ds-160209/src/net.cpp" bodystart="1702" bodyend="1805"/>
        <references refid="tinyformat_8h_1a56c674871a61baaad36ad52238c08857" compoundref="tinyformat_8h" startline="1011">strprintf</references>
        <references refid="util_8h_1afc02c0a4258fedfb316be612bb659ba8" compoundref="util_8h" startline="158">LogPrintf</references>
        <references refid="class_c_service_1ab0f791c174511056236119cc1580faeb" compoundref="netbase_8cpp" startline="1169" endline="1196">CService::GetSockAddr</references>
        <references refid="class_c_service_1a336f9848fe9364e260c76499be0351a5" compoundref="netbase_8cpp" startline="1222" endline="1225">CService::ToString</references>
        <references refid="compat_8h_1a6d24fe3ab2906c21c373505ca244f90b" compoundref="compat_8h" startline="50">WSAGetLastError</references>
        <references refid="compat_8h_1a633b0396ff93d336a088412a190a5072" compoundref="compat_8h" startline="60">SOCKET_ERROR</references>
        <references refid="class_c_net_addr_1a0edb022cd6a186de8099799415409d57" compoundref="netbase_8cpp" startline="641" endline="648">CNetAddr::IsIPv6</references>
        <references refid="compat_8h_1ae57d56be40e06a6148c41bb9c1f66eb6" compoundref="compat_8h" startline="57">WSAEADDRINUSE</references>
        <references refid="ui__interface_8h_1aad133bb6103b53cebf03fd01e2f11ba1" compoundref="ui__interface_8h" startline="117" endline="121">_</references>
        <references refid="class_c_net_addr_1a35131b2792434d1c9a860c583b610ab6" compoundref="netbase_8cpp" startline="795" endline="798">CNetAddr::IsRoutable</references>
        <references refid="net_8cpp_1a37089835ec27ad8bf945a458708165b9" compoundref="net_8cpp" startline="47">fDiscover</references>
        <references refid="net_8cpp_1abb92a02eecc581e8927c8a6e31968645" compoundref="net_8cpp" startline="247" endline="274">AddLocal</references>
        <references refid="net_8h_1a385c44f6fb256e5716a2302a5b940388aad42caef30be428cb73f7d2753b5162e" compoundref="net_8h" startline="83">LOCAL_BIND</references>
      </memberdef>
      <memberdef kind="function" id="net_8cpp_1a048eb0919e57aa88134e1afad7ee1ecb" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void Discover</definition>
        <argsstring>(boost::thread_group &amp;threadGroup)</argsstring>
        <name>Discover</name>
        <param>
          <type>boost::thread_group &amp;</type>
          <declname>threadGroup</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/net.cpp" line="1807" column="1" bodyfile="/home/dev/ds-160209/src/net.cpp" bodystart="1807" bodyend="1856"/>
      </memberdef>
      <memberdef kind="function" id="net_8cpp_1a9396d8054e8f74959e9391871aaddde0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void StartNode</definition>
        <argsstring>(boost::thread_group &amp;threadGroup)</argsstring>
        <name>StartNode</name>
        <param>
          <type>boost::thread_group &amp;</type>
          <declname>threadGroup</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/net.cpp" line="1858" column="1" bodyfile="/home/dev/ds-160209/src/net.cpp" bodystart="1858" bodyend="1899"/>
        <references refid="util_8cpp_1a24f685720bf40370e5bd2a192ad50cd8" compoundref="util_8cpp" startline="536" endline="541">GetArg</references>
        <references refid="net_8cpp_1aac7a5df09042b8fc16272947ca022c2c" compoundref="net_8cpp" startline="51">nLocalServices</references>
        <references refid="util_8cpp_1a64d956f1dda7f9a80ab5d594532b906d" compoundref="util_8cpp" startline="550" endline="559">GetBoolArg</references>
        <references refid="util_8h_1afc02c0a4258fedfb316be612bb659ba8" compoundref="util_8h" startline="158">LogPrintf</references>
        <references refid="util_8h_1ac481a378af0229bf71e3d9fee7b938ad" compoundref="util_8h" startline="623" endline="644">TraceThread</references>
        <references refid="net_8cpp_1ab2d8883b5524ec7b80d3b9535e73a3ed" compoundref="net_8cpp" startline="1259" endline="1300">ThreadDNSAddressSeed</references>
        <references refid="net_8cpp_1a93e4e6fbe288b6e882e697918695f88e" compoundref="net_8cpp" startline="1248" endline="1251">MapPort</references>
        <references refid="net_8cpp_1aa1111c12121e039bbd8eedb556e4514a" compoundref="net_8cpp" startline="754" endline="1131">ThreadSocketHandler</references>
        <references refid="net_8cpp_1a2d1ca95557ae336582b886a251e7fe94" compoundref="net_8cpp" startline="1443" endline="1513">ThreadOpenAddedConnections</references>
        <references refid="net_8cpp_1a3b4720330e61127963a43df26b80f804" compoundref="net_8cpp" startline="1339" endline="1441">ThreadOpenConnections</references>
        <references refid="net_8cpp_1a379b0d3521bdd62ac296f219d70c4e30" compoundref="net_8cpp" startline="1582" endline="1654">ThreadMessageHandler</references>
        <references refid="util_8h_1ac6be85b683de5d9b41dc3046e50d6acd" compoundref="util_8h" startline="597" endline="621">LoopForever</references>
        <references refid="net_8cpp_1ab8b5323f5ef61499582a5a6e53b49b6e" compoundref="net_8cpp" startline="1310" endline="1319">DumpAddresses</references>
        <references refid="net_8cpp_1a272e900bb201601d6842e465bec135af" compoundref="net_8cpp" startline="35">DUMP_ADDRESSES_INTERVAL</references>
        <referencedby refid="init_8h_1a1a4c1bfbf6ba1db77e988b89b9cadfd3" compoundref="init_8cpp" startline="375" endline="1285">AppInit2</referencedby>
      </memberdef>
      <memberdef kind="function" id="net_8cpp_1ac9110488f45c160d58f3c7ab7197bcea" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool StopNode</definition>
        <argsstring>()</argsstring>
        <name>StopNode</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/net.cpp" line="1901" column="1" bodyfile="/home/dev/ds-160209/src/net.cpp" bodystart="1901" bodyend="1911"/>
        <references refid="util_8h_1afc02c0a4258fedfb316be612bb659ba8" compoundref="util_8h" startline="158">LogPrintf</references>
        <references refid="net_8cpp_1a93e4e6fbe288b6e882e697918695f88e" compoundref="net_8cpp" startline="1248" endline="1251">MapPort</references>
        <references refid="main_8cpp_1a52890038ef379d29a1a8f3bd20dbe088">mempool</references>
        <references refid="class_c_tx_mem_pool_1a3039b67e5eebaa3ff830261c192816f2" compoundref="txmempool_8cpp" startline="39" endline="43">CTxMemPool::AddTransactionsUpdated</references>
        <references refid="class_c_semaphore_1af6a956f6c191e824485fd3af6db39318" compoundref="sync_8h" startline="201" endline="207">CSemaphore::post</references>
        <references refid="net_8cpp_1ab8b5323f5ef61499582a5a6e53b49b6e" compoundref="net_8cpp" startline="1310" endline="1319">DumpAddresses</references>
        <referencedby refid="init_8h_1ac5f038c2b480cf9ef5e19e3eba8dbaf9" compoundref="init_8cpp" startline="130" endline="194">Shutdown</referencedby>
      </memberdef>
      <memberdef kind="function" id="net_8cpp_1abe329205a15b55df86608f5f1964bdb1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void RelayTransaction</definition>
        <argsstring>(const CTransaction &amp;tx, const uint256 &amp;hash)</argsstring>
        <name>RelayTransaction</name>
        <param>
          <type>const <ref refid="class_c_transaction" kindref="compound">CTransaction</ref> &amp;</type>
          <declname>tx</declname>
        </param>
        <param>
          <type>const <ref refid="classuint256" kindref="compound">uint256</ref> &amp;</type>
          <declname>hash</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/net.cpp" line="1945" column="1" bodyfile="/home/dev/ds-160209/src/net.cpp" bodystart="1945" bodyend="1951"/>
        <references refid="serialize_8h_1a6b7b47dd702d9e331586d485013fd1eaa652754eeaf79fba4fcf4c18597a6961c" compoundref="serialize_8h" startline="89">SER_NETWORK</references>
        <references refid="class_c_data_stream_1a5542e71bd7af2ab7cd7be0f381d39cb5" compoundref="streams_8h" startline="119" endline="119">CDataStream::reserve</references>
        <references refid="net_8cpp_1abe329205a15b55df86608f5f1964bdb1" compoundref="net_8cpp" startline="1945" endline="1951">RelayTransaction</references>
        <referencedby refid="net_8h_1abe329205a15b55df86608f5f1964bdb1" compoundref="net_8cpp" startline="1945" endline="1951">RelayTransaction</referencedby>
        <referencedby refid="rpcrawtransaction_8cpp_1ad5aad44f890060f42efb49acf349511e" compoundref="rpcrawtransaction_8cpp" startline="558" endline="602">sendrawtransaction</referencedby>
        <referencedby refid="class_c_wallet_tx_1aec8c50f3fcde27525485b6cd4a4e19b5" compoundref="wallet_8cpp" startline="1225" endline="1242">CWalletTx::RelayWalletTransaction</referencedby>
      </memberdef>
      <memberdef kind="function" id="net_8cpp_1aa7eea5ebcc85b5a7a0ae3716608bfffe" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void RelayTransaction</definition>
        <argsstring>(const CTransaction &amp;tx, const uint256 &amp;hash, const CDataStream &amp;ss)</argsstring>
        <name>RelayTransaction</name>
        <param>
          <type>const <ref refid="class_c_transaction" kindref="compound">CTransaction</ref> &amp;</type>
          <declname>tx</declname>
        </param>
        <param>
          <type>const <ref refid="classuint256" kindref="compound">uint256</ref> &amp;</type>
          <declname>hash</declname>
        </param>
        <param>
          <type>const <ref refid="class_c_data_stream" kindref="compound">CDataStream</ref> &amp;</type>
          <declname>ss</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/net.cpp" line="1953" column="1" bodyfile="/home/dev/ds-160209/src/net.cpp" bodystart="1953" bodyend="1971"/>
        <references refid="protocol_8h_1ac36f475ca5b446f4fde4c9b90bec77c8a0494732fc92c975f58783e224585c473" compoundref="protocol_8h" startline="142">MSG_TX</references>
        <references refid="sync_8h_1a911fe23f057c2fe5aad629162d6c99d0" compoundref="sync_8h" startline="159">LOCK</references>
        <references refid="net_8cpp_1aebaeae1f0ac40d20a7aa3dd851176ae8" compoundref="net_8cpp" startline="71">vRelayExpiration</references>
        <references refid="util_8cpp_1a46fac5fba8ba905b5f9acb364f5d8c6f" compoundref="util_8cpp" startline="1352" endline="1357">GetTime</references>
        <references refid="net_8cpp_1a2c9eaa799e02fdf8a5c52eb9a5f750f6" compoundref="net_8cpp" startline="70">mapRelay</references>
        <references refid="net_8h_1a8efddffaa3931e6bafecaac5e0605d1b" compoundref="net_8h" startline="848" endline="856">RelayInventory</references>
      </memberdef>
      <memberdef kind="function" id="net_8cpp_1acd641309ae7f63d62c89ea2d912eec08" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void RelayTransactionLockReq</definition>
        <argsstring>(const CTransaction &amp;tx, const uint256 &amp;hash, bool relayToAll)</argsstring>
        <name>RelayTransactionLockReq</name>
        <param>
          <type>const <ref refid="class_c_transaction" kindref="compound">CTransaction</ref> &amp;</type>
          <declname>tx</declname>
        </param>
        <param>
          <type>const <ref refid="classuint256" kindref="compound">uint256</ref> &amp;</type>
          <declname>hash</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>relayToAll</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/net.cpp" line="1973" column="1" bodyfile="/home/dev/ds-160209/src/net.cpp" bodystart="1973" bodyend="1987"/>
        <references refid="protocol_8h_1ac36f475ca5b446f4fde4c9b90bec77c8a802e4d970385efb01469f48db2cf1e06" compoundref="protocol_8h" startline="147">MSG_TXLOCK_REQUEST</references>
        <references refid="class_c_transaction_1a3f8666d2a275c40da14bd5eaf47dc004" compoundref="transaction_8h" startline="309" endline="312">CTransaction::GetHash</references>
        <references refid="sync_8h_1a911fe23f057c2fe5aad629162d6c99d0" compoundref="sync_8h" startline="159">LOCK</references>
        <references refid="class_c_node_1ab387bb0c4ffd42e3f0aea233dca0e301" compoundref="net_8h" startline="264">CNode::fRelayTxes</references>
        <references refid="class_c_node_1a204fda3d33404cb37698c085b1583ab2" compoundref="net_8h" startline="583" endline="595">CNode::PushMessage</references>
        <referencedby refid="class_c_wallet_tx_1aec8c50f3fcde27525485b6cd4a4e19b5" compoundref="wallet_8cpp" startline="1225" endline="1242">CWalletTx::RelayWalletTransaction</referencedby>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">//<sp/>Copyright<sp/>(c)<sp/>2009-2016<sp/>Satoshi<sp/>Nakamoto</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Copyright<sp/>(c)<sp/>2009-2016<sp/>The<sp/>Bitcoin<sp/>Developers</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Copyright<sp/>(c)<sp/>2015-2016<sp/>Silk<sp/>Network</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Distributed<sp/>under<sp/>the<sp/>MIT/X11<sp/>software<sp/>license,<sp/>see<sp/>the<sp/>accompanying</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="comment">//<sp/>file<sp/>COPYING<sp/>or<sp/>http://www.opensource.org/licenses/mit-license.php.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="transaction_8h" kindref="compound">primitives/transaction.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="init_8h" kindref="compound">init.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="chainparams_8h" kindref="compound">chainparams.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="db_8h" kindref="compound">db.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="net_8h" kindref="compound">net.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="main_8h" kindref="compound">main.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="ui__interface_8h" kindref="compound">ui_interface.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="sandstorm_8h" kindref="compound">sandstorm.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="wallet_8h" kindref="compound">wallet.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>USE_NATIVE_I2P</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="i2p_8h" kindref="compound">i2p.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>WIN32</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;string.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>USE_UPNP</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;miniupnpc/miniwget.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;miniupnpc/miniupnpc.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;miniupnpc/upnpcommands.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;miniupnpc/upnperrors.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight></codeline>
<codeline lineno="32" refid="net_8cpp_1a62f02a22afd2d43dded4ce814f0f0e99" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>TOR_NET_STRING<sp/>&quot;tor&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Dump<sp/>addresses<sp/>to<sp/>peers.dat<sp/>every<sp/>15<sp/>minutes<sp/>(900s)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="35" refid="net_8cpp_1a272e900bb201601d6842e465bec135af" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DUMP_ADDRESSES_INTERVAL<sp/>900</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal"><ref refid="namespacestd" kindref="compound">std</ref>;</highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal"><ref refid="namespaceboost" kindref="compound">boost</ref>;</highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>MAX_OUTBOUND_CONNECTIONS<sp/>=<sp/>32;</highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="net_8cpp_1aa19cb8e6cf23a990e585f2bbf9ece276" kindref="member">OpenNetworkConnection</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_c_address" kindref="compound">CAddress</ref>&amp;<sp/>addrConnect,<sp/><ref refid="class_c_semaphore_grant" kindref="compound">CSemaphoreGrant</ref><sp/>*grantOutbound<sp/>=<sp/>NULL,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*strDest<sp/>=<sp/>NULL,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>fOneShot<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Global<sp/>state<sp/>variables</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="47" refid="net_8h_1a37089835ec27ad8bf945a458708165b9" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="net_8cpp_1a37089835ec27ad8bf945a458708165b9" kindref="member">fDiscover</ref><sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>USE_NATIVE_I2P</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"><ref refid="stdint_8h_1aaa5d1cd013383c889537491c3cfd9aad" kindref="member">uint64_t</ref><sp/><ref refid="net_8cpp_1aac7a5df09042b8fc16272947ca022c2c" kindref="member">nLocalServices</ref><sp/>=<sp/>NODE_I2P<sp/>|<sp/><ref refid="protocol_8h_1abc5c98fcc1211af2b80116dd6e0a035da9d1154f0e7e56f183a5c8373abe2e86c" kindref="member">NODE_NETWORK</ref>;</highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="51" refid="net_8h_1aac7a5df09042b8fc16272947ca022c2c" refkind="member"><highlight class="normal"><ref refid="stdint_8h_1aaa5d1cd013383c889537491c3cfd9aad" kindref="member">uint64_t</ref><sp/><ref refid="net_8cpp_1aac7a5df09042b8fc16272947ca022c2c" kindref="member">nLocalServices</ref><sp/>=<sp/><ref refid="protocol_8h_1abc5c98fcc1211af2b80116dd6e0a035da9d1154f0e7e56f183a5c8373abe2e86c" kindref="member">NODE_NETWORK</ref>;</highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="53" refid="net_8h_1a62111271618110807cc534e55c13cb70" refkind="member"><highlight class="normal"><ref refid="class_annotated_mixin" kindref="compound">CCriticalSection</ref><sp/><ref refid="net_8cpp_1a62111271618110807cc534e55c13cb70" kindref="member">cs_mapLocalHost</ref>;</highlight></codeline>
<codeline lineno="54" refid="net_8h_1a0b78d1ae4a3edd7ec2b4bc7b17d6cc79" refkind="member"><highlight class="normal">map&lt;CNetAddr,<sp/>LocalServiceInfo&gt;<sp/><ref refid="net_8cpp_1ac585e737c081ba921335070264a93a79" kindref="member">mapLocalHost</ref>;</highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>vfReachable[<ref refid="netbase_8h_1acc9a38c714afe79b5035cb36f560dac3a675b0737d6c404a5de25e324c166a4b5" kindref="member">NET_MAX</ref>]<sp/>=<sp/>{};</highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>vfLimited[<ref refid="netbase_8h_1acc9a38c714afe79b5035cb36f560dac3a675b0737d6c404a5de25e324c166a4b5" kindref="member">NET_MAX</ref>]<sp/>=<sp/>{};</highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="class_c_node" kindref="compound">CNode</ref>*<sp/>pnodeLocalHost<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="class_c_node" kindref="compound">CNode</ref>*<sp/>pnodeSync<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="59" refid="net_8h_1a8c1a78575c0e397b5af7e6b4cc4493f2" refkind="member"><highlight class="normal"><ref refid="stdint_8h_1aaa5d1cd013383c889537491c3cfd9aad" kindref="member">uint64_t</ref><sp/><ref refid="net_8cpp_1a8c1a78575c0e397b5af7e6b4cc4493f2" kindref="member">nLocalHostNonce</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>std::vector&lt;SOCKET&gt;<sp/>vhListenSocket;</highlight></codeline>
<codeline lineno="61" refid="net_8h_1ac575e3335fd15a19b567026491f8f01a" refkind="member"><highlight class="normal"><ref refid="class_c_addr_man" kindref="compound">CAddrMan</ref><sp/><ref refid="net_8cpp_1ac575e3335fd15a19b567026491f8f01a" kindref="member">addrman</ref>;</highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>USE_NATIVE_I2P</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>std::vector&lt;SOCKET&gt;<sp/>vhI2PListenSocket;</highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nI2PNodeCount<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight></codeline>
<codeline lineno="68" refid="net_8h_1a4b9238c185ab61230cd6f5af96a00e9b" refkind="member"><highlight class="normal">vector&lt;CNode*&gt;<sp/><ref refid="net_8cpp_1aa5a11f8873e230cea77bc7e91ee51918" kindref="member">vNodes</ref>;</highlight></codeline>
<codeline lineno="69" refid="net_8h_1a8282e3a7948351ac96516573cd31f9d0" refkind="member"><highlight class="normal"><ref refid="class_annotated_mixin" kindref="compound">CCriticalSection</ref><sp/><ref refid="net_8cpp_1a8282e3a7948351ac96516573cd31f9d0" kindref="member">cs_vNodes</ref>;</highlight></codeline>
<codeline lineno="70" refid="net_8h_1adb45ec1b7c89fd811f480182f45ec546" refkind="member"><highlight class="normal">map&lt;CInv,<sp/>CDataStream&gt;<sp/><ref refid="net_8cpp_1a2c9eaa799e02fdf8a5c52eb9a5f750f6" kindref="member">mapRelay</ref>;</highlight></codeline>
<codeline lineno="71" refid="net_8h_1a43e845269f2b18e20dfcb7ece6832a2e" refkind="member"><highlight class="normal">deque&lt;pair&lt;int64_t,<sp/>CInv&gt;<sp/>&gt;<sp/><ref refid="net_8cpp_1aebaeae1f0ac40d20a7aa3dd851176ae8" kindref="member">vRelayExpiration</ref>;</highlight></codeline>
<codeline lineno="72" refid="net_8h_1ae1ed86ae54e13fe5f0ae1c12e48e3a0e" refkind="member"><highlight class="normal"><ref refid="class_annotated_mixin" kindref="compound">CCriticalSection</ref><sp/><ref refid="net_8cpp_1ae1ed86ae54e13fe5f0ae1c12e48e3a0e" kindref="member">cs_mapRelay</ref>;</highlight></codeline>
<codeline lineno="73" refid="net_8h_1ada4fe460622a6801a2b3908c61a37f65" refkind="member"><highlight class="normal">map&lt;CInv,<sp/>int64_t&gt;<sp/><ref refid="net_8cpp_1a1791b4ef08160ee954e7a711a0587172" kindref="member">mapAlreadyAskedFor</ref>;</highlight></codeline>
<codeline lineno="74"><highlight class="normal"></highlight></codeline>
<codeline lineno="75"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>deque&lt;string&gt;<sp/>vOneShots;</highlight></codeline>
<codeline lineno="76" refid="net_8cpp_1a0600e532fa61e857559ac0327d5a5324" refkind="member"><highlight class="normal"><ref refid="class_annotated_mixin" kindref="compound">CCriticalSection</ref><sp/><ref refid="net_8cpp_1a0600e532fa61e857559ac0327d5a5324" kindref="member">cs_vOneShots</ref>;</highlight></codeline>
<codeline lineno="77"><highlight class="normal"></highlight></codeline>
<codeline lineno="78" refid="net_8cpp_1adfc6e2c8b106da3807ca34d27577b37e" refkind="member"><highlight class="normal">set&lt;CNetAddr&gt;<sp/><ref refid="net_8cpp_1adfc6e2c8b106da3807ca34d27577b37e" kindref="member">setservAddNodeAddresses</ref>;</highlight></codeline>
<codeline lineno="79" refid="net_8cpp_1a670309f2c43b90009fc727bf9ed3be37" refkind="member"><highlight class="normal"><ref refid="class_annotated_mixin" kindref="compound">CCriticalSection</ref><sp/><ref refid="net_8cpp_1a670309f2c43b90009fc727bf9ed3be37" kindref="member">cs_setservAddNodeAddresses</ref>;</highlight></codeline>
<codeline lineno="80"><highlight class="normal"></highlight></codeline>
<codeline lineno="81" refid="net_8h_1a0a88eee5b0af847bad83a05b19c33262" refkind="member"><highlight class="normal">vector&lt;std::string&gt;<sp/><ref refid="net_8cpp_1aea576e413065756784b47d68d5051f72" kindref="member">vAddedNodes</ref>;</highlight></codeline>
<codeline lineno="82" refid="net_8h_1a899fdfda20966914780d1937d7ab47a3" refkind="member"><highlight class="normal"><ref refid="class_annotated_mixin" kindref="compound">CCriticalSection</ref><sp/><ref refid="net_8cpp_1a899fdfda20966914780d1937d7ab47a3" kindref="member">cs_vAddedNodes</ref>;</highlight></codeline>
<codeline lineno="83"><highlight class="normal"></highlight></codeline>
<codeline lineno="84" refid="net_8h_1a5232bdb878735fcc15a65c964f29f2b7" refkind="member"><highlight class="normal"><ref refid="net_8h_1a954d746a58632565552615fd0a4ee660" kindref="member">NodeId</ref><sp/><ref refid="net_8cpp_1a5232bdb878735fcc15a65c964f29f2b7" kindref="member">nLastNodeId</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="85" refid="net_8h_1a96f4c71f3c36f02b7edbdf04117e0e8c" refkind="member"><highlight class="normal"><ref refid="class_annotated_mixin" kindref="compound">CCriticalSection</ref><sp/><ref refid="net_8cpp_1a96f4c71f3c36f02b7edbdf04117e0e8c" kindref="member">cs_nLastNodeId</ref>;</highlight></codeline>
<codeline lineno="86"><highlight class="normal"></highlight></codeline>
<codeline lineno="87"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="class_c_semaphore" kindref="compound">CSemaphore</ref><sp/>*semOutbound<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="88"><highlight class="normal"></highlight></codeline>
<codeline lineno="89"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Signals<sp/>for<sp/>message<sp/>handling</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="90"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="struct_c_node_signals" kindref="compound">CNodeSignals</ref><sp/>n_signals;</highlight></codeline>
<codeline lineno="91" refid="net_8h_1a475f2fc7d8f5cd7511db253cae8fe28a" refkind="member"><highlight class="normal"><ref refid="struct_c_node_signals" kindref="compound">CNodeSignals</ref>&amp;<sp/><ref refid="net_8cpp_1a475f2fc7d8f5cd7511db253cae8fe28a" kindref="member">GetNodeSignals</ref>()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>n_signals;<sp/>}</highlight></codeline>
<codeline lineno="92"><highlight class="normal"></highlight></codeline>
<codeline lineno="93" refid="net_8cpp_1a5230a9dcbf8f7663e386b358f8d2fdc8" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="net_8cpp_1a5230a9dcbf8f7663e386b358f8d2fdc8" kindref="member">AddOneShot</ref>(</highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>strDest)</highlight></codeline>
<codeline lineno="94"><highlight class="normal">{</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="sync_8h_1a911fe23f057c2fe5aad629162d6c99d0" kindref="member">LOCK</ref>(cs_vOneShots);</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/>vOneShots.push_back(strDest);</highlight></codeline>
<codeline lineno="97"><highlight class="normal">}</highlight></codeline>
<codeline lineno="98"><highlight class="normal"></highlight></codeline>
<codeline lineno="99" refid="net_8h_1af6d341a24d761a509fca026458cf2f72" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">short</highlight><highlight class="normal"><sp/><ref refid="net_8cpp_1af6d341a24d761a509fca026458cf2f72" kindref="member">GetListenPort</ref>()</highlight></codeline>
<codeline lineno="100"><highlight class="normal">{</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">short</highlight><highlight class="normal">)(<ref refid="util_8cpp_1a24f685720bf40370e5bd2a192ad50cd8" kindref="member">GetArg</ref>(</highlight><highlight class="stringliteral">&quot;-port&quot;</highlight><highlight class="normal">,<sp/><ref refid="chainparams_8cpp_1ace5c5b706d71a324a417dd2db394fd4a" kindref="member">Params</ref>().GetDefaultPort()));</highlight></codeline>
<codeline lineno="102"><highlight class="normal">}</highlight></codeline>
<codeline lineno="103"><highlight class="normal"></highlight></codeline>
<codeline lineno="104"><highlight class="normal"></highlight><highlight class="comment">//<sp/>find<sp/>&apos;best&apos;<sp/>local<sp/>address<sp/>for<sp/>a<sp/>particular<sp/>peer</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="105" refid="net_8h_1ac18517ca5500f0d8e1550ffd4ac56b77" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="net_8cpp_1a51605827c953a7843f9b165eada26857" kindref="member">GetLocal</ref>(<ref refid="class_c_service" kindref="compound">CService</ref>&amp;<sp/>addr,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_c_net_addr" kindref="compound">CNetAddr</ref><sp/>*paddrPeer)</highlight></codeline>
<codeline lineno="106"><highlight class="normal">{</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="util_8cpp_1a53f30a9fc322fa65a5c4e3732e4ad410" kindref="member">fNoListen</ref>)</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="109"><highlight class="normal"></highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nBestScore<sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nBestReachability<sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="sync_8h_1a911fe23f057c2fe5aad629162d6c99d0" kindref="member">LOCK</ref>(cs_mapLocalHost);</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(map&lt;CNetAddr,<sp/>LocalServiceInfo&gt;::iterator<sp/>it<sp/>=<sp/><ref refid="net_8cpp_1ac585e737c081ba921335070264a93a79" kindref="member">mapLocalHost</ref>.begin();<sp/>it<sp/>!=<sp/><ref refid="net_8cpp_1ac585e737c081ba921335070264a93a79" kindref="member">mapLocalHost</ref>.end();<sp/>it++)</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nScore<sp/>=<sp/>(*it).second.nScore;</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nReachability<sp/>=<sp/>(*it).first.GetReachabilityFrom(paddrPeer);</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(nReachability<sp/>&gt;<sp/>nBestReachability<sp/>||<sp/>(nReachability<sp/>==<sp/>nBestReachability<sp/>&amp;&amp;<sp/>nScore<sp/>&gt;<sp/>nBestScore))</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>addr<sp/>=<sp/><ref refid="class_c_service" kindref="compound">CService</ref>((*it).first,<sp/>(*it).second.nPort);</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nBestReachability<sp/>=<sp/>nReachability;</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nBestScore<sp/>=<sp/>nScore;</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>nBestScore<sp/>&gt;=<sp/>0;</highlight></codeline>
<codeline lineno="127"><highlight class="normal">}</highlight></codeline>
<codeline lineno="128"><highlight class="normal"></highlight></codeline>
<codeline lineno="129"><highlight class="normal"></highlight><highlight class="comment">//<sp/>get<sp/>best<sp/>local<sp/>address<sp/>for<sp/>a<sp/>particular<sp/>peer<sp/>as<sp/>a<sp/>CAddress</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="130"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Otherwise,<sp/>return<sp/>the<sp/>unroutable<sp/>0.0.0.0<sp/>but<sp/>filled<sp/>in<sp/>with</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="131"><highlight class="normal"></highlight><highlight class="comment">//<sp/>the<sp/>normal<sp/>parameters,<sp/>since<sp/>the<sp/>IP<sp/>may<sp/>be<sp/>changed<sp/>to<sp/>a<sp/>useful</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="132"><highlight class="normal"></highlight><highlight class="comment">//<sp/>one<sp/>by<sp/>discovery.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="133" refid="net_8h_1af0cb3bbd4d42cac8723e22004ffb43af" refkind="member"><highlight class="normal"><ref refid="class_c_address" kindref="compound">CAddress</ref><sp/><ref refid="net_8cpp_1a66f5f0bc1dad5cfe429157d5637a93dc" kindref="member">GetLocalAddress</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_c_net_addr" kindref="compound">CNetAddr</ref><sp/>*paddrPeer)</highlight></codeline>
<codeline lineno="134"><highlight class="normal">{</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_c_address" kindref="compound">CAddress</ref><sp/>ret(<ref refid="class_c_service" kindref="compound">CService</ref>(</highlight><highlight class="stringliteral">&quot;0.0.0.0&quot;</highlight><highlight class="normal">,<ref refid="net_8cpp_1af6d341a24d761a509fca026458cf2f72" kindref="member">GetListenPort</ref>()),0);</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_c_service" kindref="compound">CService</ref><sp/>addr;</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="net_8cpp_1a51605827c953a7843f9b165eada26857" kindref="member">GetLocal</ref>(addr,<sp/>paddrPeer))</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ret<sp/>=<sp/><ref refid="class_c_address" kindref="compound">CAddress</ref>(addr);</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/>ret.<ref refid="class_c_address_1a6a4a6aa020d0d558f238c7d04dd986c3" kindref="member">nServices</ref><sp/>=<sp/><ref refid="net_8cpp_1aac7a5df09042b8fc16272947ca022c2c" kindref="member">nLocalServices</ref>;</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/>ret.<ref refid="class_c_address_1ac1c44aac968b11f90ce529b133ae4e9b" kindref="member">nTime</ref><sp/>=<sp/><ref refid="timedata_8cpp_1a09f81b9c7650f898cf3cf305b87547e6" kindref="member">GetAdjustedTime</ref>();</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ret;</highlight></codeline>
<codeline lineno="144"><highlight class="normal">}</highlight></codeline>
<codeline lineno="145"><highlight class="normal"></highlight></codeline>
<codeline lineno="146" refid="net_8cpp_1a1974b789f25e8ac412052f627488e0ad" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="net_8cpp_1a1974b789f25e8ac412052f627488e0ad" kindref="member">RecvLine</ref>(<ref refid="compat_8h_1a26ef1173e2f2c0d3db27eca28397d723" kindref="member">SOCKET</ref><sp/>hSocket,<sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal">&amp;<sp/>strLine)</highlight></codeline>
<codeline lineno="147"><highlight class="normal">{</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/>strLine<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">true</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>c;</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nBytes<sp/>=<sp/>recv(hSocket,<sp/>&amp;c,<sp/>1,<sp/>0);</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(nBytes<sp/>&gt;<sp/>0)</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(c<sp/>==<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(c<sp/>==<sp/></highlight><highlight class="charliteral">&apos;\r&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>strLine<sp/>+=<sp/>c;</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(strLine.size()<sp/>&gt;=<sp/>9000)</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(nBytes<sp/>&lt;=<sp/>0)</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>boost::this_thread::interruption_point();</highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(nBytes<sp/>&lt;<sp/>0)</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nErr<sp/>=<sp/><ref refid="compat_8h_1a6d24fe3ab2906c21c373505ca244f90b" kindref="member">WSAGetLastError</ref>();</highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(nErr<sp/>==<sp/><ref refid="compat_8h_1a7ce1c171e08d68442124bf6189f8aec5" kindref="member">WSAEMSGSIZE</ref>)</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(nErr<sp/>==<sp/><ref refid="compat_8h_1a4ba23242bee4784b72a0a170e2f975a0" kindref="member">WSAEWOULDBLOCK</ref><sp/>||<sp/>nErr<sp/>==<sp/><ref refid="compat_8h_1aef81890a7d46cb9dda85df9b96cba6b1" kindref="member">WSAEINTR</ref><sp/>||<sp/>nErr<sp/>==<sp/><ref refid="compat_8h_1ada8711ffab59910a2732cfa4b7c24e29" kindref="member">WSAEINPROGRESS</ref>)</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="util_8h_1ac635182d3e845eda4af4fa5ab31609da" kindref="member">MilliSleep</ref>(10);</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!strLine.empty())</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(nBytes<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>socket<sp/>closed</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>LogPrint(</highlight><highlight class="stringliteral">&quot;net&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;socket<sp/>closed\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>socket<sp/>error</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nErr<sp/>=<sp/><ref refid="compat_8h_1a6d24fe3ab2906c21c373505ca244f90b" kindref="member">WSAGetLastError</ref>();</highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>LogPrint(</highlight><highlight class="stringliteral">&quot;net&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;recv<sp/>failed:<sp/>%s\n&quot;</highlight><highlight class="normal">,<sp/>nErr);</highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="194"><highlight class="normal">}</highlight></codeline>
<codeline lineno="195"><highlight class="normal"></highlight></codeline>
<codeline lineno="196" refid="net_8h_1a43efd96d0433d8a19fb210e77cc4c3ae" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="net_8cpp_1a4f89efc38cf3b6bbb552ba9624bddfaf" kindref="member">RelayInv</ref>(<ref refid="class_c_inv" kindref="compound">CInv</ref><sp/>&amp;inv,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>minProtoVersion)</highlight></codeline>
<codeline lineno="197"><highlight class="normal">{</highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="sync_8h_1a911fe23f057c2fe5aad629162d6c99d0" kindref="member">LOCK</ref>(cs_vNodes);</highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/><sp/><sp/>BOOST_FOREACH(<ref refid="class_c_node" kindref="compound">CNode</ref>*<sp/>pnode,<sp/><ref refid="net_8cpp_1aa5a11f8873e230cea77bc7e91ee51918" kindref="member">vNodes</ref>)</highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(pnode-&gt;<ref refid="class_c_node_1a99173eb3cef17e699ba21a5249ac33d2" kindref="member">nVersion</ref><sp/>&gt;=<sp/>minProtoVersion)</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pnode-&gt;<ref refid="class_c_node_1a7cef2333aa8776127a7e7fcab659eb6a" kindref="member">PushInventory</ref>(inv);</highlight></codeline>
<codeline lineno="202"><highlight class="normal">}</highlight></codeline>
<codeline lineno="203"><highlight class="normal"></highlight></codeline>
<codeline lineno="204" refid="net_8cpp_1afa6b10687ddaa84fa7ba65b83ad1f069" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="net_8cpp_1afa6b10687ddaa84fa7ba65b83ad1f069" kindref="member">GetnScore</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_c_service" kindref="compound">CService</ref>&amp;<sp/>addr)</highlight></codeline>
<codeline lineno="205"><highlight class="normal">{</highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="sync_8h_1a911fe23f057c2fe5aad629162d6c99d0" kindref="member">LOCK</ref>(cs_mapLocalHost);</highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="net_8cpp_1ac585e737c081ba921335070264a93a79" kindref="member">mapLocalHost</ref>.count(addr)<sp/>==<sp/><ref refid="net_8h_1a385c44f6fb256e5716a2302a5b940388a1d33b76bcbc0dbb757cc02bb2259775b" kindref="member">LOCAL_NONE</ref>)</highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="net_8cpp_1ac585e737c081ba921335070264a93a79" kindref="member">mapLocalHost</ref>[addr].nScore;</highlight></codeline>
<codeline lineno="210"><highlight class="normal">}</highlight></codeline>
<codeline lineno="211"><highlight class="normal"></highlight></codeline>
<codeline lineno="212"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Is<sp/>our<sp/>peer&apos;s<sp/>addrLocal<sp/>potentially<sp/>useful<sp/>as<sp/>an<sp/>external<sp/>IP<sp/>source?</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="213" refid="net_8h_1a058b75c6fcc94a0643184c237ad6de93" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="net_8cpp_1a058b75c6fcc94a0643184c237ad6de93" kindref="member">IsPeerAddrLocalGood</ref>(<ref refid="class_c_node" kindref="compound">CNode</ref><sp/>*pnode)</highlight></codeline>
<codeline lineno="214"><highlight class="normal">{</highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="net_8cpp_1a37089835ec27ad8bf945a458708165b9" kindref="member">fDiscover</ref><sp/>&amp;&amp;<sp/>pnode-&gt;<ref refid="class_c_node_1a3993ecb1de2a2135a3cf0904346a6f88" kindref="member">addr</ref>.<ref refid="class_c_net_addr_1a35131b2792434d1c9a860c583b610ab6" kindref="member">IsRoutable</ref>()<sp/>&amp;&amp;<sp/>pnode-&gt;<ref refid="class_c_node_1a1b6517682efa0709f44780a95384c4ec" kindref="member">addrLocal</ref>.<ref refid="class_c_net_addr_1a35131b2792434d1c9a860c583b610ab6" kindref="member">IsRoutable</ref>()<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>!<ref refid="net_8cpp_1a96eb2fba6d80870802ac787b6ada4beb" kindref="member">IsLimited</ref>(pnode-&gt;<ref refid="class_c_node_1a1b6517682efa0709f44780a95384c4ec" kindref="member">addrLocal</ref>.<ref refid="class_c_net_addr_1a34a4760424f5c51998fc3baf82ccb5c8" kindref="member">GetNetwork</ref>());</highlight></codeline>
<codeline lineno="217"><highlight class="normal">}</highlight></codeline>
<codeline lineno="218"><highlight class="normal"></highlight></codeline>
<codeline lineno="219"><highlight class="normal"></highlight><highlight class="comment">//<sp/>used<sp/>when<sp/>scores<sp/>of<sp/>local<sp/>addresses<sp/>may<sp/>have<sp/>changed</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="220"><highlight class="normal"></highlight><highlight class="comment">//<sp/>pushes<sp/>better<sp/>local<sp/>address<sp/>to<sp/>peers</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="221"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>AdvertizeLocal()</highlight></codeline>
<codeline lineno="222"><highlight class="normal">{</highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="sync_8h_1a911fe23f057c2fe5aad629162d6c99d0" kindref="member">LOCK</ref>(cs_vNodes);</highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/><sp/><sp/>BOOST_FOREACH(<ref refid="class_c_node" kindref="compound">CNode</ref>*<sp/>pnode,<sp/><ref refid="net_8cpp_1aa5a11f8873e230cea77bc7e91ee51918" kindref="member">vNodes</ref>)</highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(pnode-&gt;<ref refid="class_c_node_1ab58c1772b2698e348d86002f34254119" kindref="member">fSuccessfullyConnected</ref>)</highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_c_address" kindref="compound">CAddress</ref><sp/>addrLocal<sp/>=<sp/><ref refid="net_8cpp_1a66f5f0bc1dad5cfe429157d5637a93dc" kindref="member">GetLocalAddress</ref>(&amp;pnode-&gt;<ref refid="class_c_node_1a3993ecb1de2a2135a3cf0904346a6f88" kindref="member">addr</ref>);</highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(addrLocal.<ref refid="class_c_net_addr_1a35131b2792434d1c9a860c583b610ab6" kindref="member">IsRoutable</ref>()<sp/>&amp;&amp;<sp/>(<ref refid="class_c_service" kindref="compound">CService</ref>)addrLocal<sp/>!=<sp/>(<ref refid="class_c_service" kindref="compound">CService</ref>)pnode-&gt;<ref refid="class_c_node_1a1b6517682efa0709f44780a95384c4ec" kindref="member">addrLocal</ref>)</highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pnode-&gt;<ref refid="class_c_node_1a06950a5ce265a1d4df1aad7f28e6fde8" kindref="member">PushAddress</ref>(addrLocal);</highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pnode-&gt;<ref refid="class_c_node_1a1b6517682efa0709f44780a95384c4ec" kindref="member">addrLocal</ref><sp/>=<sp/>addrLocal;</highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="236"><highlight class="normal">}</highlight></codeline>
<codeline lineno="237"><highlight class="normal"></highlight></codeline>
<codeline lineno="238" refid="net_8h_1a8236a89316936f3aa0628eae85688d8f" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="net_8cpp_1a89098b55df7d627a7a3c7f367cae24e6" kindref="member">SetReachable</ref>(</highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/><ref refid="netbase_8h_1acc9a38c714afe79b5035cb36f560dac3" kindref="member">Network</ref><sp/>net,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>fFlag)</highlight></codeline>
<codeline lineno="239"><highlight class="normal">{</highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="sync_8h_1a911fe23f057c2fe5aad629162d6c99d0" kindref="member">LOCK</ref>(cs_mapLocalHost);</highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/><sp/><sp/>vfReachable[net]<sp/>=<sp/>fFlag;</highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(net<sp/>==<sp/><ref refid="netbase_8h_1acc9a38c714afe79b5035cb36f560dac3a9a9d9355a4923b33382f9894ba80688d" kindref="member">NET_IPV6</ref><sp/>&amp;&amp;<sp/>fFlag)</highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vfReachable[<ref refid="netbase_8h_1acc9a38c714afe79b5035cb36f560dac3ae1598b317168b96919bc3131ee149ebb" kindref="member">NET_IPV4</ref>]<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="244"><highlight class="normal">}</highlight></codeline>
<codeline lineno="245"><highlight class="normal"></highlight></codeline>
<codeline lineno="246"><highlight class="normal"></highlight><highlight class="comment">//<sp/>learn<sp/>a<sp/>new<sp/>local<sp/>address</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="247" refid="net_8h_1a337d6af198a6b0d75f830e56da9b91e9" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="net_8cpp_1abb92a02eecc581e8927c8a6e31968645" kindref="member">AddLocal</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_c_service" kindref="compound">CService</ref>&amp;<sp/>addr,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nScore)</highlight></codeline>
<codeline lineno="248"><highlight class="normal">{</highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!addr.<ref refid="class_c_net_addr_1a35131b2792434d1c9a860c583b610ab6" kindref="member">IsRoutable</ref>())</highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="251"><highlight class="normal"></highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="net_8cpp_1a37089835ec27ad8bf945a458708165b9" kindref="member">fDiscover</ref><sp/>&amp;&amp;<sp/>nScore<sp/>&lt;<sp/><ref refid="net_8h_1a385c44f6fb256e5716a2302a5b940388a85f937846a9820dce1ac928efee52a91" kindref="member">LOCAL_MANUAL</ref>)</highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="254"><highlight class="normal"></highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="net_8cpp_1a96eb2fba6d80870802ac787b6ada4beb" kindref="member">IsLimited</ref>(addr))</highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="257"><highlight class="normal"></highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="util_8h_1afc02c0a4258fedfb316be612bb659ba8" kindref="member">LogPrintf</ref>(</highlight><highlight class="stringliteral">&quot;AddLocal(%s,%i)\n&quot;</highlight><highlight class="normal">,<sp/>addr.<ref refid="class_c_service_1a336f9848fe9364e260c76499be0351a5" kindref="member">ToString</ref>(),<sp/>nScore);</highlight></codeline>
<codeline lineno="259"><highlight class="normal"></highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="sync_8h_1a911fe23f057c2fe5aad629162d6c99d0" kindref="member">LOCK</ref>(cs_mapLocalHost);</highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>fAlready<sp/>=<sp/><ref refid="net_8cpp_1ac585e737c081ba921335070264a93a79" kindref="member">mapLocalHost</ref>.count(addr)<sp/>&gt;<sp/>0;</highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_local_service_info" kindref="compound">LocalServiceInfo</ref><sp/>&amp;info<sp/>=<sp/><ref refid="net_8cpp_1ac585e737c081ba921335070264a93a79" kindref="member">mapLocalHost</ref>[addr];</highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!fAlready<sp/>||<sp/>nScore<sp/>&gt;=<sp/>info.<ref refid="struct_local_service_info_1ad6a9d404fb109ba1506df3f6ca842ed5" kindref="member">nScore</ref>)<sp/>{</highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>info.<ref refid="struct_local_service_info_1ad6a9d404fb109ba1506df3f6ca842ed5" kindref="member">nScore</ref><sp/>=<sp/>nScore<sp/>+<sp/>(fAlready<sp/>?<sp/>1<sp/>:<sp/>0);</highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>info.<ref refid="struct_local_service_info_1aa5c39fec8cc69a43e393bb158f69224b" kindref="member">nPort</ref><sp/>=<sp/>addr.<ref refid="class_c_service_1a49df6ecaf59be814632c4d7755f26637" kindref="member">GetPort</ref>();</highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="net_8cpp_1a89098b55df7d627a7a3c7f367cae24e6" kindref="member">SetReachable</ref>(addr.<ref refid="class_c_net_addr_1a34a4760424f5c51998fc3baf82ccb5c8" kindref="member">GetNetwork</ref>());</highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="270"><highlight class="normal"></highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/><sp/><sp/>AdvertizeLocal();</highlight></codeline>
<codeline lineno="272"><highlight class="normal"></highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="274"><highlight class="normal">}</highlight></codeline>
<codeline lineno="275"><highlight class="normal"></highlight></codeline>
<codeline lineno="276" refid="net_8h_1abda4e8f87772f9a9d9d8f52a93791ffc" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="net_8cpp_1abb92a02eecc581e8927c8a6e31968645" kindref="member">AddLocal</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_c_net_addr" kindref="compound">CNetAddr</ref><sp/>&amp;addr,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nScore)</highlight></codeline>
<codeline lineno="277"><highlight class="normal">{</highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="net_8cpp_1abb92a02eecc581e8927c8a6e31968645" kindref="member">AddLocal</ref>(<ref refid="class_c_service" kindref="compound">CService</ref>(addr,<sp/><ref refid="net_8cpp_1af6d341a24d761a509fca026458cf2f72" kindref="member">GetListenPort</ref>()),<sp/>nScore);</highlight></codeline>
<codeline lineno="279"><highlight class="normal">}</highlight></codeline>
<codeline lineno="280"><highlight class="normal"></highlight></codeline>
<codeline lineno="282" refid="net_8h_1ae2dce03e604687e4029cdd759eba1ee0" refkind="member"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="net_8cpp_1a2f6d62a9d456bf38003df3815b707f46" kindref="member">SetLimited</ref>(</highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/><ref refid="netbase_8h_1acc9a38c714afe79b5035cb36f560dac3" kindref="member">Network</ref><sp/>net,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>fLimited)</highlight></codeline>
<codeline lineno="283"><highlight class="normal">{</highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(net<sp/>==<sp/><ref refid="netbase_8h_1acc9a38c714afe79b5035cb36f560dac3af66f60a80e2a5d99813c3f322cf8a6e1" kindref="member">NET_UNROUTABLE</ref>)</highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="sync_8h_1a911fe23f057c2fe5aad629162d6c99d0" kindref="member">LOCK</ref>(cs_mapLocalHost);</highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/><sp/><sp/>vfLimited[net]<sp/>=<sp/>fLimited;</highlight></codeline>
<codeline lineno="288"><highlight class="normal">}</highlight></codeline>
<codeline lineno="289"><highlight class="normal"></highlight></codeline>
<codeline lineno="290" refid="net_8h_1a96eb2fba6d80870802ac787b6ada4beb" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="net_8cpp_1a96eb2fba6d80870802ac787b6ada4beb" kindref="member">IsLimited</ref>(</highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/><ref refid="netbase_8h_1acc9a38c714afe79b5035cb36f560dac3" kindref="member">Network</ref><sp/>net)</highlight></codeline>
<codeline lineno="291"><highlight class="normal">{</highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="sync_8h_1a911fe23f057c2fe5aad629162d6c99d0" kindref="member">LOCK</ref>(cs_mapLocalHost);</highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>vfLimited[net];</highlight></codeline>
<codeline lineno="294"><highlight class="normal">}</highlight></codeline>
<codeline lineno="295"><highlight class="normal"></highlight></codeline>
<codeline lineno="296" refid="net_8h_1a7f5f5a0bf934e49c7137ee4aa6eb8732" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="net_8cpp_1a96eb2fba6d80870802ac787b6ada4beb" kindref="member">IsLimited</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_c_net_addr" kindref="compound">CNetAddr</ref><sp/>&amp;addr)</highlight></codeline>
<codeline lineno="297"><highlight class="normal">{</highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="net_8cpp_1a96eb2fba6d80870802ac787b6ada4beb" kindref="member">IsLimited</ref>(addr.<ref refid="class_c_net_addr_1a34a4760424f5c51998fc3baf82ccb5c8" kindref="member">GetNetwork</ref>());</highlight></codeline>
<codeline lineno="299"><highlight class="normal">}</highlight></codeline>
<codeline lineno="300"><highlight class="normal"></highlight></codeline>
<codeline lineno="302" refid="net_8h_1af7487aacfc9d708b3db40c255ec070a8" refkind="member"><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="net_8cpp_1af7487aacfc9d708b3db40c255ec070a8" kindref="member">SeenLocal</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_c_service" kindref="compound">CService</ref>&amp;<sp/>addr)</highlight></codeline>
<codeline lineno="303"><highlight class="normal">{</highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="305"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="sync_8h_1a911fe23f057c2fe5aad629162d6c99d0" kindref="member">LOCK</ref>(cs_mapLocalHost);</highlight></codeline>
<codeline lineno="306"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="net_8cpp_1ac585e737c081ba921335070264a93a79" kindref="member">mapLocalHost</ref>.count(addr)<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="308"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="net_8cpp_1ac585e737c081ba921335070264a93a79" kindref="member">mapLocalHost</ref>[addr].nScore++;</highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="310"><highlight class="normal"></highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/><sp/><sp/>AdvertizeLocal();</highlight></codeline>
<codeline lineno="312"><highlight class="normal"></highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="314"><highlight class="normal">}</highlight></codeline>
<codeline lineno="315"><highlight class="normal"></highlight></codeline>
<codeline lineno="317" refid="net_8h_1a16fa1bd4d34c4c29c90903fc3cdf7517" refkind="member"><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="net_8cpp_1a16fa1bd4d34c4c29c90903fc3cdf7517" kindref="member">IsLocal</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_c_service" kindref="compound">CService</ref>&amp;<sp/>addr)</highlight></codeline>
<codeline lineno="318"><highlight class="normal">{</highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="sync_8h_1a911fe23f057c2fe5aad629162d6c99d0" kindref="member">LOCK</ref>(cs_mapLocalHost);</highlight></codeline>
<codeline lineno="320"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="net_8cpp_1ac585e737c081ba921335070264a93a79" kindref="member">mapLocalHost</ref>.count(addr)<sp/>&gt;<sp/>0;</highlight></codeline>
<codeline lineno="321"><highlight class="normal">}</highlight></codeline>
<codeline lineno="322"><highlight class="normal"></highlight></codeline>
<codeline lineno="324" refid="net_8h_1af6de8e47b01a96206402ddef734114f2" refkind="member"><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="net_8cpp_1af6de8e47b01a96206402ddef734114f2" kindref="member">IsReachable</ref>(</highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/><ref refid="netbase_8h_1acc9a38c714afe79b5035cb36f560dac3" kindref="member">Network</ref><sp/>net)</highlight></codeline>
<codeline lineno="325"><highlight class="normal">{</highlight></codeline>
<codeline lineno="326"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="sync_8h_1a911fe23f057c2fe5aad629162d6c99d0" kindref="member">LOCK</ref>(cs_mapLocalHost);</highlight></codeline>
<codeline lineno="327"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>vfReachable[net]<sp/>&amp;&amp;<sp/>!vfLimited[net];</highlight></codeline>
<codeline lineno="328"><highlight class="normal">}</highlight></codeline>
<codeline lineno="329"><highlight class="normal"></highlight></codeline>
<codeline lineno="331" refid="net_8h_1a0eb7db987ad1a1bf139d0cd46873ed29" refkind="member"><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="net_8cpp_1af6de8e47b01a96206402ddef734114f2" kindref="member">IsReachable</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_c_net_addr" kindref="compound">CNetAddr</ref>&amp;<sp/>addr)</highlight></codeline>
<codeline lineno="332"><highlight class="normal">{</highlight></codeline>
<codeline lineno="333"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/><ref refid="netbase_8h_1acc9a38c714afe79b5035cb36f560dac3" kindref="member">Network</ref><sp/>net<sp/>=<sp/>addr.<ref refid="class_c_net_addr_1a34a4760424f5c51998fc3baf82ccb5c8" kindref="member">GetNetwork</ref>();</highlight></codeline>
<codeline lineno="334"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="net_8cpp_1af6de8e47b01a96206402ddef734114f2" kindref="member">IsReachable</ref>(net);</highlight></codeline>
<codeline lineno="335"><highlight class="normal">}</highlight></codeline>
<codeline lineno="336"><highlight class="normal"></highlight></codeline>
<codeline lineno="337" refid="net_8h_1ad4aabaa937cd6f4b708c47dbbdb8ea60" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="net_8cpp_1ad4aabaa937cd6f4b708c47dbbdb8ea60" kindref="member">AddressCurrentlyConnected</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_c_service" kindref="compound">CService</ref>&amp;<sp/>addr)</highlight></codeline>
<codeline lineno="338"><highlight class="normal">{</highlight></codeline>
<codeline lineno="339"><highlight class="normal"><sp/><sp/><sp/><sp/>addrman.<ref refid="class_c_addr_man_1a7aba66d9e9527522fed974567d34c322" kindref="member">Connected</ref>(addr);</highlight></codeline>
<codeline lineno="340"><highlight class="normal">}</highlight></codeline>
<codeline lineno="341"><highlight class="normal"></highlight></codeline>
<codeline lineno="342"><highlight class="normal"><ref refid="stdint_8h_1aaa5d1cd013383c889537491c3cfd9aad" kindref="member">uint64_t</ref><sp/>CNode::nTotalBytesRecv<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="343"><highlight class="normal"><ref refid="stdint_8h_1aaa5d1cd013383c889537491c3cfd9aad" kindref="member">uint64_t</ref><sp/>CNode::nTotalBytesSent<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="344"><highlight class="normal"><ref refid="class_annotated_mixin" kindref="compound">CCriticalSection</ref><sp/>CNode::cs_totalBytesRecv;</highlight></codeline>
<codeline lineno="345"><highlight class="normal"><ref refid="class_annotated_mixin" kindref="compound">CCriticalSection</ref><sp/>CNode::cs_totalBytesSent;</highlight></codeline>
<codeline lineno="346"><highlight class="normal"></highlight></codeline>
<codeline lineno="347" refid="net_8h_1a66a7371d8e724cac0b4495169cdf2859" refkind="member"><highlight class="normal"><ref refid="class_c_node" kindref="compound">CNode</ref>*<sp/><ref refid="net_8cpp_1a66a7371d8e724cac0b4495169cdf2859" kindref="member">FindNode</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_c_net_addr" kindref="compound">CNetAddr</ref>&amp;<sp/>ip)</highlight></codeline>
<codeline lineno="348"><highlight class="normal">{</highlight></codeline>
<codeline lineno="349"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="350"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="sync_8h_1a911fe23f057c2fe5aad629162d6c99d0" kindref="member">LOCK</ref>(cs_vNodes);</highlight></codeline>
<codeline lineno="351"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>BOOST_FOREACH(<ref refid="class_c_node" kindref="compound">CNode</ref>*<sp/>pnode,<sp/><ref refid="net_8cpp_1aa5a11f8873e230cea77bc7e91ee51918" kindref="member">vNodes</ref>)</highlight></codeline>
<codeline lineno="352"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((<ref refid="class_c_net_addr" kindref="compound">CNetAddr</ref>)pnode-&gt;<ref refid="class_c_node_1a3993ecb1de2a2135a3cf0904346a6f88" kindref="member">addr</ref><sp/>==<sp/>ip)</highlight></codeline>
<codeline lineno="353"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(pnode);</highlight></codeline>
<codeline lineno="354"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="355"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="356"><highlight class="normal">}</highlight></codeline>
<codeline lineno="357"><highlight class="normal"></highlight></codeline>
<codeline lineno="358" refid="net_8h_1abebbeb89006ec148ba3c184e123170c5" refkind="member"><highlight class="normal"><ref refid="class_c_node" kindref="compound">CNode</ref>*<sp/><ref refid="net_8cpp_1a66a7371d8e724cac0b4495169cdf2859" kindref="member">FindNode</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>addrName)</highlight></codeline>
<codeline lineno="359"><highlight class="normal">{</highlight></codeline>
<codeline lineno="360"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="sync_8h_1a911fe23f057c2fe5aad629162d6c99d0" kindref="member">LOCK</ref>(cs_vNodes);</highlight></codeline>
<codeline lineno="361"><highlight class="normal"><sp/><sp/><sp/><sp/>BOOST_FOREACH(<ref refid="class_c_node" kindref="compound">CNode</ref>*<sp/>pnode,<sp/><ref refid="net_8cpp_1aa5a11f8873e230cea77bc7e91ee51918" kindref="member">vNodes</ref>)</highlight></codeline>
<codeline lineno="362"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(pnode-&gt;<ref refid="class_c_node_1a3155cd313d85ec3ff691f8259a5f5345" kindref="member">addrName</ref><sp/>==<sp/>addrName)</highlight></codeline>
<codeline lineno="363"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(pnode);</highlight></codeline>
<codeline lineno="364"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="365"><highlight class="normal">}</highlight></codeline>
<codeline lineno="366"><highlight class="normal"></highlight></codeline>
<codeline lineno="367" refid="net_8h_1aa248341a7aea1a095949ea84ffd05620" refkind="member"><highlight class="normal"><ref refid="class_c_node" kindref="compound">CNode</ref>*<sp/><ref refid="net_8cpp_1a66a7371d8e724cac0b4495169cdf2859" kindref="member">FindNode</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_c_service" kindref="compound">CService</ref>&amp;<sp/>addr)</highlight></codeline>
<codeline lineno="368"><highlight class="normal">{</highlight></codeline>
<codeline lineno="369"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="370"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="sync_8h_1a911fe23f057c2fe5aad629162d6c99d0" kindref="member">LOCK</ref>(cs_vNodes);</highlight></codeline>
<codeline lineno="371"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>BOOST_FOREACH(<ref refid="class_c_node" kindref="compound">CNode</ref>*<sp/>pnode,<sp/><ref refid="net_8cpp_1aa5a11f8873e230cea77bc7e91ee51918" kindref="member">vNodes</ref>)</highlight></codeline>
<codeline lineno="372"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((<ref refid="class_c_service" kindref="compound">CService</ref>)pnode-&gt;<ref refid="class_c_node_1a3993ecb1de2a2135a3cf0904346a6f88" kindref="member">addr</ref><sp/>==<sp/>addr)</highlight></codeline>
<codeline lineno="373"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(pnode);</highlight></codeline>
<codeline lineno="374"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="375"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="376"><highlight class="normal">}</highlight></codeline>
<codeline lineno="377"><highlight class="normal"></highlight></codeline>
<codeline lineno="378" refid="net_8h_1a57ffc895ab641207e0eb30fd7e00a585" refkind="member"><highlight class="normal"><ref refid="class_c_node" kindref="compound">CNode</ref>*<sp/><ref refid="net_8cpp_1ac6e0da5071d4eaa6960dbf889c765834" kindref="member">ConnectNode</ref>(<ref refid="class_c_address" kindref="compound">CAddress</ref><sp/>addrConnect,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*pszDest,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>sandStormnode)</highlight></codeline>
<codeline lineno="379"><highlight class="normal">{</highlight></codeline>
<codeline lineno="380"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(pszDest<sp/>==<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="381"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="net_8cpp_1a16fa1bd4d34c4c29c90903fc3cdf7517" kindref="member">IsLocal</ref>(addrConnect))</highlight></codeline>
<codeline lineno="382"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="383"><highlight class="normal"></highlight></codeline>
<codeline lineno="384"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Look<sp/>for<sp/>an<sp/>existing<sp/>connection</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="385"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_c_node" kindref="compound">CNode</ref>*<sp/>pnode<sp/>=<sp/><ref refid="net_8cpp_1a66a7371d8e724cac0b4495169cdf2859" kindref="member">FindNode</ref>((<ref refid="class_c_service" kindref="compound">CService</ref>)addrConnect);</highlight></codeline>
<codeline lineno="386"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(pnode)</highlight></codeline>
<codeline lineno="387"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="388"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(sandStormnode)</highlight></codeline>
<codeline lineno="389"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pnode-&gt;<ref refid="class_c_node_1aab66b45769e6c8009d224c63704a1859" kindref="member">fSandStorm</ref><sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="390"><highlight class="normal"></highlight></codeline>
<codeline lineno="391"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pnode-&gt;<ref refid="class_c_node_1afb65ed679f7bda59aab89e0f5afae292" kindref="member">AddRef</ref>();</highlight></codeline>
<codeline lineno="392"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>pnode;</highlight></codeline>
<codeline lineno="393"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="394"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="395"><highlight class="normal"></highlight></codeline>
<codeline lineno="397"><highlight class="normal"><sp/><sp/><sp/><sp/>LogPrint(</highlight><highlight class="stringliteral">&quot;net&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;trying<sp/>connection<sp/>%s<sp/>lastseen=%.1fhrs\n&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="398"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pszDest<sp/>?<sp/>pszDest<sp/>:<sp/>addrConnect.<ref refid="class_c_service_1a336f9848fe9364e260c76499be0351a5" kindref="member">ToString</ref>(),</highlight></codeline>
<codeline lineno="399"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pszDest<sp/>?<sp/>0<sp/>:<sp/>(double)(<ref refid="timedata_8cpp_1a09f81b9c7650f898cf3cf305b87547e6" kindref="member">GetAdjustedTime</ref>()<sp/>-<sp/>addrConnect.<ref refid="class_c_address_1ac1c44aac968b11f90ce529b133ae4e9b" kindref="member">nTime</ref>)/3600.0);</highlight></codeline>
<codeline lineno="400"><highlight class="normal"></highlight></codeline>
<codeline lineno="401"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Connect</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="402"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="compat_8h_1a26ef1173e2f2c0d3db27eca28397d723" kindref="member">SOCKET</ref><sp/>hSocket;</highlight></codeline>
<codeline lineno="403"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>proxyConnectionFailed<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="404"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(pszDest<sp/>?<sp/><ref refid="netbase_8cpp_1a5da7129cf2a5f0ea9e9020e38d2bddc8" kindref="member">ConnectSocketByName</ref>(addrConnect,<sp/>hSocket,<sp/>pszDest,<sp/><ref refid="chainparams_8cpp_1ace5c5b706d71a324a417dd2db394fd4a" kindref="member">Params</ref>().GetDefaultPort(),<sp/><ref refid="netbase_8cpp_1ac8115c6e2874217f2e487b5391cbe963" kindref="member">nConnectTimeout</ref>,<sp/>&amp;proxyConnectionFailed)<sp/>:</highlight></codeline>
<codeline lineno="405"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="netbase_8cpp_1a0bbba84024b924fe188fbb49125191d5" kindref="member">ConnectSocket</ref>(addrConnect,<sp/>hSocket,<sp/><ref refid="netbase_8cpp_1ac8115c6e2874217f2e487b5391cbe963" kindref="member">nConnectTimeout</ref>,<sp/>&amp;proxyConnectionFailed))</highlight></codeline>
<codeline lineno="406"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="407"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>addrman.<ref refid="class_c_addr_man_1afcddc2573121065177dc981cea710789" kindref="member">Attempt</ref>(addrConnect);</highlight></codeline>
<codeline lineno="408"><highlight class="normal"></highlight></codeline>
<codeline lineno="409"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>LogPrint(</highlight><highlight class="stringliteral">&quot;net&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;connected<sp/>%s\n&quot;</highlight><highlight class="normal">,<sp/>pszDest<sp/>?<sp/>pszDest<sp/>:<sp/>addrConnect.<ref refid="class_c_service_1a336f9848fe9364e260c76499be0351a5" kindref="member">ToString</ref>());</highlight></codeline>
<codeline lineno="410"><highlight class="normal"></highlight></codeline>
<codeline lineno="411"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Set<sp/>to<sp/>non-blocking</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="412"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>WIN32</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="413"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>u_long<sp/>nOne<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="414"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ioctlsocket(hSocket,<sp/>FIONBIO,<sp/>&amp;nOne)<sp/>==<sp/><ref refid="compat_8h_1a633b0396ff93d336a088412a190a5072" kindref="member">SOCKET_ERROR</ref>)</highlight></codeline>
<codeline lineno="415"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="util_8h_1afc02c0a4258fedfb316be612bb659ba8" kindref="member">LogPrintf</ref>(</highlight><highlight class="stringliteral">&quot;ConnectSocket()<sp/>:<sp/>ioctlsocket<sp/>non-blocking<sp/>setting<sp/>failed,<sp/>error<sp/>%d\n&quot;</highlight><highlight class="normal">,<sp/><ref refid="compat_8h_1a6d24fe3ab2906c21c373505ca244f90b" kindref="member">WSAGetLastError</ref>());</highlight></codeline>
<codeline lineno="416"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="417"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fcntl(hSocket,<sp/>F_SETFL,<sp/>O_NONBLOCK)<sp/>==<sp/><ref refid="compat_8h_1a633b0396ff93d336a088412a190a5072" kindref="member">SOCKET_ERROR</ref>)</highlight></codeline>
<codeline lineno="418"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="util_8h_1afc02c0a4258fedfb316be612bb659ba8" kindref="member">LogPrintf</ref>(</highlight><highlight class="stringliteral">&quot;ConnectSocket()<sp/>:<sp/>fcntl<sp/>non-blocking<sp/>setting<sp/>failed,<sp/>error<sp/>%d\n&quot;</highlight><highlight class="normal">,<sp/>errno);</highlight></codeline>
<codeline lineno="419"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="420"><highlight class="normal"></highlight></codeline>
<codeline lineno="421"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Add<sp/>node</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="422"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_c_node" kindref="compound">CNode</ref>*<sp/>pnode<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_c_node" kindref="compound">CNode</ref>(hSocket,<sp/>addrConnect,<sp/>pszDest<sp/>?<sp/>pszDest<sp/>:<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="423"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pnode-&gt;<ref refid="class_c_node_1afb65ed679f7bda59aab89e0f5afae292" kindref="member">AddRef</ref>();</highlight></codeline>
<codeline lineno="424"><highlight class="normal"></highlight></codeline>
<codeline lineno="425"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="426"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="sync_8h_1a911fe23f057c2fe5aad629162d6c99d0" kindref="member">LOCK</ref>(cs_vNodes);</highlight></codeline>
<codeline lineno="427"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="net_8cpp_1aa5a11f8873e230cea77bc7e91ee51918" kindref="member">vNodes</ref>.push_back(pnode);</highlight></codeline>
<codeline lineno="428"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>USE_NATIVE_I2P</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="429"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(addrConnect.IsNativeI2P())</highlight></codeline>
<codeline lineno="430"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++nI2PNodeCount;</highlight></codeline>
<codeline lineno="431"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="432"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="433"><highlight class="normal"></highlight></codeline>
<codeline lineno="434"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pnode-&gt;<ref refid="class_c_node_1abb39393ef08cb5668ded6cb14cdbc147" kindref="member">nTimeConnected</ref><sp/>=<sp/><ref refid="util_8cpp_1a46fac5fba8ba905b5f9acb364f5d8c6f" kindref="member">GetTime</ref>();</highlight></codeline>
<codeline lineno="435"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>pnode;</highlight></codeline>
<codeline lineno="436"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!proxyConnectionFailed)<sp/>{</highlight></codeline>
<codeline lineno="437"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>connecting<sp/>to<sp/>the<sp/>node<sp/>failed,<sp/>and<sp/>failure<sp/>is<sp/>not<sp/>caused<sp/>by<sp/>a<sp/>problem<sp/>connecting<sp/>to</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="438"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>proxy,<sp/>mark<sp/>this<sp/>as<sp/>an<sp/>attempt.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="439"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>addrman.<ref refid="class_c_addr_man_1afcddc2573121065177dc981cea710789" kindref="member">Attempt</ref>(addrConnect);</highlight></codeline>
<codeline lineno="440"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="441"><highlight class="normal"></highlight></codeline>
<codeline lineno="442"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="443"><highlight class="normal">}</highlight></codeline>
<codeline lineno="444"><highlight class="normal"></highlight></codeline>
<codeline lineno="445" refid="class_c_node_1a63a6091a0b0fc0987d9436e1ec708423" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_c_node_1a63a6091a0b0fc0987d9436e1ec708423" kindref="member">CNode::CloseSocketDisconnect</ref>()</highlight></codeline>
<codeline lineno="446"><highlight class="normal">{</highlight></codeline>
<codeline lineno="447"><highlight class="normal"><sp/><sp/><sp/><sp/>fDisconnect<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="448"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(hSocket<sp/>!=<sp/><ref refid="compat_8h_1a26769957ec1a2beaf223f33b66ee64ab" kindref="member">INVALID_SOCKET</ref>)</highlight></codeline>
<codeline lineno="449"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="450"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>LogPrint(</highlight><highlight class="stringliteral">&quot;net&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;disconnecting<sp/>node<sp/>%s\n&quot;</highlight><highlight class="normal">,<sp/>addrName);</highlight></codeline>
<codeline lineno="451"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="compat_8h_1a5a3eb971b466278ada4f7f87399a537c" kindref="member">closesocket</ref>(hSocket);</highlight></codeline>
<codeline lineno="452"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>hSocket<sp/>=<sp/><ref refid="compat_8h_1a26769957ec1a2beaf223f33b66ee64ab" kindref="member">INVALID_SOCKET</ref>;</highlight></codeline>
<codeline lineno="453"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="454"><highlight class="normal"></highlight></codeline>
<codeline lineno="455"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>in<sp/>case<sp/>this<sp/>fails,<sp/>we&apos;ll<sp/>empty<sp/>the<sp/>recv<sp/>buffer<sp/>when<sp/>the<sp/>CNode<sp/>is<sp/>deleted</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="456"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="sync_8h_1aca08e7299069c2d60b8aa726fc550612" kindref="member">TRY_LOCK</ref>(cs_vRecvMsg,<sp/>lockRecv);</highlight></codeline>
<codeline lineno="457"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(lockRecv)</highlight></codeline>
<codeline lineno="458"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vRecvMsg.clear();</highlight></codeline>
<codeline lineno="459"><highlight class="normal"></highlight></codeline>
<codeline lineno="460"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>if<sp/>this<sp/>was<sp/>the<sp/>sync<sp/>node,<sp/>we&apos;ll<sp/>need<sp/>a<sp/>new<sp/>one</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="461"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">this</highlight><highlight class="normal"><sp/>==<sp/>pnodeSync)</highlight></codeline>
<codeline lineno="462"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pnodeSync<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="463"><highlight class="normal">}</highlight></codeline>
<codeline lineno="464"><highlight class="normal"></highlight></codeline>
<codeline lineno="465" refid="class_c_node_1a4dbfe4f6c1fd162aaa905e4bd201d536" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_c_node_1a4dbfe4f6c1fd162aaa905e4bd201d536" kindref="member">CNode::PushVersion</ref>()</highlight></codeline>
<codeline lineno="466"><highlight class="normal">{</highlight></codeline>
<codeline lineno="468"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="stdint_8h_1adec1df1b8b51cb32b77e5b86fff46471" kindref="member">int64_t</ref><sp/>nTime<sp/>=<sp/>(fInbound<sp/>?<sp/><ref refid="timedata_8cpp_1a09f81b9c7650f898cf3cf305b87547e6" kindref="member">GetAdjustedTime</ref>()<sp/>:<sp/><ref refid="util_8cpp_1a46fac5fba8ba905b5f9acb364f5d8c6f" kindref="member">GetTime</ref>());</highlight></codeline>
<codeline lineno="469"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_c_address" kindref="compound">CAddress</ref><sp/>addrYou<sp/>=<sp/>(addr.IsRoutable()<sp/>&amp;&amp;<sp/>!<ref refid="netbase_8cpp_1aef250c1632d217d8f3b752ddeacc0368" kindref="member">IsProxy</ref>(addr)<sp/>?<sp/>addr<sp/>:<sp/><ref refid="class_c_address" kindref="compound">CAddress</ref>(<ref refid="class_c_service" kindref="compound">CService</ref>(</highlight><highlight class="stringliteral">&quot;0.0.0.0&quot;</highlight><highlight class="normal">,0)));</highlight></codeline>
<codeline lineno="470"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_c_address" kindref="compound">CAddress</ref><sp/>addrMe<sp/>=<sp/><ref refid="net_8cpp_1a66f5f0bc1dad5cfe429157d5637a93dc" kindref="member">GetLocalAddress</ref>(&amp;addr);</highlight></codeline>
<codeline lineno="471"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="util_8cpp_1acf52c2aa8213c7b15e26594a2264ed8a" kindref="member">GetRandBytes</ref>((</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*)&amp;<ref refid="net_8cpp_1a8c1a78575c0e397b5af7e6b4cc4493f2" kindref="member">nLocalHostNonce</ref>,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="net_8cpp_1a8c1a78575c0e397b5af7e6b4cc4493f2" kindref="member">nLocalHostNonce</ref>));</highlight></codeline>
<codeline lineno="472"><highlight class="normal"><sp/><sp/><sp/><sp/>LogPrint(</highlight><highlight class="stringliteral">&quot;net&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;send<sp/>version<sp/>message:<sp/>version<sp/>%d,<sp/>blocks=%d,<sp/>us=%s,<sp/>them=%s,<sp/>peer=%s\n&quot;</highlight><highlight class="normal">,<sp/>PROTOCOL_VERSION,<sp/><ref refid="main_8cpp_1a843f1984796a7e44a9e23fccd6a8af34" kindref="member">nBestHeight</ref>,<sp/>addrMe.<ref refid="class_c_service_1a336f9848fe9364e260c76499be0351a5" kindref="member">ToString</ref>(),<sp/>addrYou.<ref refid="class_c_service_1a336f9848fe9364e260c76499be0351a5" kindref="member">ToString</ref>(),<sp/>addr.ToString());</highlight></codeline>
<codeline lineno="473"><highlight class="normal"><sp/><sp/><sp/><sp/>PushMessage(</highlight><highlight class="stringliteral">&quot;version&quot;</highlight><highlight class="normal">,<sp/>PROTOCOL_VERSION,<sp/><ref refid="net_8cpp_1aac7a5df09042b8fc16272947ca022c2c" kindref="member">nLocalServices</ref>,<sp/>nTime,<sp/>addrYou,<sp/>addrMe,</highlight></codeline>
<codeline lineno="474"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="net_8cpp_1a8c1a78575c0e397b5af7e6b4cc4493f2" kindref="member">nLocalHostNonce</ref>,<sp/><ref refid="util_8cpp_1a7e6809cdbfc7f83b46f83caea740894d" kindref="member">FormatSubVersion</ref>(<ref refid="version_8h_1ad087f1f283f087089d3d86d1a196a5cb" kindref="member">CLIENT_NAME</ref>,<sp/>CLIENT_VERSION,<sp/>std::vector&lt;string&gt;()),<sp/><ref refid="main_8cpp_1a843f1984796a7e44a9e23fccd6a8af34" kindref="member">nBestHeight</ref>);</highlight></codeline>
<codeline lineno="475"><highlight class="normal">}</highlight></codeline>
<codeline lineno="476"><highlight class="normal"></highlight></codeline>
<codeline lineno="477"><highlight class="normal"></highlight></codeline>
<codeline lineno="478"><highlight class="normal"></highlight></codeline>
<codeline lineno="479"><highlight class="normal"></highlight></codeline>
<codeline lineno="480"><highlight class="normal"></highlight></codeline>
<codeline lineno="481"><highlight class="normal">std::map&lt;CNetAddr,<sp/>int64_t&gt;<sp/><ref refid="class_c_node_1adf22d1873c1012ab3edb8a52253b203e" kindref="member">CNode::setBanned</ref>;</highlight></codeline>
<codeline lineno="482"><highlight class="normal"><ref refid="class_annotated_mixin" kindref="compound">CCriticalSection</ref><sp/><ref refid="class_c_node_1a9ff9a6f07a280aa07d77713ae43d383a" kindref="member">CNode::cs_setBanned</ref>;</highlight></codeline>
<codeline lineno="483"><highlight class="normal"></highlight></codeline>
<codeline lineno="484" refid="class_c_node_1ad75b43ab81213b74446163211c24246a" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_c_node_1ad75b43ab81213b74446163211c24246a" kindref="member">CNode::ClearBanned</ref>()</highlight></codeline>
<codeline lineno="485"><highlight class="normal">{</highlight></codeline>
<codeline lineno="486"><highlight class="normal"><sp/><sp/><sp/><sp/>setBanned.clear();</highlight></codeline>
<codeline lineno="487"><highlight class="normal">}</highlight></codeline>
<codeline lineno="488"><highlight class="normal"></highlight></codeline>
<codeline lineno="489" refid="class_c_node_1aefa8b81afa53b4c6635dc4c6c024211a" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="class_c_node_1aefa8b81afa53b4c6635dc4c6c024211a" kindref="member">CNode::IsBanned</ref>(<ref refid="class_c_net_addr" kindref="compound">CNetAddr</ref><sp/>ip)</highlight></codeline>
<codeline lineno="490"><highlight class="normal">{</highlight></codeline>
<codeline lineno="491"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>fResult<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="492"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="493"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="sync_8h_1a911fe23f057c2fe5aad629162d6c99d0" kindref="member">LOCK</ref>(cs_setBanned);</highlight></codeline>
<codeline lineno="494"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::map&lt;CNetAddr,<sp/>int64_t&gt;::iterator<sp/>i<sp/>=<sp/>setBanned.find(ip);</highlight></codeline>
<codeline lineno="495"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(i<sp/>!=<sp/>setBanned.end())</highlight></codeline>
<codeline lineno="496"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="497"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stdint_8h_1adec1df1b8b51cb32b77e5b86fff46471" kindref="member">int64_t</ref><sp/>t<sp/>=<sp/>(*i).second;</highlight></codeline>
<codeline lineno="498"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="util_8cpp_1a46fac5fba8ba905b5f9acb364f5d8c6f" kindref="member">GetTime</ref>()<sp/>&lt;<sp/>t)</highlight></codeline>
<codeline lineno="499"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fResult<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="500"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="501"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="502"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>fResult;</highlight></codeline>
<codeline lineno="503"><highlight class="normal">}</highlight></codeline>
<codeline lineno="504"><highlight class="normal"></highlight></codeline>
<codeline lineno="505" refid="class_c_node_1a1923dffc7124eeedcc4bb58c2cd75754" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="class_c_node_1a1923dffc7124eeedcc4bb58c2cd75754" kindref="member">CNode::Misbehaving</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>howmuch)</highlight></codeline>
<codeline lineno="506"><highlight class="normal">{</highlight></codeline>
<codeline lineno="507"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(addr.IsLocal())</highlight></codeline>
<codeline lineno="508"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="509"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="util_8h_1afc02c0a4258fedfb316be612bb659ba8" kindref="member">LogPrintf</ref>(</highlight><highlight class="stringliteral">&quot;Warning:<sp/>Local<sp/>node<sp/>%s<sp/>misbehaving<sp/>(delta:<sp/>%d)!\n&quot;</highlight><highlight class="normal">,<sp/>addrName,<sp/>howmuch);</highlight></codeline>
<codeline lineno="510"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="511"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="512"><highlight class="normal"></highlight></codeline>
<codeline lineno="513"><highlight class="normal"><sp/><sp/><sp/><sp/>nMisbehavior<sp/>+=<sp/>howmuch;</highlight></codeline>
<codeline lineno="514"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(nMisbehavior<sp/>&gt;=<sp/><ref refid="util_8cpp_1a24f685720bf40370e5bd2a192ad50cd8" kindref="member">GetArg</ref>(</highlight><highlight class="stringliteral">&quot;-banscore&quot;</highlight><highlight class="normal">,<sp/>100))</highlight></codeline>
<codeline lineno="515"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="516"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stdint_8h_1adec1df1b8b51cb32b77e5b86fff46471" kindref="member">int64_t</ref><sp/>banTime<sp/>=<sp/><ref refid="util_8cpp_1a46fac5fba8ba905b5f9acb364f5d8c6f" kindref="member">GetTime</ref>()+<ref refid="util_8cpp_1a24f685720bf40370e5bd2a192ad50cd8" kindref="member">GetArg</ref>(</highlight><highlight class="stringliteral">&quot;-bantime&quot;</highlight><highlight class="normal">,<sp/>60*60*24);<sp/><sp/></highlight><highlight class="comment">//<sp/>Default<sp/>24-hour<sp/>ban</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="517"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="util_8h_1afc02c0a4258fedfb316be612bb659ba8" kindref="member">LogPrintf</ref>(</highlight><highlight class="stringliteral">&quot;Misbehaving:<sp/>%s<sp/>(%d<sp/>-&gt;<sp/>%d)<sp/>DISCONNECTING\n&quot;</highlight><highlight class="normal">,<sp/>addr.ToString(),<sp/>nMisbehavior-howmuch,<sp/>nMisbehavior);</highlight></codeline>
<codeline lineno="518"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="519"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="sync_8h_1a911fe23f057c2fe5aad629162d6c99d0" kindref="member">LOCK</ref>(cs_setBanned);</highlight></codeline>
<codeline lineno="520"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(setBanned[addr]<sp/>&lt;<sp/>banTime)</highlight></codeline>
<codeline lineno="521"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>setBanned[addr]<sp/>=<sp/>banTime;</highlight></codeline>
<codeline lineno="522"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="523"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CloseSocketDisconnect();</highlight></codeline>
<codeline lineno="524"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="525"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="526"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="util_8h_1afc02c0a4258fedfb316be612bb659ba8" kindref="member">LogPrintf</ref>(</highlight><highlight class="stringliteral">&quot;Misbehaving:<sp/>%s<sp/>(%d<sp/>-&gt;<sp/>%d)\n&quot;</highlight><highlight class="normal">,<sp/>addr.ToString(),<sp/>nMisbehavior-howmuch,<sp/>nMisbehavior);</highlight></codeline>
<codeline lineno="527"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="528"><highlight class="normal">}</highlight></codeline>
<codeline lineno="529"><highlight class="normal"></highlight></codeline>
<codeline lineno="530"><highlight class="normal"></highlight><highlight class="preprocessor">#undef<sp/>X</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="531" refid="net_8cpp_1a826edd40636cbaa44266b97c8c6a4fa3" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>X(name)<sp/>stats.name<sp/>=<sp/>name</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="532" refid="class_c_node_1aaa77188d9df85b80e3f8a30292acf6a9" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_c_node_1aaa77188d9df85b80e3f8a30292acf6a9" kindref="member">CNode::copyStats</ref>(<ref refid="class_c_node_stats" kindref="compound">CNodeStats</ref><sp/>&amp;<ref refid="db__bench_8cc_1a5925d216740c89f43482df806fd14e8c" kindref="member">stats</ref>)</highlight></codeline>
<codeline lineno="533"><highlight class="normal">{</highlight></codeline>
<codeline lineno="534"><highlight class="normal"><sp/><sp/><sp/><sp/>stats.<ref refid="class_c_node_stats_1ad2bceab1a335d59f42af37178b72fee7" kindref="member">nodeid</ref><sp/>=<sp/>this-&gt;GetId();</highlight></codeline>
<codeline lineno="535"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="net_8cpp_1a826edd40636cbaa44266b97c8c6a4fa3" kindref="member">X</ref>(nServices);</highlight></codeline>
<codeline lineno="536"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="net_8cpp_1a826edd40636cbaa44266b97c8c6a4fa3" kindref="member">X</ref>(nLastSend);</highlight></codeline>
<codeline lineno="537"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="net_8cpp_1a826edd40636cbaa44266b97c8c6a4fa3" kindref="member">X</ref>(nLastRecv);</highlight></codeline>
<codeline lineno="538"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="net_8cpp_1a826edd40636cbaa44266b97c8c6a4fa3" kindref="member">X</ref>(nTimeConnected);</highlight></codeline>
<codeline lineno="539"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="net_8cpp_1a826edd40636cbaa44266b97c8c6a4fa3" kindref="member">X</ref>(nTimeOffset);</highlight></codeline>
<codeline lineno="540"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="net_8cpp_1a826edd40636cbaa44266b97c8c6a4fa3" kindref="member">X</ref>(addrName);</highlight></codeline>
<codeline lineno="541"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="net_8cpp_1a826edd40636cbaa44266b97c8c6a4fa3" kindref="member">X</ref>(nVersion);</highlight></codeline>
<codeline lineno="542"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="net_8cpp_1a826edd40636cbaa44266b97c8c6a4fa3" kindref="member">X</ref>(cleanSubVer);</highlight></codeline>
<codeline lineno="543"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="net_8cpp_1a826edd40636cbaa44266b97c8c6a4fa3" kindref="member">X</ref>(strSubVer);</highlight></codeline>
<codeline lineno="544"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="net_8cpp_1a826edd40636cbaa44266b97c8c6a4fa3" kindref="member">X</ref>(fInbound);</highlight></codeline>
<codeline lineno="545"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="net_8cpp_1a826edd40636cbaa44266b97c8c6a4fa3" kindref="member">X</ref>(nStartingHeight);</highlight></codeline>
<codeline lineno="546"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="net_8cpp_1a826edd40636cbaa44266b97c8c6a4fa3" kindref="member">X</ref>(nMisbehavior);</highlight></codeline>
<codeline lineno="547"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="net_8cpp_1a826edd40636cbaa44266b97c8c6a4fa3" kindref="member">X</ref>(nSendBytes);</highlight></codeline>
<codeline lineno="548"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="net_8cpp_1a826edd40636cbaa44266b97c8c6a4fa3" kindref="member">X</ref>(nRecvBytes);</highlight></codeline>
<codeline lineno="549"><highlight class="normal"><sp/><sp/><sp/><sp/>stats.<ref refid="class_c_node_stats_1a82d6fca82ac649d6ba746a18faec6d79" kindref="member">fSyncNode</ref><sp/>=<sp/>(</highlight><highlight class="keyword">this</highlight><highlight class="normal"><sp/>==<sp/>pnodeSync);</highlight></codeline>
<codeline lineno="550"><highlight class="normal"></highlight></codeline>
<codeline lineno="551"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>It<sp/>is<sp/>common<sp/>for<sp/>nodes<sp/>with<sp/>good<sp/>ping<sp/>times<sp/>to<sp/>suddenly<sp/>become<sp/>lagged,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="552"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>due<sp/>to<sp/>a<sp/>new<sp/>block<sp/>arriving<sp/>or<sp/>other<sp/>large<sp/>transfer.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="553"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Merely<sp/>reporting<sp/>pingtime<sp/>might<sp/>fool<sp/>the<sp/>caller<sp/>into<sp/>thinking<sp/>the<sp/>node<sp/>was<sp/>still<sp/>responsive,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="554"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>since<sp/>pingtime<sp/>does<sp/>not<sp/>update<sp/>until<sp/>the<sp/>ping<sp/>is<sp/>complete,<sp/>which<sp/>might<sp/>take<sp/>a<sp/>while.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="555"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>So,<sp/>if<sp/>a<sp/>ping<sp/>is<sp/>taking<sp/>an<sp/>unusually<sp/>long<sp/>time<sp/>in<sp/>flight,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="556"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>caller<sp/>can<sp/>immediately<sp/>detect<sp/>that<sp/>this<sp/>is<sp/>happening.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="557"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="stdint_8h_1adec1df1b8b51cb32b77e5b86fff46471" kindref="member">int64_t</ref><sp/>nPingUsecWait<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="558"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((0<sp/>!=<sp/>nPingNonceSent)<sp/>&amp;&amp;<sp/>(0<sp/>!=<sp/>nPingUsecStart))<sp/>{</highlight></codeline>
<codeline lineno="559"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nPingUsecWait<sp/>=<sp/><ref refid="util_8h_1a0c5a06b50cd805b1923552114494c029" kindref="member">GetTimeMicros</ref>()<sp/>-<sp/>nPingUsecStart;</highlight></codeline>
<codeline lineno="560"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="561"><highlight class="normal"></highlight></codeline>
<codeline lineno="562"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Raw<sp/>ping<sp/>time<sp/>is<sp/>in<sp/>microseconds,<sp/>but<sp/>show<sp/>it<sp/>to<sp/>user<sp/>as<sp/>whole<sp/>seconds<sp/>(DarkSilk<sp/>users<sp/>should<sp/>be<sp/>well<sp/>used<sp/>to<sp/>small<sp/>numbers<sp/>with<sp/>many<sp/>decimal<sp/>places<sp/>by<sp/>now<sp/>:)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="563"><highlight class="normal"><sp/><sp/><sp/><sp/>stats.<ref refid="class_c_node_stats_1a535c198cbe3af112d4538f535e6618cd" kindref="member">dPingTime</ref><sp/>=<sp/>(((double)nPingUsecTime)<sp/>/<sp/>1e6);</highlight></codeline>
<codeline lineno="564"><highlight class="normal"><sp/><sp/><sp/><sp/>stats.<ref refid="class_c_node_stats_1a03a38f87940d04b321b9fb3102d0368d" kindref="member">dPingWait</ref><sp/>=<sp/>(((double)nPingUsecWait)<sp/>/<sp/>1e6);</highlight></codeline>
<codeline lineno="565"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="566"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Leave<sp/>string<sp/>empty<sp/>if<sp/>addrLocal<sp/>invalid<sp/>(not<sp/>filled<sp/>in<sp/>yet)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="567"><highlight class="normal"><sp/><sp/><sp/><sp/>stats.<ref refid="class_c_node_stats_1a027a5445a0c40e6489875e653be9c758" kindref="member">addrLocal</ref><sp/>=<sp/>addrLocal.<ref refid="class_c_net_addr_1a52a1b506f07e5450057e12a8b5a7fbcd" kindref="member">IsValid</ref>()<sp/>?<sp/>addrLocal.<ref refid="class_c_service_1a336f9848fe9364e260c76499be0351a5" kindref="member">ToString</ref>()<sp/>:<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="568"><highlight class="normal">}</highlight></codeline>
<codeline lineno="569"><highlight class="normal"></highlight><highlight class="preprocessor">#undef<sp/>X</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="570"><highlight class="normal"></highlight></codeline>
<codeline lineno="571"><highlight class="normal"></highlight><highlight class="comment">//<sp/>requires<sp/>LOCK(cs_vRecvMsg)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="572" refid="class_c_node_1a84a10eb3aec7fdddafeb354527b50b75" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="class_c_node_1a84a10eb3aec7fdddafeb354527b50b75" kindref="member">CNode::ReceiveMsgBytes</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*pch,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nBytes)</highlight></codeline>
<codeline lineno="573"><highlight class="normal">{</highlight></codeline>
<codeline lineno="574"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(nBytes<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="575"><highlight class="normal"></highlight></codeline>
<codeline lineno="576"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>get<sp/>current<sp/>incomplete<sp/>message,<sp/>or<sp/>create<sp/>a<sp/>new<sp/>one</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="577"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(vRecvMsg.empty()<sp/>||</highlight></codeline>
<codeline lineno="578"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vRecvMsg.back().complete())</highlight></codeline>
<codeline lineno="579"><highlight class="normal">#ifdef<sp/>USE_NATIVE_I2P</highlight></codeline>
<codeline lineno="580"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vRecvMsg.push_back(<ref refid="class_c_net_message" kindref="compound">CNetMessage</ref>(nRecvStreamType,<sp/>nRecvVersion));</highlight></codeline>
<codeline lineno="581"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="582"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vRecvMsg.push_back(<ref refid="class_c_net_message" kindref="compound">CNetMessage</ref>(<ref refid="serialize_8h_1a6b7b47dd702d9e331586d485013fd1eaa652754eeaf79fba4fcf4c18597a6961c" kindref="member">SER_NETWORK</ref>,<sp/>nRecvVersion));</highlight></codeline>
<codeline lineno="583"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="584"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="585"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_c_net_message" kindref="compound">CNetMessage</ref>&amp;<sp/>msg<sp/>=<sp/>vRecvMsg.back();</highlight></codeline>
<codeline lineno="586"><highlight class="normal"></highlight></codeline>
<codeline lineno="587"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>absorb<sp/>network<sp/>data</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="588"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>handled;</highlight></codeline>
<codeline lineno="589"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!msg.<ref refid="class_c_net_message_1a8f399ad7225f980bdab3ede17b1b23af" kindref="member">in_data</ref>)</highlight></codeline>
<codeline lineno="590"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>handled<sp/>=<sp/>msg.<ref refid="class_c_net_message_1a3e58f5f29b23d1377f8fd15fc75c78ac" kindref="member">readHeader</ref>(pch,<sp/>nBytes);</highlight></codeline>
<codeline lineno="591"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="592"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>handled<sp/>=<sp/>msg.<ref refid="class_c_net_message_1adbc1669a56462daea5f37e5e99117f8c" kindref="member">readData</ref>(pch,<sp/>nBytes);</highlight></codeline>
<codeline lineno="593"><highlight class="normal"></highlight></codeline>
<codeline lineno="594"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(handled<sp/>&lt;<sp/>0)</highlight></codeline>
<codeline lineno="595"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="596"><highlight class="normal"></highlight></codeline>
<codeline lineno="597"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pch<sp/>+=<sp/>handled;</highlight></codeline>
<codeline lineno="598"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nBytes<sp/>-=<sp/>handled;</highlight></codeline>
<codeline lineno="599"><highlight class="normal"></highlight></codeline>
<codeline lineno="600"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(msg.<ref refid="class_c_net_message_1a440150fa0e6a84699780048baca55da8" kindref="member">complete</ref>())</highlight></codeline>
<codeline lineno="601"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>msg.<ref refid="class_c_net_message_1a99d5bbca862ac4b7a88b71a7b679decc" kindref="member">nTime</ref><sp/>=<sp/><ref refid="util_8h_1a0c5a06b50cd805b1923552114494c029" kindref="member">GetTimeMicros</ref>();</highlight></codeline>
<codeline lineno="602"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="603"><highlight class="normal"></highlight></codeline>
<codeline lineno="604"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="605"><highlight class="normal">}</highlight></codeline>
<codeline lineno="606"><highlight class="normal"></highlight></codeline>
<codeline lineno="607"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>USE_NATIVE_I2P</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="608"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>AddIncomingConnection(<ref refid="compat_8h_1a26ef1173e2f2c0d3db27eca28397d723" kindref="member">SOCKET</ref><sp/>hSocket,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_c_address" kindref="compound">CAddress</ref>&amp;<sp/>addr)</highlight></codeline>
<codeline lineno="609"><highlight class="normal">{</highlight></codeline>
<codeline lineno="610"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nInbound<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="611"><highlight class="normal"></highlight></codeline>
<codeline lineno="612"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="613"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="sync_8h_1a911fe23f057c2fe5aad629162d6c99d0" kindref="member">LOCK</ref>(cs_vNodes);</highlight></codeline>
<codeline lineno="614"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>BOOST_FOREACH(<ref refid="class_c_node" kindref="compound">CNode</ref>*<sp/>pnode,<sp/><ref refid="net_8cpp_1aa5a11f8873e230cea77bc7e91ee51918" kindref="member">vNodes</ref>)</highlight></codeline>
<codeline lineno="615"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(pnode-&gt;fInbound)</highlight></codeline>
<codeline lineno="616"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nInbound++;</highlight></codeline>
<codeline lineno="617"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="618"><highlight class="normal"></highlight></codeline>
<codeline lineno="619"><highlight class="normal"><sp/><sp/><sp/><sp/>if<sp/>(hSocket<sp/>==<sp/><ref refid="compat_8h_1a26769957ec1a2beaf223f33b66ee64ab" kindref="member">INVALID_SOCKET</ref>)</highlight></codeline>
<codeline lineno="620"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="621"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nErr<sp/>=<sp/><ref refid="compat_8h_1a6d24fe3ab2906c21c373505ca244f90b" kindref="member">WSAGetLastError</ref>();</highlight></codeline>
<codeline lineno="622"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(nErr<sp/>!=<sp/><ref refid="compat_8h_1a4ba23242bee4784b72a0a170e2f975a0" kindref="member">WSAEWOULDBLOCK</ref>)</highlight></codeline>
<codeline lineno="623"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;socket<sp/>error<sp/>accept<sp/>failed:<sp/>%d\n&quot;</highlight><highlight class="normal">,<sp/>nErr);</highlight></codeline>
<codeline lineno="624"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="625"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(nInbound<sp/>&gt;=<sp/><ref refid="util_8cpp_1a24f685720bf40370e5bd2a192ad50cd8" kindref="member">GetArg</ref>(</highlight><highlight class="stringliteral">&quot;-maxconnections&quot;</highlight><highlight class="normal">,<sp/>200)<sp/>-<sp/>MAX_OUTBOUND_CONNECTIONS)</highlight></codeline>
<codeline lineno="626"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="627"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="628"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="sync_8h_1a911fe23f057c2fe5aad629162d6c99d0" kindref="member">LOCK</ref>(cs_setservAddNodeAddresses);</highlight></codeline>
<codeline lineno="629"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="net_8cpp_1adfc6e2c8b106da3807ca34d27577b37e" kindref="member">setservAddNodeAddresses</ref>.count(addr))</highlight></codeline>
<codeline lineno="630"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="compat_8h_1a5a3eb971b466278ada4f7f87399a537c" kindref="member">closesocket</ref>(hSocket);</highlight></codeline>
<codeline lineno="631"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="632"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="633"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="class_c_node_1aefa8b81afa53b4c6635dc4c6c024211a" kindref="member">CNode::IsBanned</ref>(addr))</highlight></codeline>
<codeline lineno="634"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="635"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;connection<sp/>from<sp/>%s<sp/>dropped<sp/>(banned)\n&quot;</highlight><highlight class="normal">,<sp/>addr.<ref refid="class_c_service_1a336f9848fe9364e260c76499be0351a5" kindref="member">ToString</ref>().c_str());</highlight></codeline>
<codeline lineno="636"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="compat_8h_1a5a3eb971b466278ada4f7f87399a537c" kindref="member">closesocket</ref>(hSocket);</highlight></codeline>
<codeline lineno="637"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="638"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="639"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="640"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;accepted<sp/>connection<sp/>%s\n&quot;</highlight><highlight class="normal">,<sp/>addr.<ref refid="class_c_service_1a336f9848fe9364e260c76499be0351a5" kindref="member">ToString</ref>().c_str());</highlight></codeline>
<codeline lineno="641"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_c_node" kindref="compound">CNode</ref>*<sp/>pnode<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_c_node" kindref="compound">CNode</ref>(hSocket,<sp/>addr,<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="642"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pnode-&gt;AddRef();</highlight></codeline>
<codeline lineno="643"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="644"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="sync_8h_1a911fe23f057c2fe5aad629162d6c99d0" kindref="member">LOCK</ref>(cs_vNodes);</highlight></codeline>
<codeline lineno="645"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="net_8cpp_1aa5a11f8873e230cea77bc7e91ee51918" kindref="member">vNodes</ref>.push_back(pnode);</highlight></codeline>
<codeline lineno="646"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++nI2PNodeCount;</highlight></codeline>
<codeline lineno="647"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="648"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="649"><highlight class="normal">}</highlight></codeline>
<codeline lineno="650"><highlight class="normal"></highlight></codeline>
<codeline lineno="651"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="652"><highlight class="normal"></highlight></codeline>
<codeline lineno="653" refid="class_c_net_message_1a3e58f5f29b23d1377f8fd15fc75c78ac" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="class_c_net_message_1a3e58f5f29b23d1377f8fd15fc75c78ac" kindref="member">CNetMessage::readHeader</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*pch,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nBytes)</highlight></codeline>
<codeline lineno="654"><highlight class="normal">{</highlight></codeline>
<codeline lineno="655"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>copy<sp/>data<sp/>to<sp/>temporary<sp/>parsing<sp/>buffer</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="656"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nRemaining<sp/>=<sp/>24<sp/>-<sp/>nHdrPos;</highlight></codeline>
<codeline lineno="657"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nCopy<sp/>=<sp/>std::min(nRemaining,<sp/>nBytes);</highlight></codeline>
<codeline lineno="658"><highlight class="normal"></highlight></codeline>
<codeline lineno="659"><highlight class="normal"><sp/><sp/><sp/><sp/>memcpy(&amp;hdrbuf[nHdrPos],<sp/>pch,<sp/>nCopy);</highlight></codeline>
<codeline lineno="660"><highlight class="normal"><sp/><sp/><sp/><sp/>nHdrPos<sp/>+=<sp/>nCopy;</highlight></codeline>
<codeline lineno="661"><highlight class="normal"></highlight></codeline>
<codeline lineno="662"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>if<sp/>header<sp/>incomplete,<sp/>exit</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="663"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(nHdrPos<sp/>&lt;<sp/>24)</highlight></codeline>
<codeline lineno="664"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>nCopy;</highlight></codeline>
<codeline lineno="665"><highlight class="normal"></highlight></codeline>
<codeline lineno="666"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>deserialize<sp/>to<sp/>CMessageHeader</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="667"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">try</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="668"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>hdrbuf<sp/>&gt;&gt;<sp/>hdr;</highlight></codeline>
<codeline lineno="669"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="670"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">catch</highlight><highlight class="normal"><sp/>(std::exception<sp/>&amp;e)<sp/>{</highlight></codeline>
<codeline lineno="671"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="672"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="673"><highlight class="normal"></highlight></codeline>
<codeline lineno="674"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>reject<sp/>messages<sp/>larger<sp/>than<sp/>MAX_SIZE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="675"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(hdr.nMessageSize<sp/>&gt;<sp/><ref refid="mruset__tests_8cpp_1a0592dba56693fad79136250c11e5a7fe" kindref="member">MAX_SIZE</ref>)</highlight></codeline>
<codeline lineno="676"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="677"><highlight class="normal"></highlight></codeline>
<codeline lineno="678"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>switch<sp/>state<sp/>to<sp/>reading<sp/>message<sp/>data</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="679"><highlight class="normal"><sp/><sp/><sp/><sp/>in_data<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="680"><highlight class="normal"></highlight></codeline>
<codeline lineno="681"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>nCopy;</highlight></codeline>
<codeline lineno="682"><highlight class="normal">}</highlight></codeline>
<codeline lineno="683"><highlight class="normal"></highlight></codeline>
<codeline lineno="684" refid="class_c_net_message_1adbc1669a56462daea5f37e5e99117f8c" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="class_c_net_message_1adbc1669a56462daea5f37e5e99117f8c" kindref="member">CNetMessage::readData</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*pch,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nBytes)</highlight></codeline>
<codeline lineno="685"><highlight class="normal">{</highlight></codeline>
<codeline lineno="686"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nRemaining<sp/>=<sp/>hdr.nMessageSize<sp/>-<sp/>nDataPos;</highlight></codeline>
<codeline lineno="687"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nCopy<sp/>=<sp/>std::min(nRemaining,<sp/>nBytes);</highlight></codeline>
<codeline lineno="688"><highlight class="normal"></highlight></codeline>
<codeline lineno="689"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(vRecv.size()<sp/>&lt;<sp/>nDataPos<sp/>+<sp/>nCopy)<sp/>{</highlight></codeline>
<codeline lineno="690"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Allocate<sp/>up<sp/>to<sp/>256<sp/>KiB<sp/>ahead,<sp/>but<sp/>never<sp/>more<sp/>than<sp/>the<sp/>total<sp/>message<sp/>size.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="691"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vRecv.resize(std::min(hdr.nMessageSize,<sp/>nDataPos<sp/>+<sp/>nCopy<sp/>+<sp/>256<sp/>*<sp/>1024));</highlight></codeline>
<codeline lineno="692"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="693"><highlight class="normal"></highlight></codeline>
<codeline lineno="694"><highlight class="normal"><sp/><sp/><sp/><sp/>memcpy(&amp;vRecv[nDataPos],<sp/>pch,<sp/>nCopy);</highlight></codeline>
<codeline lineno="695"><highlight class="normal"><sp/><sp/><sp/><sp/>nDataPos<sp/>+=<sp/>nCopy;</highlight></codeline>
<codeline lineno="696"><highlight class="normal"></highlight></codeline>
<codeline lineno="697"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>nCopy;</highlight></codeline>
<codeline lineno="698"><highlight class="normal">}</highlight></codeline>
<codeline lineno="699"><highlight class="normal"></highlight></codeline>
<codeline lineno="700"><highlight class="normal"></highlight></codeline>
<codeline lineno="701"><highlight class="normal"></highlight></codeline>
<codeline lineno="702"><highlight class="normal"></highlight></codeline>
<codeline lineno="703"><highlight class="normal"></highlight></codeline>
<codeline lineno="704"><highlight class="normal"></highlight></codeline>
<codeline lineno="705"><highlight class="normal"></highlight></codeline>
<codeline lineno="706"><highlight class="normal"></highlight></codeline>
<codeline lineno="707"><highlight class="normal"></highlight></codeline>
<codeline lineno="708"><highlight class="normal"></highlight><highlight class="comment">//<sp/>requires<sp/>LOCK(cs_vSend)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="709" refid="net_8h_1aff6b7f2f213ce1e8d3aea65c41c99cb8" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="net_8cpp_1aff6b7f2f213ce1e8d3aea65c41c99cb8" kindref="member">SocketSendData</ref>(<ref refid="class_c_node" kindref="compound">CNode</ref><sp/>*pnode)</highlight></codeline>
<codeline lineno="710"><highlight class="normal">{</highlight></codeline>
<codeline lineno="711"><highlight class="normal"><sp/><sp/><sp/><sp/>std::deque&lt;CSerializeData&gt;::iterator<sp/>it<sp/>=<sp/>pnode-&gt;<ref refid="class_c_node_1a68e5fb1a80fe4247aa577a3c9a74b399" kindref="member">vSendMsg</ref>.begin();</highlight></codeline>
<codeline lineno="712"><highlight class="normal"></highlight></codeline>
<codeline lineno="713"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(it<sp/>!=<sp/>pnode-&gt;<ref refid="class_c_node_1a68e5fb1a80fe4247aa577a3c9a74b399" kindref="member">vSendMsg</ref>.end())<sp/>{</highlight></codeline>
<codeline lineno="714"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="serialize_8h_1a77935f92ff5ba1d71d692166f6ce0c1b" kindref="member">CSerializeData</ref><sp/>&amp;data<sp/>=<sp/>*it;</highlight></codeline>
<codeline lineno="715"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assert(data.size()<sp/>&gt;<sp/>pnode-&gt;<ref refid="class_c_node_1a090bda86de6b84c3db83e1f029d4f453" kindref="member">nSendOffset</ref>);</highlight></codeline>
<codeline lineno="716"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nBytes<sp/>=<sp/>send(pnode-&gt;<ref refid="class_c_node_1a7cda6efa6a9ef9db3eebe70fc3bdd45a" kindref="member">hSocket</ref>,<sp/>&amp;data[pnode-&gt;<ref refid="class_c_node_1a090bda86de6b84c3db83e1f029d4f453" kindref="member">nSendOffset</ref>],<sp/>data.size()<sp/>-<sp/>pnode-&gt;<ref refid="class_c_node_1a090bda86de6b84c3db83e1f029d4f453" kindref="member">nSendOffset</ref>,<sp/>MSG_NOSIGNAL<sp/>|<sp/>MSG_DONTWAIT);</highlight></codeline>
<codeline lineno="717"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(nBytes<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="718"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pnode-&gt;<ref refid="class_c_node_1af39253ad525733ca64ab3fc785dfc4eb" kindref="member">nLastSend</ref><sp/>=<sp/><ref refid="util_8cpp_1a46fac5fba8ba905b5f9acb364f5d8c6f" kindref="member">GetTime</ref>();</highlight></codeline>
<codeline lineno="719"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pnode-&gt;<ref refid="class_c_node_1a33e24a9544df3c60f9e1ec05b5e91051" kindref="member">nSendBytes</ref><sp/>+=<sp/>nBytes;</highlight></codeline>
<codeline lineno="720"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pnode-&gt;<ref refid="class_c_node_1a090bda86de6b84c3db83e1f029d4f453" kindref="member">nSendOffset</ref><sp/>+=<sp/>nBytes;</highlight></codeline>
<codeline lineno="721"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pnode-&gt;<ref refid="class_c_node_1a945c993a84eaa9d6bca18284befaccbe" kindref="member">RecordBytesSent</ref>(nBytes);</highlight></codeline>
<codeline lineno="722"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(pnode-&gt;<ref refid="class_c_node_1a090bda86de6b84c3db83e1f029d4f453" kindref="member">nSendOffset</ref><sp/>==<sp/>data.size())<sp/>{</highlight></codeline>
<codeline lineno="723"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pnode-&gt;<ref refid="class_c_node_1a090bda86de6b84c3db83e1f029d4f453" kindref="member">nSendOffset</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="724"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pnode-&gt;<ref refid="class_c_node_1a3c99b7e2b0e53feb58f6859453456f74" kindref="member">nSendSize</ref><sp/>-=<sp/>data.size();</highlight></codeline>
<codeline lineno="725"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>it++;</highlight></codeline>
<codeline lineno="726"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="727"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>could<sp/>not<sp/>send<sp/>full<sp/>message;<sp/>stop<sp/>sending<sp/>more</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="728"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="729"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="730"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="731"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(nBytes<sp/>&lt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="732"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>error</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="733"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nErr<sp/>=<sp/><ref refid="compat_8h_1a6d24fe3ab2906c21c373505ca244f90b" kindref="member">WSAGetLastError</ref>();</highlight></codeline>
<codeline lineno="734"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(nErr<sp/>!=<sp/><ref refid="compat_8h_1a4ba23242bee4784b72a0a170e2f975a0" kindref="member">WSAEWOULDBLOCK</ref><sp/>&amp;&amp;<sp/>nErr<sp/>!=<sp/><ref refid="compat_8h_1a7ce1c171e08d68442124bf6189f8aec5" kindref="member">WSAEMSGSIZE</ref><sp/>&amp;&amp;<sp/>nErr<sp/>!=<sp/><ref refid="compat_8h_1aef81890a7d46cb9dda85df9b96cba6b1" kindref="member">WSAEINTR</ref><sp/>&amp;&amp;<sp/>nErr<sp/>!=<sp/><ref refid="compat_8h_1ada8711ffab59910a2732cfa4b7c24e29" kindref="member">WSAEINPROGRESS</ref>)</highlight></codeline>
<codeline lineno="735"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="736"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="util_8h_1afc02c0a4258fedfb316be612bb659ba8" kindref="member">LogPrintf</ref>(</highlight><highlight class="stringliteral">&quot;socket<sp/>send<sp/>error<sp/>%d\n&quot;</highlight><highlight class="normal">,<sp/>nErr);</highlight></codeline>
<codeline lineno="737"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pnode-&gt;<ref refid="class_c_node_1a63a6091a0b0fc0987d9436e1ec708423" kindref="member">CloseSocketDisconnect</ref>();</highlight></codeline>
<codeline lineno="738"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="739"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="740"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>couldn&apos;t<sp/>send<sp/>anything<sp/>at<sp/>all</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="741"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="742"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="743"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="744"><highlight class="normal"></highlight></codeline>
<codeline lineno="745"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(it<sp/>==<sp/>pnode-&gt;<ref refid="class_c_node_1a68e5fb1a80fe4247aa577a3c9a74b399" kindref="member">vSendMsg</ref>.end())<sp/>{</highlight></codeline>
<codeline lineno="746"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assert(pnode-&gt;<ref refid="class_c_node_1a090bda86de6b84c3db83e1f029d4f453" kindref="member">nSendOffset</ref><sp/>==<sp/>0);</highlight></codeline>
<codeline lineno="747"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assert(pnode-&gt;<ref refid="class_c_node_1a3c99b7e2b0e53feb58f6859453456f74" kindref="member">nSendSize</ref><sp/>==<sp/>0);</highlight></codeline>
<codeline lineno="748"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="749"><highlight class="normal"><sp/><sp/><sp/><sp/>pnode-&gt;<ref refid="class_c_node_1a68e5fb1a80fe4247aa577a3c9a74b399" kindref="member">vSendMsg</ref>.erase(pnode-&gt;<ref refid="class_c_node_1a68e5fb1a80fe4247aa577a3c9a74b399" kindref="member">vSendMsg</ref>.begin(),<sp/>it);</highlight></codeline>
<codeline lineno="750"><highlight class="normal">}</highlight></codeline>
<codeline lineno="751"><highlight class="normal"></highlight></codeline>
<codeline lineno="752"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>list&lt;CNode*&gt;<sp/>vNodesDisconnected;</highlight></codeline>
<codeline lineno="753"><highlight class="normal"></highlight></codeline>
<codeline lineno="754" refid="net_8cpp_1aa1111c12121e039bbd8eedb556e4514a" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="net_8cpp_1aa1111c12121e039bbd8eedb556e4514a" kindref="member">ThreadSocketHandler</ref>()</highlight></codeline>
<codeline lineno="755"><highlight class="normal">{</highlight></codeline>
<codeline lineno="756"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nPrevNodeCount<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="757"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>USE_NATIVE_I2P</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="758"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nPrevI2PNodeCount<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="759"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="760"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">true</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="761"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="762"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="763"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Disconnect<sp/>nodes</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="764"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="765"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="766"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="sync_8h_1a911fe23f057c2fe5aad629162d6c99d0" kindref="member">LOCK</ref>(cs_vNodes);</highlight></codeline>
<codeline lineno="767"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Disconnect<sp/>unused<sp/>nodes</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="768"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vector&lt;CNode*&gt;<sp/>vNodesCopy<sp/>=<sp/><ref refid="net_8cpp_1aa5a11f8873e230cea77bc7e91ee51918" kindref="member">vNodes</ref>;</highlight></codeline>
<codeline lineno="769"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>BOOST_FOREACH(<ref refid="class_c_node" kindref="compound">CNode</ref>*<sp/>pnode,<sp/>vNodesCopy)</highlight></codeline>
<codeline lineno="770"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="771"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(pnode-&gt;<ref refid="class_c_node_1af2f7ea958313974e8a948292f060922e" kindref="member">fDisconnect</ref><sp/>||</highlight></codeline>
<codeline lineno="772"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(pnode-&gt;<ref refid="class_c_node_1a72211aaf51af2e981e6b8a1deb73c836" kindref="member">GetRefCount</ref>()<sp/>&lt;=<sp/>0<sp/>&amp;&amp;<sp/>pnode-&gt;<ref refid="class_c_node_1a015361812daa5b6ebb9a5692ddf67a54" kindref="member">vRecvMsg</ref>.empty()<sp/>&amp;&amp;<sp/>pnode-&gt;<ref refid="class_c_node_1a3c99b7e2b0e53feb58f6859453456f74" kindref="member">nSendSize</ref><sp/>==<sp/>0<sp/>&amp;&amp;<sp/>pnode-&gt;<ref refid="class_c_node_1a6174b5a3d8d8f6a2daf02be3cf04dc63" kindref="member">ssSend</ref>.<ref refid="class_c_data_stream_1a6e50e788d33080ac804e4d8ba7150279" kindref="member">empty</ref>()))</highlight></codeline>
<codeline lineno="773"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="774"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>remove<sp/>from<sp/>vNodes</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="775"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="net_8cpp_1aa5a11f8873e230cea77bc7e91ee51918" kindref="member">vNodes</ref>.erase(</highlight><highlight class="keyword">remove</highlight><highlight class="normal">(<ref refid="net_8cpp_1aa5a11f8873e230cea77bc7e91ee51918" kindref="member">vNodes</ref>.begin(),<sp/><ref refid="net_8cpp_1aa5a11f8873e230cea77bc7e91ee51918" kindref="member">vNodes</ref>.end(),<sp/>pnode),<sp/><ref refid="net_8cpp_1aa5a11f8873e230cea77bc7e91ee51918" kindref="member">vNodes</ref>.end());</highlight></codeline>
<codeline lineno="776"><highlight class="normal"></highlight></codeline>
<codeline lineno="777"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>release<sp/>outbound<sp/>grant<sp/>(if<sp/>any)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="778"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pnode-&gt;<ref refid="class_c_node_1a4bb25f8bdeeaff5e8cb08abc97bbc44d" kindref="member">grantOutbound</ref>.<ref refid="class_c_semaphore_grant_1a8d985eeace74e037baeb39bd2d586576" kindref="member">Release</ref>();</highlight></codeline>
<codeline lineno="779"><highlight class="normal"></highlight></codeline>
<codeline lineno="780"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>close<sp/>socket<sp/>and<sp/>cleanup</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="781"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pnode-&gt;<ref refid="class_c_node_1a63a6091a0b0fc0987d9436e1ec708423" kindref="member">CloseSocketDisconnect</ref>();</highlight></codeline>
<codeline lineno="782"><highlight class="normal"></highlight></codeline>
<codeline lineno="783"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>hold<sp/>in<sp/>disconnected<sp/>pool<sp/>until<sp/>all<sp/>refs<sp/>are<sp/>released</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="784"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(pnode-&gt;<ref refid="class_c_node_1a933adb2b192939545a01d602b1d7b53a" kindref="member">fNetworkNode</ref><sp/>||<sp/>pnode-&gt;<ref refid="class_c_node_1a64b2550ec558b6106ebc122d450ad35b" kindref="member">fInbound</ref>)</highlight></codeline>
<codeline lineno="785"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pnode-&gt;<ref refid="class_c_node_1af804bf7c7f9794e80a3b916e1befece9" kindref="member">Release</ref>();</highlight></codeline>
<codeline lineno="786"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vNodesDisconnected.push_back(pnode);</highlight></codeline>
<codeline lineno="787"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>USE_NATIVE_I2P</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="788"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(pnode-&gt;<ref refid="class_c_node_1a3993ecb1de2a2135a3cf0904346a6f88" kindref="member">addr</ref>.IsNativeI2P())</highlight></codeline>
<codeline lineno="789"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>--nI2PNodeCount;</highlight></codeline>
<codeline lineno="790"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="791"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="792"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="793"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="794"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="795"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Delete<sp/>disconnected<sp/>nodes</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="796"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>list&lt;CNode*&gt;<sp/>vNodesDisconnectedCopy<sp/>=<sp/>vNodesDisconnected;</highlight></codeline>
<codeline lineno="797"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>BOOST_FOREACH(<ref refid="class_c_node" kindref="compound">CNode</ref>*<sp/>pnode,<sp/>vNodesDisconnectedCopy)</highlight></codeline>
<codeline lineno="798"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="799"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>wait<sp/>until<sp/>threads<sp/>are<sp/>done<sp/>using<sp/>it</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="800"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(pnode-&gt;<ref refid="class_c_node_1a72211aaf51af2e981e6b8a1deb73c836" kindref="member">GetRefCount</ref>()<sp/>&lt;=<sp/>0)</highlight></codeline>
<codeline lineno="801"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="802"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>fDelete<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="803"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="804"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="sync_8h_1aca08e7299069c2d60b8aa726fc550612" kindref="member">TRY_LOCK</ref>(pnode-&gt;<ref refid="class_c_node_1a79edcac83fc5067567c7b41c26fcc56f" kindref="member">cs_vSend</ref>,<sp/>lockSend);</highlight></codeline>
<codeline lineno="805"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(lockSend)</highlight></codeline>
<codeline lineno="806"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="807"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="sync_8h_1aca08e7299069c2d60b8aa726fc550612" kindref="member">TRY_LOCK</ref>(pnode-&gt;<ref refid="class_c_node_1abaebfaf8fff7e2e99366ae2bc69af6cd" kindref="member">cs_vRecvMsg</ref>,<sp/>lockRecv);</highlight></codeline>
<codeline lineno="808"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(lockRecv)</highlight></codeline>
<codeline lineno="809"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="810"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="sync_8h_1aca08e7299069c2d60b8aa726fc550612" kindref="member">TRY_LOCK</ref>(pnode-&gt;<ref refid="class_c_node_1a1e8b0784cc82f33edc2dc4e2834d1ff0" kindref="member">cs_inventory</ref>,<sp/>lockInv);</highlight></codeline>
<codeline lineno="811"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(lockInv)</highlight></codeline>
<codeline lineno="812"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fDelete<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="813"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="814"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="815"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="816"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fDelete)</highlight></codeline>
<codeline lineno="817"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="818"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vNodesDisconnected.remove(pnode);</highlight></codeline>
<codeline lineno="819"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>pnode;</highlight></codeline>
<codeline lineno="820"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="821"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="822"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="823"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="824"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="net_8cpp_1aa5a11f8873e230cea77bc7e91ee51918" kindref="member">vNodes</ref>.size()<sp/>!=<sp/>nPrevNodeCount)<sp/>{</highlight></codeline>
<codeline lineno="825"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nPrevNodeCount<sp/>=<sp/><ref refid="net_8cpp_1aa5a11f8873e230cea77bc7e91ee51918" kindref="member">vNodes</ref>.size();</highlight></codeline>
<codeline lineno="826"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="init_8cpp_1a4fe31b510fc1c2b95321cedb9f89e8de" kindref="member">uiInterface</ref>.<ref refid="class_c_client_u_i_interface_1a496995d44db8dc3e3ef84d345e25967d" kindref="member">NotifyNumConnectionsChanged</ref>(nPrevNodeCount);</highlight></codeline>
<codeline lineno="827"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="828"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>USE_NATIVE_I2P</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="829"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(nPrevI2PNodeCount<sp/>!=<sp/>nI2PNodeCount)</highlight></codeline>
<codeline lineno="830"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="831"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nPrevI2PNodeCount<sp/>=<sp/>nI2PNodeCount;</highlight></codeline>
<codeline lineno="832"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="init_8cpp_1a4fe31b510fc1c2b95321cedb9f89e8de" kindref="member">uiInterface</ref>.NotifyNumI2PConnectionsChanged(nI2PNodeCount);</highlight></codeline>
<codeline lineno="833"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="834"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="835"><highlight class="normal"></highlight></codeline>
<codeline lineno="836"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="837"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Find<sp/>which<sp/>sockets<sp/>have<sp/>data<sp/>to<sp/>receive</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="838"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="839"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">timeval<sp/>timeout;</highlight></codeline>
<codeline lineno="840"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>timeout.tv_sec<sp/><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="841"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>timeout.tv_usec<sp/>=<sp/>50000;<sp/></highlight><highlight class="comment">//<sp/>frequency<sp/>to<sp/>poll<sp/>pnode-&gt;vSend</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="842"><highlight class="normal"></highlight></codeline>
<codeline lineno="843"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fd_set<sp/>fdsetRecv;</highlight></codeline>
<codeline lineno="844"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fd_set<sp/>fdsetSend;</highlight></codeline>
<codeline lineno="845"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fd_set<sp/>fdsetError;</highlight></codeline>
<codeline lineno="846"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FD_ZERO(&amp;fdsetRecv);</highlight></codeline>
<codeline lineno="847"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FD_ZERO(&amp;fdsetSend);</highlight></codeline>
<codeline lineno="848"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FD_ZERO(&amp;fdsetError);</highlight></codeline>
<codeline lineno="849"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="compat_8h_1a26ef1173e2f2c0d3db27eca28397d723" kindref="member">SOCKET</ref><sp/>hSocketMax<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="850"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>have_fds<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="851"><highlight class="normal"></highlight></codeline>
<codeline lineno="852"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>USE_NATIVE_I2P</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="853"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>BOOST_FOREACH(<ref refid="compat_8h_1a26ef1173e2f2c0d3db27eca28397d723" kindref="member">SOCKET</ref><sp/>hI2PListenSocket,<sp/>vhI2PListenSocket)<sp/>{</highlight></codeline>
<codeline lineno="854"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(hI2PListenSocket<sp/>!=<sp/>INVALID_SOCKET)</highlight></codeline>
<codeline lineno="855"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="856"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FD_SET(hI2PListenSocket,<sp/>&amp;fdsetRecv);</highlight></codeline>
<codeline lineno="857"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>hSocketMax<sp/>=<sp/>max(hSocketMax,<sp/>hI2PListenSocket);</highlight></codeline>
<codeline lineno="858"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>have_fds<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="859"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="860"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="861"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="862"><highlight class="normal"></highlight></codeline>
<codeline lineno="863"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>BOOST_FOREACH(<ref refid="compat_8h_1a26ef1173e2f2c0d3db27eca28397d723" kindref="member">SOCKET</ref><sp/>hListenSocket,<sp/>vhListenSocket)<sp/>{</highlight></codeline>
<codeline lineno="864"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FD_SET(hListenSocket,<sp/>&amp;fdsetRecv);</highlight></codeline>
<codeline lineno="865"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>hSocketMax<sp/>=<sp/>max(hSocketMax,<sp/>hListenSocket);</highlight></codeline>
<codeline lineno="866"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>have_fds<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="867"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="868"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="869"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="sync_8h_1a911fe23f057c2fe5aad629162d6c99d0" kindref="member">LOCK</ref>(cs_vNodes);</highlight></codeline>
<codeline lineno="870"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>BOOST_FOREACH(<ref refid="class_c_node" kindref="compound">CNode</ref>*<sp/>pnode,<sp/><ref refid="net_8cpp_1aa5a11f8873e230cea77bc7e91ee51918" kindref="member">vNodes</ref>)</highlight></codeline>
<codeline lineno="871"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="872"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(pnode-&gt;<ref refid="class_c_node_1a7cda6efa6a9ef9db3eebe70fc3bdd45a" kindref="member">hSocket</ref><sp/>==<sp/>INVALID_SOCKET)</highlight></codeline>
<codeline lineno="873"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="874"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="875"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="sync_8h_1aca08e7299069c2d60b8aa726fc550612" kindref="member">TRY_LOCK</ref>(pnode-&gt;<ref refid="class_c_node_1a79edcac83fc5067567c7b41c26fcc56f" kindref="member">cs_vSend</ref>,<sp/>lockSend);</highlight></codeline>
<codeline lineno="876"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(lockSend)<sp/>{</highlight></codeline>
<codeline lineno="877"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>do<sp/>not<sp/>read,<sp/>if<sp/>draining<sp/>write<sp/>queue</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="878"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!pnode-&gt;<ref refid="class_c_node_1a68e5fb1a80fe4247aa577a3c9a74b399" kindref="member">vSendMsg</ref>.empty())</highlight></codeline>
<codeline lineno="879"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FD_SET(pnode-&gt;<ref refid="class_c_node_1a7cda6efa6a9ef9db3eebe70fc3bdd45a" kindref="member">hSocket</ref>,<sp/>&amp;fdsetSend);</highlight></codeline>
<codeline lineno="880"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="881"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FD_SET(pnode-&gt;<ref refid="class_c_node_1a7cda6efa6a9ef9db3eebe70fc3bdd45a" kindref="member">hSocket</ref>,<sp/>&amp;fdsetRecv);</highlight></codeline>
<codeline lineno="882"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FD_SET(pnode-&gt;<ref refid="class_c_node_1a7cda6efa6a9ef9db3eebe70fc3bdd45a" kindref="member">hSocket</ref>,<sp/>&amp;fdsetError);</highlight></codeline>
<codeline lineno="883"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>hSocketMax<sp/>=<sp/>max(hSocketMax,<sp/>pnode-&gt;<ref refid="class_c_node_1a7cda6efa6a9ef9db3eebe70fc3bdd45a" kindref="member">hSocket</ref>);</highlight></codeline>
<codeline lineno="884"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>have_fds<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="885"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="886"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="887"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="888"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="889"><highlight class="normal"></highlight></codeline>
<codeline lineno="890"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nSelect<sp/>=<sp/>select(have_fds<sp/>?<sp/>hSocketMax<sp/>+<sp/>1<sp/>:<sp/>0,</highlight></codeline>
<codeline lineno="891"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;fdsetRecv,<sp/>&amp;fdsetSend,<sp/>&amp;fdsetError,<sp/>&amp;timeout);</highlight></codeline>
<codeline lineno="892"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>boost::this_thread::interruption_point();</highlight></codeline>
<codeline lineno="893"><highlight class="normal"></highlight></codeline>
<codeline lineno="894"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(nSelect<sp/>==<sp/><ref refid="compat_8h_1a633b0396ff93d336a088412a190a5072" kindref="member">SOCKET_ERROR</ref>)</highlight></codeline>
<codeline lineno="895"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="896"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(have_fds)</highlight></codeline>
<codeline lineno="897"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="898"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nErr<sp/>=<sp/><ref refid="compat_8h_1a6d24fe3ab2906c21c373505ca244f90b" kindref="member">WSAGetLastError</ref>();</highlight></codeline>
<codeline lineno="899"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="util_8h_1afc02c0a4258fedfb316be612bb659ba8" kindref="member">LogPrintf</ref>(</highlight><highlight class="stringliteral">&quot;socket<sp/>select<sp/>error<sp/>%d\n&quot;</highlight><highlight class="normal">,<sp/>nErr);</highlight></codeline>
<codeline lineno="900"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;=<sp/>hSocketMax;<sp/>i++)</highlight></codeline>
<codeline lineno="901"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FD_SET(i,<sp/>&amp;fdsetRecv);</highlight></codeline>
<codeline lineno="902"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="903"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FD_ZERO(&amp;fdsetSend);</highlight></codeline>
<codeline lineno="904"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FD_ZERO(&amp;fdsetError);</highlight></codeline>
<codeline lineno="905"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="util_8h_1ac635182d3e845eda4af4fa5ab31609da" kindref="member">MilliSleep</ref>(timeout.tv_usec/1000);</highlight></codeline>
<codeline lineno="906"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="907"><highlight class="normal"></highlight></codeline>
<codeline lineno="908"><highlight class="normal"></highlight></codeline>
<codeline lineno="909"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="910"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Accept<sp/>new<sp/>connections</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="911"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="912"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>BOOST_FOREACH(<ref refid="compat_8h_1a26ef1173e2f2c0d3db27eca28397d723" kindref="member">SOCKET</ref><sp/>hListenSocket,<sp/>vhListenSocket)</highlight></codeline>
<codeline lineno="913"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(hListenSocket<sp/>!=<sp/>INVALID_SOCKET<sp/>&amp;&amp;<sp/>FD_ISSET(hListenSocket,<sp/>&amp;fdsetRecv))</highlight></codeline>
<codeline lineno="914"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="915"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">sockaddr_storage<sp/>sockaddr;</highlight></codeline>
<codeline lineno="916"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>socklen_t<sp/>len<sp/>=<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(sockaddr);</highlight></codeline>
<codeline lineno="917"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="compat_8h_1a26ef1173e2f2c0d3db27eca28397d723" kindref="member">SOCKET</ref><sp/>hSocket<sp/>=<sp/>accept(hListenSocket,<sp/>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/>sockaddr*)&amp;sockaddr,<sp/>&amp;len);</highlight></codeline>
<codeline lineno="918"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_c_address" kindref="compound">CAddress</ref><sp/>addr;</highlight></codeline>
<codeline lineno="919"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nInbound<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="920"><highlight class="normal"></highlight></codeline>
<codeline lineno="921"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(hSocket<sp/>!=<sp/>INVALID_SOCKET)</highlight></codeline>
<codeline lineno="922"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!addr.<ref refid="class_c_service_1a77782219f5d85f326b4c089cb2636e6f" kindref="member">SetSockAddr</ref>((</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/>sockaddr*)&amp;sockaddr))</highlight></codeline>
<codeline lineno="923"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="util_8h_1afc02c0a4258fedfb316be612bb659ba8" kindref="member">LogPrintf</ref>(</highlight><highlight class="stringliteral">&quot;Warning:<sp/>Unknown<sp/>socket<sp/>family\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="924"><highlight class="normal"></highlight></codeline>
<codeline lineno="925"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="926"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="sync_8h_1a911fe23f057c2fe5aad629162d6c99d0" kindref="member">LOCK</ref>(cs_vNodes);</highlight></codeline>
<codeline lineno="927"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>BOOST_FOREACH(<ref refid="class_c_node" kindref="compound">CNode</ref>*<sp/>pnode,<sp/><ref refid="net_8cpp_1aa5a11f8873e230cea77bc7e91ee51918" kindref="member">vNodes</ref>)</highlight></codeline>
<codeline lineno="928"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(pnode-&gt;<ref refid="class_c_node_1a64b2550ec558b6106ebc122d450ad35b" kindref="member">fInbound</ref>)</highlight></codeline>
<codeline lineno="929"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nInbound++;</highlight></codeline>
<codeline lineno="930"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="931"><highlight class="normal"></highlight></codeline>
<codeline lineno="932"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(hSocket<sp/>==<sp/>INVALID_SOCKET)</highlight></codeline>
<codeline lineno="933"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="934"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nErr<sp/>=<sp/><ref refid="compat_8h_1a6d24fe3ab2906c21c373505ca244f90b" kindref="member">WSAGetLastError</ref>();</highlight></codeline>
<codeline lineno="935"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(nErr<sp/>!=<sp/><ref refid="compat_8h_1a4ba23242bee4784b72a0a170e2f975a0" kindref="member">WSAEWOULDBLOCK</ref>)</highlight></codeline>
<codeline lineno="936"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="util_8h_1afc02c0a4258fedfb316be612bb659ba8" kindref="member">LogPrintf</ref>(</highlight><highlight class="stringliteral">&quot;socket<sp/>error<sp/>accept<sp/>failed:<sp/>%d\n&quot;</highlight><highlight class="normal">,<sp/>nErr);</highlight></codeline>
<codeline lineno="937"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="938"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(nInbound<sp/>&gt;=<sp/><ref refid="util_8cpp_1a24f685720bf40370e5bd2a192ad50cd8" kindref="member">GetArg</ref>(</highlight><highlight class="stringliteral">&quot;-maxconnections&quot;</highlight><highlight class="normal">,<sp/>200)<sp/>-<sp/>MAX_OUTBOUND_CONNECTIONS)</highlight></codeline>
<codeline lineno="939"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="940"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="compat_8h_1a5a3eb971b466278ada4f7f87399a537c" kindref="member">closesocket</ref>(hSocket);</highlight></codeline>
<codeline lineno="941"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="942"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="class_c_node_1aefa8b81afa53b4c6635dc4c6c024211a" kindref="member">CNode::IsBanned</ref>(addr))</highlight></codeline>
<codeline lineno="943"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="944"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="util_8h_1afc02c0a4258fedfb316be612bb659ba8" kindref="member">LogPrintf</ref>(</highlight><highlight class="stringliteral">&quot;connection<sp/>from<sp/>%s<sp/>dropped<sp/>(banned)\n&quot;</highlight><highlight class="normal">,<sp/>addr.<ref refid="class_c_service_1a336f9848fe9364e260c76499be0351a5" kindref="member">ToString</ref>());</highlight></codeline>
<codeline lineno="945"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="compat_8h_1a5a3eb971b466278ada4f7f87399a537c" kindref="member">closesocket</ref>(hSocket);</highlight></codeline>
<codeline lineno="946"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="947"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="948"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="949"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>LogPrint(</highlight><highlight class="stringliteral">&quot;net&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;accepted<sp/>connection<sp/>%s\n&quot;</highlight><highlight class="normal">,<sp/>addr.<ref refid="class_c_service_1a336f9848fe9364e260c76499be0351a5" kindref="member">ToString</ref>());</highlight></codeline>
<codeline lineno="950"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_c_node" kindref="compound">CNode</ref>*<sp/>pnode<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_c_node" kindref="compound">CNode</ref>(hSocket,<sp/>addr,<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="951"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pnode-&gt;AddRef();</highlight></codeline>
<codeline lineno="952"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="953"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="sync_8h_1a911fe23f057c2fe5aad629162d6c99d0" kindref="member">LOCK</ref>(cs_vNodes);</highlight></codeline>
<codeline lineno="954"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="net_8cpp_1aa5a11f8873e230cea77bc7e91ee51918" kindref="member">vNodes</ref>.push_back(pnode);</highlight></codeline>
<codeline lineno="955"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="956"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="957"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="958"><highlight class="normal"></highlight></codeline>
<codeline lineno="959"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>USE_NATIVE_I2P</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="960"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="961"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Accept<sp/>new<sp/>I2P<sp/>connections</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="962"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="963"><highlight class="normal"></highlight></codeline>
<codeline lineno="964"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>haveInvalids<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="965"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(std::vector&lt;SOCKET&gt;::iterator<sp/>it<sp/>=<sp/>vhI2PListenSocket.begin();<sp/>it<sp/>!=<sp/>vhI2PListenSocket.end();<sp/>++it)</highlight></codeline>
<codeline lineno="966"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="967"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="compat_8h_1a26ef1173e2f2c0d3db27eca28397d723" kindref="member">SOCKET</ref>&amp;<sp/>hI2PListenSocket<sp/>=<sp/>*it;</highlight></codeline>
<codeline lineno="968"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(hI2PListenSocket<sp/>==<sp/>INVALID_SOCKET)</highlight></codeline>
<codeline lineno="969"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="970"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(haveInvalids)</highlight></codeline>
<codeline lineno="971"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>it<sp/>=<sp/>vhI2PListenSocket.erase(it)<sp/>-<sp/>1;</highlight></codeline>
<codeline lineno="972"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="973"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>BindListenNativeI2P(hI2PListenSocket);</highlight></codeline>
<codeline lineno="974"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>haveInvalids<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="975"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="976"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(FD_ISSET(hI2PListenSocket,<sp/>&amp;fdsetRecv))</highlight></codeline>
<codeline lineno="977"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="978"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>bufSize<sp/>=<sp/>NATIVE_I2P_DESTINATION_SIZE<sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="979"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>pchBuf[bufSize];</highlight></codeline>
<codeline lineno="980"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>memset(pchBuf,<sp/>0,<sp/>bufSize);</highlight></codeline>
<codeline lineno="981"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nBytes<sp/>=<sp/>recv(hI2PListenSocket,<sp/>pchBuf,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(pchBuf),<sp/>MSG_DONTWAIT);</highlight></codeline>
<codeline lineno="982"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(nBytes<sp/>&gt;<sp/>0)</highlight></codeline>
<codeline lineno="983"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="984"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(nBytes<sp/>==<sp/>NATIVE_I2P_DESTINATION_SIZE<sp/>+<sp/>1)<sp/></highlight><highlight class="comment">//<sp/>we&apos;re<sp/>waiting<sp/>for<sp/>dest-hash<sp/>+<sp/>&apos;\n&apos;<sp/>symbol</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="985"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="986"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>incomingAddr(pchBuf,<sp/>pchBuf<sp/>+<sp/>NATIVE_I2P_DESTINATION_SIZE);</highlight></codeline>
<codeline lineno="987"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_c_address" kindref="compound">CAddress</ref><sp/>addr;</highlight></codeline>
<codeline lineno="988"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(addr.<ref refid="class_c_net_addr_1aa3e44dfd064d9d8da1cb48cdcb7dd231" kindref="member">SetSpecial</ref>(incomingAddr)<sp/>&amp;&amp;<sp/>addr.IsNativeI2P())</highlight></codeline>
<codeline lineno="989"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="990"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>AddIncomingConnection(hI2PListenSocket,<sp/>addr);</highlight></codeline>
<codeline lineno="991"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="992"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="993"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="994"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;Invalid<sp/>incoming<sp/>destination<sp/>hash<sp/>received<sp/>(%s)\n&quot;</highlight><highlight class="normal">,<sp/>incomingAddr.c_str());</highlight></codeline>
<codeline lineno="995"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="compat_8h_1a5a3eb971b466278ada4f7f87399a537c" kindref="member">closesocket</ref>(hI2PListenSocket);</highlight></codeline>
<codeline lineno="996"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="997"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="998"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="999"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1000"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;Invalid<sp/>incoming<sp/>destination<sp/>hash<sp/>size<sp/>received<sp/>(%d)\n&quot;</highlight><highlight class="normal">,<sp/>nBytes);</highlight></codeline>
<codeline lineno="1001"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="compat_8h_1a5a3eb971b466278ada4f7f87399a537c" kindref="member">closesocket</ref>(hI2PListenSocket);</highlight></codeline>
<codeline lineno="1002"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1003"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1004"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(nBytes<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="1005"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1006"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>socket<sp/>closed<sp/>gracefully</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1007"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;I2P<sp/>listen<sp/>socket<sp/>closed\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1008"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="compat_8h_1a5a3eb971b466278ada4f7f87399a537c" kindref="member">closesocket</ref>(hI2PListenSocket);</highlight></codeline>
<codeline lineno="1009"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1010"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(nBytes<sp/>&lt;<sp/>0)</highlight></codeline>
<codeline lineno="1011"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1012"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>error</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1013"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nErr<sp/>=<sp/><ref refid="compat_8h_1a6d24fe3ab2906c21c373505ca244f90b" kindref="member">WSAGetLastError</ref>();</highlight></codeline>
<codeline lineno="1014"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(nErr<sp/>==<sp/><ref refid="compat_8h_1a4ba23242bee4784b72a0a170e2f975a0" kindref="member">WSAEWOULDBLOCK</ref><sp/>||<sp/>nErr<sp/>==<sp/><ref refid="compat_8h_1a7ce1c171e08d68442124bf6189f8aec5" kindref="member">WSAEMSGSIZE</ref><sp/>||<sp/>nErr<sp/>==<sp/><ref refid="compat_8h_1aef81890a7d46cb9dda85df9b96cba6b1" kindref="member">WSAEINTR</ref><sp/>||<sp/>nErr<sp/>==<sp/><ref refid="compat_8h_1ada8711ffab59910a2732cfa4b7c24e29" kindref="member">WSAEINPROGRESS</ref>)</highlight></codeline>
<codeline lineno="1015"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1016"><highlight class="normal"></highlight></codeline>
<codeline lineno="1017"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;I2P<sp/>listen<sp/>socket<sp/>recv<sp/>error<sp/>%d\n&quot;</highlight><highlight class="normal">,<sp/>nErr);</highlight></codeline>
<codeline lineno="1018"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="compat_8h_1a5a3eb971b466278ada4f7f87399a537c" kindref="member">closesocket</ref>(hI2PListenSocket);</highlight></codeline>
<codeline lineno="1019"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1020"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>hI2PListenSocket<sp/>=<sp/><ref refid="compat_8h_1a26769957ec1a2beaf223f33b66ee64ab" kindref="member">INVALID_SOCKET</ref>;<sp/><sp/></highlight><highlight class="comment">//<sp/>we&apos;ve<sp/>saved<sp/>this<sp/>socket<sp/>in<sp/>a<sp/>CNode<sp/>or<sp/>closed<sp/>it,<sp/>so<sp/>we<sp/>can<sp/>safety<sp/>reset<sp/>it<sp/>anyway</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1021"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>BindListenNativeI2P(hI2PListenSocket);</highlight></codeline>
<codeline lineno="1022"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1023"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1024"><highlight class="normal"></highlight></codeline>
<codeline lineno="1025"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1026"><highlight class="normal"></highlight></codeline>
<codeline lineno="1027"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1028"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Service<sp/>each<sp/>socket</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1029"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1030"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vector&lt;CNode*&gt;<sp/>vNodesCopy;</highlight></codeline>
<codeline lineno="1031"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1032"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="sync_8h_1a911fe23f057c2fe5aad629162d6c99d0" kindref="member">LOCK</ref>(cs_vNodes);</highlight></codeline>
<codeline lineno="1033"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vNodesCopy<sp/>=<sp/><ref refid="net_8cpp_1aa5a11f8873e230cea77bc7e91ee51918" kindref="member">vNodes</ref>;</highlight></codeline>
<codeline lineno="1034"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>BOOST_FOREACH(<ref refid="class_c_node" kindref="compound">CNode</ref>*<sp/>pnode,<sp/>vNodesCopy)</highlight></codeline>
<codeline lineno="1035"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pnode-&gt;<ref refid="class_c_node_1afb65ed679f7bda59aab89e0f5afae292" kindref="member">AddRef</ref>();</highlight></codeline>
<codeline lineno="1036"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1037"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>BOOST_FOREACH(<ref refid="class_c_node" kindref="compound">CNode</ref>*<sp/>pnode,<sp/>vNodesCopy)</highlight></codeline>
<codeline lineno="1038"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1039"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>boost::this_thread::interruption_point();</highlight></codeline>
<codeline lineno="1040"><highlight class="normal"></highlight></codeline>
<codeline lineno="1041"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1042"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Receive</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1043"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1044"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(pnode-&gt;<ref refid="class_c_node_1a7cda6efa6a9ef9db3eebe70fc3bdd45a" kindref="member">hSocket</ref><sp/>==<sp/>INVALID_SOCKET)</highlight></codeline>
<codeline lineno="1045"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1046"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(FD_ISSET(pnode-&gt;<ref refid="class_c_node_1a7cda6efa6a9ef9db3eebe70fc3bdd45a" kindref="member">hSocket</ref>,<sp/>&amp;fdsetRecv)<sp/>||<sp/>FD_ISSET(pnode-&gt;<ref refid="class_c_node_1a7cda6efa6a9ef9db3eebe70fc3bdd45a" kindref="member">hSocket</ref>,<sp/>&amp;fdsetError))</highlight></codeline>
<codeline lineno="1047"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1048"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="sync_8h_1aca08e7299069c2d60b8aa726fc550612" kindref="member">TRY_LOCK</ref>(pnode-&gt;<ref refid="class_c_node_1abaebfaf8fff7e2e99366ae2bc69af6cd" kindref="member">cs_vRecvMsg</ref>,<sp/>lockRecv);</highlight></codeline>
<codeline lineno="1049"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(lockRecv)</highlight></codeline>
<codeline lineno="1050"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1051"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(pnode-&gt;<ref refid="class_c_node_1a2cff79a034258ba032257e993fc42e62" kindref="member">GetTotalRecvSize</ref>()<sp/>&gt;<sp/><ref refid="net_8h_1a7b020b8dc4437a88cf92570b82c55f25" kindref="member">ReceiveFloodSize</ref>())<sp/>{</highlight></codeline>
<codeline lineno="1052"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!pnode-&gt;<ref refid="class_c_node_1af2f7ea958313974e8a948292f060922e" kindref="member">fDisconnect</ref>)</highlight></codeline>
<codeline lineno="1053"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="util_8h_1afc02c0a4258fedfb316be612bb659ba8" kindref="member">LogPrintf</ref>(</highlight><highlight class="stringliteral">&quot;socket<sp/>recv<sp/>flood<sp/>control<sp/>disconnect<sp/>(%u<sp/>bytes)\n&quot;</highlight><highlight class="normal">,<sp/>pnode-&gt;<ref refid="class_c_node_1a2cff79a034258ba032257e993fc42e62" kindref="member">GetTotalRecvSize</ref>());</highlight></codeline>
<codeline lineno="1054"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pnode-&gt;<ref refid="class_c_node_1a63a6091a0b0fc0987d9436e1ec708423" kindref="member">CloseSocketDisconnect</ref>();</highlight></codeline>
<codeline lineno="1055"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1056"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1057"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>typical<sp/>socket<sp/>buffer<sp/>is<sp/>8K-64K</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1058"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>pchBuf[0x10000];</highlight></codeline>
<codeline lineno="1059"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nBytes<sp/>=<sp/>recv(pnode-&gt;<ref refid="class_c_node_1a7cda6efa6a9ef9db3eebe70fc3bdd45a" kindref="member">hSocket</ref>,<sp/>pchBuf,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(pchBuf),<sp/>MSG_DONTWAIT);</highlight></codeline>
<codeline lineno="1060"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(nBytes<sp/>&gt;<sp/>0)</highlight></codeline>
<codeline lineno="1061"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1062"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!pnode-&gt;<ref refid="class_c_node_1a84a10eb3aec7fdddafeb354527b50b75" kindref="member">ReceiveMsgBytes</ref>(pchBuf,<sp/>nBytes))</highlight></codeline>
<codeline lineno="1063"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pnode-&gt;<ref refid="class_c_node_1a63a6091a0b0fc0987d9436e1ec708423" kindref="member">CloseSocketDisconnect</ref>();</highlight></codeline>
<codeline lineno="1064"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pnode-&gt;<ref refid="class_c_node_1afb40f43a51ba686de93256727351af07" kindref="member">nLastRecv</ref><sp/>=<sp/><ref refid="util_8cpp_1a46fac5fba8ba905b5f9acb364f5d8c6f" kindref="member">GetTime</ref>();</highlight></codeline>
<codeline lineno="1065"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pnode-&gt;<ref refid="class_c_node_1a8bbe2a7052476d62acf7f0a5a9c5981b" kindref="member">nRecvBytes</ref><sp/>+=<sp/>nBytes;</highlight></codeline>
<codeline lineno="1066"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pnode-&gt;<ref refid="class_c_node_1af72b4b6e454c743af071896019ae1c69" kindref="member">RecordBytesRecv</ref>(nBytes);</highlight></codeline>
<codeline lineno="1067"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1068"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(nBytes<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="1069"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1070"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>socket<sp/>closed<sp/>gracefully</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1071"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!pnode-&gt;<ref refid="class_c_node_1af2f7ea958313974e8a948292f060922e" kindref="member">fDisconnect</ref>)</highlight></codeline>
<codeline lineno="1072"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>LogPrint(</highlight><highlight class="stringliteral">&quot;net&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;socket<sp/>closed\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1073"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pnode-&gt;<ref refid="class_c_node_1a63a6091a0b0fc0987d9436e1ec708423" kindref="member">CloseSocketDisconnect</ref>();</highlight></codeline>
<codeline lineno="1074"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1075"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(nBytes<sp/>&lt;<sp/>0)</highlight></codeline>
<codeline lineno="1076"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1077"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>error</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1078"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nErr<sp/>=<sp/><ref refid="compat_8h_1a6d24fe3ab2906c21c373505ca244f90b" kindref="member">WSAGetLastError</ref>();</highlight></codeline>
<codeline lineno="1079"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(nErr<sp/>!=<sp/><ref refid="compat_8h_1a4ba23242bee4784b72a0a170e2f975a0" kindref="member">WSAEWOULDBLOCK</ref><sp/>&amp;&amp;<sp/>nErr<sp/>!=<sp/><ref refid="compat_8h_1a7ce1c171e08d68442124bf6189f8aec5" kindref="member">WSAEMSGSIZE</ref><sp/>&amp;&amp;<sp/>nErr<sp/>!=<sp/><ref refid="compat_8h_1aef81890a7d46cb9dda85df9b96cba6b1" kindref="member">WSAEINTR</ref><sp/>&amp;&amp;<sp/>nErr<sp/>!=<sp/><ref refid="compat_8h_1ada8711ffab59910a2732cfa4b7c24e29" kindref="member">WSAEINPROGRESS</ref>)</highlight></codeline>
<codeline lineno="1080"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1081"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!pnode-&gt;<ref refid="class_c_node_1af2f7ea958313974e8a948292f060922e" kindref="member">fDisconnect</ref>)</highlight></codeline>
<codeline lineno="1082"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="util_8h_1afc02c0a4258fedfb316be612bb659ba8" kindref="member">LogPrintf</ref>(</highlight><highlight class="stringliteral">&quot;socket<sp/>recv<sp/>error<sp/>%d\n&quot;</highlight><highlight class="normal">,<sp/>nErr);</highlight></codeline>
<codeline lineno="1083"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pnode-&gt;<ref refid="class_c_node_1a63a6091a0b0fc0987d9436e1ec708423" kindref="member">CloseSocketDisconnect</ref>();</highlight></codeline>
<codeline lineno="1084"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1085"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1086"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1087"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1088"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1089"><highlight class="normal"></highlight></codeline>
<codeline lineno="1090"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1091"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Send</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1092"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1093"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(pnode-&gt;<ref refid="class_c_node_1a7cda6efa6a9ef9db3eebe70fc3bdd45a" kindref="member">hSocket</ref><sp/>==<sp/>INVALID_SOCKET)</highlight></codeline>
<codeline lineno="1094"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1095"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(FD_ISSET(pnode-&gt;<ref refid="class_c_node_1a7cda6efa6a9ef9db3eebe70fc3bdd45a" kindref="member">hSocket</ref>,<sp/>&amp;fdsetSend))</highlight></codeline>
<codeline lineno="1096"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1097"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="sync_8h_1aca08e7299069c2d60b8aa726fc550612" kindref="member">TRY_LOCK</ref>(pnode-&gt;<ref refid="class_c_node_1a79edcac83fc5067567c7b41c26fcc56f" kindref="member">cs_vSend</ref>,<sp/>lockSend);</highlight></codeline>
<codeline lineno="1098"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(lockSend)</highlight></codeline>
<codeline lineno="1099"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="net_8cpp_1aff6b7f2f213ce1e8d3aea65c41c99cb8" kindref="member">SocketSendData</ref>(pnode);</highlight></codeline>
<codeline lineno="1100"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1101"><highlight class="normal"></highlight></codeline>
<codeline lineno="1102"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1103"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Inactivity<sp/>checking</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1104"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1105"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stdint_8h_1adec1df1b8b51cb32b77e5b86fff46471" kindref="member">int64_t</ref><sp/>nTime<sp/>=<sp/><ref refid="util_8cpp_1a46fac5fba8ba905b5f9acb364f5d8c6f" kindref="member">GetTime</ref>();</highlight></codeline>
<codeline lineno="1106"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(nTime<sp/>-<sp/>pnode-&gt;<ref refid="class_c_node_1abb39393ef08cb5668ded6cb14cdbc147" kindref="member">nTimeConnected</ref><sp/>&gt;<sp/>60)</highlight></codeline>
<codeline lineno="1107"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1108"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(pnode-&gt;<ref refid="class_c_node_1afb40f43a51ba686de93256727351af07" kindref="member">nLastRecv</ref><sp/>==<sp/>0<sp/>||<sp/>pnode-&gt;<ref refid="class_c_node_1af39253ad525733ca64ab3fc785dfc4eb" kindref="member">nLastSend</ref><sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="1109"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1110"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>LogPrint(</highlight><highlight class="stringliteral">&quot;net&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;socket<sp/>no<sp/>message<sp/>in<sp/>first<sp/>60<sp/>seconds,<sp/>%d<sp/>%d\n&quot;</highlight><highlight class="normal">,<sp/>pnode-&gt;<ref refid="class_c_node_1afb40f43a51ba686de93256727351af07" kindref="member">nLastRecv</ref><sp/>!=<sp/>0,<sp/>pnode-&gt;<ref refid="class_c_node_1af39253ad525733ca64ab3fc785dfc4eb" kindref="member">nLastSend</ref><sp/>!=<sp/>0);</highlight></codeline>
<codeline lineno="1111"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pnode-&gt;<ref refid="class_c_node_1af2f7ea958313974e8a948292f060922e" kindref="member">fDisconnect</ref><sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1112"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1113"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(nTime<sp/>-<sp/>pnode-&gt;<ref refid="class_c_node_1af39253ad525733ca64ab3fc785dfc4eb" kindref="member">nLastSend</ref><sp/>&gt;<sp/>TIMEOUT_INTERVAL)</highlight></codeline>
<codeline lineno="1114"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1115"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="util_8h_1afc02c0a4258fedfb316be612bb659ba8" kindref="member">LogPrintf</ref>(</highlight><highlight class="stringliteral">&quot;socket<sp/>sending<sp/>timeout:<sp/>%ds\n&quot;</highlight><highlight class="normal">,<sp/>nTime<sp/>-<sp/>pnode-&gt;<ref refid="class_c_node_1af39253ad525733ca64ab3fc785dfc4eb" kindref="member">nLastSend</ref>);</highlight></codeline>
<codeline lineno="1116"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pnode-&gt;<ref refid="class_c_node_1af2f7ea958313974e8a948292f060922e" kindref="member">fDisconnect</ref><sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1117"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1118"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(pnode-&gt;<ref refid="class_c_node_1a9a077fbd09ddee1d81f027bc01a4ec68" kindref="member">nPingNonceSent</ref><sp/>&amp;&amp;<sp/>pnode-&gt;<ref refid="class_c_node_1a8352aa332af726ff117fb890c4dd3869" kindref="member">nPingUsecStart</ref><sp/>+<sp/>TIMEOUT_INTERVAL<sp/>*<sp/>1000000<sp/>&lt;<sp/><ref refid="util_8h_1a0c5a06b50cd805b1923552114494c029" kindref="member">GetTimeMicros</ref>())</highlight></codeline>
<codeline lineno="1119"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1120"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="util_8h_1afc02c0a4258fedfb316be612bb659ba8" kindref="member">LogPrintf</ref>(</highlight><highlight class="stringliteral">&quot;ping<sp/>timeout:<sp/>%fs\n&quot;</highlight><highlight class="normal">,<sp/>0.000001<sp/>*<sp/>(<ref refid="util_8h_1a0c5a06b50cd805b1923552114494c029" kindref="member">GetTimeMicros</ref>()<sp/>-<sp/>pnode-&gt;<ref refid="class_c_node_1a8352aa332af726ff117fb890c4dd3869" kindref="member">nPingUsecStart</ref>));</highlight></codeline>
<codeline lineno="1121"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pnode-&gt;<ref refid="class_c_node_1af2f7ea958313974e8a948292f060922e" kindref="member">fDisconnect</ref><sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1122"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1123"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1124"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1125"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1126"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="sync_8h_1a911fe23f057c2fe5aad629162d6c99d0" kindref="member">LOCK</ref>(cs_vNodes);</highlight></codeline>
<codeline lineno="1127"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>BOOST_FOREACH(<ref refid="class_c_node" kindref="compound">CNode</ref>*<sp/>pnode,<sp/>vNodesCopy)</highlight></codeline>
<codeline lineno="1128"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pnode-&gt;<ref refid="class_c_node_1af804bf7c7f9794e80a3b916e1befece9" kindref="member">Release</ref>();</highlight></codeline>
<codeline lineno="1129"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1130"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1131"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1132"><highlight class="normal"></highlight></codeline>
<codeline lineno="1133"><highlight class="normal"></highlight></codeline>
<codeline lineno="1134"><highlight class="normal"></highlight></codeline>
<codeline lineno="1135"><highlight class="normal"></highlight></codeline>
<codeline lineno="1136"><highlight class="normal"></highlight></codeline>
<codeline lineno="1137"><highlight class="normal"></highlight></codeline>
<codeline lineno="1138"><highlight class="normal"></highlight></codeline>
<codeline lineno="1139"><highlight class="normal"></highlight></codeline>
<codeline lineno="1140"><highlight class="normal"></highlight></codeline>
<codeline lineno="1141"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>USE_UPNP</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1142"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ThreadMapPort()</highlight></codeline>
<codeline lineno="1143"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1144"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>port<sp/>=<sp/><ref refid="tinyformat_8h_1a56c674871a61baaad36ad52238c08857" kindref="member">strprintf</ref>(</highlight><highlight class="stringliteral">&quot;%u&quot;</highlight><highlight class="normal">,<sp/><ref refid="net_8cpp_1af6d341a24d761a509fca026458cf2f72" kindref="member">GetListenPort</ref>());</highlight></codeline>
<codeline lineno="1145"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<sp/>multicastif<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1146"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<sp/>minissdpdpath<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1147"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">UPNPDev<sp/>*<sp/>devlist<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1148"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>lanaddr[64];</highlight></codeline>
<codeline lineno="1149"><highlight class="normal"></highlight></codeline>
<codeline lineno="1150"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>UPNPDISCOVER_SUCCESS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1151"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>miniupnpc<sp/>1.5<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1152"><highlight class="normal"><sp/><sp/><sp/><sp/>devlist<sp/>=<sp/>upnpDiscover(2000,<sp/>multicastif,<sp/>minissdpdpath,<sp/>0);</highlight></codeline>
<codeline lineno="1153"><highlight class="normal"></highlight><highlight class="preprocessor">#elif<sp/>MINIUPNPC_API_VERSION<sp/>&lt;<sp/>14</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1154"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>miniupnpc<sp/>1.6<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1155"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>error<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1156"><highlight class="normal"><sp/><sp/><sp/><sp/>devlist<sp/>=<sp/>upnpDiscover(2000,<sp/>multicastif,<sp/>minissdpdpath,<sp/>0,<sp/>0,<sp/>&amp;error);</highlight></codeline>
<codeline lineno="1157"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1158"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>miniupnpc<sp/>1.9.20150730<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1159"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>error<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1160"><highlight class="normal"><sp/><sp/><sp/><sp/>devlist<sp/>=<sp/>upnpDiscover(2000,<sp/>multicastif,<sp/>minissdpdpath,<sp/>0,<sp/>0,<sp/>2,<sp/>&amp;error);</highlight></codeline>
<codeline lineno="1161"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1162"><highlight class="normal"></highlight></codeline>
<codeline lineno="1163"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">UPNPUrls<sp/>urls;</highlight></codeline>
<codeline lineno="1164"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">IGDdatas<sp/>data;</highlight></codeline>
<codeline lineno="1165"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>r;</highlight></codeline>
<codeline lineno="1166"><highlight class="normal"></highlight></codeline>
<codeline lineno="1167"><highlight class="normal"><sp/><sp/><sp/><sp/>r<sp/>=<sp/>UPNP_GetValidIGD(devlist,<sp/>&amp;urls,<sp/>&amp;data,<sp/>lanaddr,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(lanaddr));</highlight></codeline>
<codeline lineno="1168"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(r<sp/>==<sp/>1)</highlight></codeline>
<codeline lineno="1169"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1170"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="net_8cpp_1a37089835ec27ad8bf945a458708165b9" kindref="member">fDiscover</ref>)<sp/>{</highlight></codeline>
<codeline lineno="1171"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>externalIPAddress[40];</highlight></codeline>
<codeline lineno="1172"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>r<sp/>=<sp/>UPNP_GetExternalIPAddress(urls.controlURL,<sp/>data.first.servicetype,<sp/>externalIPAddress);</highlight></codeline>
<codeline lineno="1173"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(r<sp/>!=<sp/>UPNPCOMMAND_SUCCESS)</highlight></codeline>
<codeline lineno="1174"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="util_8h_1afc02c0a4258fedfb316be612bb659ba8" kindref="member">LogPrintf</ref>(</highlight><highlight class="stringliteral">&quot;UPnP:<sp/>GetExternalIPAddress()<sp/>returned<sp/>%d\n&quot;</highlight><highlight class="normal">,<sp/>r);</highlight></codeline>
<codeline lineno="1175"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1176"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1177"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(externalIPAddress[0])</highlight></codeline>
<codeline lineno="1178"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1179"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="util_8h_1afc02c0a4258fedfb316be612bb659ba8" kindref="member">LogPrintf</ref>(</highlight><highlight class="stringliteral">&quot;UPnP:<sp/>ExternalIPAddress<sp/>=<sp/>%s\n&quot;</highlight><highlight class="normal">,<sp/>externalIPAddress);</highlight></codeline>
<codeline lineno="1180"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="net_8cpp_1abb92a02eecc581e8927c8a6e31968645" kindref="member">AddLocal</ref>(<ref refid="class_c_net_addr" kindref="compound">CNetAddr</ref>(externalIPAddress),<sp/><ref refid="net_8h_1a385c44f6fb256e5716a2302a5b940388aa28117b0df136a5a8b96c5e887e182a8" kindref="member">LOCAL_UPNP</ref>);</highlight></codeline>
<codeline lineno="1181"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1182"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1183"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="util_8h_1afc02c0a4258fedfb316be612bb659ba8" kindref="member">LogPrintf</ref>(</highlight><highlight class="stringliteral">&quot;UPnP:<sp/>GetExternalIPAddress<sp/>failed.\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1184"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1185"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1186"><highlight class="normal"></highlight></codeline>
<codeline lineno="1187"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>strDesc<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;DarkSilk<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/><ref refid="util_8cpp_1ac2170cca99e9347171fca492ae533d96" kindref="member">FormatFullVersion</ref>();</highlight></codeline>
<codeline lineno="1188"><highlight class="normal"></highlight></codeline>
<codeline lineno="1189"><highlight class="normal"></highlight><highlight class="keywordflow">try</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1190"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">true</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="1191"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>UPNPDISCOVER_SUCCESS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1192"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>miniupnpc<sp/>1.5<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1193"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>r<sp/>=<sp/>UPNP_AddPortMapping(urls.controlURL,<sp/>data.first.servicetype,</highlight></codeline>
<codeline lineno="1194"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>port.c_str(),<sp/>port.c_str(),<sp/>lanaddr,<sp/>strDesc.c_str(),<sp/></highlight><highlight class="stringliteral">&quot;TCP&quot;</highlight><highlight class="normal">,<sp/>0);</highlight></codeline>
<codeline lineno="1195"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1196"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>miniupnpc<sp/>1.6<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1197"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>r<sp/>=<sp/>UPNP_AddPortMapping(urls.controlURL,<sp/>data.first.servicetype,</highlight></codeline>
<codeline lineno="1198"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>port.c_str(),<sp/>port.c_str(),<sp/>lanaddr,<sp/>strDesc.c_str(),<sp/></highlight><highlight class="stringliteral">&quot;TCP&quot;</highlight><highlight class="normal">,<sp/>0,<sp/></highlight><highlight class="stringliteral">&quot;0&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1199"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1200"><highlight class="normal"></highlight></codeline>
<codeline lineno="1201"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(r!=UPNPCOMMAND_SUCCESS)</highlight></codeline>
<codeline lineno="1202"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="util_8h_1afc02c0a4258fedfb316be612bb659ba8" kindref="member">LogPrintf</ref>(</highlight><highlight class="stringliteral">&quot;AddPortMapping(%s,<sp/>%s,<sp/>%s)<sp/>failed<sp/>with<sp/>code<sp/>%d<sp/>(%s)\n&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="1203"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>port,<sp/>port,<sp/>lanaddr,<sp/>r,<sp/>strupnperror(r));</highlight></codeline>
<codeline lineno="1204"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1205"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="util_8h_1afc02c0a4258fedfb316be612bb659ba8" kindref="member">LogPrintf</ref>(</highlight><highlight class="stringliteral">&quot;UPnP<sp/>Port<sp/>Mapping<sp/>successful.\n&quot;</highlight><highlight class="normal">);;</highlight></codeline>
<codeline lineno="1206"><highlight class="normal"></highlight></codeline>
<codeline lineno="1207"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="util_8h_1ac635182d3e845eda4af4fa5ab31609da" kindref="member">MilliSleep</ref>(20*60*1000);<sp/></highlight><highlight class="comment">//<sp/>Refresh<sp/>every<sp/>20<sp/>minutes</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1208"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1209"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1210"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">catch</highlight><highlight class="normal"><sp/>(boost::thread_interrupted)</highlight></codeline>
<codeline lineno="1211"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1212"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>r<sp/>=<sp/>UPNP_DeletePortMapping(urls.controlURL,<sp/>data.first.servicetype,<sp/>port.c_str(),<sp/></highlight><highlight class="stringliteral">&quot;TCP&quot;</highlight><highlight class="normal">,<sp/>0);</highlight></codeline>
<codeline lineno="1213"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="util_8h_1afc02c0a4258fedfb316be612bb659ba8" kindref="member">LogPrintf</ref>(</highlight><highlight class="stringliteral">&quot;UPNP_DeletePortMapping()<sp/>returned<sp/>:<sp/>%d\n&quot;</highlight><highlight class="normal">,<sp/>r);</highlight></codeline>
<codeline lineno="1214"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>freeUPNPDevlist(devlist);<sp/>devlist<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1215"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FreeUPNPUrls(&amp;urls);</highlight></codeline>
<codeline lineno="1216"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1217"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1218"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1219"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="util_8h_1afc02c0a4258fedfb316be612bb659ba8" kindref="member">LogPrintf</ref>(</highlight><highlight class="stringliteral">&quot;No<sp/>valid<sp/>UPnP<sp/>IGDs<sp/>found\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1220"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>freeUPNPDevlist(devlist);<sp/>devlist<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1221"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(r<sp/>!=<sp/>0)</highlight></codeline>
<codeline lineno="1222"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FreeUPNPUrls(&amp;urls);</highlight></codeline>
<codeline lineno="1223"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1224"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1225"><highlight class="normal"></highlight></codeline>
<codeline lineno="1226"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="net_8cpp_1a93e4e6fbe288b6e882e697918695f88e" kindref="member">MapPort</ref>(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>fUseUPnP)</highlight></codeline>
<codeline lineno="1227"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1228"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>boost::thread*<sp/>upnp_thread<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="1229"><highlight class="normal"></highlight></codeline>
<codeline lineno="1230"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fUseUPnP)</highlight></codeline>
<codeline lineno="1231"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1232"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(upnp_thread)<sp/>{</highlight></codeline>
<codeline lineno="1233"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>upnp_thread-&gt;interrupt();</highlight></codeline>
<codeline lineno="1234"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>upnp_thread-&gt;join();</highlight></codeline>
<codeline lineno="1235"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>upnp_thread;</highlight></codeline>
<codeline lineno="1236"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1237"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>upnp_thread<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>boost::thread(boost::bind(&amp;<ref refid="util_8h_1ac481a378af0229bf71e3d9fee7b938ad" kindref="member">TraceThread</ref>&lt;</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>(*)()&gt;,<sp/></highlight><highlight class="stringliteral">&quot;upnp&quot;</highlight><highlight class="normal">,<sp/>&amp;ThreadMapPort));</highlight></codeline>
<codeline lineno="1238"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1239"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(upnp_thread)<sp/>{</highlight></codeline>
<codeline lineno="1240"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>upnp_thread-&gt;interrupt();</highlight></codeline>
<codeline lineno="1241"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>upnp_thread-&gt;join();</highlight></codeline>
<codeline lineno="1242"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>upnp_thread;</highlight></codeline>
<codeline lineno="1243"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>upnp_thread<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="1244"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1245"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1246"><highlight class="normal"></highlight></codeline>
<codeline lineno="1247"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1248" refid="net_8h_1aa203b76a8cc98a5ec314c19a008b478d" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="net_8cpp_1a93e4e6fbe288b6e882e697918695f88e" kindref="member">MapPort</ref>(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="1249"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1250"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Intentionally<sp/>left<sp/>blank.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1251"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1252"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1253"><highlight class="normal"></highlight></codeline>
<codeline lineno="1254"><highlight class="normal"></highlight></codeline>
<codeline lineno="1255"><highlight class="normal"></highlight></codeline>
<codeline lineno="1256"><highlight class="normal"></highlight></codeline>
<codeline lineno="1257"><highlight class="normal"></highlight></codeline>
<codeline lineno="1258"><highlight class="normal"></highlight></codeline>
<codeline lineno="1259" refid="net_8cpp_1ab2d8883b5524ec7b80d3b9535e73a3ed" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="net_8cpp_1ab2d8883b5524ec7b80d3b9535e73a3ed" kindref="member">ThreadDNSAddressSeed</ref>()</highlight></codeline>
<codeline lineno="1260"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1261"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>goal:<sp/>only<sp/>query<sp/>DNS<sp/>seeds<sp/>if<sp/>address<sp/>need<sp/>is<sp/>acute</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1262"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((addrman.<ref refid="class_c_addr_man_1a15b8e72f55344b6fbd1bc1bda3cdc5bc" kindref="member">size</ref>()<sp/>&gt;<sp/>0)<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="1263"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(!<ref refid="util_8cpp_1a64d956f1dda7f9a80ab5d594532b906d" kindref="member">GetBoolArg</ref>(</highlight><highlight class="stringliteral">&quot;-forcednsseed&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">)))<sp/>{</highlight></codeline>
<codeline lineno="1264"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="util_8h_1ac635182d3e845eda4af4fa5ab31609da" kindref="member">MilliSleep</ref>(11<sp/>*<sp/>1000);</highlight></codeline>
<codeline lineno="1265"><highlight class="normal"></highlight></codeline>
<codeline lineno="1266"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="sync_8h_1a911fe23f057c2fe5aad629162d6c99d0" kindref="member">LOCK</ref>(cs_vNodes);</highlight></codeline>
<codeline lineno="1267"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="net_8cpp_1aa5a11f8873e230cea77bc7e91ee51918" kindref="member">vNodes</ref>.size()<sp/>&gt;=<sp/>2)<sp/>{</highlight></codeline>
<codeline lineno="1268"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="util_8h_1afc02c0a4258fedfb316be612bb659ba8" kindref="member">LogPrintf</ref>(</highlight><highlight class="stringliteral">&quot;P2P<sp/>peers<sp/>available.<sp/>Skipped<sp/>DNS<sp/>seeding.\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1269"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1270"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1271"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1272"><highlight class="normal"></highlight></codeline>
<codeline lineno="1273"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>vector&lt;CDNSSeedData&gt;<sp/>&amp;vSeeds<sp/>=<sp/><ref refid="chainparams_8cpp_1ace5c5b706d71a324a417dd2db394fd4a" kindref="member">Params</ref>().<ref refid="class_c_chain_params_1a6ad644576193885d2be4959abd2a7317" kindref="member">DNSSeeds</ref>();</highlight></codeline>
<codeline lineno="1274"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>found<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1275"><highlight class="normal"></highlight></codeline>
<codeline lineno="1276"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="util_8h_1afc02c0a4258fedfb316be612bb659ba8" kindref="member">LogPrintf</ref>(</highlight><highlight class="stringliteral">&quot;Loading<sp/>addresses<sp/>from<sp/>DNS<sp/>seeds<sp/>(could<sp/>take<sp/>a<sp/>while)\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1277"><highlight class="normal"></highlight></codeline>
<codeline lineno="1278"><highlight class="normal"><sp/><sp/><sp/><sp/>BOOST_FOREACH(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_c_d_n_s_seed_data" kindref="compound">CDNSSeedData</ref><sp/>&amp;seed,<sp/>vSeeds)<sp/>{</highlight></codeline>
<codeline lineno="1279"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="netbase_8cpp_1a4a0df7ebe15572508e61c38406e49732" kindref="member">HaveNameProxy</ref>())<sp/>{</highlight></codeline>
<codeline lineno="1280"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="net_8cpp_1a5230a9dcbf8f7663e386b358f8d2fdc8" kindref="member">AddOneShot</ref>(seed.<ref refid="struct_c_d_n_s_seed_data_1a19b30302d59eafcd286a7e7609fc0073" kindref="member">host</ref>);</highlight></codeline>
<codeline lineno="1281"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1282"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vector&lt;CNetAddr&gt;<sp/>vIPs;</highlight></codeline>
<codeline lineno="1283"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vector&lt;CAddress&gt;<sp/>vAdd;</highlight></codeline>
<codeline lineno="1284"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="netbase_8cpp_1a3cdc8ba9f8d72752ff5cdd1e7407cdef" kindref="member">LookupHost</ref>(seed.<ref refid="struct_c_d_n_s_seed_data_1a19b30302d59eafcd286a7e7609fc0073" kindref="member">host</ref>.c_str(),<sp/>vIPs))</highlight></codeline>
<codeline lineno="1285"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1286"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>BOOST_FOREACH(<ref refid="class_c_net_addr" kindref="compound">CNetAddr</ref>&amp;<sp/>ip,<sp/>vIPs)</highlight></codeline>
<codeline lineno="1287"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1288"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nOneDay<sp/>=<sp/>24*3600;</highlight></codeline>
<codeline lineno="1289"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_c_address" kindref="compound">CAddress</ref><sp/>addr<sp/>=<sp/><ref refid="class_c_address" kindref="compound">CAddress</ref>(<ref refid="class_c_service" kindref="compound">CService</ref>(ip,<sp/><ref refid="chainparams_8cpp_1ace5c5b706d71a324a417dd2db394fd4a" kindref="member">Params</ref>().GetDefaultPort()));</highlight></codeline>
<codeline lineno="1290"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>addr.<ref refid="class_c_address_1ac1c44aac968b11f90ce529b133ae4e9b" kindref="member">nTime</ref><sp/>=<sp/><ref refid="util_8cpp_1a46fac5fba8ba905b5f9acb364f5d8c6f" kindref="member">GetTime</ref>()<sp/>-<sp/>3*nOneDay<sp/>-<sp/><ref refid="util_8cpp_1a27d9149d522b1fa87d84e5e9ca902aef" kindref="member">GetRand</ref>(4*nOneDay);<sp/></highlight><highlight class="comment">//<sp/>use<sp/>a<sp/>random<sp/>age<sp/>between<sp/>3<sp/>and<sp/>7<sp/>days<sp/>old</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1291"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vAdd.push_back(addr);</highlight></codeline>
<codeline lineno="1292"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>found++;</highlight></codeline>
<codeline lineno="1293"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1294"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1295"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>addrman.<ref refid="class_c_addr_man_1a03fcc7109b5f014760dc50a81f68c5ec" kindref="member">Add</ref>(vAdd,<sp/><ref refid="class_c_net_addr" kindref="compound">CNetAddr</ref>(seed.<ref refid="struct_c_d_n_s_seed_data_1afd774485f34a942ee37dc2182f9ffadf" kindref="member">name</ref>,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="1296"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1297"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1298"><highlight class="normal"></highlight></codeline>
<codeline lineno="1299"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="util_8h_1afc02c0a4258fedfb316be612bb659ba8" kindref="member">LogPrintf</ref>(</highlight><highlight class="stringliteral">&quot;%d<sp/>addresses<sp/>found<sp/>from<sp/>DNS<sp/>seeds\n&quot;</highlight><highlight class="normal">,<sp/>found);</highlight></codeline>
<codeline lineno="1300"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1301"><highlight class="normal"></highlight></codeline>
<codeline lineno="1302"><highlight class="normal"></highlight></codeline>
<codeline lineno="1303"><highlight class="normal"></highlight></codeline>
<codeline lineno="1304"><highlight class="normal"></highlight></codeline>
<codeline lineno="1305"><highlight class="normal"></highlight></codeline>
<codeline lineno="1306"><highlight class="normal"></highlight></codeline>
<codeline lineno="1307"><highlight class="normal"></highlight></codeline>
<codeline lineno="1308"><highlight class="normal"></highlight></codeline>
<codeline lineno="1309"><highlight class="normal"></highlight></codeline>
<codeline lineno="1310" refid="net_8cpp_1ab8b5323f5ef61499582a5a6e53b49b6e" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="net_8cpp_1ab8b5323f5ef61499582a5a6e53b49b6e" kindref="member">DumpAddresses</ref>()</highlight></codeline>
<codeline lineno="1311"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1312"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="stdint_8h_1adec1df1b8b51cb32b77e5b86fff46471" kindref="member">int64_t</ref><sp/>nStart<sp/>=<sp/><ref refid="util_8h_1a139d0fe6387b9e230a9b8bb12d9b43b9" kindref="member">GetTimeMillis</ref>();</highlight></codeline>
<codeline lineno="1313"><highlight class="normal"></highlight></codeline>
<codeline lineno="1314"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_c_addr_d_b" kindref="compound">CAddrDB</ref><sp/>adb;</highlight></codeline>
<codeline lineno="1315"><highlight class="normal"><sp/><sp/><sp/><sp/>adb.<ref refid="class_c_addr_d_b_1aaec90dba59cd69a2f25bc5630a1dde39" kindref="member">Write</ref>(addrman);</highlight></codeline>
<codeline lineno="1316"><highlight class="normal"></highlight></codeline>
<codeline lineno="1317"><highlight class="normal"><sp/><sp/><sp/><sp/>LogPrint(</highlight><highlight class="stringliteral">&quot;net&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Flushed<sp/>%d<sp/>addresses<sp/>to<sp/>peers.dat<sp/><sp/>%dms\n&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="1318"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>addrman.<ref refid="class_c_addr_man_1a15b8e72f55344b6fbd1bc1bda3cdc5bc" kindref="member">size</ref>(),<sp/><ref refid="util_8h_1a139d0fe6387b9e230a9b8bb12d9b43b9" kindref="member">GetTimeMillis</ref>()<sp/>-<sp/>nStart);</highlight></codeline>
<codeline lineno="1319"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1320"><highlight class="normal"></highlight></codeline>
<codeline lineno="1321"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>ProcessOneShot()</highlight></codeline>
<codeline lineno="1322"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1323"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>strDest;</highlight></codeline>
<codeline lineno="1324"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1325"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="sync_8h_1a911fe23f057c2fe5aad629162d6c99d0" kindref="member">LOCK</ref>(cs_vOneShots);</highlight></codeline>
<codeline lineno="1326"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(vOneShots.empty())</highlight></codeline>
<codeline lineno="1327"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1328"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>strDest<sp/>=<sp/>vOneShots.front();</highlight></codeline>
<codeline lineno="1329"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vOneShots.pop_front();</highlight></codeline>
<codeline lineno="1330"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1331"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_c_address" kindref="compound">CAddress</ref><sp/>addr;</highlight></codeline>
<codeline lineno="1332"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_c_semaphore_grant" kindref="compound">CSemaphoreGrant</ref><sp/>grant(*semOutbound,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1333"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(grant)<sp/>{</highlight></codeline>
<codeline lineno="1334"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="net_8cpp_1aa19cb8e6cf23a990e585f2bbf9ece276" kindref="member">OpenNetworkConnection</ref>(addr,<sp/>&amp;grant,<sp/>strDest.c_str(),<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">))</highlight></codeline>
<codeline lineno="1335"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="net_8cpp_1a5230a9dcbf8f7663e386b358f8d2fdc8" kindref="member">AddOneShot</ref>(strDest);</highlight></codeline>
<codeline lineno="1336"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1337"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1338"><highlight class="normal"></highlight></codeline>
<codeline lineno="1339" refid="net_8cpp_1a3b4720330e61127963a43df26b80f804" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="net_8cpp_1a3b4720330e61127963a43df26b80f804" kindref="member">ThreadOpenConnections</ref>()</highlight></codeline>
<codeline lineno="1340"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1341"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Connect<sp/>to<sp/>specific<sp/>addresses</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1342"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="util_8cpp_1a0502b74b88db99500ee21dcb446311e5" kindref="member">mapArgs</ref>.count(</highlight><highlight class="stringliteral">&quot;-connect&quot;</highlight><highlight class="normal">)<sp/>&amp;&amp;<sp/><ref refid="util_8cpp_1a34d23466f937db99d45620bc7ea5d2fb" kindref="member">mapMultiArgs</ref>[</highlight><highlight class="stringliteral">&quot;-connect&quot;</highlight><highlight class="normal">].size()<sp/>&gt;<sp/>0)</highlight></codeline>
<codeline lineno="1343"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1344"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<ref refid="stdint_8h_1adec1df1b8b51cb32b77e5b86fff46471" kindref="member">int64_t</ref><sp/>nLoop<sp/>=<sp/>0;;<sp/>nLoop++)</highlight></codeline>
<codeline lineno="1345"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1346"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ProcessOneShot();</highlight></codeline>
<codeline lineno="1347"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>BOOST_FOREACH(</highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>strAddr,<sp/><ref refid="util_8cpp_1a34d23466f937db99d45620bc7ea5d2fb" kindref="member">mapMultiArgs</ref>[</highlight><highlight class="stringliteral">&quot;-connect&quot;</highlight><highlight class="normal">])</highlight></codeline>
<codeline lineno="1348"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1349"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_c_address" kindref="compound">CAddress</ref><sp/>addr;</highlight></codeline>
<codeline lineno="1350"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="net_8cpp_1aa19cb8e6cf23a990e585f2bbf9ece276" kindref="member">OpenNetworkConnection</ref>(addr,<sp/>NULL,<sp/>strAddr.c_str());</highlight></codeline>
<codeline lineno="1351"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>10<sp/>&amp;&amp;<sp/>i<sp/>&lt;<sp/>nLoop;<sp/>i++)</highlight></codeline>
<codeline lineno="1352"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1353"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="util_8h_1ac635182d3e845eda4af4fa5ab31609da" kindref="member">MilliSleep</ref>(500);</highlight></codeline>
<codeline lineno="1354"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1355"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1356"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="util_8h_1ac635182d3e845eda4af4fa5ab31609da" kindref="member">MilliSleep</ref>(500);</highlight></codeline>
<codeline lineno="1357"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1358"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1359"><highlight class="normal"></highlight></codeline>
<codeline lineno="1360"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Initiate<sp/>network<sp/>connections</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1361"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="stdint_8h_1adec1df1b8b51cb32b77e5b86fff46471" kindref="member">int64_t</ref><sp/>nStart<sp/>=<sp/><ref refid="util_8cpp_1a46fac5fba8ba905b5f9acb364f5d8c6f" kindref="member">GetTime</ref>();</highlight></codeline>
<codeline lineno="1362"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">true</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="1363"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1364"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ProcessOneShot();</highlight></codeline>
<codeline lineno="1365"><highlight class="normal"></highlight></codeline>
<codeline lineno="1366"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="util_8h_1ac635182d3e845eda4af4fa5ab31609da" kindref="member">MilliSleep</ref>(500);</highlight></codeline>
<codeline lineno="1367"><highlight class="normal"></highlight></codeline>
<codeline lineno="1368"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_c_semaphore_grant" kindref="compound">CSemaphoreGrant</ref><sp/>grant(*semOutbound);</highlight></codeline>
<codeline lineno="1369"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>boost::this_thread::interruption_point();</highlight></codeline>
<codeline lineno="1370"><highlight class="normal"></highlight></codeline>
<codeline lineno="1371"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Add<sp/>seed<sp/>nodes<sp/>if<sp/>DNS<sp/>seeds<sp/>are<sp/>all<sp/>down<sp/>(an<sp/>infrastructure<sp/>attack?).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1372"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(addrman.<ref refid="class_c_addr_man_1a15b8e72f55344b6fbd1bc1bda3cdc5bc" kindref="member">size</ref>()<sp/>==<sp/>0<sp/>&amp;&amp;<sp/>(<ref refid="util_8cpp_1a46fac5fba8ba905b5f9acb364f5d8c6f" kindref="member">GetTime</ref>()<sp/>-<sp/>nStart<sp/>&gt;<sp/>60))<sp/>{</highlight></codeline>
<codeline lineno="1373"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>done<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1374"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!done)<sp/>{</highlight></codeline>
<codeline lineno="1375"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="util_8h_1afc02c0a4258fedfb316be612bb659ba8" kindref="member">LogPrintf</ref>(</highlight><highlight class="stringliteral">&quot;Adding<sp/>fixed<sp/>seed<sp/>nodes<sp/>as<sp/>DNS<sp/>doesn&apos;t<sp/>seem<sp/>to<sp/>be<sp/>available.\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1376"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>addrman.<ref refid="class_c_addr_man_1a03fcc7109b5f014760dc50a81f68c5ec" kindref="member">Add</ref>(<ref refid="chainparams_8cpp_1ace5c5b706d71a324a417dd2db394fd4a" kindref="member">Params</ref>().FixedSeeds(),<sp/><ref refid="class_c_net_addr" kindref="compound">CNetAddr</ref>(</highlight><highlight class="stringliteral">&quot;127.0.0.1&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="1377"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>done<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1378"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1379"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1380"><highlight class="normal"></highlight></codeline>
<codeline lineno="1381"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1382"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Choose<sp/>an<sp/>address<sp/>to<sp/>connect<sp/>to<sp/>based<sp/>on<sp/>most<sp/>recently<sp/>seen</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1383"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1384"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_c_address" kindref="compound">CAddress</ref><sp/>addrConnect;</highlight></codeline>
<codeline lineno="1385"><highlight class="normal"></highlight></codeline>
<codeline lineno="1386"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Only<sp/>connect<sp/>out<sp/>to<sp/>one<sp/>peer<sp/>per<sp/>network<sp/>group<sp/>(/16<sp/>for<sp/>IPv4).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1387"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Do<sp/>this<sp/>here<sp/>so<sp/>we<sp/>don&apos;t<sp/>have<sp/>to<sp/>critsect<sp/>vNodes<sp/>inside<sp/>mapAddresses<sp/>critsect.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1388"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nOutbound<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1389"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>set&lt;vector&lt;unsigned<sp/>char&gt;<sp/>&gt;<sp/>setConnected;</highlight></codeline>
<codeline lineno="1390"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1391"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="sync_8h_1a911fe23f057c2fe5aad629162d6c99d0" kindref="member">LOCK</ref>(cs_vNodes);</highlight></codeline>
<codeline lineno="1392"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>BOOST_FOREACH(<ref refid="class_c_node" kindref="compound">CNode</ref>*<sp/>pnode,<sp/><ref refid="net_8cpp_1aa5a11f8873e230cea77bc7e91ee51918" kindref="member">vNodes</ref>)<sp/>{</highlight></codeline>
<codeline lineno="1393"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!pnode-&gt;<ref refid="class_c_node_1a64b2550ec558b6106ebc122d450ad35b" kindref="member">fInbound</ref>)<sp/>{</highlight></codeline>
<codeline lineno="1394"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>setConnected.insert(pnode-&gt;<ref refid="class_c_node_1a3993ecb1de2a2135a3cf0904346a6f88" kindref="member">addr</ref>.<ref refid="class_c_net_addr_1af196f306433562cb088dc83fd314a267" kindref="member">GetGroup</ref>());</highlight></codeline>
<codeline lineno="1395"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nOutbound++;</highlight></codeline>
<codeline lineno="1396"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1397"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1398"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1399"><highlight class="normal"></highlight></codeline>
<codeline lineno="1400"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stdint_8h_1adec1df1b8b51cb32b77e5b86fff46471" kindref="member">int64_t</ref><sp/>nANow<sp/>=<sp/><ref refid="timedata_8cpp_1a09f81b9c7650f898cf3cf305b87547e6" kindref="member">GetAdjustedTime</ref>();</highlight></codeline>
<codeline lineno="1401"><highlight class="normal"></highlight></codeline>
<codeline lineno="1402"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nTries<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1403"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">true</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="1404"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1405"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>use<sp/>an<sp/>nUnkBias<sp/>between<sp/>10<sp/>(no<sp/>outgoing<sp/>connections)<sp/>and<sp/>90<sp/>(8<sp/>outgoing<sp/>connections)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1406"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_c_address" kindref="compound">CAddress</ref><sp/>addr<sp/>=<sp/>addrman.<ref refid="class_c_addr_man_1a6aa6708d0ee55dba9ec6cefc9811c8e3" kindref="member">Select</ref>(10<sp/>+<sp/>min(nOutbound,8)*10);</highlight></codeline>
<codeline lineno="1407"><highlight class="normal"></highlight></codeline>
<codeline lineno="1408"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>if<sp/>we<sp/>selected<sp/>an<sp/>invalid<sp/>address,<sp/>restart</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1409"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!addr.<ref refid="class_c_net_addr_1a52a1b506f07e5450057e12a8b5a7fbcd" kindref="member">IsValid</ref>()<sp/>||<sp/>setConnected.count(addr.<ref refid="class_c_net_addr_1af196f306433562cb088dc83fd314a267" kindref="member">GetGroup</ref>())<sp/>||<sp/><ref refid="net_8cpp_1a16fa1bd4d34c4c29c90903fc3cdf7517" kindref="member">IsLocal</ref>(addr))</highlight></codeline>
<codeline lineno="1410"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1411"><highlight class="normal"></highlight></codeline>
<codeline lineno="1412"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>we<sp/>didn&apos;t<sp/>find<sp/>an<sp/>appropriate<sp/>destination<sp/>after<sp/>trying<sp/>100<sp/>addresses<sp/>fetched<sp/>from<sp/>addrman,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1413"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>stop<sp/>this<sp/>loop,<sp/>and<sp/>let<sp/>the<sp/>outer<sp/>loop<sp/>run<sp/>again<sp/>(which<sp/>sleeps,<sp/>adds<sp/>seed<sp/>nodes,<sp/>recalculates</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1414"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>already-connected<sp/>network<sp/>ranges,<sp/>...)<sp/>before<sp/>trying<sp/>new<sp/>addrman<sp/>addresses.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1415"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nTries++;</highlight></codeline>
<codeline lineno="1416"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(nTries<sp/>&gt;<sp/>100)</highlight></codeline>
<codeline lineno="1417"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1418"><highlight class="normal"></highlight></codeline>
<codeline lineno="1419"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="net_8cpp_1a96eb2fba6d80870802ac787b6ada4beb" kindref="member">IsLimited</ref>(addr))</highlight></codeline>
<codeline lineno="1420"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1421"><highlight class="normal"></highlight></codeline>
<codeline lineno="1422"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>only<sp/>consider<sp/>very<sp/>recently<sp/>tried<sp/>nodes<sp/>after<sp/>30<sp/>failed<sp/>attempts</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1423"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(nANow<sp/>-<sp/>addr.<ref refid="class_c_address_1abcf198429efe135fa2424f7dbc0048b0" kindref="member">nLastTry</ref><sp/>&lt;<sp/>600<sp/>&amp;&amp;<sp/>nTries<sp/>&lt;<sp/>30)</highlight></codeline>
<codeline lineno="1424"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1425"><highlight class="normal"></highlight></codeline>
<codeline lineno="1426"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>do<sp/>not<sp/>allow<sp/>non-default<sp/>ports,<sp/>unless<sp/>after<sp/>50<sp/>invalid<sp/>addresses<sp/>selected<sp/>already</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1427"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>USE_NATIVE_I2P</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1428"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!addr.IsNativeI2P()<sp/>&amp;&amp;<sp/>addr.<ref refid="class_c_service_1a49df6ecaf59be814632c4d7755f26637" kindref="member">GetPort</ref>()<sp/>!=<sp/><ref refid="chainparams_8cpp_1ace5c5b706d71a324a417dd2db394fd4a" kindref="member">Params</ref>().<ref refid="class_c_chain_params_1afdb7793273cdb87cc5fd75450eb2258b" kindref="member">GetDefaultPort</ref>()<sp/>&amp;&amp;<sp/>nTries<sp/>&lt;<sp/>50)</highlight></codeline>
<codeline lineno="1429"><highlight class="normal">#</highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1430"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(addr.<ref refid="class_c_service_1a49df6ecaf59be814632c4d7755f26637" kindref="member">GetPort</ref>()<sp/>!=<sp/><ref refid="chainparams_8cpp_1ace5c5b706d71a324a417dd2db394fd4a" kindref="member">Params</ref>().<ref refid="class_c_chain_params_1afdb7793273cdb87cc5fd75450eb2258b" kindref="member">GetDefaultPort</ref>()<sp/>&amp;&amp;<sp/>nTries<sp/>&lt;<sp/>50)</highlight></codeline>
<codeline lineno="1431"><highlight class="normal">#endif</highlight></codeline>
<codeline lineno="1432"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1433"><highlight class="normal"></highlight></codeline>
<codeline lineno="1434"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>addrConnect<sp/>=<sp/>addr;</highlight></codeline>
<codeline lineno="1435"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1436"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1437"><highlight class="normal"></highlight></codeline>
<codeline lineno="1438"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(addrConnect.<ref refid="class_c_net_addr_1a52a1b506f07e5450057e12a8b5a7fbcd" kindref="member">IsValid</ref>())</highlight></codeline>
<codeline lineno="1439"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="net_8cpp_1aa19cb8e6cf23a990e585f2bbf9ece276" kindref="member">OpenNetworkConnection</ref>(addrConnect,<sp/>&amp;grant);</highlight></codeline>
<codeline lineno="1440"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1441"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1442"><highlight class="normal"></highlight></codeline>
<codeline lineno="1443" refid="net_8cpp_1a2d1ca95557ae336582b886a251e7fe94" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="net_8cpp_1a2d1ca95557ae336582b886a251e7fe94" kindref="member">ThreadOpenAddedConnections</ref>()</highlight></codeline>
<codeline lineno="1444"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1445"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1446"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="sync_8h_1a911fe23f057c2fe5aad629162d6c99d0" kindref="member">LOCK</ref>(cs_vAddedNodes);</highlight></codeline>
<codeline lineno="1447"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="net_8cpp_1aea576e413065756784b47d68d5051f72" kindref="member">vAddedNodes</ref><sp/>=<sp/><ref refid="util_8cpp_1a34d23466f937db99d45620bc7ea5d2fb" kindref="member">mapMultiArgs</ref>[</highlight><highlight class="stringliteral">&quot;-addnode&quot;</highlight><highlight class="normal">];</highlight></codeline>
<codeline lineno="1448"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1449"><highlight class="normal"></highlight></codeline>
<codeline lineno="1450"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="netbase_8cpp_1a4a0df7ebe15572508e61c38406e49732" kindref="member">HaveNameProxy</ref>())<sp/>{</highlight></codeline>
<codeline lineno="1451"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(</highlight><highlight class="keyword">true</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="1452"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>list&lt;string&gt;<sp/>lAddresses(0);</highlight></codeline>
<codeline lineno="1453"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1454"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="sync_8h_1a911fe23f057c2fe5aad629162d6c99d0" kindref="member">LOCK</ref>(cs_vAddedNodes);</highlight></codeline>
<codeline lineno="1455"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>BOOST_FOREACH(</highlight><highlight class="keywordtype">string</highlight><highlight class="normal">&amp;<sp/>strAddNode,<sp/><ref refid="net_8cpp_1aea576e413065756784b47d68d5051f72" kindref="member">vAddedNodes</ref>)</highlight></codeline>
<codeline lineno="1456"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lAddresses.push_back(strAddNode);</highlight></codeline>
<codeline lineno="1457"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1458"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>BOOST_FOREACH(</highlight><highlight class="keywordtype">string</highlight><highlight class="normal">&amp;<sp/>strAddNode,<sp/>lAddresses)<sp/>{</highlight></codeline>
<codeline lineno="1459"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_c_address" kindref="compound">CAddress</ref><sp/>addr;</highlight></codeline>
<codeline lineno="1460"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_c_semaphore_grant" kindref="compound">CSemaphoreGrant</ref><sp/>grant(*semOutbound);</highlight></codeline>
<codeline lineno="1461"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="net_8cpp_1aa19cb8e6cf23a990e585f2bbf9ece276" kindref="member">OpenNetworkConnection</ref>(addr,<sp/>&amp;grant,<sp/>strAddNode.c_str());</highlight></codeline>
<codeline lineno="1462"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="util_8h_1ac635182d3e845eda4af4fa5ab31609da" kindref="member">MilliSleep</ref>(500);</highlight></codeline>
<codeline lineno="1463"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1464"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="util_8h_1ac635182d3e845eda4af4fa5ab31609da" kindref="member">MilliSleep</ref>(120000);<sp/></highlight><highlight class="comment">//<sp/>Retry<sp/>every<sp/>2<sp/>minutes</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1465"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1466"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1467"><highlight class="normal"></highlight></codeline>
<codeline lineno="1468"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;<sp/>i++)</highlight></codeline>
<codeline lineno="1469"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1470"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>list&lt;string&gt;<sp/>lAddresses(0);</highlight></codeline>
<codeline lineno="1471"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1472"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="sync_8h_1a911fe23f057c2fe5aad629162d6c99d0" kindref="member">LOCK</ref>(cs_vAddedNodes);</highlight></codeline>
<codeline lineno="1473"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>BOOST_FOREACH(</highlight><highlight class="keywordtype">string</highlight><highlight class="normal">&amp;<sp/>strAddNode,<sp/><ref refid="net_8cpp_1aea576e413065756784b47d68d5051f72" kindref="member">vAddedNodes</ref>)</highlight></codeline>
<codeline lineno="1474"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lAddresses.push_back(strAddNode);</highlight></codeline>
<codeline lineno="1475"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1476"><highlight class="normal"></highlight></codeline>
<codeline lineno="1477"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>list&lt;vector&lt;CService&gt;<sp/>&gt;<sp/>lservAddressesToAdd(0);</highlight></codeline>
<codeline lineno="1478"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>BOOST_FOREACH(</highlight><highlight class="keywordtype">string</highlight><highlight class="normal">&amp;<sp/>strAddNode,<sp/>lAddresses)</highlight></codeline>
<codeline lineno="1479"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1480"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vector&lt;CService&gt;<sp/>vservNode(0);</highlight></codeline>
<codeline lineno="1481"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="netbase_8cpp_1a56a2f4bcb9fb77b5efe358f804f642cc" kindref="member">Lookup</ref>(strAddNode.c_str(),<sp/>vservNode,<sp/><ref refid="chainparams_8cpp_1ace5c5b706d71a324a417dd2db394fd4a" kindref="member">Params</ref>().<ref refid="class_c_chain_params_1afdb7793273cdb87cc5fd75450eb2258b" kindref="member">GetDefaultPort</ref>(),<sp/><ref refid="netbase_8cpp_1ab5335ec17aee4d4fdd4c735b85707b56" kindref="member">fNameLookup</ref>,<sp/>0))</highlight></codeline>
<codeline lineno="1482"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1483"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lservAddressesToAdd.push_back(vservNode);</highlight></codeline>
<codeline lineno="1484"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1485"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="sync_8h_1a911fe23f057c2fe5aad629162d6c99d0" kindref="member">LOCK</ref>(cs_setservAddNodeAddresses);</highlight></codeline>
<codeline lineno="1486"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>BOOST_FOREACH(<ref refid="class_c_service" kindref="compound">CService</ref>&amp;<sp/>serv,<sp/>vservNode)</highlight></codeline>
<codeline lineno="1487"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="net_8cpp_1adfc6e2c8b106da3807ca34d27577b37e" kindref="member">setservAddNodeAddresses</ref>.insert(serv);</highlight></codeline>
<codeline lineno="1488"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1489"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1490"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1491"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Attempt<sp/>to<sp/>connect<sp/>to<sp/>each<sp/>IP<sp/>for<sp/>each<sp/>addnode<sp/>entry<sp/>until<sp/>at<sp/>least<sp/>one<sp/>is<sp/>successful<sp/>per<sp/>addnode<sp/>entry</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1492"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>(keeping<sp/>in<sp/>mind<sp/>that<sp/>addnode<sp/>entries<sp/>can<sp/>have<sp/>many<sp/>IPs<sp/>if<sp/>fNameLookup)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1493"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1494"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="sync_8h_1a911fe23f057c2fe5aad629162d6c99d0" kindref="member">LOCK</ref>(cs_vNodes);</highlight></codeline>
<codeline lineno="1495"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>BOOST_FOREACH(<ref refid="class_c_node" kindref="compound">CNode</ref>*<sp/>pnode,<sp/><ref refid="net_8cpp_1aa5a11f8873e230cea77bc7e91ee51918" kindref="member">vNodes</ref>)</highlight></codeline>
<codeline lineno="1496"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(list&lt;vector&lt;CService&gt;<sp/>&gt;::iterator<sp/>it<sp/>=<sp/>lservAddressesToAdd.begin();<sp/>it<sp/>!=<sp/>lservAddressesToAdd.end();<sp/>it++)</highlight></codeline>
<codeline lineno="1497"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>BOOST_FOREACH(<ref refid="class_c_service" kindref="compound">CService</ref>&amp;<sp/>addrNode,<sp/>*(it))</highlight></codeline>
<codeline lineno="1498"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(pnode-&gt;<ref refid="class_c_node_1a3993ecb1de2a2135a3cf0904346a6f88" kindref="member">addr</ref><sp/>==<sp/>addrNode)</highlight></codeline>
<codeline lineno="1499"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1500"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>it<sp/>=<sp/>lservAddressesToAdd.erase(it);</highlight></codeline>
<codeline lineno="1501"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>it--;</highlight></codeline>
<codeline lineno="1502"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1503"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1504"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1505"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>BOOST_FOREACH(vector&lt;CService&gt;&amp;<sp/>vserv,<sp/>lservAddressesToAdd)</highlight></codeline>
<codeline lineno="1506"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1507"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_c_semaphore_grant" kindref="compound">CSemaphoreGrant</ref><sp/>grant(*semOutbound);</highlight></codeline>
<codeline lineno="1508"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="net_8cpp_1aa19cb8e6cf23a990e585f2bbf9ece276" kindref="member">OpenNetworkConnection</ref>(<ref refid="class_c_address" kindref="compound">CAddress</ref>(vserv[i<sp/>%<sp/>vserv.size()]),<sp/>&amp;grant);</highlight></codeline>
<codeline lineno="1509"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="util_8h_1ac635182d3e845eda4af4fa5ab31609da" kindref="member">MilliSleep</ref>(500);</highlight></codeline>
<codeline lineno="1510"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1511"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="util_8h_1ac635182d3e845eda4af4fa5ab31609da" kindref="member">MilliSleep</ref>(120000);<sp/></highlight><highlight class="comment">//<sp/>Retry<sp/>every<sp/>2<sp/>minutes</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1512"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1513"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1514"><highlight class="normal"></highlight></codeline>
<codeline lineno="1515"><highlight class="normal"></highlight><highlight class="comment">//<sp/>if<sp/>successful,<sp/>this<sp/>moves<sp/>the<sp/>passed<sp/>grant<sp/>to<sp/>the<sp/>constructed<sp/>node</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1516" refid="net_8cpp_1aa19cb8e6cf23a990e585f2bbf9ece276" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="net_8cpp_1aa19cb8e6cf23a990e585f2bbf9ece276" kindref="member">OpenNetworkConnection</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_c_address" kindref="compound">CAddress</ref>&amp;<sp/>addrConnect,<sp/><ref refid="class_c_semaphore_grant" kindref="compound">CSemaphoreGrant</ref><sp/>*grantOutbound,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*strDest,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>fOneShot)</highlight></codeline>
<codeline lineno="1517"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1518"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1519"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Initiate<sp/>outbound<sp/>network<sp/>connection</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1520"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1521"><highlight class="normal"><sp/><sp/><sp/><sp/>boost::this_thread::interruption_point();</highlight></codeline>
<codeline lineno="1522"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!strDest)</highlight></codeline>
<codeline lineno="1523"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="net_8cpp_1a16fa1bd4d34c4c29c90903fc3cdf7517" kindref="member">IsLocal</ref>(addrConnect)<sp/>||</highlight></codeline>
<codeline lineno="1524"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="net_8cpp_1a66a7371d8e724cac0b4495169cdf2859" kindref="member">FindNode</ref>((<ref refid="class_c_net_addr" kindref="compound">CNetAddr</ref>)addrConnect)<sp/>||<sp/><ref refid="class_c_node_1aefa8b81afa53b4c6635dc4c6c024211a" kindref="member">CNode::IsBanned</ref>(addrConnect)<sp/>||</highlight></codeline>
<codeline lineno="1525"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="net_8cpp_1a66a7371d8e724cac0b4495169cdf2859" kindref="member">FindNode</ref>(addrConnect.ToStringIPPort().c_str()))</highlight></codeline>
<codeline lineno="1526"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1527"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(strDest<sp/>&amp;&amp;<sp/><ref refid="net_8cpp_1a66a7371d8e724cac0b4495169cdf2859" kindref="member">FindNode</ref>(strDest))</highlight></codeline>
<codeline lineno="1528"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1529"><highlight class="normal"></highlight></codeline>
<codeline lineno="1530"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_c_node" kindref="compound">CNode</ref>*<sp/>pnode<sp/>=<sp/><ref refid="net_8cpp_1ac6e0da5071d4eaa6960dbf889c765834" kindref="member">ConnectNode</ref>(addrConnect,<sp/>strDest);</highlight></codeline>
<codeline lineno="1531"><highlight class="normal"><sp/><sp/><sp/><sp/>boost::this_thread::interruption_point();</highlight></codeline>
<codeline lineno="1532"><highlight class="normal"></highlight></codeline>
<codeline lineno="1533"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!pnode)</highlight></codeline>
<codeline lineno="1534"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1535"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(grantOutbound)</highlight></codeline>
<codeline lineno="1536"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>grantOutbound-&gt;<ref refid="class_c_semaphore_grant_1ab3e6f84f304703abc52517b0c8de26cf" kindref="member">MoveTo</ref>(pnode-&gt;<ref refid="class_c_node_1a4bb25f8bdeeaff5e8cb08abc97bbc44d" kindref="member">grantOutbound</ref>);</highlight></codeline>
<codeline lineno="1537"><highlight class="normal"><sp/><sp/><sp/><sp/>pnode-&gt;<ref refid="class_c_node_1a933adb2b192939545a01d602b1d7b53a" kindref="member">fNetworkNode</ref><sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1538"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fOneShot)</highlight></codeline>
<codeline lineno="1539"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pnode-&gt;<ref refid="class_c_node_1a2bb91c9968a9f855c05b1121100a8797" kindref="member">fOneShot</ref><sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1540"><highlight class="normal"></highlight></codeline>
<codeline lineno="1541"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1542"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1543"><highlight class="normal"></highlight></codeline>
<codeline lineno="1544"><highlight class="normal"></highlight></codeline>
<codeline lineno="1545"><highlight class="normal"></highlight><highlight class="comment">//<sp/>for<sp/>now,<sp/>use<sp/>a<sp/>very<sp/>simple<sp/>selection<sp/>metric:<sp/>the<sp/>node<sp/>from<sp/>which<sp/>we<sp/>received</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1546"><highlight class="normal"></highlight><highlight class="comment">//<sp/>most<sp/>recently</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1547"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="stdint_8h_1adec1df1b8b51cb32b77e5b86fff46471" kindref="member">int64_t</ref><sp/>NodeSyncScore(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_c_node" kindref="compound">CNode</ref><sp/>*pnode)<sp/>{</highlight></codeline>
<codeline lineno="1548"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>pnode-&gt;<ref refid="class_c_node_1afb40f43a51ba686de93256727351af07" kindref="member">nLastRecv</ref>;</highlight></codeline>
<codeline lineno="1549"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1550"><highlight class="normal"></highlight></codeline>
<codeline lineno="1551"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>StartSync(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>vector&lt;CNode*&gt;<sp/>&amp;<ref refid="net_8cpp_1aa5a11f8873e230cea77bc7e91ee51918" kindref="member">vNodes</ref>)<sp/>{</highlight></codeline>
<codeline lineno="1552"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_c_node" kindref="compound">CNode</ref><sp/>*pnodeNewSync<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="1553"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="stdint_8h_1adec1df1b8b51cb32b77e5b86fff46471" kindref="member">int64_t</ref><sp/>nBestScore<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1554"><highlight class="normal"></highlight></codeline>
<codeline lineno="1555"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>fImporting<sp/>and<sp/>fReindex<sp/>are<sp/>accessed<sp/>out<sp/>of<sp/>cs_main<sp/>here,<sp/>but<sp/>only</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1556"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>as<sp/>an<sp/>optimization<sp/>-<sp/>they<sp/>are<sp/>checked<sp/>again<sp/>in<sp/>SendMessages.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1557"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="main_8cpp_1aaf87d0dd26c4a7c9bcc5bdd1127e8637" kindref="member">fImporting</ref><sp/>||<sp/><ref refid="main_8cpp_1a8e0eca589b2d4254a65f04c5d91888b2" kindref="member">fReindex</ref>)</highlight></codeline>
<codeline lineno="1558"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1559"><highlight class="normal"></highlight></codeline>
<codeline lineno="1560"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Iterate<sp/>over<sp/>all<sp/>nodes</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1561"><highlight class="normal"><sp/><sp/><sp/><sp/>BOOST_FOREACH(<ref refid="class_c_node" kindref="compound">CNode</ref>*<sp/>pnode,<sp/>vNodes)<sp/>{</highlight></codeline>
<codeline lineno="1562"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>check<sp/>preconditions<sp/>for<sp/>allowing<sp/>a<sp/>sync</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1563"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!pnode-&gt;<ref refid="class_c_node_1a721e2470c2c961b7599768a14be68781" kindref="member">fClient</ref><sp/>&amp;&amp;<sp/>!pnode-&gt;<ref refid="class_c_node_1a2bb91c9968a9f855c05b1121100a8797" kindref="member">fOneShot</ref><sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="1564"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>!pnode-&gt;<ref refid="class_c_node_1af2f7ea958313974e8a948292f060922e" kindref="member">fDisconnect</ref><sp/>&amp;&amp;<sp/>pnode-&gt;<ref refid="class_c_node_1ab58c1772b2698e348d86002f34254119" kindref="member">fSuccessfullyConnected</ref><sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="1565"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(pnode-&gt;<ref refid="class_c_node_1a597b41bd64e2ac9391b7211e65aeb52a" kindref="member">nStartingHeight</ref><sp/>&gt;<sp/>(<ref refid="main_8cpp_1a843f1984796a7e44a9e23fccd6a8af34" kindref="member">nBestHeight</ref><sp/>-<sp/>144))<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="1566"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(pnode-&gt;<ref refid="class_c_node_1a99173eb3cef17e699ba21a5249ac33d2" kindref="member">nVersion</ref><sp/>&lt;<sp/>NOBLKS_VERSION_START<sp/>||<sp/>pnode-&gt;<ref refid="class_c_node_1a99173eb3cef17e699ba21a5249ac33d2" kindref="member">nVersion</ref><sp/>&gt;=<sp/>NOBLKS_VERSION_END))<sp/>{</highlight></codeline>
<codeline lineno="1567"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>if<sp/>ok,<sp/>compare<sp/>node&apos;s<sp/>score<sp/>with<sp/>the<sp/>best<sp/>so<sp/>far</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1568"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stdint_8h_1adec1df1b8b51cb32b77e5b86fff46471" kindref="member">int64_t</ref><sp/>nScore<sp/>=<sp/>NodeSyncScore(pnode);</highlight></codeline>
<codeline lineno="1569"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(pnodeNewSync<sp/>==<sp/>NULL<sp/>||<sp/>nScore<sp/>&gt;<sp/>nBestScore)<sp/>{</highlight></codeline>
<codeline lineno="1570"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pnodeNewSync<sp/>=<sp/>pnode;</highlight></codeline>
<codeline lineno="1571"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nBestScore<sp/>=<sp/>nScore;</highlight></codeline>
<codeline lineno="1572"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1573"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1574"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1575"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>if<sp/>a<sp/>new<sp/>sync<sp/>candidate<sp/>was<sp/>found,<sp/>start<sp/>sync!</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1576"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(pnodeNewSync)<sp/>{</highlight></codeline>
<codeline lineno="1577"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pnodeNewSync-&gt;<ref refid="class_c_node_1a4009c240ccb6d085ae57e8cf4d4c2cb6" kindref="member">fStartSync</ref><sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1578"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pnodeSync<sp/>=<sp/>pnodeNewSync;</highlight></codeline>
<codeline lineno="1579"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1580"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1581"><highlight class="normal"></highlight></codeline>
<codeline lineno="1582" refid="net_8cpp_1a379b0d3521bdd62ac296f219d70c4e30" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="net_8cpp_1a379b0d3521bdd62ac296f219d70c4e30" kindref="member">ThreadMessageHandler</ref>()</highlight></codeline>
<codeline lineno="1583"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1584"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="util_8h_1a8d620b8c9865456b925cd0eea4b2ffc1" kindref="member">SetThreadPriority</ref>(<ref refid="util_8h_1aff5dd15d0754df75650eb9c3bfa5f86f" kindref="member">THREAD_PRIORITY_BELOW_NORMAL</ref>);</highlight></codeline>
<codeline lineno="1585"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">true</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="1586"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1587"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>fHaveSyncNode<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1588"><highlight class="normal"></highlight></codeline>
<codeline lineno="1589"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vector&lt;CNode*&gt;<sp/>vNodesCopy;</highlight></codeline>
<codeline lineno="1590"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1591"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="sync_8h_1a911fe23f057c2fe5aad629162d6c99d0" kindref="member">LOCK</ref>(cs_vNodes);</highlight></codeline>
<codeline lineno="1592"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vNodesCopy<sp/>=<sp/><ref refid="net_8cpp_1aa5a11f8873e230cea77bc7e91ee51918" kindref="member">vNodes</ref>;</highlight></codeline>
<codeline lineno="1593"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>BOOST_FOREACH(<ref refid="class_c_node" kindref="compound">CNode</ref>*<sp/>pnode,<sp/>vNodesCopy)<sp/>{</highlight></codeline>
<codeline lineno="1594"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pnode-&gt;<ref refid="class_c_node_1afb65ed679f7bda59aab89e0f5afae292" kindref="member">AddRef</ref>();</highlight></codeline>
<codeline lineno="1595"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(pnode<sp/>==<sp/>pnodeSync)</highlight></codeline>
<codeline lineno="1596"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fHaveSyncNode<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1597"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1598"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1599"><highlight class="normal"></highlight></codeline>
<codeline lineno="1600"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!fHaveSyncNode)</highlight></codeline>
<codeline lineno="1601"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>StartSync(vNodesCopy);</highlight></codeline>
<codeline lineno="1602"><highlight class="normal"></highlight></codeline>
<codeline lineno="1603"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Poll<sp/>the<sp/>connected<sp/>nodes<sp/>for<sp/>messages</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1604"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_c_node" kindref="compound">CNode</ref>*<sp/>pnodeTrickle<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="1605"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!vNodesCopy.empty())</highlight></codeline>
<codeline lineno="1606"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pnodeTrickle<sp/>=<sp/>vNodesCopy[<ref refid="util_8cpp_1a27d9149d522b1fa87d84e5e9ca902aef" kindref="member">GetRand</ref>(vNodesCopy.size())];</highlight></codeline>
<codeline lineno="1607"><highlight class="normal"></highlight></codeline>
<codeline lineno="1608"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>fSleep<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1609"><highlight class="normal"></highlight></codeline>
<codeline lineno="1610"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>BOOST_FOREACH(<ref refid="class_c_node" kindref="compound">CNode</ref>*<sp/>pnode,<sp/>vNodesCopy)</highlight></codeline>
<codeline lineno="1611"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1612"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(pnode-&gt;<ref refid="class_c_node_1af2f7ea958313974e8a948292f060922e" kindref="member">fDisconnect</ref>)</highlight></codeline>
<codeline lineno="1613"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1614"><highlight class="normal"></highlight></codeline>
<codeline lineno="1615"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Receive<sp/>messages</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1616"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1617"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="sync_8h_1aca08e7299069c2d60b8aa726fc550612" kindref="member">TRY_LOCK</ref>(pnode-&gt;<ref refid="class_c_node_1abaebfaf8fff7e2e99366ae2bc69af6cd" kindref="member">cs_vRecvMsg</ref>,<sp/>lockRecv);</highlight></codeline>
<codeline lineno="1618"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(lockRecv)</highlight></codeline>
<codeline lineno="1619"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1620"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!n_signals.<ref refid="struct_c_node_signals_1a9d5d5e496f424ee3331b3dcb0a0c558b" kindref="member">ProcessMessages</ref>(pnode))</highlight></codeline>
<codeline lineno="1621"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pnode-&gt;<ref refid="class_c_node_1a63a6091a0b0fc0987d9436e1ec708423" kindref="member">CloseSocketDisconnect</ref>();</highlight></codeline>
<codeline lineno="1622"><highlight class="normal"></highlight></codeline>
<codeline lineno="1623"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(pnode-&gt;<ref refid="class_c_node_1a3c99b7e2b0e53feb58f6859453456f74" kindref="member">nSendSize</ref><sp/>&lt;<sp/><ref refid="net_8h_1a13f289d6233bd32b78a38793f76bdccb" kindref="member">SendBufferSize</ref>())</highlight></codeline>
<codeline lineno="1624"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1625"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!pnode-&gt;<ref refid="class_c_node_1a9649c1f27ff0d8f0ba89eb1ea5bee139" kindref="member">vRecvGetData</ref>.empty()<sp/>||<sp/>(!pnode-&gt;<ref refid="class_c_node_1a015361812daa5b6ebb9a5692ddf67a54" kindref="member">vRecvMsg</ref>.empty()<sp/>&amp;&amp;<sp/>pnode-&gt;<ref refid="class_c_node_1a015361812daa5b6ebb9a5692ddf67a54" kindref="member">vRecvMsg</ref>[0].complete()))</highlight></codeline>
<codeline lineno="1626"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1627"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fSleep<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1628"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1629"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1630"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1631"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1632"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>boost::this_thread::interruption_point();</highlight></codeline>
<codeline lineno="1633"><highlight class="normal"></highlight></codeline>
<codeline lineno="1634"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Send<sp/>messages</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1635"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1636"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="sync_8h_1aca08e7299069c2d60b8aa726fc550612" kindref="member">TRY_LOCK</ref>(pnode-&gt;<ref refid="class_c_node_1a79edcac83fc5067567c7b41c26fcc56f" kindref="member">cs_vSend</ref>,<sp/>lockSend);</highlight></codeline>
<codeline lineno="1637"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(lockSend)</highlight></codeline>
<codeline lineno="1638"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>n_signals.<ref refid="struct_c_node_signals_1a72f761e2001b2cd5355b20e1168bf903" kindref="member">SendMessages</ref>(pnode,<sp/>pnode<sp/>==<sp/>pnodeTrickle);</highlight></codeline>
<codeline lineno="1639"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1640"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>boost::this_thread::interruption_point();</highlight></codeline>
<codeline lineno="1641"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1642"><highlight class="normal"></highlight></codeline>
<codeline lineno="1643"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1644"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="sync_8h_1a911fe23f057c2fe5aad629162d6c99d0" kindref="member">LOCK</ref>(cs_vNodes);</highlight></codeline>
<codeline lineno="1645"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>BOOST_FOREACH(<ref refid="class_c_node" kindref="compound">CNode</ref>*<sp/>pnode,<sp/>vNodesCopy)</highlight></codeline>
<codeline lineno="1646"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pnode-&gt;<ref refid="class_c_node_1af804bf7c7f9794e80a3b916e1befece9" kindref="member">Release</ref>();</highlight></codeline>
<codeline lineno="1647"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1648"><highlight class="normal"></highlight></codeline>
<codeline lineno="1649"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fSleep)</highlight></codeline>
<codeline lineno="1650"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="util_8h_1ac635182d3e845eda4af4fa5ab31609da" kindref="member">MilliSleep</ref>(1);</highlight></codeline>
<codeline lineno="1651"><highlight class="normal"></highlight></codeline>
<codeline lineno="1652"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>boost::this_thread::interruption_point();</highlight></codeline>
<codeline lineno="1653"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1654"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1655"><highlight class="normal"></highlight></codeline>
<codeline lineno="1656"><highlight class="normal"></highlight></codeline>
<codeline lineno="1657"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>USE_NATIVE_I2P</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1658"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>BindListenNativeI2P()</highlight></codeline>
<codeline lineno="1659"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1660"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="compat_8h_1a26ef1173e2f2c0d3db27eca28397d723" kindref="member">SOCKET</ref><sp/>hNewI2PListenSocket<sp/>=<sp/><ref refid="compat_8h_1a26769957ec1a2beaf223f33b66ee64ab" kindref="member">INVALID_SOCKET</ref>;</highlight></codeline>
<codeline lineno="1661"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!BindListenNativeI2P(hNewI2PListenSocket))</highlight></codeline>
<codeline lineno="1662"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1663"><highlight class="normal"><sp/><sp/><sp/><sp/>vhI2PListenSocket.push_back(hNewI2PListenSocket);</highlight></codeline>
<codeline lineno="1664"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1665"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1666"><highlight class="normal"></highlight></codeline>
<codeline lineno="1667"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>BindListenNativeI2P(<ref refid="compat_8h_1a26ef1173e2f2c0d3db27eca28397d723" kindref="member">SOCKET</ref>&amp;<sp/>hSocket)</highlight></codeline>
<codeline lineno="1668"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1669"><highlight class="normal"><sp/><sp/><sp/><sp/>hSocket<sp/>=<sp/><ref refid="class_i2_p_session_1a0b2a285f34224a7fdc8ffcb0d1f6d48e" kindref="member">I2PSession::Instance</ref>().<ref refid="class_s_a_m_1_1_stream_session_adapter_1a040e02aced837c8409ed1edfc4f8ac69" kindref="member">accept</ref>(</highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1670"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!SetSocketOptions(hSocket)<sp/>||<sp/>hSocket<sp/>==<sp/>INVALID_SOCKET)</highlight></codeline>
<codeline lineno="1671"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1672"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_c_service" kindref="compound">CService</ref><sp/>addrBind(<ref refid="class_i2_p_session_1a0b2a285f34224a7fdc8ffcb0d1f6d48e" kindref="member">I2PSession::Instance</ref>().getMyDestination().pub,<sp/>0);</highlight></codeline>
<codeline lineno="1673"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(addrBind.IsRoutable()<sp/>&amp;&amp;<sp/><ref refid="net_8cpp_1a37089835ec27ad8bf945a458708165b9" kindref="member">fDiscover</ref>)</highlight></codeline>
<codeline lineno="1674"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="net_8cpp_1abb92a02eecc581e8927c8a6e31968645" kindref="member">AddLocal</ref>(addrBind,<sp/><ref refid="net_8h_1a385c44f6fb256e5716a2302a5b940388aad42caef30be428cb73f7d2753b5162e" kindref="member">LOCAL_BIND</ref>);</highlight></codeline>
<codeline lineno="1675"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1676"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1677"><highlight class="normal"></highlight></codeline>
<codeline lineno="1678"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>IsI2POnly()</highlight></codeline>
<codeline lineno="1679"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1680"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>bool<sp/>i2pOnly<sp/>=<sp/>false;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1681"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>if<sp/>(mapArgs.count(&quot;-onlynet&quot;))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1682"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1683"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>const<sp/>std::vector&lt;std::string&gt;&amp;<sp/>onlyNets<sp/>=<sp/>mapMultiArgs[&quot;-onlynet&quot;];</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1684"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>i2pOnly<sp/>=<sp/>(onlyNets.size()<sp/>==<sp/>1<sp/>&amp;&amp;<sp/>onlyNets[0]<sp/>==<sp/>NATIVE_I2P_NET_STRING);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1685"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1686"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>return<sp/>i2pOnly;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1687"><highlight class="normal"></highlight></codeline>
<codeline lineno="1688"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>i2pOnly<sp/>=<sp/><ref refid="netbase_8h_1acc9a38c714afe79b5035cb36f560dac3a675b0737d6c404a5de25e324c166a4b5" kindref="member">NET_MAX</ref><sp/>&gt;<sp/>0;<sp/></highlight><highlight class="comment">//<sp/>if<sp/>NET_MAX<sp/>==<sp/>0<sp/>we<sp/>set<sp/>i2pOnly<sp/>to<sp/>false<sp/>and<sp/>exit</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1689"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n<sp/>=<sp/>0;<sp/>n<sp/>&lt;<sp/><ref refid="netbase_8h_1acc9a38c714afe79b5035cb36f560dac3a675b0737d6c404a5de25e324c166a4b5" kindref="member">NET_MAX</ref>;<sp/>n++)</highlight></codeline>
<codeline lineno="1690"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1691"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="netbase_8h_1acc9a38c714afe79b5035cb36f560dac3" kindref="member">Network</ref><sp/>net<sp/>=<sp/>(<ref refid="netbase_8h_1acc9a38c714afe79b5035cb36f560dac3" kindref="member">Network</ref>)n;</highlight></codeline>
<codeline lineno="1692"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(net<sp/>==<sp/><ref refid="netbase_8h_1acc9a38c714afe79b5035cb36f560dac3af66f60a80e2a5d99813c3f322cf8a6e1" kindref="member">NET_UNROUTABLE</ref>)</highlight></codeline>
<codeline lineno="1693"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1694"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>i2pOnly<sp/>&amp;=<sp/>((net<sp/>==<sp/>NET_NATIVE_I2P)<sp/>!=<sp/><ref refid="net_8cpp_1a96eb2fba6d80870802ac787b6ada4beb" kindref="member">IsLimited</ref>(net));<sp/></highlight><highlight class="comment">//<sp/>isI2P<sp/>xor<sp/>IsLimited</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1695"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1696"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>i2pOnly;</highlight></codeline>
<codeline lineno="1697"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1698"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1699"><highlight class="normal"></highlight></codeline>
<codeline lineno="1700"><highlight class="normal"></highlight></codeline>
<codeline lineno="1701"><highlight class="normal"></highlight></codeline>
<codeline lineno="1702" refid="net_8cpp_1a0c8010ad96acff7cca6aca684ec42b71" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="net_8cpp_1a0c8010ad96acff7cca6aca684ec42b71" kindref="member">BindListenPort</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_c_service" kindref="compound">CService</ref><sp/>&amp;addrBind,<sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal">&amp;<sp/>strError)</highlight></codeline>
<codeline lineno="1703"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1704"><highlight class="normal"><sp/><sp/><sp/><sp/>strError<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1705"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nOne<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="1706"><highlight class="normal"></highlight></codeline>
<codeline lineno="1707"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>WIN32</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1708"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Initialize<sp/>Windows<sp/>Sockets</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1709"><highlight class="normal"><sp/><sp/><sp/><sp/>WSADATA<sp/>wsadata;</highlight></codeline>
<codeline lineno="1710"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ret<sp/>=<sp/>WSAStartup(MAKEWORD(2,2),<sp/>&amp;wsadata);</highlight></codeline>
<codeline lineno="1711"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ret<sp/>!=<sp/>NO_ERROR)</highlight></codeline>
<codeline lineno="1712"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1713"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>strError<sp/>=<sp/><ref refid="tinyformat_8h_1a56c674871a61baaad36ad52238c08857" kindref="member">strprintf</ref>(</highlight><highlight class="stringliteral">&quot;Error:<sp/>TCP/IP<sp/>socket<sp/>library<sp/>failed<sp/>to<sp/>start<sp/>(WSAStartup<sp/>returned<sp/>error<sp/>%d)&quot;</highlight><highlight class="normal">,<sp/>ret);</highlight></codeline>
<codeline lineno="1714"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="util_8h_1afc02c0a4258fedfb316be612bb659ba8" kindref="member">LogPrintf</ref>(</highlight><highlight class="stringliteral">&quot;%s\n&quot;</highlight><highlight class="normal">,<sp/>strError);</highlight></codeline>
<codeline lineno="1715"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1716"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1717"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1718"><highlight class="normal"></highlight></codeline>
<codeline lineno="1719"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Create<sp/>socket<sp/>for<sp/>listening<sp/>for<sp/>incoming<sp/>connections</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1720"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">sockaddr_storage<sp/>sockaddr;</highlight></codeline>
<codeline lineno="1721"><highlight class="normal"><sp/><sp/><sp/><sp/>socklen_t<sp/>len<sp/>=<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(sockaddr);</highlight></codeline>
<codeline lineno="1722"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!addrBind.<ref refid="class_c_service_1ab0f791c174511056236119cc1580faeb" kindref="member">GetSockAddr</ref>((</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/>sockaddr*)&amp;sockaddr,<sp/>&amp;len))</highlight></codeline>
<codeline lineno="1723"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1724"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>strError<sp/>=<sp/><ref refid="tinyformat_8h_1a56c674871a61baaad36ad52238c08857" kindref="member">strprintf</ref>(</highlight><highlight class="stringliteral">&quot;Error:<sp/>bind<sp/>address<sp/>family<sp/>for<sp/>%s<sp/>not<sp/>supported&quot;</highlight><highlight class="normal">,<sp/>addrBind.<ref refid="class_c_service_1a336f9848fe9364e260c76499be0351a5" kindref="member">ToString</ref>());</highlight></codeline>
<codeline lineno="1725"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="util_8h_1afc02c0a4258fedfb316be612bb659ba8" kindref="member">LogPrintf</ref>(</highlight><highlight class="stringliteral">&quot;%s\n&quot;</highlight><highlight class="normal">,<sp/>strError);</highlight></codeline>
<codeline lineno="1726"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1727"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1728"><highlight class="normal"></highlight></codeline>
<codeline lineno="1729"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="compat_8h_1a26ef1173e2f2c0d3db27eca28397d723" kindref="member">SOCKET</ref><sp/>hListenSocket<sp/>=<sp/>socket(((</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/>sockaddr*)&amp;sockaddr)-&gt;sa_family,<sp/>SOCK_STREAM,<sp/>IPPROTO_TCP);</highlight></codeline>
<codeline lineno="1730"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(hListenSocket<sp/>==<sp/>INVALID_SOCKET)</highlight></codeline>
<codeline lineno="1731"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1732"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>strError<sp/>=<sp/><ref refid="tinyformat_8h_1a56c674871a61baaad36ad52238c08857" kindref="member">strprintf</ref>(</highlight><highlight class="stringliteral">&quot;Error:<sp/>Couldn&apos;t<sp/>open<sp/>socket<sp/>for<sp/>incoming<sp/>connections<sp/>(socket<sp/>returned<sp/>error<sp/>%d)&quot;</highlight><highlight class="normal">,<sp/><ref refid="compat_8h_1a6d24fe3ab2906c21c373505ca244f90b" kindref="member">WSAGetLastError</ref>());</highlight></codeline>
<codeline lineno="1733"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="util_8h_1afc02c0a4258fedfb316be612bb659ba8" kindref="member">LogPrintf</ref>(</highlight><highlight class="stringliteral">&quot;%s\n&quot;</highlight><highlight class="normal">,<sp/>strError);</highlight></codeline>
<codeline lineno="1734"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1735"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1736"><highlight class="normal"></highlight></codeline>
<codeline lineno="1737"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>SO_NOSIGPIPE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1738"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Different<sp/>way<sp/>of<sp/>disabling<sp/>SIGPIPE<sp/>on<sp/>BSD</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1739"><highlight class="normal"><sp/><sp/><sp/><sp/>setsockopt(hListenSocket,<sp/>SOL_SOCKET,<sp/>SO_NOSIGPIPE,<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*)&amp;nOne,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="1740"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1741"><highlight class="normal"></highlight></codeline>
<codeline lineno="1742"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>WIN32</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1743"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Allow<sp/>binding<sp/>if<sp/>the<sp/>port<sp/>is<sp/>still<sp/>in<sp/>TIME_WAIT<sp/>state<sp/>after</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1744"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>program<sp/>was<sp/>closed<sp/>and<sp/>restarted.<sp/><sp/>Not<sp/>an<sp/>issue<sp/>on<sp/>windows.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1745"><highlight class="normal"><sp/><sp/><sp/><sp/>setsockopt(hListenSocket,<sp/>SOL_SOCKET,<sp/>SO_REUSEADDR,<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*)&amp;nOne,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="1746"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1747"><highlight class="normal"></highlight></codeline>
<codeline lineno="1748"><highlight class="normal"></highlight></codeline>
<codeline lineno="1749"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>WIN32</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1750"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Set<sp/>to<sp/>non-blocking,<sp/>incoming<sp/>connections<sp/>will<sp/>also<sp/>inherit<sp/>this</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1751"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ioctlsocket(hListenSocket,<sp/>FIONBIO,<sp/>(u_long*)&amp;nOne)<sp/>==<sp/><ref refid="compat_8h_1a633b0396ff93d336a088412a190a5072" kindref="member">SOCKET_ERROR</ref>)</highlight></codeline>
<codeline lineno="1752"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1753"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fcntl(hListenSocket,<sp/>F_SETFL,<sp/>O_NONBLOCK)<sp/>==<sp/><ref refid="compat_8h_1a633b0396ff93d336a088412a190a5072" kindref="member">SOCKET_ERROR</ref>)</highlight></codeline>
<codeline lineno="1754"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1755"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1756"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>strError<sp/>=<sp/><ref refid="tinyformat_8h_1a56c674871a61baaad36ad52238c08857" kindref="member">strprintf</ref>(</highlight><highlight class="stringliteral">&quot;Error:<sp/>Couldn&apos;t<sp/>set<sp/>properties<sp/>on<sp/>socket<sp/>for<sp/>incoming<sp/>connections<sp/>(error<sp/>%d)&quot;</highlight><highlight class="normal">,<sp/><ref refid="compat_8h_1a6d24fe3ab2906c21c373505ca244f90b" kindref="member">WSAGetLastError</ref>());</highlight></codeline>
<codeline lineno="1757"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="util_8h_1afc02c0a4258fedfb316be612bb659ba8" kindref="member">LogPrintf</ref>(</highlight><highlight class="stringliteral">&quot;%s\n&quot;</highlight><highlight class="normal">,<sp/>strError);</highlight></codeline>
<codeline lineno="1758"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1759"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1760"><highlight class="normal"></highlight></codeline>
<codeline lineno="1761"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>some<sp/>systems<sp/>don&apos;t<sp/>have<sp/>IPV6_V6ONLY<sp/>but<sp/>are<sp/>always<sp/>v6only;<sp/>others<sp/>do<sp/>have<sp/>the<sp/>option</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1762"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>and<sp/>enable<sp/>it<sp/>by<sp/>default<sp/>or<sp/>not.<sp/>Try<sp/>to<sp/>enable<sp/>it,<sp/>if<sp/>possible.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1763"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(addrBind.<ref refid="class_c_net_addr_1a0edb022cd6a186de8099799415409d57" kindref="member">IsIPv6</ref>())<sp/>{</highlight></codeline>
<codeline lineno="1764"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>IPV6_V6ONLY</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1765"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>WIN32</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1766"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>setsockopt(hListenSocket,<sp/>IPPROTO_IPV6,<sp/>IPV6_V6ONLY,<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*)&amp;nOne,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="1767"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1768"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>setsockopt(hListenSocket,<sp/>IPPROTO_IPV6,<sp/>IPV6_V6ONLY,<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*)&amp;nOne,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="1769"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1770"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1771"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>WIN32</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1772"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nProtLevel<sp/>=<sp/>10<sp/></highlight><highlight class="comment">/*<sp/>PROTECTION_LEVEL_UNRESTRICTED<sp/>*/</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1773"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nParameterId<sp/>=<sp/>23<sp/></highlight><highlight class="comment">/*<sp/>IPV6_PROTECTION_LEVEl<sp/>*/</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1774"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>this<sp/>call<sp/>is<sp/>allowed<sp/>to<sp/>fail</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1775"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>setsockopt(hListenSocket,<sp/>IPPROTO_IPV6,<sp/>nParameterId,<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*)&amp;nProtLevel,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="1776"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1777"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1778"><highlight class="normal"></highlight></codeline>
<codeline lineno="1779"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(::bind(hListenSocket,<sp/>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/>sockaddr*)&amp;sockaddr,<sp/>len)<sp/>==<sp/><ref refid="compat_8h_1a633b0396ff93d336a088412a190a5072" kindref="member">SOCKET_ERROR</ref>)</highlight></codeline>
<codeline lineno="1780"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1781"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nErr<sp/>=<sp/><ref refid="compat_8h_1a6d24fe3ab2906c21c373505ca244f90b" kindref="member">WSAGetLastError</ref>();</highlight></codeline>
<codeline lineno="1782"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(nErr<sp/>==<sp/><ref refid="compat_8h_1ae57d56be40e06a6148c41bb9c1f66eb6" kindref="member">WSAEADDRINUSE</ref>)</highlight></codeline>
<codeline lineno="1783"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>strError<sp/>=<sp/><ref refid="tinyformat_8h_1a56c674871a61baaad36ad52238c08857" kindref="member">strprintf</ref>(<ref refid="ui__interface_8h_1aad133bb6103b53cebf03fd01e2f11ba1" kindref="member">_</ref>(</highlight><highlight class="stringliteral">&quot;Unable<sp/>to<sp/>bind<sp/>to<sp/>%s<sp/>on<sp/>this<sp/>computer.<sp/>DarkSilk<sp/>is<sp/>probably<sp/>already<sp/>running.&quot;</highlight><highlight class="normal">),<sp/>addrBind.<ref refid="class_c_service_1a336f9848fe9364e260c76499be0351a5" kindref="member">ToString</ref>());</highlight></codeline>
<codeline lineno="1784"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1785"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>strError<sp/>=<sp/><ref refid="tinyformat_8h_1a56c674871a61baaad36ad52238c08857" kindref="member">strprintf</ref>(<ref refid="ui__interface_8h_1aad133bb6103b53cebf03fd01e2f11ba1" kindref="member">_</ref>(</highlight><highlight class="stringliteral">&quot;Unable<sp/>to<sp/>bind<sp/>to<sp/>%s<sp/>on<sp/>this<sp/>computer<sp/>(bind<sp/>returned<sp/>error<sp/>%d,<sp/>%s)&quot;</highlight><highlight class="normal">),<sp/>addrBind.<ref refid="class_c_service_1a336f9848fe9364e260c76499be0351a5" kindref="member">ToString</ref>(),<sp/>nErr,<sp/>strerror(nErr));</highlight></codeline>
<codeline lineno="1786"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="util_8h_1afc02c0a4258fedfb316be612bb659ba8" kindref="member">LogPrintf</ref>(</highlight><highlight class="stringliteral">&quot;%s\n&quot;</highlight><highlight class="normal">,<sp/>strError);</highlight></codeline>
<codeline lineno="1787"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1788"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1789"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="util_8h_1afc02c0a4258fedfb316be612bb659ba8" kindref="member">LogPrintf</ref>(</highlight><highlight class="stringliteral">&quot;Bound<sp/>to<sp/>%s\n&quot;</highlight><highlight class="normal">,<sp/>addrBind.<ref refid="class_c_service_1a336f9848fe9364e260c76499be0351a5" kindref="member">ToString</ref>());</highlight></codeline>
<codeline lineno="1790"><highlight class="normal"></highlight></codeline>
<codeline lineno="1791"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Listen<sp/>for<sp/>incoming<sp/>connections</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1792"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(listen(hListenSocket,<sp/>SOMAXCONN)<sp/>==<sp/><ref refid="compat_8h_1a633b0396ff93d336a088412a190a5072" kindref="member">SOCKET_ERROR</ref>)</highlight></codeline>
<codeline lineno="1793"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1794"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>strError<sp/>=<sp/><ref refid="tinyformat_8h_1a56c674871a61baaad36ad52238c08857" kindref="member">strprintf</ref>(</highlight><highlight class="stringliteral">&quot;Error:<sp/>Listening<sp/>for<sp/>incoming<sp/>connections<sp/>failed<sp/>(listen<sp/>returned<sp/>error<sp/>%d)&quot;</highlight><highlight class="normal">,<sp/><ref refid="compat_8h_1a6d24fe3ab2906c21c373505ca244f90b" kindref="member">WSAGetLastError</ref>());</highlight></codeline>
<codeline lineno="1795"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="util_8h_1afc02c0a4258fedfb316be612bb659ba8" kindref="member">LogPrintf</ref>(</highlight><highlight class="stringliteral">&quot;%s\n&quot;</highlight><highlight class="normal">,<sp/>strError);</highlight></codeline>
<codeline lineno="1796"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1797"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1798"><highlight class="normal"></highlight></codeline>
<codeline lineno="1799"><highlight class="normal"><sp/><sp/><sp/><sp/>vhListenSocket.push_back(hListenSocket);</highlight></codeline>
<codeline lineno="1800"><highlight class="normal"></highlight></codeline>
<codeline lineno="1801"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(addrBind.<ref refid="class_c_net_addr_1a35131b2792434d1c9a860c583b610ab6" kindref="member">IsRoutable</ref>()<sp/>&amp;&amp;<sp/><ref refid="net_8cpp_1a37089835ec27ad8bf945a458708165b9" kindref="member">fDiscover</ref>)</highlight></codeline>
<codeline lineno="1802"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="net_8cpp_1abb92a02eecc581e8927c8a6e31968645" kindref="member">AddLocal</ref>(addrBind,<sp/><ref refid="net_8h_1a385c44f6fb256e5716a2302a5b940388aad42caef30be428cb73f7d2753b5162e" kindref="member">LOCAL_BIND</ref>);</highlight></codeline>
<codeline lineno="1803"><highlight class="normal"></highlight></codeline>
<codeline lineno="1804"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1805"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1806"><highlight class="normal"></highlight></codeline>
<codeline lineno="1807"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>Discover(boost::thread_group&amp;<sp/>threadGroup)</highlight></codeline>
<codeline lineno="1808"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1809"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="net_8cpp_1a37089835ec27ad8bf945a458708165b9" kindref="member">fDiscover</ref>)</highlight></codeline>
<codeline lineno="1810"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1811"><highlight class="normal"></highlight></codeline>
<codeline lineno="1812"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>WIN32</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1813"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Get<sp/>local<sp/>host<sp/>IP</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1814"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>pszHostName[1000]<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1815"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(gethostname(pszHostName,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(pszHostName))<sp/>!=<sp/><ref refid="compat_8h_1a633b0396ff93d336a088412a190a5072" kindref="member">SOCKET_ERROR</ref>)</highlight></codeline>
<codeline lineno="1816"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1817"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vector&lt;CNetAddr&gt;<sp/>vaddr;</highlight></codeline>
<codeline lineno="1818"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="netbase_8cpp_1a3cdc8ba9f8d72752ff5cdd1e7407cdef" kindref="member">LookupHost</ref>(pszHostName,<sp/>vaddr))</highlight></codeline>
<codeline lineno="1819"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1820"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>BOOST_FOREACH<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_c_net_addr" kindref="compound">CNetAddr</ref><sp/>&amp;addr,<sp/>vaddr)</highlight></codeline>
<codeline lineno="1821"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1822"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="net_8cpp_1abb92a02eecc581e8927c8a6e31968645" kindref="member">AddLocal</ref>(addr,<sp/><ref refid="net_8h_1a385c44f6fb256e5716a2302a5b940388afa44f0377f6449a82e1e6176acfe44f7" kindref="member">LOCAL_IF</ref>);</highlight></codeline>
<codeline lineno="1823"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1824"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1825"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1826"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1827"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Get<sp/>local<sp/>host<sp/>ip</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1828"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">ifaddrs*<sp/>myaddrs;</highlight></codeline>
<codeline lineno="1829"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(getifaddrs(&amp;myaddrs)<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="1830"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1831"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/>ifaddrs*<sp/>ifa<sp/>=<sp/>myaddrs;<sp/>ifa<sp/>!=<sp/>NULL;<sp/>ifa<sp/>=<sp/>ifa-&gt;ifa_next)</highlight></codeline>
<codeline lineno="1832"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1833"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ifa-&gt;ifa_addr<sp/>==<sp/>NULL)<sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1834"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((ifa-&gt;ifa_flags<sp/>&amp;<sp/>IFF_UP)<sp/>==<sp/>0)<sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1835"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(strcmp(ifa-&gt;ifa_name,<sp/></highlight><highlight class="stringliteral">&quot;lo&quot;</highlight><highlight class="normal">)<sp/>==<sp/>0)<sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1836"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(strcmp(ifa-&gt;ifa_name,<sp/></highlight><highlight class="stringliteral">&quot;lo0&quot;</highlight><highlight class="normal">)<sp/>==<sp/>0)<sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1837"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ifa-&gt;ifa_addr-&gt;sa_family<sp/>==<sp/>AF_INET)</highlight></codeline>
<codeline lineno="1838"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1839"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">sockaddr_in*<sp/>s4<sp/>=<sp/>(</highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">sockaddr_in*)(ifa-&gt;ifa_addr);</highlight></codeline>
<codeline lineno="1840"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_c_net_addr" kindref="compound">CNetAddr</ref><sp/>addr(s4-&gt;sin_addr);</highlight></codeline>
<codeline lineno="1841"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="net_8cpp_1abb92a02eecc581e8927c8a6e31968645" kindref="member">AddLocal</ref>(addr,<sp/><ref refid="net_8h_1a385c44f6fb256e5716a2302a5b940388afa44f0377f6449a82e1e6176acfe44f7" kindref="member">LOCAL_IF</ref>))</highlight></codeline>
<codeline lineno="1842"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="util_8h_1afc02c0a4258fedfb316be612bb659ba8" kindref="member">LogPrintf</ref>(</highlight><highlight class="stringliteral">&quot;IPv4<sp/>%s:<sp/>%s\n&quot;</highlight><highlight class="normal">,<sp/>ifa-&gt;ifa_name,<sp/>addr.<ref refid="class_c_service_1a336f9848fe9364e260c76499be0351a5" kindref="member">ToString</ref>());</highlight></codeline>
<codeline lineno="1843"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1844"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ifa-&gt;ifa_addr-&gt;sa_family<sp/>==<sp/>AF_INET6)</highlight></codeline>
<codeline lineno="1845"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1846"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">sockaddr_in6*<sp/>s6<sp/>=<sp/>(</highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">sockaddr_in6*)(ifa-&gt;ifa_addr);</highlight></codeline>
<codeline lineno="1847"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_c_net_addr" kindref="compound">CNetAddr</ref><sp/>addr(s6-&gt;sin6_addr);</highlight></codeline>
<codeline lineno="1848"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="net_8cpp_1abb92a02eecc581e8927c8a6e31968645" kindref="member">AddLocal</ref>(addr,<sp/><ref refid="net_8h_1a385c44f6fb256e5716a2302a5b940388afa44f0377f6449a82e1e6176acfe44f7" kindref="member">LOCAL_IF</ref>))</highlight></codeline>
<codeline lineno="1849"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="util_8h_1afc02c0a4258fedfb316be612bb659ba8" kindref="member">LogPrintf</ref>(</highlight><highlight class="stringliteral">&quot;IPv6<sp/>%s:<sp/>%s\n&quot;</highlight><highlight class="normal">,<sp/>ifa-&gt;ifa_name,<sp/>addr.<ref refid="class_c_service_1a336f9848fe9364e260c76499be0351a5" kindref="member">ToString</ref>());</highlight></codeline>
<codeline lineno="1850"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1851"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1852"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>freeifaddrs(myaddrs);</highlight></codeline>
<codeline lineno="1853"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1854"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1855"><highlight class="normal"></highlight></codeline>
<codeline lineno="1856"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1857"><highlight class="normal"></highlight></codeline>
<codeline lineno="1858" refid="net_8h_1a9396d8054e8f74959e9391871aaddde0" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="net_8cpp_1a9396d8054e8f74959e9391871aaddde0" kindref="member">StartNode</ref>(boost::thread_group&amp;<sp/>threadGroup)</highlight></codeline>
<codeline lineno="1859"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1860"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(semOutbound<sp/>==<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="1861"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>initialize<sp/>semaphore</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1862"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nMaxOutbound<sp/>=<sp/>min(MAX_OUTBOUND_CONNECTIONS,<sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)<ref refid="util_8cpp_1a24f685720bf40370e5bd2a192ad50cd8" kindref="member">GetArg</ref>(</highlight><highlight class="stringliteral">&quot;-maxconnections&quot;</highlight><highlight class="normal">,<sp/>200));</highlight></codeline>
<codeline lineno="1863"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>semOutbound<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_c_semaphore" kindref="compound">CSemaphore</ref>(nMaxOutbound);</highlight></codeline>
<codeline lineno="1864"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1865"><highlight class="normal"></highlight></codeline>
<codeline lineno="1866"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(pnodeLocalHost<sp/>==<sp/>NULL)</highlight></codeline>
<codeline lineno="1867"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pnodeLocalHost<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_c_node" kindref="compound">CNode</ref>(INVALID_SOCKET,<sp/><ref refid="class_c_address" kindref="compound">CAddress</ref>(<ref refid="class_c_service" kindref="compound">CService</ref>(</highlight><highlight class="stringliteral">&quot;127.0.0.1&quot;</highlight><highlight class="normal">,<sp/>0),<sp/><ref refid="net_8cpp_1aac7a5df09042b8fc16272947ca022c2c" kindref="member">nLocalServices</ref>));</highlight></codeline>
<codeline lineno="1868"><highlight class="normal"></highlight></codeline>
<codeline lineno="1869"><highlight class="normal"><sp/><sp/><sp/><sp/>Discover(threadGroup);</highlight></codeline>
<codeline lineno="1870"><highlight class="normal"></highlight></codeline>
<codeline lineno="1871"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1872"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Start<sp/>threads</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1873"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1874"><highlight class="normal"></highlight></codeline>
<codeline lineno="1875"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="util_8cpp_1a64d956f1dda7f9a80ab5d594532b906d" kindref="member">GetBoolArg</ref>(</highlight><highlight class="stringliteral">&quot;-dnsseed&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">))</highlight></codeline>
<codeline lineno="1876"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="util_8h_1afc02c0a4258fedfb316be612bb659ba8" kindref="member">LogPrintf</ref>(</highlight><highlight class="stringliteral">&quot;DNS<sp/>seeding<sp/>disabled\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1877"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1878"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>threadGroup.create_thread(boost::bind(&amp;<ref refid="util_8h_1ac481a378af0229bf71e3d9fee7b938ad" kindref="member">TraceThread</ref>&lt;</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>(*)()&gt;,<sp/></highlight><highlight class="stringliteral">&quot;dnsseed&quot;</highlight><highlight class="normal">,<sp/>&amp;<ref refid="net_8cpp_1ab2d8883b5524ec7b80d3b9535e73a3ed" kindref="member">ThreadDNSAddressSeed</ref>));</highlight></codeline>
<codeline lineno="1879"><highlight class="normal"></highlight></codeline>
<codeline lineno="1880"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>USE_UPNP</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1881"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Map<sp/>ports<sp/>with<sp/>UPnP</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1882"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="net_8cpp_1a93e4e6fbe288b6e882e697918695f88e" kindref="member">MapPort</ref>(<ref refid="util_8cpp_1a64d956f1dda7f9a80ab5d594532b906d" kindref="member">GetBoolArg</ref>(</highlight><highlight class="stringliteral">&quot;-upnp&quot;</highlight><highlight class="normal">,<sp/>USE_UPNP));</highlight></codeline>
<codeline lineno="1883"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1884"><highlight class="normal"></highlight></codeline>
<codeline lineno="1885"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Send<sp/>and<sp/>receive<sp/>from<sp/>sockets,<sp/>accept<sp/>connections</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1886"><highlight class="normal"><sp/><sp/><sp/><sp/>threadGroup.create_thread(boost::bind(&amp;<ref refid="util_8h_1ac481a378af0229bf71e3d9fee7b938ad" kindref="member">TraceThread</ref>&lt;</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>(*)()&gt;,<sp/></highlight><highlight class="stringliteral">&quot;net&quot;</highlight><highlight class="normal">,<sp/>&amp;<ref refid="net_8cpp_1aa1111c12121e039bbd8eedb556e4514a" kindref="member">ThreadSocketHandler</ref>));</highlight></codeline>
<codeline lineno="1887"><highlight class="normal"></highlight></codeline>
<codeline lineno="1888"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Initiate<sp/>outbound<sp/>connections<sp/>from<sp/>-addnode</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1889"><highlight class="normal"><sp/><sp/><sp/><sp/>threadGroup.create_thread(boost::bind(&amp;<ref refid="util_8h_1ac481a378af0229bf71e3d9fee7b938ad" kindref="member">TraceThread</ref>&lt;</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>(*)()&gt;,<sp/></highlight><highlight class="stringliteral">&quot;addcon&quot;</highlight><highlight class="normal">,<sp/>&amp;<ref refid="net_8cpp_1a2d1ca95557ae336582b886a251e7fe94" kindref="member">ThreadOpenAddedConnections</ref>));</highlight></codeline>
<codeline lineno="1890"><highlight class="normal"></highlight></codeline>
<codeline lineno="1891"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Initiate<sp/>outbound<sp/>connections</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1892"><highlight class="normal"><sp/><sp/><sp/><sp/>threadGroup.create_thread(boost::bind(&amp;<ref refid="util_8h_1ac481a378af0229bf71e3d9fee7b938ad" kindref="member">TraceThread</ref>&lt;</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>(*)()&gt;,<sp/></highlight><highlight class="stringliteral">&quot;opencon&quot;</highlight><highlight class="normal">,<sp/>&amp;<ref refid="net_8cpp_1a3b4720330e61127963a43df26b80f804" kindref="member">ThreadOpenConnections</ref>));</highlight></codeline>
<codeline lineno="1893"><highlight class="normal"></highlight></codeline>
<codeline lineno="1894"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Process<sp/>messages</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1895"><highlight class="normal"><sp/><sp/><sp/><sp/>threadGroup.create_thread(boost::bind(&amp;<ref refid="util_8h_1ac481a378af0229bf71e3d9fee7b938ad" kindref="member">TraceThread</ref>&lt;</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>(*)()&gt;,<sp/></highlight><highlight class="stringliteral">&quot;msghand&quot;</highlight><highlight class="normal">,<sp/>&amp;<ref refid="net_8cpp_1a379b0d3521bdd62ac296f219d70c4e30" kindref="member">ThreadMessageHandler</ref>));</highlight></codeline>
<codeline lineno="1896"><highlight class="normal"></highlight></codeline>
<codeline lineno="1897"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Dump<sp/>network<sp/>addresses</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1898"><highlight class="normal"><sp/><sp/><sp/><sp/>threadGroup.create_thread(boost::bind(&amp;<ref refid="util_8h_1ac6be85b683de5d9b41dc3046e50d6acd" kindref="member">LoopForever</ref>&lt;</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>(*)()&gt;,<sp/></highlight><highlight class="stringliteral">&quot;dumpaddr&quot;</highlight><highlight class="normal">,<sp/>&amp;<ref refid="net_8cpp_1ab8b5323f5ef61499582a5a6e53b49b6e" kindref="member">DumpAddresses</ref>,<sp/><ref refid="net_8cpp_1a272e900bb201601d6842e465bec135af" kindref="member">DUMP_ADDRESSES_INTERVAL</ref><sp/>*<sp/>1000));</highlight></codeline>
<codeline lineno="1899"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1900"><highlight class="normal"></highlight></codeline>
<codeline lineno="1901" refid="net_8h_1ac9110488f45c160d58f3c7ab7197bcea" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="net_8cpp_1ac9110488f45c160d58f3c7ab7197bcea" kindref="member">StopNode</ref>()</highlight></codeline>
<codeline lineno="1902"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1903"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="util_8h_1afc02c0a4258fedfb316be612bb659ba8" kindref="member">LogPrintf</ref>(</highlight><highlight class="stringliteral">&quot;StopNode()\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1904"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="net_8cpp_1a93e4e6fbe288b6e882e697918695f88e" kindref="member">MapPort</ref>(</highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1905"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="main_8cpp_1a52890038ef379d29a1a8f3bd20dbe088" kindref="member">mempool</ref>.<ref refid="class_c_tx_mem_pool_1a3039b67e5eebaa3ff830261c192816f2" kindref="member">AddTransactionsUpdated</ref>(1);</highlight></codeline>
<codeline lineno="1906"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(semOutbound)</highlight></codeline>
<codeline lineno="1907"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i=0;<sp/>i&lt;MAX_OUTBOUND_CONNECTIONS;<sp/>i++)</highlight></codeline>
<codeline lineno="1908"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>semOutbound-&gt;<ref refid="class_c_semaphore_1af6a956f6c191e824485fd3af6db39318" kindref="member">post</ref>();</highlight></codeline>
<codeline lineno="1909"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="net_8cpp_1ab8b5323f5ef61499582a5a6e53b49b6e" kindref="member">DumpAddresses</ref>();</highlight></codeline>
<codeline lineno="1910"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1911"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1912"><highlight class="normal"></highlight></codeline>
<codeline lineno="1913" refid="class_c_net_cleanup" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="class_c_net_cleanup" kindref="compound">CNetCleanup</ref></highlight></codeline>
<codeline lineno="1914"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1915"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1916" refid="class_c_net_cleanup_1a928d536c21f6190defda6d6ea2726347" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_c_net_cleanup_1a928d536c21f6190defda6d6ea2726347" kindref="member">CNetCleanup</ref>()</highlight></codeline>
<codeline lineno="1917"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1918"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1919" refid="class_c_net_cleanup_1a29b59094c7697b45ca6d13424012506b" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_c_net_cleanup_1a29b59094c7697b45ca6d13424012506b" kindref="member">~CNetCleanup</ref>()</highlight></codeline>
<codeline lineno="1920"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1921"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Close<sp/>sockets</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1922"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>BOOST_FOREACH(<ref refid="class_c_node" kindref="compound">CNode</ref>*<sp/>pnode,<sp/>vNodes)</highlight></codeline>
<codeline lineno="1923"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(pnode-&gt;<ref refid="class_c_node_1a7cda6efa6a9ef9db3eebe70fc3bdd45a" kindref="member">hSocket</ref><sp/>!=<sp/>INVALID_SOCKET)</highlight></codeline>
<codeline lineno="1924"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="compat_8h_1a5a3eb971b466278ada4f7f87399a537c" kindref="member">closesocket</ref>(pnode-&gt;<ref refid="class_c_node_1a7cda6efa6a9ef9db3eebe70fc3bdd45a" kindref="member">hSocket</ref>);</highlight></codeline>
<codeline lineno="1925"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>BOOST_FOREACH(<ref refid="compat_8h_1a26ef1173e2f2c0d3db27eca28397d723" kindref="member">SOCKET</ref><sp/>hListenSocket,<sp/>vhListenSocket)</highlight></codeline>
<codeline lineno="1926"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(hListenSocket<sp/>!=<sp/>INVALID_SOCKET)</highlight></codeline>
<codeline lineno="1927"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="compat_8h_1a5a3eb971b466278ada4f7f87399a537c" kindref="member">closesocket</ref>(hListenSocket)<sp/>==<sp/><ref refid="compat_8h_1a633b0396ff93d336a088412a190a5072" kindref="member">SOCKET_ERROR</ref>)</highlight></codeline>
<codeline lineno="1928"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="util_8h_1afc02c0a4258fedfb316be612bb659ba8" kindref="member">LogPrintf</ref>(</highlight><highlight class="stringliteral">&quot;closesocket(hListenSocket)<sp/>failed<sp/>with<sp/>error<sp/>%d\n&quot;</highlight><highlight class="normal">,<sp/><ref refid="compat_8h_1a6d24fe3ab2906c21c373505ca244f90b" kindref="member">WSAGetLastError</ref>());</highlight></codeline>
<codeline lineno="1929"><highlight class="normal"></highlight></codeline>
<codeline lineno="1930"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>USE_NATIVE_I2P</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1931"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>BOOST_FOREACH(<ref refid="compat_8h_1a26ef1173e2f2c0d3db27eca28397d723" kindref="member">SOCKET</ref>&amp;<sp/>hI2PListenSocket,<sp/>vhI2PListenSocket)</highlight></codeline>
<codeline lineno="1932"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(hI2PListenSocket<sp/>!=<sp/>INVALID_SOCKET)</highlight></codeline>
<codeline lineno="1933"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="compat_8h_1a5a3eb971b466278ada4f7f87399a537c" kindref="member">closesocket</ref>(hI2PListenSocket)<sp/>==<sp/><ref refid="compat_8h_1a633b0396ff93d336a088412a190a5072" kindref="member">SOCKET_ERROR</ref>)</highlight></codeline>
<codeline lineno="1934"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;closesocket(hI2PListenSocket)<sp/>failed<sp/>with<sp/>error<sp/>%d\n&quot;</highlight><highlight class="normal">,<sp/><ref refid="compat_8h_1a6d24fe3ab2906c21c373505ca244f90b" kindref="member">WSAGetLastError</ref>());</highlight></codeline>
<codeline lineno="1935"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1936"><highlight class="normal"></highlight></codeline>
<codeline lineno="1937"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>WIN32</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1938"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Shutdown<sp/>Windows<sp/>Sockets</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1939"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>WSACleanup();</highlight></codeline>
<codeline lineno="1940"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1941"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1942"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1943"><highlight class="normal"><ref refid="net_8cpp_1ae560d3fdf794873af9a1212644985fdd" kindref="member">instance_of_cnetcleanup</ref>;</highlight></codeline>
<codeline lineno="1944"><highlight class="normal"></highlight></codeline>
<codeline lineno="1945" refid="net_8h_1abe329205a15b55df86608f5f1964bdb1" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="net_8cpp_1abe329205a15b55df86608f5f1964bdb1" kindref="member">RelayTransaction</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_c_transaction" kindref="compound">CTransaction</ref>&amp;<sp/>tx,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classuint256" kindref="compound">uint256</ref>&amp;<sp/><ref refid="cache_8cc_1a11ecb029164e055f28f4123ce3748862" kindref="member">hash</ref>)</highlight></codeline>
<codeline lineno="1946"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1947"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_c_data_stream" kindref="compound">CDataStream</ref><sp/>ss(<ref refid="serialize_8h_1a6b7b47dd702d9e331586d485013fd1eaa652754eeaf79fba4fcf4c18597a6961c" kindref="member">SER_NETWORK</ref>,<sp/>PROTOCOL_VERSION);</highlight></codeline>
<codeline lineno="1948"><highlight class="normal"><sp/><sp/><sp/><sp/>ss.<ref refid="class_c_data_stream_1a5542e71bd7af2ab7cd7be0f381d39cb5" kindref="member">reserve</ref>(10000);</highlight></codeline>
<codeline lineno="1949"><highlight class="normal"><sp/><sp/><sp/><sp/>ss<sp/>&lt;&lt;<sp/>tx;</highlight></codeline>
<codeline lineno="1950"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="net_8cpp_1abe329205a15b55df86608f5f1964bdb1" kindref="member">RelayTransaction</ref>(tx,<sp/>hash,<sp/>ss);</highlight></codeline>
<codeline lineno="1951"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1952"><highlight class="normal"></highlight></codeline>
<codeline lineno="1953" refid="net_8h_1aa7eea5ebcc85b5a7a0ae3716608bfffe" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="net_8cpp_1abe329205a15b55df86608f5f1964bdb1" kindref="member">RelayTransaction</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_c_transaction" kindref="compound">CTransaction</ref>&amp;<sp/>tx,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classuint256" kindref="compound">uint256</ref>&amp;<sp/><ref refid="cache_8cc_1a11ecb029164e055f28f4123ce3748862" kindref="member">hash</ref>,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_c_data_stream" kindref="compound">CDataStream</ref>&amp;<sp/>ss)</highlight></codeline>
<codeline lineno="1954"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1955"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_c_inv" kindref="compound">CInv</ref><sp/>inv(<ref refid="protocol_8h_1ac36f475ca5b446f4fde4c9b90bec77c8a0494732fc92c975f58783e224585c473" kindref="member">MSG_TX</ref>,<sp/>hash);</highlight></codeline>
<codeline lineno="1956"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1957"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="sync_8h_1a911fe23f057c2fe5aad629162d6c99d0" kindref="member">LOCK</ref>(cs_mapRelay);</highlight></codeline>
<codeline lineno="1958"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Expire<sp/>old<sp/>relay<sp/>messages</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1959"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(!<ref refid="net_8cpp_1aebaeae1f0ac40d20a7aa3dd851176ae8" kindref="member">vRelayExpiration</ref>.empty()<sp/>&amp;&amp;<sp/><ref refid="net_8cpp_1aebaeae1f0ac40d20a7aa3dd851176ae8" kindref="member">vRelayExpiration</ref>.front().first<sp/>&lt;<sp/><ref refid="util_8cpp_1a46fac5fba8ba905b5f9acb364f5d8c6f" kindref="member">GetTime</ref>())</highlight></codeline>
<codeline lineno="1960"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1961"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="net_8cpp_1a2c9eaa799e02fdf8a5c52eb9a5f750f6" kindref="member">mapRelay</ref>.erase(<ref refid="net_8cpp_1aebaeae1f0ac40d20a7aa3dd851176ae8" kindref="member">vRelayExpiration</ref>.front().second);</highlight></codeline>
<codeline lineno="1962"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="net_8cpp_1aebaeae1f0ac40d20a7aa3dd851176ae8" kindref="member">vRelayExpiration</ref>.pop_front();</highlight></codeline>
<codeline lineno="1963"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1964"><highlight class="normal"></highlight></codeline>
<codeline lineno="1965"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Save<sp/>original<sp/>serialized<sp/>message<sp/>so<sp/>newer<sp/>versions<sp/>are<sp/>preserved</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1966"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="net_8cpp_1a2c9eaa799e02fdf8a5c52eb9a5f750f6" kindref="member">mapRelay</ref>.insert(std::make_pair(inv,<sp/>ss));</highlight></codeline>
<codeline lineno="1967"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="net_8cpp_1aebaeae1f0ac40d20a7aa3dd851176ae8" kindref="member">vRelayExpiration</ref>.push_back(std::make_pair(<ref refid="util_8cpp_1a46fac5fba8ba905b5f9acb364f5d8c6f" kindref="member">GetTime</ref>()<sp/>+<sp/>15<sp/>*<sp/>60,<sp/>inv));</highlight></codeline>
<codeline lineno="1968"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1969"><highlight class="normal"></highlight></codeline>
<codeline lineno="1970"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="net_8h_1a8efddffaa3931e6bafecaac5e0605d1b" kindref="member">RelayInventory</ref>(inv);</highlight></codeline>
<codeline lineno="1971"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1972"><highlight class="normal"></highlight></codeline>
<codeline lineno="1973" refid="net_8h_1ab821f588c6f65bc11a5735354146df42" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="net_8cpp_1acd641309ae7f63d62c89ea2d912eec08" kindref="member">RelayTransactionLockReq</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_c_transaction" kindref="compound">CTransaction</ref>&amp;<sp/>tx,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classuint256" kindref="compound">uint256</ref>&amp;<sp/><ref refid="cache_8cc_1a11ecb029164e055f28f4123ce3748862" kindref="member">hash</ref>,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>relayToAll)</highlight></codeline>
<codeline lineno="1974"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1975"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_c_inv" kindref="compound">CInv</ref><sp/>inv(<ref refid="protocol_8h_1ac36f475ca5b446f4fde4c9b90bec77c8a802e4d970385efb01469f48db2cf1e06" kindref="member">MSG_TXLOCK_REQUEST</ref>,<sp/>tx.<ref refid="class_c_transaction_1a3f8666d2a275c40da14bd5eaf47dc004" kindref="member">GetHash</ref>());</highlight></codeline>
<codeline lineno="1976"><highlight class="normal"></highlight></codeline>
<codeline lineno="1977"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//broadcast<sp/>the<sp/>new<sp/>lock</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1978"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="sync_8h_1a911fe23f057c2fe5aad629162d6c99d0" kindref="member">LOCK</ref>(cs_vNodes);</highlight></codeline>
<codeline lineno="1979"><highlight class="normal"><sp/><sp/><sp/><sp/>BOOST_FOREACH(<ref refid="class_c_node" kindref="compound">CNode</ref>*<sp/>pnode,<sp/>vNodes)</highlight></codeline>
<codeline lineno="1980"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1981"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!relayToAll<sp/>&amp;&amp;<sp/>!pnode-&gt;<ref refid="class_c_node_1ab387bb0c4ffd42e3f0aea233dca0e301" kindref="member">fRelayTxes</ref>)</highlight></codeline>
<codeline lineno="1982"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1983"><highlight class="normal"></highlight></codeline>
<codeline lineno="1984"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pnode-&gt;<ref refid="class_c_node_1a204fda3d33404cb37698c085b1583ab2" kindref="member">PushMessage</ref>(</highlight><highlight class="stringliteral">&quot;txlreq&quot;</highlight><highlight class="normal">,<sp/>tx);</highlight></codeline>
<codeline lineno="1985"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1986"><highlight class="normal"></highlight></codeline>
<codeline lineno="1987"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1988"><highlight class="normal"></highlight></codeline>
<codeline lineno="1989" refid="class_c_node_1af72b4b6e454c743af071896019ae1c69" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_c_node_1af72b4b6e454c743af071896019ae1c69" kindref="member">CNode::RecordBytesRecv</ref>(<ref refid="stdint_8h_1aaa5d1cd013383c889537491c3cfd9aad" kindref="member">uint64_t</ref><sp/>bytes)</highlight></codeline>
<codeline lineno="1990"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1991"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="sync_8h_1a911fe23f057c2fe5aad629162d6c99d0" kindref="member">LOCK</ref>(cs_totalBytesRecv);</highlight></codeline>
<codeline lineno="1992"><highlight class="normal"><sp/><sp/><sp/><sp/>nTotalBytesRecv<sp/>+=<sp/>bytes;</highlight></codeline>
<codeline lineno="1993"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1994"><highlight class="normal"></highlight></codeline>
<codeline lineno="1995" refid="class_c_node_1a945c993a84eaa9d6bca18284befaccbe" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_c_node_1a945c993a84eaa9d6bca18284befaccbe" kindref="member">CNode::RecordBytesSent</ref>(<ref refid="stdint_8h_1aaa5d1cd013383c889537491c3cfd9aad" kindref="member">uint64_t</ref><sp/>bytes)</highlight></codeline>
<codeline lineno="1996"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1997"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="sync_8h_1a911fe23f057c2fe5aad629162d6c99d0" kindref="member">LOCK</ref>(cs_totalBytesSent);</highlight></codeline>
<codeline lineno="1998"><highlight class="normal"><sp/><sp/><sp/><sp/>nTotalBytesSent<sp/>+=<sp/>bytes;</highlight></codeline>
<codeline lineno="1999"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2000"><highlight class="normal"></highlight></codeline>
<codeline lineno="2001" refid="class_c_node_1a1988b63b48fdc9b72014bdf9588b0168" refkind="member"><highlight class="normal"><ref refid="stdint_8h_1aaa5d1cd013383c889537491c3cfd9aad" kindref="member">uint64_t</ref><sp/><ref refid="class_c_node_1a1988b63b48fdc9b72014bdf9588b0168" kindref="member">CNode::GetTotalBytesRecv</ref>()</highlight></codeline>
<codeline lineno="2002"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2003"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="sync_8h_1a911fe23f057c2fe5aad629162d6c99d0" kindref="member">LOCK</ref>(cs_totalBytesRecv);</highlight></codeline>
<codeline lineno="2004"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>nTotalBytesRecv;</highlight></codeline>
<codeline lineno="2005"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2006"><highlight class="normal"></highlight></codeline>
<codeline lineno="2007" refid="class_c_node_1af318a64e7ddad50d1e1b6fc123a5f0b9" refkind="member"><highlight class="normal"><ref refid="stdint_8h_1aaa5d1cd013383c889537491c3cfd9aad" kindref="member">uint64_t</ref><sp/><ref refid="class_c_node_1af318a64e7ddad50d1e1b6fc123a5f0b9" kindref="member">CNode::GetTotalBytesSent</ref>()</highlight></codeline>
<codeline lineno="2008"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2009"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="sync_8h_1a911fe23f057c2fe5aad629162d6c99d0" kindref="member">LOCK</ref>(cs_totalBytesSent);</highlight></codeline>
<codeline lineno="2010"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>nTotalBytesSent;</highlight></codeline>
<codeline lineno="2011"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2012"><highlight class="normal"></highlight></codeline>
<codeline lineno="2013"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2014"><highlight class="normal"></highlight><highlight class="comment">//<sp/>CAddrDB</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2015"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2016"><highlight class="normal"></highlight></codeline>
<codeline lineno="2017" refid="class_c_addr_d_b_1af8c039f1904b1892c5a14e484a5b31a7" refkind="member"><highlight class="normal"><ref refid="class_c_addr_d_b_1af8c039f1904b1892c5a14e484a5b31a7" kindref="member">CAddrDB::CAddrDB</ref>()</highlight></codeline>
<codeline lineno="2018"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2019"><highlight class="normal"><sp/><sp/><sp/><sp/>pathAddr<sp/>=<sp/><ref refid="util_8cpp_1ab83866a054745d4b30a3948a1b44beba" kindref="member">GetDataDir</ref>()<sp/>/<sp/></highlight><highlight class="stringliteral">&quot;peers.dat&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2020"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2021"><highlight class="normal"></highlight></codeline>
<codeline lineno="2022" refid="class_c_addr_d_b_1aaec90dba59cd69a2f25bc5630a1dde39" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="class_c_addr_d_b_1aaec90dba59cd69a2f25bc5630a1dde39" kindref="member">CAddrDB::Write</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_c_addr_man" kindref="compound">CAddrMan</ref>&amp;<sp/>addr)</highlight></codeline>
<codeline lineno="2023"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2024"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Generate<sp/>random<sp/>temporary<sp/>filename</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2025"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">short</highlight><highlight class="normal"><sp/>randv<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2026"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="util_8cpp_1acf52c2aa8213c7b15e26594a2264ed8a" kindref="member">GetRandBytes</ref>((</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)&amp;randv,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(randv));</highlight></codeline>
<codeline lineno="2027"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>tmpfn<sp/>=<sp/><ref refid="tinyformat_8h_1a56c674871a61baaad36ad52238c08857" kindref="member">strprintf</ref>(</highlight><highlight class="stringliteral">&quot;peers.dat.%04x&quot;</highlight><highlight class="normal">,<sp/>randv);</highlight></codeline>
<codeline lineno="2028"><highlight class="normal"></highlight></codeline>
<codeline lineno="2029"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>serialize<sp/>addresses,<sp/>checksum<sp/>data<sp/>up<sp/>to<sp/>that<sp/>point,<sp/>then<sp/>append<sp/>csum</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2030"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_c_data_stream" kindref="compound">CDataStream</ref><sp/>ssPeers(<ref refid="serialize_8h_1a6b7b47dd702d9e331586d485013fd1eaa34949680c53028d35a449bf88b3c329d" kindref="member">SER_DISK</ref>,<sp/>CLIENT_VERSION);</highlight></codeline>
<codeline lineno="2031"><highlight class="normal"><sp/><sp/><sp/><sp/>ssPeers<sp/>&lt;&lt;<sp/><ref refid="serialize_8h_1a9393dd1b6a30ae7fe9cc42240241f741" kindref="member">FLATDATA</ref>(<ref refid="chainparams_8cpp_1ace5c5b706d71a324a417dd2db394fd4a" kindref="member">Params</ref>().MessageStart());</highlight></codeline>
<codeline lineno="2032"><highlight class="normal"><sp/><sp/><sp/><sp/>ssPeers<sp/>&lt;&lt;<sp/>addr;</highlight></codeline>
<codeline lineno="2033"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classuint256" kindref="compound">uint256</ref><sp/><ref refid="cache_8cc_1a11ecb029164e055f28f4123ce3748862" kindref="member">hash</ref><sp/>=<sp/><ref refid="hash_8h_1ab3f6c437460137530d86e09c2c102e99" kindref="member">Hash</ref>(ssPeers.<ref refid="class_c_data_stream_1a5b9e70188c662f4e9496066472af213e" kindref="member">begin</ref>(),<sp/>ssPeers.<ref refid="class_c_data_stream_1a1c22182691412ed9e0a30b719d388f31" kindref="member">end</ref>());</highlight></codeline>
<codeline lineno="2034"><highlight class="normal"><sp/><sp/><sp/><sp/>ssPeers<sp/>&lt;&lt;<sp/><ref refid="cache_8cc_1a11ecb029164e055f28f4123ce3748862" kindref="member">hash</ref>;</highlight></codeline>
<codeline lineno="2035"><highlight class="normal"></highlight></codeline>
<codeline lineno="2036"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>open<sp/>temp<sp/>output<sp/>file,<sp/>and<sp/>associate<sp/>with<sp/>CAutoFile</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2037"><highlight class="normal"><sp/><sp/><sp/><sp/>boost::filesystem::path<sp/>pathTmp<sp/>=<sp/><ref refid="util_8cpp_1ab83866a054745d4b30a3948a1b44beba" kindref="member">GetDataDir</ref>()<sp/>/<sp/>tmpfn;</highlight></codeline>
<codeline lineno="2038"><highlight class="normal"><sp/><sp/><sp/><sp/>FILE<sp/>*file<sp/>=<sp/>fopen(pathTmp.string().c_str(),<sp/></highlight><highlight class="stringliteral">&quot;wb&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2039"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_c_auto_file" kindref="compound">CAutoFile</ref><sp/>fileout<sp/>=<sp/><ref refid="class_c_auto_file" kindref="compound">CAutoFile</ref>(file,<sp/><ref refid="serialize_8h_1a6b7b47dd702d9e331586d485013fd1eaa34949680c53028d35a449bf88b3c329d" kindref="member">SER_DISK</ref>,<sp/>CLIENT_VERSION);</highlight></codeline>
<codeline lineno="2040"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!fileout)</highlight></codeline>
<codeline lineno="2041"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>error(</highlight><highlight class="stringliteral">&quot;CAddrman::Write()<sp/>:<sp/>open<sp/>failed&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2042"><highlight class="normal"></highlight></codeline>
<codeline lineno="2043"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Write<sp/>and<sp/>commit<sp/>header,<sp/>data</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2044"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">try</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="2045"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fileout<sp/>&lt;&lt;<sp/>ssPeers;</highlight></codeline>
<codeline lineno="2046"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2047"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">catch</highlight><highlight class="normal"><sp/>(std::exception<sp/>&amp;e)<sp/>{</highlight></codeline>
<codeline lineno="2048"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>error(</highlight><highlight class="stringliteral">&quot;CAddrman::Write()<sp/>:<sp/>I/O<sp/>error&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2049"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2050"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="util_8cpp_1a7572b77c2a5191de8d40d4050322ab84" kindref="member">FileCommit</ref>(fileout);</highlight></codeline>
<codeline lineno="2051"><highlight class="normal"><sp/><sp/><sp/><sp/>fileout.fclose();</highlight></codeline>
<codeline lineno="2052"><highlight class="normal"></highlight></codeline>
<codeline lineno="2053"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>replace<sp/>existing<sp/>peers.dat,<sp/>if<sp/>any,<sp/>with<sp/>new<sp/>peers.dat.XXXX</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2054"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="util_8cpp_1ad8f8509a84cc6f53344a5ac76369c327" kindref="member">RenameOver</ref>(pathTmp,<sp/>pathAddr))</highlight></codeline>
<codeline lineno="2055"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>error(</highlight><highlight class="stringliteral">&quot;CAddrman::Write()<sp/>:<sp/>Rename-into-place<sp/>failed&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2056"><highlight class="normal"></highlight></codeline>
<codeline lineno="2057"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2058"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2059"><highlight class="normal"></highlight></codeline>
<codeline lineno="2060" refid="class_c_addr_d_b_1aed4b567fb7c2dd15b2856e7c769967b7" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="class_c_addr_d_b_1aed4b567fb7c2dd15b2856e7c769967b7" kindref="member">CAddrDB::Read</ref>(<ref refid="class_c_addr_man" kindref="compound">CAddrMan</ref>&amp;<sp/>addr)</highlight></codeline>
<codeline lineno="2061"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2062"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>open<sp/>input<sp/>file,<sp/>and<sp/>associate<sp/>with<sp/>CAutoFile</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2063"><highlight class="normal"><sp/><sp/><sp/><sp/>FILE<sp/>*file<sp/>=<sp/>fopen(pathAddr.string().c_str(),<sp/></highlight><highlight class="stringliteral">&quot;rb&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2064"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_c_auto_file" kindref="compound">CAutoFile</ref><sp/>filein<sp/>=<sp/><ref refid="class_c_auto_file" kindref="compound">CAutoFile</ref>(file,<sp/><ref refid="serialize_8h_1a6b7b47dd702d9e331586d485013fd1eaa34949680c53028d35a449bf88b3c329d" kindref="member">SER_DISK</ref>,<sp/>CLIENT_VERSION);</highlight></codeline>
<codeline lineno="2065"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!filein)</highlight></codeline>
<codeline lineno="2066"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>error(</highlight><highlight class="stringliteral">&quot;CAddrman::Read()<sp/>:<sp/>open<sp/>failed&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2067"><highlight class="normal"></highlight></codeline>
<codeline lineno="2068"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>use<sp/>file<sp/>size<sp/>to<sp/>size<sp/>memory<sp/>buffer</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2069"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>fileSize<sp/>=<sp/>boost::filesystem::file_size(pathAddr);</highlight></codeline>
<codeline lineno="2070"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>dataSize<sp/>=<sp/>fileSize<sp/>-<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="classuint256" kindref="compound">uint256</ref>);</highlight></codeline>
<codeline lineno="2071"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Don&apos;t<sp/>try<sp/>to<sp/>resize<sp/>to<sp/>a<sp/>negative<sp/>number<sp/>if<sp/>file<sp/>is<sp/>small</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2072"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>dataSize<sp/>&lt;<sp/>0<sp/>)<sp/>dataSize<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2073"><highlight class="normal"><sp/><sp/><sp/><sp/>vector&lt;unsigned<sp/>char&gt;<sp/>vchData;</highlight></codeline>
<codeline lineno="2074"><highlight class="normal"><sp/><sp/><sp/><sp/>vchData.resize(dataSize);</highlight></codeline>
<codeline lineno="2075"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classuint256" kindref="compound">uint256</ref><sp/>hashIn;</highlight></codeline>
<codeline lineno="2076"><highlight class="normal"></highlight></codeline>
<codeline lineno="2077"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>read<sp/>data<sp/>and<sp/>checksum<sp/>from<sp/>file</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2078"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">try</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="2079"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>filein.read((</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)&amp;vchData[0],<sp/>dataSize);</highlight></codeline>
<codeline lineno="2080"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>filein<sp/>&gt;&gt;<sp/>hashIn;</highlight></codeline>
<codeline lineno="2081"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2082"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">catch</highlight><highlight class="normal"><sp/>(std::exception<sp/>&amp;e)<sp/>{</highlight></codeline>
<codeline lineno="2083"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>error(</highlight><highlight class="stringliteral">&quot;CAddrman::Read()<sp/>2<sp/>:<sp/>I/O<sp/>error<sp/>or<sp/>stream<sp/>data<sp/>corrupted&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2084"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2085"><highlight class="normal"><sp/><sp/><sp/><sp/>filein.fclose();</highlight></codeline>
<codeline lineno="2086"><highlight class="normal"></highlight></codeline>
<codeline lineno="2087"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_c_data_stream" kindref="compound">CDataStream</ref><sp/>ssPeers(vchData,<sp/><ref refid="serialize_8h_1a6b7b47dd702d9e331586d485013fd1eaa34949680c53028d35a449bf88b3c329d" kindref="member">SER_DISK</ref>,<sp/>CLIENT_VERSION);</highlight></codeline>
<codeline lineno="2088"><highlight class="normal"></highlight></codeline>
<codeline lineno="2089"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>verify<sp/>stored<sp/>checksum<sp/>matches<sp/>input<sp/>data</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2090"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classuint256" kindref="compound">uint256</ref><sp/>hashTmp<sp/>=<sp/><ref refid="hash_8h_1ab3f6c437460137530d86e09c2c102e99" kindref="member">Hash</ref>(ssPeers.<ref refid="class_c_data_stream_1a5b9e70188c662f4e9496066472af213e" kindref="member">begin</ref>(),<sp/>ssPeers.<ref refid="class_c_data_stream_1a1c22182691412ed9e0a30b719d388f31" kindref="member">end</ref>());</highlight></codeline>
<codeline lineno="2091"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(hashIn<sp/>!=<sp/>hashTmp)</highlight></codeline>
<codeline lineno="2092"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>error(</highlight><highlight class="stringliteral">&quot;CAddrman::Read()<sp/>:<sp/>checksum<sp/>mismatch;<sp/>data<sp/>corrupted&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2093"><highlight class="normal"></highlight></codeline>
<codeline lineno="2094"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>pchMsgTmp[4];</highlight></codeline>
<codeline lineno="2095"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">try</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="2096"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>de-serialize<sp/>file<sp/>header<sp/>(network<sp/>specific<sp/>magic<sp/>number)<sp/>and<sp/>..</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2097"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ssPeers<sp/>&gt;&gt;<sp/><ref refid="serialize_8h_1a9393dd1b6a30ae7fe9cc42240241f741" kindref="member">FLATDATA</ref>(pchMsgTmp);</highlight></codeline>
<codeline lineno="2098"><highlight class="normal"></highlight></codeline>
<codeline lineno="2099"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>...<sp/>verify<sp/>the<sp/>network<sp/>matches<sp/>ours</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2100"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(memcmp(pchMsgTmp,<sp/><ref refid="chainparams_8cpp_1ace5c5b706d71a324a417dd2db394fd4a" kindref="member">Params</ref>().MessageStart(),<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(pchMsgTmp)))</highlight></codeline>
<codeline lineno="2101"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>error(</highlight><highlight class="stringliteral">&quot;CAddrman::Read()<sp/>:<sp/>invalid<sp/>network<sp/>magic<sp/>number&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2102"><highlight class="normal"></highlight></codeline>
<codeline lineno="2103"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>de-serialize<sp/>address<sp/>data<sp/>into<sp/>one<sp/>CAddrMan<sp/>object</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2104"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ssPeers<sp/>&gt;&gt;<sp/>addr;</highlight></codeline>
<codeline lineno="2105"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2106"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">catch</highlight><highlight class="normal"><sp/>(std::exception<sp/>&amp;e)<sp/>{</highlight></codeline>
<codeline lineno="2107"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>error(</highlight><highlight class="stringliteral">&quot;CAddrman::Read()<sp/>:<sp/>I/O<sp/>error<sp/>or<sp/>stream<sp/>data<sp/>corrupted&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2108"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2109"><highlight class="normal"></highlight></codeline>
<codeline lineno="2110"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2111"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="/home/dev/ds-160209/src/net.cpp"/>
  </compounddef>
</doxygen>
