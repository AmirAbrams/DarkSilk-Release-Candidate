<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.9.1">
  <compounddef id="field_8h" kind="file" language="C++">
    <compoundname>field.h</compoundname>
    <includedby refid="group__impl_8h" local="yes">/home/dev/ds-160209/src/secp256k1/src/group_impl.h</includedby>
    <includedby refid="group_8h" local="yes">/home/dev/ds-160209/src/secp256k1/src/group.h</includedby>
    <includedby refid="ecdsa__impl_8h" local="yes">/home/dev/ds-160209/src/secp256k1/src/ecdsa_impl.h</includedby>
    <includedby refid="eckey__impl_8h" local="yes">/home/dev/ds-160209/src/secp256k1/src/eckey_impl.h</includedby>
    <includedby refid="field__10x26__impl_8h" local="yes">/home/dev/ds-160209/src/secp256k1/src/field_10x26_impl.h</includedby>
    <includedby refid="field__5x52__impl_8h" local="yes">/home/dev/ds-160209/src/secp256k1/src/field_5x52_impl.h</includedby>
    <includedby refid="schnorr__impl_8h" local="yes">/home/dev/ds-160209/src/secp256k1/src/modules/schnorr/schnorr_impl.h</includedby>
    <invincdepgraph>
      <node id="22373">
        <label>/home/dev/ds-160209/src/secp256k1/src/ecmult_impl.h</label>
        <link refid="ecmult__impl_8h"/>
        <childnode refid="22370" relation="include">
        </childnode>
        <childnode refid="22364" relation="include">
        </childnode>
        <childnode refid="22365" relation="include">
        </childnode>
      </node>
      <node id="22369">
        <label>/home/dev/ds-160209/src/secp256k1/src/scalar_impl.h</label>
        <link refid="scalar__impl_8h"/>
        <childnode refid="22364" relation="include">
        </childnode>
        <childnode refid="22365" relation="include">
        </childnode>
        <childnode refid="22367" relation="include">
        </childnode>
      </node>
      <node id="22383">
        <label>/home/dev/ds-160209/src/secp256k1/src/ecmult_static_context.h</label>
        <link refid="ecmult__static__context_8h"/>
      </node>
      <node id="22384">
        <label>/home/dev/ds-160209/src/secp256k1/src/modules/schnorr/schnorr.h</label>
        <link refid="schnorr_8h"/>
        <childnode refid="22379" relation="include">
        </childnode>
      </node>
      <node id="22367">
        <label>/home/dev/ds-160209/src/secp256k1/src/gen_context.c</label>
        <link refid="gen__context_8c"/>
      </node>
      <node id="22368">
        <label>/home/dev/ds-160209/src/secp256k1/src/group.h</label>
        <link refid="group_8h"/>
        <childnode refid="22363" relation="include">
        </childnode>
        <childnode refid="22369" relation="include">
        </childnode>
        <childnode refid="22370" relation="include">
        </childnode>
        <childnode refid="22372" relation="include">
        </childnode>
        <childnode refid="22373" relation="include">
        </childnode>
        <childnode refid="22374" relation="include">
        </childnode>
        <childnode refid="22381" relation="include">
        </childnode>
        <childnode refid="22382" relation="include">
        </childnode>
        <childnode refid="22375" relation="include">
        </childnode>
        <childnode refid="22376" relation="include">
        </childnode>
        <childnode refid="22377" relation="include">
        </childnode>
        <childnode refid="22378" relation="include">
        </childnode>
        <childnode refid="22383" relation="include">
        </childnode>
        <childnode refid="22384" relation="include">
        </childnode>
        <childnode refid="22379" relation="include">
        </childnode>
      </node>
      <node id="22386">
        <label>/home/dev/ds-160209/src/secp256k1/src/field_5x52_impl.h</label>
        <link refid="field__5x52__impl_8h"/>
      </node>
      <node id="22366">
        <label>/home/dev/ds-160209/src/secp256k1/src/tests.c</label>
        <link refid="tests_8c"/>
      </node>
      <node id="22379">
        <label>/home/dev/ds-160209/src/secp256k1/src/modules/schnorr/schnorr_impl.h</label>
        <link refid="schnorr__impl_8h"/>
        <childnode refid="22380" relation="include">
        </childnode>
      </node>
      <node id="22380">
        <label>/home/dev/ds-160209/src/secp256k1/src/modules/schnorr/main_impl.h</label>
        <link refid="schnorr_2main__impl_8h"/>
      </node>
      <node id="22371">
        <label>/home/dev/ds-160209/src/secp256k1/src/modules/ecdh/main_impl.h</label>
        <link refid="ecdh_2main__impl_8h"/>
      </node>
      <node id="22365">
        <label>/home/dev/ds-160209/src/secp256k1/src/secp256k1.c</label>
        <link refid="secp256k1_8c"/>
        <childnode refid="22364" relation="include">
        </childnode>
        <childnode refid="22366" relation="include">
        </childnode>
      </node>
      <node id="22374">
        <label>/home/dev/ds-160209/src/secp256k1/src/ecmult.h</label>
        <link refid="ecmult_8h"/>
        <childnode refid="22373" relation="include">
        </childnode>
        <childnode refid="22375" relation="include">
        </childnode>
        <childnode refid="22376" relation="include">
        </childnode>
        <childnode refid="22377" relation="include">
        </childnode>
        <childnode refid="22379" relation="include">
        </childnode>
      </node>
      <node id="22363">
        <label>/home/dev/ds-160209/src/secp256k1/src/group_impl.h</label>
        <link refid="group__impl_8h"/>
        <childnode refid="22364" relation="include">
        </childnode>
        <childnode refid="22365" relation="include">
        </childnode>
        <childnode refid="22367" relation="include">
        </childnode>
      </node>
      <node id="22382">
        <label>/home/dev/ds-160209/src/secp256k1/src/ecmult_gen.h</label>
        <link refid="ecmult__gen_8h"/>
        <childnode refid="22381" relation="include">
        </childnode>
        <childnode refid="22375" relation="include">
        </childnode>
        <childnode refid="22377" relation="include">
        </childnode>
        <childnode refid="22378" relation="include">
        </childnode>
        <childnode refid="22379" relation="include">
        </childnode>
      </node>
      <node id="22385">
        <label>/home/dev/ds-160209/src/secp256k1/src/field_10x26_impl.h</label>
        <link refid="field__10x26__impl_8h"/>
      </node>
      <node id="22378">
        <label>/home/dev/ds-160209/src/secp256k1/src/eckey_impl.h</label>
        <link refid="eckey__impl_8h"/>
        <childnode refid="22365" relation="include">
        </childnode>
      </node>
      <node id="22370">
        <label>/home/dev/ds-160209/src/secp256k1/src/ecmult_const_impl.h</label>
        <link refid="ecmult__const__impl_8h"/>
        <childnode refid="22364" relation="include">
        </childnode>
        <childnode refid="22365" relation="include">
        </childnode>
        <childnode refid="22371" relation="include">
        </childnode>
      </node>
      <node id="22376">
        <label>/home/dev/ds-160209/src/secp256k1/src/ecdsa.h</label>
        <link refid="ecdsa_8h"/>
        <childnode refid="22375" relation="include">
        </childnode>
      </node>
      <node id="22362">
        <label>/home/dev/ds-160209/src/secp256k1/src/field.h</label>
        <link refid="field.h"/>
        <childnode refid="22363" relation="include">
        </childnode>
        <childnode refid="22368" relation="include">
        </childnode>
        <childnode refid="22375" relation="include">
        </childnode>
        <childnode refid="22378" relation="include">
        </childnode>
        <childnode refid="22385" relation="include">
        </childnode>
        <childnode refid="22386" relation="include">
        </childnode>
        <childnode refid="22379" relation="include">
        </childnode>
      </node>
      <node id="22372">
        <label>/home/dev/ds-160209/src/secp256k1/src/ecmult_const.h</label>
        <link refid="ecmult__const_8h"/>
        <childnode refid="22370" relation="include">
        </childnode>
      </node>
      <node id="22377">
        <label>/home/dev/ds-160209/src/secp256k1/src/eckey.h</label>
        <link refid="eckey_8h"/>
        <childnode refid="22378" relation="include">
        </childnode>
      </node>
      <node id="22364">
        <label>/home/dev/ds-160209/src/secp256k1/src/bench_internal.c</label>
        <link refid="bench__internal_8c"/>
      </node>
      <node id="22381">
        <label>/home/dev/ds-160209/src/secp256k1/src/ecmult_gen_impl.h</label>
        <link refid="ecmult__gen__impl_8h"/>
        <childnode refid="22365" relation="include">
        </childnode>
        <childnode refid="22367" relation="include">
        </childnode>
      </node>
      <node id="22375">
        <label>/home/dev/ds-160209/src/secp256k1/src/ecdsa_impl.h</label>
        <link refid="ecdsa__impl_8h"/>
        <childnode refid="22365" relation="include">
        </childnode>
      </node>
    </invincdepgraph>
      <sectiondef kind="func">
      <memberdef kind="function" id="field_8h_1a8e925e94d5a7330d2ae68f6642d0c7b9" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void secp256k1_fe_normalize</definition>
        <argsstring>(secp256k1_fe *r)</argsstring>
        <name>secp256k1_fe_normalize</name>
        <param>
          <type><ref refid="structsecp256k1__fe" kindref="compound">secp256k1_fe</ref> *</type>
          <declname>r</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Field element module.</para><para>Field elements can be represented in several ways, but code accessing it (and implementations) need to take certain properties into account:<itemizedlist>
<listitem><para>Each field element can be normalized or not.</para></listitem><listitem><para>Each field element has a magnitude, which represents how far away its representation is away from normalization. Normalized elements always have a magnitude of 1, but a magnitude of 1 doesn&apos;t imply normality.Normalize a field element. </para></listitem></itemizedlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/secp256k1/src/field.h" line="34" column="1"/>
      </memberdef>
      <memberdef kind="function" id="field_8h_1a0aaec7df2f708a451a8e1f41a943d8b1" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void secp256k1_fe_normalize_weak</definition>
        <argsstring>(secp256k1_fe *r)</argsstring>
        <name>secp256k1_fe_normalize_weak</name>
        <param>
          <type><ref refid="structsecp256k1__fe" kindref="compound">secp256k1_fe</ref> *</type>
          <declname>r</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Weakly normalize a field element: reduce it magnitude to 1, but don&apos;t fully normalize. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/secp256k1/src/field.h" line="37" column="1"/>
      </memberdef>
      <memberdef kind="function" id="field_8h_1a2d45c987537eadb2923c93aa3af9db71" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void secp256k1_fe_normalize_var</definition>
        <argsstring>(secp256k1_fe *r)</argsstring>
        <name>secp256k1_fe_normalize_var</name>
        <param>
          <type><ref refid="structsecp256k1__fe" kindref="compound">secp256k1_fe</ref> *</type>
          <declname>r</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Normalize a field element, without constant-time guarantee. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/secp256k1/src/field.h" line="40" column="1"/>
      </memberdef>
      <memberdef kind="function" id="field_8h_1ac91a9780fb4f20634c2d5040e9f44936" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>static int secp256k1_fe_normalizes_to_zero</definition>
        <argsstring>(secp256k1_fe *r)</argsstring>
        <name>secp256k1_fe_normalizes_to_zero</name>
        <param>
          <type><ref refid="structsecp256k1__fe" kindref="compound">secp256k1_fe</ref> *</type>
          <declname>r</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Verify whether a field element represents zero i.e. would normalize to a zero value. The field implementation may optionally normalize the input, but this should not be relied upon. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/secp256k1/src/field.h" line="44" column="1"/>
      </memberdef>
      <memberdef kind="function" id="field_8h_1a67adb176b8e6efd2d2475a9d0a199e18" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>static int secp256k1_fe_normalizes_to_zero_var</definition>
        <argsstring>(secp256k1_fe *r)</argsstring>
        <name>secp256k1_fe_normalizes_to_zero_var</name>
        <param>
          <type><ref refid="structsecp256k1__fe" kindref="compound">secp256k1_fe</ref> *</type>
          <declname>r</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Verify whether a field element represents zero i.e. would normalize to a zero value. The field implementation may optionally normalize the input, but this should not be relied upon. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/secp256k1/src/field.h" line="48" column="1"/>
      </memberdef>
      <memberdef kind="function" id="field_8h_1a4bfba9980b6d6960ad623f1ddbbc547e" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void secp256k1_fe_set_int</definition>
        <argsstring>(secp256k1_fe *r, int a)</argsstring>
        <name>secp256k1_fe_set_int</name>
        <param>
          <type><ref refid="structsecp256k1__fe" kindref="compound">secp256k1_fe</ref> *</type>
          <declname>r</declname>
        </param>
        <param>
          <type>int</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Set a field element equal to a small integer. Resulting field element is normalized. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/secp256k1/src/field.h" line="51" column="1"/>
      </memberdef>
      <memberdef kind="function" id="field_8h_1a619ec4805df6cc54d70e6682ceebd098" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>static int secp256k1_fe_is_zero</definition>
        <argsstring>(const secp256k1_fe *a)</argsstring>
        <name>secp256k1_fe_is_zero</name>
        <param>
          <type>const <ref refid="structsecp256k1__fe" kindref="compound">secp256k1_fe</ref> *</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Verify whether a field element is zero. Requires the input to be normalized. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/secp256k1/src/field.h" line="54" column="1"/>
      </memberdef>
      <memberdef kind="function" id="field_8h_1a4657d3eea1cc59c7a20cc2d19663bf02" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>static int secp256k1_fe_is_odd</definition>
        <argsstring>(const secp256k1_fe *a)</argsstring>
        <name>secp256k1_fe_is_odd</name>
        <param>
          <type>const <ref refid="structsecp256k1__fe" kindref="compound">secp256k1_fe</ref> *</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Check the &quot;oddness&quot; of a field element. Requires the input to be normalized. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/secp256k1/src/field.h" line="57" column="1"/>
      </memberdef>
      <memberdef kind="function" id="field_8h_1a16ab4d0dd8bcb5da1b888288063014f3" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>static int secp256k1_fe_equal_var</definition>
        <argsstring>(const secp256k1_fe *a, const secp256k1_fe *b)</argsstring>
        <name>secp256k1_fe_equal_var</name>
        <param>
          <type>const <ref refid="structsecp256k1__fe" kindref="compound">secp256k1_fe</ref> *</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="structsecp256k1__fe" kindref="compound">secp256k1_fe</ref> *</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Compare two field elements. Requires magnitude-1 inputs. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/secp256k1/src/field.h" line="60" column="1"/>
      </memberdef>
      <memberdef kind="function" id="field_8h_1af372f2088796ef5338bb43dbb6dd5277" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>static int secp256k1_fe_cmp_var</definition>
        <argsstring>(const secp256k1_fe *a, const secp256k1_fe *b)</argsstring>
        <name>secp256k1_fe_cmp_var</name>
        <param>
          <type>const <ref refid="structsecp256k1__fe" kindref="compound">secp256k1_fe</ref> *</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="structsecp256k1__fe" kindref="compound">secp256k1_fe</ref> *</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Compare two field elements. Requires both inputs to be normalized </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/secp256k1/src/field.h" line="63" column="1"/>
      </memberdef>
      <memberdef kind="function" id="field_8h_1a5c86a65052e3b135919c00fe2233a43d" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>static int secp256k1_fe_set_b32</definition>
        <argsstring>(secp256k1_fe *r, const unsigned char *a)</argsstring>
        <name>secp256k1_fe_set_b32</name>
        <param>
          <type><ref refid="structsecp256k1__fe" kindref="compound">secp256k1_fe</ref> *</type>
          <declname>r</declname>
        </param>
        <param>
          <type>const unsigned char *</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Set a field element equal to 32-byte big endian value. If successful, the resulting field element is normalized. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/secp256k1/src/field.h" line="66" column="1"/>
      </memberdef>
      <memberdef kind="function" id="field_8h_1abb1017649be14b9ac1823be3c573e542" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void secp256k1_fe_get_b32</definition>
        <argsstring>(unsigned char *r, const secp256k1_fe *a)</argsstring>
        <name>secp256k1_fe_get_b32</name>
        <param>
          <type>unsigned char *</type>
          <declname>r</declname>
        </param>
        <param>
          <type>const <ref refid="structsecp256k1__fe" kindref="compound">secp256k1_fe</ref> *</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Convert a field element to a 32-byte big endian value. Requires the input to be normalized </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/secp256k1/src/field.h" line="69" column="1"/>
      </memberdef>
      <memberdef kind="function" id="field_8h_1a4543ff08a66fc870acd56c921f2b30f7" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void secp256k1_fe_negate</definition>
        <argsstring>(secp256k1_fe *r, const secp256k1_fe *a, int m)</argsstring>
        <name>secp256k1_fe_negate</name>
        <param>
          <type><ref refid="structsecp256k1__fe" kindref="compound">secp256k1_fe</ref> *</type>
          <declname>r</declname>
        </param>
        <param>
          <type>const <ref refid="structsecp256k1__fe" kindref="compound">secp256k1_fe</ref> *</type>
          <declname>a</declname>
        </param>
        <param>
          <type>int</type>
          <declname>m</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Set a field element equal to the additive inverse of another. Takes a maximum magnitude of the input as an argument. The magnitude of the output is one higher. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/secp256k1/src/field.h" line="73" column="1"/>
      </memberdef>
      <memberdef kind="function" id="field_8h_1a3f7b55267ed0d5135530283da6314416" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void secp256k1_fe_mul_int</definition>
        <argsstring>(secp256k1_fe *r, int a)</argsstring>
        <name>secp256k1_fe_mul_int</name>
        <param>
          <type><ref refid="structsecp256k1__fe" kindref="compound">secp256k1_fe</ref> *</type>
          <declname>r</declname>
        </param>
        <param>
          <type>int</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Multiplies the passed field element with a small integer constant. Multiplies the magnitude by that small integer. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/secp256k1/src/field.h" line="77" column="1"/>
      </memberdef>
      <memberdef kind="function" id="field_8h_1a7512f80b60598e4af89c004890880fc7" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void secp256k1_fe_add</definition>
        <argsstring>(secp256k1_fe *r, const secp256k1_fe *a)</argsstring>
        <name>secp256k1_fe_add</name>
        <param>
          <type><ref refid="structsecp256k1__fe" kindref="compound">secp256k1_fe</ref> *</type>
          <declname>r</declname>
        </param>
        <param>
          <type>const <ref refid="structsecp256k1__fe" kindref="compound">secp256k1_fe</ref> *</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Adds a field element to another. The result has the sum of the inputs&apos; magnitudes as magnitude. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/secp256k1/src/field.h" line="80" column="1"/>
      </memberdef>
      <memberdef kind="function" id="field_8h_1a542b97d2574d9687c563d002587cf9a2" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void secp256k1_fe_mul</definition>
        <argsstring>(secp256k1_fe *r, const secp256k1_fe *a, const secp256k1_fe *SECP256K1_RESTRICT b)</argsstring>
        <name>secp256k1_fe_mul</name>
        <param>
          <type><ref refid="structsecp256k1__fe" kindref="compound">secp256k1_fe</ref> *</type>
          <declname>r</declname>
        </param>
        <param>
          <type>const <ref refid="structsecp256k1__fe" kindref="compound">secp256k1_fe</ref> *</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="structsecp256k1__fe" kindref="compound">secp256k1_fe</ref> *<ref refid="secp256k1_2src_2util_8h_1ad3e284f8cb00286e85a753265f6b17b8" kindref="member">SECP256K1_RESTRICT</ref></type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Sets a field element to be the product of two others. Requires the inputs&apos; magnitudes to be at most 8. The output magnitude is 1 (but not guaranteed to be normalized). </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/secp256k1/src/field.h" line="84" column="1"/>
      </memberdef>
      <memberdef kind="function" id="field_8h_1a6cbe550ca5eb35e683b1c8d68d8de26b" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void secp256k1_fe_sqr</definition>
        <argsstring>(secp256k1_fe *r, const secp256k1_fe *a)</argsstring>
        <name>secp256k1_fe_sqr</name>
        <param>
          <type><ref refid="structsecp256k1__fe" kindref="compound">secp256k1_fe</ref> *</type>
          <declname>r</declname>
        </param>
        <param>
          <type>const <ref refid="structsecp256k1__fe" kindref="compound">secp256k1_fe</ref> *</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Sets a field element to be the square of another. Requires the input&apos;s magnitude to be at most 8. The output magnitude is 1 (but not guaranteed to be normalized). </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/secp256k1/src/field.h" line="88" column="1"/>
      </memberdef>
      <memberdef kind="function" id="field_8h_1adeed9551ce946187f98c5e3d789e9575" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>static int secp256k1_fe_sqrt_var</definition>
        <argsstring>(secp256k1_fe *r, const secp256k1_fe *a)</argsstring>
        <name>secp256k1_fe_sqrt_var</name>
        <param>
          <type><ref refid="structsecp256k1__fe" kindref="compound">secp256k1_fe</ref> *</type>
          <declname>r</declname>
        </param>
        <param>
          <type>const <ref refid="structsecp256k1__fe" kindref="compound">secp256k1_fe</ref> *</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>If a has a square root, it is computed in r and 1 is returned. If a does not have a square root, the root of its negation is computed and 0 is returned. The input&apos;s magnitude can be at most 8. The output magnitude is 1 (but not guaranteed to be normalized). The result in r will always be a square itself. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/secp256k1/src/field.h" line="95" column="1"/>
      </memberdef>
      <memberdef kind="function" id="field_8h_1a3a071aa04ce0d88003b059c0a8ee0c0e" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void secp256k1_fe_inv</definition>
        <argsstring>(secp256k1_fe *r, const secp256k1_fe *a)</argsstring>
        <name>secp256k1_fe_inv</name>
        <param>
          <type><ref refid="structsecp256k1__fe" kindref="compound">secp256k1_fe</ref> *</type>
          <declname>r</declname>
        </param>
        <param>
          <type>const <ref refid="structsecp256k1__fe" kindref="compound">secp256k1_fe</ref> *</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Sets a field element to be the (modular) inverse of another. Requires the input&apos;s magnitude to be at most 8. The output magnitude is 1 (but not guaranteed to be normalized). </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/secp256k1/src/field.h" line="99" column="1"/>
      </memberdef>
      <memberdef kind="function" id="field_8h_1a0090ecfb39b34a8965cc16ae1feca5aa" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void secp256k1_fe_inv_var</definition>
        <argsstring>(secp256k1_fe *r, const secp256k1_fe *a)</argsstring>
        <name>secp256k1_fe_inv_var</name>
        <param>
          <type><ref refid="structsecp256k1__fe" kindref="compound">secp256k1_fe</ref> *</type>
          <declname>r</declname>
        </param>
        <param>
          <type>const <ref refid="structsecp256k1__fe" kindref="compound">secp256k1_fe</ref> *</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Potentially faster version of secp256k1_fe_inv, without constant-time guarantee. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/secp256k1/src/field.h" line="102" column="1"/>
      </memberdef>
      <memberdef kind="function" id="field_8h_1a728a757d8960973603be6f3b2aa13f4e" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void secp256k1_fe_inv_all_var</definition>
        <argsstring>(size_t len, secp256k1_fe *r, const secp256k1_fe *a)</argsstring>
        <name>secp256k1_fe_inv_all_var</name>
        <param>
          <type>size_t</type>
          <declname>len</declname>
        </param>
        <param>
          <type><ref refid="structsecp256k1__fe" kindref="compound">secp256k1_fe</ref> *</type>
          <declname>r</declname>
        </param>
        <param>
          <type>const <ref refid="structsecp256k1__fe" kindref="compound">secp256k1_fe</ref> *</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Calculate the (modular) inverses of a batch of field elements. Requires the inputs&apos; magnitudes to be at most 8. The output magnitudes are 1 (but not guaranteed to be normalized). The inputs and outputs must not overlap in memory. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/secp256k1/src/field.h" line="107" column="1"/>
      </memberdef>
      <memberdef kind="function" id="field_8h_1ab2813c5c17c63e222d5a15a60f239b12" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void secp256k1_fe_to_storage</definition>
        <argsstring>(secp256k1_fe_storage *r, const secp256k1_fe *a)</argsstring>
        <name>secp256k1_fe_to_storage</name>
        <param>
          <type><ref refid="structsecp256k1__fe__storage" kindref="compound">secp256k1_fe_storage</ref> *</type>
          <declname>r</declname>
        </param>
        <param>
          <type>const <ref refid="structsecp256k1__fe" kindref="compound">secp256k1_fe</ref> *</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Convert a field element to the storage type. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/secp256k1/src/field.h" line="110" column="1"/>
      </memberdef>
      <memberdef kind="function" id="field_8h_1a644783b01d20445b5b2f3c9c2abfbae3" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void secp256k1_fe_from_storage</definition>
        <argsstring>(secp256k1_fe *r, const secp256k1_fe_storage *a)</argsstring>
        <name>secp256k1_fe_from_storage</name>
        <param>
          <type><ref refid="structsecp256k1__fe" kindref="compound">secp256k1_fe</ref> *</type>
          <declname>r</declname>
        </param>
        <param>
          <type>const <ref refid="structsecp256k1__fe__storage" kindref="compound">secp256k1_fe_storage</ref> *</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Convert a field element back from the storage type. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/secp256k1/src/field.h" line="113" column="1"/>
      </memberdef>
      <memberdef kind="function" id="field_8h_1ae9d61c6568f3a63bcea9146c056b18dc" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void secp256k1_fe_storage_cmov</definition>
        <argsstring>(secp256k1_fe_storage *r, const secp256k1_fe_storage *a, int flag)</argsstring>
        <name>secp256k1_fe_storage_cmov</name>
        <param>
          <type><ref refid="structsecp256k1__fe__storage" kindref="compound">secp256k1_fe_storage</ref> *</type>
          <declname>r</declname>
        </param>
        <param>
          <type>const <ref refid="structsecp256k1__fe__storage" kindref="compound">secp256k1_fe_storage</ref> *</type>
          <declname>a</declname>
        </param>
        <param>
          <type>int</type>
          <declname>flag</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>If flag is true, set *r equal to *a; otherwise leave it. Constant-time. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/secp256k1/src/field.h" line="116" column="1"/>
      </memberdef>
      <memberdef kind="function" id="field_8h_1a3e9ecf6eef0181f8f086611253f6776f" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void secp256k1_fe_cmov</definition>
        <argsstring>(secp256k1_fe *r, const secp256k1_fe *a, int flag)</argsstring>
        <name>secp256k1_fe_cmov</name>
        <param>
          <type><ref refid="structsecp256k1__fe" kindref="compound">secp256k1_fe</ref> *</type>
          <declname>r</declname>
        </param>
        <param>
          <type>const <ref refid="structsecp256k1__fe" kindref="compound">secp256k1_fe</ref> *</type>
          <declname>a</declname>
        </param>
        <param>
          <type>int</type>
          <declname>flag</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>If flag is true, set *r equal to *a; otherwise leave it. Constant-time. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/secp256k1/src/field.h" line="119" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/**********************************************************************</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/>*<sp/>Copyright<sp/>(c)<sp/>2013,<sp/>2014<sp/>Pieter<sp/>Wuille<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*<sp/>Distributed<sp/>under<sp/>the<sp/>MIT<sp/>software<sp/>license,<sp/>see<sp/>the<sp/>accompanying<sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*<sp/>file<sp/>COPYING<sp/>or<sp/>http://www.opensource.org/licenses/mit-license.php.*</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/>**********************************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>_SECP256K1_FIELD_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>_SECP256K1_FIELD_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="preprocessor">#if<sp/>defined<sp/>HAVE_CONFIG_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="libsecp256k1-config_8h" kindref="compound">libsecp256k1-config.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(USE_FIELD_10X26)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="field__10x26_8h" kindref="compound">field_10x26.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="preprocessor">#elif<sp/>defined(USE_FIELD_5X52)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="field__5x52_8h" kindref="compound">field_5x52.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight><highlight class="preprocessor">#error<sp/>&quot;Please<sp/>select<sp/>field<sp/>implementation&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>secp256k1_fe_normalize(<ref refid="structsecp256k1__fe" kindref="compound">secp256k1_fe</ref><sp/>*r);</highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>secp256k1_fe_normalize_weak(<ref refid="structsecp256k1__fe" kindref="compound">secp256k1_fe</ref><sp/>*r);</highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>secp256k1_fe_normalize_var(<ref refid="structsecp256k1__fe" kindref="compound">secp256k1_fe</ref><sp/>*r);</highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>secp256k1_fe_normalizes_to_zero(<ref refid="structsecp256k1__fe" kindref="compound">secp256k1_fe</ref><sp/>*r);</highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>secp256k1_fe_normalizes_to_zero_var(<ref refid="structsecp256k1__fe" kindref="compound">secp256k1_fe</ref><sp/>*r);</highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>secp256k1_fe_set_int(<ref refid="structsecp256k1__fe" kindref="compound">secp256k1_fe</ref><sp/>*r,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>a);</highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>secp256k1_fe_is_zero(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structsecp256k1__fe" kindref="compound">secp256k1_fe</ref><sp/>*a);</highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight></codeline>
<codeline lineno="57"><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>secp256k1_fe_is_odd(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structsecp256k1__fe" kindref="compound">secp256k1_fe</ref><sp/>*a);</highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>secp256k1_fe_equal_var(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structsecp256k1__fe" kindref="compound">secp256k1_fe</ref><sp/>*a,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structsecp256k1__fe" kindref="compound">secp256k1_fe</ref><sp/>*b);</highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight></codeline>
<codeline lineno="63"><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>secp256k1_fe_cmp_var(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structsecp256k1__fe" kindref="compound">secp256k1_fe</ref><sp/>*a,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structsecp256k1__fe" kindref="compound">secp256k1_fe</ref><sp/>*b);</highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight></codeline>
<codeline lineno="66"><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>secp256k1_fe_set_b32(<ref refid="structsecp256k1__fe" kindref="compound">secp256k1_fe</ref><sp/>*r,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*a);</highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight></codeline>
<codeline lineno="69"><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>secp256k1_fe_get_b32(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*r,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structsecp256k1__fe" kindref="compound">secp256k1_fe</ref><sp/>*a);</highlight></codeline>
<codeline lineno="70"><highlight class="normal"></highlight></codeline>
<codeline lineno="73"><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>secp256k1_fe_negate(<ref refid="structsecp256k1__fe" kindref="compound">secp256k1_fe</ref><sp/>*r,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structsecp256k1__fe" kindref="compound">secp256k1_fe</ref><sp/>*a,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>m);</highlight></codeline>
<codeline lineno="74"><highlight class="normal"></highlight></codeline>
<codeline lineno="77"><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>secp256k1_fe_mul_int(<ref refid="structsecp256k1__fe" kindref="compound">secp256k1_fe</ref><sp/>*r,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>a);</highlight></codeline>
<codeline lineno="78"><highlight class="normal"></highlight></codeline>
<codeline lineno="80"><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>secp256k1_fe_add(<ref refid="structsecp256k1__fe" kindref="compound">secp256k1_fe</ref><sp/>*r,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structsecp256k1__fe" kindref="compound">secp256k1_fe</ref><sp/>*a);</highlight></codeline>
<codeline lineno="81"><highlight class="normal"></highlight></codeline>
<codeline lineno="84"><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>secp256k1_fe_mul(<ref refid="structsecp256k1__fe" kindref="compound">secp256k1_fe</ref><sp/>*r,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structsecp256k1__fe" kindref="compound">secp256k1_fe</ref><sp/>*a,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structsecp256k1__fe" kindref="compound">secp256k1_fe</ref><sp/>*<sp/><ref refid="secp256k1_2src_2util_8h_1ad3e284f8cb00286e85a753265f6b17b8" kindref="member">SECP256K1_RESTRICT</ref><sp/>b);</highlight></codeline>
<codeline lineno="85"><highlight class="normal"></highlight></codeline>
<codeline lineno="88"><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>secp256k1_fe_sqr(<ref refid="structsecp256k1__fe" kindref="compound">secp256k1_fe</ref><sp/>*r,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structsecp256k1__fe" kindref="compound">secp256k1_fe</ref><sp/>*a);</highlight></codeline>
<codeline lineno="89"><highlight class="normal"></highlight></codeline>
<codeline lineno="95"><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>secp256k1_fe_sqrt_var(<ref refid="structsecp256k1__fe" kindref="compound">secp256k1_fe</ref><sp/>*r,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structsecp256k1__fe" kindref="compound">secp256k1_fe</ref><sp/>*a);</highlight></codeline>
<codeline lineno="96"><highlight class="normal"></highlight></codeline>
<codeline lineno="99"><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>secp256k1_fe_inv(<ref refid="structsecp256k1__fe" kindref="compound">secp256k1_fe</ref><sp/>*r,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structsecp256k1__fe" kindref="compound">secp256k1_fe</ref><sp/>*a);</highlight></codeline>
<codeline lineno="100"><highlight class="normal"></highlight></codeline>
<codeline lineno="102"><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>secp256k1_fe_inv_var(<ref refid="structsecp256k1__fe" kindref="compound">secp256k1_fe</ref><sp/>*r,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structsecp256k1__fe" kindref="compound">secp256k1_fe</ref><sp/>*a);</highlight></codeline>
<codeline lineno="103"><highlight class="normal"></highlight></codeline>
<codeline lineno="107"><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>secp256k1_fe_inv_all_var(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>len,<sp/><ref refid="structsecp256k1__fe" kindref="compound">secp256k1_fe</ref><sp/>*r,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structsecp256k1__fe" kindref="compound">secp256k1_fe</ref><sp/>*a);</highlight></codeline>
<codeline lineno="108"><highlight class="normal"></highlight></codeline>
<codeline lineno="110"><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>secp256k1_fe_to_storage(<ref refid="structsecp256k1__fe__storage" kindref="compound">secp256k1_fe_storage</ref><sp/>*r,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structsecp256k1__fe" kindref="compound">secp256k1_fe</ref><sp/>*a);</highlight></codeline>
<codeline lineno="111"><highlight class="normal"></highlight></codeline>
<codeline lineno="113"><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>secp256k1_fe_from_storage(<ref refid="structsecp256k1__fe" kindref="compound">secp256k1_fe</ref><sp/>*r,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structsecp256k1__fe__storage" kindref="compound">secp256k1_fe_storage</ref><sp/>*a);</highlight></codeline>
<codeline lineno="114"><highlight class="normal"></highlight></codeline>
<codeline lineno="116"><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>secp256k1_fe_storage_cmov(<ref refid="structsecp256k1__fe__storage" kindref="compound">secp256k1_fe_storage</ref><sp/>*r,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structsecp256k1__fe__storage" kindref="compound">secp256k1_fe_storage</ref><sp/>*a,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>flag);</highlight></codeline>
<codeline lineno="117"><highlight class="normal"></highlight></codeline>
<codeline lineno="119"><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>secp256k1_fe_cmov(<ref refid="structsecp256k1__fe" kindref="compound">secp256k1_fe</ref><sp/>*r,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structsecp256k1__fe" kindref="compound">secp256k1_fe</ref><sp/>*a,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>flag);</highlight></codeline>
<codeline lineno="120"><highlight class="normal"></highlight></codeline>
<codeline lineno="121"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
    </programlisting>
    <location file="/home/dev/ds-160209/src/secp256k1/src/field.h"/>
  </compounddef>
</doxygen>
