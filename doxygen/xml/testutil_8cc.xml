<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.9.1">
  <compounddef id="testutil_8cc" kind="file" language="C++">
    <compoundname>testutil.cc</compoundname>
    <includes refid="testutil_8h" local="yes">util/testutil.h</includes>
    <includes refid="random_8h" local="yes">util/random.h</includes>
    <incdepgraph>
      <node id="40071">
        <label>stdarg.h</label>
      </node>
      <node id="40078">
        <label>util/random.h</label>
        <link refid="random_8h"/>
        <childnode refid="40072" relation="include">
        </childnode>
      </node>
      <node id="40075">
        <label>assert.h</label>
      </node>
      <node id="40066">
        <label>/home/dev/ds-160209/src/leveldb/util/testutil.cc</label>
        <link refid="testutil.cc"/>
        <childnode refid="40067" relation="include">
        </childnode>
        <childnode refid="40078" relation="include">
        </childnode>
      </node>
      <node id="40069">
        <label>string</label>
      </node>
      <node id="40067">
        <label>util/testutil.h</label>
        <link refid="testutil_8h"/>
        <childnode refid="40068" relation="include">
        </childnode>
        <childnode refid="40074" relation="include">
        </childnode>
        <childnode refid="40078" relation="include">
        </childnode>
      </node>
      <node id="40076">
        <label>stddef.h</label>
      </node>
      <node id="40073">
        <label>leveldb/status.h</label>
        <link refid="status_8h"/>
        <childnode refid="40069" relation="include">
        </childnode>
        <childnode refid="40074" relation="include">
        </childnode>
      </node>
      <node id="40077">
        <label>string.h</label>
      </node>
      <node id="40070">
        <label>vector</label>
      </node>
      <node id="40072">
        <label>stdint.h</label>
        <link refid="stdint_8h"/>
      </node>
      <node id="40074">
        <label>leveldb/slice.h</label>
        <link refid="slice_8h"/>
        <childnode refid="40075" relation="include">
        </childnode>
        <childnode refid="40076" relation="include">
        </childnode>
        <childnode refid="40077" relation="include">
        </childnode>
        <childnode refid="40069" relation="include">
        </childnode>
      </node>
      <node id="40068">
        <label>leveldb/env.h</label>
        <link refid="env_8h"/>
        <childnode refid="40069" relation="include">
        </childnode>
        <childnode refid="40070" relation="include">
        </childnode>
        <childnode refid="40071" relation="include">
        </childnode>
        <childnode refid="40072" relation="include">
        </childnode>
        <childnode refid="40073" relation="include">
        </childnode>
      </node>
    </incdepgraph>
    <innernamespace refid="namespaceleveldb">leveldb</innernamespace>
    <innernamespace refid="namespaceleveldb_1_1test">leveldb::test</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">//<sp/>Copyright<sp/>(c)<sp/>2011-2016<sp/>The<sp/>LevelDB<sp/>Authors.<sp/>All<sp/>rights<sp/>reserved.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Use<sp/>of<sp/>this<sp/>source<sp/>code<sp/>is<sp/>governed<sp/>by<sp/>a<sp/>BSD-style<sp/>license<sp/>that<sp/>can<sp/>be</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="comment">//<sp/>found<sp/>in<sp/>the<sp/>LICENSE<sp/>file.<sp/>See<sp/>the<sp/>AUTHORS<sp/>file<sp/>for<sp/>names<sp/>of<sp/>contributors.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="testutil_8h" kindref="compound">util/testutil.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="random_8h" kindref="compound">util/random.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespaceleveldb" kindref="compound">leveldb</ref><sp/>{</highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="db__test_8cc_1a9cc668c18debdbcad21b45fdd8158648" kindref="member">test</ref><sp/>{</highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight></codeline>
<codeline lineno="12" refid="namespaceleveldb_1_1test_1a2132c5f28cd21dcea4348246fa32b673" refkind="member"><highlight class="normal"><ref refid="classleveldb_1_1_slice" kindref="compound">Slice</ref><sp/><ref refid="namespaceleveldb_1_1test_1a2132c5f28cd21dcea4348246fa32b673" kindref="member">RandomString</ref>(<ref refid="classleveldb_1_1_random" kindref="compound">Random</ref>*<sp/>rnd,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>len,<sp/>std::string*<sp/>dst)<sp/>{</highlight></codeline>
<codeline lineno="13"><highlight class="normal"><sp/><sp/>dst-&gt;resize(len);</highlight></codeline>
<codeline lineno="14"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>len;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="15"><highlight class="normal"><sp/><sp/><sp/><sp/>(*dst)[i]<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">char</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(</highlight><highlight class="charliteral">&apos;<sp/>&apos;</highlight><highlight class="normal"><sp/>+<sp/>rnd-&gt;<ref refid="classleveldb_1_1_random_1a9281323c3f115fa47a0f329f72ad2a80" kindref="member">Uniform</ref>(95));<sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>&apos;<sp/>&apos;<sp/>..<sp/>&apos;~&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="17"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classleveldb_1_1_slice" kindref="compound">Slice</ref>(*dst);</highlight></codeline>
<codeline lineno="18"><highlight class="normal">}</highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight></codeline>
<codeline lineno="20" refid="namespaceleveldb_1_1test_1ae6faec2042472bb9c3da124a677c4b96" refkind="member"><highlight class="normal">std::string<sp/><ref refid="namespaceleveldb_1_1test_1ae6faec2042472bb9c3da124a677c4b96" kindref="member">RandomKey</ref>(<ref refid="classleveldb_1_1_random" kindref="compound">Random</ref>*<sp/>rnd,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>len)<sp/>{</highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Make<sp/>sure<sp/>to<sp/>generate<sp/>a<sp/>wide<sp/>variety<sp/>of<sp/>characters<sp/>so<sp/>we</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>test<sp/>the<sp/>boundary<sp/>conditions<sp/>for<sp/>short-key<sp/>optimizations.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>kTestChars[]<sp/>=<sp/>{</highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="charliteral">&apos;\1&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="charliteral">&apos;a&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="charliteral">&apos;b&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="charliteral">&apos;c&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="charliteral">&apos;d&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="charliteral">&apos;e&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&apos;\xfd&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&apos;\xfe&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&apos;\xff&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/>std::string<sp/>result;</highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>len;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/><sp/><sp/>result<sp/>+=<sp/>kTestChars[rnd-&gt;<ref refid="classleveldb_1_1_random_1a9281323c3f115fa47a0f329f72ad2a80" kindref="member">Uniform</ref>(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(kTestChars))];</highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="31"><highlight class="normal">}</highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight></codeline>
<codeline lineno="34" refid="namespaceleveldb_1_1test_1a7e336c887550b617dfd8bc0f61726779" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/><ref refid="classleveldb_1_1_slice" kindref="compound">Slice</ref><sp/><ref refid="namespaceleveldb_1_1test_1a7e336c887550b617dfd8bc0f61726779" kindref="member">CompressibleString</ref>(<ref refid="classleveldb_1_1_random" kindref="compound">Random</ref>*<sp/>rnd,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>compressed_fraction,</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>len,<sp/>std::string*<sp/>dst)<sp/>{</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>raw<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(len<sp/>*<sp/>compressed_fraction);</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(raw<sp/>&lt;<sp/>1)<sp/>raw<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/>std::string<sp/>raw_data;</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><ref refid="namespaceleveldb_1_1test_1a2132c5f28cd21dcea4348246fa32b673" kindref="member">RandomString</ref>(rnd,<sp/>raw,<sp/>&amp;raw_data);</highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Duplicate<sp/>the<sp/>random<sp/>data<sp/>until<sp/>we<sp/>have<sp/>filled<sp/>&quot;len&quot;<sp/>bytes</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/>dst-&gt;clear();</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(dst-&gt;size()<sp/>&lt;<sp/>len)<sp/>{</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/>dst-&gt;append(raw_data);</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/>dst-&gt;resize(len);</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classleveldb_1_1_slice" kindref="compound">Slice</ref>(*dst);</highlight></codeline>
<codeline lineno="48"><highlight class="normal">}</highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal">}<sp/><sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>test</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal">}<sp/><sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>leveldb</highlight><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="/home/dev/ds-160209/src/leveldb/util/testutil.cc"/>
  </compounddef>
</doxygen>
