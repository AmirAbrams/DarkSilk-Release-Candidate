<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.9.1">
  <compounddef id="port__win_8cc" kind="file" language="C++">
    <compoundname>port_win.cc</compoundname>
    <includes refid="port__win_8h" local="yes">port/port_win.h</includes>
    <includes local="no">windows.h</includes>
    <includes local="no">cassert</includes>
    <incdepgraph>
      <node id="38599">
        <label>windows.h</label>
      </node>
      <node id="38596">
        <label>port/port_win.h</label>
        <link refid="port__win_8h"/>
        <childnode refid="38597" relation="include">
        </childnode>
        <childnode refid="38598" relation="include">
        </childnode>
      </node>
      <node id="38600">
        <label>cassert</label>
      </node>
      <node id="38597">
        <label>string</label>
      </node>
      <node id="38595">
        <label>/home/dev/ds-160209/src/leveldb/port/port_win.cc</label>
        <link refid="port_win.cc"/>
        <childnode refid="38596" relation="include">
        </childnode>
        <childnode refid="38599" relation="include">
        </childnode>
        <childnode refid="38600" relation="include">
        </childnode>
      </node>
      <node id="38598">
        <label>stdint.h</label>
        <link refid="stdint_8h"/>
      </node>
    </incdepgraph>
    <innernamespace refid="namespaceleveldb">leveldb</innernamespace>
    <innernamespace refid="namespaceleveldb_1_1port">leveldb::port</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">//<sp/>LevelDB<sp/>Copyright<sp/>(c)<sp/>2011-2016<sp/>The<sp/>LevelDB<sp/>Authors.<sp/>All<sp/>rights<sp/>reserved.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Use<sp/>of<sp/>this<sp/>source<sp/>code<sp/>is<sp/>governed<sp/>by<sp/>a<sp/>BSD-style<sp/>license<sp/>that<sp/>can<sp/>be</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="comment">//<sp/>found<sp/>in<sp/>the<sp/>LICENSE<sp/>file.<sp/>See<sp/>the<sp/>AUTHORS<sp/>file<sp/>for<sp/>names<sp/>of<sp/>contributors.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="comment">//<sp/>See<sp/>port_example.h<sp/>for<sp/>documentation<sp/>for<sp/>the<sp/>following<sp/>types/functions.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Redistribution<sp/>and<sp/>use<sp/>in<sp/>source<sp/>and<sp/>binary<sp/>forms,<sp/>with<sp/>or<sp/>without</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="comment">//<sp/>modification,<sp/>are<sp/>permitted<sp/>provided<sp/>that<sp/>the<sp/>following<sp/>conditions<sp/>are<sp/>met:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="comment">//<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>*<sp/>Redistributions<sp/>of<sp/>source<sp/>code<sp/>must<sp/>retain<sp/>the<sp/>above<sp/>copyright</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>notice,<sp/>this<sp/>list<sp/>of<sp/>conditions<sp/>and<sp/>the<sp/>following<sp/>disclaimer.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>*<sp/>Redistributions<sp/>in<sp/>binary<sp/>form<sp/>must<sp/>reproduce<sp/>the<sp/>above<sp/>copyright</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>notice,<sp/>this<sp/>list<sp/>of<sp/>conditions<sp/>and<sp/>the<sp/>following<sp/>disclaimer<sp/>in<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>documentation<sp/>and/or<sp/>other<sp/>materials<sp/>provided<sp/>with<sp/>the<sp/>distribution.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>*<sp/>Neither<sp/>the<sp/>name<sp/>of<sp/>the<sp/>University<sp/>of<sp/>California,<sp/>Berkeley<sp/>nor<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>names<sp/>of<sp/>its<sp/>contributors<sp/>may<sp/>be<sp/>used<sp/>to<sp/>endorse<sp/>or<sp/>promote<sp/>products</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>derived<sp/>from<sp/>this<sp/>software<sp/>without<sp/>specific<sp/>prior<sp/>written<sp/>permission.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="comment">//<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="comment">//<sp/>THIS<sp/>SOFTWARE<sp/>IS<sp/>PROVIDED<sp/>BY<sp/>THE<sp/>REGENTS<sp/>AND<sp/>CONTRIBUTORS<sp/>``AS<sp/>IS&apos;&apos;<sp/>AND<sp/>ANY</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="comment">//<sp/>EXPRESS<sp/>OR<sp/>IMPLIED<sp/>WARRANTIES,<sp/>INCLUDING,<sp/>BUT<sp/>NOT<sp/>LIMITED<sp/>TO,<sp/>THE<sp/>IMPLIED</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="comment">//<sp/>WARRANTIES<sp/>OF<sp/>MERCHANTABILITY<sp/>AND<sp/>FITNESS<sp/>FOR<sp/>A<sp/>PARTICULAR<sp/>PURPOSE<sp/>ARE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="comment">//<sp/>DISCLAIMED.<sp/>IN<sp/>NO<sp/>EVENT<sp/>SHALL<sp/>THE<sp/>REGENTS<sp/>AND<sp/>CONTRIBUTORS<sp/>BE<sp/>LIABLE<sp/>FOR<sp/>ANY</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="comment">//<sp/>DIRECT,<sp/>INDIRECT,<sp/>INCIDENTAL,<sp/>SPECIAL,<sp/>EXEMPLARY,<sp/>OR<sp/>CONSEQUENTIAL<sp/>DAMAGES</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="comment">//<sp/>(INCLUDING,<sp/>BUT<sp/>NOT<sp/>LIMITED<sp/>TO,<sp/>PROCUREMENT<sp/>OF<sp/>SUBSTITUTE<sp/>GOODS<sp/>OR<sp/>SERVICES;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="comment">//<sp/>LOSS<sp/>OF<sp/>USE,<sp/>DATA,<sp/>OR<sp/>PROFITS;<sp/>OR<sp/>BUSINESS<sp/>INTERRUPTION)<sp/>HOWEVER<sp/>CAUSED<sp/>AND</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="comment">//<sp/>ON<sp/>ANY<sp/>THEORY<sp/>OF<sp/>LIABILITY,<sp/>WHETHER<sp/>IN<sp/>CONTRACT,<sp/>STRICT<sp/>LIABILITY,<sp/>OR<sp/>TORT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="comment">//<sp/>(INCLUDING<sp/>NEGLIGENCE<sp/>OR<sp/>OTHERWISE)<sp/>ARISING<sp/>IN<sp/>ANY<sp/>WAY<sp/>OUT<sp/>OF<sp/>THE<sp/>USE<sp/>OF<sp/>THIS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="comment">//<sp/>SOFTWARE,<sp/>EVEN<sp/>IF<sp/>ADVISED<sp/>OF<sp/>THE<sp/>POSSIBILITY<sp/>OF<sp/>SUCH<sp/>DAMAGE.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="port__win_8h" kindref="compound">port/port_win.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;windows.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;cassert&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespaceleveldb" kindref="compound">leveldb</ref><sp/>{</highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">port<sp/>{</highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"><ref refid="classleveldb_1_1port_1_1_mutex_1ab8f26966b881db1fd96839df85e5c583" kindref="member">Mutex::Mutex</ref>()<sp/>:</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/>cs_(NULL)<sp/>{</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/>assert(!cs_);</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/>cs_<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>CRITICAL_SECTION());</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/>::InitializeCriticalSection(static_cast&lt;CRITICAL_SECTION<sp/>*&gt;(cs_));</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/>assert(cs_);</highlight></codeline>
<codeline lineno="45"><highlight class="normal">}</highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal">Mutex::~Mutex()<sp/>{</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/>assert(cs_);</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/>::DeleteCriticalSection(static_cast&lt;CRITICAL_SECTION<sp/>*&gt;(cs_));</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">CRITICAL_SECTION<sp/>*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(cs_);</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/>cs_<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/>assert(!cs_);</highlight></codeline>
<codeline lineno="53"><highlight class="normal">}</highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Mutex::Lock()<sp/>{</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/>assert(cs_);</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/>::EnterCriticalSection(static_cast&lt;CRITICAL_SECTION<sp/>*&gt;(cs_));</highlight></codeline>
<codeline lineno="58"><highlight class="normal">}</highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Mutex::Unlock()<sp/>{</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/>assert(cs_);</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/>::LeaveCriticalSection(static_cast&lt;CRITICAL_SECTION<sp/>*&gt;(cs_));</highlight></codeline>
<codeline lineno="63"><highlight class="normal">}</highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight></codeline>
<codeline lineno="65" refid="classleveldb_1_1port_1_1_mutex_1a9793393529f59bbb4adaf152bbbab42c" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Mutex::AssertHeld()<sp/>{</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/>assert(cs_);</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/>assert(1);</highlight></codeline>
<codeline lineno="68"><highlight class="normal">}</highlight></codeline>
<codeline lineno="69"><highlight class="normal"></highlight></codeline>
<codeline lineno="70"><highlight class="normal">CondVar::CondVar(<ref refid="classleveldb_1_1port_1_1_mutex" kindref="compound">Mutex</ref>*<sp/><ref refid="db__bench_8cc_1a1a5c2f3b52d2dec1d9896cec4b02d17e" kindref="member">mu</ref>)<sp/>:</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/>waiting_(0),<sp/></highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="db__test_8cc_1a7409a2fd2bde9ec649030b2513a568b8" kindref="member">mu_</ref>(mu),<sp/></highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/>sem1_(::CreateSemaphore(NULL,<sp/>0,<sp/>10000,<sp/>NULL)),<sp/></highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/>sem2_(::CreateSemaphore(NULL,<sp/>0,<sp/>10000,<sp/>NULL))<sp/>{</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/>assert(mu_);</highlight></codeline>
<codeline lineno="76"><highlight class="normal">}</highlight></codeline>
<codeline lineno="77"><highlight class="normal"></highlight></codeline>
<codeline lineno="78"><highlight class="normal"><ref refid="classleveldb_1_1port_1_1_cond_var_1abf5e80198afeeccf1ee1b9af848d0cf6" kindref="member">CondVar::~CondVar</ref>()<sp/>{</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/>::CloseHandle(sem1_);</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/>::CloseHandle(sem2_);</highlight></codeline>
<codeline lineno="81"><highlight class="normal">}</highlight></codeline>
<codeline lineno="82"><highlight class="normal"></highlight></codeline>
<codeline lineno="83"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classleveldb_1_1port_1_1_cond_var_1a9e9855595a3f3a3ccf47949696065597" kindref="member">CondVar::Wait</ref>()<sp/>{</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/>mu_-&gt;<ref refid="classleveldb_1_1port_1_1_mutex_1a9793393529f59bbb4adaf152bbbab42c" kindref="member">AssertHeld</ref>();</highlight></codeline>
<codeline lineno="85"><highlight class="normal"></highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/>wait_mtx_.<ref refid="classleveldb_1_1port_1_1_mutex_1a9a4da7195ce1802c077bc4d0035d4dd1" kindref="member">Lock</ref>();</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/>++waiting_;</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/>wait_mtx_.<ref refid="classleveldb_1_1port_1_1_mutex_1a9d69a21c53dad7732b2006acf87f006b" kindref="member">Unlock</ref>();</highlight></codeline>
<codeline lineno="89"><highlight class="normal"></highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/>mu_-&gt;<ref refid="classleveldb_1_1port_1_1_mutex_1a9d69a21c53dad7732b2006acf87f006b" kindref="member">Unlock</ref>();</highlight></codeline>
<codeline lineno="91"><highlight class="normal"></highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>initiate<sp/>handshake</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/>::WaitForSingleObject(sem1_,<sp/>INFINITE);</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/>::ReleaseSemaphore(sem2_,<sp/>1,<sp/>NULL);</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/>mu_-&gt;<ref refid="classleveldb_1_1port_1_1_mutex_1a9a4da7195ce1802c077bc4d0035d4dd1" kindref="member">Lock</ref>();</highlight></codeline>
<codeline lineno="96"><highlight class="normal">}</highlight></codeline>
<codeline lineno="97"><highlight class="normal"></highlight></codeline>
<codeline lineno="98"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classleveldb_1_1port_1_1_cond_var_1ac36a2038b058b24886741c99e4a7d7d4" kindref="member">CondVar::Signal</ref>()<sp/>{</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/>wait_mtx_.<ref refid="classleveldb_1_1port_1_1_mutex_1a9a4da7195ce1802c077bc4d0035d4dd1" kindref="member">Lock</ref>();</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(waiting_<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/>--waiting_;</highlight></codeline>
<codeline lineno="102"><highlight class="normal"></highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>finalize<sp/>handshake</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/>::ReleaseSemaphore(sem1_,<sp/>1,<sp/>NULL);</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/>::WaitForSingleObject(sem2_,<sp/>INFINITE);</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/>wait_mtx_.<ref refid="classleveldb_1_1port_1_1_mutex_1a9d69a21c53dad7732b2006acf87f006b" kindref="member">Unlock</ref>();</highlight></codeline>
<codeline lineno="108"><highlight class="normal">}</highlight></codeline>
<codeline lineno="109"><highlight class="normal"></highlight></codeline>
<codeline lineno="110"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classleveldb_1_1port_1_1_cond_var_1ad7725662f3c1bc542100c41081d1428a" kindref="member">CondVar::SignalAll</ref>()<sp/>{</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/>wait_mtx_.<ref refid="classleveldb_1_1port_1_1_mutex_1a9a4da7195ce1802c077bc4d0035d4dd1" kindref="member">Lock</ref>();</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/>::ReleaseSemaphore(sem1_,<sp/>waiting_,<sp/>NULL);</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(waiting_<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/>--waiting_;</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/>::WaitForSingleObject(sem2_,<sp/>INFINITE);</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/>wait_mtx_.<ref refid="classleveldb_1_1port_1_1_mutex_1a9d69a21c53dad7732b2006acf87f006b" kindref="member">Unlock</ref>();</highlight></codeline>
<codeline lineno="118"><highlight class="normal">}</highlight></codeline>
<codeline lineno="119"><highlight class="normal"></highlight></codeline>
<codeline lineno="120"><highlight class="normal"><ref refid="classleveldb_1_1port_1_1_atomic_pointer_1a046bde8475164356d81353741b18a408" kindref="member">AtomicPointer::AtomicPointer</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>v)<sp/>{</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><ref refid="classleveldb_1_1port_1_1_atomic_pointer_1a8dfe51c125f71c09a363dae042be63a7" kindref="member">Release_Store</ref>(v);</highlight></codeline>
<codeline lineno="122"><highlight class="normal">}</highlight></codeline>
<codeline lineno="123"><highlight class="normal"></highlight></codeline>
<codeline lineno="124"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespaceleveldb_1_1port_1a1493e91d494e6f0ea086a743a562e983" kindref="member">InitOnce</ref>(<ref refid="namespaceleveldb_1_1port_1a80651a8fb458d9b7b3c1f492f9abd055" kindref="member">OnceType</ref>*<sp/>once,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>(*initializer)())<sp/>{</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/>once-&gt;InitOnce(initializer);</highlight></codeline>
<codeline lineno="126"><highlight class="normal">}</highlight></codeline>
<codeline lineno="127"><highlight class="normal"></highlight></codeline>
<codeline lineno="128" refid="classleveldb_1_1port_1_1_atomic_pointer_1a92aa118983e28711a150b3907af59a54" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/><ref refid="classleveldb_1_1port_1_1_atomic_pointer_1a92aa118983e28711a150b3907af59a54" kindref="member">AtomicPointer::Acquire_Load</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<sp/>p<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/>InterlockedExchangePointer(&amp;p,<sp/>rep_);</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>p;</highlight></codeline>
<codeline lineno="132"><highlight class="normal">}</highlight></codeline>
<codeline lineno="133"><highlight class="normal"></highlight></codeline>
<codeline lineno="134" refid="classleveldb_1_1port_1_1_atomic_pointer_1a8dfe51c125f71c09a363dae042be63a7" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classleveldb_1_1port_1_1_atomic_pointer_1a8dfe51c125f71c09a363dae042be63a7" kindref="member">AtomicPointer::Release_Store</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>v)<sp/>{</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/>InterlockedExchangePointer(&amp;rep_,<sp/>v);</highlight></codeline>
<codeline lineno="136"><highlight class="normal">}</highlight></codeline>
<codeline lineno="137"><highlight class="normal"></highlight></codeline>
<codeline lineno="138" refid="classleveldb_1_1port_1_1_atomic_pointer_1a6f1579bd734aa549f237eeb4f486cfd3" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/><ref refid="classleveldb_1_1port_1_1_atomic_pointer_1a6f1579bd734aa549f237eeb4f486cfd3" kindref="member">AtomicPointer::NoBarrier_Load</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>rep_;</highlight></codeline>
<codeline lineno="140"><highlight class="normal">}</highlight></codeline>
<codeline lineno="141"><highlight class="normal"></highlight></codeline>
<codeline lineno="142" refid="classleveldb_1_1port_1_1_atomic_pointer_1aa7faab23777d1fe3c1a96d32a28ed20c" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classleveldb_1_1port_1_1_atomic_pointer_1aa7faab23777d1fe3c1a96d32a28ed20c" kindref="member">AtomicPointer::NoBarrier_Store</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>v)<sp/>{</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/>rep_<sp/>=<sp/>v;</highlight></codeline>
<codeline lineno="144"><highlight class="normal">}</highlight></codeline>
<codeline lineno="145"><highlight class="normal"></highlight></codeline>
<codeline lineno="146"><highlight class="normal">}</highlight></codeline>
<codeline lineno="147"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="/home/dev/ds-160209/src/leveldb/port/port_win.cc"/>
  </compounddef>
</doxygen>
