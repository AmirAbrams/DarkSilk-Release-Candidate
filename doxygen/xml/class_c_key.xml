<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.9.1">
  <compounddef id="class_c_key" kind="class" language="C++" prot="public">
    <compoundname>CKey</compoundname>
    <includes refid="key_8h" local="no">key.h</includes>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="class_c_key_1a78cdd7f831519b5167f6c801f49fa977" prot="private" static="no" mutable="no">
        <type>bool</type>
        <definition>bool CKey::fValid</definition>
        <argsstring></argsstring>
        <name>fValid</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/key.h" line="33" column="1" bodyfile="/home/dev/ds-160209/src/key.h" bodystart="33" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_c_key_1a9e5f8cac8811466c735d7af6f17a0dfe" prot="private" static="no" mutable="no">
        <type>bool</type>
        <definition>bool CKey::fCompressed</definition>
        <argsstring></argsstring>
        <name>fCompressed</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/key.h" line="36" column="1" bodyfile="/home/dev/ds-160209/src/key.h" bodystart="36" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_c_key_1a07f9e2b043670dfbaa9b7b4e782ed116" prot="private" static="no" mutable="no">
        <type>unsigned char</type>
        <definition>unsigned char CKey::vch[32]</definition>
        <argsstring>[32]</argsstring>
        <name>vch</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/key.h" line="39" column="1" bodyfile="/home/dev/ds-160209/src/key.h" bodystart="39" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-static-func">
      <memberdef kind="function" id="class_c_key_1acec869bc75fa8f4d619ab025d367a97c" prot="private" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool CKey::Check</definition>
        <argsstring>(const unsigned char *vch)</argsstring>
        <name>Check</name>
        <param>
          <type>const unsigned char *</type>
          <declname>vch</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/key.h" line="42" column="1" bodyfile="/home/dev/ds-160209/src/key.cpp" bodystart="135" bodyend="137"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="class_c_key_1a8f4ca910c7b7e729a3f2a5c59d060d3d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>CKey::CKey</definition>
        <argsstring>()</argsstring>
        <name>CKey</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/key.h" line="46" column="1" bodyfile="/home/dev/ds-160209/src/key.h" bodystart="46" bodyend="48"/>
        <references refid="allocators_8h_1ab73cc3988a03bed966c0c2bb191a8d2a" compoundref="allocators_8h" startline="185" endline="187">LockObject</references>
      </memberdef>
      <memberdef kind="function" id="class_c_key_1afcea34cefd25675f4cf9b03eaa4bb7d9" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>CKey::CKey</definition>
        <argsstring>(const CKey &amp;secret)</argsstring>
        <name>CKey</name>
        <param>
          <type>const <ref refid="class_c_key" kindref="compound">CKey</ref> &amp;</type>
          <declname>secret</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/key.h" line="51" column="1" bodyfile="/home/dev/ds-160209/src/key.h" bodystart="51" bodyend="54"/>
        <references refid="allocators_8h_1ab73cc3988a03bed966c0c2bb191a8d2a" compoundref="allocators_8h" startline="185" endline="187">LockObject</references>
      </memberdef>
      <memberdef kind="function" id="class_c_key_1a57d5b254748cef054c40f99c1c339147" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>CKey::~CKey</definition>
        <argsstring>()</argsstring>
        <name>~CKey</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/key.h" line="57" column="1" bodyfile="/home/dev/ds-160209/src/key.h" bodystart="57" bodyend="59"/>
        <references refid="allocators_8h_1a49577b8da0ecffd2fbc222896283004c" compoundref="allocators_8h" startline="189" endline="192">UnlockObject</references>
      </memberdef>
      <memberdef kind="function" id="class_c_key_1aaa13d5f08456bba094210c5eeabf64c8" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void CKey::Set</definition>
        <argsstring>(const T pbegin, const T pend, bool fCompressedIn)</argsstring>
        <name>Set</name>
        <param>
          <type>const T</type>
          <declname>pbegin</declname>
        </param>
        <param>
          <type>const T</type>
          <declname>pend</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>fCompressedIn</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/key.h" line="68" column="1" bodyfile="/home/dev/ds-160209/src/key.h" bodystart="68" bodyend="80"/>
        <referencedby refid="class_c_dark_silk_secret_1af7b026d90efb897f6e592ce424c8d2c9" compoundref="base58_8cpp" startline="258" endline="263">CDarkSilkSecret::GetKey</referencedby>
        <referencedby refid="class_c_crypto_key_store_1a81bd70e18aa75f566526620a74f9cd88" compoundref="crypter_8cpp" startline="238" endline="265">CCryptoKeyStore::Unlock</referencedby>
        <referencedby refid="class_c_crypto_key_store_1a58cfb3c490318ef82de8fc9be6637269" compoundref="crypter_8cpp" startline="301" endline="323">CCryptoKeyStore::GetKey</referencedby>
        <referencedby refid="struct_c_ext_key_1a8cd6ecafdd649082601d7eebbec79688" compoundref="key_8cpp" startline="268" endline="282">CExtKey::SetMaster</referencedby>
        <referencedby refid="struct_c_ext_key_1a9720e119745472336b6729e19f0819dd" compoundref="key_8cpp" startline="305" endline="311">CExtKey::Decode</referencedby>
        <referencedby refid="base58__tests_8cpp_1a1fd3203c7badbc6513c9dcaf58d4ccf9" compoundref="base58__tests_8cpp" startline="164" endline="229">BOOST_AUTO_TEST_CASE</referencedby>
        <referencedby refid="class_c_wallet_1ac45af0632ea59c56295d3158b7387f33" compoundref="wallet_8cpp" startline="3090" endline="3240">CWallet::UnlockStealthAddresses</referencedby>
        <referencedby refid="class_c_wallet_1a5d0e2025dc7a87a0406be272b80509ee" compoundref="wallet_8cpp" startline="3470" endline="3697">CWallet::FindStealthTransactions</referencedby>
      </memberdef>
      <memberdef kind="function" id="class_c_key_1a6329a38926a8af8112d06da96afbfe39" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>unsigned int</type>
        <definition>unsigned int CKey::size</definition>
        <argsstring>() const </argsstring>
        <name>size</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/key.h" line="83" column="1" bodyfile="/home/dev/ds-160209/src/key.h" bodystart="83" bodyend="83"/>
        <referencedby refid="class_c_dark_silk_secret_1a74deecf3a37ff76ff64ca8b935045bbd" compoundref="base58_8cpp" startline="251" endline="256">CDarkSilkSecret::SetKey</referencedby>
        <referencedby refid="struct_c_ext_key_1aa60d612abaa124e00f66f81ac4a74699" compoundref="key_8cpp" startline="294" endline="303">CExtKey::Encode</referencedby>
        <referencedby refid="class_c_key_1a651d1e10b4085da5e4c4a764f3a384df" compoundref="key_8h" startline="85" endline="85">end</referencedby>
      </memberdef>
      <memberdef kind="function" id="class_c_key_1aabd29e0d5faf30032cc8519a1ce62a5a" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const unsigned char *</type>
        <definition>const unsigned char* CKey::begin</definition>
        <argsstring>() const </argsstring>
        <name>begin</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/key.h" line="84" column="1" bodyfile="/home/dev/ds-160209/src/key.h" bodystart="84" bodyend="84"/>
        <referencedby refid="class_c_dark_silk_secret_1a74deecf3a37ff76ff64ca8b935045bbd" compoundref="base58_8cpp" startline="251" endline="256">CDarkSilkSecret::SetKey</referencedby>
        <referencedby refid="class_c_crypto_key_store_1a340109b8673267676a34664a76ed3274" compoundref="crypter_8cpp" startline="267" endline="286">CCryptoKeyStore::AddKeyPubKey</referencedby>
        <referencedby refid="class_c_crypto_key_store_1a8c0f6b63fb04193df16243c4459b7c61" compoundref="crypter_8cpp" startline="342" endline="364">CCryptoKeyStore::EncryptKeys</referencedby>
        <referencedby refid="class_c_key_1aa62c082c9037565fce02b457cc335e7b" compoundref="key_8cpp" startline="148" endline="154">SetPrivKey</referencedby>
        <referencedby refid="class_c_key_1ab38813e7091f658612dfb14f17c9e317" compoundref="key_8cpp" startline="156" endline="167">GetPrivKey</referencedby>
        <referencedby refid="class_c_key_1ae4b61da6ec62f676fe6362ac5fc26aca" compoundref="key_8cpp" startline="169" endline="180">GetPubKey</referencedby>
        <referencedby refid="class_c_key_1a3b161899b4fa79f5a7036d2ccf12ce3a" compoundref="key_8cpp" startline="182" endline="195">Sign</referencedby>
        <referencedby refid="class_c_key_1a59afeabf3f63d99dfdbd3722087853a1" compoundref="key_8cpp" startline="211" endline="224">SignCompact</referencedby>
        <referencedby refid="class_c_key_1a141751588f8bfe5f1b6fc27f4e64b63f" compoundref="key_8cpp" startline="226" endline="236">Load</referencedby>
        <referencedby refid="class_c_key_1abb0091d4390dcece3c56ea4c1fdd6036" compoundref="key_8cpp" startline="238" endline="258">Derive</referencedby>
        <referencedby refid="struct_c_ext_key_1aa60d612abaa124e00f66f81ac4a74699" compoundref="key_8cpp" startline="294" endline="303">CExtKey::Encode</referencedby>
        <referencedby refid="smessage_8h_1a1a9885d0f94a7d5322eafb31bcf2f90a" compoundref="smessage_8cpp" startline="3276" endline="3531">SecureMsgEncrypt</referencedby>
        <referencedby refid="smessage_8h_1a2edb582fcb7f69b543174479231647be" compoundref="smessage_8cpp" startline="3702" endline="3946">SecureMsgDecrypt</referencedby>
      </memberdef>
      <memberdef kind="function" id="class_c_key_1a651d1e10b4085da5e4c4a764f3a384df" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const unsigned char *</type>
        <definition>const unsigned char* CKey::end</definition>
        <argsstring>() const </argsstring>
        <name>end</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/key.h" line="85" column="1" bodyfile="/home/dev/ds-160209/src/key.h" bodystart="85" bodyend="85"/>
        <references refid="class_c_key_1a6329a38926a8af8112d06da96afbfe39" compoundref="key_8h" startline="83" endline="83">size</references>
        <referencedby refid="class_c_crypto_key_store_1a340109b8673267676a34664a76ed3274" compoundref="crypter_8cpp" startline="267" endline="286">CCryptoKeyStore::AddKeyPubKey</referencedby>
        <referencedby refid="class_c_crypto_key_store_1a8c0f6b63fb04193df16243c4459b7c61" compoundref="crypter_8cpp" startline="342" endline="364">CCryptoKeyStore::EncryptKeys</referencedby>
        <referencedby refid="class_c_key_1abb0091d4390dcece3c56ea4c1fdd6036" compoundref="key_8cpp" startline="238" endline="258">Derive</referencedby>
      </memberdef>
      <memberdef kind="function" id="class_c_key_1a62094263b7422a45b45ac508396f19eb" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool CKey::IsValid</definition>
        <argsstring>() const </argsstring>
        <name>IsValid</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/key.h" line="88" column="1" bodyfile="/home/dev/ds-160209/src/key.h" bodystart="88" bodyend="88"/>
        <referencedby refid="class_c_dark_silk_secret_1a74deecf3a37ff76ff64ca8b935045bbd" compoundref="base58_8cpp" startline="251" endline="256">CDarkSilkSecret::SetKey</referencedby>
        <referencedby refid="class_c_key_1abb0091d4390dcece3c56ea4c1fdd6036" compoundref="key_8cpp" startline="238" endline="258">Derive</referencedby>
        <referencedby refid="base58__tests_8cpp_1a1fd3203c7badbc6513c9dcaf58d4ccf9" compoundref="base58__tests_8cpp" startline="164" endline="229">BOOST_AUTO_TEST_CASE</referencedby>
        <referencedby refid="class_c_wallet_1ac45af0632ea59c56295d3158b7387f33" compoundref="wallet_8cpp" startline="3090" endline="3240">CWallet::UnlockStealthAddresses</referencedby>
        <referencedby refid="class_c_wallet_1a5d0e2025dc7a87a0406be272b80509ee" compoundref="wallet_8cpp" startline="3470" endline="3697">CWallet::FindStealthTransactions</referencedby>
      </memberdef>
      <memberdef kind="function" id="class_c_key_1abdc7d807f7a1b27ff3ad9dd5164a2273" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool CKey::IsCompressed</definition>
        <argsstring>() const </argsstring>
        <name>IsCompressed</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/key.h" line="91" column="1" bodyfile="/home/dev/ds-160209/src/key.h" bodystart="91" bodyend="91"/>
        <referencedby refid="class_c_dark_silk_secret_1a74deecf3a37ff76ff64ca8b935045bbd" compoundref="base58_8cpp" startline="251" endline="256">CDarkSilkSecret::SetKey</referencedby>
        <referencedby refid="class_c_key_1abb0091d4390dcece3c56ea4c1fdd6036" compoundref="key_8cpp" startline="238" endline="258">Derive</referencedby>
      </memberdef>
      <memberdef kind="function" id="class_c_key_1aa62c082c9037565fce02b457cc335e7b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool CKey::SetPrivKey</definition>
        <argsstring>(const CPrivKey &amp;vchPrivKey, bool fCompressed)</argsstring>
        <name>SetPrivKey</name>
        <param>
          <type>const <ref refid="key_8h_1a1da569b8b6e5b3fa1196cc1b877e7f54" kindref="member">CPrivKey</ref> &amp;</type>
          <declname>vchPrivKey</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>fCompressed</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/key.h" line="94" column="1" bodyfile="/home/dev/ds-160209/src/key.cpp" bodystart="148" bodyend="154"/>
        <references refid="class_c_key_1aabd29e0d5faf30032cc8519a1ce62a5a" compoundref="key_8h" startline="84" endline="84">begin</references>
        <referencedby refid="rpcnet_8cpp_1a89a8e338923aea165bb7d8d572d76203" compoundref="rpcnet_8cpp" startline="244" endline="301">sendalert</referencedby>
      </memberdef>
      <memberdef kind="function" id="class_c_key_1a9d12ed9d297e4286250fd7ea6b59e1a5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void CKey::MakeNewKey</definition>
        <argsstring>(bool fCompressed)</argsstring>
        <name>MakeNewKey</name>
        <param>
          <type>bool</type>
          <declname>fCompressed</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/key.h" line="97" column="1" bodyfile="/home/dev/ds-160209/src/key.cpp" bodystart="139" bodyend="146"/>
        <references refid="util_8cpp_1a786af12a87491f8dc24351d93b9833b6" compoundref="util_8cpp" startline="171" endline="196">RandAddSeedPerfmon</references>
        <references refid="util_8cpp_1acf52c2aa8213c7b15e26594a2264ed8a" compoundref="util_8cpp" startline="154" endline="161">GetRandBytes</references>
        <referencedby refid="key_8h_1a55cc40f04bf887c1000667caccb0684a" compoundref="key_8cpp" startline="313" endline="318">ECC_InitSanityCheck</referencedby>
        <referencedby refid="rpcstormnode_8cpp_1a1b562b4a6a627758a7c1080f23a82aa0" compoundref="rpcstormnode_8cpp" startline="81" endline="471">stormnode</referencedby>
        <referencedby refid="rpcwallet_8cpp_1a99fe5f539a487e6da84f74ac47ae5ba6" compoundref="rpcwallet_8cpp" startline="2262" endline="2282">makekeypair</referencedby>
        <referencedby refid="smessage_8h_1a1a9885d0f94a7d5322eafb31bcf2f90a" compoundref="smessage_8cpp" startline="3276" endline="3531">SecureMsgEncrypt</referencedby>
        <referencedby refid="sigopcount__tests_8cpp_1aef2e9baa5f7a374852166d1c3945d620" compoundref="sigopcount__tests_8cpp" startline="20" endline="58">BOOST_AUTO_TEST_CASE</referencedby>
        <referencedby refid="class_c_wallet_1a061fe7f54f80ec40f856b3e6365c2f4a" compoundref="wallet_8cpp" startline="77" endline="101">CWallet::GenerateNewKey</referencedby>
      </memberdef>
      <memberdef kind="function" id="class_c_key_1ab38813e7091f658612dfb14f17c9e317" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="key_8h_1a1da569b8b6e5b3fa1196cc1b877e7f54" kindref="member">CPrivKey</ref></type>
        <definition>CPrivKey CKey::GetPrivKey</definition>
        <argsstring>() const </argsstring>
        <name>GetPrivKey</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/key.h" line="101" column="1" bodyfile="/home/dev/ds-160209/src/key.cpp" bodystart="156" bodyend="167"/>
        <references refid="class_c_key_1aabd29e0d5faf30032cc8519a1ce62a5a" compoundref="key_8h" startline="84" endline="84">begin</references>
        <references refid="secp256k1_8h_1a7b8f642c65e8b5c81fa4421b7c42ab57" compoundref="secp256k1_8h" startline="165">SECP256K1_EC_COMPRESSED</references>
        <references refid="secp256k1_8h_1ab8e25dc58843e83926f95795f9e8a6e2" compoundref="secp256k1_8h" startline="166">SECP256K1_EC_UNCOMPRESSED</references>
        <referencedby refid="rpcwallet_8cpp_1a99fe5f539a487e6da84f74ac47ae5ba6" compoundref="rpcwallet_8cpp" startline="2262" endline="2282">makekeypair</referencedby>
        <referencedby refid="class_c_wallet_1a3240da36cd717146296969227a3e0bd5" compoundref="wallet_8cpp" startline="103" endline="121">CWallet::AddKeyPubKey</referencedby>
      </memberdef>
      <memberdef kind="function" id="class_c_key_1ae4b61da6ec62f676fe6362ac5fc26aca" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_c_pub_key" kindref="compound">CPubKey</ref></type>
        <definition>CPubKey CKey::GetPubKey</definition>
        <argsstring>() const </argsstring>
        <name>GetPubKey</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/key.h" line="105" column="1" bodyfile="/home/dev/ds-160209/src/key.cpp" bodystart="169" bodyend="180"/>
        <references refid="secp256k1_8h_1a7438071aa8a6dc4697abe4f4659f2161" compoundref="secp256k1_8c" startline="409" endline="430">secp256k1_ec_pubkey_create</references>
        <references refid="class_c_key_1aabd29e0d5faf30032cc8519a1ce62a5a" compoundref="key_8h" startline="84" endline="84">begin</references>
        <references refid="secp256k1_8h_1a34977bf00322e510e881160c421836d7" compoundref="secp256k1_8c" startline="168" endline="190">secp256k1_ec_pubkey_serialize</references>
        <references refid="class_c_pub_key_1add9987e0d25aff11181f5ad70413994b" compoundref="pubkey_8h" startline="92" endline="92">CPubKey::begin</references>
        <references refid="secp256k1_8h_1a7b8f642c65e8b5c81fa4421b7c42ab57" compoundref="secp256k1_8h" startline="165">SECP256K1_EC_COMPRESSED</references>
        <references refid="secp256k1_8h_1ab8e25dc58843e83926f95795f9e8a6e2" compoundref="secp256k1_8h" startline="166">SECP256K1_EC_UNCOMPRESSED</references>
        <references refid="class_c_pub_key_1a9d7129b65b6dee792b4f3923cd64ed59" compoundref="pubkey_8h" startline="91" endline="91">CPubKey::size</references>
        <references refid="class_c_pub_key_1aad6f369d7972f2244466ca6db900c2a4" compoundref="pubkey_8h" startline="144" endline="146">CPubKey::IsValid</references>
        <referencedby refid="class_c_crypto_key_store_1a81bd70e18aa75f566526620a74f9cd88" compoundref="crypter_8cpp" startline="238" endline="265">CCryptoKeyStore::Unlock</referencedby>
        <referencedby refid="class_c_crypto_key_store_1a8c0f6b63fb04193df16243c4459b7c61" compoundref="crypter_8cpp" startline="342" endline="364">CCryptoKeyStore::EncryptKeys</referencedby>
        <referencedby refid="class_c_key_1abb0091d4390dcece3c56ea4c1fdd6036" compoundref="key_8cpp" startline="238" endline="258">Derive</referencedby>
        <referencedby refid="struct_c_ext_key_1a2fa3a39434ae09efbbd4058d1d081aa2" compoundref="key_8cpp" startline="260" endline="266">CExtKey::Derive</referencedby>
        <referencedby refid="struct_c_ext_key_1a49f98a470d61ab1f2948b7c414ec9563" compoundref="key_8cpp" startline="284" endline="292">CExtKey::Neuter</referencedby>
        <referencedby refid="key_8h_1a55cc40f04bf887c1000667caccb0684a" compoundref="key_8cpp" startline="313" endline="318">ECC_InitSanityCheck</referencedby>
        <referencedby refid="class_c_key_store_1aba866c1e71c129e7ac2d5d1e5223c8a5" compoundref="keystore_8cpp" startline="9" endline="16">CKeyStore::GetPubKey</referencedby>
        <referencedby refid="class_c_key_store_1a0b4ca43724cfcc6e2ea70c0baa192750" compoundref="keystore_8cpp" startline="18" endline="20">CKeyStore::AddKey</referencedby>
        <referencedby refid="rpcdump_8cpp_1a3a6fdb974fce01220a895393d444e981" compoundref="rpcdump_8cpp" startline="106" endline="159">importprivkey</referencedby>
        <referencedby refid="rpcdump_8cpp_1a2566d5c9dd1938b74e70398cdb3ac5c1" compoundref="rpcdump_8cpp" startline="232" endline="318">importwallet</referencedby>
        <referencedby refid="rpcwallet_8cpp_1a99fe5f539a487e6da84f74ac47ae5ba6" compoundref="rpcwallet_8cpp" startline="2262" endline="2282">makekeypair</referencedby>
        <referencedby refid="class_c_sand_storm_signer_1ac9823b3f497f6e9f1e3d426f662af92b" compoundref="sandstorm_8cpp" startline="2044" endline="2057">CSandStormSigner::SetKey</referencedby>
        <referencedby refid="smessage_8h_1a1a9885d0f94a7d5322eafb31bcf2f90a" compoundref="smessage_8cpp" startline="3276" endline="3531">SecureMsgEncrypt</referencedby>
        <referencedby refid="sigopcount__tests_8cpp_1aef2e9baa5f7a374852166d1c3945d620" compoundref="sigopcount__tests_8cpp" startline="20" endline="58">BOOST_AUTO_TEST_CASE</referencedby>
        <referencedby refid="class_c_wallet_1a061fe7f54f80ec40f856b3e6365c2f4a" compoundref="wallet_8cpp" startline="77" endline="101">CWallet::GenerateNewKey</referencedby>
        <referencedby refid="class_c_wallet_1ac45af0632ea59c56295d3158b7387f33" compoundref="wallet_8cpp" startline="3090" endline="3240">CWallet::UnlockStealthAddresses</referencedby>
        <referencedby refid="class_c_wallet_1a5d0e2025dc7a87a0406be272b80509ee" compoundref="wallet_8cpp" startline="3470" endline="3697">CWallet::FindStealthTransactions</referencedby>
        <referencedby refid="class_c_wallet_1a644df129468440aa36f49ca3716a3c19" compoundref="wallet_8cpp" startline="3733" endline="3956">CWallet::CreateCoinStake</referencedby>
      </memberdef>
      <memberdef kind="function" id="class_c_key_1a3b161899b4fa79f5a7036d2ccf12ce3a" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool CKey::Sign</definition>
        <argsstring>(const uint256 &amp;hash, std::vector&lt; unsigned char &gt; &amp;vchSig, uint32_t test_case=0) const </argsstring>
        <name>Sign</name>
        <param>
          <type>const <ref refid="classuint256" kindref="compound">uint256</ref> &amp;</type>
          <declname>hash</declname>
        </param>
        <param>
          <type>std::vector&lt; unsigned char &gt; &amp;</type>
          <declname>vchSig</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a435d1572bf3f880d55459d9805097f62" kindref="member">uint32_t</ref></type>
          <declname>test_case</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Create a DER-serialized signature. The test_case parameter tweaks the deterministic nonce. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/key.h" line="111" column="1" bodyfile="/home/dev/ds-160209/src/key.cpp" bodystart="182" bodyend="195"/>
        <references refid="secp256k1_8h_1a691c048f3a3b4e7f51417c57ec058be7" compoundref="secp256k1_8c" startline="349" endline="393">secp256k1_ecdsa_sign</references>
        <references refid="classbase__uint_1aaa32054bf4e8fbb31d54a75f6065174d" compoundref="uint256_8h" startline="241" endline="244">base_uint&lt; BITS &gt;::begin</references>
        <references refid="class_c_key_1aabd29e0d5faf30032cc8519a1ce62a5a" compoundref="key_8h" startline="84" endline="84">begin</references>
        <references refid="secp256k1_8h_1ac03ab067f194eb561175a6b522def2d8" compoundref="secp256k1_8c" startline="346">secp256k1_nonce_function_rfc6979</references>
        <references refid="secp256k1_8h_1ac07809ca872ec967ab4d3b1a95eafe0b" compoundref="secp256k1_8c" startline="253" endline="263">secp256k1_ecdsa_signature_serialize_der</references>
        <referencedby refid="class_c_key_1a3890764f7a2e5d9cdeffb3e102e4545d" compoundref="key_8cpp" startline="197" endline="209">VerifyPubKey</referencedby>
        <referencedby refid="rpcnet_8cpp_1a89a8e338923aea165bb7d8d572d76203" compoundref="rpcnet_8cpp" startline="244" endline="301">sendalert</referencedby>
        <referencedby refid="script_8cpp_1a69a9e5f9a88e729142cf556292154f2f" compoundref="script_8cpp" startline="2463" endline="2476">Sign1</referencedby>
      </memberdef>
      <memberdef kind="function" id="class_c_key_1a59afeabf3f63d99dfdbd3722087853a1" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool CKey::SignCompact</definition>
        <argsstring>(const uint256 &amp;hash, std::vector&lt; unsigned char &gt; &amp;vchSig) const </argsstring>
        <name>SignCompact</name>
        <param>
          <type>const <ref refid="classuint256" kindref="compound">uint256</ref> &amp;</type>
          <declname>hash</declname>
        </param>
        <param>
          <type>std::vector&lt; unsigned char &gt; &amp;</type>
          <declname>vchSig</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/key.h" line="118" column="1" bodyfile="/home/dev/ds-160209/src/key.cpp" bodystart="211" bodyend="224"/>
        <references refid="secp256k1__recovery_8h_1a1b1f4423a232f681e90e5f9d28f3d148" compoundref="recovery_2main__impl_8h" startline="123" endline="168">secp256k1_ecdsa_sign_recoverable</references>
        <references refid="classbase__uint_1aaa32054bf4e8fbb31d54a75f6065174d" compoundref="uint256_8h" startline="241" endline="244">base_uint&lt; BITS &gt;::begin</references>
        <references refid="class_c_key_1aabd29e0d5faf30032cc8519a1ce62a5a" compoundref="key_8h" startline="84" endline="84">begin</references>
        <references refid="secp256k1_8h_1ac03ab067f194eb561175a6b522def2d8" compoundref="secp256k1_8c" startline="346">secp256k1_nonce_function_rfc6979</references>
        <references refid="secp256k1__recovery_8h_1a12f08c89ceb61949c6a4ec6eb2511185" compoundref="recovery_2main__impl_8h" startline="60" endline="72">secp256k1_ecdsa_recoverable_signature_serialize_compact</references>
        <referencedby refid="rpcwallet_8cpp_1a315b42a2c859c4b50a54c1b05984928c" compoundref="rpcwallet_8cpp" startline="575" endline="624">signmessage</referencedby>
        <referencedby refid="class_c_sand_storm_signer_1a5c9a3f21a823f17e2831247573931698" compoundref="sandstorm_8cpp" startline="2059" endline="2071">CSandStormSigner::SignMessage</referencedby>
        <referencedby refid="smessage_8h_1a1a9885d0f94a7d5322eafb31bcf2f90a" compoundref="smessage_8cpp" startline="3276" endline="3531">SecureMsgEncrypt</referencedby>
      </memberdef>
      <memberdef kind="function" id="class_c_key_1abb0091d4390dcece3c56ea4c1fdd6036" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool CKey::Derive</definition>
        <argsstring>(CKey &amp;keyChild, unsigned char ccChild[32], unsigned int nChild, const unsigned char cc[32]) const </argsstring>
        <name>Derive</name>
        <param>
          <type><ref refid="class_c_key" kindref="compound">CKey</ref> &amp;</type>
          <declname>keyChild</declname>
        </param>
        <param>
          <type>unsigned char</type>
          <declname>ccChild</declname>
          <array>[32]</array>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>nChild</declname>
        </param>
        <param>
          <type>const unsigned char</type>
          <declname>cc</declname>
          <array>[32]</array>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/key.h" line="121" column="1" bodyfile="/home/dev/ds-160209/src/key.cpp" bodystart="238" bodyend="258"/>
        <references refid="class_c_key_1a62094263b7422a45b45ac508396f19eb" compoundref="key_8h" startline="88" endline="88">IsValid</references>
        <references refid="class_c_key_1abdc7d807f7a1b27ff3ad9dd5164a2273" compoundref="key_8h" startline="91" endline="91">IsCompressed</references>
        <references refid="allocators_8h_1ab73cc3988a03bed966c0c2bb191a8d2a" compoundref="allocators_8h" startline="185" endline="187">LockObject</references>
        <references refid="class_c_key_1ae4b61da6ec62f676fe6362ac5fc26aca" compoundref="key_8cpp" startline="169" endline="180">GetPubKey</references>
        <references refid="class_c_pub_key_1add9987e0d25aff11181f5ad70413994b" compoundref="pubkey_8h" startline="92" endline="92">CPubKey::begin</references>
        <references refid="class_c_pub_key_1aa559d2a4f2cbdec84c02a4adc18fa657" compoundref="pubkey_8h" startline="93" endline="93">CPubKey::end</references>
        <references refid="hash_8cpp_1af81a4d88d7eaba27c63313aec22b01a4" compoundref="hash_8cpp" startline="44" endline="56">BIP32Hash</references>
        <references refid="class_c_key_1aabd29e0d5faf30032cc8519a1ce62a5a" compoundref="key_8h" startline="84" endline="84">begin</references>
        <references refid="class_c_key_1a651d1e10b4085da5e4c4a764f3a384df" compoundref="key_8h" startline="85" endline="85">end</references>
        <references refid="secp256k1_8h_1a0f9125cd8c970342ec5118f7bfacc0c5" compoundref="secp256k1_8c" startline="432" endline="454">secp256k1_ec_privkey_tweak_add</references>
        <references refid="allocators_8h_1a49577b8da0ecffd2fbc222896283004c" compoundref="allocators_8h" startline="189" endline="192">UnlockObject</references>
        <referencedby refid="struct_c_ext_key_1a2fa3a39434ae09efbbd4058d1d081aa2" compoundref="key_8cpp" startline="260" endline="266">CExtKey::Derive</referencedby>
      </memberdef>
      <memberdef kind="function" id="class_c_key_1a3890764f7a2e5d9cdeffb3e102e4545d" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool CKey::VerifyPubKey</definition>
        <argsstring>(const CPubKey &amp;vchPubKey) const </argsstring>
        <name>VerifyPubKey</name>
        <param>
          <type>const <ref refid="class_c_pub_key" kindref="compound">CPubKey</ref> &amp;</type>
          <declname>vchPubKey</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Verify thoroughly whether a private key and a public key match. This is done using a different mechanism than just regenerating it. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/key.h" line="127" column="1" bodyfile="/home/dev/ds-160209/src/key.cpp" bodystart="197" bodyend="209"/>
        <references refid="class_c_pub_key_1a397e437d9d0a008e2641892147b0931a" compoundref="pubkey_8h" startline="152" endline="154">CPubKey::IsCompressed</references>
        <references refid="util_8cpp_1acf52c2aa8213c7b15e26594a2264ed8a" compoundref="util_8cpp" startline="154" endline="161">GetRandBytes</references>
        <references refid="cache_8cc_1a11ecb029164e055f28f4123ce3748862" compoundref="cache_8cc" startline="34">hash</references>
        <references refid="class_c_hash256_1a9cc25033c6435cb28e2e8e377c949a7a" compoundref="hash_8h" startline="41" endline="44">CHash256::Write</references>
        <references refid="classbase__uint_1aaa32054bf4e8fbb31d54a75f6065174d" compoundref="uint256_8h" startline="241" endline="244">base_uint&lt; BITS &gt;::begin</references>
        <references refid="class_c_key_1a3b161899b4fa79f5a7036d2ccf12ce3a" compoundref="key_8cpp" startline="182" endline="195">Sign</references>
        <references refid="class_c_pub_key_1ab4047c7ce31b72591d8108a2563cd21b" compoundref="pubkey_8cpp" startline="167" endline="185">CPubKey::Verify</references>
        <referencedby refid="class_c_key_1a141751588f8bfe5f1b6fc27f4e64b63f" compoundref="key_8cpp" startline="226" endline="236">Load</referencedby>
        <referencedby refid="key_8h_1a55cc40f04bf887c1000667caccb0684a" compoundref="key_8cpp" startline="313" endline="318">ECC_InitSanityCheck</referencedby>
        <referencedby refid="rpcdump_8cpp_1a3a6fdb974fce01220a895393d444e981" compoundref="rpcdump_8cpp" startline="106" endline="159">importprivkey</referencedby>
        <referencedby refid="rpcdump_8cpp_1a2566d5c9dd1938b74e70398cdb3ac5c1" compoundref="rpcdump_8cpp" startline="232" endline="318">importwallet</referencedby>
        <referencedby refid="class_c_wallet_1a061fe7f54f80ec40f856b3e6365c2f4a" compoundref="wallet_8cpp" startline="77" endline="101">CWallet::GenerateNewKey</referencedby>
      </memberdef>
      <memberdef kind="function" id="class_c_key_1a141751588f8bfe5f1b6fc27f4e64b63f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool CKey::Load</definition>
        <argsstring>(CPrivKey &amp;privkey, CPubKey &amp;vchPubKey, bool fSkipCheck)</argsstring>
        <name>Load</name>
        <param>
          <type><ref refid="key_8h_1a1da569b8b6e5b3fa1196cc1b877e7f54" kindref="member">CPrivKey</ref> &amp;</type>
          <declname>privkey</declname>
        </param>
        <param>
          <type><ref refid="class_c_pub_key" kindref="compound">CPubKey</ref> &amp;</type>
          <declname>vchPubKey</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>fSkipCheck</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/key.h" line="130" column="1" bodyfile="/home/dev/ds-160209/src/key.cpp" bodystart="226" bodyend="236"/>
        <references refid="class_c_key_1aabd29e0d5faf30032cc8519a1ce62a5a" compoundref="key_8h" startline="84" endline="84">begin</references>
        <references refid="class_c_pub_key_1a397e437d9d0a008e2641892147b0931a" compoundref="pubkey_8h" startline="152" endline="154">CPubKey::IsCompressed</references>
        <references refid="class_c_key_1a3890764f7a2e5d9cdeffb3e102e4545d" compoundref="key_8cpp" startline="197" endline="209">VerifyPubKey</references>
        <referencedby refid="walletdb_8cpp_1ad1f171cf096f5479805a06fc20480343" compoundref="walletdb_8cpp" startline="357" endline="622">ReadKeyValue</referencedby>
      </memberdef>
      </sectiondef>
      <sectiondef kind="friend">
      <memberdef kind="friend" id="class_c_key_1a381efd9184dc467e73e690329c70371d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>friend bool</type>
        <definition>bool operator==</definition>
        <argsstring>(const CKey &amp;a, const CKey &amp;b)</argsstring>
        <name>operator==</name>
        <param>
          <type>const <ref refid="class_c_key" kindref="compound">CKey</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="class_c_key" kindref="compound">CKey</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/key.h" line="61" column="1" bodyfile="/home/dev/ds-160209/src/key.h" bodystart="61" bodyend="64"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="class_c_key_1a625c363d9adfbd4dda22f3a67a898cf4" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>static bool CKey::CheckSignatureElement</definition>
        <argsstring>(const unsigned char *vch, int len, bool half)</argsstring>
        <name>CheckSignatureElement</name>
        <param>
          <type>const unsigned char *</type>
          <declname>vch</declname>
        </param>
        <param>
          <type>int</type>
          <declname>len</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>half</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/key.h" line="133" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>An encapsulated private key. </para>    </detaileddescription>
    <location file="/home/dev/ds-160209/src/key.h" line="29" column="1" bodyfile="/home/dev/ds-160209/src/key.h" bodystart="29" bodyend="134"/>
    <listofallmembers>
      <member refid="class_c_key_1aabd29e0d5faf30032cc8519a1ce62a5a" prot="public" virt="non-virtual"><scope>CKey</scope><name>begin</name></member>
      <member refid="class_c_key_1acec869bc75fa8f4d619ab025d367a97c" prot="private" virt="non-virtual"><scope>CKey</scope><name>Check</name></member>
      <member refid="class_c_key_1a625c363d9adfbd4dda22f3a67a898cf4" prot="public" virt="non-virtual"><scope>CKey</scope><name>CheckSignatureElement</name></member>
      <member refid="class_c_key_1a8f4ca910c7b7e729a3f2a5c59d060d3d" prot="public" virt="non-virtual"><scope>CKey</scope><name>CKey</name></member>
      <member refid="class_c_key_1afcea34cefd25675f4cf9b03eaa4bb7d9" prot="public" virt="non-virtual"><scope>CKey</scope><name>CKey</name></member>
      <member refid="class_c_key_1abb0091d4390dcece3c56ea4c1fdd6036" prot="public" virt="non-virtual"><scope>CKey</scope><name>Derive</name></member>
      <member refid="class_c_key_1a651d1e10b4085da5e4c4a764f3a384df" prot="public" virt="non-virtual"><scope>CKey</scope><name>end</name></member>
      <member refid="class_c_key_1a9e5f8cac8811466c735d7af6f17a0dfe" prot="private" virt="non-virtual"><scope>CKey</scope><name>fCompressed</name></member>
      <member refid="class_c_key_1a78cdd7f831519b5167f6c801f49fa977" prot="private" virt="non-virtual"><scope>CKey</scope><name>fValid</name></member>
      <member refid="class_c_key_1ab38813e7091f658612dfb14f17c9e317" prot="public" virt="non-virtual"><scope>CKey</scope><name>GetPrivKey</name></member>
      <member refid="class_c_key_1ae4b61da6ec62f676fe6362ac5fc26aca" prot="public" virt="non-virtual"><scope>CKey</scope><name>GetPubKey</name></member>
      <member refid="class_c_key_1abdc7d807f7a1b27ff3ad9dd5164a2273" prot="public" virt="non-virtual"><scope>CKey</scope><name>IsCompressed</name></member>
      <member refid="class_c_key_1a62094263b7422a45b45ac508396f19eb" prot="public" virt="non-virtual"><scope>CKey</scope><name>IsValid</name></member>
      <member refid="class_c_key_1a141751588f8bfe5f1b6fc27f4e64b63f" prot="public" virt="non-virtual"><scope>CKey</scope><name>Load</name></member>
      <member refid="class_c_key_1a9d12ed9d297e4286250fd7ea6b59e1a5" prot="public" virt="non-virtual"><scope>CKey</scope><name>MakeNewKey</name></member>
      <member refid="class_c_key_1a381efd9184dc467e73e690329c70371d" prot="public" virt="non-virtual"><scope>CKey</scope><name>operator==</name></member>
      <member refid="class_c_key_1aaa13d5f08456bba094210c5eeabf64c8" prot="public" virt="non-virtual"><scope>CKey</scope><name>Set</name></member>
      <member refid="class_c_key_1aa62c082c9037565fce02b457cc335e7b" prot="public" virt="non-virtual"><scope>CKey</scope><name>SetPrivKey</name></member>
      <member refid="class_c_key_1a3b161899b4fa79f5a7036d2ccf12ce3a" prot="public" virt="non-virtual"><scope>CKey</scope><name>Sign</name></member>
      <member refid="class_c_key_1a59afeabf3f63d99dfdbd3722087853a1" prot="public" virt="non-virtual"><scope>CKey</scope><name>SignCompact</name></member>
      <member refid="class_c_key_1a6329a38926a8af8112d06da96afbfe39" prot="public" virt="non-virtual"><scope>CKey</scope><name>size</name></member>
      <member refid="class_c_key_1a07f9e2b043670dfbaa9b7b4e782ed116" prot="private" virt="non-virtual"><scope>CKey</scope><name>vch</name></member>
      <member refid="class_c_key_1a3890764f7a2e5d9cdeffb3e102e4545d" prot="public" virt="non-virtual"><scope>CKey</scope><name>VerifyPubKey</name></member>
      <member refid="class_c_key_1a57d5b254748cef054c40f99c1c339147" prot="public" virt="non-virtual"><scope>CKey</scope><name>~CKey</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
