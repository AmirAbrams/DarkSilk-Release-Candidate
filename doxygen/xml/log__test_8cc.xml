<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.9.1">
  <compounddef id="log__test_8cc" kind="file" language="C++">
    <compoundname>log_test.cc</compoundname>
    <includes refid="log__reader_8h" local="yes">db/log_reader.h</includes>
    <includes refid="log__writer_8h" local="yes">db/log_writer.h</includes>
    <includes refid="env_8h" local="yes">leveldb/env.h</includes>
    <includes refid="coding_8h" local="yes">util/coding.h</includes>
    <includes refid="crc32c_8h" local="yes">util/crc32c.h</includes>
    <includes refid="random_8h" local="yes">util/random.h</includes>
    <includes refid="testharness_8h" local="yes">util/testharness.h</includes>
    <incdepgraph>
      <node id="7295">
        <label>stdarg.h</label>
      </node>
      <node id="7299">
        <label>util/random.h</label>
        <link refid="random_8h"/>
        <childnode refid="7284" relation="include">
        </childnode>
      </node>
      <node id="7287">
        <label>assert.h</label>
      </node>
      <node id="7302">
        <label>stdlib.h</label>
      </node>
      <node id="7282">
        <label>/home/dev/ds-160209/src/leveldb/db/log_test.cc</label>
        <link refid="log_test.cc"/>
        <childnode refid="7283" relation="include">
        </childnode>
        <childnode refid="7292" relation="include">
        </childnode>
        <childnode refid="7293" relation="include">
        </childnode>
        <childnode refid="7296" relation="include">
        </childnode>
        <childnode refid="7298" relation="include">
        </childnode>
        <childnode refid="7299" relation="include">
        </childnode>
        <childnode refid="7300" relation="include">
        </childnode>
      </node>
      <node id="7290">
        <label>string</label>
      </node>
      <node id="7298">
        <label>util/crc32c.h</label>
        <link refid="crc32c_8h"/>
        <childnode refid="7288" relation="include">
        </childnode>
        <childnode refid="7284" relation="include">
        </childnode>
      </node>
      <node id="7288">
        <label>stddef.h</label>
      </node>
      <node id="7283">
        <label>db/log_reader.h</label>
        <link refid="log__reader_8h"/>
        <childnode refid="7284" relation="include">
        </childnode>
        <childnode refid="7285" relation="include">
        </childnode>
        <childnode refid="7286" relation="include">
        </childnode>
        <childnode refid="7291" relation="include">
        </childnode>
      </node>
      <node id="7291">
        <label>leveldb/status.h</label>
        <link refid="status_8h"/>
        <childnode refid="7290" relation="include">
        </childnode>
        <childnode refid="7286" relation="include">
        </childnode>
      </node>
      <node id="7296">
        <label>util/coding.h</label>
        <link refid="coding_8h"/>
        <childnode refid="7284" relation="include">
        </childnode>
        <childnode refid="7289" relation="include">
        </childnode>
        <childnode refid="7290" relation="include">
        </childnode>
        <childnode refid="7286" relation="include">
        </childnode>
        <childnode refid="7297" relation="include">
        </childnode>
      </node>
      <node id="7289">
        <label>string.h</label>
      </node>
      <node id="7292">
        <label>db/log_writer.h</label>
        <link refid="log__writer_8h"/>
        <childnode refid="7284" relation="include">
        </childnode>
        <childnode refid="7285" relation="include">
        </childnode>
        <childnode refid="7286" relation="include">
        </childnode>
        <childnode refid="7291" relation="include">
        </childnode>
      </node>
      <node id="7294">
        <label>vector</label>
      </node>
      <node id="7303">
        <label>sstream</label>
      </node>
      <node id="7285">
        <label>db/log_format.h</label>
        <link refid="log__format_8h"/>
      </node>
      <node id="7297">
        <label>port/port.h</label>
        <link refid="port_8h"/>
        <childnode refid="7289" relation="include">
        </childnode>
      </node>
      <node id="7284">
        <label>stdint.h</label>
        <link refid="stdint_8h"/>
      </node>
      <node id="7300">
        <label>util/testharness.h</label>
        <link refid="testharness_8h"/>
        <childnode refid="7301" relation="include">
        </childnode>
        <childnode refid="7302" relation="include">
        </childnode>
        <childnode refid="7303" relation="include">
        </childnode>
        <childnode refid="7293" relation="include">
        </childnode>
        <childnode refid="7286" relation="include">
        </childnode>
        <childnode refid="7299" relation="include">
        </childnode>
      </node>
      <node id="7286">
        <label>leveldb/slice.h</label>
        <link refid="slice_8h"/>
        <childnode refid="7287" relation="include">
        </childnode>
        <childnode refid="7288" relation="include">
        </childnode>
        <childnode refid="7289" relation="include">
        </childnode>
        <childnode refid="7290" relation="include">
        </childnode>
      </node>
      <node id="7293">
        <label>leveldb/env.h</label>
        <link refid="env_8h"/>
        <childnode refid="7290" relation="include">
        </childnode>
        <childnode refid="7294" relation="include">
        </childnode>
        <childnode refid="7295" relation="include">
        </childnode>
        <childnode refid="7284" relation="include">
        </childnode>
        <childnode refid="7291" relation="include">
        </childnode>
      </node>
      <node id="7301">
        <label>stdio.h</label>
      </node>
    </incdepgraph>
    <innerclass refid="classleveldb_1_1log_1_1_log_test" prot="public">leveldb::log::LogTest</innerclass>
    <innerclass refid="classleveldb_1_1log_1_1_log_test_1_1_string_dest" prot="private">leveldb::log::LogTest::StringDest</innerclass>
    <innerclass refid="classleveldb_1_1log_1_1_log_test_1_1_string_source" prot="private">leveldb::log::LogTest::StringSource</innerclass>
    <innerclass refid="classleveldb_1_1log_1_1_log_test_1_1_report_collector" prot="private">leveldb::log::LogTest::ReportCollector</innerclass>
    <innernamespace refid="namespaceleveldb">leveldb</innernamespace>
    <innernamespace refid="namespaceleveldb_1_1log">leveldb::log</innernamespace>
      <sectiondef kind="func">
      <memberdef kind="function" id="log__test_8cc_1a3c04138a5bfe5d72780bb7e82a18e627" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int main</definition>
        <argsstring>(int argc, char **argv)</argsstring>
        <name>main</name>
        <param>
          <type>int</type>
          <declname>argc</declname>
        </param>
        <param>
          <type>char **</type>
          <declname>argv</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/leveldb/db/log_test.cc" line="528" column="1" bodyfile="/home/dev/ds-160209/src/leveldb/db/log_test.cc" bodystart="528" bodyend="530"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">//<sp/>Copyright<sp/>(c)<sp/>2011-2016<sp/>The<sp/>LevelDB<sp/>Authors.<sp/>All<sp/>rights<sp/>reserved.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Use<sp/>of<sp/>this<sp/>source<sp/>code<sp/>is<sp/>governed<sp/>by<sp/>a<sp/>BSD-style<sp/>license<sp/>that<sp/>can<sp/>be</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="comment">//<sp/>found<sp/>in<sp/>the<sp/>LICENSE<sp/>file.<sp/>See<sp/>the<sp/>AUTHORS<sp/>file<sp/>for<sp/>names<sp/>of<sp/>contributors.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="log__reader_8h" kindref="compound">db/log_reader.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="log__writer_8h" kindref="compound">db/log_writer.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="env_8h" kindref="compound">leveldb/env.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="coding_8h" kindref="compound">util/coding.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="crc32c_8h" kindref="compound">util/crc32c.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="random_8h" kindref="compound">util/random.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="testharness_8h" kindref="compound">util/testharness.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespaceleveldb" kindref="compound">leveldb</ref><sp/>{</highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">log<sp/>{</highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Construct<sp/>a<sp/>string<sp/>of<sp/>the<sp/>specified<sp/>length<sp/>made<sp/>out<sp/>of<sp/>the<sp/>supplied</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="comment">//<sp/>partial<sp/>string.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>std::string<sp/>BigString(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>partial_string,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>n)<sp/>{</highlight></codeline>
<codeline lineno="19"><highlight class="normal"><sp/><sp/>std::string<sp/>result;</highlight></codeline>
<codeline lineno="20"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(result.size()<sp/>&lt;<sp/>n)<sp/>{</highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/><sp/><sp/><sp/>result.append(partial_string);</highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/>result.resize(n);</highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="25"><highlight class="normal">}</highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Construct<sp/>a<sp/>string<sp/>from<sp/>a<sp/>number</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>std::string<sp/>NumberString(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n)<sp/>{</highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>buf[50];</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/>snprintf(buf,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(buf),<sp/></highlight><highlight class="stringliteral">&quot;%d.&quot;</highlight><highlight class="normal">,<sp/>n);</highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::string(buf);</highlight></codeline>
<codeline lineno="32"><highlight class="normal">}</highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Return<sp/>a<sp/>skewed<sp/>potentially<sp/>long<sp/>string</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>std::string<sp/>RandomSkewedString(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i,<sp/>Random*<sp/>rnd)<sp/>{</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>BigString(NumberString(i),<sp/>rnd-&gt;Skewed(17));</highlight></codeline>
<codeline lineno="37"><highlight class="normal">}</highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight></codeline>
<codeline lineno="39" refid="classleveldb_1_1log_1_1_log_test" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classleveldb_1_1log_1_1_log_test" kindref="compound">LogTest</ref><sp/>{</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">StringDest<sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="classleveldb_1_1_writable_file" kindref="compound">WritableFile</ref><sp/>{</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>contents_;</highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/><ref refid="classleveldb_1_1_status" kindref="compound">Status</ref><sp/>Close()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classleveldb_1_1_status_1a8e3720d233281c874a53c17e081f51b3" kindref="member">Status::OK</ref>();<sp/>}</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/><ref refid="classleveldb_1_1_status" kindref="compound">Status</ref><sp/>Flush()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classleveldb_1_1_status_1a8e3720d233281c874a53c17e081f51b3" kindref="member">Status::OK</ref>();<sp/>}</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/><ref refid="classleveldb_1_1_status" kindref="compound">Status</ref><sp/>Sync()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classleveldb_1_1_status_1a8e3720d233281c874a53c17e081f51b3" kindref="member">Status::OK</ref>();<sp/>}</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/><ref refid="classleveldb_1_1_status" kindref="compound">Status</ref><sp/>Append(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classleveldb_1_1_slice" kindref="compound">Slice</ref>&amp;<sp/>slice)<sp/>{</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>contents_.append(slice.<ref refid="classleveldb_1_1_slice_1aa64861043d9deee6889461bf0593cf73" kindref="member">data</ref>(),<sp/>slice.<ref refid="classleveldb_1_1_slice_1a947d3173f04f8a30553e89046daf91d5" kindref="member">size</ref>());</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classleveldb_1_1_status_1a8e3720d233281c874a53c17e081f51b3" kindref="member">Status::OK</ref>();</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">StringSource<sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="classleveldb_1_1_sequential_file" kindref="compound">SequentialFile</ref><sp/>{</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classleveldb_1_1_slice" kindref="compound">Slice</ref><sp/>contents_;</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>force_error_;</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>returned_partial_;</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/>StringSource()<sp/>:<sp/>force_error_(</highlight><highlight class="keyword">false</highlight><highlight class="normal">),<sp/>returned_partial_(</highlight><highlight class="keyword">false</highlight><highlight class="normal">)<sp/>{<sp/>}</highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/><ref refid="classleveldb_1_1_status" kindref="compound">Status</ref><sp/><ref refid="classleveldb_1_1log_1_1_log_test_1a2f5deb8b04200600ac0bc7cd3e39bd57" kindref="member">Read</ref>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>n,<sp/><ref refid="classleveldb_1_1_slice" kindref="compound">Slice</ref>*<sp/>result,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>scratch)<sp/>{</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="testharness_8h_1ac2101fb1ffd0c81c17520b82f0fcfe21" kindref="member">ASSERT_TRUE</ref>(!returned_partial_)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;must<sp/>not<sp/>Read()<sp/>after<sp/>eof/error&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(force_error_)<sp/>{</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>force_error_<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>returned_partial_<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classleveldb_1_1_status_1a755b1ee5b0029cf9ea1128f1cdff5855" kindref="member">Status::Corruption</ref>(</highlight><highlight class="stringliteral">&quot;read<sp/>error&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="69"><highlight class="normal"></highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(contents_.<ref refid="classleveldb_1_1_slice_1a947d3173f04f8a30553e89046daf91d5" kindref="member">size</ref>()<sp/>&lt;<sp/>n)<sp/>{</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>n<sp/>=<sp/>contents_.<ref refid="classleveldb_1_1_slice_1a947d3173f04f8a30553e89046daf91d5" kindref="member">size</ref>();</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>returned_partial_<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*result<sp/>=<sp/><ref refid="classleveldb_1_1_slice" kindref="compound">Slice</ref>(contents_.<ref refid="classleveldb_1_1_slice_1aa64861043d9deee6889461bf0593cf73" kindref="member">data</ref>(),<sp/>n);</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>contents_.<ref refid="classleveldb_1_1_slice_1a1be5b22958a115ebecb2b017aad2b3f6" kindref="member">remove_prefix</ref>(n);</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classleveldb_1_1_status_1a8e3720d233281c874a53c17e081f51b3" kindref="member">Status::OK</ref>();</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="78"><highlight class="normal"></highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/><ref refid="classleveldb_1_1_status" kindref="compound">Status</ref><sp/>Skip(<ref refid="stdint_8h_1aaa5d1cd013383c889537491c3cfd9aad" kindref="member">uint64_t</ref><sp/>n)<sp/>{</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(n<sp/>&gt;<sp/>contents_.<ref refid="classleveldb_1_1_slice_1a947d3173f04f8a30553e89046daf91d5" kindref="member">size</ref>())<sp/>{</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>contents_.<ref refid="classleveldb_1_1_slice_1ab9b6e340e8a483a5cf713f6be17709e3" kindref="member">clear</ref>();</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classleveldb_1_1_status_1a9e5beb5b2e758f041e0c012426e7b1b8" kindref="member">Status::NotFound</ref>(</highlight><highlight class="stringliteral">&quot;in-memory<sp/>file<sp/>skipepd<sp/>past<sp/>end&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="84"><highlight class="normal"></highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>contents_.<ref refid="classleveldb_1_1_slice_1a1be5b22958a115ebecb2b017aad2b3f6" kindref="member">remove_prefix</ref>(n);</highlight></codeline>
<codeline lineno="86"><highlight class="normal"></highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classleveldb_1_1_status_1a8e3720d233281c874a53c17e081f51b3" kindref="member">Status::OK</ref>();</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="90"><highlight class="normal"></highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">ReportCollector<sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="classleveldb_1_1log_1_1_reader_1_1_reporter" kindref="compound">Reader::Reporter</ref><sp/>{</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>dropped_bytes_;</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/><ref refid="db__bench_8cc_1a4136f421e413f118b2b0da52e128ba5b" kindref="member">message_</ref>;</highlight></codeline>
<codeline lineno="95"><highlight class="normal"></highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/>ReportCollector()<sp/>:<sp/>dropped_bytes_(0)<sp/>{<sp/>}</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Corruption(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>bytes,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classleveldb_1_1_status" kindref="compound">Status</ref>&amp;<sp/>status)<sp/>{</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>dropped_bytes_<sp/>+=<sp/>bytes;</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>message_.append(status.<ref refid="classleveldb_1_1_status_1aa8b56d8fe2cd1873778de5d1e5407866" kindref="member">ToString</ref>());</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="102"><highlight class="normal"></highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/>StringDest<sp/>dest_;</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/>StringSource<sp/>source_;</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/>ReportCollector<sp/>report_;</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>reading_;</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><ref refid="classleveldb_1_1log_1_1_writer" kindref="compound">Writer</ref><sp/>writer_;</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><ref refid="classleveldb_1_1log_1_1_reader" kindref="compound">Reader</ref><sp/>reader_;</highlight></codeline>
<codeline lineno="109"><highlight class="normal"></highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Record<sp/>metadata<sp/>for<sp/>testing<sp/>initial<sp/>offset<sp/>functionality</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>initial_offset_record_sizes_[];</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="stdint_8h_1aaa5d1cd013383c889537491c3cfd9aad" kindref="member">uint64_t</ref><sp/>initial_offset_last_record_offsets_[];</highlight></codeline>
<codeline lineno="113"><highlight class="normal"></highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="115" refid="classleveldb_1_1log_1_1_log_test_1a71c5f0a5a098ca82a72e7065141a1d06" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="classleveldb_1_1log_1_1_log_test_1a71c5f0a5a098ca82a72e7065141a1d06" kindref="member">LogTest</ref>()<sp/>:<sp/>reading_(false),</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>writer_(&amp;dest_),</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>reader_(&amp;source_,<sp/>&amp;report_,<sp/>true</highlight><highlight class="comment">/*checksum*/</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0</highlight><highlight class="comment">/*initial_offset*/</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="120"><highlight class="normal"></highlight></codeline>
<codeline lineno="121" refid="classleveldb_1_1log_1_1_log_test_1ab8af1c9335e7fbb42e06a6c01de2d0fc" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classleveldb_1_1log_1_1_log_test_1ab8af1c9335e7fbb42e06a6c01de2d0fc" kindref="member">Write</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>msg)<sp/>{</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="testharness_8h_1ac2101fb1ffd0c81c17520b82f0fcfe21" kindref="member">ASSERT_TRUE</ref>(!reading_)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Write()<sp/>after<sp/>starting<sp/>to<sp/>read&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/>writer_.<ref refid="classleveldb_1_1log_1_1_writer_1acb4abda5a5348ac1771657ff01bf2fad" kindref="member">AddRecord</ref>(<ref refid="classleveldb_1_1_slice" kindref="compound">Slice</ref>(msg));</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="125"><highlight class="normal"></highlight></codeline>
<codeline lineno="126" refid="classleveldb_1_1log_1_1_log_test_1ad14bacbd6c103ac692bbb019ce9071a3" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="classleveldb_1_1log_1_1_log_test_1ad14bacbd6c103ac692bbb019ce9071a3" kindref="member">WrittenBytes</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>dest_.contents_.size();</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="129"><highlight class="normal"></highlight></codeline>
<codeline lineno="130" refid="classleveldb_1_1log_1_1_log_test_1a2f5deb8b04200600ac0bc7cd3e39bd57" refkind="member"><highlight class="normal"><sp/><sp/>std::string<sp/><ref refid="classleveldb_1_1log_1_1_log_test_1a2f5deb8b04200600ac0bc7cd3e39bd57" kindref="member">Read</ref>()<sp/>{</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!reading_)<sp/>{</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>reading_<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>source_.contents_<sp/>=<sp/><ref refid="classleveldb_1_1_slice" kindref="compound">Slice</ref>(dest_.contents_);</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>scratch;</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classleveldb_1_1_slice" kindref="compound">Slice</ref><sp/>record;</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(reader_.<ref refid="classleveldb_1_1log_1_1_reader_1a84059598c9367cb677a9d70d77993282" kindref="member">ReadRecord</ref>(&amp;record,<sp/>&amp;scratch))<sp/>{</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>record.<ref refid="classleveldb_1_1_slice_1a2cdd9fb649105033fde510afc9416732" kindref="member">ToString</ref>();</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;EOF&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="143"><highlight class="normal"></highlight></codeline>
<codeline lineno="144" refid="classleveldb_1_1log_1_1_log_test_1aee52d93f17cf3e23b2ae11bd9a5f5652" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classleveldb_1_1log_1_1_log_test_1aee52d93f17cf3e23b2ae11bd9a5f5652" kindref="member">IncrementByte</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>offset,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>delta)<sp/>{</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/>dest_.contents_[offset]<sp/>+=<sp/>delta;</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="147"><highlight class="normal"></highlight></codeline>
<codeline lineno="148" refid="classleveldb_1_1log_1_1_log_test_1a2f3545c3cd495bb60b4322fa045b897c" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classleveldb_1_1log_1_1_log_test_1a2f3545c3cd495bb60b4322fa045b897c" kindref="member">SetByte</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>offset,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>new_byte)<sp/>{</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/>dest_.contents_[offset]<sp/>=<sp/>new_byte;</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="151"><highlight class="normal"></highlight></codeline>
<codeline lineno="152" refid="classleveldb_1_1log_1_1_log_test_1a2f19ddba7e239badc63920c6fb496823" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classleveldb_1_1log_1_1_log_test_1a2f19ddba7e239badc63920c6fb496823" kindref="member">ShrinkSize</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>bytes)<sp/>{</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/>dest_.contents_.resize(dest_.contents_.size()<sp/>-<sp/>bytes);</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="155"><highlight class="normal"></highlight></codeline>
<codeline lineno="156" refid="classleveldb_1_1log_1_1_log_test_1ac966525faded349590f1a1ae738844cf" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classleveldb_1_1log_1_1_log_test_1ac966525faded349590f1a1ae738844cf" kindref="member">FixChecksum</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>header_offset,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>len)<sp/>{</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Compute<sp/>crc<sp/>of<sp/>type/len/data</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="stdint_8h_1a435d1572bf3f880d55459d9805097f62" kindref="member">uint32_t</ref><sp/>crc<sp/>=<sp/><ref refid="namespaceleveldb_1_1crc32c_1ac004d1e3d8c75b033c162e5ae0a5cc2c" kindref="member">crc32c::Value</ref>(&amp;dest_.contents_[header_offset+6],<sp/>1<sp/>+<sp/>len);</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/>crc<sp/>=<sp/><ref refid="namespaceleveldb_1_1crc32c_1a3790e1e939714a29609e46383aafd6cf" kindref="member">crc32c::Mask</ref>(crc);</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceleveldb_1a265d1eea2e5d8e42cf86372ed4904886" kindref="member">EncodeFixed32</ref>(&amp;dest_.contents_[header_offset],<sp/>crc);</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="162"><highlight class="normal"></highlight></codeline>
<codeline lineno="163" refid="classleveldb_1_1log_1_1_log_test_1a817eeeba2beef1d81dac83badb9f1049" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classleveldb_1_1log_1_1_log_test_1a817eeeba2beef1d81dac83badb9f1049" kindref="member">ForceError</ref>()<sp/>{</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/>source_.force_error_<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="166"><highlight class="normal"></highlight></codeline>
<codeline lineno="167" refid="classleveldb_1_1log_1_1_log_test_1afe6bc4454267707f11cd0441aeca3faf" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="classleveldb_1_1log_1_1_log_test_1afe6bc4454267707f11cd0441aeca3faf" kindref="member">DroppedBytes</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>report_.dropped_bytes_;</highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="170"><highlight class="normal"></highlight></codeline>
<codeline lineno="171" refid="classleveldb_1_1log_1_1_log_test_1af7c61c3c2dfb9ac02a1e7b9f541fba6a" refkind="member"><highlight class="normal"><sp/><sp/>std::string<sp/><ref refid="classleveldb_1_1log_1_1_log_test_1af7c61c3c2dfb9ac02a1e7b9f541fba6a" kindref="member">ReportMessage</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>report_.message_;</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="174"><highlight class="normal"></highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Returns<sp/>OK<sp/>iff<sp/>recorded<sp/>error<sp/>message<sp/>contains<sp/>&quot;msg&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="176" refid="classleveldb_1_1log_1_1_log_test_1a7f03fc33e830faea8090dd1aac148219" refkind="member"><highlight class="normal"><sp/><sp/>std::string<sp/><ref refid="classleveldb_1_1log_1_1_log_test_1a7f03fc33e830faea8090dd1aac148219" kindref="member">MatchError</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>msg)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(report_.message_.find(msg)<sp/>==<sp/>std::string::npos)<sp/>{</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>report_.message_;</highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;OK&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="183"><highlight class="normal"></highlight></codeline>
<codeline lineno="184" refid="classleveldb_1_1log_1_1_log_test_1af0053e30c5ccaa5e2e10d595a4f48565" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classleveldb_1_1log_1_1_log_test_1af0053e30c5ccaa5e2e10d595a4f48565" kindref="member">WriteInitialOffsetLog</ref>()<sp/>{</highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>4;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>record(initial_offset_record_sizes_[i],</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>static_cast&lt;char&gt;(</highlight><highlight class="charliteral">&apos;a&apos;</highlight><highlight class="normal"><sp/>+<sp/>i));</highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classleveldb_1_1log_1_1_log_test_1ab8af1c9335e7fbb42e06a6c01de2d0fc" kindref="member">Write</ref>(record);</highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="191"><highlight class="normal"></highlight></codeline>
<codeline lineno="192" refid="classleveldb_1_1log_1_1_log_test_1a2bf9cdf3b3f722c300f65a7752c0e101" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classleveldb_1_1log_1_1_log_test_1a2bf9cdf3b3f722c300f65a7752c0e101" kindref="member">CheckOffsetPastEndReturnsNoRecords</ref>(<ref refid="stdint_8h_1aaa5d1cd013383c889537491c3cfd9aad" kindref="member">uint64_t</ref><sp/>offset_past_end)<sp/>{</highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classleveldb_1_1log_1_1_log_test_1af0053e30c5ccaa5e2e10d595a4f48565" kindref="member">WriteInitialOffsetLog</ref>();</highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/><sp/><sp/>reading_<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/><sp/><sp/>source_.contents_<sp/>=<sp/><ref refid="classleveldb_1_1_slice" kindref="compound">Slice</ref>(dest_.contents_);</highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classleveldb_1_1log_1_1_reader" kindref="compound">Reader</ref>*<sp/>offset_reader<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="classleveldb_1_1log_1_1_reader" kindref="compound">Reader</ref>(&amp;source_,<sp/>&amp;report_,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="comment">/*checksum*/</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classleveldb_1_1log_1_1_log_test_1ad14bacbd6c103ac692bbb019ce9071a3" kindref="member">WrittenBytes</ref>()<sp/>+<sp/>offset_past_end);</highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classleveldb_1_1_slice" kindref="compound">Slice</ref><sp/>record;</highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>scratch;</highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="testharness_8h_1ac2101fb1ffd0c81c17520b82f0fcfe21" kindref="member">ASSERT_TRUE</ref>(!offset_reader-&gt;<ref refid="classleveldb_1_1log_1_1_reader_1a84059598c9367cb677a9d70d77993282" kindref="member">ReadRecord</ref>(&amp;record,<sp/>&amp;scratch));</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>offset_reader;</highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="203"><highlight class="normal"></highlight></codeline>
<codeline lineno="204" refid="classleveldb_1_1log_1_1_log_test_1ab9ca8c2014e78611d66d884f7b46e4ff" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classleveldb_1_1log_1_1_log_test_1ab9ca8c2014e78611d66d884f7b46e4ff" kindref="member">CheckInitialOffsetRecord</ref>(<ref refid="stdint_8h_1aaa5d1cd013383c889537491c3cfd9aad" kindref="member">uint64_t</ref><sp/>initial_offset,</highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>expected_record_offset)<sp/>{</highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classleveldb_1_1log_1_1_log_test_1af0053e30c5ccaa5e2e10d595a4f48565" kindref="member">WriteInitialOffsetLog</ref>();</highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/><sp/><sp/>reading_<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/><sp/><sp/>source_.contents_<sp/>=<sp/><ref refid="classleveldb_1_1_slice" kindref="compound">Slice</ref>(dest_.contents_);</highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classleveldb_1_1log_1_1_reader" kindref="compound">Reader</ref>*<sp/>offset_reader<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="classleveldb_1_1log_1_1_reader" kindref="compound">Reader</ref>(&amp;source_,<sp/>&amp;report_,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="comment">/*checksum*/</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>initial_offset);</highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classleveldb_1_1_slice" kindref="compound">Slice</ref><sp/>record;</highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>scratch;</highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="testharness_8h_1ac2101fb1ffd0c81c17520b82f0fcfe21" kindref="member">ASSERT_TRUE</ref>(offset_reader-&gt;<ref refid="classleveldb_1_1log_1_1_reader_1a84059598c9367cb677a9d70d77993282" kindref="member">ReadRecord</ref>(&amp;record,<sp/>&amp;scratch));</highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="testharness_8h_1a9cc34fd87cb865c77439a5d39b3b111b" kindref="member">ASSERT_EQ</ref>(initial_offset_record_sizes_[expected_record_offset],</highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>record.<ref refid="classleveldb_1_1_slice_1a947d3173f04f8a30553e89046daf91d5" kindref="member">size</ref>());</highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="testharness_8h_1a9cc34fd87cb865c77439a5d39b3b111b" kindref="member">ASSERT_EQ</ref>(initial_offset_last_record_offsets_[expected_record_offset],</highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>offset_reader-&gt;<ref refid="classleveldb_1_1log_1_1_reader_1a358c5545069d86a61948ac0a021aa7f6" kindref="member">LastRecordOffset</ref>());</highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="testharness_8h_1a9cc34fd87cb865c77439a5d39b3b111b" kindref="member">ASSERT_EQ</ref>((</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">)(</highlight><highlight class="charliteral">&apos;a&apos;</highlight><highlight class="normal"><sp/>+<sp/>expected_record_offset),<sp/>record.<ref refid="classleveldb_1_1_slice_1aa64861043d9deee6889461bf0593cf73" kindref="member">data</ref>()[0]);</highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>offset_reader;</highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="221"><highlight class="normal"></highlight></codeline>
<codeline lineno="222"><highlight class="normal">};</highlight></codeline>
<codeline lineno="223"><highlight class="normal"></highlight></codeline>
<codeline lineno="224"><highlight class="normal"></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>LogTest::initial_offset_record_sizes_[]<sp/>=</highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/><sp/><sp/>{10000,<sp/><sp/></highlight><highlight class="comment">//<sp/>Two<sp/>sizable<sp/>records<sp/>in<sp/>first<sp/>block</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>10000,</highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>2<sp/>*<sp/>log::kBlockSize<sp/>-<sp/>1000,<sp/><sp/></highlight><highlight class="comment">//<sp/>Span<sp/>three<sp/>blocks</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>1};</highlight></codeline>
<codeline lineno="229"><highlight class="normal"></highlight></codeline>
<codeline lineno="230"><highlight class="normal"><ref refid="stdint_8h_1aaa5d1cd013383c889537491c3cfd9aad" kindref="member">uint64_t</ref><sp/>LogTest::initial_offset_last_record_offsets_[]<sp/>=</highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/><sp/><sp/>{0,</highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>kHeaderSize<sp/>+<sp/>10000,</highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>2<sp/>*<sp/>(kHeaderSize<sp/>+<sp/>10000),</highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>2<sp/>*<sp/>(kHeaderSize<sp/>+<sp/>10000)<sp/>+</highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(2<sp/>*<sp/>log::kBlockSize<sp/>-<sp/>1000)<sp/>+<sp/>3<sp/>*<sp/>kHeaderSize};</highlight></codeline>
<codeline lineno="236"><highlight class="normal"></highlight></codeline>
<codeline lineno="237"><highlight class="normal"></highlight></codeline>
<codeline lineno="238" refid="namespaceleveldb_1_1log_1ab8a02b9419477420eca51cfd47d5f172" refkind="member"><highlight class="normal"><ref refid="namespaceleveldb_1_1log_1ab8a02b9419477420eca51cfd47d5f172" kindref="member">TEST</ref>(<ref refid="classleveldb_1_1log_1_1_log_test" kindref="compound">LogTest</ref>,<sp/>Empty)<sp/>{</highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/><ref refid="testharness_8h_1a9cc34fd87cb865c77439a5d39b3b111b" kindref="member">ASSERT_EQ</ref>(</highlight><highlight class="stringliteral">&quot;EOF&quot;</highlight><highlight class="normal">,<sp/>Read());</highlight></codeline>
<codeline lineno="240"><highlight class="normal">}</highlight></codeline>
<codeline lineno="241"><highlight class="normal"></highlight></codeline>
<codeline lineno="242" refid="namespaceleveldb_1_1log_1aabca07adceffd87baf38b81665d92bb4" refkind="member"><highlight class="normal"><ref refid="namespaceleveldb_1_1log_1ab8a02b9419477420eca51cfd47d5f172" kindref="member">TEST</ref>(<ref refid="classleveldb_1_1log_1_1_log_test" kindref="compound">LogTest</ref>,<sp/>ReadWrite)<sp/>{</highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/>Write(</highlight><highlight class="stringliteral">&quot;foo&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/>Write(</highlight><highlight class="stringliteral">&quot;bar&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/>Write(</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/>Write(</highlight><highlight class="stringliteral">&quot;xxxx&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/><ref refid="testharness_8h_1a9cc34fd87cb865c77439a5d39b3b111b" kindref="member">ASSERT_EQ</ref>(</highlight><highlight class="stringliteral">&quot;foo&quot;</highlight><highlight class="normal">,<sp/>Read());</highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/><ref refid="testharness_8h_1a9cc34fd87cb865c77439a5d39b3b111b" kindref="member">ASSERT_EQ</ref>(</highlight><highlight class="stringliteral">&quot;bar&quot;</highlight><highlight class="normal">,<sp/>Read());</highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/><ref refid="testharness_8h_1a9cc34fd87cb865c77439a5d39b3b111b" kindref="member">ASSERT_EQ</ref>(</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">,<sp/>Read());</highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/><ref refid="testharness_8h_1a9cc34fd87cb865c77439a5d39b3b111b" kindref="member">ASSERT_EQ</ref>(</highlight><highlight class="stringliteral">&quot;xxxx&quot;</highlight><highlight class="normal">,<sp/>Read());</highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/><ref refid="testharness_8h_1a9cc34fd87cb865c77439a5d39b3b111b" kindref="member">ASSERT_EQ</ref>(</highlight><highlight class="stringliteral">&quot;EOF&quot;</highlight><highlight class="normal">,<sp/>Read());</highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/><ref refid="testharness_8h_1a9cc34fd87cb865c77439a5d39b3b111b" kindref="member">ASSERT_EQ</ref>(</highlight><highlight class="stringliteral">&quot;EOF&quot;</highlight><highlight class="normal">,<sp/>Read());<sp/><sp/></highlight><highlight class="comment">//<sp/>Make<sp/>sure<sp/>reads<sp/>at<sp/>eof<sp/>work</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="253"><highlight class="normal">}</highlight></codeline>
<codeline lineno="254"><highlight class="normal"></highlight></codeline>
<codeline lineno="255" refid="namespaceleveldb_1_1log_1a60249ea325a8656fdc31898d7c5f4ad9" refkind="member"><highlight class="normal"><ref refid="namespaceleveldb_1_1log_1ab8a02b9419477420eca51cfd47d5f172" kindref="member">TEST</ref>(<ref refid="classleveldb_1_1log_1_1_log_test" kindref="compound">LogTest</ref>,<sp/>ManyBlocks)<sp/>{</highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>100000;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/><sp/><sp/>Write(NumberString(i));</highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>100000;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="testharness_8h_1a9cc34fd87cb865c77439a5d39b3b111b" kindref="member">ASSERT_EQ</ref>(NumberString(i),<sp/>Read());</highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/><ref refid="testharness_8h_1a9cc34fd87cb865c77439a5d39b3b111b" kindref="member">ASSERT_EQ</ref>(</highlight><highlight class="stringliteral">&quot;EOF&quot;</highlight><highlight class="normal">,<sp/>Read());</highlight></codeline>
<codeline lineno="263"><highlight class="normal">}</highlight></codeline>
<codeline lineno="264"><highlight class="normal"></highlight></codeline>
<codeline lineno="265" refid="namespaceleveldb_1_1log_1ac15e5779ff43d83522727b8cc44882a2" refkind="member"><highlight class="normal"><ref refid="namespaceleveldb_1_1log_1ab8a02b9419477420eca51cfd47d5f172" kindref="member">TEST</ref>(<ref refid="classleveldb_1_1log_1_1_log_test" kindref="compound">LogTest</ref>,<sp/>Fragmentation)<sp/>{</highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/>Write(</highlight><highlight class="stringliteral">&quot;small&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/>Write(BigString(</highlight><highlight class="stringliteral">&quot;medium&quot;</highlight><highlight class="normal">,<sp/>50000));</highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/>Write(BigString(</highlight><highlight class="stringliteral">&quot;large&quot;</highlight><highlight class="normal">,<sp/>100000));</highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/><ref refid="testharness_8h_1a9cc34fd87cb865c77439a5d39b3b111b" kindref="member">ASSERT_EQ</ref>(</highlight><highlight class="stringliteral">&quot;small&quot;</highlight><highlight class="normal">,<sp/>Read());</highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/><ref refid="testharness_8h_1a9cc34fd87cb865c77439a5d39b3b111b" kindref="member">ASSERT_EQ</ref>(BigString(</highlight><highlight class="stringliteral">&quot;medium&quot;</highlight><highlight class="normal">,<sp/>50000),<sp/>Read());</highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/><ref refid="testharness_8h_1a9cc34fd87cb865c77439a5d39b3b111b" kindref="member">ASSERT_EQ</ref>(BigString(</highlight><highlight class="stringliteral">&quot;large&quot;</highlight><highlight class="normal">,<sp/>100000),<sp/>Read());</highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/><ref refid="testharness_8h_1a9cc34fd87cb865c77439a5d39b3b111b" kindref="member">ASSERT_EQ</ref>(</highlight><highlight class="stringliteral">&quot;EOF&quot;</highlight><highlight class="normal">,<sp/>Read());</highlight></codeline>
<codeline lineno="273"><highlight class="normal">}</highlight></codeline>
<codeline lineno="274"><highlight class="normal"></highlight></codeline>
<codeline lineno="275" refid="namespaceleveldb_1_1log_1a9721de928c01ac50b5770b8b4cbb98e1" refkind="member"><highlight class="normal"><ref refid="namespaceleveldb_1_1log_1ab8a02b9419477420eca51cfd47d5f172" kindref="member">TEST</ref>(<ref refid="classleveldb_1_1log_1_1_log_test" kindref="compound">LogTest</ref>,<sp/>MarginalTrailer)<sp/>{</highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Make<sp/>a<sp/>trailer<sp/>that<sp/>is<sp/>exactly<sp/>the<sp/>same<sp/>length<sp/>as<sp/>an<sp/>empty<sp/>record.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n<sp/>=<sp/>kBlockSize<sp/>-<sp/>2*kHeaderSize;</highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/>Write(BigString(</highlight><highlight class="stringliteral">&quot;foo&quot;</highlight><highlight class="normal">,<sp/>n));</highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/><ref refid="testharness_8h_1a9cc34fd87cb865c77439a5d39b3b111b" kindref="member">ASSERT_EQ</ref>(kBlockSize<sp/>-<sp/>kHeaderSize,<sp/>WrittenBytes());</highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/>Write(</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/>Write(</highlight><highlight class="stringliteral">&quot;bar&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/><ref refid="testharness_8h_1a9cc34fd87cb865c77439a5d39b3b111b" kindref="member">ASSERT_EQ</ref>(BigString(</highlight><highlight class="stringliteral">&quot;foo&quot;</highlight><highlight class="normal">,<sp/>n),<sp/>Read());</highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/><ref refid="testharness_8h_1a9cc34fd87cb865c77439a5d39b3b111b" kindref="member">ASSERT_EQ</ref>(</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">,<sp/>Read());</highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/><ref refid="testharness_8h_1a9cc34fd87cb865c77439a5d39b3b111b" kindref="member">ASSERT_EQ</ref>(</highlight><highlight class="stringliteral">&quot;bar&quot;</highlight><highlight class="normal">,<sp/>Read());</highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/><ref refid="testharness_8h_1a9cc34fd87cb865c77439a5d39b3b111b" kindref="member">ASSERT_EQ</ref>(</highlight><highlight class="stringliteral">&quot;EOF&quot;</highlight><highlight class="normal">,<sp/>Read());</highlight></codeline>
<codeline lineno="286"><highlight class="normal">}</highlight></codeline>
<codeline lineno="287"><highlight class="normal"></highlight></codeline>
<codeline lineno="288" refid="namespaceleveldb_1_1log_1aad9c4a11c674359115f4d16c97e33ad1" refkind="member"><highlight class="normal"><ref refid="namespaceleveldb_1_1log_1ab8a02b9419477420eca51cfd47d5f172" kindref="member">TEST</ref>(<ref refid="classleveldb_1_1log_1_1_log_test" kindref="compound">LogTest</ref>,<sp/>MarginalTrailer2)<sp/>{</highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Make<sp/>a<sp/>trailer<sp/>that<sp/>is<sp/>exactly<sp/>the<sp/>same<sp/>length<sp/>as<sp/>an<sp/>empty<sp/>record.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n<sp/>=<sp/>kBlockSize<sp/>-<sp/>2*kHeaderSize;</highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/>Write(BigString(</highlight><highlight class="stringliteral">&quot;foo&quot;</highlight><highlight class="normal">,<sp/>n));</highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/><ref refid="testharness_8h_1a9cc34fd87cb865c77439a5d39b3b111b" kindref="member">ASSERT_EQ</ref>(kBlockSize<sp/>-<sp/>kHeaderSize,<sp/>WrittenBytes());</highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/>Write(</highlight><highlight class="stringliteral">&quot;bar&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/><ref refid="testharness_8h_1a9cc34fd87cb865c77439a5d39b3b111b" kindref="member">ASSERT_EQ</ref>(BigString(</highlight><highlight class="stringliteral">&quot;foo&quot;</highlight><highlight class="normal">,<sp/>n),<sp/>Read());</highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/><ref refid="testharness_8h_1a9cc34fd87cb865c77439a5d39b3b111b" kindref="member">ASSERT_EQ</ref>(</highlight><highlight class="stringliteral">&quot;bar&quot;</highlight><highlight class="normal">,<sp/>Read());</highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/><ref refid="testharness_8h_1a9cc34fd87cb865c77439a5d39b3b111b" kindref="member">ASSERT_EQ</ref>(</highlight><highlight class="stringliteral">&quot;EOF&quot;</highlight><highlight class="normal">,<sp/>Read());</highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/><ref refid="testharness_8h_1a9cc34fd87cb865c77439a5d39b3b111b" kindref="member">ASSERT_EQ</ref>(0,<sp/>DroppedBytes());</highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/><ref refid="testharness_8h_1a9cc34fd87cb865c77439a5d39b3b111b" kindref="member">ASSERT_EQ</ref>(</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">,<sp/>ReportMessage());</highlight></codeline>
<codeline lineno="299"><highlight class="normal">}</highlight></codeline>
<codeline lineno="300"><highlight class="normal"></highlight></codeline>
<codeline lineno="301" refid="namespaceleveldb_1_1log_1a1a1972ff9493353cfb4546cacd33ddb7" refkind="member"><highlight class="normal"><ref refid="namespaceleveldb_1_1log_1ab8a02b9419477420eca51cfd47d5f172" kindref="member">TEST</ref>(<ref refid="classleveldb_1_1log_1_1_log_test" kindref="compound">LogTest</ref>,<sp/>ShortTrailer)<sp/>{</highlight></codeline>
<codeline lineno="302"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n<sp/>=<sp/>kBlockSize<sp/>-<sp/>2*kHeaderSize<sp/>+<sp/>4;</highlight></codeline>
<codeline lineno="303"><highlight class="normal"><sp/><sp/>Write(BigString(</highlight><highlight class="stringliteral">&quot;foo&quot;</highlight><highlight class="normal">,<sp/>n));</highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/><ref refid="testharness_8h_1a9cc34fd87cb865c77439a5d39b3b111b" kindref="member">ASSERT_EQ</ref>(kBlockSize<sp/>-<sp/>kHeaderSize<sp/>+<sp/>4,<sp/>WrittenBytes());</highlight></codeline>
<codeline lineno="305"><highlight class="normal"><sp/><sp/>Write(</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="306"><highlight class="normal"><sp/><sp/>Write(</highlight><highlight class="stringliteral">&quot;bar&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/><sp/><ref refid="testharness_8h_1a9cc34fd87cb865c77439a5d39b3b111b" kindref="member">ASSERT_EQ</ref>(BigString(</highlight><highlight class="stringliteral">&quot;foo&quot;</highlight><highlight class="normal">,<sp/>n),<sp/>Read());</highlight></codeline>
<codeline lineno="308"><highlight class="normal"><sp/><sp/><ref refid="testharness_8h_1a9cc34fd87cb865c77439a5d39b3b111b" kindref="member">ASSERT_EQ</ref>(</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">,<sp/>Read());</highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/><ref refid="testharness_8h_1a9cc34fd87cb865c77439a5d39b3b111b" kindref="member">ASSERT_EQ</ref>(</highlight><highlight class="stringliteral">&quot;bar&quot;</highlight><highlight class="normal">,<sp/>Read());</highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/><ref refid="testharness_8h_1a9cc34fd87cb865c77439a5d39b3b111b" kindref="member">ASSERT_EQ</ref>(</highlight><highlight class="stringliteral">&quot;EOF&quot;</highlight><highlight class="normal">,<sp/>Read());</highlight></codeline>
<codeline lineno="311"><highlight class="normal">}</highlight></codeline>
<codeline lineno="312"><highlight class="normal"></highlight></codeline>
<codeline lineno="313" refid="namespaceleveldb_1_1log_1a55d554f8c576d9d4d99e35d3fe0c169f" refkind="member"><highlight class="normal"><ref refid="namespaceleveldb_1_1log_1ab8a02b9419477420eca51cfd47d5f172" kindref="member">TEST</ref>(<ref refid="classleveldb_1_1log_1_1_log_test" kindref="compound">LogTest</ref>,<sp/>AlignedEof)<sp/>{</highlight></codeline>
<codeline lineno="314"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n<sp/>=<sp/>kBlockSize<sp/>-<sp/>2*kHeaderSize<sp/>+<sp/>4;</highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/>Write(BigString(</highlight><highlight class="stringliteral">&quot;foo&quot;</highlight><highlight class="normal">,<sp/>n));</highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/><ref refid="testharness_8h_1a9cc34fd87cb865c77439a5d39b3b111b" kindref="member">ASSERT_EQ</ref>(kBlockSize<sp/>-<sp/>kHeaderSize<sp/>+<sp/>4,<sp/>WrittenBytes());</highlight></codeline>
<codeline lineno="317"><highlight class="normal"><sp/><sp/><ref refid="testharness_8h_1a9cc34fd87cb865c77439a5d39b3b111b" kindref="member">ASSERT_EQ</ref>(BigString(</highlight><highlight class="stringliteral">&quot;foo&quot;</highlight><highlight class="normal">,<sp/>n),<sp/>Read());</highlight></codeline>
<codeline lineno="318"><highlight class="normal"><sp/><sp/><ref refid="testharness_8h_1a9cc34fd87cb865c77439a5d39b3b111b" kindref="member">ASSERT_EQ</ref>(</highlight><highlight class="stringliteral">&quot;EOF&quot;</highlight><highlight class="normal">,<sp/>Read());</highlight></codeline>
<codeline lineno="319"><highlight class="normal">}</highlight></codeline>
<codeline lineno="320"><highlight class="normal"></highlight></codeline>
<codeline lineno="321" refid="namespaceleveldb_1_1log_1a52d33034be964c0d0e40efdf4b423452" refkind="member"><highlight class="normal"><ref refid="namespaceleveldb_1_1log_1ab8a02b9419477420eca51cfd47d5f172" kindref="member">TEST</ref>(<ref refid="classleveldb_1_1log_1_1_log_test" kindref="compound">LogTest</ref>,<sp/>RandomRead)<sp/>{</highlight></codeline>
<codeline lineno="322"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>N<sp/>=<sp/>500;</highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/><ref refid="classleveldb_1_1_random" kindref="compound">Random</ref><sp/>write_rnd(301);</highlight></codeline>
<codeline lineno="324"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>N;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="325"><highlight class="normal"><sp/><sp/><sp/><sp/>Write(RandomSkewedString(i,<sp/>&amp;write_rnd));</highlight></codeline>
<codeline lineno="326"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="327"><highlight class="normal"><sp/><sp/><ref refid="classleveldb_1_1_random" kindref="compound">Random</ref><sp/>read_rnd(301);</highlight></codeline>
<codeline lineno="328"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>N;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="329"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="testharness_8h_1a9cc34fd87cb865c77439a5d39b3b111b" kindref="member">ASSERT_EQ</ref>(RandomSkewedString(i,<sp/>&amp;read_rnd),<sp/>Read());</highlight></codeline>
<codeline lineno="330"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="331"><highlight class="normal"><sp/><sp/><ref refid="testharness_8h_1a9cc34fd87cb865c77439a5d39b3b111b" kindref="member">ASSERT_EQ</ref>(</highlight><highlight class="stringliteral">&quot;EOF&quot;</highlight><highlight class="normal">,<sp/>Read());</highlight></codeline>
<codeline lineno="332"><highlight class="normal">}</highlight></codeline>
<codeline lineno="333"><highlight class="normal"></highlight></codeline>
<codeline lineno="334"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Tests<sp/>of<sp/>all<sp/>the<sp/>error<sp/>paths<sp/>in<sp/>log_reader.cc<sp/>follow:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="335"><highlight class="normal"></highlight></codeline>
<codeline lineno="336" refid="namespaceleveldb_1_1log_1a47ffd653cde9cb9bc00c0a9914da48fd" refkind="member"><highlight class="normal"><ref refid="namespaceleveldb_1_1log_1ab8a02b9419477420eca51cfd47d5f172" kindref="member">TEST</ref>(<ref refid="classleveldb_1_1log_1_1_log_test" kindref="compound">LogTest</ref>,<sp/>ReadError)<sp/>{</highlight></codeline>
<codeline lineno="337"><highlight class="normal"><sp/><sp/>Write(</highlight><highlight class="stringliteral">&quot;foo&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="338"><highlight class="normal"><sp/><sp/>ForceError();</highlight></codeline>
<codeline lineno="339"><highlight class="normal"><sp/><sp/><ref refid="testharness_8h_1a9cc34fd87cb865c77439a5d39b3b111b" kindref="member">ASSERT_EQ</ref>(</highlight><highlight class="stringliteral">&quot;EOF&quot;</highlight><highlight class="normal">,<sp/>Read());</highlight></codeline>
<codeline lineno="340"><highlight class="normal"><sp/><sp/><ref refid="testharness_8h_1a9cc34fd87cb865c77439a5d39b3b111b" kindref="member">ASSERT_EQ</ref>(kBlockSize,<sp/>DroppedBytes());</highlight></codeline>
<codeline lineno="341"><highlight class="normal"><sp/><sp/><ref refid="testharness_8h_1a9cc34fd87cb865c77439a5d39b3b111b" kindref="member">ASSERT_EQ</ref>(</highlight><highlight class="stringliteral">&quot;OK&quot;</highlight><highlight class="normal">,<sp/>MatchError(</highlight><highlight class="stringliteral">&quot;read<sp/>error&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="342"><highlight class="normal">}</highlight></codeline>
<codeline lineno="343"><highlight class="normal"></highlight></codeline>
<codeline lineno="344" refid="namespaceleveldb_1_1log_1a4fd335e6dbc3a27ea10e985387f69d6d" refkind="member"><highlight class="normal"><ref refid="namespaceleveldb_1_1log_1ab8a02b9419477420eca51cfd47d5f172" kindref="member">TEST</ref>(<ref refid="classleveldb_1_1log_1_1_log_test" kindref="compound">LogTest</ref>,<sp/>BadRecordType)<sp/>{</highlight></codeline>
<codeline lineno="345"><highlight class="normal"><sp/><sp/>Write(</highlight><highlight class="stringliteral">&quot;foo&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="346"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Type<sp/>is<sp/>stored<sp/>in<sp/>header[6]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="347"><highlight class="normal"><sp/><sp/>IncrementByte(6,<sp/>100);</highlight></codeline>
<codeline lineno="348"><highlight class="normal"><sp/><sp/>FixChecksum(0,<sp/>3);</highlight></codeline>
<codeline lineno="349"><highlight class="normal"><sp/><sp/><ref refid="testharness_8h_1a9cc34fd87cb865c77439a5d39b3b111b" kindref="member">ASSERT_EQ</ref>(</highlight><highlight class="stringliteral">&quot;EOF&quot;</highlight><highlight class="normal">,<sp/>Read());</highlight></codeline>
<codeline lineno="350"><highlight class="normal"><sp/><sp/><ref refid="testharness_8h_1a9cc34fd87cb865c77439a5d39b3b111b" kindref="member">ASSERT_EQ</ref>(3,<sp/>DroppedBytes());</highlight></codeline>
<codeline lineno="351"><highlight class="normal"><sp/><sp/><ref refid="testharness_8h_1a9cc34fd87cb865c77439a5d39b3b111b" kindref="member">ASSERT_EQ</ref>(</highlight><highlight class="stringliteral">&quot;OK&quot;</highlight><highlight class="normal">,<sp/>MatchError(</highlight><highlight class="stringliteral">&quot;unknown<sp/>record<sp/>type&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="352"><highlight class="normal">}</highlight></codeline>
<codeline lineno="353"><highlight class="normal"></highlight></codeline>
<codeline lineno="354" refid="namespaceleveldb_1_1log_1aa1e3f8be0b7799bfb21c5c4bf40d22c3" refkind="member"><highlight class="normal"><ref refid="namespaceleveldb_1_1log_1ab8a02b9419477420eca51cfd47d5f172" kindref="member">TEST</ref>(<ref refid="classleveldb_1_1log_1_1_log_test" kindref="compound">LogTest</ref>,<sp/>TruncatedTrailingRecordIsIgnored)<sp/>{</highlight></codeline>
<codeline lineno="355"><highlight class="normal"><sp/><sp/>Write(</highlight><highlight class="stringliteral">&quot;foo&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="356"><highlight class="normal"><sp/><sp/>ShrinkSize(4);<sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Drop<sp/>all<sp/>payload<sp/>as<sp/>well<sp/>as<sp/>a<sp/>header<sp/>byte</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="357"><highlight class="normal"><sp/><sp/><ref refid="testharness_8h_1a9cc34fd87cb865c77439a5d39b3b111b" kindref="member">ASSERT_EQ</ref>(</highlight><highlight class="stringliteral">&quot;EOF&quot;</highlight><highlight class="normal">,<sp/>Read());</highlight></codeline>
<codeline lineno="358"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Truncated<sp/>last<sp/>record<sp/>is<sp/>ignored,<sp/>not<sp/>treated<sp/>as<sp/>an<sp/>error.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="359"><highlight class="normal"><sp/><sp/><ref refid="testharness_8h_1a9cc34fd87cb865c77439a5d39b3b111b" kindref="member">ASSERT_EQ</ref>(0,<sp/>DroppedBytes());</highlight></codeline>
<codeline lineno="360"><highlight class="normal"><sp/><sp/><ref refid="testharness_8h_1a9cc34fd87cb865c77439a5d39b3b111b" kindref="member">ASSERT_EQ</ref>(</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">,<sp/>ReportMessage());</highlight></codeline>
<codeline lineno="361"><highlight class="normal">}</highlight></codeline>
<codeline lineno="362"><highlight class="normal"></highlight></codeline>
<codeline lineno="363" refid="namespaceleveldb_1_1log_1a024a8bc0f558ffe46b3a15ab43018402" refkind="member"><highlight class="normal"><ref refid="namespaceleveldb_1_1log_1ab8a02b9419477420eca51cfd47d5f172" kindref="member">TEST</ref>(<ref refid="classleveldb_1_1log_1_1_log_test" kindref="compound">LogTest</ref>,<sp/>BadLength)<sp/>{</highlight></codeline>
<codeline lineno="364"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>kPayloadSize<sp/>=<sp/>kBlockSize<sp/>-<sp/>kHeaderSize;</highlight></codeline>
<codeline lineno="365"><highlight class="normal"><sp/><sp/>Write(BigString(</highlight><highlight class="stringliteral">&quot;bar&quot;</highlight><highlight class="normal">,<sp/>kPayloadSize));</highlight></codeline>
<codeline lineno="366"><highlight class="normal"><sp/><sp/>Write(</highlight><highlight class="stringliteral">&quot;foo&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="367"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Least<sp/>significant<sp/>size<sp/>byte<sp/>is<sp/>stored<sp/>in<sp/>header[4].</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="368"><highlight class="normal"><sp/><sp/>IncrementByte(4,<sp/>1);</highlight></codeline>
<codeline lineno="369"><highlight class="normal"><sp/><sp/><ref refid="testharness_8h_1a9cc34fd87cb865c77439a5d39b3b111b" kindref="member">ASSERT_EQ</ref>(</highlight><highlight class="stringliteral">&quot;foo&quot;</highlight><highlight class="normal">,<sp/>Read());</highlight></codeline>
<codeline lineno="370"><highlight class="normal"><sp/><sp/><ref refid="testharness_8h_1a9cc34fd87cb865c77439a5d39b3b111b" kindref="member">ASSERT_EQ</ref>(kBlockSize,<sp/>DroppedBytes());</highlight></codeline>
<codeline lineno="371"><highlight class="normal"><sp/><sp/><ref refid="testharness_8h_1a9cc34fd87cb865c77439a5d39b3b111b" kindref="member">ASSERT_EQ</ref>(</highlight><highlight class="stringliteral">&quot;OK&quot;</highlight><highlight class="normal">,<sp/>MatchError(</highlight><highlight class="stringliteral">&quot;bad<sp/>record<sp/>length&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="372"><highlight class="normal">}</highlight></codeline>
<codeline lineno="373"><highlight class="normal"></highlight></codeline>
<codeline lineno="374" refid="namespaceleveldb_1_1log_1a22b6e6d2a3de82f3e05d63e13f44b9fd" refkind="member"><highlight class="normal"><ref refid="namespaceleveldb_1_1log_1ab8a02b9419477420eca51cfd47d5f172" kindref="member">TEST</ref>(<ref refid="classleveldb_1_1log_1_1_log_test" kindref="compound">LogTest</ref>,<sp/>BadLengthAtEndIsIgnored)<sp/>{</highlight></codeline>
<codeline lineno="375"><highlight class="normal"><sp/><sp/>Write(</highlight><highlight class="stringliteral">&quot;foo&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="376"><highlight class="normal"><sp/><sp/>ShrinkSize(1);</highlight></codeline>
<codeline lineno="377"><highlight class="normal"><sp/><sp/><ref refid="testharness_8h_1a9cc34fd87cb865c77439a5d39b3b111b" kindref="member">ASSERT_EQ</ref>(</highlight><highlight class="stringliteral">&quot;EOF&quot;</highlight><highlight class="normal">,<sp/>Read());</highlight></codeline>
<codeline lineno="378"><highlight class="normal"><sp/><sp/><ref refid="testharness_8h_1a9cc34fd87cb865c77439a5d39b3b111b" kindref="member">ASSERT_EQ</ref>(0,<sp/>DroppedBytes());</highlight></codeline>
<codeline lineno="379"><highlight class="normal"><sp/><sp/><ref refid="testharness_8h_1a9cc34fd87cb865c77439a5d39b3b111b" kindref="member">ASSERT_EQ</ref>(</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">,<sp/>ReportMessage());</highlight></codeline>
<codeline lineno="380"><highlight class="normal">}</highlight></codeline>
<codeline lineno="381"><highlight class="normal"></highlight></codeline>
<codeline lineno="382" refid="namespaceleveldb_1_1log_1a2dccd9d88a61eb0f59fdea07edfe2022" refkind="member"><highlight class="normal"><ref refid="namespaceleveldb_1_1log_1ab8a02b9419477420eca51cfd47d5f172" kindref="member">TEST</ref>(<ref refid="classleveldb_1_1log_1_1_log_test" kindref="compound">LogTest</ref>,<sp/>ChecksumMismatch)<sp/>{</highlight></codeline>
<codeline lineno="383"><highlight class="normal"><sp/><sp/>Write(</highlight><highlight class="stringliteral">&quot;foo&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="384"><highlight class="normal"><sp/><sp/>IncrementByte(0,<sp/>10);</highlight></codeline>
<codeline lineno="385"><highlight class="normal"><sp/><sp/><ref refid="testharness_8h_1a9cc34fd87cb865c77439a5d39b3b111b" kindref="member">ASSERT_EQ</ref>(</highlight><highlight class="stringliteral">&quot;EOF&quot;</highlight><highlight class="normal">,<sp/>Read());</highlight></codeline>
<codeline lineno="386"><highlight class="normal"><sp/><sp/><ref refid="testharness_8h_1a9cc34fd87cb865c77439a5d39b3b111b" kindref="member">ASSERT_EQ</ref>(10,<sp/>DroppedBytes());</highlight></codeline>
<codeline lineno="387"><highlight class="normal"><sp/><sp/><ref refid="testharness_8h_1a9cc34fd87cb865c77439a5d39b3b111b" kindref="member">ASSERT_EQ</ref>(</highlight><highlight class="stringliteral">&quot;OK&quot;</highlight><highlight class="normal">,<sp/>MatchError(</highlight><highlight class="stringliteral">&quot;checksum<sp/>mismatch&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="388"><highlight class="normal">}</highlight></codeline>
<codeline lineno="389"><highlight class="normal"></highlight></codeline>
<codeline lineno="390" refid="namespaceleveldb_1_1log_1ae2aa67608715051976e4cbb2008e3b52" refkind="member"><highlight class="normal"><ref refid="namespaceleveldb_1_1log_1ab8a02b9419477420eca51cfd47d5f172" kindref="member">TEST</ref>(<ref refid="classleveldb_1_1log_1_1_log_test" kindref="compound">LogTest</ref>,<sp/>UnexpectedMiddleType)<sp/>{</highlight></codeline>
<codeline lineno="391"><highlight class="normal"><sp/><sp/>Write(</highlight><highlight class="stringliteral">&quot;foo&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="392"><highlight class="normal"><sp/><sp/>SetByte(6,<sp/><ref refid="namespaceleveldb_1_1log_1a01bdc1b51beb634f14f8fbb70fbd8d2aa50ec9d5a2236253d02c0abd55d178e08" kindref="member">kMiddleType</ref>);</highlight></codeline>
<codeline lineno="393"><highlight class="normal"><sp/><sp/>FixChecksum(0,<sp/>3);</highlight></codeline>
<codeline lineno="394"><highlight class="normal"><sp/><sp/><ref refid="testharness_8h_1a9cc34fd87cb865c77439a5d39b3b111b" kindref="member">ASSERT_EQ</ref>(</highlight><highlight class="stringliteral">&quot;EOF&quot;</highlight><highlight class="normal">,<sp/>Read());</highlight></codeline>
<codeline lineno="395"><highlight class="normal"><sp/><sp/><ref refid="testharness_8h_1a9cc34fd87cb865c77439a5d39b3b111b" kindref="member">ASSERT_EQ</ref>(3,<sp/>DroppedBytes());</highlight></codeline>
<codeline lineno="396"><highlight class="normal"><sp/><sp/><ref refid="testharness_8h_1a9cc34fd87cb865c77439a5d39b3b111b" kindref="member">ASSERT_EQ</ref>(</highlight><highlight class="stringliteral">&quot;OK&quot;</highlight><highlight class="normal">,<sp/>MatchError(</highlight><highlight class="stringliteral">&quot;missing<sp/>start&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="397"><highlight class="normal">}</highlight></codeline>
<codeline lineno="398"><highlight class="normal"></highlight></codeline>
<codeline lineno="399" refid="namespaceleveldb_1_1log_1ad618b3ff1dc35a8641c019d8eb4a4e8b" refkind="member"><highlight class="normal"><ref refid="namespaceleveldb_1_1log_1ab8a02b9419477420eca51cfd47d5f172" kindref="member">TEST</ref>(<ref refid="classleveldb_1_1log_1_1_log_test" kindref="compound">LogTest</ref>,<sp/>UnexpectedLastType)<sp/>{</highlight></codeline>
<codeline lineno="400"><highlight class="normal"><sp/><sp/>Write(</highlight><highlight class="stringliteral">&quot;foo&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="401"><highlight class="normal"><sp/><sp/>SetByte(6,<sp/><ref refid="namespaceleveldb_1_1log_1a01bdc1b51beb634f14f8fbb70fbd8d2aa29f913fb4d719f97a9618bca93775dfc" kindref="member">kLastType</ref>);</highlight></codeline>
<codeline lineno="402"><highlight class="normal"><sp/><sp/>FixChecksum(0,<sp/>3);</highlight></codeline>
<codeline lineno="403"><highlight class="normal"><sp/><sp/><ref refid="testharness_8h_1a9cc34fd87cb865c77439a5d39b3b111b" kindref="member">ASSERT_EQ</ref>(</highlight><highlight class="stringliteral">&quot;EOF&quot;</highlight><highlight class="normal">,<sp/>Read());</highlight></codeline>
<codeline lineno="404"><highlight class="normal"><sp/><sp/><ref refid="testharness_8h_1a9cc34fd87cb865c77439a5d39b3b111b" kindref="member">ASSERT_EQ</ref>(3,<sp/>DroppedBytes());</highlight></codeline>
<codeline lineno="405"><highlight class="normal"><sp/><sp/><ref refid="testharness_8h_1a9cc34fd87cb865c77439a5d39b3b111b" kindref="member">ASSERT_EQ</ref>(</highlight><highlight class="stringliteral">&quot;OK&quot;</highlight><highlight class="normal">,<sp/>MatchError(</highlight><highlight class="stringliteral">&quot;missing<sp/>start&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="406"><highlight class="normal">}</highlight></codeline>
<codeline lineno="407"><highlight class="normal"></highlight></codeline>
<codeline lineno="408" refid="namespaceleveldb_1_1log_1a178460e2ee7a665f0aef08a28217a6d3" refkind="member"><highlight class="normal"><ref refid="namespaceleveldb_1_1log_1ab8a02b9419477420eca51cfd47d5f172" kindref="member">TEST</ref>(<ref refid="classleveldb_1_1log_1_1_log_test" kindref="compound">LogTest</ref>,<sp/>UnexpectedFullType)<sp/>{</highlight></codeline>
<codeline lineno="409"><highlight class="normal"><sp/><sp/>Write(</highlight><highlight class="stringliteral">&quot;foo&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="410"><highlight class="normal"><sp/><sp/>Write(</highlight><highlight class="stringliteral">&quot;bar&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="411"><highlight class="normal"><sp/><sp/>SetByte(6,<sp/><ref refid="namespaceleveldb_1_1log_1a01bdc1b51beb634f14f8fbb70fbd8d2aa46ff8d418146ec7ce6c3a883e89b48da" kindref="member">kFirstType</ref>);</highlight></codeline>
<codeline lineno="412"><highlight class="normal"><sp/><sp/>FixChecksum(0,<sp/>3);</highlight></codeline>
<codeline lineno="413"><highlight class="normal"><sp/><sp/><ref refid="testharness_8h_1a9cc34fd87cb865c77439a5d39b3b111b" kindref="member">ASSERT_EQ</ref>(</highlight><highlight class="stringliteral">&quot;bar&quot;</highlight><highlight class="normal">,<sp/>Read());</highlight></codeline>
<codeline lineno="414"><highlight class="normal"><sp/><sp/><ref refid="testharness_8h_1a9cc34fd87cb865c77439a5d39b3b111b" kindref="member">ASSERT_EQ</ref>(</highlight><highlight class="stringliteral">&quot;EOF&quot;</highlight><highlight class="normal">,<sp/>Read());</highlight></codeline>
<codeline lineno="415"><highlight class="normal"><sp/><sp/><ref refid="testharness_8h_1a9cc34fd87cb865c77439a5d39b3b111b" kindref="member">ASSERT_EQ</ref>(3,<sp/>DroppedBytes());</highlight></codeline>
<codeline lineno="416"><highlight class="normal"><sp/><sp/><ref refid="testharness_8h_1a9cc34fd87cb865c77439a5d39b3b111b" kindref="member">ASSERT_EQ</ref>(</highlight><highlight class="stringliteral">&quot;OK&quot;</highlight><highlight class="normal">,<sp/>MatchError(</highlight><highlight class="stringliteral">&quot;partial<sp/>record<sp/>without<sp/>end&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="417"><highlight class="normal">}</highlight></codeline>
<codeline lineno="418"><highlight class="normal"></highlight></codeline>
<codeline lineno="419" refid="namespaceleveldb_1_1log_1a7c8a46287bbb1e185ccfcb78c5ae94e3" refkind="member"><highlight class="normal"><ref refid="namespaceleveldb_1_1log_1ab8a02b9419477420eca51cfd47d5f172" kindref="member">TEST</ref>(<ref refid="classleveldb_1_1log_1_1_log_test" kindref="compound">LogTest</ref>,<sp/>UnexpectedFirstType)<sp/>{</highlight></codeline>
<codeline lineno="420"><highlight class="normal"><sp/><sp/>Write(</highlight><highlight class="stringliteral">&quot;foo&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="421"><highlight class="normal"><sp/><sp/>Write(BigString(</highlight><highlight class="stringliteral">&quot;bar&quot;</highlight><highlight class="normal">,<sp/>100000));</highlight></codeline>
<codeline lineno="422"><highlight class="normal"><sp/><sp/>SetByte(6,<sp/><ref refid="namespaceleveldb_1_1log_1a01bdc1b51beb634f14f8fbb70fbd8d2aa46ff8d418146ec7ce6c3a883e89b48da" kindref="member">kFirstType</ref>);</highlight></codeline>
<codeline lineno="423"><highlight class="normal"><sp/><sp/>FixChecksum(0,<sp/>3);</highlight></codeline>
<codeline lineno="424"><highlight class="normal"><sp/><sp/><ref refid="testharness_8h_1a9cc34fd87cb865c77439a5d39b3b111b" kindref="member">ASSERT_EQ</ref>(BigString(</highlight><highlight class="stringliteral">&quot;bar&quot;</highlight><highlight class="normal">,<sp/>100000),<sp/>Read());</highlight></codeline>
<codeline lineno="425"><highlight class="normal"><sp/><sp/><ref refid="testharness_8h_1a9cc34fd87cb865c77439a5d39b3b111b" kindref="member">ASSERT_EQ</ref>(</highlight><highlight class="stringliteral">&quot;EOF&quot;</highlight><highlight class="normal">,<sp/>Read());</highlight></codeline>
<codeline lineno="426"><highlight class="normal"><sp/><sp/><ref refid="testharness_8h_1a9cc34fd87cb865c77439a5d39b3b111b" kindref="member">ASSERT_EQ</ref>(3,<sp/>DroppedBytes());</highlight></codeline>
<codeline lineno="427"><highlight class="normal"><sp/><sp/><ref refid="testharness_8h_1a9cc34fd87cb865c77439a5d39b3b111b" kindref="member">ASSERT_EQ</ref>(</highlight><highlight class="stringliteral">&quot;OK&quot;</highlight><highlight class="normal">,<sp/>MatchError(</highlight><highlight class="stringliteral">&quot;partial<sp/>record<sp/>without<sp/>end&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="428"><highlight class="normal">}</highlight></codeline>
<codeline lineno="429"><highlight class="normal"></highlight></codeline>
<codeline lineno="430" refid="namespaceleveldb_1_1log_1a965e5192bb2f0467f987fe54995d0c89" refkind="member"><highlight class="normal"><ref refid="namespaceleveldb_1_1log_1ab8a02b9419477420eca51cfd47d5f172" kindref="member">TEST</ref>(<ref refid="classleveldb_1_1log_1_1_log_test" kindref="compound">LogTest</ref>,<sp/>MissingLastIsIgnored)<sp/>{</highlight></codeline>
<codeline lineno="431"><highlight class="normal"><sp/><sp/>Write(BigString(</highlight><highlight class="stringliteral">&quot;bar&quot;</highlight><highlight class="normal">,<sp/>kBlockSize));</highlight></codeline>
<codeline lineno="432"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Remove<sp/>the<sp/>LAST<sp/>block,<sp/>including<sp/>header.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="433"><highlight class="normal"><sp/><sp/>ShrinkSize(14);</highlight></codeline>
<codeline lineno="434"><highlight class="normal"><sp/><sp/><ref refid="testharness_8h_1a9cc34fd87cb865c77439a5d39b3b111b" kindref="member">ASSERT_EQ</ref>(</highlight><highlight class="stringliteral">&quot;EOF&quot;</highlight><highlight class="normal">,<sp/>Read());</highlight></codeline>
<codeline lineno="435"><highlight class="normal"><sp/><sp/><ref refid="testharness_8h_1a9cc34fd87cb865c77439a5d39b3b111b" kindref="member">ASSERT_EQ</ref>(</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">,<sp/>ReportMessage());</highlight></codeline>
<codeline lineno="436"><highlight class="normal"><sp/><sp/><ref refid="testharness_8h_1a9cc34fd87cb865c77439a5d39b3b111b" kindref="member">ASSERT_EQ</ref>(0,<sp/>DroppedBytes());</highlight></codeline>
<codeline lineno="437"><highlight class="normal">}</highlight></codeline>
<codeline lineno="438"><highlight class="normal"></highlight></codeline>
<codeline lineno="439" refid="namespaceleveldb_1_1log_1acae9dd4e93ded56d6585082822964b71" refkind="member"><highlight class="normal"><ref refid="namespaceleveldb_1_1log_1ab8a02b9419477420eca51cfd47d5f172" kindref="member">TEST</ref>(<ref refid="classleveldb_1_1log_1_1_log_test" kindref="compound">LogTest</ref>,<sp/>PartialLastIsIgnored)<sp/>{</highlight></codeline>
<codeline lineno="440"><highlight class="normal"><sp/><sp/>Write(BigString(</highlight><highlight class="stringliteral">&quot;bar&quot;</highlight><highlight class="normal">,<sp/>kBlockSize));</highlight></codeline>
<codeline lineno="441"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Cause<sp/>a<sp/>bad<sp/>record<sp/>length<sp/>in<sp/>the<sp/>LAST<sp/>block.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="442"><highlight class="normal"><sp/><sp/>ShrinkSize(1);</highlight></codeline>
<codeline lineno="443"><highlight class="normal"><sp/><sp/><ref refid="testharness_8h_1a9cc34fd87cb865c77439a5d39b3b111b" kindref="member">ASSERT_EQ</ref>(</highlight><highlight class="stringliteral">&quot;EOF&quot;</highlight><highlight class="normal">,<sp/>Read());</highlight></codeline>
<codeline lineno="444"><highlight class="normal"><sp/><sp/><ref refid="testharness_8h_1a9cc34fd87cb865c77439a5d39b3b111b" kindref="member">ASSERT_EQ</ref>(</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">,<sp/>ReportMessage());</highlight></codeline>
<codeline lineno="445"><highlight class="normal"><sp/><sp/><ref refid="testharness_8h_1a9cc34fd87cb865c77439a5d39b3b111b" kindref="member">ASSERT_EQ</ref>(0,<sp/>DroppedBytes());</highlight></codeline>
<codeline lineno="446"><highlight class="normal">}</highlight></codeline>
<codeline lineno="447"><highlight class="normal"></highlight></codeline>
<codeline lineno="448" refid="namespaceleveldb_1_1log_1a2ea9cc0af9f5d8b6bdc74e3126bd389a" refkind="member"><highlight class="normal"><ref refid="namespaceleveldb_1_1log_1ab8a02b9419477420eca51cfd47d5f172" kindref="member">TEST</ref>(<ref refid="classleveldb_1_1log_1_1_log_test" kindref="compound">LogTest</ref>,<sp/>ErrorJoinsRecords)<sp/>{</highlight></codeline>
<codeline lineno="449"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Consider<sp/>two<sp/>fragmented<sp/>records:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="450"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>first(R1)<sp/>last(R1)<sp/>first(R2)<sp/>last(R2)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="451"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>where<sp/>the<sp/>middle<sp/>two<sp/>fragments<sp/>disappear.<sp/><sp/>We<sp/>do<sp/>not<sp/>want</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="452"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>first(R1),last(R2)<sp/>to<sp/>get<sp/>joined<sp/>and<sp/>returned<sp/>as<sp/>a<sp/>valid<sp/>record.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="453"><highlight class="normal"></highlight></codeline>
<codeline lineno="454"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Write<sp/>records<sp/>that<sp/>span<sp/>two<sp/>blocks</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="455"><highlight class="normal"><sp/><sp/>Write(BigString(</highlight><highlight class="stringliteral">&quot;foo&quot;</highlight><highlight class="normal">,<sp/>kBlockSize));</highlight></codeline>
<codeline lineno="456"><highlight class="normal"><sp/><sp/>Write(BigString(</highlight><highlight class="stringliteral">&quot;bar&quot;</highlight><highlight class="normal">,<sp/>kBlockSize));</highlight></codeline>
<codeline lineno="457"><highlight class="normal"><sp/><sp/>Write(</highlight><highlight class="stringliteral">&quot;correct&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="458"><highlight class="normal"></highlight></codeline>
<codeline lineno="459"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Wipe<sp/>the<sp/>middle<sp/>block</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="460"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>offset<sp/>=<sp/>kBlockSize;<sp/>offset<sp/>&lt;<sp/>2*kBlockSize;<sp/>offset++)<sp/>{</highlight></codeline>
<codeline lineno="461"><highlight class="normal"><sp/><sp/><sp/><sp/>SetByte(offset,<sp/></highlight><highlight class="charliteral">&apos;x&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="462"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="463"><highlight class="normal"></highlight></codeline>
<codeline lineno="464"><highlight class="normal"><sp/><sp/><ref refid="testharness_8h_1a9cc34fd87cb865c77439a5d39b3b111b" kindref="member">ASSERT_EQ</ref>(</highlight><highlight class="stringliteral">&quot;correct&quot;</highlight><highlight class="normal">,<sp/>Read());</highlight></codeline>
<codeline lineno="465"><highlight class="normal"><sp/><sp/><ref refid="testharness_8h_1a9cc34fd87cb865c77439a5d39b3b111b" kindref="member">ASSERT_EQ</ref>(</highlight><highlight class="stringliteral">&quot;EOF&quot;</highlight><highlight class="normal">,<sp/>Read());</highlight></codeline>
<codeline lineno="466"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>dropped<sp/>=<sp/>DroppedBytes();</highlight></codeline>
<codeline lineno="467"><highlight class="normal"><sp/><sp/><ref refid="testharness_8h_1ad71f56861528c854666f15f4bad921c2" kindref="member">ASSERT_LE</ref>(dropped,<sp/>2*kBlockSize<sp/>+<sp/>100);</highlight></codeline>
<codeline lineno="468"><highlight class="normal"><sp/><sp/><ref refid="testharness_8h_1a82e45a6098aa7dbbfbcb250fc4722a0a" kindref="member">ASSERT_GE</ref>(dropped,<sp/>2*kBlockSize);</highlight></codeline>
<codeline lineno="469"><highlight class="normal">}</highlight></codeline>
<codeline lineno="470"><highlight class="normal"></highlight></codeline>
<codeline lineno="471" refid="namespaceleveldb_1_1log_1a6ee7068a33cb134e26e7d1cf58327064" refkind="member"><highlight class="normal"><ref refid="namespaceleveldb_1_1log_1ab8a02b9419477420eca51cfd47d5f172" kindref="member">TEST</ref>(<ref refid="classleveldb_1_1log_1_1_log_test" kindref="compound">LogTest</ref>,<sp/>ReadStart)<sp/>{</highlight></codeline>
<codeline lineno="472"><highlight class="normal"><sp/><sp/>CheckInitialOffsetRecord(0,<sp/>0);</highlight></codeline>
<codeline lineno="473"><highlight class="normal">}</highlight></codeline>
<codeline lineno="474"><highlight class="normal"></highlight></codeline>
<codeline lineno="475" refid="namespaceleveldb_1_1log_1af9cc8dffe50b0cefff163fdca58d1a08" refkind="member"><highlight class="normal"><ref refid="namespaceleveldb_1_1log_1ab8a02b9419477420eca51cfd47d5f172" kindref="member">TEST</ref>(<ref refid="classleveldb_1_1log_1_1_log_test" kindref="compound">LogTest</ref>,<sp/>ReadSecondOneOff)<sp/>{</highlight></codeline>
<codeline lineno="476"><highlight class="normal"><sp/><sp/>CheckInitialOffsetRecord(1,<sp/>1);</highlight></codeline>
<codeline lineno="477"><highlight class="normal">}</highlight></codeline>
<codeline lineno="478"><highlight class="normal"></highlight></codeline>
<codeline lineno="479" refid="namespaceleveldb_1_1log_1ab734bca6b78216dc41b112075258dbe7" refkind="member"><highlight class="normal"><ref refid="namespaceleveldb_1_1log_1ab8a02b9419477420eca51cfd47d5f172" kindref="member">TEST</ref>(<ref refid="classleveldb_1_1log_1_1_log_test" kindref="compound">LogTest</ref>,<sp/>ReadSecondTenThousand)<sp/>{</highlight></codeline>
<codeline lineno="480"><highlight class="normal"><sp/><sp/>CheckInitialOffsetRecord(10000,<sp/>1);</highlight></codeline>
<codeline lineno="481"><highlight class="normal">}</highlight></codeline>
<codeline lineno="482"><highlight class="normal"></highlight></codeline>
<codeline lineno="483" refid="namespaceleveldb_1_1log_1aa9e212a334431228c79a843316480db0" refkind="member"><highlight class="normal"><ref refid="namespaceleveldb_1_1log_1ab8a02b9419477420eca51cfd47d5f172" kindref="member">TEST</ref>(<ref refid="classleveldb_1_1log_1_1_log_test" kindref="compound">LogTest</ref>,<sp/>ReadSecondStart)<sp/>{</highlight></codeline>
<codeline lineno="484"><highlight class="normal"><sp/><sp/>CheckInitialOffsetRecord(10007,<sp/>1);</highlight></codeline>
<codeline lineno="485"><highlight class="normal">}</highlight></codeline>
<codeline lineno="486"><highlight class="normal"></highlight></codeline>
<codeline lineno="487" refid="namespaceleveldb_1_1log_1af5f8505f08225382f290158f5175cca0" refkind="member"><highlight class="normal"><ref refid="namespaceleveldb_1_1log_1ab8a02b9419477420eca51cfd47d5f172" kindref="member">TEST</ref>(<ref refid="classleveldb_1_1log_1_1_log_test" kindref="compound">LogTest</ref>,<sp/>ReadThirdOneOff)<sp/>{</highlight></codeline>
<codeline lineno="488"><highlight class="normal"><sp/><sp/>CheckInitialOffsetRecord(10008,<sp/>2);</highlight></codeline>
<codeline lineno="489"><highlight class="normal">}</highlight></codeline>
<codeline lineno="490"><highlight class="normal"></highlight></codeline>
<codeline lineno="491" refid="namespaceleveldb_1_1log_1a87cfcd7bb0a248dc72d9856e1d00d519" refkind="member"><highlight class="normal"><ref refid="namespaceleveldb_1_1log_1ab8a02b9419477420eca51cfd47d5f172" kindref="member">TEST</ref>(<ref refid="classleveldb_1_1log_1_1_log_test" kindref="compound">LogTest</ref>,<sp/>ReadThirdStart)<sp/>{</highlight></codeline>
<codeline lineno="492"><highlight class="normal"><sp/><sp/>CheckInitialOffsetRecord(20014,<sp/>2);</highlight></codeline>
<codeline lineno="493"><highlight class="normal">}</highlight></codeline>
<codeline lineno="494"><highlight class="normal"></highlight></codeline>
<codeline lineno="495" refid="namespaceleveldb_1_1log_1abbda151ff0e2439ac1dfa823a6089439" refkind="member"><highlight class="normal"><ref refid="namespaceleveldb_1_1log_1ab8a02b9419477420eca51cfd47d5f172" kindref="member">TEST</ref>(<ref refid="classleveldb_1_1log_1_1_log_test" kindref="compound">LogTest</ref>,<sp/>ReadFourthOneOff)<sp/>{</highlight></codeline>
<codeline lineno="496"><highlight class="normal"><sp/><sp/>CheckInitialOffsetRecord(20015,<sp/>3);</highlight></codeline>
<codeline lineno="497"><highlight class="normal">}</highlight></codeline>
<codeline lineno="498"><highlight class="normal"></highlight></codeline>
<codeline lineno="499" refid="namespaceleveldb_1_1log_1a85f6833939c09f181924774403bfbe4f" refkind="member"><highlight class="normal"><ref refid="namespaceleveldb_1_1log_1ab8a02b9419477420eca51cfd47d5f172" kindref="member">TEST</ref>(<ref refid="classleveldb_1_1log_1_1_log_test" kindref="compound">LogTest</ref>,<sp/>ReadFourthFirstBlockTrailer)<sp/>{</highlight></codeline>
<codeline lineno="500"><highlight class="normal"><sp/><sp/>CheckInitialOffsetRecord(log::kBlockSize<sp/>-<sp/>4,<sp/>3);</highlight></codeline>
<codeline lineno="501"><highlight class="normal">}</highlight></codeline>
<codeline lineno="502"><highlight class="normal"></highlight></codeline>
<codeline lineno="503" refid="namespaceleveldb_1_1log_1a6fb47c0abe5c036d95a4f9aeb1d62174" refkind="member"><highlight class="normal"><ref refid="namespaceleveldb_1_1log_1ab8a02b9419477420eca51cfd47d5f172" kindref="member">TEST</ref>(<ref refid="classleveldb_1_1log_1_1_log_test" kindref="compound">LogTest</ref>,<sp/>ReadFourthMiddleBlock)<sp/>{</highlight></codeline>
<codeline lineno="504"><highlight class="normal"><sp/><sp/>CheckInitialOffsetRecord(log::kBlockSize<sp/>+<sp/>1,<sp/>3);</highlight></codeline>
<codeline lineno="505"><highlight class="normal">}</highlight></codeline>
<codeline lineno="506"><highlight class="normal"></highlight></codeline>
<codeline lineno="507" refid="namespaceleveldb_1_1log_1a9c80a844e21aec7c6fbde209e99c1ad8" refkind="member"><highlight class="normal"><ref refid="namespaceleveldb_1_1log_1ab8a02b9419477420eca51cfd47d5f172" kindref="member">TEST</ref>(<ref refid="classleveldb_1_1log_1_1_log_test" kindref="compound">LogTest</ref>,<sp/>ReadFourthLastBlock)<sp/>{</highlight></codeline>
<codeline lineno="508"><highlight class="normal"><sp/><sp/>CheckInitialOffsetRecord(2<sp/>*<sp/>log::kBlockSize<sp/>+<sp/>1,<sp/>3);</highlight></codeline>
<codeline lineno="509"><highlight class="normal">}</highlight></codeline>
<codeline lineno="510"><highlight class="normal"></highlight></codeline>
<codeline lineno="511" refid="namespaceleveldb_1_1log_1aa652940a4e7bff7fa21f0d1c941712d7" refkind="member"><highlight class="normal"><ref refid="namespaceleveldb_1_1log_1ab8a02b9419477420eca51cfd47d5f172" kindref="member">TEST</ref>(<ref refid="classleveldb_1_1log_1_1_log_test" kindref="compound">LogTest</ref>,<sp/>ReadFourthStart)<sp/>{</highlight></codeline>
<codeline lineno="512"><highlight class="normal"><sp/><sp/>CheckInitialOffsetRecord(</highlight></codeline>
<codeline lineno="513"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>2<sp/>*<sp/>(kHeaderSize<sp/>+<sp/>1000)<sp/>+<sp/>(2<sp/>*<sp/>log::kBlockSize<sp/>-<sp/>1000)<sp/>+<sp/>3<sp/>*<sp/>kHeaderSize,</highlight></codeline>
<codeline lineno="514"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>3);</highlight></codeline>
<codeline lineno="515"><highlight class="normal">}</highlight></codeline>
<codeline lineno="516"><highlight class="normal"></highlight></codeline>
<codeline lineno="517" refid="namespaceleveldb_1_1log_1a74e0fb6c39041d1ef2193114b0a2275b" refkind="member"><highlight class="normal"><ref refid="namespaceleveldb_1_1log_1ab8a02b9419477420eca51cfd47d5f172" kindref="member">TEST</ref>(<ref refid="classleveldb_1_1log_1_1_log_test" kindref="compound">LogTest</ref>,<sp/>ReadEnd)<sp/>{</highlight></codeline>
<codeline lineno="518"><highlight class="normal"><sp/><sp/>CheckOffsetPastEndReturnsNoRecords(0);</highlight></codeline>
<codeline lineno="519"><highlight class="normal">}</highlight></codeline>
<codeline lineno="520"><highlight class="normal"></highlight></codeline>
<codeline lineno="521" refid="namespaceleveldb_1_1log_1ae1081d375c33d8b2f01d5593ecd5f4a7" refkind="member"><highlight class="normal"><ref refid="namespaceleveldb_1_1log_1ab8a02b9419477420eca51cfd47d5f172" kindref="member">TEST</ref>(<ref refid="classleveldb_1_1log_1_1_log_test" kindref="compound">LogTest</ref>,<sp/>ReadPastEnd)<sp/>{</highlight></codeline>
<codeline lineno="522"><highlight class="normal"><sp/><sp/>CheckOffsetPastEndReturnsNoRecords(5);</highlight></codeline>
<codeline lineno="523"><highlight class="normal">}</highlight></codeline>
<codeline lineno="524"><highlight class="normal"></highlight></codeline>
<codeline lineno="525"><highlight class="normal">}<sp/><sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>log</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="526"><highlight class="normal">}<sp/><sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>leveldb</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="527"><highlight class="normal"></highlight></codeline>
<codeline lineno="528" refid="log__test_8cc_1a3c04138a5bfe5d72780bb7e82a18e627" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="log__test_8cc_1a3c04138a5bfe5d72780bb7e82a18e627" kindref="member">main</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>argc,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">**<sp/>argv)<sp/>{</highlight></codeline>
<codeline lineno="529"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="namespaceleveldb_1_1test_1a3329162c54a0bff42d41c2ac86b2580a" kindref="member">leveldb::test::RunAllTests</ref>();</highlight></codeline>
<codeline lineno="530"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="/home/dev/ds-160209/src/leveldb/db/log_test.cc"/>
  </compounddef>
</doxygen>
