<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.9.1">
  <compounddef id="class_memory_page_locker" kind="class" language="C++" prot="public">
    <compoundname>MemoryPageLocker</compoundname>
    <includes refid="allocators_8h" local="no">allocators.h</includes>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="class_memory_page_locker_1af411b6f6320864616cdd1b28ba9201fe" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool MemoryPageLocker::Lock</definition>
        <argsstring>(const void *addr, size_t len)</argsstring>
        <name>Lock</name>
        <param>
          <type>const void *</type>
          <declname>addr</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>len</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Lock memory pages. addr and len must be a multiple of the system page size </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/allocators.h" line="146" column="1" bodyfile="/home/dev/ds-160209/src/allocators.h" bodystart="146" bodyend="153"/>
      </memberdef>
      <memberdef kind="function" id="class_memory_page_locker_1af9e9ad0edadcd8250db05f95cd6a49a7" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool MemoryPageLocker::Unlock</definition>
        <argsstring>(const void *addr, size_t len)</argsstring>
        <name>Unlock</name>
        <param>
          <type>const void *</type>
          <declname>addr</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>len</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Unlock memory pages. addr and len must be a multiple of the system page size </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/allocators.h" line="157" column="1" bodyfile="/home/dev/ds-160209/src/allocators.h" bodystart="157" bodyend="164"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>OS-dependent memory page locking/unlocking. Defined as policy class to make stubbing for test possible. </para>    </detaileddescription>
    <location file="/home/dev/ds-160209/src/allocators.h" line="141" column="1" bodyfile="/home/dev/ds-160209/src/allocators.h" bodystart="140" bodyend="165"/>
    <listofallmembers>
      <member refid="class_memory_page_locker_1af411b6f6320864616cdd1b28ba9201fe" prot="public" virt="non-virtual"><scope>MemoryPageLocker</scope><name>Lock</name></member>
      <member refid="class_memory_page_locker_1af9e9ad0edadcd8250db05f95cd6a49a7" prot="public" virt="non-virtual"><scope>MemoryPageLocker</scope><name>Unlock</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
