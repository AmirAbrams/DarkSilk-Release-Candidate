<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.9.1">
  <compounddef id="blake2-impl_8h" kind="file" language="C++">
    <compoundname>blake2-impl.h</compoundname>
    <includes refid="stdint_8h" local="no">stdint.h</includes>
    <includes local="no">string.h</includes>
    <includedby refid="blake2b_8c" local="yes">/home/dev/ds-160209/src/crypto/argon2/blake2/blake2b.c</includedby>
    <includedby refid="blamka-round-opt_8h" local="yes">/home/dev/ds-160209/src/crypto/argon2/blake2/blamka-round-opt.h</includedby>
    <includedby refid="blamka-round-ref_8h" local="yes">/home/dev/ds-160209/src/crypto/argon2/blake2/blamka-round-ref.h</includedby>
    <includedby refid="core_8c" local="yes">/home/dev/ds-160209/src/crypto/argon2/core.c</includedby>
    <includedby refid="ref_8c" local="yes">/home/dev/ds-160209/src/crypto/argon2/ref.c</includedby>
    <incdepgraph>
      <node id="3796">
        <label>/home/dev/ds-160209/src/crypto/argon2/blake2/blake2-impl.h</label>
        <link refid="blake2-impl.h"/>
        <childnode refid="3797" relation="include">
        </childnode>
        <childnode refid="3798" relation="include">
        </childnode>
      </node>
      <node id="3798">
        <label>string.h</label>
      </node>
      <node id="3797">
        <label>stdint.h</label>
        <link refid="stdint_8h"/>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="3800">
        <label>/home/dev/ds-160209/src/crypto/argon2/blake2/blake2b.c</label>
        <link refid="blake2b_8c"/>
      </node>
      <node id="3799">
        <label>/home/dev/ds-160209/src/crypto/argon2/blake2/blake2-impl.h</label>
        <link refid="blake2-impl.h"/>
        <childnode refid="3800" relation="include">
        </childnode>
        <childnode refid="3801" relation="include">
        </childnode>
        <childnode refid="3803" relation="include">
        </childnode>
        <childnode refid="3805" relation="include">
        </childnode>
        <childnode refid="3804" relation="include">
        </childnode>
      </node>
      <node id="3803">
        <label>/home/dev/ds-160209/src/crypto/argon2/blake2/blamka-round-ref.h</label>
        <link refid="blamka-round-ref_8h"/>
        <childnode refid="3804" relation="include">
        </childnode>
      </node>
      <node id="3801">
        <label>/home/dev/ds-160209/src/crypto/argon2/blake2/blamka-round-opt.h</label>
        <link refid="blamka-round-opt_8h"/>
        <childnode refid="3802" relation="include">
        </childnode>
      </node>
      <node id="3804">
        <label>/home/dev/ds-160209/src/crypto/argon2/ref.c</label>
        <link refid="ref_8c"/>
      </node>
      <node id="3805">
        <label>/home/dev/ds-160209/src/crypto/argon2/core.c</label>
        <link refid="core_8c"/>
      </node>
      <node id="3802">
        <label>/home/dev/ds-160209/src/crypto/argon2/opt.c</label>
        <link refid="opt_8c"/>
      </node>
    </invincdepgraph>
      <sectiondef kind="define">
      <memberdef kind="define" id="blake2-impl_8h_1aa47358e2e39f403db8cddffec65337f7" prot="public" static="no">
        <name>BLAKE2_INLINE</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/crypto/argon2/blake2/blake2-impl.h" line="12" column="10" bodyfile="/home/dev/ds-160209/src/crypto/argon2/blake2/blake2-impl.h" bodystart="12" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="blake2-impl_8h_1ae04fc786e0fae3ffda5f3656e3f0af8a" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="blake2-impl_8h_1aa47358e2e39f403db8cddffec65337f7" kindref="member">BLAKE2_INLINE</ref> <ref refid="stdint_8h_1a435d1572bf3f880d55459d9805097f62" kindref="member">uint32_t</ref></type>
        <definition>static BLAKE2_INLINE uint32_t load32</definition>
        <argsstring>(const void *src)</argsstring>
        <name>load32</name>
        <param>
          <type>const void *</type>
          <declname>src</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/crypto/argon2/blake2/blake2-impl.h" line="31" column="1" bodyfile="/home/dev/ds-160209/src/crypto/argon2/blake2/blake2-impl.h" bodystart="31" bodyend="44"/>
      </memberdef>
      <memberdef kind="function" id="blake2-impl_8h_1a8e7d35fe61540af2515a55e63bed8b59" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="blake2-impl_8h_1aa47358e2e39f403db8cddffec65337f7" kindref="member">BLAKE2_INLINE</ref> <ref refid="stdint_8h_1aaa5d1cd013383c889537491c3cfd9aad" kindref="member">uint64_t</ref></type>
        <definition>static BLAKE2_INLINE uint64_t load64</definition>
        <argsstring>(const void *src)</argsstring>
        <name>load64</name>
        <param>
          <type>const void *</type>
          <declname>src</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/crypto/argon2/blake2/blake2-impl.h" line="46" column="1" bodyfile="/home/dev/ds-160209/src/crypto/argon2/blake2/blake2-impl.h" bodystart="46" bodyend="63"/>
      </memberdef>
      <memberdef kind="function" id="blake2-impl_8h_1add144f858915b7c34dc615f14999fe7e" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="blake2-impl_8h_1aa47358e2e39f403db8cddffec65337f7" kindref="member">BLAKE2_INLINE</ref> void</type>
        <definition>static BLAKE2_INLINE void store32</definition>
        <argsstring>(void *dst, uint32_t w)</argsstring>
        <name>store32</name>
        <param>
          <type>void *</type>
          <declname>dst</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1a435d1572bf3f880d55459d9805097f62" kindref="member">uint32_t</ref></type>
          <declname>w</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/crypto/argon2/blake2/blake2-impl.h" line="65" column="1" bodyfile="/home/dev/ds-160209/src/crypto/argon2/blake2/blake2-impl.h" bodystart="65" bodyend="78"/>
      </memberdef>
      <memberdef kind="function" id="blake2-impl_8h_1a69858c299468e980dcfa9f737ebc7466" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="blake2-impl_8h_1aa47358e2e39f403db8cddffec65337f7" kindref="member">BLAKE2_INLINE</ref> void</type>
        <definition>static BLAKE2_INLINE void store64</definition>
        <argsstring>(void *dst, uint64_t w)</argsstring>
        <name>store64</name>
        <param>
          <type>void *</type>
          <declname>dst</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1aaa5d1cd013383c889537491c3cfd9aad" kindref="member">uint64_t</ref></type>
          <declname>w</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/crypto/argon2/blake2/blake2-impl.h" line="80" column="1" bodyfile="/home/dev/ds-160209/src/crypto/argon2/blake2/blake2-impl.h" bodystart="80" bodyend="101"/>
      </memberdef>
      <memberdef kind="function" id="blake2-impl_8h_1aa0b6b2ef836279028681f6f62a15d099" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="blake2-impl_8h_1aa47358e2e39f403db8cddffec65337f7" kindref="member">BLAKE2_INLINE</ref> <ref refid="stdint_8h_1aaa5d1cd013383c889537491c3cfd9aad" kindref="member">uint64_t</ref></type>
        <definition>static BLAKE2_INLINE uint64_t load48</definition>
        <argsstring>(const void *src)</argsstring>
        <name>load48</name>
        <param>
          <type>const void *</type>
          <declname>src</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/crypto/argon2/blake2/blake2-impl.h" line="103" column="1" bodyfile="/home/dev/ds-160209/src/crypto/argon2/blake2/blake2-impl.h" bodystart="103" bodyend="112"/>
      </memberdef>
      <memberdef kind="function" id="blake2-impl_8h_1a483438e239ccbdcac772f05db950c23b" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="blake2-impl_8h_1aa47358e2e39f403db8cddffec65337f7" kindref="member">BLAKE2_INLINE</ref> void</type>
        <definition>static BLAKE2_INLINE void store48</definition>
        <argsstring>(void *dst, uint64_t w)</argsstring>
        <name>store48</name>
        <param>
          <type>void *</type>
          <declname>dst</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1aaa5d1cd013383c889537491c3cfd9aad" kindref="member">uint64_t</ref></type>
          <declname>w</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/crypto/argon2/blake2/blake2-impl.h" line="114" column="1" bodyfile="/home/dev/ds-160209/src/crypto/argon2/blake2/blake2-impl.h" bodystart="114" bodyend="127"/>
      </memberdef>
      <memberdef kind="function" id="blake2-impl_8h_1aebb66ddc3ead53b896b261135f3b7e8d" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="blake2-impl_8h_1aa47358e2e39f403db8cddffec65337f7" kindref="member">BLAKE2_INLINE</ref> <ref refid="stdint_8h_1a435d1572bf3f880d55459d9805097f62" kindref="member">uint32_t</ref></type>
        <definition>static BLAKE2_INLINE uint32_t rotr32</definition>
        <argsstring>(const uint32_t w, const unsigned c)</argsstring>
        <name>rotr32</name>
        <param>
          <type>const <ref refid="stdint_8h_1a435d1572bf3f880d55459d9805097f62" kindref="member">uint32_t</ref></type>
          <declname>w</declname>
        </param>
        <param>
          <type>const unsigned</type>
          <declname>c</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/crypto/argon2/blake2/blake2-impl.h" line="129" column="1" bodyfile="/home/dev/ds-160209/src/crypto/argon2/blake2/blake2-impl.h" bodystart="129" bodyend="131"/>
      </memberdef>
      <memberdef kind="function" id="blake2-impl_8h_1ab52b1b61fd0e601a3ee92bbc14f55bcf" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="blake2-impl_8h_1aa47358e2e39f403db8cddffec65337f7" kindref="member">BLAKE2_INLINE</ref> <ref refid="stdint_8h_1aaa5d1cd013383c889537491c3cfd9aad" kindref="member">uint64_t</ref></type>
        <definition>static BLAKE2_INLINE uint64_t rotr64</definition>
        <argsstring>(const uint64_t w, const unsigned c)</argsstring>
        <name>rotr64</name>
        <param>
          <type>const <ref refid="stdint_8h_1aaa5d1cd013383c889537491c3cfd9aad" kindref="member">uint64_t</ref></type>
          <declname>w</declname>
        </param>
        <param>
          <type>const unsigned</type>
          <declname>c</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/crypto/argon2/blake2/blake2-impl.h" line="133" column="1" bodyfile="/home/dev/ds-160209/src/crypto/argon2/blake2/blake2-impl.h" bodystart="133" bodyend="135"/>
      </memberdef>
      <memberdef kind="function" id="blake2-impl_8h_1aab12040e261723bcf08dec2116192971" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="blake2-impl_8h_1aa47358e2e39f403db8cddffec65337f7" kindref="member">BLAKE2_INLINE</ref> void</type>
        <definition>static BLAKE2_INLINE void burn</definition>
        <argsstring>(void *v, size_t n)</argsstring>
        <name>burn</name>
        <param>
          <type>void *</type>
          <declname>v</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>n</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/crypto/argon2/blake2/blake2-impl.h" line="138" column="1" bodyfile="/home/dev/ds-160209/src/crypto/argon2/blake2/blake2-impl.h" bodystart="138" bodyend="141"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#ifndef<sp/>PORTABLE_BLAKE2_IMPL_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>PORTABLE_BLAKE2_IMPL_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="stdint_8h" kindref="compound">stdint.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;string.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(_MSC_VER)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>BLAKE2_INLINE<sp/>__inline</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="preprocessor">#elif<sp/>defined(__GNUC__)<sp/>||<sp/>defined(__clang__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>BLAKE2_INLINE<sp/>__inline__</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12" refid="blake2-impl_8h_1aa47358e2e39f403db8cddffec65337f7" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>BLAKE2_INLINE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Argon2<sp/>Team<sp/>-<sp/>Begin<sp/>Code<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="17"><highlight class="comment"><sp/><sp/><sp/>Not<sp/>an<sp/>exhaustive<sp/>list,<sp/>but<sp/>should<sp/>cover<sp/>the<sp/>majority<sp/>of<sp/>modern<sp/>platforms</highlight></codeline>
<codeline lineno="18"><highlight class="comment"><sp/><sp/><sp/>Additionally,<sp/>the<sp/>code<sp/>will<sp/>always<sp/>be<sp/>correct---this<sp/>is<sp/>only<sp/>a<sp/>performance</highlight></codeline>
<codeline lineno="19"><highlight class="comment"><sp/><sp/><sp/>tweak.</highlight></codeline>
<codeline lineno="20"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>(defined(__BYTE_ORDER__)<sp/>&amp;&amp;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="22"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/>(__BYTE_ORDER__<sp/>==<sp/>__ORDER_LITTLE_ENDIAN__))<sp/>||<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="23"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>defined(__LITTLE_ENDIAN__)<sp/>||<sp/>defined(__ARMEL__)<sp/>||<sp/>defined(__MIPSEL__)<sp/>||<sp/>\</highlight></codeline>
<codeline lineno="24"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>defined(__AARCH64EL__)<sp/>||<sp/>defined(__amd64__)<sp/>||<sp/>defined(__i386__)<sp/>||<sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="25"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>defined(_M_IX86)<sp/>||<sp/>defined(_M_X64)<sp/>||<sp/>defined(_M_AMD64)<sp/>||<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="26"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>defined(_M_ARM)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NATIVE_LITTLE_ENDIAN</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Argon2<sp/>Team<sp/>-<sp/>End<sp/>Code<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="blake2-impl_8h_1aa47358e2e39f403db8cddffec65337f7" kindref="member">BLAKE2_INLINE</ref><sp/><ref refid="stdint_8h_1a435d1572bf3f880d55459d9805097f62" kindref="member">uint32_t</ref><sp/>load32(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*src)<sp/>{</highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(NATIVE_LITTLE_ENDIAN)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="stdint_8h_1a435d1572bf3f880d55459d9805097f62" kindref="member">uint32_t</ref><sp/>w;</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/>memcpy(&amp;w,<sp/>src,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal"><sp/>w);</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>w;</highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="stdint_8h_1aba7bc1797add20fe3efdf37ced1182c5" kindref="member">uint8_t</ref><sp/>*p<sp/>=<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="stdint_8h_1aba7bc1797add20fe3efdf37ced1182c5" kindref="member">uint8_t</ref><sp/>*)src;</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="stdint_8h_1a435d1572bf3f880d55459d9805097f62" kindref="member">uint32_t</ref><sp/>w<sp/>=<sp/>*p++;</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/>w<sp/>|=<sp/>(<ref refid="stdint_8h_1a435d1572bf3f880d55459d9805097f62" kindref="member">uint32_t</ref>)(*p++)<sp/>&lt;&lt;<sp/>8;</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/>w<sp/>|=<sp/>(<ref refid="stdint_8h_1a435d1572bf3f880d55459d9805097f62" kindref="member">uint32_t</ref>)(*p++)<sp/>&lt;&lt;<sp/>16;</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/>w<sp/>|=<sp/>(<ref refid="stdint_8h_1a435d1572bf3f880d55459d9805097f62" kindref="member">uint32_t</ref>)(*p++)<sp/>&lt;&lt;<sp/>24;</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>w;</highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal">}</highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="blake2-impl_8h_1aa47358e2e39f403db8cddffec65337f7" kindref="member">BLAKE2_INLINE</ref><sp/><ref refid="stdint_8h_1aaa5d1cd013383c889537491c3cfd9aad" kindref="member">uint64_t</ref><sp/>load64(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*src)<sp/>{</highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(NATIVE_LITTLE_ENDIAN)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="stdint_8h_1aaa5d1cd013383c889537491c3cfd9aad" kindref="member">uint64_t</ref><sp/>w;</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/>memcpy(&amp;w,<sp/>src,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal"><sp/>w);</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>w;</highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="stdint_8h_1aba7bc1797add20fe3efdf37ced1182c5" kindref="member">uint8_t</ref><sp/>*p<sp/>=<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="stdint_8h_1aba7bc1797add20fe3efdf37ced1182c5" kindref="member">uint8_t</ref><sp/>*)src;</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="stdint_8h_1aaa5d1cd013383c889537491c3cfd9aad" kindref="member">uint64_t</ref><sp/>w<sp/>=<sp/>*p++;</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/>w<sp/>|=<sp/>(<ref refid="stdint_8h_1aaa5d1cd013383c889537491c3cfd9aad" kindref="member">uint64_t</ref>)(*p++)<sp/>&lt;&lt;<sp/>8;</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/>w<sp/>|=<sp/>(<ref refid="stdint_8h_1aaa5d1cd013383c889537491c3cfd9aad" kindref="member">uint64_t</ref>)(*p++)<sp/>&lt;&lt;<sp/>16;</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/>w<sp/>|=<sp/>(<ref refid="stdint_8h_1aaa5d1cd013383c889537491c3cfd9aad" kindref="member">uint64_t</ref>)(*p++)<sp/>&lt;&lt;<sp/>24;</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/>w<sp/>|=<sp/>(<ref refid="stdint_8h_1aaa5d1cd013383c889537491c3cfd9aad" kindref="member">uint64_t</ref>)(*p++)<sp/>&lt;&lt;<sp/>32;</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/>w<sp/>|=<sp/>(<ref refid="stdint_8h_1aaa5d1cd013383c889537491c3cfd9aad" kindref="member">uint64_t</ref>)(*p++)<sp/>&lt;&lt;<sp/>40;</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/>w<sp/>|=<sp/>(<ref refid="stdint_8h_1aaa5d1cd013383c889537491c3cfd9aad" kindref="member">uint64_t</ref>)(*p++)<sp/>&lt;&lt;<sp/>48;</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/>w<sp/>|=<sp/>(<ref refid="stdint_8h_1aaa5d1cd013383c889537491c3cfd9aad" kindref="member">uint64_t</ref>)(*p++)<sp/>&lt;&lt;<sp/>56;</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>w;</highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="63"><highlight class="normal">}</highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="blake2-impl_8h_1aa47358e2e39f403db8cddffec65337f7" kindref="member">BLAKE2_INLINE</ref><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>store32(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*dst,<sp/><ref refid="stdint_8h_1a435d1572bf3f880d55459d9805097f62" kindref="member">uint32_t</ref><sp/>w)<sp/>{</highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(NATIVE_LITTLE_ENDIAN)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/>memcpy(dst,<sp/>&amp;w,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal"><sp/>w);</highlight></codeline>
<codeline lineno="68"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="stdint_8h_1aba7bc1797add20fe3efdf37ced1182c5" kindref="member">uint8_t</ref><sp/>*p<sp/>=<sp/>(<ref refid="stdint_8h_1aba7bc1797add20fe3efdf37ced1182c5" kindref="member">uint8_t</ref><sp/>*)dst;</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/>*p++<sp/>=<sp/>(<ref refid="stdint_8h_1aba7bc1797add20fe3efdf37ced1182c5" kindref="member">uint8_t</ref>)w;</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/>w<sp/>&gt;&gt;=<sp/>8;</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/>*p++<sp/>=<sp/>(<ref refid="stdint_8h_1aba7bc1797add20fe3efdf37ced1182c5" kindref="member">uint8_t</ref>)w;</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/>w<sp/>&gt;&gt;=<sp/>8;</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/>*p++<sp/>=<sp/>(<ref refid="stdint_8h_1aba7bc1797add20fe3efdf37ced1182c5" kindref="member">uint8_t</ref>)w;</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/>w<sp/>&gt;&gt;=<sp/>8;</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/>*p++<sp/>=<sp/>(<ref refid="stdint_8h_1aba7bc1797add20fe3efdf37ced1182c5" kindref="member">uint8_t</ref>)w;</highlight></codeline>
<codeline lineno="77"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="78"><highlight class="normal">}</highlight></codeline>
<codeline lineno="79"><highlight class="normal"></highlight></codeline>
<codeline lineno="80"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="blake2-impl_8h_1aa47358e2e39f403db8cddffec65337f7" kindref="member">BLAKE2_INLINE</ref><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>store64(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*dst,<sp/><ref refid="stdint_8h_1aaa5d1cd013383c889537491c3cfd9aad" kindref="member">uint64_t</ref><sp/>w)<sp/>{</highlight></codeline>
<codeline lineno="81"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(NATIVE_LITTLE_ENDIAN)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/>memcpy(dst,<sp/>&amp;w,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal"><sp/>w);</highlight></codeline>
<codeline lineno="83"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="stdint_8h_1aba7bc1797add20fe3efdf37ced1182c5" kindref="member">uint8_t</ref><sp/>*p<sp/>=<sp/>(<ref refid="stdint_8h_1aba7bc1797add20fe3efdf37ced1182c5" kindref="member">uint8_t</ref><sp/>*)dst;</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/>*p++<sp/>=<sp/>(<ref refid="stdint_8h_1aba7bc1797add20fe3efdf37ced1182c5" kindref="member">uint8_t</ref>)w;</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/>w<sp/>&gt;&gt;=<sp/>8;</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/>*p++<sp/>=<sp/>(<ref refid="stdint_8h_1aba7bc1797add20fe3efdf37ced1182c5" kindref="member">uint8_t</ref>)w;</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/>w<sp/>&gt;&gt;=<sp/>8;</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/>*p++<sp/>=<sp/>(<ref refid="stdint_8h_1aba7bc1797add20fe3efdf37ced1182c5" kindref="member">uint8_t</ref>)w;</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/>w<sp/>&gt;&gt;=<sp/>8;</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/>*p++<sp/>=<sp/>(<ref refid="stdint_8h_1aba7bc1797add20fe3efdf37ced1182c5" kindref="member">uint8_t</ref>)w;</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/>w<sp/>&gt;&gt;=<sp/>8;</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/>*p++<sp/>=<sp/>(<ref refid="stdint_8h_1aba7bc1797add20fe3efdf37ced1182c5" kindref="member">uint8_t</ref>)w;</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/>w<sp/>&gt;&gt;=<sp/>8;</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/>*p++<sp/>=<sp/>(<ref refid="stdint_8h_1aba7bc1797add20fe3efdf37ced1182c5" kindref="member">uint8_t</ref>)w;</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/>w<sp/>&gt;&gt;=<sp/>8;</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/>*p++<sp/>=<sp/>(<ref refid="stdint_8h_1aba7bc1797add20fe3efdf37ced1182c5" kindref="member">uint8_t</ref>)w;</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/>w<sp/>&gt;&gt;=<sp/>8;</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/>*p++<sp/>=<sp/>(<ref refid="stdint_8h_1aba7bc1797add20fe3efdf37ced1182c5" kindref="member">uint8_t</ref>)w;</highlight></codeline>
<codeline lineno="100"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="101"><highlight class="normal">}</highlight></codeline>
<codeline lineno="102"><highlight class="normal"></highlight></codeline>
<codeline lineno="103"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="blake2-impl_8h_1aa47358e2e39f403db8cddffec65337f7" kindref="member">BLAKE2_INLINE</ref><sp/><ref refid="stdint_8h_1aaa5d1cd013383c889537491c3cfd9aad" kindref="member">uint64_t</ref><sp/>load48(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*src)<sp/>{</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="stdint_8h_1aba7bc1797add20fe3efdf37ced1182c5" kindref="member">uint8_t</ref><sp/>*p<sp/>=<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="stdint_8h_1aba7bc1797add20fe3efdf37ced1182c5" kindref="member">uint8_t</ref><sp/>*)src;</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="stdint_8h_1aaa5d1cd013383c889537491c3cfd9aad" kindref="member">uint64_t</ref><sp/>w<sp/>=<sp/>*p++;</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/>w<sp/>|=<sp/>(<ref refid="stdint_8h_1aaa5d1cd013383c889537491c3cfd9aad" kindref="member">uint64_t</ref>)(*p++)<sp/>&lt;&lt;<sp/>8;</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/>w<sp/>|=<sp/>(<ref refid="stdint_8h_1aaa5d1cd013383c889537491c3cfd9aad" kindref="member">uint64_t</ref>)(*p++)<sp/>&lt;&lt;<sp/>16;</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/>w<sp/>|=<sp/>(<ref refid="stdint_8h_1aaa5d1cd013383c889537491c3cfd9aad" kindref="member">uint64_t</ref>)(*p++)<sp/>&lt;&lt;<sp/>24;</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/>w<sp/>|=<sp/>(<ref refid="stdint_8h_1aaa5d1cd013383c889537491c3cfd9aad" kindref="member">uint64_t</ref>)(*p++)<sp/>&lt;&lt;<sp/>32;</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/>w<sp/>|=<sp/>(<ref refid="stdint_8h_1aaa5d1cd013383c889537491c3cfd9aad" kindref="member">uint64_t</ref>)(*p++)<sp/>&lt;&lt;<sp/>40;</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>w;</highlight></codeline>
<codeline lineno="112"><highlight class="normal">}</highlight></codeline>
<codeline lineno="113"><highlight class="normal"></highlight></codeline>
<codeline lineno="114"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="blake2-impl_8h_1aa47358e2e39f403db8cddffec65337f7" kindref="member">BLAKE2_INLINE</ref><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>store48(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*dst,<sp/><ref refid="stdint_8h_1aaa5d1cd013383c889537491c3cfd9aad" kindref="member">uint64_t</ref><sp/>w)<sp/>{</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="stdint_8h_1aba7bc1797add20fe3efdf37ced1182c5" kindref="member">uint8_t</ref><sp/>*p<sp/>=<sp/>(<ref refid="stdint_8h_1aba7bc1797add20fe3efdf37ced1182c5" kindref="member">uint8_t</ref><sp/>*)dst;</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/>*p++<sp/>=<sp/>(<ref refid="stdint_8h_1aba7bc1797add20fe3efdf37ced1182c5" kindref="member">uint8_t</ref>)w;</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/>w<sp/>&gt;&gt;=<sp/>8;</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/>*p++<sp/>=<sp/>(<ref refid="stdint_8h_1aba7bc1797add20fe3efdf37ced1182c5" kindref="member">uint8_t</ref>)w;</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/>w<sp/>&gt;&gt;=<sp/>8;</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/>*p++<sp/>=<sp/>(<ref refid="stdint_8h_1aba7bc1797add20fe3efdf37ced1182c5" kindref="member">uint8_t</ref>)w;</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/>w<sp/>&gt;&gt;=<sp/>8;</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/>*p++<sp/>=<sp/>(<ref refid="stdint_8h_1aba7bc1797add20fe3efdf37ced1182c5" kindref="member">uint8_t</ref>)w;</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/>w<sp/>&gt;&gt;=<sp/>8;</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/>*p++<sp/>=<sp/>(<ref refid="stdint_8h_1aba7bc1797add20fe3efdf37ced1182c5" kindref="member">uint8_t</ref>)w;</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/>w<sp/>&gt;&gt;=<sp/>8;</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/>*p++<sp/>=<sp/>(<ref refid="stdint_8h_1aba7bc1797add20fe3efdf37ced1182c5" kindref="member">uint8_t</ref>)w;</highlight></codeline>
<codeline lineno="127"><highlight class="normal">}</highlight></codeline>
<codeline lineno="128"><highlight class="normal"></highlight></codeline>
<codeline lineno="129"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="blake2-impl_8h_1aa47358e2e39f403db8cddffec65337f7" kindref="member">BLAKE2_INLINE</ref><sp/><ref refid="stdint_8h_1a435d1572bf3f880d55459d9805097f62" kindref="member">uint32_t</ref><sp/>rotr32(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="stdint_8h_1a435d1572bf3f880d55459d9805097f62" kindref="member">uint32_t</ref><sp/>w,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>c)<sp/>{</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(w<sp/>&gt;&gt;<sp/>c)<sp/>|<sp/>(w<sp/>&lt;&lt;<sp/>(32<sp/>-<sp/>c));</highlight></codeline>
<codeline lineno="131"><highlight class="normal">}</highlight></codeline>
<codeline lineno="132"><highlight class="normal"></highlight></codeline>
<codeline lineno="133"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="blake2-impl_8h_1aa47358e2e39f403db8cddffec65337f7" kindref="member">BLAKE2_INLINE</ref><sp/><ref refid="stdint_8h_1aaa5d1cd013383c889537491c3cfd9aad" kindref="member">uint64_t</ref><sp/>rotr64(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="stdint_8h_1aaa5d1cd013383c889537491c3cfd9aad" kindref="member">uint64_t</ref><sp/>w,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>c)<sp/>{</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(w<sp/>&gt;&gt;<sp/>c)<sp/>|<sp/>(w<sp/>&lt;&lt;<sp/>(64<sp/>-<sp/>c));</highlight></codeline>
<codeline lineno="135"><highlight class="normal">}</highlight></codeline>
<codeline lineno="136"><highlight class="normal"></highlight></codeline>
<codeline lineno="137"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>prevents<sp/>compiler<sp/>optimizing<sp/>out<sp/>memset()<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="138"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="blake2-impl_8h_1aa47358e2e39f403db8cddffec65337f7" kindref="member">BLAKE2_INLINE</ref><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>burn(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*v,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>n)<sp/>{</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*(*</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/>memset_v)(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">)<sp/>=<sp/>&amp;memset;</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/>memset_v(v,<sp/>0,<sp/>n);</highlight></codeline>
<codeline lineno="141"><highlight class="normal">}</highlight></codeline>
<codeline lineno="142"><highlight class="normal"></highlight></codeline>
<codeline lineno="143"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
    </programlisting>
    <location file="/home/dev/ds-160209/src/crypto/argon2/blake2/blake2-impl.h"/>
  </compounddef>
</doxygen>
