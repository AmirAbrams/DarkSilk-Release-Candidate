<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.9.1">
  <compounddef id="num_8h" kind="file" language="C++">
    <compoundname>num.h</compoundname>
    <includedby refid="num__impl_8h" local="yes">/home/dev/ds-160209/src/secp256k1/src/num_impl.h</includedby>
    <includedby refid="group__impl_8h" local="yes">/home/dev/ds-160209/src/secp256k1/src/group_impl.h</includedby>
    <includedby refid="group_8h" local="yes">/home/dev/ds-160209/src/secp256k1/src/group.h</includedby>
    <includedby refid="scalar_8h" local="yes">/home/dev/ds-160209/src/secp256k1/src/scalar.h</includedby>
    <includedby refid="ecmult_8h" local="yes">/home/dev/ds-160209/src/secp256k1/src/ecmult.h</includedby>
    <includedby refid="field__10x26__impl_8h" local="yes">/home/dev/ds-160209/src/secp256k1/src/field_10x26_impl.h</includedby>
    <includedby refid="field__5x52__impl_8h" local="yes">/home/dev/ds-160209/src/secp256k1/src/field_5x52_impl.h</includedby>
    <includedby refid="schnorr__impl_8h" local="yes">/home/dev/ds-160209/src/secp256k1/src/modules/schnorr/schnorr_impl.h</includedby>
    <includedby refid="num__gmp__impl_8h" local="yes">/home/dev/ds-160209/src/secp256k1/src/num_gmp_impl.h</includedby>
    <invincdepgraph>
      <node id="52056">
        <label>/home/dev/ds-160209/src/secp256k1/src/scalar.h</label>
        <link refid="scalar_8h"/>
        <childnode refid="52040" relation="include">
        </childnode>
        <childnode refid="52041" relation="include">
        </childnode>
        <childnode refid="52043" relation="include">
        </childnode>
        <childnode refid="52044" relation="include">
        </childnode>
        <childnode refid="52052" relation="include">
        </childnode>
        <childnode refid="52053" relation="include">
        </childnode>
        <childnode refid="52046" relation="include">
        </childnode>
        <childnode refid="52047" relation="include">
        </childnode>
        <childnode refid="52048" relation="include">
        </childnode>
        <childnode refid="52049" relation="include">
        </childnode>
        <childnode refid="52055" relation="include">
        </childnode>
      </node>
      <node id="52044">
        <label>/home/dev/ds-160209/src/secp256k1/src/ecmult_impl.h</label>
        <link refid="ecmult__impl_8h"/>
        <childnode refid="52041" relation="include">
        </childnode>
        <childnode refid="52034" relation="include">
        </childnode>
        <childnode refid="52035" relation="include">
        </childnode>
      </node>
      <node id="52040">
        <label>/home/dev/ds-160209/src/secp256k1/src/scalar_impl.h</label>
        <link refid="scalar__impl_8h"/>
        <childnode refid="52034" relation="include">
        </childnode>
        <childnode refid="52035" relation="include">
        </childnode>
        <childnode refid="52038" relation="include">
        </childnode>
      </node>
      <node id="52054">
        <label>/home/dev/ds-160209/src/secp256k1/src/ecmult_static_context.h</label>
        <link refid="ecmult__static__context_8h"/>
      </node>
      <node id="52055">
        <label>/home/dev/ds-160209/src/secp256k1/src/modules/schnorr/schnorr.h</label>
        <link refid="schnorr_8h"/>
        <childnode refid="52050" relation="include">
        </childnode>
      </node>
      <node id="52038">
        <label>/home/dev/ds-160209/src/secp256k1/src/gen_context.c</label>
        <link refid="gen__context_8c"/>
      </node>
      <node id="52032">
        <label>/home/dev/ds-160209/src/secp256k1/src/num.h</label>
        <link refid="num.h"/>
        <childnode refid="52033" relation="include">
        </childnode>
        <childnode refid="52037" relation="include">
        </childnode>
        <childnode refid="52039" relation="include">
        </childnode>
        <childnode refid="52056" relation="include">
        </childnode>
        <childnode refid="52045" relation="include">
        </childnode>
        <childnode refid="52057" relation="include">
        </childnode>
        <childnode refid="52058" relation="include">
        </childnode>
        <childnode refid="52050" relation="include">
        </childnode>
        <childnode refid="52059" relation="include">
        </childnode>
      </node>
      <node id="52039">
        <label>/home/dev/ds-160209/src/secp256k1/src/group.h</label>
        <link refid="group_8h"/>
        <childnode refid="52037" relation="include">
        </childnode>
        <childnode refid="52040" relation="include">
        </childnode>
        <childnode refid="52041" relation="include">
        </childnode>
        <childnode refid="52043" relation="include">
        </childnode>
        <childnode refid="52044" relation="include">
        </childnode>
        <childnode refid="52045" relation="include">
        </childnode>
        <childnode refid="52052" relation="include">
        </childnode>
        <childnode refid="52053" relation="include">
        </childnode>
        <childnode refid="52046" relation="include">
        </childnode>
        <childnode refid="52047" relation="include">
        </childnode>
        <childnode refid="52048" relation="include">
        </childnode>
        <childnode refid="52049" relation="include">
        </childnode>
        <childnode refid="52054" relation="include">
        </childnode>
        <childnode refid="52055" relation="include">
        </childnode>
        <childnode refid="52050" relation="include">
        </childnode>
      </node>
      <node id="52058">
        <label>/home/dev/ds-160209/src/secp256k1/src/field_5x52_impl.h</label>
        <link refid="field__5x52__impl_8h"/>
      </node>
      <node id="52036">
        <label>/home/dev/ds-160209/src/secp256k1/src/tests.c</label>
        <link refid="tests_8c"/>
      </node>
      <node id="52050">
        <label>/home/dev/ds-160209/src/secp256k1/src/modules/schnorr/schnorr_impl.h</label>
        <link refid="schnorr__impl_8h"/>
        <childnode refid="52051" relation="include">
        </childnode>
      </node>
      <node id="52051">
        <label>/home/dev/ds-160209/src/secp256k1/src/modules/schnorr/main_impl.h</label>
        <link refid="schnorr_2main__impl_8h"/>
      </node>
      <node id="52042">
        <label>/home/dev/ds-160209/src/secp256k1/src/modules/ecdh/main_impl.h</label>
        <link refid="ecdh_2main__impl_8h"/>
      </node>
      <node id="52035">
        <label>/home/dev/ds-160209/src/secp256k1/src/secp256k1.c</label>
        <link refid="secp256k1_8c"/>
        <childnode refid="52034" relation="include">
        </childnode>
        <childnode refid="52036" relation="include">
        </childnode>
      </node>
      <node id="52045">
        <label>/home/dev/ds-160209/src/secp256k1/src/ecmult.h</label>
        <link refid="ecmult_8h"/>
        <childnode refid="52044" relation="include">
        </childnode>
        <childnode refid="52046" relation="include">
        </childnode>
        <childnode refid="52047" relation="include">
        </childnode>
        <childnode refid="52048" relation="include">
        </childnode>
        <childnode refid="52050" relation="include">
        </childnode>
      </node>
      <node id="52037">
        <label>/home/dev/ds-160209/src/secp256k1/src/group_impl.h</label>
        <link refid="group__impl_8h"/>
        <childnode refid="52034" relation="include">
        </childnode>
        <childnode refid="52035" relation="include">
        </childnode>
        <childnode refid="52038" relation="include">
        </childnode>
      </node>
      <node id="52033">
        <label>/home/dev/ds-160209/src/secp256k1/src/num_impl.h</label>
        <link refid="num__impl_8h"/>
        <childnode refid="52034" relation="include">
        </childnode>
        <childnode refid="52035" relation="include">
        </childnode>
      </node>
      <node id="52053">
        <label>/home/dev/ds-160209/src/secp256k1/src/ecmult_gen.h</label>
        <link refid="ecmult__gen_8h"/>
        <childnode refid="52052" relation="include">
        </childnode>
        <childnode refid="52046" relation="include">
        </childnode>
        <childnode refid="52048" relation="include">
        </childnode>
        <childnode refid="52049" relation="include">
        </childnode>
        <childnode refid="52050" relation="include">
        </childnode>
      </node>
      <node id="52057">
        <label>/home/dev/ds-160209/src/secp256k1/src/field_10x26_impl.h</label>
        <link refid="field__10x26__impl_8h"/>
      </node>
      <node id="52049">
        <label>/home/dev/ds-160209/src/secp256k1/src/eckey_impl.h</label>
        <link refid="eckey__impl_8h"/>
        <childnode refid="52035" relation="include">
        </childnode>
      </node>
      <node id="52041">
        <label>/home/dev/ds-160209/src/secp256k1/src/ecmult_const_impl.h</label>
        <link refid="ecmult__const__impl_8h"/>
        <childnode refid="52034" relation="include">
        </childnode>
        <childnode refid="52035" relation="include">
        </childnode>
        <childnode refid="52042" relation="include">
        </childnode>
      </node>
      <node id="52047">
        <label>/home/dev/ds-160209/src/secp256k1/src/ecdsa.h</label>
        <link refid="ecdsa_8h"/>
        <childnode refid="52046" relation="include">
        </childnode>
      </node>
      <node id="52043">
        <label>/home/dev/ds-160209/src/secp256k1/src/ecmult_const.h</label>
        <link refid="ecmult__const_8h"/>
        <childnode refid="52041" relation="include">
        </childnode>
      </node>
      <node id="52048">
        <label>/home/dev/ds-160209/src/secp256k1/src/eckey.h</label>
        <link refid="eckey_8h"/>
        <childnode refid="52049" relation="include">
        </childnode>
      </node>
      <node id="52034">
        <label>/home/dev/ds-160209/src/secp256k1/src/bench_internal.c</label>
        <link refid="bench__internal_8c"/>
      </node>
      <node id="52052">
        <label>/home/dev/ds-160209/src/secp256k1/src/ecmult_gen_impl.h</label>
        <link refid="ecmult__gen__impl_8h"/>
        <childnode refid="52035" relation="include">
        </childnode>
        <childnode refid="52038" relation="include">
        </childnode>
      </node>
      <node id="52059">
        <label>/home/dev/ds-160209/src/secp256k1/src/num_gmp_impl.h</label>
        <link refid="num__gmp__impl_8h"/>
      </node>
      <node id="52046">
        <label>/home/dev/ds-160209/src/secp256k1/src/ecdsa_impl.h</label>
        <link refid="ecdsa__impl_8h"/>
        <childnode refid="52035" relation="include">
        </childnode>
      </node>
    </invincdepgraph>
      <sectiondef kind="func">
      <memberdef kind="function" id="num_8h_1a8e164da794a6a512b0bce7a2339d35f9" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void secp256k1_num_copy</definition>
        <argsstring>(secp256k1_num *r, const secp256k1_num *a)</argsstring>
        <name>secp256k1_num_copy</name>
        <param>
          <type><ref refid="structsecp256k1__num" kindref="compound">secp256k1_num</ref> *</type>
          <declname>r</declname>
        </param>
        <param>
          <type>const <ref refid="structsecp256k1__num" kindref="compound">secp256k1_num</ref> *</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Copy a number. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/secp256k1/src/num.h" line="23" column="1"/>
      </memberdef>
      <memberdef kind="function" id="num_8h_1aada7ead84b86388284323f31b9d05bca" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void secp256k1_num_get_bin</definition>
        <argsstring>(unsigned char *r, unsigned int rlen, const secp256k1_num *a)</argsstring>
        <name>secp256k1_num_get_bin</name>
        <param>
          <type>unsigned char *</type>
          <declname>r</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>rlen</declname>
        </param>
        <param>
          <type>const <ref refid="structsecp256k1__num" kindref="compound">secp256k1_num</ref> *</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Convert a number&apos;s absolute value to a binary big-endian string. There must be enough place. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/secp256k1/src/num.h" line="27" column="1"/>
      </memberdef>
      <memberdef kind="function" id="num_8h_1a4a7f500a93d330df44bbe3adda388868" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void secp256k1_num_set_bin</definition>
        <argsstring>(secp256k1_num *r, const unsigned char *a, unsigned int alen)</argsstring>
        <name>secp256k1_num_set_bin</name>
        <param>
          <type><ref refid="structsecp256k1__num" kindref="compound">secp256k1_num</ref> *</type>
          <declname>r</declname>
        </param>
        <param>
          <type>const unsigned char *</type>
          <declname>a</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>alen</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Set a number to the value of a binary big-endian string. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/secp256k1/src/num.h" line="30" column="1"/>
      </memberdef>
      <memberdef kind="function" id="num_8h_1a96a66a341ddf203e7dbf85d1cca1c178" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void secp256k1_num_mod_inverse</definition>
        <argsstring>(secp256k1_num *r, const secp256k1_num *a, const secp256k1_num *m)</argsstring>
        <name>secp256k1_num_mod_inverse</name>
        <param>
          <type><ref refid="structsecp256k1__num" kindref="compound">secp256k1_num</ref> *</type>
          <declname>r</declname>
        </param>
        <param>
          <type>const <ref refid="structsecp256k1__num" kindref="compound">secp256k1_num</ref> *</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="structsecp256k1__num" kindref="compound">secp256k1_num</ref> *</type>
          <declname>m</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Compute a modular inverse. The input must be less than the modulus. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/secp256k1/src/num.h" line="33" column="1"/>
      </memberdef>
      <memberdef kind="function" id="num_8h_1a2ede1c020471b52d634890089c5374be" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>static int secp256k1_num_cmp</definition>
        <argsstring>(const secp256k1_num *a, const secp256k1_num *b)</argsstring>
        <name>secp256k1_num_cmp</name>
        <param>
          <type>const <ref refid="structsecp256k1__num" kindref="compound">secp256k1_num</ref> *</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="structsecp256k1__num" kindref="compound">secp256k1_num</ref> *</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Compare the absolute value of two numbers. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/secp256k1/src/num.h" line="36" column="1"/>
      </memberdef>
      <memberdef kind="function" id="num_8h_1a8763cac72f4a6760d12cb93897f468c5" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>static int secp256k1_num_eq</definition>
        <argsstring>(const secp256k1_num *a, const secp256k1_num *b)</argsstring>
        <name>secp256k1_num_eq</name>
        <param>
          <type>const <ref refid="structsecp256k1__num" kindref="compound">secp256k1_num</ref> *</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="structsecp256k1__num" kindref="compound">secp256k1_num</ref> *</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Test whether two number are equal (including sign). </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/secp256k1/src/num.h" line="39" column="1"/>
      </memberdef>
      <memberdef kind="function" id="num_8h_1a2a2407a291e6646a94ade2d5c90f961b" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void secp256k1_num_add</definition>
        <argsstring>(secp256k1_num *r, const secp256k1_num *a, const secp256k1_num *b)</argsstring>
        <name>secp256k1_num_add</name>
        <param>
          <type><ref refid="structsecp256k1__num" kindref="compound">secp256k1_num</ref> *</type>
          <declname>r</declname>
        </param>
        <param>
          <type>const <ref refid="structsecp256k1__num" kindref="compound">secp256k1_num</ref> *</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="structsecp256k1__num" kindref="compound">secp256k1_num</ref> *</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Add two (signed) numbers. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/secp256k1/src/num.h" line="42" column="1"/>
      </memberdef>
      <memberdef kind="function" id="num_8h_1ad5ad0fd05f4f7d29d75f92fa540ede0a" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void secp256k1_num_sub</definition>
        <argsstring>(secp256k1_num *r, const secp256k1_num *a, const secp256k1_num *b)</argsstring>
        <name>secp256k1_num_sub</name>
        <param>
          <type><ref refid="structsecp256k1__num" kindref="compound">secp256k1_num</ref> *</type>
          <declname>r</declname>
        </param>
        <param>
          <type>const <ref refid="structsecp256k1__num" kindref="compound">secp256k1_num</ref> *</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="structsecp256k1__num" kindref="compound">secp256k1_num</ref> *</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Subtract two (signed) numbers. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/secp256k1/src/num.h" line="45" column="1"/>
      </memberdef>
      <memberdef kind="function" id="num_8h_1a3a5b983d5028a690f4446c10f78c2978" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void secp256k1_num_mul</definition>
        <argsstring>(secp256k1_num *r, const secp256k1_num *a, const secp256k1_num *b)</argsstring>
        <name>secp256k1_num_mul</name>
        <param>
          <type><ref refid="structsecp256k1__num" kindref="compound">secp256k1_num</ref> *</type>
          <declname>r</declname>
        </param>
        <param>
          <type>const <ref refid="structsecp256k1__num" kindref="compound">secp256k1_num</ref> *</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="structsecp256k1__num" kindref="compound">secp256k1_num</ref> *</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Multiply two (signed) numbers. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/secp256k1/src/num.h" line="48" column="1"/>
      </memberdef>
      <memberdef kind="function" id="num_8h_1af30b363582f76292c16da36d8240bbed" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void secp256k1_num_mod</definition>
        <argsstring>(secp256k1_num *r, const secp256k1_num *m)</argsstring>
        <name>secp256k1_num_mod</name>
        <param>
          <type><ref refid="structsecp256k1__num" kindref="compound">secp256k1_num</ref> *</type>
          <declname>r</declname>
        </param>
        <param>
          <type>const <ref refid="structsecp256k1__num" kindref="compound">secp256k1_num</ref> *</type>
          <declname>m</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Replace a number by its remainder modulo m. M&apos;s sign is ignored. The result is a number between 0 and m-1, even if r was negative. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/secp256k1/src/num.h" line="52" column="1"/>
      </memberdef>
      <memberdef kind="function" id="num_8h_1adc4af999a060e6310b0fdeb99418b31c" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void secp256k1_num_shift</definition>
        <argsstring>(secp256k1_num *r, int bits)</argsstring>
        <name>secp256k1_num_shift</name>
        <param>
          <type><ref refid="structsecp256k1__num" kindref="compound">secp256k1_num</ref> *</type>
          <declname>r</declname>
        </param>
        <param>
          <type>int</type>
          <declname>bits</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Right-shift the passed number by bits bits. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/secp256k1/src/num.h" line="55" column="1"/>
      </memberdef>
      <memberdef kind="function" id="num_8h_1ad15ded36e7a6704a702666bd2fd5cbff" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>static int secp256k1_num_is_zero</definition>
        <argsstring>(const secp256k1_num *a)</argsstring>
        <name>secp256k1_num_is_zero</name>
        <param>
          <type>const <ref refid="structsecp256k1__num" kindref="compound">secp256k1_num</ref> *</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Check whether a number is zero. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/secp256k1/src/num.h" line="58" column="1"/>
      </memberdef>
      <memberdef kind="function" id="num_8h_1a15349a6540e199082bde2ce0466d82cb" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>static int secp256k1_num_is_neg</definition>
        <argsstring>(const secp256k1_num *a)</argsstring>
        <name>secp256k1_num_is_neg</name>
        <param>
          <type>const <ref refid="structsecp256k1__num" kindref="compound">secp256k1_num</ref> *</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Check whether a number is strictly negative. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/secp256k1/src/num.h" line="61" column="1"/>
      </memberdef>
      <memberdef kind="function" id="num_8h_1a678834381238e96e24f63c317740df95" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void secp256k1_num_negate</definition>
        <argsstring>(secp256k1_num *r)</argsstring>
        <name>secp256k1_num_negate</name>
        <param>
          <type><ref refid="structsecp256k1__num" kindref="compound">secp256k1_num</ref> *</type>
          <declname>r</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Change a number&apos;s sign. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/secp256k1/src/num.h" line="64" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/**********************************************************************</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/>*<sp/>Copyright<sp/>(c)<sp/>2013,<sp/>2014<sp/>Pieter<sp/>Wuille<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*<sp/>Distributed<sp/>under<sp/>the<sp/>MIT<sp/>software<sp/>license,<sp/>see<sp/>the<sp/>accompanying<sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*<sp/>file<sp/>COPYING<sp/>or<sp/>http://www.opensource.org/licenses/mit-license.php.*</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/>**********************************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>_SECP256K1_NUM_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>_SECP256K1_NUM_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>USE_NUM_NONE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined<sp/>HAVE_CONFIG_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="libsecp256k1-config_8h" kindref="compound">libsecp256k1-config.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(USE_NUM_GMP)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="num__gmp_8h" kindref="compound">num_gmp.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="preprocessor">#error<sp/>&quot;Please<sp/>select<sp/>num<sp/>implementation&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>secp256k1_num_copy(<ref refid="structsecp256k1__num" kindref="compound">secp256k1_num</ref><sp/>*r,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structsecp256k1__num" kindref="compound">secp256k1_num</ref><sp/>*a);</highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>secp256k1_num_get_bin(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*r,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>rlen,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structsecp256k1__num" kindref="compound">secp256k1_num</ref><sp/>*a);</highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>secp256k1_num_set_bin(<ref refid="structsecp256k1__num" kindref="compound">secp256k1_num</ref><sp/>*r,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*a,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>alen);</highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>secp256k1_num_mod_inverse(<ref refid="structsecp256k1__num" kindref="compound">secp256k1_num</ref><sp/>*r,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structsecp256k1__num" kindref="compound">secp256k1_num</ref><sp/>*a,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structsecp256k1__num" kindref="compound">secp256k1_num</ref><sp/>*m);</highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>secp256k1_num_cmp(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structsecp256k1__num" kindref="compound">secp256k1_num</ref><sp/>*a,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structsecp256k1__num" kindref="compound">secp256k1_num</ref><sp/>*b);</highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>secp256k1_num_eq(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structsecp256k1__num" kindref="compound">secp256k1_num</ref><sp/>*a,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structsecp256k1__num" kindref="compound">secp256k1_num</ref><sp/>*b);</highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>secp256k1_num_add(<ref refid="structsecp256k1__num" kindref="compound">secp256k1_num</ref><sp/>*r,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structsecp256k1__num" kindref="compound">secp256k1_num</ref><sp/>*a,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structsecp256k1__num" kindref="compound">secp256k1_num</ref><sp/>*b);</highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>secp256k1_num_sub(<ref refid="structsecp256k1__num" kindref="compound">secp256k1_num</ref><sp/>*r,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structsecp256k1__num" kindref="compound">secp256k1_num</ref><sp/>*a,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structsecp256k1__num" kindref="compound">secp256k1_num</ref><sp/>*b);</highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>secp256k1_num_mul(<ref refid="structsecp256k1__num" kindref="compound">secp256k1_num</ref><sp/>*r,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structsecp256k1__num" kindref="compound">secp256k1_num</ref><sp/>*a,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structsecp256k1__num" kindref="compound">secp256k1_num</ref><sp/>*b);</highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>secp256k1_num_mod(<ref refid="structsecp256k1__num" kindref="compound">secp256k1_num</ref><sp/>*r,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structsecp256k1__num" kindref="compound">secp256k1_num</ref><sp/>*m);</highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>secp256k1_num_shift(<ref refid="structsecp256k1__num" kindref="compound">secp256k1_num</ref><sp/>*r,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>bits);</highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>secp256k1_num_is_zero(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structsecp256k1__num" kindref="compound">secp256k1_num</ref><sp/>*a);</highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight></codeline>
<codeline lineno="61"><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>secp256k1_num_is_neg(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structsecp256k1__num" kindref="compound">secp256k1_num</ref><sp/>*a);</highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight></codeline>
<codeline lineno="64"><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>secp256k1_num_negate(<ref refid="structsecp256k1__num" kindref="compound">secp256k1_num</ref><sp/>*r);</highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight></codeline>
<codeline lineno="68"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
    </programlisting>
    <location file="/home/dev/ds-160209/src/secp256k1/src/num.h"/>
  </compounddef>
</doxygen>
