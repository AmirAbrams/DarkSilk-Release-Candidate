<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.9.1">
  <compounddef id="db__bench_8cc" kind="file" language="C++">
    <compoundname>db_bench.cc</compoundname>
    <includes local="no">sys/types.h</includes>
    <includes local="no">stdio.h</includes>
    <includes local="no">stdlib.h</includes>
    <includes refid="db__impl_8h" local="yes">db/db_impl.h</includes>
    <includes refid="version__set_8h" local="yes">db/version_set.h</includes>
    <includes refid="cache_8h" local="yes">leveldb/cache.h</includes>
    <includes refid="leveldb_2include_2leveldb_2db_8h" local="yes">leveldb/db.h</includes>
    <includes refid="env_8h" local="yes">leveldb/env.h</includes>
    <includes refid="write__batch_8h" local="yes">leveldb/write_batch.h</includes>
    <includes refid="port_8h" local="yes">port/port.h</includes>
    <includes refid="crc32c_8h" local="yes">util/crc32c.h</includes>
    <includes refid="histogram_8h" local="yes">util/histogram.h</includes>
    <includes refid="mutexlock_8h" local="yes">util/mutexlock.h</includes>
    <includes refid="random_8h" local="yes">util/random.h</includes>
    <includes refid="testutil_8h" local="yes">util/testutil.h</includes>
    <incdepgraph>
      <node id="36278">
        <label>leveldb/write_batch.h</label>
        <link refid="write__batch_8h"/>
        <childnode refid="36251" relation="include">
        </childnode>
        <childnode refid="36259" relation="include">
        </childnode>
      </node>
      <node id="36271">
        <label>stdarg.h</label>
      </node>
      <node id="36281">
        <label>util/mutexlock.h</label>
        <link refid="mutexlock_8h"/>
        <childnode refid="36264" relation="include">
        </childnode>
        <childnode refid="36272" relation="include">
        </childnode>
      </node>
      <node id="36282">
        <label>util/random.h</label>
        <link refid="random_8h"/>
        <childnode refid="36253" relation="include">
        </childnode>
      </node>
      <node id="36265">
        <label>util/logging.h</label>
        <link refid="logging_8h"/>
        <childnode refid="36244" relation="include">
        </childnode>
        <childnode refid="36253" relation="include">
        </childnode>
        <childnode refid="36251" relation="include">
        </childnode>
        <childnode refid="36264" relation="include">
        </childnode>
      </node>
      <node id="36256">
        <label>assert.h</label>
      </node>
      <node id="36260">
        <label>leveldb/options.h</label>
        <link refid="options_8h"/>
        <childnode refid="36257" relation="include">
        </childnode>
      </node>
      <node id="36275">
        <label>db/version_edit.h</label>
        <link refid="version__edit_8h"/>
        <childnode refid="36248" relation="include">
        </childnode>
        <childnode refid="36276" relation="include">
        </childnode>
        <childnode refid="36270" relation="include">
        </childnode>
        <childnode refid="36249" relation="include">
        </childnode>
      </node>
      <node id="36245">
        <label>stdlib.h</label>
      </node>
      <node id="36249">
        <label>db/dbformat.h</label>
        <link refid="dbformat_8h"/>
        <childnode refid="36244" relation="include">
        </childnode>
        <childnode refid="36250" relation="include">
        </childnode>
        <childnode refid="36252" relation="include">
        </childnode>
        <childnode refid="36261" relation="include">
        </childnode>
        <childnode refid="36255" relation="include">
        </childnode>
        <childnode refid="36262" relation="include">
        </childnode>
        <childnode refid="36263" relation="include">
        </childnode>
        <childnode refid="36265" relation="include">
        </childnode>
      </node>
      <node id="36252">
        <label>leveldb/db.h</label>
        <link refid="leveldb_2include_2leveldb_2db_8h"/>
        <childnode refid="36253" relation="include">
        </childnode>
        <childnode refid="36244" relation="include">
        </childnode>
        <childnode refid="36254" relation="include">
        </childnode>
        <childnode refid="36260" relation="include">
        </childnode>
      </node>
      <node id="36251">
        <label>string</label>
      </node>
      <node id="36274">
        <label>map</label>
      </node>
      <node id="36283">
        <label>util/testutil.h</label>
        <link refid="testutil_8h"/>
        <childnode refid="36269" relation="include">
        </childnode>
        <childnode refid="36255" relation="include">
        </childnode>
        <childnode refid="36282" relation="include">
        </childnode>
      </node>
      <node id="36279">
        <label>util/crc32c.h</label>
        <link refid="crc32c_8h"/>
        <childnode refid="36257" relation="include">
        </childnode>
        <childnode refid="36253" relation="include">
        </childnode>
      </node>
      <node id="36257">
        <label>stddef.h</label>
      </node>
      <node id="36277">
        <label>leveldb/cache.h</label>
        <link refid="cache_8h"/>
        <childnode refid="36253" relation="include">
        </childnode>
        <childnode refid="36255" relation="include">
        </childnode>
      </node>
      <node id="36259">
        <label>leveldb/status.h</label>
        <link refid="status_8h"/>
        <childnode refid="36251" relation="include">
        </childnode>
        <childnode refid="36255" relation="include">
        </childnode>
      </node>
      <node id="36242">
        <label>/home/dev/ds-160209/src/leveldb/db/db_bench.cc</label>
        <link refid="db_bench.cc"/>
        <childnode refid="36243" relation="include">
        </childnode>
        <childnode refid="36244" relation="include">
        </childnode>
        <childnode refid="36245" relation="include">
        </childnode>
        <childnode refid="36246" relation="include">
        </childnode>
        <childnode refid="36273" relation="include">
        </childnode>
        <childnode refid="36277" relation="include">
        </childnode>
        <childnode refid="36252" relation="include">
        </childnode>
        <childnode refid="36269" relation="include">
        </childnode>
        <childnode refid="36278" relation="include">
        </childnode>
        <childnode refid="36264" relation="include">
        </childnode>
        <childnode refid="36279" relation="include">
        </childnode>
        <childnode refid="36280" relation="include">
        </childnode>
        <childnode refid="36281" relation="include">
        </childnode>
        <childnode refid="36282" relation="include">
        </childnode>
        <childnode refid="36283" relation="include">
        </childnode>
      </node>
      <node id="36273">
        <label>db/version_set.h</label>
        <link refid="version__set_8h"/>
        <childnode refid="36274" relation="include">
        </childnode>
        <childnode refid="36248" relation="include">
        </childnode>
        <childnode refid="36270" relation="include">
        </childnode>
        <childnode refid="36249" relation="include">
        </childnode>
        <childnode refid="36275" relation="include">
        </childnode>
        <childnode refid="36264" relation="include">
        </childnode>
        <childnode refid="36272" relation="include">
        </childnode>
      </node>
      <node id="36263">
        <label>util/coding.h</label>
        <link refid="coding_8h"/>
        <childnode refid="36253" relation="include">
        </childnode>
        <childnode refid="36258" relation="include">
        </childnode>
        <childnode refid="36251" relation="include">
        </childnode>
        <childnode refid="36255" relation="include">
        </childnode>
        <childnode refid="36264" relation="include">
        </childnode>
      </node>
      <node id="36243">
        <label>sys/types.h</label>
      </node>
      <node id="36258">
        <label>string.h</label>
      </node>
      <node id="36266">
        <label>db/log_writer.h</label>
        <link refid="log__writer_8h"/>
        <childnode refid="36253" relation="include">
        </childnode>
        <childnode refid="36267" relation="include">
        </childnode>
        <childnode refid="36255" relation="include">
        </childnode>
        <childnode refid="36259" relation="include">
        </childnode>
      </node>
      <node id="36246">
        <label>db/db_impl.h</label>
        <link refid="db__impl_8h"/>
        <childnode refid="36247" relation="include">
        </childnode>
        <childnode refid="36248" relation="include">
        </childnode>
        <childnode refid="36249" relation="include">
        </childnode>
        <childnode refid="36266" relation="include">
        </childnode>
        <childnode refid="36268" relation="include">
        </childnode>
        <childnode refid="36252" relation="include">
        </childnode>
        <childnode refid="36269" relation="include">
        </childnode>
        <childnode refid="36264" relation="include">
        </childnode>
        <childnode refid="36272" relation="include">
        </childnode>
      </node>
      <node id="36270">
        <label>vector</label>
      </node>
      <node id="36276">
        <label>utility</label>
      </node>
      <node id="36267">
        <label>db/log_format.h</label>
        <link refid="log__format_8h"/>
      </node>
      <node id="36264">
        <label>port/port.h</label>
        <link refid="port_8h"/>
        <childnode refid="36258" relation="include">
        </childnode>
      </node>
      <node id="36253">
        <label>stdint.h</label>
        <link refid="stdint_8h"/>
      </node>
      <node id="36247">
        <label>deque</label>
      </node>
      <node id="36262">
        <label>leveldb/table_builder.h</label>
        <link refid="table__builder_8h"/>
        <childnode refid="36253" relation="include">
        </childnode>
        <childnode refid="36260" relation="include">
        </childnode>
        <childnode refid="36259" relation="include">
        </childnode>
      </node>
      <node id="36268">
        <label>db/snapshot.h</label>
        <link refid="snapshot_8h"/>
        <childnode refid="36252" relation="include">
        </childnode>
      </node>
      <node id="36255">
        <label>leveldb/slice.h</label>
        <link refid="slice_8h"/>
        <childnode refid="36256" relation="include">
        </childnode>
        <childnode refid="36257" relation="include">
        </childnode>
        <childnode refid="36258" relation="include">
        </childnode>
        <childnode refid="36251" relation="include">
        </childnode>
      </node>
      <node id="36269">
        <label>leveldb/env.h</label>
        <link refid="env_8h"/>
        <childnode refid="36251" relation="include">
        </childnode>
        <childnode refid="36270" relation="include">
        </childnode>
        <childnode refid="36271" relation="include">
        </childnode>
        <childnode refid="36253" relation="include">
        </childnode>
        <childnode refid="36259" relation="include">
        </childnode>
      </node>
      <node id="36248">
        <label>set</label>
      </node>
      <node id="36272">
        <label>port/thread_annotations.h</label>
        <link refid="thread__annotations_8h"/>
      </node>
      <node id="36244">
        <label>stdio.h</label>
      </node>
      <node id="36261">
        <label>leveldb/filter_policy.h</label>
        <link refid="filter__policy_8h"/>
        <childnode refid="36251" relation="include">
        </childnode>
      </node>
      <node id="36250">
        <label>leveldb/comparator.h</label>
        <link refid="comparator_8h"/>
        <childnode refid="36251" relation="include">
        </childnode>
      </node>
      <node id="36254">
        <label>leveldb/iterator.h</label>
        <link refid="iterator_8h"/>
        <childnode refid="36255" relation="include">
        </childnode>
        <childnode refid="36259" relation="include">
        </childnode>
      </node>
      <node id="36280">
        <label>util/histogram.h</label>
        <link refid="histogram_8h"/>
        <childnode refid="36251" relation="include">
        </childnode>
      </node>
    </incdepgraph>
    <innerclass refid="classleveldb_1_1_benchmark" prot="public">leveldb::Benchmark</innerclass>
    <innerclass refid="structleveldb_1_1_benchmark_1_1_thread_arg" prot="private">leveldb::Benchmark::ThreadArg</innerclass>
    <innernamespace refid="namespaceleveldb">leveldb</innernamespace>
      <sectiondef kind="var">
      <memberdef kind="variable" id="db__bench_8cc_1a3550bf7381fc474fbe3eb4f125f6b21e" prot="public" static="yes" mutable="no">
        <type>const char *</type>
        <definition>const char* FLAGS_benchmarks</definition>
        <argsstring></argsstring>
        <name>FLAGS_benchmarks</name>
        <initializer>=
    &quot;fillseq,&quot;
    &quot;fillsync,&quot;
    &quot;fillrandom,&quot;
    &quot;overwrite,&quot;
    &quot;readrandom,&quot;
    &quot;readrandom,&quot;  
    &quot;readseq,&quot;
    &quot;readreverse,&quot;
    &quot;compact,&quot;
    &quot;readrandom,&quot;
    &quot;readseq,&quot;
    &quot;readreverse,&quot;
    &quot;fill100K,&quot;
    &quot;crc32c,&quot;
    &quot;snappycomp,&quot;
    &quot;snappyuncomp,&quot;
    &quot;acquireload,&quot;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/leveldb/db/db_bench.cc" line="43" column="1" bodyfile="/home/dev/ds-160209/src/leveldb/db/db_bench.cc" bodystart="43" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="db__bench_8cc_1ad2595e4eeeb1fd3e6701d620b24acc28" prot="public" static="yes" mutable="no">
        <type>int</type>
        <definition>int FLAGS_num</definition>
        <argsstring></argsstring>
        <name>FLAGS_num</name>
        <initializer>= 1000000</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/leveldb/db/db_bench.cc" line="64" column="1" bodyfile="/home/dev/ds-160209/src/leveldb/db/db_bench.cc" bodystart="64" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="db__bench_8cc_1a94a7f17f843ac974030ac98221dd4386" prot="public" static="yes" mutable="no">
        <type>int</type>
        <definition>int FLAGS_reads</definition>
        <argsstring></argsstring>
        <name>FLAGS_reads</name>
        <initializer>= -1</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/leveldb/db/db_bench.cc" line="67" column="1" bodyfile="/home/dev/ds-160209/src/leveldb/db/db_bench.cc" bodystart="67" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="db__bench_8cc_1aa3f88216541a4ab780ff534369c36c52" prot="public" static="yes" mutable="no">
        <type>int</type>
        <definition>int FLAGS_threads</definition>
        <argsstring></argsstring>
        <name>FLAGS_threads</name>
        <initializer>= 1</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/leveldb/db/db_bench.cc" line="70" column="1" bodyfile="/home/dev/ds-160209/src/leveldb/db/db_bench.cc" bodystart="70" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="db__bench_8cc_1a1c81a5b326761a915415d2f5f9051391" prot="public" static="yes" mutable="no">
        <type>int</type>
        <definition>int FLAGS_value_size</definition>
        <argsstring></argsstring>
        <name>FLAGS_value_size</name>
        <initializer>= 100</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/leveldb/db/db_bench.cc" line="73" column="1" bodyfile="/home/dev/ds-160209/src/leveldb/db/db_bench.cc" bodystart="73" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="db__bench_8cc_1a8b27739d3dc2cd27e1f2f3fc36a65d5d" prot="public" static="yes" mutable="no">
        <type>double</type>
        <definition>double FLAGS_compression_ratio</definition>
        <argsstring></argsstring>
        <name>FLAGS_compression_ratio</name>
        <initializer>= 0.5</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/leveldb/db/db_bench.cc" line="77" column="1" bodyfile="/home/dev/ds-160209/src/leveldb/db/db_bench.cc" bodystart="77" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="db__bench_8cc_1a7acbc6eedc4082fdceba621e526cd118" prot="public" static="yes" mutable="no">
        <type>bool</type>
        <definition>bool FLAGS_histogram</definition>
        <argsstring></argsstring>
        <name>FLAGS_histogram</name>
        <initializer>= false</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/leveldb/db/db_bench.cc" line="80" column="1" bodyfile="/home/dev/ds-160209/src/leveldb/db/db_bench.cc" bodystart="80" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="db__bench_8cc_1a95316c02ec448a6a8a0e169cdec69ab7" prot="public" static="yes" mutable="no">
        <type>int</type>
        <definition>int FLAGS_write_buffer_size</definition>
        <argsstring></argsstring>
        <name>FLAGS_write_buffer_size</name>
        <initializer>= 0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/leveldb/db/db_bench.cc" line="84" column="1" bodyfile="/home/dev/ds-160209/src/leveldb/db/db_bench.cc" bodystart="84" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="db__bench_8cc_1a55ea4cf9c4cbf7d51487c585348943f2" prot="public" static="yes" mutable="no">
        <type>int</type>
        <definition>int FLAGS_cache_size</definition>
        <argsstring></argsstring>
        <name>FLAGS_cache_size</name>
        <initializer>= -1</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/leveldb/db/db_bench.cc" line="88" column="1" bodyfile="/home/dev/ds-160209/src/leveldb/db/db_bench.cc" bodystart="88" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="db__bench_8cc_1a6ec3ae0c2e5082cfd814377775a48aa7" prot="public" static="yes" mutable="no">
        <type>int</type>
        <definition>int FLAGS_open_files</definition>
        <argsstring></argsstring>
        <name>FLAGS_open_files</name>
        <initializer>= 0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/leveldb/db/db_bench.cc" line="91" column="1" bodyfile="/home/dev/ds-160209/src/leveldb/db/db_bench.cc" bodystart="91" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="db__bench_8cc_1a20954afb4576ae3f099814a7f57b8e33" prot="public" static="yes" mutable="no">
        <type>int</type>
        <definition>int FLAGS_bloom_bits</definition>
        <argsstring></argsstring>
        <name>FLAGS_bloom_bits</name>
        <initializer>= -1</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/leveldb/db/db_bench.cc" line="95" column="1" bodyfile="/home/dev/ds-160209/src/leveldb/db/db_bench.cc" bodystart="95" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="db__bench_8cc_1aca4621a83def233825c050b2facad546" prot="public" static="yes" mutable="no">
        <type>bool</type>
        <definition>bool FLAGS_use_existing_db</definition>
        <argsstring></argsstring>
        <name>FLAGS_use_existing_db</name>
        <initializer>= false</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/leveldb/db/db_bench.cc" line="100" column="1" bodyfile="/home/dev/ds-160209/src/leveldb/db/db_bench.cc" bodystart="100" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="db__bench_8cc_1a21c1d10f038cee434b8e0f8d0e78932a" prot="public" static="yes" mutable="no">
        <type>const char *</type>
        <definition>const char* FLAGS_db</definition>
        <argsstring></argsstring>
        <name>FLAGS_db</name>
        <initializer>= NULL</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/leveldb/db/db_bench.cc" line="103" column="1" bodyfile="/home/dev/ds-160209/src/leveldb/db/db_bench.cc" bodystart="103" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="db__bench_8cc_1ad89985b46f05e1611048282ca9abac3d" prot="public" static="no" mutable="no">
        <type>std::string</type>
        <definition>std::string data_</definition>
        <argsstring></argsstring>
        <name>data_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/leveldb/db/db_bench.cc" line="112" column="1" bodyfile="/home/dev/ds-160209/src/leveldb/db/db_bench.cc" bodystart="112" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="db__bench_8cc_1a74404be11bd9401ffe90696e5baa8d0a" prot="public" static="no" mutable="no">
        <type>int</type>
        <definition>int pos_</definition>
        <argsstring></argsstring>
        <name>pos_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/leveldb/db/db_bench.cc" line="113" column="1" bodyfile="/home/dev/ds-160209/src/leveldb/db/db_bench.cc" bodystart="113" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="db__bench_8cc_1a792d499857ed9d45deb633ef47ee2634" prot="public" static="no" mutable="no">
        <type>double</type>
        <definition>double start_</definition>
        <argsstring></argsstring>
        <name>start_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/leveldb/db/db_bench.cc" line="163" column="1" bodyfile="/home/dev/ds-160209/src/leveldb/db/db_bench.cc" bodystart="163" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="db__bench_8cc_1a59700c1631526f6c2d0fec39133747e3" prot="public" static="no" mutable="no">
        <type>double</type>
        <definition>double finish_</definition>
        <argsstring></argsstring>
        <name>finish_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/leveldb/db/db_bench.cc" line="164" column="1" bodyfile="/home/dev/ds-160209/src/leveldb/db/db_bench.cc" bodystart="164" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="db__bench_8cc_1a4bcb2ad2c565fa2c097d4bba246acdd7" prot="public" static="no" mutable="no">
        <type>double</type>
        <definition>double seconds_</definition>
        <argsstring></argsstring>
        <name>seconds_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/leveldb/db/db_bench.cc" line="165" column="1" bodyfile="/home/dev/ds-160209/src/leveldb/db/db_bench.cc" bodystart="165" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="db__bench_8cc_1a8ec1339ea1000cfdf61b7ebab380b465" prot="public" static="no" mutable="no">
        <type>int</type>
        <definition>int done_</definition>
        <argsstring></argsstring>
        <name>done_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/leveldb/db/db_bench.cc" line="166" column="1" bodyfile="/home/dev/ds-160209/src/leveldb/db/db_bench.cc" bodystart="166" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="db__bench_8cc_1a4e828e8d843a21a51e1e24d0902550fd" prot="public" static="no" mutable="no">
        <type>int</type>
        <definition>int next_report_</definition>
        <argsstring></argsstring>
        <name>next_report_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/leveldb/db/db_bench.cc" line="167" column="1" bodyfile="/home/dev/ds-160209/src/leveldb/db/db_bench.cc" bodystart="167" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="db__bench_8cc_1a84700f2ecbdcf9d6fc2cd12a679b0920" prot="public" static="no" mutable="no">
        <type><ref refid="stdint_8h_1adec1df1b8b51cb32b77e5b86fff46471" kindref="member">int64_t</ref></type>
        <definition>int64_t bytes_</definition>
        <argsstring></argsstring>
        <name>bytes_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/leveldb/db/db_bench.cc" line="168" column="1" bodyfile="/home/dev/ds-160209/src/leveldb/db/db_bench.cc" bodystart="168" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="db__bench_8cc_1a66ecede1671386c072a6b094bb71745c" prot="public" static="no" mutable="no">
        <type>double</type>
        <definition>double last_op_finish_</definition>
        <argsstring></argsstring>
        <name>last_op_finish_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/leveldb/db/db_bench.cc" line="169" column="1" bodyfile="/home/dev/ds-160209/src/leveldb/db/db_bench.cc" bodystart="169" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="db__bench_8cc_1a129325bc0df58690663ae4939cec647a" prot="public" static="no" mutable="no">
        <type>Histogram</type>
        <definition>Histogram hist_</definition>
        <argsstring></argsstring>
        <name>hist_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/leveldb/db/db_bench.cc" line="170" column="1" bodyfile="/home/dev/ds-160209/src/leveldb/db/db_bench.cc" bodystart="170" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="db__bench_8cc_1a4136f421e413f118b2b0da52e128ba5b" prot="public" static="no" mutable="no">
        <type>std::string</type>
        <definition>std::string message_</definition>
        <argsstring></argsstring>
        <name>message_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/leveldb/db/db_bench.cc" line="171" column="1" bodyfile="/home/dev/ds-160209/src/leveldb/db/db_bench.cc" bodystart="171" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="db__bench_8cc_1a1a5c2f3b52d2dec1d9896cec4b02d17e" prot="public" static="no" mutable="no">
        <type>port::Mutex</type>
        <definition>port::Mutex mu</definition>
        <argsstring></argsstring>
        <name>mu</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/leveldb/db/db_bench.cc" line="270" column="1" bodyfile="/home/dev/ds-160209/src/leveldb/db/db_bench.cc" bodystart="270" bodyend="-1"/>
        <referencedby refid="namespaceleveldb_1af9cf6ec167c9b6f25fd050ab6fb67a90" compoundref="db__test_8cc" startline="2065" endline="2114">leveldb::BM_LogAndApply</referencedby>
      </memberdef>
      <memberdef kind="variable" id="db__bench_8cc_1aa35826d3f6dc34ef1f1b35dee6db9d91" prot="public" static="no" mutable="no">
        <type>port::CondVar</type>
        <definition>port::CondVar cv</definition>
        <argsstring></argsstring>
        <name>cv</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/leveldb/db/db_bench.cc" line="271" column="1" bodyfile="/home/dev/ds-160209/src/leveldb/db/db_bench.cc" bodystart="271" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="db__bench_8cc_1ac7af894858cf396a219d632f40afdc8d" prot="public" static="no" mutable="no">
        <type>int</type>
        <definition>int total</definition>
        <argsstring></argsstring>
        <name>total</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/leveldb/db/db_bench.cc" line="272" column="1" bodyfile="/home/dev/ds-160209/src/leveldb/db/db_bench.cc" bodystart="272" bodyend="-1"/>
        <referencedby refid="instantx_8h_1a304e9387476f386ea574efe9c4d7935e" compoundref="instantx_8cpp" startline="419" endline="432">GetAverageVoteTime</referencedby>
        <referencedby refid="classleveldb_1_1_version_set_1a3a03f9a6c86e861be314cf8e01f33142" compoundref="version__set_8cc" startline="1364" endline="1397">leveldb::VersionSet::CompactRange</referencedby>
        <referencedby refid="class_c_node_1a2cff79a034258ba032257e993fc42e62" compoundref="net_8h" startline="435" endline="441">CNode::GetTotalRecvSize</referencedby>
        <referencedby refid="class_wallet_model_1a497418d4a8566b881bab45dec7ad8fd8" compoundref="walletmodel_8cpp" startline="213" endline="488">WalletModel::sendCoins</referencedby>
        <referencedby refid="bench_8h_1a62a3537c97d14006568dd6f8b2bc5472" compoundref="bench_8h" startline="33" endline="64">run_benchmark</referencedby>
      </memberdef>
      <memberdef kind="variable" id="db__bench_8cc_1a5f30212b0616a62bfa40f20fcf34f056" prot="public" static="no" mutable="no">
        <type>int</type>
        <definition>int num_initialized</definition>
        <argsstring></argsstring>
        <name>num_initialized</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/leveldb/db/db_bench.cc" line="280" column="1" bodyfile="/home/dev/ds-160209/src/leveldb/db/db_bench.cc" bodystart="280" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="db__bench_8cc_1a0ea1509241fe84bfe6bf9f1f0582292c" prot="public" static="no" mutable="no">
        <type>int</type>
        <definition>int num_done</definition>
        <argsstring></argsstring>
        <name>num_done</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/leveldb/db/db_bench.cc" line="281" column="1" bodyfile="/home/dev/ds-160209/src/leveldb/db/db_bench.cc" bodystart="281" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="db__bench_8cc_1ab376b87f96a574a793c03c53e75afec8" prot="public" static="no" mutable="no">
        <type>bool</type>
        <definition>bool start</definition>
        <argsstring></argsstring>
        <name>start</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/leveldb/db/db_bench.cc" line="282" column="1" bodyfile="/home/dev/ds-160209/src/leveldb/db/db_bench.cc" bodystart="282" bodyend="-1"/>
        <referencedby refid="c__test_8c_1a3c04138a5bfe5d72780bb7e82a18e627" compoundref="c__test_8c" startline="157" endline="390">main</referencedby>
        <referencedby refid="classleveldb_1_1_d_b_impl_1af08e218d92064699942c195ce0f06010" compoundref="db__impl_8cc" startline="1403" endline="1427">leveldb::DBImpl::GetApproximateSizes</referencedby>
        <referencedby refid="namespaceleveldb_1af9cf6ec167c9b6f25fd050ab6fb67a90" compoundref="db__test_8cc" startline="2065" endline="2114">leveldb::BM_LogAndApply</referencedby>
        <referencedby refid="classleveldb_1_1_version_1ac3b623319110ed2a9491723dd4675431" compoundref="version__set_8cc" startline="493" endline="519">leveldb::Version::PickLevelForMemTableOutput</referencedby>
        <referencedby refid="classleveldb_1_1_filter_block_reader_1a2c1c0cd8311b99fd92d3548b7aa240d0" compoundref="filter__block_8cc" startline="95" endline="109">leveldb::FilterBlockReader::KeyMayMatch</referencedby>
        <referencedby refid="namespaceleveldb_1acc08a5b06f805e1103bc63652513c3ec" compoundref="coding__test_8cc" startline="77" endline="96">leveldb::TEST</referencedby>
      </memberdef>
      <memberdef kind="variable" id="db__bench_8cc_1a8cc3dd191f714ba4ae35b2d3ac5b557a" prot="public" static="no" mutable="no">
        <type>int</type>
        <definition>int tid</definition>
        <argsstring></argsstring>
        <name>tid</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/leveldb/db/db_bench.cc" line="289" column="1" bodyfile="/home/dev/ds-160209/src/leveldb/db/db_bench.cc" bodystart="289" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="db__bench_8cc_1a2391b9dab13f09bae65ae349c8d4c271" prot="public" static="no" mutable="no">
        <type>Random</type>
        <definition>Random rand</definition>
        <argsstring></argsstring>
        <name>rand</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/leveldb/db/db_bench.cc" line="290" column="1" bodyfile="/home/dev/ds-160209/src/leveldb/db/db_bench.cc" bodystart="290" bodyend="-1"/>
        <referencedby refid="class_s_a_m_1_1_stream_session_1abe3c3463ae7985a8f506c091d756d6b9" compoundref="i2psam_8cpp" startline="292" endline="309">SAM::StreamSession::generateSessionID</referencedby>
        <referencedby refid="class_c_sand_storm_relay_1a267e6fecd0b7381cfe31c75fba023129" compoundref="sandstorm-relay_8cpp" startline="89" endline="103">CSandStormRelay::Relay</referencedby>
        <referencedby refid="class_c_sandstorm_pool_1a76f820f131dbb15d80f826f0c788249a" compoundref="sandstorm_8cpp" startline="646" endline="746">CSandstormPool::ChargeFees</referencedby>
        <referencedby refid="class_c_sandstorm_pool_1ac01544d518171779e6a609dae48d4f75" compoundref="sandstorm_8cpp" startline="750" endline="782">CSandstormPool::ChargeRandomFees</referencedby>
        <referencedby refid="class_c_sandstorm_pool_1a459d1986058ad736773fa9857390ba96" compoundref="sandstorm_8cpp" startline="1353" endline="1625">CSandstormPool::DoAutomaticDenominating</referencedby>
        <referencedby refid="class_c_sandstorm_pool_1a6ca453bd284507a2d5b26e9d4491e00c" compoundref="sandstorm_8cpp" startline="1813" endline="1867">CSandstormPool::IsCompatibleWithSession</referencedby>
        <referencedby refid="class_c_sandstorm_pool_1aebbafc6e18044ba973b127787f9ff90b" compoundref="sandstorm_8cpp" startline="1913" endline="1950">CSandstormPool::GetDenominations</referencedby>
        <referencedby refid="ecdh_2tests__impl_8h_1a505bff7cea922e6d8aa4f7525cfd191a" compoundref="ecdh_2tests__impl_8h" startline="44" endline="68">test_bad_scalar</referencedby>
        <referencedby refid="class_c_budget_manager_1a9c62c8f18b6f101465415952349ce203" compoundref="stormnode-budget_8cpp" startline="799" endline="902">CBudgetManager::NewBlock</referencedby>
        <referencedby refid="class_c_finalized_budget_1a88614fdccb5cdf722403c11832df2ad0" compoundref="stormnode-budget_8cpp" startline="1699" endline="1775">CFinalizedBudget::AutoCheck</referencedby>
        <referencedby refid="class_c_stormnode_man_1a24417dae3da8762e9be495f25b0a6d30" compoundref="stormnodeman_8cpp" startline="504" endline="534">CStormnodeMan::FindRandomNotInVec</referencedby>
        <referencedby refid="util_8h_1aa968b3d087118c9a4913566b31c7ae4b" compoundref="util_8cpp" startline="1162" endline="1180">GenerateRandomString</referencedby>
        <referencedby refid="util_8h_1a680db3065fcd18a556ea6e1fc977e3b0" compoundref="util_8cpp" startline="1182" endline="1186">RandomIntegerRange</referencedby>
        <referencedby refid="class_c_wallet_1aa7606e8da251a609bf5d89a138f5d12e" compoundref="wallet_8cpp" startline="2402" endline="2486">CWallet::SelectCoinsByDenominations</referencedby>
      </memberdef>
      <memberdef kind="variable" id="db__bench_8cc_1a5925d216740c89f43482df806fd14e8c" prot="public" static="no" mutable="no">
        <type>Stats</type>
        <definition>Stats stats</definition>
        <argsstring></argsstring>
        <name>stats</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/leveldb/db/db_bench.cc" line="291" column="1" bodyfile="/home/dev/ds-160209/src/leveldb/db/db_bench.cc" bodystart="291" bodyend="-1"/>
        <referencedby refid="classleveldb_1_1_d_b_impl_1a089964ddcd1f5dc85e73499ae57be508" compoundref="db__impl_8cc" startline="1077" endline="1122">leveldb::DBImpl::Get</referencedby>
        <referencedby refid="classleveldb_1_1_version_1a8b9e51b3d0503fe5868f656356557ded" compoundref="version__set_8cc" startline="435" endline="471">leveldb::Version::RecordReadSample</referencedby>
        <referencedby refid="class_d_e_b_u_g_console_1a712063306f8f788e63ce1a04f0074de9" compoundref="debugconsole_8cpp" startline="363" endline="373">DEBUGConsole::peerSelected</referencedby>
        <referencedby refid="class_d_e_b_u_g_console_1a3773070395288d2b842aedfafd6aa4d3" compoundref="debugconsole_8cpp" startline="375" endline="432">DEBUGConsole::peerLayoutChanged</referencedby>
        <referencedby refid="class_peer_table_priv_1a304d99874f6cd0c67ed207546a5ca904" compoundref="peertablemodel_8cpp" startline="53" endline="97">PeerTablePriv::refreshPeers</referencedby>
      </memberdef>
      <memberdef kind="variable" id="db__bench_8cc_1af670cad03774a4316fb28a8634d33a56" prot="public" static="no" mutable="no">
        <type>SharedState *</type>
        <definition>SharedState* shared</definition>
        <argsstring></argsstring>
        <name>shared</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/leveldb/db/db_bench.cc" line="292" column="1" bodyfile="/home/dev/ds-160209/src/leveldb/db/db_bench.cc" bodystart="292" bodyend="-1"/>
        <referencedby refid="classleveldb_1_1_block_1_1_iter_1a3dcefc0609937b33c046ac7fafb52ad7" compoundref="block_8cc" startline="165" endline="203">leveldb::Block::Iter::Seek</referencedby>
        <referencedby refid="classleveldb_1_1_block_builder_1a17d0e23f1e7afcb874b22a0cb0b6cf17" compoundref="block__builder_8cc" startline="73" endline="107">leveldb::BlockBuilder::Add</referencedby>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="db__bench_8cc_1a3c04138a5bfe5d72780bb7e82a18e627" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int main</definition>
        <argsstring>(int argc, char **argv)</argsstring>
        <name>main</name>
        <param>
          <type>int</type>
          <declname>argc</declname>
        </param>
        <param>
          <type>char **</type>
          <declname>argv</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/leveldb/db/db_bench.cc" line="925" column="1" bodyfile="/home/dev/ds-160209/src/leveldb/db/db_bench.cc" bodystart="925" bodyend="978"/>
        <references refid="structleveldb_1_1_options_1a017f1f9558e6b3887434df29a16dac97" compoundref="options_8h" startline="83">leveldb::Options::write_buffer_size</references>
        <references refid="structleveldb_1_1_options_1a25c6ea125fc63342d8fc25b2f7817be4" compoundref="options_8h" startline="90">leveldb::Options::max_open_files</references>
        <references refid="classleveldb_1_1_env_1ae15b67e650ff6790059745fd1b3bf3e7" compoundref="env__posix_8cc" startline="604" endline="607">leveldb::Env::Default</references>
        <references refid="classleveldb_1_1_env_1ab57a55be37d4d57bf3c0ff83ee689f95">leveldb::Env::GetTestDirectory</references>
        <references refid="classleveldb_1_1_benchmark_1a2f262afa0c7d10fcf531fe9657fba490" compoundref="db__bench_8cc" startline="418" endline="529">leveldb::Benchmark::Run</references>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">//<sp/>Copyright<sp/>(c)<sp/>2011-2016<sp/>The<sp/>LevelDB<sp/>Authors.<sp/>All<sp/>rights<sp/>reserved.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Use<sp/>of<sp/>this<sp/>source<sp/>code<sp/>is<sp/>governed<sp/>by<sp/>a<sp/>BSD-style<sp/>license<sp/>that<sp/>can<sp/>be</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="comment">//<sp/>found<sp/>in<sp/>the<sp/>LICENSE<sp/>file.<sp/>See<sp/>the<sp/>AUTHORS<sp/>file<sp/>for<sp/>names<sp/>of<sp/>contributors.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;sys/types.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdio.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdlib.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="db__impl_8h" kindref="compound">db/db_impl.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="version__set_8h" kindref="compound">db/version_set.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="cache_8h" kindref="compound">leveldb/cache.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="leveldb_2include_2leveldb_2db_8h" kindref="compound">leveldb/db.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="env_8h" kindref="compound">leveldb/env.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="write__batch_8h" kindref="compound">leveldb/write_batch.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="port_8h" kindref="compound">port/port.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="crc32c_8h" kindref="compound">util/crc32c.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="histogram_8h" kindref="compound">util/histogram.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="mutexlock_8h" kindref="compound">util/mutexlock.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="random_8h" kindref="compound">util/random.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="testutil_8h" kindref="compound">util/testutil.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Comma-separated<sp/>list<sp/>of<sp/>operations<sp/>to<sp/>run<sp/>in<sp/>the<sp/>specified<sp/>order</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>Actual<sp/>benchmarks:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>fillseq<sp/><sp/><sp/><sp/><sp/><sp/><sp/>--<sp/>write<sp/>N<sp/>values<sp/>in<sp/>sequential<sp/>key<sp/>order<sp/>in<sp/>async<sp/>mode</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>fillrandom<sp/><sp/><sp/><sp/>--<sp/>write<sp/>N<sp/>values<sp/>in<sp/>random<sp/>key<sp/>order<sp/>in<sp/>async<sp/>mode</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>overwrite<sp/><sp/><sp/><sp/><sp/>--<sp/>overwrite<sp/>N<sp/>values<sp/>in<sp/>random<sp/>key<sp/>order<sp/>in<sp/>async<sp/>mode</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>fillsync<sp/><sp/><sp/><sp/><sp/><sp/>--<sp/>write<sp/>N/100<sp/>values<sp/>in<sp/>random<sp/>key<sp/>order<sp/>in<sp/>sync<sp/>mode</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>fill100K<sp/><sp/><sp/><sp/><sp/><sp/>--<sp/>write<sp/>N/1000<sp/>100K<sp/>values<sp/>in<sp/>random<sp/>order<sp/>in<sp/>async<sp/>mode</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>deleteseq<sp/><sp/><sp/><sp/><sp/>--<sp/>delete<sp/>N<sp/>keys<sp/>in<sp/>sequential<sp/>order</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>deleterandom<sp/><sp/>--<sp/>delete<sp/>N<sp/>keys<sp/>in<sp/>random<sp/>order</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>readseq<sp/><sp/><sp/><sp/><sp/><sp/><sp/>--<sp/>read<sp/>N<sp/>times<sp/>sequentially</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>readreverse<sp/><sp/><sp/>--<sp/>read<sp/>N<sp/>times<sp/>in<sp/>reverse<sp/>order</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>readrandom<sp/><sp/><sp/><sp/>--<sp/>read<sp/>N<sp/>times<sp/>in<sp/>random<sp/>order</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>readmissing<sp/><sp/><sp/>--<sp/>read<sp/>N<sp/>missing<sp/>keys<sp/>in<sp/>random<sp/>order</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>readhot<sp/><sp/><sp/><sp/><sp/><sp/><sp/>--<sp/>read<sp/>N<sp/>times<sp/>in<sp/>random<sp/>order<sp/>from<sp/>1%<sp/>section<sp/>of<sp/>DB</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>seekrandom<sp/><sp/><sp/><sp/>--<sp/>N<sp/>random<sp/>seeks</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>crc32c<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>--<sp/>repeated<sp/>crc32c<sp/>of<sp/>4K<sp/>of<sp/>data</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>acquireload<sp/><sp/><sp/>--<sp/>load<sp/>N*1000<sp/>times</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>Meta<sp/>operations:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>compact<sp/><sp/><sp/><sp/><sp/>--<sp/>Compact<sp/>the<sp/>entire<sp/>DB</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>stats<sp/><sp/><sp/><sp/><sp/><sp/><sp/>--<sp/>Print<sp/>DB<sp/>stats</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>sstables<sp/><sp/><sp/><sp/>--<sp/>Print<sp/>sstable<sp/>info</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>heapprofile<sp/>--<sp/>Dump<sp/>a<sp/>heap<sp/>profile<sp/>(if<sp/>supported<sp/>by<sp/>this<sp/>port)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>FLAGS_benchmarks<sp/>=</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;fillseq,&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;fillsync,&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;fillrandom,&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;overwrite,&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;readrandom,&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;readrandom,&quot;</highlight><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Extra<sp/>run<sp/>to<sp/>allow<sp/>previous<sp/>compactions<sp/>to<sp/>quiesce</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;readseq,&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;readreverse,&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;compact,&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;readrandom,&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;readseq,&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;readreverse,&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;fill100K,&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;crc32c,&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;snappycomp,&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;snappyuncomp,&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;acquireload,&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/>;</highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Number<sp/>of<sp/>key/values<sp/>to<sp/>place<sp/>in<sp/>database</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>FLAGS_num<sp/>=<sp/>1000000;</highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Number<sp/>of<sp/>read<sp/>operations<sp/>to<sp/>do.<sp/><sp/>If<sp/>negative,<sp/>do<sp/>FLAGS_num<sp/>reads.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>FLAGS_reads<sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="68"><highlight class="normal"></highlight></codeline>
<codeline lineno="69"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Number<sp/>of<sp/>concurrent<sp/>threads<sp/>to<sp/>run.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="70"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>FLAGS_threads<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="71"><highlight class="normal"></highlight></codeline>
<codeline lineno="72"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Size<sp/>of<sp/>each<sp/>value</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="73"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>FLAGS_value_size<sp/>=<sp/>100;</highlight></codeline>
<codeline lineno="74"><highlight class="normal"></highlight></codeline>
<codeline lineno="75"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Arrange<sp/>to<sp/>generate<sp/>values<sp/>that<sp/>shrink<sp/>to<sp/>this<sp/>fraction<sp/>of</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="76"><highlight class="normal"></highlight><highlight class="comment">//<sp/>their<sp/>original<sp/>size<sp/>after<sp/>compression</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="77"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>FLAGS_compression_ratio<sp/>=<sp/>0.5;</highlight></codeline>
<codeline lineno="78"><highlight class="normal"></highlight></codeline>
<codeline lineno="79"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Print<sp/>histogram<sp/>of<sp/>operation<sp/>timings</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="80"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>FLAGS_histogram<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="81"><highlight class="normal"></highlight></codeline>
<codeline lineno="82"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Number<sp/>of<sp/>bytes<sp/>to<sp/>buffer<sp/>in<sp/>memtable<sp/>before<sp/>compacting</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="83"><highlight class="normal"></highlight><highlight class="comment">//<sp/>(initialized<sp/>to<sp/>default<sp/>value<sp/>by<sp/>&quot;main&quot;)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="84"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>FLAGS_write_buffer_size<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="85"><highlight class="normal"></highlight></codeline>
<codeline lineno="86"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Number<sp/>of<sp/>bytes<sp/>to<sp/>use<sp/>as<sp/>a<sp/>cache<sp/>of<sp/>uncompressed<sp/>data.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="87"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Negative<sp/>means<sp/>use<sp/>default<sp/>settings.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="88"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>FLAGS_cache_size<sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="89"><highlight class="normal"></highlight></codeline>
<codeline lineno="90"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Maximum<sp/>number<sp/>of<sp/>files<sp/>to<sp/>keep<sp/>open<sp/>at<sp/>the<sp/>same<sp/>time<sp/>(use<sp/>default<sp/>if<sp/>==<sp/>0)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="91"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>FLAGS_open_files<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="92"><highlight class="normal"></highlight></codeline>
<codeline lineno="93"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Bloom<sp/>filter<sp/>bits<sp/>per<sp/>key.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="94"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Negative<sp/>means<sp/>use<sp/>default<sp/>settings.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="95"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>FLAGS_bloom_bits<sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="96"><highlight class="normal"></highlight></codeline>
<codeline lineno="97"><highlight class="normal"></highlight><highlight class="comment">//<sp/>If<sp/>true,<sp/>do<sp/>not<sp/>destroy<sp/>the<sp/>existing<sp/>database.<sp/><sp/>If<sp/>you<sp/>set<sp/>this</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="98"><highlight class="normal"></highlight><highlight class="comment">//<sp/>flag<sp/>and<sp/>also<sp/>specify<sp/>a<sp/>benchmark<sp/>that<sp/>wants<sp/>a<sp/>fresh<sp/>database,<sp/>that</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="99"><highlight class="normal"></highlight><highlight class="comment">//<sp/>benchmark<sp/>will<sp/>fail.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="100"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>FLAGS_use_existing_db<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="101"><highlight class="normal"></highlight></codeline>
<codeline lineno="102"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Use<sp/>the<sp/>db<sp/>with<sp/>the<sp/>following<sp/>name.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="103"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>FLAGS_db<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="104"><highlight class="normal"></highlight></codeline>
<codeline lineno="105"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespaceleveldb" kindref="compound">leveldb</ref><sp/>{</highlight></codeline>
<codeline lineno="106"><highlight class="normal"></highlight></codeline>
<codeline lineno="107"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="108"><highlight class="normal"></highlight></codeline>
<codeline lineno="109"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Helper<sp/>for<sp/>quickly<sp/>generating<sp/>random<sp/>data.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="110"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">RandomGenerator<sp/>{</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="112" refid="db__bench_8cc_1ad89985b46f05e1611048282ca9abac3d" refkind="member"><highlight class="normal"><sp/><sp/>std::string<sp/><ref refid="db__bench_8cc_1ad89985b46f05e1611048282ca9abac3d" kindref="member">data_</ref>;</highlight></codeline>
<codeline lineno="113" refid="db__bench_8cc_1a74404be11bd9401ffe90696e5baa8d0a" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="db__bench_8cc_1a74404be11bd9401ffe90696e5baa8d0a" kindref="member">pos_</ref>;</highlight></codeline>
<codeline lineno="114"><highlight class="normal"></highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/>RandomGenerator()<sp/>{</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>We<sp/>use<sp/>a<sp/>limited<sp/>amount<sp/>of<sp/>data<sp/>over<sp/>and<sp/>over<sp/>again<sp/>and<sp/>ensure</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>that<sp/>it<sp/>is<sp/>larger<sp/>than<sp/>the<sp/>compression<sp/>window<sp/>(32KB),<sp/>and<sp/>also</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>large<sp/>enough<sp/>to<sp/>serve<sp/>all<sp/>typical<sp/>value<sp/>sizes<sp/>we<sp/>want<sp/>to<sp/>write.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/>Random<sp/>rnd(301);</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>piece;</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(data_.size()<sp/>&lt;<sp/>1048576)<sp/>{</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Add<sp/>a<sp/>short<sp/>fragment<sp/>that<sp/>is<sp/>as<sp/>compressible<sp/>as<sp/>specified</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>by<sp/>FLAGS_compression_ratio.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespaceleveldb_1_1test_1a7e336c887550b617dfd8bc0f61726779" kindref="member">test::CompressibleString</ref>(&amp;rnd,<sp/>FLAGS_compression_ratio,<sp/>100,<sp/>&amp;piece);</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>data_.append(piece);</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/>pos_<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="130"><highlight class="normal"></highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/>Slice<sp/>Generate(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>len)<sp/>{</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(pos_<sp/>+<sp/>len<sp/>&gt;<sp/>data_.size())<sp/>{</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>pos_<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>assert(len<sp/>&lt;<sp/>data_.size());</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/>pos_<sp/>+=<sp/>len;</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Slice(data_.data()<sp/>+<sp/>pos_<sp/>-<sp/>len,<sp/>len);</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="139"><highlight class="normal">};</highlight></codeline>
<codeline lineno="140"><highlight class="normal"></highlight></codeline>
<codeline lineno="141"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>Slice<sp/>TrimSpace(Slice<sp/>s)<sp/>{</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="db__bench_8cc_1ab376b87f96a574a793c03c53e75afec8" kindref="member">start</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(start<sp/>&lt;<sp/>s.size()<sp/>&amp;&amp;<sp/>isspace(s[start]))<sp/>{</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/>start++;</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>limit<sp/>=<sp/>s.size();</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(limit<sp/>&gt;<sp/>start<sp/>&amp;&amp;<sp/>isspace(s[limit-1]))<sp/>{</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/>limit--;</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Slice(s.data()<sp/>+<sp/><ref refid="db__bench_8cc_1ab376b87f96a574a793c03c53e75afec8" kindref="member">start</ref>,<sp/>limit<sp/>-<sp/><ref refid="db__bench_8cc_1ab376b87f96a574a793c03c53e75afec8" kindref="member">start</ref>);</highlight></codeline>
<codeline lineno="151"><highlight class="normal">}</highlight></codeline>
<codeline lineno="152"><highlight class="normal"></highlight></codeline>
<codeline lineno="153"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>AppendWithSpace(std::string*<sp/>str,<sp/>Slice<sp/>msg)<sp/>{</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(msg.empty())<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!str-&gt;empty())<sp/>{</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/>str-&gt;push_back(</highlight><highlight class="charliteral">&apos;<sp/>&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/>str-&gt;append(msg.data(),<sp/>msg.size());</highlight></codeline>
<codeline lineno="159"><highlight class="normal">}</highlight></codeline>
<codeline lineno="160"><highlight class="normal"></highlight></codeline>
<codeline lineno="161"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">Stats<sp/>{</highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="163" refid="db__bench_8cc_1a792d499857ed9d45deb633ef47ee2634" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="db__bench_8cc_1a792d499857ed9d45deb633ef47ee2634" kindref="member">start_</ref>;</highlight></codeline>
<codeline lineno="164" refid="db__bench_8cc_1a59700c1631526f6c2d0fec39133747e3" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="db__bench_8cc_1a59700c1631526f6c2d0fec39133747e3" kindref="member">finish_</ref>;</highlight></codeline>
<codeline lineno="165" refid="db__bench_8cc_1a4bcb2ad2c565fa2c097d4bba246acdd7" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="db__bench_8cc_1a4bcb2ad2c565fa2c097d4bba246acdd7" kindref="member">seconds_</ref>;</highlight></codeline>
<codeline lineno="166" refid="db__bench_8cc_1a8ec1339ea1000cfdf61b7ebab380b465" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="db__bench_8cc_1a8ec1339ea1000cfdf61b7ebab380b465" kindref="member">done_</ref>;</highlight></codeline>
<codeline lineno="167" refid="db__bench_8cc_1a4e828e8d843a21a51e1e24d0902550fd" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="db__bench_8cc_1a4e828e8d843a21a51e1e24d0902550fd" kindref="member">next_report_</ref>;</highlight></codeline>
<codeline lineno="168" refid="db__bench_8cc_1a84700f2ecbdcf9d6fc2cd12a679b0920" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="stdint_8h_1adec1df1b8b51cb32b77e5b86fff46471" kindref="member">int64_t</ref><sp/><ref refid="db__bench_8cc_1a84700f2ecbdcf9d6fc2cd12a679b0920" kindref="member">bytes_</ref>;</highlight></codeline>
<codeline lineno="169" refid="db__bench_8cc_1a66ecede1671386c072a6b094bb71745c" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="db__bench_8cc_1a66ecede1671386c072a6b094bb71745c" kindref="member">last_op_finish_</ref>;</highlight></codeline>
<codeline lineno="170" refid="db__bench_8cc_1a129325bc0df58690663ae4939cec647a" refkind="member"><highlight class="normal"><sp/><sp/>Histogram<sp/><ref refid="db__bench_8cc_1a129325bc0df58690663ae4939cec647a" kindref="member">hist_</ref>;</highlight></codeline>
<codeline lineno="171" refid="db__bench_8cc_1a4136f421e413f118b2b0da52e128ba5b" refkind="member"><highlight class="normal"><sp/><sp/>std::string<sp/><ref refid="db__bench_8cc_1a4136f421e413f118b2b0da52e128ba5b" kindref="member">message_</ref>;</highlight></codeline>
<codeline lineno="172"><highlight class="normal"></highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/>Stats()<sp/>{<sp/>Start();<sp/>}</highlight></codeline>
<codeline lineno="175"><highlight class="normal"></highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Start()<sp/>{</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/>next_report_<sp/>=<sp/>100;</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/><sp/>last_op_finish_<sp/>=<sp/><ref refid="db__bench_8cc_1a792d499857ed9d45deb633ef47ee2634" kindref="member">start_</ref>;</highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/><sp/><sp/>hist_.Clear();</highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/><sp/><sp/>done_<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/><sp/>bytes_<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/><sp/>seconds_<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/><sp/>start_<sp/>=<sp/><ref refid="classleveldb_1_1_env_1ae15b67e650ff6790059745fd1b3bf3e7" kindref="member">Env::Default</ref>()-&gt;<ref refid="classleveldb_1_1_env_1a988062bcd558ac02c62522ac2c8aa39f" kindref="member">NowMicros</ref>();</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/><sp/><sp/>finish_<sp/>=<sp/><ref refid="db__bench_8cc_1a792d499857ed9d45deb633ef47ee2634" kindref="member">start_</ref>;</highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><sp/><sp/>message_.clear();</highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="187"><highlight class="normal"></highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Merge(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Stats&amp;<sp/>other)<sp/>{</highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><sp/><sp/>hist_.Merge(other.hist_);</highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/><sp/><sp/>done_<sp/>+=<sp/>other.done_;</highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><sp/><sp/>bytes_<sp/>+=<sp/>other.bytes_;</highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/><sp/>seconds_<sp/>+=<sp/>other.seconds_;</highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(other.start_<sp/>&lt;<sp/>start_)<sp/>start_<sp/>=<sp/>other.start_;</highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(other.finish_<sp/>&gt;<sp/>finish_)<sp/>finish_<sp/>=<sp/>other.finish_;</highlight></codeline>
<codeline lineno="195"><highlight class="normal"></highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Just<sp/>keep<sp/>the<sp/>messages<sp/>from<sp/>one<sp/>thread</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(message_.empty())<sp/>message_<sp/>=<sp/>other.message_;</highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="199"><highlight class="normal"></highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Stop()<sp/>{</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/>finish_<sp/>=<sp/><ref refid="classleveldb_1_1_env_1ae15b67e650ff6790059745fd1b3bf3e7" kindref="member">Env::Default</ref>()-&gt;<ref refid="classleveldb_1_1_env_1a988062bcd558ac02c62522ac2c8aa39f" kindref="member">NowMicros</ref>();</highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/><sp/><sp/>seconds_<sp/>=<sp/>(finish_<sp/>-<sp/><ref refid="db__bench_8cc_1a792d499857ed9d45deb633ef47ee2634" kindref="member">start_</ref>)<sp/>*<sp/>1e-6;</highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="204"><highlight class="normal"></highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>AddMessage(Slice<sp/>msg)<sp/>{</highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/><sp/>AppendWithSpace(&amp;message_,<sp/>msg);</highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="208"><highlight class="normal"></highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>FinishedSingleOp()<sp/>{</highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(FLAGS_histogram)<sp/>{</highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>now<sp/>=<sp/><ref refid="classleveldb_1_1_env_1ae15b67e650ff6790059745fd1b3bf3e7" kindref="member">Env::Default</ref>()-&gt;<ref refid="classleveldb_1_1_env_1a988062bcd558ac02c62522ac2c8aa39f" kindref="member">NowMicros</ref>();</highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>micros<sp/>=<sp/>now<sp/>-<sp/><ref refid="db__bench_8cc_1a66ecede1671386c072a6b094bb71745c" kindref="member">last_op_finish_</ref>;</highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>hist_.Add(micros);</highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(micros<sp/>&gt;<sp/>20000)<sp/>{</highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(stderr,<sp/></highlight><highlight class="stringliteral">&quot;long<sp/>op:<sp/>%.1f<sp/>micros%30s\r&quot;</highlight><highlight class="normal">,<sp/>micros,<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fflush(stderr);</highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>last_op_finish_<sp/>=<sp/>now;</highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="220"><highlight class="normal"></highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/><sp/><sp/>done_++;</highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(done_<sp/>&gt;=<sp/>next_report_)<sp/>{</highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>(next_report_<sp/>&lt;<sp/>1000)<sp/><sp/><sp/>next_report_<sp/>+=<sp/>100;</highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(next_report_<sp/>&lt;<sp/>5000)<sp/><sp/><sp/>next_report_<sp/>+=<sp/>500;</highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(next_report_<sp/>&lt;<sp/>10000)<sp/><sp/>next_report_<sp/>+=<sp/>1000;</highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(next_report_<sp/>&lt;<sp/>50000)<sp/><sp/>next_report_<sp/>+=<sp/>5000;</highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(next_report_<sp/>&lt;<sp/>100000)<sp/>next_report_<sp/>+=<sp/>10000;</highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(next_report_<sp/>&lt;<sp/>500000)<sp/>next_report_<sp/>+=<sp/>50000;</highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>next_report_<sp/>+=<sp/>100000;</highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(stderr,<sp/></highlight><highlight class="stringliteral">&quot;...<sp/>finished<sp/>%d<sp/>ops%30s\r&quot;</highlight><highlight class="normal">,<sp/>done_,<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>fflush(stderr);</highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="234"><highlight class="normal"></highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>AddBytes(<ref refid="stdint_8h_1adec1df1b8b51cb32b77e5b86fff46471" kindref="member">int64_t</ref><sp/>n)<sp/>{</highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/><sp/><sp/>bytes_<sp/>+=<sp/>n;</highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="238"><highlight class="normal"></highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Report(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Slice&amp;<sp/><ref refid="testharness_8cc_1a8f8f80d37794cde9472343e4487ba3eb" kindref="member">name</ref>)<sp/>{</highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Pretend<sp/>at<sp/>least<sp/>one<sp/>op<sp/>was<sp/>done<sp/>in<sp/>case<sp/>we<sp/>are<sp/>running<sp/>a<sp/>benchmark</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>that<sp/>does<sp/>not<sp/>call<sp/>FinishedSingleOp().</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(done_<sp/>&lt;<sp/>1)<sp/>done_<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="243"><highlight class="normal"></highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>extra;</highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(bytes_<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Rate<sp/>is<sp/>computed<sp/>on<sp/>actual<sp/>elapsed<sp/>time,<sp/>not<sp/>the<sp/>sum<sp/>of<sp/>per-thread</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>elapsed<sp/>times.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>elapsed<sp/>=<sp/>(finish_<sp/>-<sp/><ref refid="db__bench_8cc_1a792d499857ed9d45deb633ef47ee2634" kindref="member">start_</ref>)<sp/>*<sp/>1e-6;</highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>rate[100];</highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>snprintf(rate,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(rate),<sp/></highlight><highlight class="stringliteral">&quot;%6.1f<sp/>MB/s&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(bytes_<sp/>/<sp/>1048576.0)<sp/>/<sp/>elapsed);</highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>extra<sp/>=<sp/>rate;</highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/><sp/><sp/>AppendWithSpace(&amp;extra,<sp/>message_);</highlight></codeline>
<codeline lineno="255"><highlight class="normal"></highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/><sp/><sp/>fprintf(stdout,<sp/></highlight><highlight class="stringliteral">&quot;%-12s<sp/>:<sp/>%11.3f<sp/>micros/op;%s%s\n&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>name.ToString().c_str(),</highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>seconds_<sp/>*<sp/>1e6<sp/>/<sp/><ref refid="db__bench_8cc_1a8ec1339ea1000cfdf61b7ebab380b465" kindref="member">done_</ref>,</highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(extra.empty()<sp/>?<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>extra.c_str());</highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(FLAGS_histogram)<sp/>{</highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(stdout,<sp/></highlight><highlight class="stringliteral">&quot;Microseconds<sp/>per<sp/>op:\n%s\n&quot;</highlight><highlight class="normal">,<sp/>hist_.ToString().c_str());</highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/><sp/><sp/>fflush(stdout);</highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="266"><highlight class="normal">};</highlight></codeline>
<codeline lineno="267"><highlight class="normal"></highlight></codeline>
<codeline lineno="268"><highlight class="normal"></highlight><highlight class="comment">//<sp/>State<sp/>shared<sp/>by<sp/>all<sp/>concurrent<sp/>executions<sp/>of<sp/>the<sp/>same<sp/>benchmark.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="269"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">SharedState<sp/>{</highlight></codeline>
<codeline lineno="270" refid="db__bench_8cc_1a1a5c2f3b52d2dec1d9896cec4b02d17e" refkind="member"><highlight class="normal"><sp/><sp/>port::Mutex<sp/><ref refid="db__bench_8cc_1a1a5c2f3b52d2dec1d9896cec4b02d17e" kindref="member">mu</ref>;</highlight></codeline>
<codeline lineno="271" refid="db__bench_8cc_1aa35826d3f6dc34ef1f1b35dee6db9d91" refkind="member"><highlight class="normal"><sp/><sp/>port::CondVar<sp/><ref refid="db__bench_8cc_1aa35826d3f6dc34ef1f1b35dee6db9d91" kindref="member">cv</ref>;</highlight></codeline>
<codeline lineno="272" refid="db__bench_8cc_1ac7af894858cf396a219d632f40afdc8d" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="db__bench_8cc_1ac7af894858cf396a219d632f40afdc8d" kindref="member">total</ref>;</highlight></codeline>
<codeline lineno="273"><highlight class="normal"></highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Each<sp/>thread<sp/>goes<sp/>through<sp/>the<sp/>following<sp/>states:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>(1)<sp/>initializing</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>(2)<sp/>waiting<sp/>for<sp/>others<sp/>to<sp/>be<sp/>initialized</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>(3)<sp/>running</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>(4)<sp/>done</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="279"><highlight class="normal"></highlight></codeline>
<codeline lineno="280" refid="db__bench_8cc_1a5f30212b0616a62bfa40f20fcf34f056" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="db__bench_8cc_1a5f30212b0616a62bfa40f20fcf34f056" kindref="member">num_initialized</ref>;</highlight></codeline>
<codeline lineno="281" refid="db__bench_8cc_1a0ea1509241fe84bfe6bf9f1f0582292c" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="db__bench_8cc_1a0ea1509241fe84bfe6bf9f1f0582292c" kindref="member">num_done</ref>;</highlight></codeline>
<codeline lineno="282" refid="db__bench_8cc_1ab376b87f96a574a793c03c53e75afec8" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="db__bench_8cc_1ab376b87f96a574a793c03c53e75afec8" kindref="member">start</ref>;</highlight></codeline>
<codeline lineno="283"><highlight class="normal"></highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/>SharedState()<sp/>:<sp/>cv(&amp;mu)<sp/>{<sp/>}</highlight></codeline>
<codeline lineno="285"><highlight class="normal">};</highlight></codeline>
<codeline lineno="286"><highlight class="normal"></highlight></codeline>
<codeline lineno="287"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Per-thread<sp/>state<sp/>for<sp/>concurrent<sp/>executions<sp/>of<sp/>the<sp/>same<sp/>benchmark.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="288"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">ThreadState<sp/>{</highlight></codeline>
<codeline lineno="289" refid="db__bench_8cc_1a8cc3dd191f714ba4ae35b2d3ac5b557a" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="db__bench_8cc_1a8cc3dd191f714ba4ae35b2d3ac5b557a" kindref="member">tid</ref>;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>0..n-1<sp/>when<sp/>running<sp/>in<sp/>n<sp/>threads</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="290" refid="db__bench_8cc_1a2391b9dab13f09bae65ae349c8d4c271" refkind="member"><highlight class="normal"><sp/><sp/>Random<sp/><ref refid="db__bench_8cc_1a2391b9dab13f09bae65ae349c8d4c271" kindref="member">rand</ref>;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Has<sp/>different<sp/>seeds<sp/>for<sp/>different<sp/>threads</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="291" refid="db__bench_8cc_1a5925d216740c89f43482df806fd14e8c" refkind="member"><highlight class="normal"><sp/><sp/>Stats<sp/><ref refid="db__bench_8cc_1a5925d216740c89f43482df806fd14e8c" kindref="member">stats</ref>;</highlight></codeline>
<codeline lineno="292" refid="db__bench_8cc_1af670cad03774a4316fb28a8634d33a56" refkind="member"><highlight class="normal"><sp/><sp/>SharedState*<sp/><ref refid="db__bench_8cc_1af670cad03774a4316fb28a8634d33a56" kindref="member">shared</ref>;</highlight></codeline>
<codeline lineno="293"><highlight class="normal"></highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/>ThreadState(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>index)</highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>tid(index),</highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rand(1000<sp/>+<sp/>index)<sp/>{</highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="298"><highlight class="normal">};</highlight></codeline>
<codeline lineno="299"><highlight class="normal"></highlight></codeline>
<codeline lineno="300"><highlight class="normal">}<sp/><sp/></highlight><highlight class="comment">//<sp/>namespace</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="301"><highlight class="normal"></highlight></codeline>
<codeline lineno="302" refid="classleveldb_1_1_benchmark" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classleveldb_1_1_benchmark" kindref="compound">Benchmark</ref><sp/>{</highlight></codeline>
<codeline lineno="303"><highlight class="normal"><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/><ref refid="classleveldb_1_1_cache" kindref="compound">Cache</ref>*<sp/>cache_;</highlight></codeline>
<codeline lineno="305"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classleveldb_1_1_filter_policy" kindref="compound">FilterPolicy</ref>*<sp/>filter_policy_;</highlight></codeline>
<codeline lineno="306"><highlight class="normal"><sp/><sp/><ref refid="classleveldb_1_1_d_b" kindref="compound">DB</ref>*<sp/>db_;</highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>num_;</highlight></codeline>
<codeline lineno="308"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>value_size_;</highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>entries_per_batch_;</highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/><ref refid="structleveldb_1_1_write_options" kindref="compound">WriteOptions</ref><sp/>write_options_;</highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>reads_;</highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>heap_counter_;</highlight></codeline>
<codeline lineno="313"><highlight class="normal"></highlight></codeline>
<codeline lineno="314"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>PrintHeader()<sp/>{</highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>kKeySize<sp/>=<sp/>16;</highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/><sp/><sp/>PrintEnvironment();</highlight></codeline>
<codeline lineno="317"><highlight class="normal"><sp/><sp/><sp/><sp/>fprintf(stdout,<sp/></highlight><highlight class="stringliteral">&quot;Keys:<sp/><sp/><sp/><sp/><sp/><sp/><sp/>%d<sp/>bytes<sp/>each\n&quot;</highlight><highlight class="normal">,<sp/>kKeySize);</highlight></codeline>
<codeline lineno="318"><highlight class="normal"><sp/><sp/><sp/><sp/>fprintf(stdout,<sp/></highlight><highlight class="stringliteral">&quot;Values:<sp/><sp/><sp/><sp/><sp/>%d<sp/>bytes<sp/>each<sp/>(%d<sp/>bytes<sp/>after<sp/>compression)\n&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FLAGS_value_size,</highlight></codeline>
<codeline lineno="320"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>static_cast&lt;int&gt;(FLAGS_value_size<sp/>*<sp/>FLAGS_compression_ratio<sp/>+<sp/>0.5));</highlight></codeline>
<codeline lineno="321"><highlight class="normal"><sp/><sp/><sp/><sp/>fprintf(stdout,<sp/></highlight><highlight class="stringliteral">&quot;Entries:<sp/><sp/><sp/><sp/>%d\n&quot;</highlight><highlight class="normal">,<sp/>num_);</highlight></codeline>
<codeline lineno="322"><highlight class="normal"><sp/><sp/><sp/><sp/>fprintf(stdout,<sp/></highlight><highlight class="stringliteral">&quot;RawSize:<sp/><sp/><sp/><sp/>%.1f<sp/>MB<sp/>(estimated)\n&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((static_cast&lt;int64_t&gt;(kKeySize<sp/>+<sp/>FLAGS_value_size)<sp/>*<sp/>num_)</highlight></codeline>
<codeline lineno="324"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>/<sp/>1048576.0));</highlight></codeline>
<codeline lineno="325"><highlight class="normal"><sp/><sp/><sp/><sp/>fprintf(stdout,<sp/></highlight><highlight class="stringliteral">&quot;FileSize:<sp/><sp/><sp/>%.1f<sp/>MB<sp/>(estimated)\n&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="326"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(((kKeySize<sp/>+<sp/>FLAGS_value_size<sp/>*<sp/>FLAGS_compression_ratio)<sp/>*<sp/>num_)</highlight></codeline>
<codeline lineno="327"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>/<sp/>1048576.0));</highlight></codeline>
<codeline lineno="328"><highlight class="normal"><sp/><sp/><sp/><sp/>PrintWarnings();</highlight></codeline>
<codeline lineno="329"><highlight class="normal"><sp/><sp/><sp/><sp/>fprintf(stdout,<sp/></highlight><highlight class="stringliteral">&quot;------------------------------------------------\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="330"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="331"><highlight class="normal"></highlight></codeline>
<codeline lineno="332"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>PrintWarnings()<sp/>{</highlight></codeline>
<codeline lineno="333"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(__GNUC__)<sp/>&amp;&amp;<sp/>!defined(__OPTIMIZE__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="334"><highlight class="normal"><sp/><sp/><sp/><sp/>fprintf(stdout,</highlight></codeline>
<codeline lineno="335"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;WARNING:<sp/>Optimization<sp/>is<sp/>disabled:<sp/>benchmarks<sp/>unnecessarily<sp/>slow\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="336"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="337"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="338"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>NDEBUG</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="339"><highlight class="normal"><sp/><sp/><sp/><sp/>fprintf(stdout,</highlight></codeline>
<codeline lineno="340"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;WARNING:<sp/>Assertions<sp/>are<sp/>enabled;<sp/>benchmarks<sp/>unnecessarily<sp/>slow\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="341"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="342"><highlight class="normal"></highlight></codeline>
<codeline lineno="343"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>See<sp/>if<sp/>snappy<sp/>is<sp/>working<sp/>by<sp/>attempting<sp/>to<sp/>compress<sp/>a<sp/>compressible<sp/>string</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="344"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>text[]<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;yyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyy&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="345"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>compressed;</highlight></codeline>
<codeline lineno="346"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="namespaceleveldb_1_1port_1ae6e60ac8eb298c7eef3bb70ded8c809f" kindref="member">port::Snappy_Compress</ref>(text,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(text),<sp/>&amp;compressed))<sp/>{</highlight></codeline>
<codeline lineno="347"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(stdout,<sp/></highlight><highlight class="stringliteral">&quot;WARNING:<sp/>Snappy<sp/>compression<sp/>is<sp/>not<sp/>enabled\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="348"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(compressed.size()<sp/>&gt;=<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(text))<sp/>{</highlight></codeline>
<codeline lineno="349"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(stdout,<sp/></highlight><highlight class="stringliteral">&quot;WARNING:<sp/>Snappy<sp/>compression<sp/>is<sp/>not<sp/>effective\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="350"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="351"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="352"><highlight class="normal"></highlight></codeline>
<codeline lineno="353"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>PrintEnvironment()<sp/>{</highlight></codeline>
<codeline lineno="354"><highlight class="normal"><sp/><sp/><sp/><sp/>fprintf(stderr,<sp/></highlight><highlight class="stringliteral">&quot;LevelDB:<sp/><sp/><sp/><sp/>version<sp/>%d.%d\n&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="355"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>kMajorVersion,<sp/>kMinorVersion);</highlight></codeline>
<codeline lineno="356"><highlight class="normal"></highlight></codeline>
<codeline lineno="357"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(__linux)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="358"><highlight class="normal"><sp/><sp/><sp/><sp/>time_t<sp/>now<sp/>=<sp/>time(NULL);</highlight></codeline>
<codeline lineno="359"><highlight class="normal"><sp/><sp/><sp/><sp/>fprintf(stderr,<sp/></highlight><highlight class="stringliteral">&quot;Date:<sp/><sp/><sp/><sp/><sp/><sp/><sp/>%s&quot;</highlight><highlight class="normal">,<sp/>ctime(&amp;now));<sp/><sp/></highlight><highlight class="comment">//<sp/>ctime()<sp/>adds<sp/>newline</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="360"><highlight class="normal"></highlight></codeline>
<codeline lineno="361"><highlight class="normal"><sp/><sp/><sp/><sp/>FILE*<sp/>cpuinfo<sp/>=<sp/>fopen(</highlight><highlight class="stringliteral">&quot;/proc/cpuinfo&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="362"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(cpuinfo<sp/>!=<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="363"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>line[1000];</highlight></codeline>
<codeline lineno="364"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>num_cpus<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="365"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>cpu_type;</highlight></codeline>
<codeline lineno="366"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>cache_size;</highlight></codeline>
<codeline lineno="367"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(fgets(line,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(line),<sp/>cpuinfo)<sp/>!=<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="368"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>sep<sp/>=<sp/>strchr(line,<sp/></highlight><highlight class="charliteral">&apos;:&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="369"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(sep<sp/>==<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="370"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="371"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="372"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classleveldb_1_1_slice" kindref="compound">Slice</ref><sp/>key<sp/>=<sp/>TrimSpace(<ref refid="classleveldb_1_1_slice" kindref="compound">Slice</ref>(line,<sp/>sep<sp/>-<sp/>1<sp/>-<sp/>line));</highlight></codeline>
<codeline lineno="373"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classleveldb_1_1_slice" kindref="compound">Slice</ref><sp/>val<sp/>=<sp/>TrimSpace(<ref refid="classleveldb_1_1_slice" kindref="compound">Slice</ref>(sep<sp/>+<sp/>1));</highlight></codeline>
<codeline lineno="374"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(key<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;model<sp/>name&quot;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="375"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++num_cpus;</highlight></codeline>
<codeline lineno="376"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cpu_type<sp/>=<sp/>val.<ref refid="classleveldb_1_1_slice_1a2cdd9fb649105033fde510afc9416732" kindref="member">ToString</ref>();</highlight></codeline>
<codeline lineno="377"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(key<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;cache<sp/>size&quot;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="378"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cache_size<sp/>=<sp/>val.<ref refid="classleveldb_1_1_slice_1a2cdd9fb649105033fde510afc9416732" kindref="member">ToString</ref>();</highlight></codeline>
<codeline lineno="379"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="380"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="381"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>fclose(cpuinfo);</highlight></codeline>
<codeline lineno="382"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(stderr,<sp/></highlight><highlight class="stringliteral">&quot;CPU:<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>%d<sp/>*<sp/>%s\n&quot;</highlight><highlight class="normal">,<sp/>num_cpus,<sp/>cpu_type.c_str());</highlight></codeline>
<codeline lineno="383"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(stderr,<sp/></highlight><highlight class="stringliteral">&quot;CPUCache:<sp/><sp/><sp/>%s\n&quot;</highlight><highlight class="normal">,<sp/>cache_size.c_str());</highlight></codeline>
<codeline lineno="384"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="385"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="386"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="387"><highlight class="normal"></highlight></codeline>
<codeline lineno="388"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="389" refid="classleveldb_1_1_benchmark_1a05d001d05283f6d1d589d417b42aa736" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="classleveldb_1_1_benchmark_1a05d001d05283f6d1d589d417b42aa736" kindref="member">Benchmark</ref>()</highlight></codeline>
<codeline lineno="390"><highlight class="normal"><sp/><sp/>:<sp/>cache_(FLAGS_cache_size<sp/>&gt;=<sp/>0<sp/>?<sp/><ref refid="namespaceleveldb_1a231e1b41322a8b342c91a15a78e425d4" kindref="member">NewLRUCache</ref>(FLAGS_cache_size)<sp/>:<sp/>NULL),</highlight></codeline>
<codeline lineno="391"><highlight class="normal"><sp/><sp/><sp/><sp/>filter_policy_(FLAGS_bloom_bits<sp/>&gt;=<sp/>0</highlight></codeline>
<codeline lineno="392"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>?<sp/><ref refid="namespaceleveldb_1ae6b34bf2331983721554f284b1eaa1a1" kindref="member">NewBloomFilterPolicy</ref>(FLAGS_bloom_bits)</highlight></codeline>
<codeline lineno="393"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>NULL),</highlight></codeline>
<codeline lineno="394"><highlight class="normal"><sp/><sp/><sp/><sp/>db_(NULL),</highlight></codeline>
<codeline lineno="395"><highlight class="normal"><sp/><sp/><sp/><sp/>num_(FLAGS_num),</highlight></codeline>
<codeline lineno="396"><highlight class="normal"><sp/><sp/><sp/><sp/>value_size_(FLAGS_value_size),</highlight></codeline>
<codeline lineno="397"><highlight class="normal"><sp/><sp/><sp/><sp/>entries_per_batch_(1),</highlight></codeline>
<codeline lineno="398"><highlight class="normal"><sp/><sp/><sp/><sp/>reads_(FLAGS_reads<sp/>&lt;<sp/>0<sp/>?<sp/>FLAGS_num<sp/>:<sp/>FLAGS_reads),</highlight></codeline>
<codeline lineno="399"><highlight class="normal"><sp/><sp/><sp/><sp/>heap_counter_(0)<sp/>{</highlight></codeline>
<codeline lineno="400"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;std::string&gt;<sp/>files;</highlight></codeline>
<codeline lineno="401"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classleveldb_1_1_env_1ae15b67e650ff6790059745fd1b3bf3e7" kindref="member">Env::Default</ref>()-&gt;<ref refid="classleveldb_1_1_env_1a53028e3112d7bb3bf6574ddaab18d6f6" kindref="member">GetChildren</ref>(FLAGS_db,<sp/>&amp;files);</highlight></codeline>
<codeline lineno="402"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>files.size();<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="403"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classleveldb_1_1_slice" kindref="compound">Slice</ref>(files[i]).<ref refid="classleveldb_1_1_slice_1aac9a3ee9b05567c8c93793e7593a5f13" kindref="member">starts_with</ref>(</highlight><highlight class="stringliteral">&quot;heap-&quot;</highlight><highlight class="normal">))<sp/>{</highlight></codeline>
<codeline lineno="404"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classleveldb_1_1_env_1ae15b67e650ff6790059745fd1b3bf3e7" kindref="member">Env::Default</ref>()-&gt;<ref refid="classleveldb_1_1_env_1ac956b984466d5f09309664177687f9af" kindref="member">DeleteFile</ref>(std::string(FLAGS_db)<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;/&quot;</highlight><highlight class="normal"><sp/>+<sp/>files[i]);</highlight></codeline>
<codeline lineno="405"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="406"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="407"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!FLAGS_use_existing_db)<sp/>{</highlight></codeline>
<codeline lineno="408"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespaceleveldb_1a5b0819d4d4adc2147b5e91a5553fd7dc" kindref="member">DestroyDB</ref>(FLAGS_db,<sp/><ref refid="structleveldb_1_1_options" kindref="compound">Options</ref>());</highlight></codeline>
<codeline lineno="409"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="410"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="411"><highlight class="normal"></highlight></codeline>
<codeline lineno="412" refid="classleveldb_1_1_benchmark_1a32bd4ebe6df5e4f664a944d71b066bd5" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="classleveldb_1_1_benchmark_1a32bd4ebe6df5e4f664a944d71b066bd5" kindref="member">~Benchmark</ref>()<sp/>{</highlight></codeline>
<codeline lineno="413"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>db_;</highlight></codeline>
<codeline lineno="414"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>cache_;</highlight></codeline>
<codeline lineno="415"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>filter_policy_;</highlight></codeline>
<codeline lineno="416"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="417"><highlight class="normal"></highlight></codeline>
<codeline lineno="418" refid="classleveldb_1_1_benchmark_1a2f262afa0c7d10fcf531fe9657fba490" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classleveldb_1_1_benchmark_1a2f262afa0c7d10fcf531fe9657fba490" kindref="member">Run</ref>()<sp/>{</highlight></codeline>
<codeline lineno="419"><highlight class="normal"><sp/><sp/><sp/><sp/>PrintHeader();</highlight></codeline>
<codeline lineno="420"><highlight class="normal"><sp/><sp/><sp/><sp/>Open();</highlight></codeline>
<codeline lineno="421"><highlight class="normal"></highlight></codeline>
<codeline lineno="422"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>benchmarks<sp/>=<sp/>FLAGS_benchmarks;</highlight></codeline>
<codeline lineno="423"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(benchmarks<sp/>!=<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="424"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>sep<sp/>=<sp/>strchr(benchmarks,<sp/></highlight><highlight class="charliteral">&apos;,&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="425"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classleveldb_1_1_slice" kindref="compound">Slice</ref><sp/><ref refid="testharness_8cc_1a8f8f80d37794cde9472343e4487ba3eb" kindref="member">name</ref>;</highlight></codeline>
<codeline lineno="426"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(sep<sp/>==<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="427"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>name<sp/>=<sp/>benchmarks;</highlight></codeline>
<codeline lineno="428"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>benchmarks<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="429"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="430"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>name<sp/>=<sp/><ref refid="classleveldb_1_1_slice" kindref="compound">Slice</ref>(benchmarks,<sp/>sep<sp/>-<sp/>benchmarks);</highlight></codeline>
<codeline lineno="431"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>benchmarks<sp/>=<sp/>sep<sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="432"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="433"><highlight class="normal"></highlight></codeline>
<codeline lineno="434"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Reset<sp/>parameters<sp/>that<sp/>may<sp/>be<sp/>overridden<sp/>below</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="435"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>num_<sp/>=<sp/>FLAGS_num;</highlight></codeline>
<codeline lineno="436"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>reads_<sp/>=<sp/>(FLAGS_reads<sp/>&lt;<sp/>0<sp/>?<sp/>FLAGS_num<sp/>:<sp/>FLAGS_reads);</highlight></codeline>
<codeline lineno="437"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>value_size_<sp/>=<sp/>FLAGS_value_size;</highlight></codeline>
<codeline lineno="438"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>entries_per_batch_<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="439"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>write_options_<sp/>=<sp/><ref refid="structleveldb_1_1_write_options" kindref="compound">WriteOptions</ref>();</highlight></codeline>
<codeline lineno="440"><highlight class="normal"></highlight></codeline>
<codeline lineno="441"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>void<sp/>(<ref refid="classleveldb_1_1_benchmark" kindref="compound">Benchmark</ref>::*method)(ThreadState*)<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="442"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>fresh_db<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="443"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>num_threads<sp/>=<sp/>FLAGS_threads;</highlight></codeline>
<codeline lineno="444"><highlight class="normal"></highlight></codeline>
<codeline lineno="445"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(name<sp/>==<sp/><ref refid="classleveldb_1_1_slice" kindref="compound">Slice</ref>(</highlight><highlight class="stringliteral">&quot;fillseq&quot;</highlight><highlight class="normal">))<sp/>{</highlight></codeline>
<codeline lineno="446"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fresh_db<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="447"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>method<sp/>=<sp/>&amp;Benchmark::WriteSeq;</highlight></codeline>
<codeline lineno="448"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(name<sp/>==<sp/><ref refid="classleveldb_1_1_slice" kindref="compound">Slice</ref>(</highlight><highlight class="stringliteral">&quot;fillbatch&quot;</highlight><highlight class="normal">))<sp/>{</highlight></codeline>
<codeline lineno="449"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fresh_db<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="450"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>entries_per_batch_<sp/>=<sp/>1000;</highlight></codeline>
<codeline lineno="451"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>method<sp/>=<sp/>&amp;Benchmark::WriteSeq;</highlight></codeline>
<codeline lineno="452"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(name<sp/>==<sp/><ref refid="classleveldb_1_1_slice" kindref="compound">Slice</ref>(</highlight><highlight class="stringliteral">&quot;fillrandom&quot;</highlight><highlight class="normal">))<sp/>{</highlight></codeline>
<codeline lineno="453"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fresh_db<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="454"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>method<sp/>=<sp/>&amp;Benchmark::WriteRandom;</highlight></codeline>
<codeline lineno="455"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(name<sp/>==<sp/><ref refid="classleveldb_1_1_slice" kindref="compound">Slice</ref>(</highlight><highlight class="stringliteral">&quot;overwrite&quot;</highlight><highlight class="normal">))<sp/>{</highlight></codeline>
<codeline lineno="456"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fresh_db<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="457"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>method<sp/>=<sp/>&amp;Benchmark::WriteRandom;</highlight></codeline>
<codeline lineno="458"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(name<sp/>==<sp/><ref refid="classleveldb_1_1_slice" kindref="compound">Slice</ref>(</highlight><highlight class="stringliteral">&quot;fillsync&quot;</highlight><highlight class="normal">))<sp/>{</highlight></codeline>
<codeline lineno="459"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fresh_db<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="460"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>num_<sp/>/=<sp/>1000;</highlight></codeline>
<codeline lineno="461"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>write_options_.<ref refid="structleveldb_1_1_write_options_1a07cd165ae5ed59a763001286e14ba47e" kindref="member">sync</ref><sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="462"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>method<sp/>=<sp/>&amp;Benchmark::WriteRandom;</highlight></codeline>
<codeline lineno="463"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(name<sp/>==<sp/><ref refid="classleveldb_1_1_slice" kindref="compound">Slice</ref>(</highlight><highlight class="stringliteral">&quot;fill100K&quot;</highlight><highlight class="normal">))<sp/>{</highlight></codeline>
<codeline lineno="464"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fresh_db<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="465"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>num_<sp/>/=<sp/>1000;</highlight></codeline>
<codeline lineno="466"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>value_size_<sp/>=<sp/>100<sp/>*<sp/>1000;</highlight></codeline>
<codeline lineno="467"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>method<sp/>=<sp/>&amp;Benchmark::WriteRandom;</highlight></codeline>
<codeline lineno="468"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(name<sp/>==<sp/><ref refid="classleveldb_1_1_slice" kindref="compound">Slice</ref>(</highlight><highlight class="stringliteral">&quot;readseq&quot;</highlight><highlight class="normal">))<sp/>{</highlight></codeline>
<codeline lineno="469"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>method<sp/>=<sp/>&amp;<ref refid="classleveldb_1_1_benchmark_1a301897d0609459c5e6072db05da6b737" kindref="member">Benchmark::ReadSequential</ref>;</highlight></codeline>
<codeline lineno="470"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(name<sp/>==<sp/><ref refid="classleveldb_1_1_slice" kindref="compound">Slice</ref>(</highlight><highlight class="stringliteral">&quot;readreverse&quot;</highlight><highlight class="normal">))<sp/>{</highlight></codeline>
<codeline lineno="471"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>method<sp/>=<sp/>&amp;Benchmark::ReadReverse;</highlight></codeline>
<codeline lineno="472"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(name<sp/>==<sp/><ref refid="classleveldb_1_1_slice" kindref="compound">Slice</ref>(</highlight><highlight class="stringliteral">&quot;readrandom&quot;</highlight><highlight class="normal">))<sp/>{</highlight></codeline>
<codeline lineno="473"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>method<sp/>=<sp/>&amp;Benchmark::ReadRandom;</highlight></codeline>
<codeline lineno="474"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(name<sp/>==<sp/><ref refid="classleveldb_1_1_slice" kindref="compound">Slice</ref>(</highlight><highlight class="stringliteral">&quot;readmissing&quot;</highlight><highlight class="normal">))<sp/>{</highlight></codeline>
<codeline lineno="475"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>method<sp/>=<sp/>&amp;Benchmark::ReadMissing;</highlight></codeline>
<codeline lineno="476"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(name<sp/>==<sp/><ref refid="classleveldb_1_1_slice" kindref="compound">Slice</ref>(</highlight><highlight class="stringliteral">&quot;seekrandom&quot;</highlight><highlight class="normal">))<sp/>{</highlight></codeline>
<codeline lineno="477"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>method<sp/>=<sp/>&amp;Benchmark::SeekRandom;</highlight></codeline>
<codeline lineno="478"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(name<sp/>==<sp/><ref refid="classleveldb_1_1_slice" kindref="compound">Slice</ref>(</highlight><highlight class="stringliteral">&quot;readhot&quot;</highlight><highlight class="normal">))<sp/>{</highlight></codeline>
<codeline lineno="479"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>method<sp/>=<sp/>&amp;Benchmark::ReadHot;</highlight></codeline>
<codeline lineno="480"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(name<sp/>==<sp/><ref refid="classleveldb_1_1_slice" kindref="compound">Slice</ref>(</highlight><highlight class="stringliteral">&quot;readrandomsmall&quot;</highlight><highlight class="normal">))<sp/>{</highlight></codeline>
<codeline lineno="481"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>reads_<sp/>/=<sp/>1000;</highlight></codeline>
<codeline lineno="482"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>method<sp/>=<sp/>&amp;Benchmark::ReadRandom;</highlight></codeline>
<codeline lineno="483"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(name<sp/>==<sp/><ref refid="classleveldb_1_1_slice" kindref="compound">Slice</ref>(</highlight><highlight class="stringliteral">&quot;deleteseq&quot;</highlight><highlight class="normal">))<sp/>{</highlight></codeline>
<codeline lineno="484"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>method<sp/>=<sp/>&amp;Benchmark::DeleteSeq;</highlight></codeline>
<codeline lineno="485"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(name<sp/>==<sp/><ref refid="classleveldb_1_1_slice" kindref="compound">Slice</ref>(</highlight><highlight class="stringliteral">&quot;deleterandom&quot;</highlight><highlight class="normal">))<sp/>{</highlight></codeline>
<codeline lineno="486"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>method<sp/>=<sp/>&amp;Benchmark::DeleteRandom;</highlight></codeline>
<codeline lineno="487"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(name<sp/>==<sp/><ref refid="classleveldb_1_1_slice" kindref="compound">Slice</ref>(</highlight><highlight class="stringliteral">&quot;readwhilewriting&quot;</highlight><highlight class="normal">))<sp/>{</highlight></codeline>
<codeline lineno="488"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>num_threads++;<sp/><sp/></highlight><highlight class="comment">//<sp/>Add<sp/>extra<sp/>thread<sp/>for<sp/>writing</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="489"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>method<sp/>=<sp/>&amp;Benchmark::ReadWhileWriting;</highlight></codeline>
<codeline lineno="490"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(name<sp/>==<sp/><ref refid="classleveldb_1_1_slice" kindref="compound">Slice</ref>(</highlight><highlight class="stringliteral">&quot;compact&quot;</highlight><highlight class="normal">))<sp/>{</highlight></codeline>
<codeline lineno="491"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>method<sp/>=<sp/>&amp;Benchmark::Compact;</highlight></codeline>
<codeline lineno="492"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(name<sp/>==<sp/><ref refid="classleveldb_1_1_slice" kindref="compound">Slice</ref>(</highlight><highlight class="stringliteral">&quot;crc32c&quot;</highlight><highlight class="normal">))<sp/>{</highlight></codeline>
<codeline lineno="493"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>method<sp/>=<sp/>&amp;Benchmark::Crc32c;</highlight></codeline>
<codeline lineno="494"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(name<sp/>==<sp/><ref refid="classleveldb_1_1_slice" kindref="compound">Slice</ref>(</highlight><highlight class="stringliteral">&quot;acquireload&quot;</highlight><highlight class="normal">))<sp/>{</highlight></codeline>
<codeline lineno="495"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>method<sp/>=<sp/>&amp;Benchmark::AcquireLoad;</highlight></codeline>
<codeline lineno="496"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(name<sp/>==<sp/><ref refid="classleveldb_1_1_slice" kindref="compound">Slice</ref>(</highlight><highlight class="stringliteral">&quot;snappycomp&quot;</highlight><highlight class="normal">))<sp/>{</highlight></codeline>
<codeline lineno="497"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>method<sp/>=<sp/>&amp;Benchmark::SnappyCompress;</highlight></codeline>
<codeline lineno="498"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(name<sp/>==<sp/><ref refid="classleveldb_1_1_slice" kindref="compound">Slice</ref>(</highlight><highlight class="stringliteral">&quot;snappyuncomp&quot;</highlight><highlight class="normal">))<sp/>{</highlight></codeline>
<codeline lineno="499"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>method<sp/>=<sp/>&amp;Benchmark::SnappyUncompress;</highlight></codeline>
<codeline lineno="500"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(name<sp/>==<sp/><ref refid="classleveldb_1_1_slice" kindref="compound">Slice</ref>(</highlight><highlight class="stringliteral">&quot;heapprofile&quot;</highlight><highlight class="normal">))<sp/>{</highlight></codeline>
<codeline lineno="501"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HeapProfile();</highlight></codeline>
<codeline lineno="502"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(name<sp/>==<sp/><ref refid="classleveldb_1_1_slice" kindref="compound">Slice</ref>(</highlight><highlight class="stringliteral">&quot;stats&quot;</highlight><highlight class="normal">))<sp/>{</highlight></codeline>
<codeline lineno="503"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PrintStats(</highlight><highlight class="stringliteral">&quot;leveldb.stats&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="504"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(name<sp/>==<sp/><ref refid="classleveldb_1_1_slice" kindref="compound">Slice</ref>(</highlight><highlight class="stringliteral">&quot;sstables&quot;</highlight><highlight class="normal">))<sp/>{</highlight></codeline>
<codeline lineno="505"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PrintStats(</highlight><highlight class="stringliteral">&quot;leveldb.sstables&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="506"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="507"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(name<sp/>!=<sp/><ref refid="classleveldb_1_1_slice" kindref="compound">Slice</ref>())<sp/>{<sp/><sp/></highlight><highlight class="comment">//<sp/>No<sp/>error<sp/>message<sp/>for<sp/>empty<sp/>name</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="508"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(stderr,<sp/></highlight><highlight class="stringliteral">&quot;unknown<sp/>benchmark<sp/>&apos;%s&apos;\n&quot;</highlight><highlight class="normal">,<sp/>name.<ref refid="classleveldb_1_1_slice_1a2cdd9fb649105033fde510afc9416732" kindref="member">ToString</ref>().c_str());</highlight></codeline>
<codeline lineno="509"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="510"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="511"><highlight class="normal"></highlight></codeline>
<codeline lineno="512"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fresh_db)<sp/>{</highlight></codeline>
<codeline lineno="513"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(FLAGS_use_existing_db)<sp/>{</highlight></codeline>
<codeline lineno="514"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(stdout,<sp/></highlight><highlight class="stringliteral">&quot;%-12s<sp/>:<sp/>skipped<sp/>(--use_existing_db<sp/>is<sp/>true)\n&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="515"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>name.<ref refid="classleveldb_1_1_slice_1a2cdd9fb649105033fde510afc9416732" kindref="member">ToString</ref>().c_str());</highlight></codeline>
<codeline lineno="516"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>method<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="517"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="518"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>db_;</highlight></codeline>
<codeline lineno="519"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>db_<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="520"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespaceleveldb_1a5b0819d4d4adc2147b5e91a5553fd7dc" kindref="member">DestroyDB</ref>(FLAGS_db,<sp/><ref refid="structleveldb_1_1_options" kindref="compound">Options</ref>());</highlight></codeline>
<codeline lineno="521"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Open();</highlight></codeline>
<codeline lineno="522"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="523"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="524"><highlight class="normal"></highlight></codeline>
<codeline lineno="525"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(method<sp/>!=<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="526"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>RunBenchmark(num_threads,<sp/>name,<sp/>method);</highlight></codeline>
<codeline lineno="527"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="528"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="529"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="530"><highlight class="normal"></highlight></codeline>
<codeline lineno="531"><highlight class="normal"><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="532"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">ThreadArg<sp/>{</highlight></codeline>
<codeline lineno="533"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classleveldb_1_1_benchmark" kindref="compound">Benchmark</ref>*<sp/>bm;</highlight></codeline>
<codeline lineno="534"><highlight class="normal"><sp/><sp/><sp/><sp/>SharedState*<sp/><ref refid="db__bench_8cc_1af670cad03774a4316fb28a8634d33a56" kindref="member">shared</ref>;</highlight></codeline>
<codeline lineno="535"><highlight class="normal"><sp/><sp/><sp/><sp/>ThreadState*<sp/>thread;</highlight></codeline>
<codeline lineno="536"><highlight class="normal"><sp/><sp/><sp/><sp/>void<sp/>(<ref refid="classleveldb_1_1_benchmark" kindref="compound">Benchmark</ref>::*method)(ThreadState*);</highlight></codeline>
<codeline lineno="537"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="538"><highlight class="normal"></highlight></codeline>
<codeline lineno="539"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ThreadBody(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>v)<sp/>{</highlight></codeline>
<codeline lineno="540"><highlight class="normal"><sp/><sp/><sp/><sp/>ThreadArg*<sp/><ref refid="env__posix_8cc_1a9ce2ec4812a92cb6ab39f6e81e9173a9" kindref="member">arg</ref><sp/>=<sp/></highlight><highlight class="keyword">reinterpret_cast&lt;</highlight><highlight class="normal">ThreadArg*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(v);</highlight></codeline>
<codeline lineno="541"><highlight class="normal"><sp/><sp/><sp/><sp/>SharedState*<sp/><ref refid="db__bench_8cc_1af670cad03774a4316fb28a8634d33a56" kindref="member">shared</ref><sp/>=<sp/>arg-&gt;shared;</highlight></codeline>
<codeline lineno="542"><highlight class="normal"><sp/><sp/><sp/><sp/>ThreadState*<sp/>thread<sp/>=<sp/>arg-&gt;thread;</highlight></codeline>
<codeline lineno="543"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="544"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>MutexLock<sp/>l(&amp;shared-&gt;mu);</highlight></codeline>
<codeline lineno="545"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>shared-&gt;num_initialized++;</highlight></codeline>
<codeline lineno="546"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(shared-&gt;num_initialized<sp/>&gt;=<sp/>shared-&gt;total)<sp/>{</highlight></codeline>
<codeline lineno="547"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>shared-&gt;cv.SignalAll();</highlight></codeline>
<codeline lineno="548"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="549"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(!shared-&gt;start)<sp/>{</highlight></codeline>
<codeline lineno="550"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>shared-&gt;cv.Wait();</highlight></codeline>
<codeline lineno="551"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="552"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="553"><highlight class="normal"></highlight></codeline>
<codeline lineno="554"><highlight class="normal"><sp/><sp/><sp/><sp/>thread-&gt;stats.Start();</highlight></codeline>
<codeline lineno="555"><highlight class="normal"><sp/><sp/><sp/><sp/>(arg-&gt;bm-&gt;*(arg-&gt;method))(thread);</highlight></codeline>
<codeline lineno="556"><highlight class="normal"><sp/><sp/><sp/><sp/>thread-&gt;stats.Stop();</highlight></codeline>
<codeline lineno="557"><highlight class="normal"></highlight></codeline>
<codeline lineno="558"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="559"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>MutexLock<sp/>l(&amp;shared-&gt;mu);</highlight></codeline>
<codeline lineno="560"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>shared-&gt;num_done++;</highlight></codeline>
<codeline lineno="561"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(shared-&gt;num_done<sp/>&gt;=<sp/>shared-&gt;total)<sp/>{</highlight></codeline>
<codeline lineno="562"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>shared-&gt;cv.SignalAll();</highlight></codeline>
<codeline lineno="563"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="564"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="565"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="566"><highlight class="normal"></highlight></codeline>
<codeline lineno="567"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>RunBenchmark(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n,<sp/>Slice<sp/>name,</highlight></codeline>
<codeline lineno="568"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>(<ref refid="classleveldb_1_1_benchmark_1a05d001d05283f6d1d589d417b42aa736" kindref="member">Benchmark</ref>::*method)(ThreadState*))<sp/>{</highlight></codeline>
<codeline lineno="569"><highlight class="normal"><sp/><sp/><sp/><sp/>SharedState<sp/><ref refid="db__bench_8cc_1af670cad03774a4316fb28a8634d33a56" kindref="member">shared</ref>;</highlight></codeline>
<codeline lineno="570"><highlight class="normal"><sp/><sp/><sp/><sp/>shared.total<sp/>=<sp/>n;</highlight></codeline>
<codeline lineno="571"><highlight class="normal"><sp/><sp/><sp/><sp/>shared.num_initialized<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="572"><highlight class="normal"><sp/><sp/><sp/><sp/>shared.num_done<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="573"><highlight class="normal"><sp/><sp/><sp/><sp/>shared.start<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="574"><highlight class="normal"></highlight></codeline>
<codeline lineno="575"><highlight class="normal"><sp/><sp/><sp/><sp/>ThreadArg*<sp/>arg<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>ThreadArg[n];</highlight></codeline>
<codeline lineno="576"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>n;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="577"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>arg[i].bm<sp/>=<sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="578"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>arg[i].method<sp/>=<sp/>method;</highlight></codeline>
<codeline lineno="579"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>arg[i].shared<sp/>=<sp/>&amp;<ref refid="db__bench_8cc_1af670cad03774a4316fb28a8634d33a56" kindref="member">shared</ref>;</highlight></codeline>
<codeline lineno="580"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>arg[i].thread<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>ThreadState(i);</highlight></codeline>
<codeline lineno="581"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>arg[i].thread-&gt;shared<sp/>=<sp/>&amp;<ref refid="db__bench_8cc_1af670cad03774a4316fb28a8634d33a56" kindref="member">shared</ref>;</highlight></codeline>
<codeline lineno="582"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classleveldb_1_1_env_1ae15b67e650ff6790059745fd1b3bf3e7" kindref="member">Env::Default</ref>()-&gt;<ref refid="classleveldb_1_1_env_1a25eafd1622a2cf2a415ee8b2325bc808" kindref="member">StartThread</ref>(ThreadBody,<sp/>&amp;arg[i]);</highlight></codeline>
<codeline lineno="583"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="584"><highlight class="normal"></highlight></codeline>
<codeline lineno="585"><highlight class="normal"><sp/><sp/><sp/><sp/>shared.mu.Lock();</highlight></codeline>
<codeline lineno="586"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(shared.num_initialized<sp/>&lt;<sp/>n)<sp/>{</highlight></codeline>
<codeline lineno="587"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>shared.cv.Wait();</highlight></codeline>
<codeline lineno="588"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="589"><highlight class="normal"></highlight></codeline>
<codeline lineno="590"><highlight class="normal"><sp/><sp/><sp/><sp/>shared.start<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="591"><highlight class="normal"><sp/><sp/><sp/><sp/>shared.cv.SignalAll();</highlight></codeline>
<codeline lineno="592"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(shared.num_done<sp/>&lt;<sp/>n)<sp/>{</highlight></codeline>
<codeline lineno="593"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>shared.cv.Wait();</highlight></codeline>
<codeline lineno="594"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="595"><highlight class="normal"><sp/><sp/><sp/><sp/>shared.mu.Unlock();</highlight></codeline>
<codeline lineno="596"><highlight class="normal"></highlight></codeline>
<codeline lineno="597"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>1;<sp/>i<sp/>&lt;<sp/>n;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="598"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>arg[0].thread-&gt;stats.Merge(arg[i].thread-&gt;stats);</highlight></codeline>
<codeline lineno="599"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="600"><highlight class="normal"><sp/><sp/><sp/><sp/>arg[0].thread-&gt;stats.Report(name);</highlight></codeline>
<codeline lineno="601"><highlight class="normal"></highlight></codeline>
<codeline lineno="602"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>n;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="603"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>arg[i].thread;</highlight></codeline>
<codeline lineno="604"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="605"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal">[]<sp/><ref refid="env__posix_8cc_1a9ce2ec4812a92cb6ab39f6e81e9173a9" kindref="member">arg</ref>;</highlight></codeline>
<codeline lineno="606"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="607"><highlight class="normal"></highlight></codeline>
<codeline lineno="608"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Crc32c(ThreadState*<sp/>thread)<sp/>{</highlight></codeline>
<codeline lineno="609"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Checksum<sp/>about<sp/>500MB<sp/>of<sp/>data<sp/>total</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="610"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>size<sp/>=<sp/>4096;</highlight></codeline>
<codeline lineno="611"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>label<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;(4K<sp/>per<sp/>op)&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="612"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>data(size,<sp/></highlight><highlight class="charliteral">&apos;x&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="613"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="stdint_8h_1adec1df1b8b51cb32b77e5b86fff46471" kindref="member">int64_t</ref><sp/>bytes<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="614"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="stdint_8h_1a435d1572bf3f880d55459d9805097f62" kindref="member">uint32_t</ref><sp/>crc<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="615"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(bytes<sp/>&lt;<sp/>500<sp/>*<sp/>1048576)<sp/>{</highlight></codeline>
<codeline lineno="616"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>crc<sp/>=<sp/><ref refid="namespaceleveldb_1_1crc32c_1ac004d1e3d8c75b033c162e5ae0a5cc2c" kindref="member">crc32c::Value</ref>(data.data(),<sp/>size);</highlight></codeline>
<codeline lineno="617"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>thread-&gt;stats.FinishedSingleOp();</highlight></codeline>
<codeline lineno="618"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>bytes<sp/>+=<sp/>size;</highlight></codeline>
<codeline lineno="619"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="620"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Print<sp/>so<sp/>result<sp/>is<sp/>not<sp/>dead</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="621"><highlight class="normal"><sp/><sp/><sp/><sp/>fprintf(stderr,<sp/></highlight><highlight class="stringliteral">&quot;...<sp/>crc=0x%x\r&quot;</highlight><highlight class="normal">,<sp/>static_cast&lt;unsigned<sp/>int&gt;(crc));</highlight></codeline>
<codeline lineno="622"><highlight class="normal"></highlight></codeline>
<codeline lineno="623"><highlight class="normal"><sp/><sp/><sp/><sp/>thread-&gt;stats.AddBytes(bytes);</highlight></codeline>
<codeline lineno="624"><highlight class="normal"><sp/><sp/><sp/><sp/>thread-&gt;stats.AddMessage(label);</highlight></codeline>
<codeline lineno="625"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="626"><highlight class="normal"></highlight></codeline>
<codeline lineno="627"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>AcquireLoad(ThreadState*<sp/>thread)<sp/>{</highlight></codeline>
<codeline lineno="628"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>dummy;</highlight></codeline>
<codeline lineno="629"><highlight class="normal"><sp/><sp/><sp/><sp/>port::AtomicPointer<sp/>ap(&amp;dummy);</highlight></codeline>
<codeline lineno="630"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>count<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="631"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*ptr<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="632"><highlight class="normal"><sp/><sp/><sp/><sp/>thread-&gt;stats.AddMessage(</highlight><highlight class="stringliteral">&quot;(each<sp/>op<sp/>is<sp/>1000<sp/>loads)&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="633"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(count<sp/>&lt;<sp/>100000)<sp/>{</highlight></codeline>
<codeline lineno="634"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>1000;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="635"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ptr<sp/>=<sp/>ap.Acquire_Load();</highlight></codeline>
<codeline lineno="636"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="637"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>count++;</highlight></codeline>
<codeline lineno="638"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>thread-&gt;stats.FinishedSingleOp();</highlight></codeline>
<codeline lineno="639"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="640"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ptr<sp/>==<sp/>NULL)<sp/>exit(1);<sp/></highlight><highlight class="comment">//<sp/>Disable<sp/>unused<sp/>variable<sp/>warning.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="641"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="642"><highlight class="normal"></highlight></codeline>
<codeline lineno="643"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>SnappyCompress(ThreadState*<sp/>thread)<sp/>{</highlight></codeline>
<codeline lineno="644"><highlight class="normal"><sp/><sp/><sp/><sp/>RandomGenerator<sp/>gen;</highlight></codeline>
<codeline lineno="645"><highlight class="normal"><sp/><sp/><sp/><sp/>Slice<sp/>input<sp/>=<sp/>gen.Generate(Options().block_size);</highlight></codeline>
<codeline lineno="646"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="stdint_8h_1adec1df1b8b51cb32b77e5b86fff46471" kindref="member">int64_t</ref><sp/>bytes<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="647"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="stdint_8h_1adec1df1b8b51cb32b77e5b86fff46471" kindref="member">int64_t</ref><sp/>produced<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="648"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>ok<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="649"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>compressed;</highlight></codeline>
<codeline lineno="650"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(ok<sp/>&amp;&amp;<sp/>bytes<sp/>&lt;<sp/>1024<sp/>*<sp/>1048576)<sp/>{<sp/><sp/></highlight><highlight class="comment">//<sp/>Compress<sp/>1G</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="651"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ok<sp/>=<sp/><ref refid="namespaceleveldb_1_1port_1ae6e60ac8eb298c7eef3bb70ded8c809f" kindref="member">port::Snappy_Compress</ref>(input.data(),<sp/>input.size(),<sp/>&amp;compressed);</highlight></codeline>
<codeline lineno="652"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>produced<sp/>+=<sp/>compressed.size();</highlight></codeline>
<codeline lineno="653"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>bytes<sp/>+=<sp/>input.size();</highlight></codeline>
<codeline lineno="654"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>thread-&gt;stats.FinishedSingleOp();</highlight></codeline>
<codeline lineno="655"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="656"><highlight class="normal"></highlight></codeline>
<codeline lineno="657"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!ok)<sp/>{</highlight></codeline>
<codeline lineno="658"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>thread-&gt;stats.AddMessage(</highlight><highlight class="stringliteral">&quot;(snappy<sp/>failure)&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="659"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="660"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>buf[100];</highlight></codeline>
<codeline lineno="661"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>snprintf(buf,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(buf),<sp/></highlight><highlight class="stringliteral">&quot;(output:<sp/>%.1f%%)&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="662"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(produced<sp/>*<sp/>100.0)<sp/>/<sp/>bytes);</highlight></codeline>
<codeline lineno="663"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>thread-&gt;stats.AddMessage(buf);</highlight></codeline>
<codeline lineno="664"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>thread-&gt;stats.AddBytes(bytes);</highlight></codeline>
<codeline lineno="665"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="666"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="667"><highlight class="normal"></highlight></codeline>
<codeline lineno="668"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>SnappyUncompress(ThreadState*<sp/>thread)<sp/>{</highlight></codeline>
<codeline lineno="669"><highlight class="normal"><sp/><sp/><sp/><sp/>RandomGenerator<sp/>gen;</highlight></codeline>
<codeline lineno="670"><highlight class="normal"><sp/><sp/><sp/><sp/>Slice<sp/>input<sp/>=<sp/>gen.Generate(Options().block_size);</highlight></codeline>
<codeline lineno="671"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>compressed;</highlight></codeline>
<codeline lineno="672"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>ok<sp/>=<sp/><ref refid="namespaceleveldb_1_1port_1ae6e60ac8eb298c7eef3bb70ded8c809f" kindref="member">port::Snappy_Compress</ref>(input.data(),<sp/>input.size(),<sp/>&amp;compressed);</highlight></codeline>
<codeline lineno="673"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="stdint_8h_1adec1df1b8b51cb32b77e5b86fff46471" kindref="member">int64_t</ref><sp/>bytes<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="674"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>uncompressed<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">[input.size()];</highlight></codeline>
<codeline lineno="675"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(ok<sp/>&amp;&amp;<sp/>bytes<sp/>&lt;<sp/>1024<sp/>*<sp/>1048576)<sp/>{<sp/><sp/></highlight><highlight class="comment">//<sp/>Compress<sp/>1G</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="676"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ok<sp/>=<sp/><sp/><ref refid="namespaceleveldb_1_1port_1ab6f0c4381b00450e06d3000a8cb48a55" kindref="member">port::Snappy_Uncompress</ref>(compressed.data(),<sp/>compressed.size(),</highlight></codeline>
<codeline lineno="677"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uncompressed);</highlight></codeline>
<codeline lineno="678"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>bytes<sp/>+=<sp/>input.size();</highlight></codeline>
<codeline lineno="679"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>thread-&gt;stats.FinishedSingleOp();</highlight></codeline>
<codeline lineno="680"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="681"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal">[]<sp/>uncompressed;</highlight></codeline>
<codeline lineno="682"><highlight class="normal"></highlight></codeline>
<codeline lineno="683"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!ok)<sp/>{</highlight></codeline>
<codeline lineno="684"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>thread-&gt;stats.AddMessage(</highlight><highlight class="stringliteral">&quot;(snappy<sp/>failure)&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="685"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="686"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>thread-&gt;stats.AddBytes(bytes);</highlight></codeline>
<codeline lineno="687"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="688"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="689"><highlight class="normal"></highlight></codeline>
<codeline lineno="690"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Open()<sp/>{</highlight></codeline>
<codeline lineno="691"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(db_<sp/>==<sp/>NULL);</highlight></codeline>
<codeline lineno="692"><highlight class="normal"><sp/><sp/><sp/><sp/>Options<sp/>options;</highlight></codeline>
<codeline lineno="693"><highlight class="normal"><sp/><sp/><sp/><sp/>options.create_if_missing<sp/>=<sp/>!FLAGS_use_existing_db;</highlight></codeline>
<codeline lineno="694"><highlight class="normal"><sp/><sp/><sp/><sp/>options.block_cache<sp/>=<sp/>cache_;</highlight></codeline>
<codeline lineno="695"><highlight class="normal"><sp/><sp/><sp/><sp/>options.write_buffer_size<sp/>=<sp/>FLAGS_write_buffer_size;</highlight></codeline>
<codeline lineno="696"><highlight class="normal"><sp/><sp/><sp/><sp/>options.max_open_files<sp/>=<sp/>FLAGS_open_files;</highlight></codeline>
<codeline lineno="697"><highlight class="normal"><sp/><sp/><sp/><sp/>options.filter_policy<sp/>=<sp/>filter_policy_;</highlight></codeline>
<codeline lineno="698"><highlight class="normal"><sp/><sp/><sp/><sp/>Status<sp/>s<sp/>=<sp/><ref refid="classleveldb_1_1_d_b_1ac1da2b48e911287d86f3a3bfa0f851fe" kindref="member">DB::Open</ref>(options,<sp/>FLAGS_db,<sp/>&amp;db_);</highlight></codeline>
<codeline lineno="699"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!s.ok())<sp/>{</highlight></codeline>
<codeline lineno="700"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(stderr,<sp/></highlight><highlight class="stringliteral">&quot;open<sp/>error:<sp/>%s\n&quot;</highlight><highlight class="normal">,<sp/>s.ToString().c_str());</highlight></codeline>
<codeline lineno="701"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>exit(1);</highlight></codeline>
<codeline lineno="702"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="703"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="704"><highlight class="normal"></highlight></codeline>
<codeline lineno="705"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>WriteSeq(ThreadState*<sp/>thread)<sp/>{</highlight></codeline>
<codeline lineno="706"><highlight class="normal"><sp/><sp/><sp/><sp/>DoWrite(thread,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="707"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="708"><highlight class="normal"></highlight></codeline>
<codeline lineno="709"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>WriteRandom(ThreadState*<sp/>thread)<sp/>{</highlight></codeline>
<codeline lineno="710"><highlight class="normal"><sp/><sp/><sp/><sp/>DoWrite(thread,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="711"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="712"><highlight class="normal"></highlight></codeline>
<codeline lineno="713"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>DoWrite(ThreadState*<sp/>thread,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>seq)<sp/>{</highlight></codeline>
<codeline lineno="714"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(num_<sp/>!=<sp/>FLAGS_num)<sp/>{</highlight></codeline>
<codeline lineno="715"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>msg[100];</highlight></codeline>
<codeline lineno="716"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>snprintf(msg,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(msg),<sp/></highlight><highlight class="stringliteral">&quot;(%d<sp/>ops)&quot;</highlight><highlight class="normal">,<sp/>num_);</highlight></codeline>
<codeline lineno="717"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>thread-&gt;stats.AddMessage(msg);</highlight></codeline>
<codeline lineno="718"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="719"><highlight class="normal"></highlight></codeline>
<codeline lineno="720"><highlight class="normal"><sp/><sp/><sp/><sp/>RandomGenerator<sp/>gen;</highlight></codeline>
<codeline lineno="721"><highlight class="normal"><sp/><sp/><sp/><sp/>WriteBatch<sp/>batch;</highlight></codeline>
<codeline lineno="722"><highlight class="normal"><sp/><sp/><sp/><sp/>Status<sp/>s;</highlight></codeline>
<codeline lineno="723"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="stdint_8h_1adec1df1b8b51cb32b77e5b86fff46471" kindref="member">int64_t</ref><sp/>bytes<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="724"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>num_;<sp/>i<sp/>+=<sp/>entries_per_batch_)<sp/>{</highlight></codeline>
<codeline lineno="725"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>batch.Clear();</highlight></codeline>
<codeline lineno="726"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>entries_per_batch_;<sp/>j++)<sp/>{</highlight></codeline>
<codeline lineno="727"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>k<sp/>=<sp/>seq<sp/>?<sp/>i+j<sp/>:<sp/>(thread-&gt;rand.Next()<sp/>%<sp/>FLAGS_num);</highlight></codeline>
<codeline lineno="728"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>key[100];</highlight></codeline>
<codeline lineno="729"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>snprintf(key,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(key),<sp/></highlight><highlight class="stringliteral">&quot;%016d&quot;</highlight><highlight class="normal">,<sp/>k);</highlight></codeline>
<codeline lineno="730"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>batch.Put(key,<sp/>gen.Generate(value_size_));</highlight></codeline>
<codeline lineno="731"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bytes<sp/>+=<sp/>value_size_<sp/>+<sp/>strlen(key);</highlight></codeline>
<codeline lineno="732"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>thread-&gt;stats.FinishedSingleOp();</highlight></codeline>
<codeline lineno="733"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="734"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>s<sp/>=<sp/>db_-&gt;<ref refid="classleveldb_1_1_d_b_1ae0b6ded8c8e0b88ff70190bf7a0c086c" kindref="member">Write</ref>(write_options_,<sp/>&amp;batch);</highlight></codeline>
<codeline lineno="735"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!s.ok())<sp/>{</highlight></codeline>
<codeline lineno="736"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(stderr,<sp/></highlight><highlight class="stringliteral">&quot;put<sp/>error:<sp/>%s\n&quot;</highlight><highlight class="normal">,<sp/>s.ToString().c_str());</highlight></codeline>
<codeline lineno="737"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>exit(1);</highlight></codeline>
<codeline lineno="738"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="739"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="740"><highlight class="normal"><sp/><sp/><sp/><sp/>thread-&gt;stats.AddBytes(bytes);</highlight></codeline>
<codeline lineno="741"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="742"><highlight class="normal"></highlight></codeline>
<codeline lineno="743"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classleveldb_1_1_benchmark_1a301897d0609459c5e6072db05da6b737" kindref="member">ReadSequential</ref>(ThreadState*<sp/>thread)<sp/>{</highlight></codeline>
<codeline lineno="744"><highlight class="normal"><sp/><sp/><sp/><sp/>Iterator*<sp/>iter<sp/>=<sp/>db_-&gt;<ref refid="classleveldb_1_1_d_b_1a5629308235de24c05c286c353d4e7d32" kindref="member">NewIterator</ref>(ReadOptions());</highlight></codeline>
<codeline lineno="745"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="746"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="stdint_8h_1adec1df1b8b51cb32b77e5b86fff46471" kindref="member">int64_t</ref><sp/>bytes<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="747"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(iter-&gt;SeekToFirst();<sp/>i<sp/>&lt;<sp/>reads_<sp/>&amp;&amp;<sp/>iter-&gt;Valid();<sp/>iter-&gt;Next())<sp/>{</highlight></codeline>
<codeline lineno="748"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>bytes<sp/>+=<sp/>iter-&gt;<ref refid="classleveldb_1_1_iterator_1ad17feced6e24a1b21db5ae6940c1f220" kindref="member">key</ref>().<ref refid="classleveldb_1_1_slice_1a947d3173f04f8a30553e89046daf91d5" kindref="member">size</ref>()<sp/>+<sp/>iter-&gt;value().size();</highlight></codeline>
<codeline lineno="749"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>thread-&gt;stats.FinishedSingleOp();</highlight></codeline>
<codeline lineno="750"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>++i;</highlight></codeline>
<codeline lineno="751"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="752"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>iter;</highlight></codeline>
<codeline lineno="753"><highlight class="normal"><sp/><sp/><sp/><sp/>thread-&gt;stats.AddBytes(bytes);</highlight></codeline>
<codeline lineno="754"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="755"><highlight class="normal"></highlight></codeline>
<codeline lineno="756"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ReadReverse(ThreadState*<sp/>thread)<sp/>{</highlight></codeline>
<codeline lineno="757"><highlight class="normal"><sp/><sp/><sp/><sp/>Iterator*<sp/>iter<sp/>=<sp/>db_-&gt;<ref refid="classleveldb_1_1_d_b_1a5629308235de24c05c286c353d4e7d32" kindref="member">NewIterator</ref>(ReadOptions());</highlight></codeline>
<codeline lineno="758"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="759"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="stdint_8h_1adec1df1b8b51cb32b77e5b86fff46471" kindref="member">int64_t</ref><sp/>bytes<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="760"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(iter-&gt;SeekToLast();<sp/>i<sp/>&lt;<sp/>reads_<sp/>&amp;&amp;<sp/>iter-&gt;Valid();<sp/>iter-&gt;Prev())<sp/>{</highlight></codeline>
<codeline lineno="761"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>bytes<sp/>+=<sp/>iter-&gt;<ref refid="classleveldb_1_1_iterator_1ad17feced6e24a1b21db5ae6940c1f220" kindref="member">key</ref>().<ref refid="classleveldb_1_1_slice_1a947d3173f04f8a30553e89046daf91d5" kindref="member">size</ref>()<sp/>+<sp/>iter-&gt;value().size();</highlight></codeline>
<codeline lineno="762"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>thread-&gt;stats.FinishedSingleOp();</highlight></codeline>
<codeline lineno="763"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>++i;</highlight></codeline>
<codeline lineno="764"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="765"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>iter;</highlight></codeline>
<codeline lineno="766"><highlight class="normal"><sp/><sp/><sp/><sp/>thread-&gt;stats.AddBytes(bytes);</highlight></codeline>
<codeline lineno="767"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="768"><highlight class="normal"></highlight></codeline>
<codeline lineno="769"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ReadRandom(ThreadState*<sp/>thread)<sp/>{</highlight></codeline>
<codeline lineno="770"><highlight class="normal"><sp/><sp/><sp/><sp/>ReadOptions<sp/>options;</highlight></codeline>
<codeline lineno="771"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/><ref refid="version__set_8cc_1a38c8b88c432e666ad10b0c5573e1160a" kindref="member">value</ref>;</highlight></codeline>
<codeline lineno="772"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>found<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="773"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>reads_;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="774"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>key[100];</highlight></codeline>
<codeline lineno="775"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>k<sp/>=<sp/>thread-&gt;rand.Next()<sp/>%<sp/>FLAGS_num;</highlight></codeline>
<codeline lineno="776"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>snprintf(key,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(key),<sp/></highlight><highlight class="stringliteral">&quot;%016d&quot;</highlight><highlight class="normal">,<sp/>k);</highlight></codeline>
<codeline lineno="777"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(db_-&gt;<ref refid="classleveldb_1_1_d_b_1ad43bd7937b9af88ff856eb8158890911" kindref="member">Get</ref>(options,<sp/>key,<sp/>&amp;value).<ref refid="classleveldb_1_1_status_1ab31e89a858c766716e3dc952be857c65" kindref="member">ok</ref>())<sp/>{</highlight></codeline>
<codeline lineno="778"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>found++;</highlight></codeline>
<codeline lineno="779"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="780"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>thread-&gt;stats.FinishedSingleOp();</highlight></codeline>
<codeline lineno="781"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="782"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>msg[100];</highlight></codeline>
<codeline lineno="783"><highlight class="normal"><sp/><sp/><sp/><sp/>snprintf(msg,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(msg),<sp/></highlight><highlight class="stringliteral">&quot;(%d<sp/>of<sp/>%d<sp/>found)&quot;</highlight><highlight class="normal">,<sp/>found,<sp/>num_);</highlight></codeline>
<codeline lineno="784"><highlight class="normal"><sp/><sp/><sp/><sp/>thread-&gt;stats.AddMessage(msg);</highlight></codeline>
<codeline lineno="785"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="786"><highlight class="normal"></highlight></codeline>
<codeline lineno="787"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ReadMissing(ThreadState*<sp/>thread)<sp/>{</highlight></codeline>
<codeline lineno="788"><highlight class="normal"><sp/><sp/><sp/><sp/>ReadOptions<sp/>options;</highlight></codeline>
<codeline lineno="789"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/><ref refid="version__set_8cc_1a38c8b88c432e666ad10b0c5573e1160a" kindref="member">value</ref>;</highlight></codeline>
<codeline lineno="790"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>reads_;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="791"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>key[100];</highlight></codeline>
<codeline lineno="792"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>k<sp/>=<sp/>thread-&gt;rand.Next()<sp/>%<sp/>FLAGS_num;</highlight></codeline>
<codeline lineno="793"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>snprintf(key,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(key),<sp/></highlight><highlight class="stringliteral">&quot;%016d.&quot;</highlight><highlight class="normal">,<sp/>k);</highlight></codeline>
<codeline lineno="794"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>db_-&gt;<ref refid="classleveldb_1_1_d_b_1ad43bd7937b9af88ff856eb8158890911" kindref="member">Get</ref>(options,<sp/>key,<sp/>&amp;value);</highlight></codeline>
<codeline lineno="795"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>thread-&gt;stats.FinishedSingleOp();</highlight></codeline>
<codeline lineno="796"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="797"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="798"><highlight class="normal"></highlight></codeline>
<codeline lineno="799"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ReadHot(ThreadState*<sp/>thread)<sp/>{</highlight></codeline>
<codeline lineno="800"><highlight class="normal"><sp/><sp/><sp/><sp/>ReadOptions<sp/>options;</highlight></codeline>
<codeline lineno="801"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/><ref refid="version__set_8cc_1a38c8b88c432e666ad10b0c5573e1160a" kindref="member">value</ref>;</highlight></codeline>
<codeline lineno="802"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>range<sp/>=<sp/>(FLAGS_num<sp/>+<sp/>99)<sp/>/<sp/>100;</highlight></codeline>
<codeline lineno="803"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>reads_;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="804"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>key[100];</highlight></codeline>
<codeline lineno="805"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>k<sp/>=<sp/>thread-&gt;rand.Next()<sp/>%<sp/>range;</highlight></codeline>
<codeline lineno="806"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>snprintf(key,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(key),<sp/></highlight><highlight class="stringliteral">&quot;%016d&quot;</highlight><highlight class="normal">,<sp/>k);</highlight></codeline>
<codeline lineno="807"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>db_-&gt;<ref refid="classleveldb_1_1_d_b_1ad43bd7937b9af88ff856eb8158890911" kindref="member">Get</ref>(options,<sp/>key,<sp/>&amp;value);</highlight></codeline>
<codeline lineno="808"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>thread-&gt;stats.FinishedSingleOp();</highlight></codeline>
<codeline lineno="809"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="810"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="811"><highlight class="normal"></highlight></codeline>
<codeline lineno="812"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>SeekRandom(ThreadState*<sp/>thread)<sp/>{</highlight></codeline>
<codeline lineno="813"><highlight class="normal"><sp/><sp/><sp/><sp/>ReadOptions<sp/>options;</highlight></codeline>
<codeline lineno="814"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>found<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="815"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>reads_;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="816"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Iterator*<sp/>iter<sp/>=<sp/>db_-&gt;<ref refid="classleveldb_1_1_d_b_1a5629308235de24c05c286c353d4e7d32" kindref="member">NewIterator</ref>(options);</highlight></codeline>
<codeline lineno="817"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>key[100];</highlight></codeline>
<codeline lineno="818"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>k<sp/>=<sp/>thread-&gt;rand.Next()<sp/>%<sp/>FLAGS_num;</highlight></codeline>
<codeline lineno="819"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>snprintf(key,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(key),<sp/></highlight><highlight class="stringliteral">&quot;%016d&quot;</highlight><highlight class="normal">,<sp/>k);</highlight></codeline>
<codeline lineno="820"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>iter-&gt;Seek(key);</highlight></codeline>
<codeline lineno="821"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(iter-&gt;Valid()<sp/>&amp;&amp;<sp/>iter-&gt;key()<sp/>==<sp/>key)<sp/>found++;</highlight></codeline>
<codeline lineno="822"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>iter;</highlight></codeline>
<codeline lineno="823"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>thread-&gt;stats.FinishedSingleOp();</highlight></codeline>
<codeline lineno="824"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="825"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>msg[100];</highlight></codeline>
<codeline lineno="826"><highlight class="normal"><sp/><sp/><sp/><sp/>snprintf(msg,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(msg),<sp/></highlight><highlight class="stringliteral">&quot;(%d<sp/>of<sp/>%d<sp/>found)&quot;</highlight><highlight class="normal">,<sp/>found,<sp/>num_);</highlight></codeline>
<codeline lineno="827"><highlight class="normal"><sp/><sp/><sp/><sp/>thread-&gt;stats.AddMessage(msg);</highlight></codeline>
<codeline lineno="828"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="829"><highlight class="normal"></highlight></codeline>
<codeline lineno="830"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>DoDelete(ThreadState*<sp/>thread,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>seq)<sp/>{</highlight></codeline>
<codeline lineno="831"><highlight class="normal"><sp/><sp/><sp/><sp/>RandomGenerator<sp/>gen;</highlight></codeline>
<codeline lineno="832"><highlight class="normal"><sp/><sp/><sp/><sp/>WriteBatch<sp/>batch;</highlight></codeline>
<codeline lineno="833"><highlight class="normal"><sp/><sp/><sp/><sp/>Status<sp/>s;</highlight></codeline>
<codeline lineno="834"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>num_;<sp/>i<sp/>+=<sp/>entries_per_batch_)<sp/>{</highlight></codeline>
<codeline lineno="835"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>batch.Clear();</highlight></codeline>
<codeline lineno="836"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>entries_per_batch_;<sp/>j++)<sp/>{</highlight></codeline>
<codeline lineno="837"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>k<sp/>=<sp/>seq<sp/>?<sp/>i+j<sp/>:<sp/>(thread-&gt;rand.Next()<sp/>%<sp/>FLAGS_num);</highlight></codeline>
<codeline lineno="838"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>key[100];</highlight></codeline>
<codeline lineno="839"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>snprintf(key,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(key),<sp/></highlight><highlight class="stringliteral">&quot;%016d&quot;</highlight><highlight class="normal">,<sp/>k);</highlight></codeline>
<codeline lineno="840"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>batch.Delete(key);</highlight></codeline>
<codeline lineno="841"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>thread-&gt;stats.FinishedSingleOp();</highlight></codeline>
<codeline lineno="842"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="843"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>s<sp/>=<sp/>db_-&gt;<ref refid="classleveldb_1_1_d_b_1ae0b6ded8c8e0b88ff70190bf7a0c086c" kindref="member">Write</ref>(write_options_,<sp/>&amp;batch);</highlight></codeline>
<codeline lineno="844"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!s.ok())<sp/>{</highlight></codeline>
<codeline lineno="845"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(stderr,<sp/></highlight><highlight class="stringliteral">&quot;del<sp/>error:<sp/>%s\n&quot;</highlight><highlight class="normal">,<sp/>s.ToString().c_str());</highlight></codeline>
<codeline lineno="846"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>exit(1);</highlight></codeline>
<codeline lineno="847"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="848"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="849"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="850"><highlight class="normal"></highlight></codeline>
<codeline lineno="851"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>DeleteSeq(ThreadState*<sp/>thread)<sp/>{</highlight></codeline>
<codeline lineno="852"><highlight class="normal"><sp/><sp/><sp/><sp/>DoDelete(thread,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="853"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="854"><highlight class="normal"></highlight></codeline>
<codeline lineno="855"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>DeleteRandom(ThreadState*<sp/>thread)<sp/>{</highlight></codeline>
<codeline lineno="856"><highlight class="normal"><sp/><sp/><sp/><sp/>DoDelete(thread,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="857"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="858"><highlight class="normal"></highlight></codeline>
<codeline lineno="859"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ReadWhileWriting(ThreadState*<sp/>thread)<sp/>{</highlight></codeline>
<codeline lineno="860"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(thread-&gt;tid<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="861"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ReadRandom(thread);</highlight></codeline>
<codeline lineno="862"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="863"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Special<sp/>thread<sp/>that<sp/>keeps<sp/>writing<sp/>until<sp/>other<sp/>threads<sp/>are<sp/>done.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="864"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>RandomGenerator<sp/>gen;</highlight></codeline>
<codeline lineno="865"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">true</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="866"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="867"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MutexLock<sp/>l(&amp;thread-&gt;shared-&gt;mu);</highlight></codeline>
<codeline lineno="868"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(thread-&gt;shared-&gt;num_done<sp/>+<sp/>1<sp/>&gt;=<sp/>thread-&gt;shared-&gt;num_initialized)<sp/>{</highlight></codeline>
<codeline lineno="869"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Other<sp/>threads<sp/>have<sp/>finished</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="870"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="871"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="872"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="873"><highlight class="normal"></highlight></codeline>
<codeline lineno="874"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>k<sp/>=<sp/>thread-&gt;rand.Next()<sp/>%<sp/>FLAGS_num;</highlight></codeline>
<codeline lineno="875"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>key[100];</highlight></codeline>
<codeline lineno="876"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>snprintf(key,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(key),<sp/></highlight><highlight class="stringliteral">&quot;%016d&quot;</highlight><highlight class="normal">,<sp/>k);</highlight></codeline>
<codeline lineno="877"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Status<sp/>s<sp/>=<sp/>db_-&gt;<ref refid="classleveldb_1_1_d_b_1ac2e472812630ed74298df7b03b08c1ae" kindref="member">Put</ref>(write_options_,<sp/>key,<sp/>gen.Generate(value_size_));</highlight></codeline>
<codeline lineno="878"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!s.ok())<sp/>{</highlight></codeline>
<codeline lineno="879"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(stderr,<sp/></highlight><highlight class="stringliteral">&quot;put<sp/>error:<sp/>%s\n&quot;</highlight><highlight class="normal">,<sp/>s.ToString().c_str());</highlight></codeline>
<codeline lineno="880"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>exit(1);</highlight></codeline>
<codeline lineno="881"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="882"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="883"><highlight class="normal"></highlight></codeline>
<codeline lineno="884"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Do<sp/>not<sp/>count<sp/>any<sp/>of<sp/>the<sp/>preceding<sp/>work/delay<sp/>in<sp/>stats.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="885"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>thread-&gt;stats.Start();</highlight></codeline>
<codeline lineno="886"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="887"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="888"><highlight class="normal"></highlight></codeline>
<codeline lineno="889"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Compact(ThreadState*<sp/>thread)<sp/>{</highlight></codeline>
<codeline lineno="890"><highlight class="normal"><sp/><sp/><sp/><sp/>db_-&gt;<ref refid="classleveldb_1_1_d_b_1aeea500cbc6704454b3be6908d5da8b3a" kindref="member">CompactRange</ref>(NULL,<sp/>NULL);</highlight></codeline>
<codeline lineno="891"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="892"><highlight class="normal"></highlight></codeline>
<codeline lineno="893"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>PrintStats(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>key)<sp/>{</highlight></codeline>
<codeline lineno="894"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/><ref refid="db__bench_8cc_1a5925d216740c89f43482df806fd14e8c" kindref="member">stats</ref>;</highlight></codeline>
<codeline lineno="895"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!db_-&gt;<ref refid="classleveldb_1_1_d_b_1afcd557d80bac6668f20372c9e737d807" kindref="member">GetProperty</ref>(key,<sp/>&amp;stats))<sp/>{</highlight></codeline>
<codeline lineno="896"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>stats<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;(failed)&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="897"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="898"><highlight class="normal"><sp/><sp/><sp/><sp/>fprintf(stdout,<sp/></highlight><highlight class="stringliteral">&quot;\n%s\n&quot;</highlight><highlight class="normal">,<sp/>stats.c_str());</highlight></codeline>
<codeline lineno="899"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="900"><highlight class="normal"></highlight></codeline>
<codeline lineno="901"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>WriteToFile(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>arg,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>buf,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n)<sp/>{</highlight></codeline>
<codeline lineno="902"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">reinterpret_cast&lt;</highlight><highlight class="normal">WritableFile*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(<ref refid="env__posix_8cc_1a9ce2ec4812a92cb6ab39f6e81e9173a9" kindref="member">arg</ref>)-&gt;Append(Slice(buf,<sp/>n));</highlight></codeline>
<codeline lineno="903"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="904"><highlight class="normal"></highlight></codeline>
<codeline lineno="905"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>HeapProfile()<sp/>{</highlight></codeline>
<codeline lineno="906"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>fname[100];</highlight></codeline>
<codeline lineno="907"><highlight class="normal"><sp/><sp/><sp/><sp/>snprintf(fname,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(fname),<sp/></highlight><highlight class="stringliteral">&quot;%s/heap-%04d&quot;</highlight><highlight class="normal">,<sp/>FLAGS_db,<sp/>++heap_counter_);</highlight></codeline>
<codeline lineno="908"><highlight class="normal"><sp/><sp/><sp/><sp/>WritableFile*<sp/>file;</highlight></codeline>
<codeline lineno="909"><highlight class="normal"><sp/><sp/><sp/><sp/>Status<sp/>s<sp/>=<sp/><ref refid="classleveldb_1_1_env_1ae15b67e650ff6790059745fd1b3bf3e7" kindref="member">Env::Default</ref>()-&gt;<ref refid="classleveldb_1_1_env_1a4566194f3e82fede425fdb5bb355f7de" kindref="member">NewWritableFile</ref>(fname,<sp/>&amp;file);</highlight></codeline>
<codeline lineno="910"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!s.ok())<sp/>{</highlight></codeline>
<codeline lineno="911"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(stderr,<sp/></highlight><highlight class="stringliteral">&quot;%s\n&quot;</highlight><highlight class="normal">,<sp/>s.ToString().c_str());</highlight></codeline>
<codeline lineno="912"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="913"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="914"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>ok<sp/>=<sp/><ref refid="namespaceleveldb_1_1port_1a1686423180e60af953153121c615f5fe" kindref="member">port::GetHeapProfile</ref>(WriteToFile,<sp/>file);</highlight></codeline>
<codeline lineno="915"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>file;</highlight></codeline>
<codeline lineno="916"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!ok)<sp/>{</highlight></codeline>
<codeline lineno="917"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(stderr,<sp/></highlight><highlight class="stringliteral">&quot;heap<sp/>profiling<sp/>not<sp/>supported\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="918"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classleveldb_1_1_env_1ae15b67e650ff6790059745fd1b3bf3e7" kindref="member">Env::Default</ref>()-&gt;<ref refid="classleveldb_1_1_env_1ac956b984466d5f09309664177687f9af" kindref="member">DeleteFile</ref>(fname);</highlight></codeline>
<codeline lineno="919"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="920"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="921"><highlight class="normal">};</highlight></codeline>
<codeline lineno="922"><highlight class="normal"></highlight></codeline>
<codeline lineno="923"><highlight class="normal">}<sp/><sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>leveldb</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="924"><highlight class="normal"></highlight></codeline>
<codeline lineno="925" refid="db__bench_8cc_1a3c04138a5bfe5d72780bb7e82a18e627" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="db__bench_8cc_1a3c04138a5bfe5d72780bb7e82a18e627" kindref="member">main</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>argc,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">**<sp/>argv)<sp/>{</highlight></codeline>
<codeline lineno="926"><highlight class="normal"><sp/><sp/>FLAGS_write_buffer_size<sp/>=<sp/><ref refid="structleveldb_1_1_options" kindref="compound">leveldb::Options</ref>().<ref refid="structleveldb_1_1_options_1a017f1f9558e6b3887434df29a16dac97" kindref="member">write_buffer_size</ref>;</highlight></codeline>
<codeline lineno="927"><highlight class="normal"><sp/><sp/>FLAGS_open_files<sp/>=<sp/><ref refid="structleveldb_1_1_options" kindref="compound">leveldb::Options</ref>().<ref refid="structleveldb_1_1_options_1a25c6ea125fc63342d8fc25b2f7817be4" kindref="member">max_open_files</ref>;</highlight></codeline>
<codeline lineno="928"><highlight class="normal"><sp/><sp/>std::string<sp/>default_db_path;</highlight></codeline>
<codeline lineno="929"><highlight class="normal"></highlight></codeline>
<codeline lineno="930"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>1;<sp/>i<sp/>&lt;<sp/>argc;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="931"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>d;</highlight></codeline>
<codeline lineno="932"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n;</highlight></codeline>
<codeline lineno="933"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>junk;</highlight></codeline>
<codeline lineno="934"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classleveldb_1_1_slice" kindref="compound">leveldb::Slice</ref>(argv[i]).starts_with(</highlight><highlight class="stringliteral">&quot;--benchmarks=&quot;</highlight><highlight class="normal">))<sp/>{</highlight></codeline>
<codeline lineno="935"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>FLAGS_benchmarks<sp/>=<sp/>argv[i]<sp/>+<sp/>strlen(</highlight><highlight class="stringliteral">&quot;--benchmarks=&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="936"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(sscanf(argv[i],<sp/></highlight><highlight class="stringliteral">&quot;--compression_ratio=%lf%c&quot;</highlight><highlight class="normal">,<sp/>&amp;d,<sp/>&amp;junk)<sp/>==<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="937"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>FLAGS_compression_ratio<sp/>=<sp/>d;</highlight></codeline>
<codeline lineno="938"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(sscanf(argv[i],<sp/></highlight><highlight class="stringliteral">&quot;--histogram=%d%c&quot;</highlight><highlight class="normal">,<sp/>&amp;n,<sp/>&amp;junk)<sp/>==<sp/>1<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="939"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(n<sp/>==<sp/>0<sp/>||<sp/>n<sp/>==<sp/>1))<sp/>{</highlight></codeline>
<codeline lineno="940"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>FLAGS_histogram<sp/>=<sp/>n;</highlight></codeline>
<codeline lineno="941"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(sscanf(argv[i],<sp/></highlight><highlight class="stringliteral">&quot;--use_existing_db=%d%c&quot;</highlight><highlight class="normal">,<sp/>&amp;n,<sp/>&amp;junk)<sp/>==<sp/>1<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="942"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(n<sp/>==<sp/>0<sp/>||<sp/>n<sp/>==<sp/>1))<sp/>{</highlight></codeline>
<codeline lineno="943"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>FLAGS_use_existing_db<sp/>=<sp/>n;</highlight></codeline>
<codeline lineno="944"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(sscanf(argv[i],<sp/></highlight><highlight class="stringliteral">&quot;--num=%d%c&quot;</highlight><highlight class="normal">,<sp/>&amp;n,<sp/>&amp;junk)<sp/>==<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="945"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>FLAGS_num<sp/>=<sp/>n;</highlight></codeline>
<codeline lineno="946"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(sscanf(argv[i],<sp/></highlight><highlight class="stringliteral">&quot;--reads=%d%c&quot;</highlight><highlight class="normal">,<sp/>&amp;n,<sp/>&amp;junk)<sp/>==<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="947"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>FLAGS_reads<sp/>=<sp/>n;</highlight></codeline>
<codeline lineno="948"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(sscanf(argv[i],<sp/></highlight><highlight class="stringliteral">&quot;--threads=%d%c&quot;</highlight><highlight class="normal">,<sp/>&amp;n,<sp/>&amp;junk)<sp/>==<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="949"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>FLAGS_threads<sp/>=<sp/>n;</highlight></codeline>
<codeline lineno="950"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(sscanf(argv[i],<sp/></highlight><highlight class="stringliteral">&quot;--value_size=%d%c&quot;</highlight><highlight class="normal">,<sp/>&amp;n,<sp/>&amp;junk)<sp/>==<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="951"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>FLAGS_value_size<sp/>=<sp/>n;</highlight></codeline>
<codeline lineno="952"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(sscanf(argv[i],<sp/></highlight><highlight class="stringliteral">&quot;--write_buffer_size=%d%c&quot;</highlight><highlight class="normal">,<sp/>&amp;n,<sp/>&amp;junk)<sp/>==<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="953"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>FLAGS_write_buffer_size<sp/>=<sp/>n;</highlight></codeline>
<codeline lineno="954"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(sscanf(argv[i],<sp/></highlight><highlight class="stringliteral">&quot;--cache_size=%d%c&quot;</highlight><highlight class="normal">,<sp/>&amp;n,<sp/>&amp;junk)<sp/>==<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="955"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>FLAGS_cache_size<sp/>=<sp/>n;</highlight></codeline>
<codeline lineno="956"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(sscanf(argv[i],<sp/></highlight><highlight class="stringliteral">&quot;--bloom_bits=%d%c&quot;</highlight><highlight class="normal">,<sp/>&amp;n,<sp/>&amp;junk)<sp/>==<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="957"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>FLAGS_bloom_bits<sp/>=<sp/>n;</highlight></codeline>
<codeline lineno="958"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(sscanf(argv[i],<sp/></highlight><highlight class="stringliteral">&quot;--open_files=%d%c&quot;</highlight><highlight class="normal">,<sp/>&amp;n,<sp/>&amp;junk)<sp/>==<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="959"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>FLAGS_open_files<sp/>=<sp/>n;</highlight></codeline>
<codeline lineno="960"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(strncmp(argv[i],<sp/></highlight><highlight class="stringliteral">&quot;--db=&quot;</highlight><highlight class="normal">,<sp/>5)<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="961"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>FLAGS_db<sp/>=<sp/>argv[i]<sp/>+<sp/>5;</highlight></codeline>
<codeline lineno="962"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="963"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(stderr,<sp/></highlight><highlight class="stringliteral">&quot;Invalid<sp/>flag<sp/>&apos;%s&apos;\n&quot;</highlight><highlight class="normal">,<sp/>argv[i]);</highlight></codeline>
<codeline lineno="964"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>exit(1);</highlight></codeline>
<codeline lineno="965"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="966"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="967"><highlight class="normal"></highlight></codeline>
<codeline lineno="968"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Choose<sp/>a<sp/>location<sp/>for<sp/>the<sp/>test<sp/>database<sp/>if<sp/>none<sp/>given<sp/>with<sp/>--db=&lt;path&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="969"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(FLAGS_db<sp/>==<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="970"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classleveldb_1_1_env_1ae15b67e650ff6790059745fd1b3bf3e7" kindref="member">leveldb::Env::Default</ref>()-&gt;<ref refid="classleveldb_1_1_env_1ab57a55be37d4d57bf3c0ff83ee689f95" kindref="member">GetTestDirectory</ref>(&amp;default_db_path);</highlight></codeline>
<codeline lineno="971"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>default_db_path<sp/>+=<sp/></highlight><highlight class="stringliteral">&quot;/dbbench&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="972"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>FLAGS_db<sp/>=<sp/>default_db_path.c_str();</highlight></codeline>
<codeline lineno="973"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="974"><highlight class="normal"></highlight></codeline>
<codeline lineno="975"><highlight class="normal"><sp/><sp/><ref refid="classleveldb_1_1_benchmark" kindref="compound">leveldb::Benchmark</ref><sp/>benchmark;</highlight></codeline>
<codeline lineno="976"><highlight class="normal"><sp/><sp/>benchmark.<ref refid="classleveldb_1_1_benchmark_1a2f262afa0c7d10fcf531fe9657fba490" kindref="member">Run</ref>();</highlight></codeline>
<codeline lineno="977"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="978"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="/home/dev/ds-160209/src/leveldb/db/db_bench.cc"/>
  </compounddef>
</doxygen>
