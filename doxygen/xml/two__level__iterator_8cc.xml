<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.9.1">
  <compounddef id="two__level__iterator_8cc" kind="file" language="C++">
    <compoundname>two_level_iterator.cc</compoundname>
    <includes refid="two__level__iterator_8h" local="yes">table/two_level_iterator.h</includes>
    <includes refid="table_8h" local="yes">leveldb/table.h</includes>
    <includes refid="leveldb_2table_2block_8h" local="yes">table/block.h</includes>
    <includes refid="format_8h" local="yes">table/format.h</includes>
    <includes refid="iterator__wrapper_8h" local="yes">table/iterator_wrapper.h</includes>
    <incdepgraph>
      <node id="39473">
        <label>leveldb/table.h</label>
        <link refid="table_8h"/>
        <childnode refid="39474" relation="include">
        </childnode>
        <childnode refid="39466" relation="include">
        </childnode>
      </node>
      <node id="39468">
        <label>assert.h</label>
      </node>
      <node id="39479">
        <label>table/iterator_wrapper.h</label>
        <link refid="iterator__wrapper_8h"/>
      </node>
      <node id="39478">
        <label>leveldb/options.h</label>
        <link refid="options_8h"/>
        <childnode refid="39469" relation="include">
        </childnode>
      </node>
      <node id="39464">
        <label>/home/dev/ds-160209/src/leveldb/table/two_level_iterator.cc</label>
        <link refid="two_level_iterator.cc"/>
        <childnode refid="39465" relation="include">
        </childnode>
        <childnode refid="39473" relation="include">
        </childnode>
        <childnode refid="39475" relation="include">
        </childnode>
        <childnode refid="39476" relation="include">
        </childnode>
        <childnode refid="39479" relation="include">
        </childnode>
      </node>
      <node id="39471">
        <label>string</label>
      </node>
      <node id="39465">
        <label>table/two_level_iterator.h</label>
        <link refid="two__level__iterator_8h"/>
        <childnode refid="39466" relation="include">
        </childnode>
      </node>
      <node id="39469">
        <label>stddef.h</label>
      </node>
      <node id="39472">
        <label>leveldb/status.h</label>
        <link refid="status_8h"/>
        <childnode refid="39471" relation="include">
        </childnode>
        <childnode refid="39467" relation="include">
        </childnode>
      </node>
      <node id="39470">
        <label>string.h</label>
      </node>
      <node id="39475">
        <label>table/block.h</label>
        <link refid="leveldb_2table_2block_8h"/>
        <childnode refid="39469" relation="include">
        </childnode>
        <childnode refid="39474" relation="include">
        </childnode>
        <childnode refid="39466" relation="include">
        </childnode>
      </node>
      <node id="39474">
        <label>stdint.h</label>
        <link refid="stdint_8h"/>
      </node>
      <node id="39477">
        <label>leveldb/table_builder.h</label>
        <link refid="table__builder_8h"/>
        <childnode refid="39474" relation="include">
        </childnode>
        <childnode refid="39478" relation="include">
        </childnode>
        <childnode refid="39472" relation="include">
        </childnode>
      </node>
      <node id="39467">
        <label>leveldb/slice.h</label>
        <link refid="slice_8h"/>
        <childnode refid="39468" relation="include">
        </childnode>
        <childnode refid="39469" relation="include">
        </childnode>
        <childnode refid="39470" relation="include">
        </childnode>
        <childnode refid="39471" relation="include">
        </childnode>
      </node>
      <node id="39476">
        <label>table/format.h</label>
        <link refid="format_8h"/>
        <childnode refid="39471" relation="include">
        </childnode>
        <childnode refid="39474" relation="include">
        </childnode>
        <childnode refid="39467" relation="include">
        </childnode>
        <childnode refid="39472" relation="include">
        </childnode>
        <childnode refid="39477" relation="include">
        </childnode>
      </node>
      <node id="39466">
        <label>leveldb/iterator.h</label>
        <link refid="iterator_8h"/>
        <childnode refid="39467" relation="include">
        </childnode>
        <childnode refid="39472" relation="include">
        </childnode>
      </node>
    </incdepgraph>
    <innernamespace refid="namespaceleveldb">leveldb</innernamespace>
      <sectiondef kind="var">
      <memberdef kind="variable" id="two__level__iterator_8cc_1ac6e5a1c36e62e96d62a20aa5dc2371ed" prot="public" static="no" mutable="no">
        <type>BlockFunction</type>
        <definition>BlockFunction block_function_</definition>
        <argsstring></argsstring>
        <name>block_function_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/leveldb/table/two_level_iterator.cc" line="65" column="1" bodyfile="/home/dev/ds-160209/src/leveldb/table/two_level_iterator.cc" bodystart="65" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="two__level__iterator_8cc_1a771179416dc84a22dc2cdaaa2149d754" prot="public" static="no" mutable="no">
        <type>void *</type>
        <definition>void* arg_</definition>
        <argsstring></argsstring>
        <name>arg_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/leveldb/table/two_level_iterator.cc" line="66" column="1" bodyfile="/home/dev/ds-160209/src/leveldb/table/two_level_iterator.cc" bodystart="66" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="two__level__iterator_8cc_1adb3c4b4cc2346e213c9b95c58982270f" prot="public" static="no" mutable="no">
        <type>const ReadOptions</type>
        <definition>const ReadOptions options_</definition>
        <argsstring></argsstring>
        <name>options_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/leveldb/table/two_level_iterator.cc" line="67" column="1" bodyfile="/home/dev/ds-160209/src/leveldb/table/two_level_iterator.cc" bodystart="67" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="two__level__iterator_8cc_1abf8c6fcb7d9c9fa39e283d086f0bb345" prot="public" static="no" mutable="no">
        <type>Status</type>
        <definition>Status status_</definition>
        <argsstring></argsstring>
        <name>status_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/leveldb/table/two_level_iterator.cc" line="68" column="1" bodyfile="/home/dev/ds-160209/src/leveldb/table/two_level_iterator.cc" bodystart="68" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="two__level__iterator_8cc_1ab0bc9aea2a1767c75155613472b3ee77" prot="public" static="no" mutable="no">
        <type>IteratorWrapper</type>
        <definition>IteratorWrapper index_iter_</definition>
        <argsstring></argsstring>
        <name>index_iter_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/leveldb/table/two_level_iterator.cc" line="69" column="1" bodyfile="/home/dev/ds-160209/src/leveldb/table/two_level_iterator.cc" bodystart="69" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="two__level__iterator_8cc_1a2931849199a6e75d36f025881e1772c1" prot="public" static="no" mutable="no">
        <type>IteratorWrapper</type>
        <definition>IteratorWrapper data_iter_</definition>
        <argsstring></argsstring>
        <name>data_iter_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/leveldb/table/two_level_iterator.cc" line="70" column="1" bodyfile="/home/dev/ds-160209/src/leveldb/table/two_level_iterator.cc" bodystart="70" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="two__level__iterator_8cc_1a47159420fedf013f42028693750c8f2e" prot="public" static="no" mutable="no">
        <type>std::string</type>
        <definition>std::string data_block_handle_</definition>
        <argsstring></argsstring>
        <name>data_block_handle_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/leveldb/table/two_level_iterator.cc" line="73" column="1" bodyfile="/home/dev/ds-160209/src/leveldb/table/two_level_iterator.cc" bodystart="73" bodyend="-1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">//<sp/>Copyright<sp/>(c)<sp/>2011-2016<sp/>The<sp/>LevelDB<sp/>Authors.<sp/>All<sp/>rights<sp/>reserved.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Use<sp/>of<sp/>this<sp/>source<sp/>code<sp/>is<sp/>governed<sp/>by<sp/>a<sp/>BSD-style<sp/>license<sp/>that<sp/>can<sp/>be</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="comment">//<sp/>found<sp/>in<sp/>the<sp/>LICENSE<sp/>file.<sp/>See<sp/>the<sp/>AUTHORS<sp/>file<sp/>for<sp/>names<sp/>of<sp/>contributors.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="two__level__iterator_8h" kindref="compound">table/two_level_iterator.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="table_8h" kindref="compound">leveldb/table.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="leveldb_2table_2block_8h" kindref="compound">table/block.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="format_8h" kindref="compound">table/format.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="iterator__wrapper_8h" kindref="compound">table/iterator_wrapper.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespaceleveldb" kindref="compound">leveldb</ref><sp/>{</highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>Iterator*<sp/>(*BlockFunction)(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>ReadOptions&amp;,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Slice&amp;);</highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">TwoLevelIterator:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/>Iterator<sp/>{</highlight></codeline>
<codeline lineno="19"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="20"><highlight class="normal"><sp/><sp/>TwoLevelIterator(</highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/><sp/><sp/><sp/>Iterator*<sp/>index_iter,</highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/><sp/><sp/>BlockFunction<sp/>block_function,</highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/><ref refid="env__posix_8cc_1a9ce2ec4812a92cb6ab39f6e81e9173a9" kindref="member">arg</ref>,</highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>ReadOptions&amp;<sp/>options);</highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/>~TwoLevelIterator();</highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Seek(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Slice&amp;<sp/>target);</highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>SeekToFirst();</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>SeekToLast();</highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Next();</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Prev();</highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>Valid()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="two__level__iterator_8cc_1a2931849199a6e75d36f025881e1772c1" kindref="member">data_iter_</ref>.Valid();</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/>Slice<sp/>key()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(Valid());</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="two__level__iterator_8cc_1a2931849199a6e75d36f025881e1772c1" kindref="member">data_iter_</ref>.key();</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/>Slice<sp/><ref refid="version__set_8cc_1a38c8b88c432e666ad10b0c5573e1160a" kindref="member">value</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(Valid());</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="two__level__iterator_8cc_1a2931849199a6e75d36f025881e1772c1" kindref="member">data_iter_</ref>.value();</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/>Status<sp/>status()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>It&apos;d<sp/>be<sp/>nice<sp/>if<sp/>status()<sp/>returned<sp/>a<sp/>const<sp/>Status&amp;<sp/>instead<sp/>of<sp/>a<sp/>Status</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="two__level__iterator_8cc_1ab0bc9aea2a1767c75155613472b3ee77" kindref="member">index_iter_</ref>.status().ok())<sp/>{</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="two__level__iterator_8cc_1ab0bc9aea2a1767c75155613472b3ee77" kindref="member">index_iter_</ref>.status();</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="two__level__iterator_8cc_1a2931849199a6e75d36f025881e1772c1" kindref="member">data_iter_</ref>.iter()<sp/>!=<sp/>NULL<sp/>&amp;&amp;<sp/>!<ref refid="two__level__iterator_8cc_1a2931849199a6e75d36f025881e1772c1" kindref="member">data_iter_</ref>.status().ok())<sp/>{</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="two__level__iterator_8cc_1a2931849199a6e75d36f025881e1772c1" kindref="member">data_iter_</ref>.status();</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="two__level__iterator_8cc_1abf8c6fcb7d9c9fa39e283d086f0bb345" kindref="member">status_</ref>;</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>SaveError(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Status&amp;<sp/>s)<sp/>{</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="two__level__iterator_8cc_1abf8c6fcb7d9c9fa39e283d086f0bb345" kindref="member">status_</ref>.ok()<sp/>&amp;&amp;<sp/>!s.ok())<sp/><ref refid="two__level__iterator_8cc_1abf8c6fcb7d9c9fa39e283d086f0bb345" kindref="member">status_</ref><sp/>=<sp/>s;</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>SkipEmptyDataBlocksForward();</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>SkipEmptyDataBlocksBackward();</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>SetDataIterator(Iterator*<sp/>data_iter);</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>InitDataBlock();</highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight></codeline>
<codeline lineno="65" refid="two__level__iterator_8cc_1ac6e5a1c36e62e96d62a20aa5dc2371ed" refkind="member"><highlight class="normal"><sp/><sp/>BlockFunction<sp/><ref refid="two__level__iterator_8cc_1ac6e5a1c36e62e96d62a20aa5dc2371ed" kindref="member">block_function_</ref>;</highlight></codeline>
<codeline lineno="66" refid="two__level__iterator_8cc_1a771179416dc84a22dc2cdaaa2149d754" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/><ref refid="two__level__iterator_8cc_1a771179416dc84a22dc2cdaaa2149d754" kindref="member">arg_</ref>;</highlight></codeline>
<codeline lineno="67" refid="two__level__iterator_8cc_1adb3c4b4cc2346e213c9b95c58982270f" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>ReadOptions<sp/><ref refid="two__level__iterator_8cc_1adb3c4b4cc2346e213c9b95c58982270f" kindref="member">options_</ref>;</highlight></codeline>
<codeline lineno="68" refid="two__level__iterator_8cc_1abf8c6fcb7d9c9fa39e283d086f0bb345" refkind="member"><highlight class="normal"><sp/><sp/>Status<sp/><ref refid="two__level__iterator_8cc_1abf8c6fcb7d9c9fa39e283d086f0bb345" kindref="member">status_</ref>;</highlight></codeline>
<codeline lineno="69" refid="two__level__iterator_8cc_1ab0bc9aea2a1767c75155613472b3ee77" refkind="member"><highlight class="normal"><sp/><sp/>IteratorWrapper<sp/><ref refid="two__level__iterator_8cc_1ab0bc9aea2a1767c75155613472b3ee77" kindref="member">index_iter_</ref>;</highlight></codeline>
<codeline lineno="70" refid="two__level__iterator_8cc_1a2931849199a6e75d36f025881e1772c1" refkind="member"><highlight class="normal"><sp/><sp/>IteratorWrapper<sp/><ref refid="two__level__iterator_8cc_1a2931849199a6e75d36f025881e1772c1" kindref="member">data_iter_</ref>;<sp/></highlight><highlight class="comment">//<sp/>May<sp/>be<sp/>NULL</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>data_iter_<sp/>is<sp/>non-NULL,<sp/>then<sp/>&quot;data_block_handle_&quot;<sp/>holds<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>&quot;index_value&quot;<sp/>passed<sp/>to<sp/>block_function_<sp/>to<sp/>create<sp/>the<sp/>data_iter_.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="73" refid="two__level__iterator_8cc_1a47159420fedf013f42028693750c8f2e" refkind="member"><highlight class="normal"><sp/><sp/>std::string<sp/><ref refid="two__level__iterator_8cc_1a47159420fedf013f42028693750c8f2e" kindref="member">data_block_handle_</ref>;</highlight></codeline>
<codeline lineno="74"><highlight class="normal">};</highlight></codeline>
<codeline lineno="75"><highlight class="normal"></highlight></codeline>
<codeline lineno="76"><highlight class="normal">TwoLevelIterator::TwoLevelIterator(</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/>Iterator*<sp/>index_iter,</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/>BlockFunction<sp/>block_function,</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/><ref refid="env__posix_8cc_1a9ce2ec4812a92cb6ab39f6e81e9173a9" kindref="member">arg</ref>,</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>ReadOptions&amp;<sp/>options)</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/>:<sp/><ref refid="two__level__iterator_8cc_1ac6e5a1c36e62e96d62a20aa5dc2371ed" kindref="member">block_function_</ref>(block_function),</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="two__level__iterator_8cc_1a771179416dc84a22dc2cdaaa2149d754" kindref="member">arg_</ref>(arg),</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="two__level__iterator_8cc_1adb3c4b4cc2346e213c9b95c58982270f" kindref="member">options_</ref>(options),</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="two__level__iterator_8cc_1ab0bc9aea2a1767c75155613472b3ee77" kindref="member">index_iter_</ref>(index_iter),</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="two__level__iterator_8cc_1a2931849199a6e75d36f025881e1772c1" kindref="member">data_iter_</ref>(NULL)<sp/>{</highlight></codeline>
<codeline lineno="86"><highlight class="normal">}</highlight></codeline>
<codeline lineno="87"><highlight class="normal"></highlight></codeline>
<codeline lineno="88"><highlight class="normal">TwoLevelIterator::~TwoLevelIterator()<sp/>{</highlight></codeline>
<codeline lineno="89"><highlight class="normal">}</highlight></codeline>
<codeline lineno="90"><highlight class="normal"></highlight></codeline>
<codeline lineno="91"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TwoLevelIterator::Seek(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Slice&amp;<sp/>target)<sp/>{</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><ref refid="two__level__iterator_8cc_1ab0bc9aea2a1767c75155613472b3ee77" kindref="member">index_iter_</ref>.Seek(target);</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/>InitDataBlock();</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="two__level__iterator_8cc_1a2931849199a6e75d36f025881e1772c1" kindref="member">data_iter_</ref>.iter()<sp/>!=<sp/>NULL)<sp/><ref refid="two__level__iterator_8cc_1a2931849199a6e75d36f025881e1772c1" kindref="member">data_iter_</ref>.Seek(target);</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/>SkipEmptyDataBlocksForward();</highlight></codeline>
<codeline lineno="96"><highlight class="normal">}</highlight></codeline>
<codeline lineno="97"><highlight class="normal"></highlight></codeline>
<codeline lineno="98"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TwoLevelIterator::SeekToFirst()<sp/>{</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><ref refid="two__level__iterator_8cc_1ab0bc9aea2a1767c75155613472b3ee77" kindref="member">index_iter_</ref>.SeekToFirst();</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/>InitDataBlock();</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="two__level__iterator_8cc_1a2931849199a6e75d36f025881e1772c1" kindref="member">data_iter_</ref>.iter()<sp/>!=<sp/>NULL)<sp/><ref refid="two__level__iterator_8cc_1a2931849199a6e75d36f025881e1772c1" kindref="member">data_iter_</ref>.SeekToFirst();</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/>SkipEmptyDataBlocksForward();</highlight></codeline>
<codeline lineno="103"><highlight class="normal">}</highlight></codeline>
<codeline lineno="104"><highlight class="normal"></highlight></codeline>
<codeline lineno="105"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TwoLevelIterator::SeekToLast()<sp/>{</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><ref refid="two__level__iterator_8cc_1ab0bc9aea2a1767c75155613472b3ee77" kindref="member">index_iter_</ref>.SeekToLast();</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/>InitDataBlock();</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="two__level__iterator_8cc_1a2931849199a6e75d36f025881e1772c1" kindref="member">data_iter_</ref>.iter()<sp/>!=<sp/>NULL)<sp/><ref refid="two__level__iterator_8cc_1a2931849199a6e75d36f025881e1772c1" kindref="member">data_iter_</ref>.SeekToLast();</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/>SkipEmptyDataBlocksBackward();</highlight></codeline>
<codeline lineno="110"><highlight class="normal">}</highlight></codeline>
<codeline lineno="111"><highlight class="normal"></highlight></codeline>
<codeline lineno="112"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TwoLevelIterator::Next()<sp/>{</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/>assert(Valid());</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><ref refid="two__level__iterator_8cc_1a2931849199a6e75d36f025881e1772c1" kindref="member">data_iter_</ref>.Next();</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/>SkipEmptyDataBlocksForward();</highlight></codeline>
<codeline lineno="116"><highlight class="normal">}</highlight></codeline>
<codeline lineno="117"><highlight class="normal"></highlight></codeline>
<codeline lineno="118"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TwoLevelIterator::Prev()<sp/>{</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/>assert(Valid());</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><ref refid="two__level__iterator_8cc_1a2931849199a6e75d36f025881e1772c1" kindref="member">data_iter_</ref>.Prev();</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/>SkipEmptyDataBlocksBackward();</highlight></codeline>
<codeline lineno="122"><highlight class="normal">}</highlight></codeline>
<codeline lineno="123"><highlight class="normal"></highlight></codeline>
<codeline lineno="124"><highlight class="normal"></highlight></codeline>
<codeline lineno="125"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TwoLevelIterator::SkipEmptyDataBlocksForward()<sp/>{</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(<ref refid="two__level__iterator_8cc_1a2931849199a6e75d36f025881e1772c1" kindref="member">data_iter_</ref>.iter()<sp/>==<sp/>NULL<sp/>||<sp/>!<ref refid="two__level__iterator_8cc_1a2931849199a6e75d36f025881e1772c1" kindref="member">data_iter_</ref>.Valid())<sp/>{</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Move<sp/>to<sp/>next<sp/>block</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="two__level__iterator_8cc_1ab0bc9aea2a1767c75155613472b3ee77" kindref="member">index_iter_</ref>.Valid())<sp/>{</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>SetDataIterator(NULL);</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="two__level__iterator_8cc_1ab0bc9aea2a1767c75155613472b3ee77" kindref="member">index_iter_</ref>.Next();</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/>InitDataBlock();</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="two__level__iterator_8cc_1a2931849199a6e75d36f025881e1772c1" kindref="member">data_iter_</ref>.iter()<sp/>!=<sp/>NULL)<sp/><ref refid="two__level__iterator_8cc_1a2931849199a6e75d36f025881e1772c1" kindref="member">data_iter_</ref>.SeekToFirst();</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="136"><highlight class="normal">}</highlight></codeline>
<codeline lineno="137"><highlight class="normal"></highlight></codeline>
<codeline lineno="138"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TwoLevelIterator::SkipEmptyDataBlocksBackward()<sp/>{</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(<ref refid="two__level__iterator_8cc_1a2931849199a6e75d36f025881e1772c1" kindref="member">data_iter_</ref>.iter()<sp/>==<sp/>NULL<sp/>||<sp/>!<ref refid="two__level__iterator_8cc_1a2931849199a6e75d36f025881e1772c1" kindref="member">data_iter_</ref>.Valid())<sp/>{</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Move<sp/>to<sp/>next<sp/>block</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="two__level__iterator_8cc_1ab0bc9aea2a1767c75155613472b3ee77" kindref="member">index_iter_</ref>.Valid())<sp/>{</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>SetDataIterator(NULL);</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="two__level__iterator_8cc_1ab0bc9aea2a1767c75155613472b3ee77" kindref="member">index_iter_</ref>.Prev();</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/>InitDataBlock();</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="two__level__iterator_8cc_1a2931849199a6e75d36f025881e1772c1" kindref="member">data_iter_</ref>.iter()<sp/>!=<sp/>NULL)<sp/><ref refid="two__level__iterator_8cc_1a2931849199a6e75d36f025881e1772c1" kindref="member">data_iter_</ref>.SeekToLast();</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="149"><highlight class="normal">}</highlight></codeline>
<codeline lineno="150"><highlight class="normal"></highlight></codeline>
<codeline lineno="151"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TwoLevelIterator::SetDataIterator(Iterator*<sp/>data_iter)<sp/>{</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="two__level__iterator_8cc_1a2931849199a6e75d36f025881e1772c1" kindref="member">data_iter_</ref>.iter()<sp/>!=<sp/>NULL)<sp/>SaveError(<ref refid="two__level__iterator_8cc_1a2931849199a6e75d36f025881e1772c1" kindref="member">data_iter_</ref>.status());</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><ref refid="two__level__iterator_8cc_1a2931849199a6e75d36f025881e1772c1" kindref="member">data_iter_</ref>.Set(data_iter);</highlight></codeline>
<codeline lineno="154"><highlight class="normal">}</highlight></codeline>
<codeline lineno="155"><highlight class="normal"></highlight></codeline>
<codeline lineno="156"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TwoLevelIterator::InitDataBlock()<sp/>{</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="two__level__iterator_8cc_1ab0bc9aea2a1767c75155613472b3ee77" kindref="member">index_iter_</ref>.Valid())<sp/>{</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/>SetDataIterator(NULL);</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/>Slice<sp/>handle<sp/>=<sp/><ref refid="two__level__iterator_8cc_1ab0bc9aea2a1767c75155613472b3ee77" kindref="member">index_iter_</ref>.value();</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="two__level__iterator_8cc_1a2931849199a6e75d36f025881e1772c1" kindref="member">data_iter_</ref>.iter()<sp/>!=<sp/>NULL<sp/>&amp;&amp;<sp/>handle.compare(<ref refid="two__level__iterator_8cc_1a47159420fedf013f42028693750c8f2e" kindref="member">data_block_handle_</ref>)<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>data_iter_<sp/>is<sp/>already<sp/>constructed<sp/>with<sp/>this<sp/>iterator,<sp/>so</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>no<sp/>need<sp/>to<sp/>change<sp/>anything</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Iterator*<sp/>iter<sp/>=<sp/>(*block_function_)(<ref refid="two__level__iterator_8cc_1a771179416dc84a22dc2cdaaa2149d754" kindref="member">arg_</ref>,<sp/><ref refid="two__level__iterator_8cc_1adb3c4b4cc2346e213c9b95c58982270f" kindref="member">options_</ref>,<sp/>handle);</highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="two__level__iterator_8cc_1a47159420fedf013f42028693750c8f2e" kindref="member">data_block_handle_</ref>.assign(handle.data(),<sp/>handle.size());</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>SetDataIterator(iter);</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="170"><highlight class="normal">}</highlight></codeline>
<codeline lineno="171"><highlight class="normal"></highlight></codeline>
<codeline lineno="172"><highlight class="normal">}<sp/><sp/></highlight><highlight class="comment">//<sp/>namespace</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="173"><highlight class="normal"></highlight></codeline>
<codeline lineno="174" refid="namespaceleveldb_1a44a9b2f992cf66b7046581b72a095ea1" refkind="member"><highlight class="normal"><ref refid="classleveldb_1_1_iterator" kindref="compound">Iterator</ref>*<sp/><ref refid="namespaceleveldb_1a44a9b2f992cf66b7046581b72a095ea1" kindref="member">NewTwoLevelIterator</ref>(</highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classleveldb_1_1_iterator" kindref="compound">Iterator</ref>*<sp/>index_iter,</highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/><sp/>BlockFunction<sp/>block_function,</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/><ref refid="env__posix_8cc_1a9ce2ec4812a92cb6ab39f6e81e9173a9" kindref="member">arg</ref>,</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>ReadOptions&amp;<sp/>options)<sp/>{</highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>TwoLevelIterator(index_iter,<sp/>block_function,<sp/>arg,<sp/>options);</highlight></codeline>
<codeline lineno="180"><highlight class="normal">}</highlight></codeline>
<codeline lineno="181"><highlight class="normal"></highlight></codeline>
<codeline lineno="182"><highlight class="normal">}<sp/><sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>leveldb</highlight><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="/home/dev/ds-160209/src/leveldb/table/two_level_iterator.cc"/>
  </compounddef>
</doxygen>
