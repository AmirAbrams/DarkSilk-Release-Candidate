<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.9.1">
  <compounddef id="field__impl_8h" kind="file" language="C++">
    <compoundname>field_impl.h</compoundname>
    <includes refid="secp256k1_2src_2util_8h" local="yes">util.h</includes>
    <includedby refid="bench__internal_8c" local="yes">/home/dev/ds-160209/src/secp256k1/src/bench_internal.c</includedby>
    <includedby refid="secp256k1_8c" local="yes">/home/dev/ds-160209/src/secp256k1/src/secp256k1.c</includedby>
    <includedby refid="gen__context_8c" local="yes">/home/dev/ds-160209/src/secp256k1/src/gen_context.c</includedby>
    <incdepgraph>
      <node id="51882">
        <label>stdlib.h</label>
      </node>
      <node id="51881">
        <label>util.h</label>
        <link refid="secp256k1_2src_2util_8h"/>
        <childnode refid="51882" relation="include">
        </childnode>
        <childnode refid="51883" relation="include">
        </childnode>
        <childnode refid="51884" relation="include">
        </childnode>
      </node>
      <node id="51883">
        <label>stdint.h</label>
        <link refid="stdint_8h"/>
      </node>
      <node id="51880">
        <label>/home/dev/ds-160209/src/secp256k1/src/field_impl.h</label>
        <link refid="field_impl.h"/>
        <childnode refid="51881" relation="include">
        </childnode>
      </node>
      <node id="51884">
        <label>stdio.h</label>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="51889">
        <label>/home/dev/ds-160209/src/secp256k1/src/gen_context.c</label>
        <link refid="gen__context_8c"/>
      </node>
      <node id="51888">
        <label>/home/dev/ds-160209/src/secp256k1/src/tests.c</label>
        <link refid="tests_8c"/>
      </node>
      <node id="51887">
        <label>/home/dev/ds-160209/src/secp256k1/src/secp256k1.c</label>
        <link refid="secp256k1_8c"/>
        <childnode refid="51886" relation="include">
        </childnode>
        <childnode refid="51888" relation="include">
        </childnode>
      </node>
      <node id="51885">
        <label>/home/dev/ds-160209/src/secp256k1/src/field_impl.h</label>
        <link refid="field_impl.h"/>
        <childnode refid="51886" relation="include">
        </childnode>
        <childnode refid="51887" relation="include">
        </childnode>
        <childnode refid="51889" relation="include">
        </childnode>
      </node>
      <node id="51886">
        <label>/home/dev/ds-160209/src/secp256k1/src/bench_internal.c</label>
        <link refid="bench__internal_8c"/>
      </node>
    </invincdepgraph>
      <sectiondef kind="func">
      <memberdef kind="function" id="field__impl_8h_1a33b925095ff0c60cd468d5a91d3ec788" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="secp256k1_8h_1a7ddc487fd46aee88f21cabedb7268b1e" kindref="member">SECP256K1_INLINE</ref> int</type>
        <definition>static SECP256K1_INLINE int secp256k1_fe_equal_var</definition>
        <argsstring>(const secp256k1_fe *a, const secp256k1_fe *b)</argsstring>
        <name>secp256k1_fe_equal_var</name>
        <param>
          <type>const <ref refid="structsecp256k1__fe" kindref="compound">secp256k1_fe</ref> *</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="structsecp256k1__fe" kindref="compound">secp256k1_fe</ref> *</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/secp256k1/src/field_impl.h" line="24" column="1" bodyfile="/home/dev/ds-160209/src/secp256k1/src/field_impl.h" bodystart="24" bodyend="29"/>
      </memberdef>
      <memberdef kind="function" id="field__impl_8h_1adeed9551ce946187f98c5e3d789e9575" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>static int secp256k1_fe_sqrt_var</definition>
        <argsstring>(secp256k1_fe *r, const secp256k1_fe *a)</argsstring>
        <name>secp256k1_fe_sqrt_var</name>
        <param>
          <type><ref refid="structsecp256k1__fe" kindref="compound">secp256k1_fe</ref> *</type>
          <declname>r</declname>
        </param>
        <param>
          <type>const <ref refid="structsecp256k1__fe" kindref="compound">secp256k1_fe</ref> *</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>Given that p is congruent to 3 mod 4, we can compute the square root of a mod p as the (p+1)/4&apos;th power of a.</para><para>As (p+1)/4 is an even number, it will have the same result for a and for (-a). Only one of these two numbers actually has a square root however, so we test at the end by squaring and comparing to the input. Also because (p+1)/4 is an even number, the computed square root is itself always a square (a ** ((p+1)/4) is the square of a ** ((p+1)/8)).</para><para>The binary representation of (p + 1)/4 has 3 blocks of 1s, with lengths in { 2, 22, 223 }. Use an addition chain to calculate 2^n - 1 for each block: 1, [2], 3, 6, 9, 11, [22], 44, 88, 176, 220, [223]</para>        </inbodydescription>
        <location file="/home/dev/ds-160209/src/secp256k1/src/field_impl.h" line="31" column="1" bodyfile="/home/dev/ds-160209/src/secp256k1/src/field_impl.h" bodystart="31" bodyend="127"/>
      </memberdef>
      <memberdef kind="function" id="field__impl_8h_1a3a071aa04ce0d88003b059c0a8ee0c0e" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void secp256k1_fe_inv</definition>
        <argsstring>(secp256k1_fe *r, const secp256k1_fe *a)</argsstring>
        <name>secp256k1_fe_inv</name>
        <param>
          <type><ref refid="structsecp256k1__fe" kindref="compound">secp256k1_fe</ref> *</type>
          <declname>r</declname>
        </param>
        <param>
          <type>const <ref refid="structsecp256k1__fe" kindref="compound">secp256k1_fe</ref> *</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>The binary representation of (p - 2) has 5 blocks of 1s, with lengths in { 1, 2, 22, 223 }. Use an addition chain to calculate 2^n - 1 for each block: [1], [2], 3, 6, 9, 11, [22], 44, 88, 176, 220, [223]</para>        </inbodydescription>
        <location file="/home/dev/ds-160209/src/secp256k1/src/field_impl.h" line="129" column="1" bodyfile="/home/dev/ds-160209/src/secp256k1/src/field_impl.h" bodystart="129" bodyend="217"/>
      </memberdef>
      <memberdef kind="function" id="field__impl_8h_1a0090ecfb39b34a8965cc16ae1feca5aa" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void secp256k1_fe_inv_var</definition>
        <argsstring>(secp256k1_fe *r, const secp256k1_fe *a)</argsstring>
        <name>secp256k1_fe_inv_var</name>
        <param>
          <type><ref refid="structsecp256k1__fe" kindref="compound">secp256k1_fe</ref> *</type>
          <declname>r</declname>
        </param>
        <param>
          <type>const <ref refid="structsecp256k1__fe" kindref="compound">secp256k1_fe</ref> *</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/secp256k1/src/field_impl.h" line="219" column="1" bodyfile="/home/dev/ds-160209/src/secp256k1/src/field_impl.h" bodystart="219" bodyend="254"/>
      </memberdef>
      <memberdef kind="function" id="field__impl_8h_1a728a757d8960973603be6f3b2aa13f4e" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void secp256k1_fe_inv_all_var</definition>
        <argsstring>(size_t len, secp256k1_fe *r, const secp256k1_fe *a)</argsstring>
        <name>secp256k1_fe_inv_all_var</name>
        <param>
          <type>size_t</type>
          <declname>len</declname>
        </param>
        <param>
          <type><ref refid="structsecp256k1__fe" kindref="compound">secp256k1_fe</ref> *</type>
          <declname>r</declname>
        </param>
        <param>
          <type>const <ref refid="structsecp256k1__fe" kindref="compound">secp256k1_fe</ref> *</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/secp256k1/src/field_impl.h" line="256" column="1" bodyfile="/home/dev/ds-160209/src/secp256k1/src/field_impl.h" bodystart="256" bodyend="281"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/**********************************************************************</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/>*<sp/>Copyright<sp/>(c)<sp/>2013,<sp/>2014<sp/>Pieter<sp/>Wuille<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*<sp/>Distributed<sp/>under<sp/>the<sp/>MIT<sp/>software<sp/>license,<sp/>see<sp/>the<sp/>accompanying<sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*<sp/>file<sp/>COPYING<sp/>or<sp/>http://www.opensource.org/licenses/mit-license.php.*</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/>**********************************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>_SECP256K1_FIELD_IMPL_H_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>_SECP256K1_FIELD_IMPL_H_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined<sp/>HAVE_CONFIG_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="libsecp256k1-config_8h" kindref="compound">libsecp256k1-config.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="secp256k1_2src_2util_8h" kindref="compound">util.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(USE_FIELD_10X26)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="field__10x26__impl_8h" kindref="compound">field_10x26_impl.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="preprocessor">#elif<sp/>defined(USE_FIELD_5X52)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="field__5x52__impl_8h" kindref="compound">field_5x52_impl.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="preprocessor">#error<sp/>&quot;Please<sp/>select<sp/>field<sp/>implementation&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"><ref refid="secp256k1_8h_1a7ddc487fd46aee88f21cabedb7268b1e" kindref="member">SECP256K1_INLINE</ref><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>secp256k1_fe_equal_var(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structsecp256k1__fe" kindref="compound">secp256k1_fe</ref><sp/>*a,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structsecp256k1__fe" kindref="compound">secp256k1_fe</ref><sp/>*b)<sp/>{</highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structsecp256k1__fe" kindref="compound">secp256k1_fe</ref><sp/>na;</highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/><sp/><sp/>secp256k1_fe_negate(&amp;na,<sp/>a,<sp/>1);</highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/><sp/><sp/>secp256k1_fe_add(&amp;na,<sp/>b);</highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>secp256k1_fe_normalizes_to_zero_var(&amp;na);</highlight></codeline>
<codeline lineno="29"><highlight class="normal">}</highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>secp256k1_fe_sqrt_var(<ref refid="structsecp256k1__fe" kindref="compound">secp256k1_fe</ref><sp/>*r,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structsecp256k1__fe" kindref="compound">secp256k1_fe</ref><sp/>*a)<sp/>{</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structsecp256k1__fe" kindref="compound">secp256k1_fe</ref><sp/>x2,<sp/>x3,<sp/>x6,<sp/>x9,<sp/>x11,<sp/>x22,<sp/>x44,<sp/>x88,<sp/>x176,<sp/>x220,<sp/>x223,<sp/>t1;</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j;</highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/>secp256k1_fe_sqr(&amp;x2,<sp/>a);</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/>secp256k1_fe_mul(&amp;x2,<sp/>&amp;x2,<sp/>a);</highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/>secp256k1_fe_sqr(&amp;x3,<sp/>&amp;x2);</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/>secp256k1_fe_mul(&amp;x3,<sp/>&amp;x3,<sp/>a);</highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/>x6<sp/>=<sp/>x3;</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(j=0;<sp/>j&lt;3;<sp/>j++)<sp/>{</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>secp256k1_fe_sqr(&amp;x6,<sp/>&amp;x6);</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/>secp256k1_fe_mul(&amp;x6,<sp/>&amp;x6,<sp/>&amp;x3);</highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/>x9<sp/>=<sp/>x6;</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(j=0;<sp/>j&lt;3;<sp/>j++)<sp/>{</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>secp256k1_fe_sqr(&amp;x9,<sp/>&amp;x9);</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/>secp256k1_fe_mul(&amp;x9,<sp/>&amp;x9,<sp/>&amp;x3);</highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/>x11<sp/>=<sp/>x9;</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(j=0;<sp/>j&lt;2;<sp/>j++)<sp/>{</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>secp256k1_fe_sqr(&amp;x11,<sp/>&amp;x11);</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/>secp256k1_fe_mul(&amp;x11,<sp/>&amp;x11,<sp/>&amp;x2);</highlight></codeline>
<codeline lineno="72"><highlight class="normal"></highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/>x22<sp/>=<sp/>x11;</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(j=0;<sp/>j&lt;11;<sp/>j++)<sp/>{</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>secp256k1_fe_sqr(&amp;x22,<sp/>&amp;x22);</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/>secp256k1_fe_mul(&amp;x22,<sp/>&amp;x22,<sp/>&amp;x11);</highlight></codeline>
<codeline lineno="78"><highlight class="normal"></highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/>x44<sp/>=<sp/>x22;</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(j=0;<sp/>j&lt;22;<sp/>j++)<sp/>{</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>secp256k1_fe_sqr(&amp;x44,<sp/>&amp;x44);</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/>secp256k1_fe_mul(&amp;x44,<sp/>&amp;x44,<sp/>&amp;x22);</highlight></codeline>
<codeline lineno="84"><highlight class="normal"></highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/>x88<sp/>=<sp/>x44;</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(j=0;<sp/>j&lt;44;<sp/>j++)<sp/>{</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>secp256k1_fe_sqr(&amp;x88,<sp/>&amp;x88);</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/>secp256k1_fe_mul(&amp;x88,<sp/>&amp;x88,<sp/>&amp;x44);</highlight></codeline>
<codeline lineno="90"><highlight class="normal"></highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/>x176<sp/>=<sp/>x88;</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(j=0;<sp/>j&lt;88;<sp/>j++)<sp/>{</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>secp256k1_fe_sqr(&amp;x176,<sp/>&amp;x176);</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/>secp256k1_fe_mul(&amp;x176,<sp/>&amp;x176,<sp/>&amp;x88);</highlight></codeline>
<codeline lineno="96"><highlight class="normal"></highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/>x220<sp/>=<sp/>x176;</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(j=0;<sp/>j&lt;44;<sp/>j++)<sp/>{</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>secp256k1_fe_sqr(&amp;x220,<sp/>&amp;x220);</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/>secp256k1_fe_mul(&amp;x220,<sp/>&amp;x220,<sp/>&amp;x44);</highlight></codeline>
<codeline lineno="102"><highlight class="normal"></highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/>x223<sp/>=<sp/>x220;</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(j=0;<sp/>j&lt;3;<sp/>j++)<sp/>{</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>secp256k1_fe_sqr(&amp;x223,<sp/>&amp;x223);</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/>secp256k1_fe_mul(&amp;x223,<sp/>&amp;x223,<sp/>&amp;x3);</highlight></codeline>
<codeline lineno="108"><highlight class="normal"></highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>The<sp/>final<sp/>result<sp/>is<sp/>then<sp/>assembled<sp/>using<sp/>a<sp/>sliding<sp/>window<sp/>over<sp/>the<sp/>blocks.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="110"><highlight class="normal"></highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/>t1<sp/>=<sp/>x223;</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(j=0;<sp/>j&lt;23;<sp/>j++)<sp/>{</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>secp256k1_fe_sqr(&amp;t1,<sp/>&amp;t1);</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/>secp256k1_fe_mul(&amp;t1,<sp/>&amp;t1,<sp/>&amp;x22);</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(j=0;<sp/>j&lt;6;<sp/>j++)<sp/>{</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>secp256k1_fe_sqr(&amp;t1,<sp/>&amp;t1);</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/>secp256k1_fe_mul(&amp;t1,<sp/>&amp;t1,<sp/>&amp;x2);</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/>secp256k1_fe_sqr(&amp;t1,<sp/>&amp;t1);</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/>secp256k1_fe_sqr(r,<sp/>&amp;t1);</highlight></codeline>
<codeline lineno="122"><highlight class="normal"></highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Check<sp/>that<sp/>a<sp/>square<sp/>root<sp/>was<sp/>actually<sp/>calculated<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="124"><highlight class="normal"></highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/>secp256k1_fe_sqr(&amp;t1,<sp/>r);</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>secp256k1_fe_equal_var(&amp;t1,<sp/>a);</highlight></codeline>
<codeline lineno="127"><highlight class="normal">}</highlight></codeline>
<codeline lineno="128"><highlight class="normal"></highlight></codeline>
<codeline lineno="129"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>secp256k1_fe_inv(<ref refid="structsecp256k1__fe" kindref="compound">secp256k1_fe</ref><sp/>*r,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structsecp256k1__fe" kindref="compound">secp256k1_fe</ref><sp/>*a)<sp/>{</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structsecp256k1__fe" kindref="compound">secp256k1_fe</ref><sp/>x2,<sp/>x3,<sp/>x6,<sp/>x9,<sp/>x11,<sp/>x22,<sp/>x44,<sp/>x88,<sp/>x176,<sp/>x220,<sp/>x223,<sp/>t1;</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j;</highlight></codeline>
<codeline lineno="132"><highlight class="normal"></highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/>secp256k1_fe_sqr(&amp;x2,<sp/>a);</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/>secp256k1_fe_mul(&amp;x2,<sp/>&amp;x2,<sp/>a);</highlight></codeline>
<codeline lineno="140"><highlight class="normal"></highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/>secp256k1_fe_sqr(&amp;x3,<sp/>&amp;x2);</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/>secp256k1_fe_mul(&amp;x3,<sp/>&amp;x3,<sp/>a);</highlight></codeline>
<codeline lineno="143"><highlight class="normal"></highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/>x6<sp/>=<sp/>x3;</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(j=0;<sp/>j&lt;3;<sp/>j++)<sp/>{</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>secp256k1_fe_sqr(&amp;x6,<sp/>&amp;x6);</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/>secp256k1_fe_mul(&amp;x6,<sp/>&amp;x6,<sp/>&amp;x3);</highlight></codeline>
<codeline lineno="149"><highlight class="normal"></highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/>x9<sp/>=<sp/>x6;</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(j=0;<sp/>j&lt;3;<sp/>j++)<sp/>{</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>secp256k1_fe_sqr(&amp;x9,<sp/>&amp;x9);</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/>secp256k1_fe_mul(&amp;x9,<sp/>&amp;x9,<sp/>&amp;x3);</highlight></codeline>
<codeline lineno="155"><highlight class="normal"></highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/>x11<sp/>=<sp/>x9;</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(j=0;<sp/>j&lt;2;<sp/>j++)<sp/>{</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>secp256k1_fe_sqr(&amp;x11,<sp/>&amp;x11);</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/>secp256k1_fe_mul(&amp;x11,<sp/>&amp;x11,<sp/>&amp;x2);</highlight></codeline>
<codeline lineno="161"><highlight class="normal"></highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/>x22<sp/>=<sp/>x11;</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(j=0;<sp/>j&lt;11;<sp/>j++)<sp/>{</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>secp256k1_fe_sqr(&amp;x22,<sp/>&amp;x22);</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/>secp256k1_fe_mul(&amp;x22,<sp/>&amp;x22,<sp/>&amp;x11);</highlight></codeline>
<codeline lineno="167"><highlight class="normal"></highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/><sp/>x44<sp/>=<sp/>x22;</highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(j=0;<sp/>j&lt;22;<sp/>j++)<sp/>{</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>secp256k1_fe_sqr(&amp;x44,<sp/>&amp;x44);</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/>secp256k1_fe_mul(&amp;x44,<sp/>&amp;x44,<sp/>&amp;x22);</highlight></codeline>
<codeline lineno="173"><highlight class="normal"></highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><sp/>x88<sp/>=<sp/>x44;</highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(j=0;<sp/>j&lt;44;<sp/>j++)<sp/>{</highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>secp256k1_fe_sqr(&amp;x88,<sp/>&amp;x88);</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/><sp/>secp256k1_fe_mul(&amp;x88,<sp/>&amp;x88,<sp/>&amp;x44);</highlight></codeline>
<codeline lineno="179"><highlight class="normal"></highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/><sp/><sp/>x176<sp/>=<sp/>x88;</highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(j=0;<sp/>j&lt;88;<sp/>j++)<sp/>{</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>secp256k1_fe_sqr(&amp;x176,<sp/>&amp;x176);</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/><sp/><sp/>secp256k1_fe_mul(&amp;x176,<sp/>&amp;x176,<sp/>&amp;x88);</highlight></codeline>
<codeline lineno="185"><highlight class="normal"></highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><sp/><sp/>x220<sp/>=<sp/>x176;</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(j=0;<sp/>j&lt;44;<sp/>j++)<sp/>{</highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>secp256k1_fe_sqr(&amp;x220,<sp/>&amp;x220);</highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/><sp/><sp/>secp256k1_fe_mul(&amp;x220,<sp/>&amp;x220,<sp/>&amp;x44);</highlight></codeline>
<codeline lineno="191"><highlight class="normal"></highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/><sp/>x223<sp/>=<sp/>x220;</highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(j=0;<sp/>j&lt;3;<sp/>j++)<sp/>{</highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>secp256k1_fe_sqr(&amp;x223,<sp/>&amp;x223);</highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/><sp/>secp256k1_fe_mul(&amp;x223,<sp/>&amp;x223,<sp/>&amp;x3);</highlight></codeline>
<codeline lineno="197"><highlight class="normal"></highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>The<sp/>final<sp/>result<sp/>is<sp/>then<sp/>assembled<sp/>using<sp/>a<sp/>sliding<sp/>window<sp/>over<sp/>the<sp/>blocks.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="199"><highlight class="normal"></highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/><sp/><sp/>t1<sp/>=<sp/>x223;</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(j=0;<sp/>j&lt;23;<sp/>j++)<sp/>{</highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>secp256k1_fe_sqr(&amp;t1,<sp/>&amp;t1);</highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/><sp/><sp/>secp256k1_fe_mul(&amp;t1,<sp/>&amp;t1,<sp/>&amp;x22);</highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(j=0;<sp/>j&lt;5;<sp/>j++)<sp/>{</highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>secp256k1_fe_sqr(&amp;t1,<sp/>&amp;t1);</highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/><sp/><sp/>secp256k1_fe_mul(&amp;t1,<sp/>&amp;t1,<sp/>a);</highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(j=0;<sp/>j&lt;3;<sp/>j++)<sp/>{</highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>secp256k1_fe_sqr(&amp;t1,<sp/>&amp;t1);</highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/><sp/><sp/>secp256k1_fe_mul(&amp;t1,<sp/>&amp;t1,<sp/>&amp;x2);</highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(j=0;<sp/>j&lt;2;<sp/>j++)<sp/>{</highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>secp256k1_fe_sqr(&amp;t1,<sp/>&amp;t1);</highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/><sp/><sp/>secp256k1_fe_mul(r,<sp/>a,<sp/>&amp;t1);</highlight></codeline>
<codeline lineno="217"><highlight class="normal">}</highlight></codeline>
<codeline lineno="218"><highlight class="normal"></highlight></codeline>
<codeline lineno="219"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>secp256k1_fe_inv_var(<ref refid="structsecp256k1__fe" kindref="compound">secp256k1_fe</ref><sp/>*r,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structsecp256k1__fe" kindref="compound">secp256k1_fe</ref><sp/>*a)<sp/>{</highlight></codeline>
<codeline lineno="220"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(USE_FIELD_INV_BUILTIN)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/><sp/><sp/>secp256k1_fe_inv(r,<sp/>a);</highlight></codeline>
<codeline lineno="222"><highlight class="normal"></highlight><highlight class="preprocessor">#elif<sp/>defined(USE_FIELD_INV_NUM)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structsecp256k1__num" kindref="compound">secp256k1_num</ref><sp/>n,<sp/>m;</highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structsecp256k1__fe" kindref="compound">secp256k1_fe</ref><sp/>negone<sp/>=<sp/><ref refid="field__10x26_8h_1a8c00ba3d97ea0d9b0d461463e890de15" kindref="member">SECP256K1_FE_CONST</ref>(</highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0xFFFFFFFFUL,<sp/>0xFFFFFFFFUL,<sp/>0xFFFFFFFFUL,<sp/>0xFFFFFFFFUL,</highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0xFFFFFFFFUL,<sp/>0xFFFFFFFFUL,<sp/>0xFFFFFFFEUL,<sp/>0xFFFFFC2EUL</highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/><sp/><sp/>);</highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>secp256k1<sp/>field<sp/>prime,<sp/>value<sp/>p<sp/>defined<sp/>in<sp/>&quot;Standards<sp/>for<sp/>Efficient<sp/>Cryptography&quot;<sp/>(SEC2)<sp/>2.7.1.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>prime[32]<sp/>=<sp/>{</highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,</highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,</highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,</highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0xFF,0xFF,0xFF,0xFE,0xFF,0xFF,0xFC,0x2F</highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>b[32];</highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>res;</highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structsecp256k1__fe" kindref="compound">secp256k1_fe</ref><sp/>c<sp/>=<sp/>*a;</highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/><sp/><sp/>secp256k1_fe_normalize_var(&amp;c);</highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/><sp/><sp/>secp256k1_fe_get_b32(b,<sp/>&amp;c);</highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/><sp/><sp/>secp256k1_num_set_bin(&amp;n,<sp/>b,<sp/>32);</highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/><sp/><sp/>secp256k1_num_set_bin(&amp;m,<sp/>prime,<sp/>32);</highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/><sp/><sp/>secp256k1_num_mod_inverse(&amp;n,<sp/>&amp;n,<sp/>&amp;m);</highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/><sp/><sp/>secp256k1_num_get_bin(b,<sp/>32,<sp/>&amp;n);</highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/><sp/><sp/>res<sp/>=<sp/>secp256k1_fe_set_b32(r,<sp/>b);</highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/><sp/><sp/>(void)res;</highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="secp256k1_2src_2util_8h_1aca8ac5ae73fd966db106de59160a178b" kindref="member">VERIFY_CHECK</ref>(res);</highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Verify<sp/>the<sp/>result<sp/>is<sp/>the<sp/>(unique)<sp/>valid<sp/>inverse<sp/>using<sp/>non-GMP<sp/>code.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/><sp/><sp/>secp256k1_fe_mul(&amp;c,<sp/>&amp;c,<sp/>r);</highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/><sp/><sp/>secp256k1_fe_add(&amp;c,<sp/>&amp;negone);</highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="secp256k1_2src_2util_8h_1aba1590ff86288c886c47dc8a27b30467" kindref="member">CHECK</ref>(secp256k1_fe_normalizes_to_zero_var(&amp;c));</highlight></codeline>
<codeline lineno="251"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="252"><highlight class="normal"></highlight><highlight class="preprocessor">#error<sp/>&quot;Please<sp/>select<sp/>field<sp/>inverse<sp/>implementation&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="253"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="254"><highlight class="normal">}</highlight></codeline>
<codeline lineno="255"><highlight class="normal"></highlight></codeline>
<codeline lineno="256"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>secp256k1_fe_inv_all_var(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>len,<sp/><ref refid="structsecp256k1__fe" kindref="compound">secp256k1_fe</ref><sp/>*r,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structsecp256k1__fe" kindref="compound">secp256k1_fe</ref><sp/>*a)<sp/>{</highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structsecp256k1__fe" kindref="compound">secp256k1_fe</ref><sp/>u;</highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(len<sp/>&lt;<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="262"><highlight class="normal"></highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="secp256k1_2src_2util_8h_1aca8ac5ae73fd966db106de59160a178b" kindref="member">VERIFY_CHECK</ref>((r<sp/>+<sp/>len<sp/>&lt;=<sp/>a)<sp/>||<sp/>(a<sp/>+<sp/>len<sp/>&lt;=<sp/>r));</highlight></codeline>
<codeline lineno="264"><highlight class="normal"></highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/><sp/><sp/>r[0]<sp/>=<sp/>a[0];</highlight></codeline>
<codeline lineno="266"><highlight class="normal"></highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/><sp/><sp/>i<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(++i<sp/>&lt;<sp/>len)<sp/>{</highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>secp256k1_fe_mul(&amp;r[i],<sp/>&amp;r[i<sp/>-<sp/>1],<sp/>&amp;a[i]);</highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="271"><highlight class="normal"></highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/><sp/><sp/>secp256k1_fe_inv_var(&amp;u,<sp/>&amp;r[--i]);</highlight></codeline>
<codeline lineno="273"><highlight class="normal"></highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(i<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>j<sp/>=<sp/>i--;</highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>secp256k1_fe_mul(&amp;r[j],<sp/>&amp;r[i],<sp/>&amp;u);</highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>secp256k1_fe_mul(&amp;u,<sp/>&amp;u,<sp/>&amp;a[j]);</highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="279"><highlight class="normal"></highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/><sp/><sp/>r[0]<sp/>=<sp/>u;</highlight></codeline>
<codeline lineno="281"><highlight class="normal">}</highlight></codeline>
<codeline lineno="282"><highlight class="normal"></highlight></codeline>
<codeline lineno="283"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
    </programlisting>
    <location file="/home/dev/ds-160209/src/secp256k1/src/field_impl.h"/>
  </compounddef>
</doxygen>
