<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.9.1">
  <compounddef id="class_c_active_stormnode" kind="class" language="C++" prot="public">
    <compoundname>CActiveStormnode</compoundname>
    <includes refid="activestormnode_8h" local="no">activestormnode.h</includes>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="class_c_active_stormnode_1a1032e37c7fc9b0642b2b76173fba21b7" prot="private" static="no" mutable="yes">
        <type><ref refid="sync_8h_1a37a4692b2d517f2843655ca11af7668a" kindref="member">CCriticalSection</ref></type>
        <definition>CCriticalSection CActiveStormnode::cs</definition>
        <argsstring></argsstring>
        <name>cs</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/activestormnode.h" line="24" column="1" bodyfile="/home/dev/ds-160209/src/activestormnode.h" bodystart="24" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-attrib">
      <memberdef kind="variable" id="class_c_active_stormnode_1ab6f5257c65356ed738eb9c0187f42f33" prot="public" static="no" mutable="no">
        <type><ref refid="class_c_pub_key" kindref="compound">CPubKey</ref></type>
        <definition>CPubKey CActiveStormnode::pubKeyStormnode</definition>
        <argsstring></argsstring>
        <name>pubKeyStormnode</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/activestormnode.h" line="39" column="1" bodyfile="/home/dev/ds-160209/src/activestormnode.h" bodystart="39" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_c_active_stormnode_1aef2103b9e7fdc173e56dbb8f903e1f38" prot="public" static="no" mutable="no">
        <type><ref refid="class_c_tx_in" kindref="compound">CTxIn</ref></type>
        <definition>CTxIn CActiveStormnode::vin</definition>
        <argsstring></argsstring>
        <name>vin</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/activestormnode.h" line="42" column="1" bodyfile="/home/dev/ds-160209/src/activestormnode.h" bodystart="42" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_c_active_stormnode_1ac1bd510de0060b100f5c9a1ed520c0c5" prot="public" static="no" mutable="no">
        <type><ref refid="class_c_service" kindref="compound">CService</ref></type>
        <definition>CService CActiveStormnode::service</definition>
        <argsstring></argsstring>
        <name>service</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/activestormnode.h" line="43" column="1" bodyfile="/home/dev/ds-160209/src/activestormnode.h" bodystart="43" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_c_active_stormnode_1a8ab0534b87cbee04dfae4eff95d83786" prot="public" static="no" mutable="no">
        <type>int</type>
        <definition>int CActiveStormnode::status</definition>
        <argsstring></argsstring>
        <name>status</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/activestormnode.h" line="45" column="1" bodyfile="/home/dev/ds-160209/src/activestormnode.h" bodystart="45" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_c_active_stormnode_1a53990dc82bb42330202a5fa686ac17d1" prot="public" static="no" mutable="no">
        <type>std::string</type>
        <definition>std::string CActiveStormnode::notCapableReason</definition>
        <argsstring></argsstring>
        <name>notCapableReason</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/activestormnode.h" line="46" column="1" bodyfile="/home/dev/ds-160209/src/activestormnode.h" bodystart="46" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="class_c_active_stormnode_1a717558c5c580ece599b458525e92e2ee" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool CActiveStormnode::SendStormnodePing</definition>
        <argsstring>(std::string &amp;errorMessage)</argsstring>
        <name>SendStormnodePing</name>
        <param>
          <type>std::string &amp;</type>
          <declname>errorMessage</declname>
        </param>
        <briefdescription>
<para>Ping Stormnode. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/activestormnode.h" line="27" column="1" bodyfile="/home/dev/ds-160209/src/activestormnode.cpp" bodystart="153" bodyend="207"/>
      </memberdef>
      <memberdef kind="function" id="class_c_active_stormnode_1a240041d47eccbd814de0e0f281a60cf0" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool CActiveStormnode::Register</definition>
        <argsstring>(CTxIn vin, CService service, CKey key, CPubKey pubKey, CKey keyStormnode, CPubKey pubKeyStormnode, std::string &amp;retErrorMessage)</argsstring>
        <name>Register</name>
        <param>
          <type><ref refid="class_c_tx_in" kindref="compound">CTxIn</ref></type>
          <declname>vin</declname>
        </param>
        <param>
          <type><ref refid="class_c_service" kindref="compound">CService</ref></type>
          <declname>service</declname>
        </param>
        <param>
          <type><ref refid="class_c_key" kindref="compound">CKey</ref></type>
          <declname>key</declname>
        </param>
        <param>
          <type><ref refid="class_c_pub_key" kindref="compound">CPubKey</ref></type>
          <declname>pubKey</declname>
        </param>
        <param>
          <type><ref refid="class_c_key" kindref="compound">CKey</ref></type>
          <declname>keyStormnode</declname>
        </param>
        <param>
          <type><ref refid="class_c_pub_key" kindref="compound">CPubKey</ref></type>
          <declname>pubKeyStormnode</declname>
        </param>
        <param>
          <type>std::string &amp;</type>
          <declname>retErrorMessage</declname>
        </param>
        <briefdescription>
<para>Register any Stormnode. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/activestormnode.h" line="30" column="1" bodyfile="/home/dev/ds-160209/src/activestormnode.cpp" bodystart="255" bodyend="290"/>
      </memberdef>
      <memberdef kind="function" id="class_c_active_stormnode_1a9f8d760b72615c9d5a73bb7f117aae37" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool CActiveStormnode::GetStormNodeVin</definition>
        <argsstring>(CTxIn &amp;vin, CPubKey &amp;pubkey, CKey &amp;secretKey, std::string strTxHash, std::string strOutputIndex)</argsstring>
        <name>GetStormNodeVin</name>
        <param>
          <type><ref refid="class_c_tx_in" kindref="compound">CTxIn</ref> &amp;</type>
          <declname>vin</declname>
        </param>
        <param>
          <type><ref refid="class_c_pub_key" kindref="compound">CPubKey</ref> &amp;</type>
          <declname>pubkey</declname>
        </param>
        <param>
          <type><ref refid="class_c_key" kindref="compound">CKey</ref> &amp;</type>
          <declname>secretKey</declname>
        </param>
        <param>
          <type>std::string</type>
          <declname>strTxHash</declname>
        </param>
        <param>
          <type>std::string</type>
          <declname>strOutputIndex</declname>
        </param>
        <briefdescription>
<para>Get 10000 DRKSLK input that can be used for the Stormnode. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/activestormnode.h" line="33" column="1" bodyfile="/home/dev/ds-160209/src/activestormnode.cpp" bodystart="296" bodyend="334"/>
      </memberdef>
      <memberdef kind="function" id="class_c_active_stormnode_1a83b2a907a14ee65936e22361276b176b" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool CActiveStormnode::GetVinFromOutput</definition>
        <argsstring>(COutput out, CTxIn &amp;vin, CPubKey &amp;pubkey, CKey &amp;secretKey)</argsstring>
        <name>GetVinFromOutput</name>
        <param>
          <type><ref refid="class_c_output" kindref="compound">COutput</ref></type>
          <declname>out</declname>
        </param>
        <param>
          <type><ref refid="class_c_tx_in" kindref="compound">CTxIn</ref> &amp;</type>
          <declname>vin</declname>
        </param>
        <param>
          <type><ref refid="class_c_pub_key" kindref="compound">CPubKey</ref> &amp;</type>
          <declname>pubkey</declname>
        </param>
        <param>
          <type><ref refid="class_c_key" kindref="compound">CKey</ref> &amp;</type>
          <declname>secretKey</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/activestormnode.h" line="34" column="1" bodyfile="/home/dev/ds-160209/src/activestormnode.cpp" bodystart="338" bodyend="362"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="class_c_active_stormnode_1a9bc5169371b86150c909ecc8105b738d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>CActiveStormnode::CActiveStormnode</definition>
        <argsstring>()</argsstring>
        <name>CActiveStormnode</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/activestormnode.h" line="48" column="1" bodyfile="/home/dev/ds-160209/src/activestormnode.h" bodystart="48" bodyend="51"/>
      </memberdef>
      <memberdef kind="function" id="class_c_active_stormnode_1a9532e0804ea4c96ad7d58ab3e9da6891" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void CActiveStormnode::ManageStatus</definition>
        <argsstring>()</argsstring>
        <name>ManageStatus</name>
        <briefdescription>
<para>Manage status of main Stormnode. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/activestormnode.h" line="54" column="1" bodyfile="/home/dev/ds-160209/src/activestormnode.cpp" bodystart="17" bodyend="140"/>
      </memberdef>
      <memberdef kind="function" id="class_c_active_stormnode_1ad52331446d221f1369870dbc6d92eaa7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string CActiveStormnode::GetStatus</definition>
        <argsstring>()</argsstring>
        <name>GetStatus</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/activestormnode.h" line="55" column="1" bodyfile="/home/dev/ds-160209/src/activestormnode.cpp" bodystart="142" bodyend="151"/>
      </memberdef>
      <memberdef kind="function" id="class_c_active_stormnode_1a23b6459a057d50230f258050e9b2d6f8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool CActiveStormnode::Register</definition>
        <argsstring>(std::string strService, std::string strKey, std::string strTxHash, std::string strOutputIndex, std::string &amp;errorMessage)</argsstring>
        <name>Register</name>
        <param>
          <type>std::string</type>
          <declname>strService</declname>
        </param>
        <param>
          <type>std::string</type>
          <declname>strKey</declname>
        </param>
        <param>
          <type>std::string</type>
          <declname>strTxHash</declname>
        </param>
        <param>
          <type>std::string</type>
          <declname>strOutputIndex</declname>
        </param>
        <param>
          <type>std::string &amp;</type>
          <declname>errorMessage</declname>
        </param>
        <briefdescription>
<para>Register remote Stormnode. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/activestormnode.h" line="58" column="1" bodyfile="/home/dev/ds-160209/src/activestormnode.cpp" bodystart="209" bodyend="252"/>
      </memberdef>
      <memberdef kind="function" id="class_c_active_stormnode_1ab0e9106269959f9a396fbf914565e326" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool CActiveStormnode::GetStormNodeVin</definition>
        <argsstring>(CTxIn &amp;vin, CPubKey &amp;pubkey, CKey &amp;secretKey)</argsstring>
        <name>GetStormNodeVin</name>
        <param>
          <type><ref refid="class_c_tx_in" kindref="compound">CTxIn</ref> &amp;</type>
          <declname>vin</declname>
        </param>
        <param>
          <type><ref refid="class_c_pub_key" kindref="compound">CPubKey</ref> &amp;</type>
          <declname>pubkey</declname>
        </param>
        <param>
          <type><ref refid="class_c_key" kindref="compound">CKey</ref> &amp;</type>
          <declname>secretKey</declname>
        </param>
        <briefdescription>
<para>Get 10,000 DRKSLK input that can be used for the Stormnode. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/activestormnode.h" line="61" column="1" bodyfile="/home/dev/ds-160209/src/activestormnode.cpp" bodystart="292" bodyend="294"/>
      </memberdef>
      <memberdef kind="function" id="class_c_active_stormnode_1af66060dcef7137a1db78ad72b396d741" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>vector&lt; <ref refid="class_c_output" kindref="compound">COutput</ref> &gt;</type>
        <definition>vector&lt; COutput &gt; CActiveStormnode::SelectCoinsStormnode</definition>
        <argsstring>()</argsstring>
        <name>SelectCoinsStormnode</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/activestormnode.h" line="62" column="1" bodyfile="/home/dev/ds-160209/src/activestormnode.cpp" bodystart="365" bodyend="399"/>
      </memberdef>
      <memberdef kind="function" id="class_c_active_stormnode_1af3925fdbe649c730b215b466680c0139" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool CActiveStormnode::EnableHotColdStormNode</definition>
        <argsstring>(CTxIn &amp;vin, CService &amp;addr)</argsstring>
        <name>EnableHotColdStormNode</name>
        <param>
          <type><ref refid="class_c_tx_in" kindref="compound">CTxIn</ref> &amp;</type>
          <declname>vin</declname>
        </param>
        <param>
          <type><ref refid="class_c_service" kindref="compound">CService</ref> &amp;</type>
          <declname>addr</declname>
        </param>
        <briefdescription>
<para>Enable cold wallet mode (run a Stormnode with no funds) </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/activestormnode.h" line="65" column="1" bodyfile="/home/dev/ds-160209/src/activestormnode.cpp" bodystart="402" bodyend="415"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <collaborationgraph>
      <node id="208">
        <label>base_uint&lt; 256 &gt;</label>
        <link refid="classbase__uint"/>
      </node>
      <node id="209">
        <label>CPubKey</label>
        <link refid="class_c_pub_key"/>
      </node>
      <node id="203">
        <label>CTxIn</label>
        <link refid="class_c_tx_in"/>
        <childnode refid="204" relation="usage">
          <edgelabel>scriptSig</edgelabel>
          <edgelabel>prevPubKey</edgelabel>
        </childnode>
        <childnode refid="206" relation="usage">
          <edgelabel>prevout</edgelabel>
        </childnode>
      </node>
      <node id="207">
        <label>uint256</label>
        <link refid="classuint256"/>
        <childnode refid="208" relation="public-inheritance">
        </childnode>
      </node>
      <node id="211">
        <label>CNetAddr</label>
        <link refid="class_c_net_addr"/>
      </node>
      <node id="202">
        <label>CActiveStormnode</label>
        <link refid="class_c_active_stormnode"/>
        <childnode refid="203" relation="usage">
          <edgelabel>vin</edgelabel>
        </childnode>
        <childnode refid="209" relation="usage">
          <edgelabel>pubKeyStormnode</edgelabel>
        </childnode>
        <childnode refid="210" relation="usage">
          <edgelabel>service</edgelabel>
        </childnode>
      </node>
      <node id="206">
        <label>COutPoint</label>
        <link refid="class_c_out_point"/>
        <childnode refid="207" relation="usage">
          <edgelabel>hash</edgelabel>
        </childnode>
      </node>
      <node id="204">
        <label>CScript</label>
        <link refid="class_c_script"/>
        <childnode refid="205" relation="public-inheritance">
        </childnode>
      </node>
      <node id="205">
        <label>std::vector&lt; unsigned char &gt;</label>
      </node>
      <node id="210">
        <label>CService</label>
        <link refid="class_c_service"/>
        <childnode refid="211" relation="public-inheritance">
        </childnode>
      </node>
    </collaborationgraph>
    <location file="/home/dev/ds-160209/src/activestormnode.h" line="21" column="1" bodyfile="/home/dev/ds-160209/src/activestormnode.h" bodystart="20" bodyend="66"/>
    <listofallmembers>
      <member refid="class_c_active_stormnode_1a9bc5169371b86150c909ecc8105b738d" prot="public" virt="non-virtual"><scope>CActiveStormnode</scope><name>CActiveStormnode</name></member>
      <member refid="class_c_active_stormnode_1a1032e37c7fc9b0642b2b76173fba21b7" prot="private" virt="non-virtual"><scope>CActiveStormnode</scope><name>cs</name></member>
      <member refid="class_c_active_stormnode_1af3925fdbe649c730b215b466680c0139" prot="public" virt="non-virtual"><scope>CActiveStormnode</scope><name>EnableHotColdStormNode</name></member>
      <member refid="class_c_active_stormnode_1ad52331446d221f1369870dbc6d92eaa7" prot="public" virt="non-virtual"><scope>CActiveStormnode</scope><name>GetStatus</name></member>
      <member refid="class_c_active_stormnode_1a9f8d760b72615c9d5a73bb7f117aae37" prot="private" virt="non-virtual"><scope>CActiveStormnode</scope><name>GetStormNodeVin</name></member>
      <member refid="class_c_active_stormnode_1ab0e9106269959f9a396fbf914565e326" prot="public" virt="non-virtual"><scope>CActiveStormnode</scope><name>GetStormNodeVin</name></member>
      <member refid="class_c_active_stormnode_1a83b2a907a14ee65936e22361276b176b" prot="private" virt="non-virtual"><scope>CActiveStormnode</scope><name>GetVinFromOutput</name></member>
      <member refid="class_c_active_stormnode_1a9532e0804ea4c96ad7d58ab3e9da6891" prot="public" virt="non-virtual"><scope>CActiveStormnode</scope><name>ManageStatus</name></member>
      <member refid="class_c_active_stormnode_1a53990dc82bb42330202a5fa686ac17d1" prot="public" virt="non-virtual"><scope>CActiveStormnode</scope><name>notCapableReason</name></member>
      <member refid="class_c_active_stormnode_1ab6f5257c65356ed738eb9c0187f42f33" prot="public" virt="non-virtual"><scope>CActiveStormnode</scope><name>pubKeyStormnode</name></member>
      <member refid="class_c_active_stormnode_1a240041d47eccbd814de0e0f281a60cf0" prot="private" virt="non-virtual"><scope>CActiveStormnode</scope><name>Register</name></member>
      <member refid="class_c_active_stormnode_1a23b6459a057d50230f258050e9b2d6f8" prot="public" virt="non-virtual"><scope>CActiveStormnode</scope><name>Register</name></member>
      <member refid="class_c_active_stormnode_1af66060dcef7137a1db78ad72b396d741" prot="public" virt="non-virtual"><scope>CActiveStormnode</scope><name>SelectCoinsStormnode</name></member>
      <member refid="class_c_active_stormnode_1a717558c5c580ece599b458525e92e2ee" prot="private" virt="non-virtual"><scope>CActiveStormnode</scope><name>SendStormnodePing</name></member>
      <member refid="class_c_active_stormnode_1ac1bd510de0060b100f5c9a1ed520c0c5" prot="public" virt="non-virtual"><scope>CActiveStormnode</scope><name>service</name></member>
      <member refid="class_c_active_stormnode_1a8ab0534b87cbee04dfae4eff95d83786" prot="public" virt="non-virtual"><scope>CActiveStormnode</scope><name>status</name></member>
      <member refid="class_c_active_stormnode_1aef2103b9e7fdc173e56dbb8f903e1f38" prot="public" virt="non-virtual"><scope>CActiveStormnode</scope><name>vin</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
