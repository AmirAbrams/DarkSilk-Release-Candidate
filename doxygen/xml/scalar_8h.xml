<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.9.1">
  <compounddef id="scalar_8h" kind="file" language="C++">
    <compoundname>scalar.h</compoundname>
    <includes refid="num_8h" local="yes">num.h</includes>
    <includedby refid="scalar__impl_8h" local="yes">/home/dev/ds-160209/src/secp256k1/src/scalar_impl.h</includedby>
    <includedby refid="ecmult__const__impl_8h" local="yes">/home/dev/ds-160209/src/secp256k1/src/ecmult_const_impl.h</includedby>
    <includedby refid="ecmult__const_8h" local="yes">/home/dev/ds-160209/src/secp256k1/src/ecmult_const.h</includedby>
    <includedby refid="ecmult__impl_8h" local="yes">/home/dev/ds-160209/src/secp256k1/src/ecmult_impl.h</includedby>
    <includedby refid="ecmult__gen__impl_8h" local="yes">/home/dev/ds-160209/src/secp256k1/src/ecmult_gen_impl.h</includedby>
    <includedby refid="ecmult__gen_8h" local="yes">/home/dev/ds-160209/src/secp256k1/src/ecmult_gen.h</includedby>
    <includedby refid="ecdsa__impl_8h" local="yes">/home/dev/ds-160209/src/secp256k1/src/ecdsa_impl.h</includedby>
    <includedby refid="ecdsa_8h" local="yes">/home/dev/ds-160209/src/secp256k1/src/ecdsa.h</includedby>
    <includedby refid="eckey_8h" local="yes">/home/dev/ds-160209/src/secp256k1/src/eckey.h</includedby>
    <includedby refid="eckey__impl_8h" local="yes">/home/dev/ds-160209/src/secp256k1/src/eckey_impl.h</includedby>
    <includedby refid="schnorr_8h" local="yes">/home/dev/ds-160209/src/secp256k1/src/modules/schnorr/schnorr.h</includedby>
    <incdepgraph>
      <node id="52078">
        <label>/home/dev/ds-160209/src/secp256k1/src/scalar.h</label>
        <link refid="scalar.h"/>
        <childnode refid="52079" relation="include">
        </childnode>
      </node>
      <node id="52079">
        <label>num.h</label>
        <link refid="num_8h"/>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="52080">
        <label>/home/dev/ds-160209/src/secp256k1/src/scalar.h</label>
        <link refid="scalar.h"/>
        <childnode refid="52081" relation="include">
        </childnode>
        <childnode refid="52086" relation="include">
        </childnode>
        <childnode refid="52088" relation="include">
        </childnode>
        <childnode refid="52089" relation="include">
        </childnode>
        <childnode refid="52090" relation="include">
        </childnode>
        <childnode refid="52091" relation="include">
        </childnode>
        <childnode refid="52092" relation="include">
        </childnode>
        <childnode refid="52097" relation="include">
        </childnode>
        <childnode refid="52093" relation="include">
        </childnode>
        <childnode refid="52094" relation="include">
        </childnode>
        <childnode refid="52098" relation="include">
        </childnode>
      </node>
      <node id="52089">
        <label>/home/dev/ds-160209/src/secp256k1/src/ecmult_impl.h</label>
        <link refid="ecmult__impl_8h"/>
        <childnode refid="52086" relation="include">
        </childnode>
        <childnode refid="52082" relation="include">
        </childnode>
        <childnode refid="52083" relation="include">
        </childnode>
      </node>
      <node id="52081">
        <label>/home/dev/ds-160209/src/secp256k1/src/scalar_impl.h</label>
        <link refid="scalar__impl_8h"/>
        <childnode refid="52082" relation="include">
        </childnode>
        <childnode refid="52083" relation="include">
        </childnode>
        <childnode refid="52085" relation="include">
        </childnode>
      </node>
      <node id="52098">
        <label>/home/dev/ds-160209/src/secp256k1/src/modules/schnorr/schnorr.h</label>
        <link refid="schnorr_8h"/>
        <childnode refid="52095" relation="include">
        </childnode>
      </node>
      <node id="52085">
        <label>/home/dev/ds-160209/src/secp256k1/src/gen_context.c</label>
        <link refid="gen__context_8c"/>
      </node>
      <node id="52084">
        <label>/home/dev/ds-160209/src/secp256k1/src/tests.c</label>
        <link refid="tests_8c"/>
      </node>
      <node id="52095">
        <label>/home/dev/ds-160209/src/secp256k1/src/modules/schnorr/schnorr_impl.h</label>
        <link refid="schnorr__impl_8h"/>
        <childnode refid="52096" relation="include">
        </childnode>
      </node>
      <node id="52096">
        <label>/home/dev/ds-160209/src/secp256k1/src/modules/schnorr/main_impl.h</label>
        <link refid="schnorr_2main__impl_8h"/>
      </node>
      <node id="52087">
        <label>/home/dev/ds-160209/src/secp256k1/src/modules/ecdh/main_impl.h</label>
        <link refid="ecdh_2main__impl_8h"/>
      </node>
      <node id="52083">
        <label>/home/dev/ds-160209/src/secp256k1/src/secp256k1.c</label>
        <link refid="secp256k1_8c"/>
        <childnode refid="52082" relation="include">
        </childnode>
        <childnode refid="52084" relation="include">
        </childnode>
      </node>
      <node id="52091">
        <label>/home/dev/ds-160209/src/secp256k1/src/ecmult_gen.h</label>
        <link refid="ecmult__gen_8h"/>
        <childnode refid="52090" relation="include">
        </childnode>
        <childnode refid="52092" relation="include">
        </childnode>
        <childnode refid="52093" relation="include">
        </childnode>
        <childnode refid="52094" relation="include">
        </childnode>
        <childnode refid="52095" relation="include">
        </childnode>
      </node>
      <node id="52094">
        <label>/home/dev/ds-160209/src/secp256k1/src/eckey_impl.h</label>
        <link refid="eckey__impl_8h"/>
        <childnode refid="52083" relation="include">
        </childnode>
      </node>
      <node id="52086">
        <label>/home/dev/ds-160209/src/secp256k1/src/ecmult_const_impl.h</label>
        <link refid="ecmult__const__impl_8h"/>
        <childnode refid="52082" relation="include">
        </childnode>
        <childnode refid="52083" relation="include">
        </childnode>
        <childnode refid="52087" relation="include">
        </childnode>
      </node>
      <node id="52097">
        <label>/home/dev/ds-160209/src/secp256k1/src/ecdsa.h</label>
        <link refid="ecdsa_8h"/>
        <childnode refid="52092" relation="include">
        </childnode>
      </node>
      <node id="52088">
        <label>/home/dev/ds-160209/src/secp256k1/src/ecmult_const.h</label>
        <link refid="ecmult__const_8h"/>
        <childnode refid="52086" relation="include">
        </childnode>
      </node>
      <node id="52093">
        <label>/home/dev/ds-160209/src/secp256k1/src/eckey.h</label>
        <link refid="eckey_8h"/>
        <childnode refid="52094" relation="include">
        </childnode>
      </node>
      <node id="52082">
        <label>/home/dev/ds-160209/src/secp256k1/src/bench_internal.c</label>
        <link refid="bench__internal_8c"/>
      </node>
      <node id="52090">
        <label>/home/dev/ds-160209/src/secp256k1/src/ecmult_gen_impl.h</label>
        <link refid="ecmult__gen__impl_8h"/>
        <childnode refid="52083" relation="include">
        </childnode>
        <childnode refid="52085" relation="include">
        </childnode>
      </node>
      <node id="52092">
        <label>/home/dev/ds-160209/src/secp256k1/src/ecdsa_impl.h</label>
        <link refid="ecdsa__impl_8h"/>
        <childnode refid="52083" relation="include">
        </childnode>
      </node>
    </invincdepgraph>
      <sectiondef kind="func">
      <memberdef kind="function" id="scalar_8h_1ad8fb9bc2a828903963bf37806d8edd11" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void secp256k1_scalar_clear</definition>
        <argsstring>(secp256k1_scalar *r)</argsstring>
        <name>secp256k1_scalar_clear</name>
        <param>
          <type><ref refid="structsecp256k1__scalar" kindref="compound">secp256k1_scalar</ref> *</type>
          <declname>r</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Clear a scalar to prevent the leak of sensitive data. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/secp256k1/src/scalar.h" line="25" column="1"/>
      </memberdef>
      <memberdef kind="function" id="scalar_8h_1a70d7af05e9c9a579ed5cb20d9f22eeba" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>unsigned int</type>
        <definition>static unsigned int secp256k1_scalar_get_bits</definition>
        <argsstring>(const secp256k1_scalar *a, unsigned int offset, unsigned int count)</argsstring>
        <name>secp256k1_scalar_get_bits</name>
        <param>
          <type>const <ref refid="structsecp256k1__scalar" kindref="compound">secp256k1_scalar</ref> *</type>
          <declname>a</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>offset</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>count</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Access bits from a scalar. All requested bits must belong to the same 32-bit limb. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/secp256k1/src/scalar.h" line="28" column="1"/>
      </memberdef>
      <memberdef kind="function" id="scalar_8h_1abede7dbe3b5a38a51b388d46f4c5b52d" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>unsigned int</type>
        <definition>static unsigned int secp256k1_scalar_get_bits_var</definition>
        <argsstring>(const secp256k1_scalar *a, unsigned int offset, unsigned int count)</argsstring>
        <name>secp256k1_scalar_get_bits_var</name>
        <param>
          <type>const <ref refid="structsecp256k1__scalar" kindref="compound">secp256k1_scalar</ref> *</type>
          <declname>a</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>offset</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>count</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Access bits from a scalar. Not constant time. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/secp256k1/src/scalar.h" line="31" column="1"/>
      </memberdef>
      <memberdef kind="function" id="scalar_8h_1a25cc2d45ae1d1765d07c3313cdf46fa0" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void secp256k1_scalar_set_b32</definition>
        <argsstring>(secp256k1_scalar *r, const unsigned char *bin, int *overflow)</argsstring>
        <name>secp256k1_scalar_set_b32</name>
        <param>
          <type><ref refid="structsecp256k1__scalar" kindref="compound">secp256k1_scalar</ref> *</type>
          <declname>r</declname>
        </param>
        <param>
          <type>const unsigned char *</type>
          <declname>bin</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>overflow</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Set a scalar from a big endian byte array. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/secp256k1/src/scalar.h" line="34" column="1"/>
      </memberdef>
      <memberdef kind="function" id="scalar_8h_1a41cb11650e4dea0fe7ac5b59b9fce9dc" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void secp256k1_scalar_set_int</definition>
        <argsstring>(secp256k1_scalar *r, unsigned int v)</argsstring>
        <name>secp256k1_scalar_set_int</name>
        <param>
          <type><ref refid="structsecp256k1__scalar" kindref="compound">secp256k1_scalar</ref> *</type>
          <declname>r</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Set a scalar to an unsigned integer. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/secp256k1/src/scalar.h" line="37" column="1"/>
      </memberdef>
      <memberdef kind="function" id="scalar_8h_1a4fa08f8af5a23f505b44c9ef1bec1831" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void secp256k1_scalar_get_b32</definition>
        <argsstring>(unsigned char *bin, const secp256k1_scalar *a)</argsstring>
        <name>secp256k1_scalar_get_b32</name>
        <param>
          <type>unsigned char *</type>
          <declname>bin</declname>
        </param>
        <param>
          <type>const <ref refid="structsecp256k1__scalar" kindref="compound">secp256k1_scalar</ref> *</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Convert a scalar to a byte array. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/secp256k1/src/scalar.h" line="40" column="1"/>
      </memberdef>
      <memberdef kind="function" id="scalar_8h_1a83257652850276cd74c7cdd1f9444d9c" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>static int secp256k1_scalar_add</definition>
        <argsstring>(secp256k1_scalar *r, const secp256k1_scalar *a, const secp256k1_scalar *b)</argsstring>
        <name>secp256k1_scalar_add</name>
        <param>
          <type><ref refid="structsecp256k1__scalar" kindref="compound">secp256k1_scalar</ref> *</type>
          <declname>r</declname>
        </param>
        <param>
          <type>const <ref refid="structsecp256k1__scalar" kindref="compound">secp256k1_scalar</ref> *</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="structsecp256k1__scalar" kindref="compound">secp256k1_scalar</ref> *</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Add two scalars together (modulo the group order). Returns whether it overflowed. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/secp256k1/src/scalar.h" line="43" column="1"/>
      </memberdef>
      <memberdef kind="function" id="scalar_8h_1ad6596a0249548deb678f0b630204254f" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void secp256k1_scalar_cadd_bit</definition>
        <argsstring>(secp256k1_scalar *r, unsigned int bit, int flag)</argsstring>
        <name>secp256k1_scalar_cadd_bit</name>
        <param>
          <type><ref refid="structsecp256k1__scalar" kindref="compound">secp256k1_scalar</ref> *</type>
          <declname>r</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>bit</declname>
        </param>
        <param>
          <type>int</type>
          <declname>flag</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Conditionally add a power of two to a scalar. The result is not allowed to overflow. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/secp256k1/src/scalar.h" line="46" column="1"/>
      </memberdef>
      <memberdef kind="function" id="scalar_8h_1a89db15f705c8eafcd10c08181523acd0" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void secp256k1_scalar_mul</definition>
        <argsstring>(secp256k1_scalar *r, const secp256k1_scalar *a, const secp256k1_scalar *b)</argsstring>
        <name>secp256k1_scalar_mul</name>
        <param>
          <type><ref refid="structsecp256k1__scalar" kindref="compound">secp256k1_scalar</ref> *</type>
          <declname>r</declname>
        </param>
        <param>
          <type>const <ref refid="structsecp256k1__scalar" kindref="compound">secp256k1_scalar</ref> *</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="structsecp256k1__scalar" kindref="compound">secp256k1_scalar</ref> *</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Multiply two scalars (modulo the group order). </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/secp256k1/src/scalar.h" line="49" column="1"/>
      </memberdef>
      <memberdef kind="function" id="scalar_8h_1ae9fcdf1db22cb93c2a2f06b0a9c957d3" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>static int secp256k1_scalar_shr_int</definition>
        <argsstring>(secp256k1_scalar *r, int n)</argsstring>
        <name>secp256k1_scalar_shr_int</name>
        <param>
          <type><ref refid="structsecp256k1__scalar" kindref="compound">secp256k1_scalar</ref> *</type>
          <declname>r</declname>
        </param>
        <param>
          <type>int</type>
          <declname>n</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Shift a scalar right by some amount strictly between 0 and 16, returning the low bits that were shifted off </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/secp256k1/src/scalar.h" line="53" column="1"/>
      </memberdef>
      <memberdef kind="function" id="scalar_8h_1a2e65618baa17c59e89149a9f7e632f69" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void secp256k1_scalar_sqr</definition>
        <argsstring>(secp256k1_scalar *r, const secp256k1_scalar *a)</argsstring>
        <name>secp256k1_scalar_sqr</name>
        <param>
          <type><ref refid="structsecp256k1__scalar" kindref="compound">secp256k1_scalar</ref> *</type>
          <declname>r</declname>
        </param>
        <param>
          <type>const <ref refid="structsecp256k1__scalar" kindref="compound">secp256k1_scalar</ref> *</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Compute the square of a scalar (modulo the group order). </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/secp256k1/src/scalar.h" line="56" column="1"/>
      </memberdef>
      <memberdef kind="function" id="scalar_8h_1ac048cded7c9731249ada44d489a258d5" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void secp256k1_scalar_inverse</definition>
        <argsstring>(secp256k1_scalar *r, const secp256k1_scalar *a)</argsstring>
        <name>secp256k1_scalar_inverse</name>
        <param>
          <type><ref refid="structsecp256k1__scalar" kindref="compound">secp256k1_scalar</ref> *</type>
          <declname>r</declname>
        </param>
        <param>
          <type>const <ref refid="structsecp256k1__scalar" kindref="compound">secp256k1_scalar</ref> *</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Compute the inverse of a scalar (modulo the group order). </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/secp256k1/src/scalar.h" line="59" column="1"/>
      </memberdef>
      <memberdef kind="function" id="scalar_8h_1a58e84d0cabe81139df5c71759f833855" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void secp256k1_scalar_inverse_var</definition>
        <argsstring>(secp256k1_scalar *r, const secp256k1_scalar *a)</argsstring>
        <name>secp256k1_scalar_inverse_var</name>
        <param>
          <type><ref refid="structsecp256k1__scalar" kindref="compound">secp256k1_scalar</ref> *</type>
          <declname>r</declname>
        </param>
        <param>
          <type>const <ref refid="structsecp256k1__scalar" kindref="compound">secp256k1_scalar</ref> *</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Compute the inverse of a scalar (modulo the group order), without constant-time guarantee. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/secp256k1/src/scalar.h" line="62" column="1"/>
      </memberdef>
      <memberdef kind="function" id="scalar_8h_1aa3f1c1d4536adf835ee256878c222968" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void secp256k1_scalar_negate</definition>
        <argsstring>(secp256k1_scalar *r, const secp256k1_scalar *a)</argsstring>
        <name>secp256k1_scalar_negate</name>
        <param>
          <type><ref refid="structsecp256k1__scalar" kindref="compound">secp256k1_scalar</ref> *</type>
          <declname>r</declname>
        </param>
        <param>
          <type>const <ref refid="structsecp256k1__scalar" kindref="compound">secp256k1_scalar</ref> *</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Compute the complement of a scalar (modulo the group order). </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/secp256k1/src/scalar.h" line="65" column="1"/>
      </memberdef>
      <memberdef kind="function" id="scalar_8h_1a3f0ac84fe49a1c1f51212582a2c149d4" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>static int secp256k1_scalar_is_zero</definition>
        <argsstring>(const secp256k1_scalar *a)</argsstring>
        <name>secp256k1_scalar_is_zero</name>
        <param>
          <type>const <ref refid="structsecp256k1__scalar" kindref="compound">secp256k1_scalar</ref> *</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Check whether a scalar equals zero. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/secp256k1/src/scalar.h" line="68" column="1"/>
      </memberdef>
      <memberdef kind="function" id="scalar_8h_1aa1118b3273d3c9d15541f29373b93e97" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>static int secp256k1_scalar_is_one</definition>
        <argsstring>(const secp256k1_scalar *a)</argsstring>
        <name>secp256k1_scalar_is_one</name>
        <param>
          <type>const <ref refid="structsecp256k1__scalar" kindref="compound">secp256k1_scalar</ref> *</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Check whether a scalar equals one. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/secp256k1/src/scalar.h" line="71" column="1"/>
      </memberdef>
      <memberdef kind="function" id="scalar_8h_1a3eb65cf9bfad7c430cbb3dc26d494a95" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>static int secp256k1_scalar_is_even</definition>
        <argsstring>(const secp256k1_scalar *a)</argsstring>
        <name>secp256k1_scalar_is_even</name>
        <param>
          <type>const <ref refid="structsecp256k1__scalar" kindref="compound">secp256k1_scalar</ref> *</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Check whether a scalar, considered as an nonnegative integer, is even. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/secp256k1/src/scalar.h" line="74" column="1"/>
      </memberdef>
      <memberdef kind="function" id="scalar_8h_1aab66620cbbe49bec3c7c02f4a1219c05" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>static int secp256k1_scalar_is_high</definition>
        <argsstring>(const secp256k1_scalar *a)</argsstring>
        <name>secp256k1_scalar_is_high</name>
        <param>
          <type>const <ref refid="structsecp256k1__scalar" kindref="compound">secp256k1_scalar</ref> *</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Check whether a scalar is higher than the group order divided by 2. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/secp256k1/src/scalar.h" line="77" column="1"/>
      </memberdef>
      <memberdef kind="function" id="scalar_8h_1a520b78be2bca742daa8d5efa5c343291" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>static int secp256k1_scalar_cond_negate</definition>
        <argsstring>(secp256k1_scalar *a, int flag)</argsstring>
        <name>secp256k1_scalar_cond_negate</name>
        <param>
          <type><ref refid="structsecp256k1__scalar" kindref="compound">secp256k1_scalar</ref> *</type>
          <declname>a</declname>
        </param>
        <param>
          <type>int</type>
          <declname>flag</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Conditionally negate a number, in constant time. Returns -1 if the number was negated, 1 otherwise </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/secp256k1/src/scalar.h" line="81" column="1"/>
      </memberdef>
      <memberdef kind="function" id="scalar_8h_1a75c8cc0159d53eefaf86a296ba882420" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void secp256k1_scalar_get_num</definition>
        <argsstring>(secp256k1_num *r, const secp256k1_scalar *a)</argsstring>
        <name>secp256k1_scalar_get_num</name>
        <param>
          <type><ref refid="structsecp256k1__num" kindref="compound">secp256k1_num</ref> *</type>
          <declname>r</declname>
        </param>
        <param>
          <type>const <ref refid="structsecp256k1__scalar" kindref="compound">secp256k1_scalar</ref> *</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Convert a scalar to a number. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/secp256k1/src/scalar.h" line="85" column="1"/>
      </memberdef>
      <memberdef kind="function" id="scalar_8h_1a54e25150a9e06c01bcc4518b68aa288c" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void secp256k1_scalar_order_get_num</definition>
        <argsstring>(secp256k1_num *r)</argsstring>
        <name>secp256k1_scalar_order_get_num</name>
        <param>
          <type><ref refid="structsecp256k1__num" kindref="compound">secp256k1_num</ref> *</type>
          <declname>r</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get the order of the group as a number. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/secp256k1/src/scalar.h" line="88" column="1"/>
      </memberdef>
      <memberdef kind="function" id="scalar_8h_1a4ba37c67745038e5ff23ca66f051837d" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>static int secp256k1_scalar_eq</definition>
        <argsstring>(const secp256k1_scalar *a, const secp256k1_scalar *b)</argsstring>
        <name>secp256k1_scalar_eq</name>
        <param>
          <type>const <ref refid="structsecp256k1__scalar" kindref="compound">secp256k1_scalar</ref> *</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="structsecp256k1__scalar" kindref="compound">secp256k1_scalar</ref> *</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Compare two scalars. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/secp256k1/src/scalar.h" line="92" column="1"/>
      </memberdef>
      <memberdef kind="function" id="scalar_8h_1a8d19fb29bd4c9d863572eba08e97af20" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void secp256k1_scalar_mul_shift_var</definition>
        <argsstring>(secp256k1_scalar *r, const secp256k1_scalar *a, const secp256k1_scalar *b, unsigned int shift)</argsstring>
        <name>secp256k1_scalar_mul_shift_var</name>
        <param>
          <type><ref refid="structsecp256k1__scalar" kindref="compound">secp256k1_scalar</ref> *</type>
          <declname>r</declname>
        </param>
        <param>
          <type>const <ref refid="structsecp256k1__scalar" kindref="compound">secp256k1_scalar</ref> *</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="structsecp256k1__scalar" kindref="compound">secp256k1_scalar</ref> *</type>
          <declname>b</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>shift</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Multiply a and b (without taking the modulus!), divide by 2**shift, and round to the nearest integer. Shift must be at least 256. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/secp256k1/src/scalar.h" line="102" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/**********************************************************************</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/>*<sp/>Copyright<sp/>(c)<sp/>2014<sp/>Pieter<sp/>Wuille<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*<sp/>Distributed<sp/>under<sp/>the<sp/>MIT<sp/>software<sp/>license,<sp/>see<sp/>the<sp/>accompanying<sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*<sp/>file<sp/>COPYING<sp/>or<sp/>http://www.opensource.org/licenses/mit-license.php.*</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/>**********************************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>_SECP256K1_SCALAR_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>_SECP256K1_SCALAR_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="num_8h" kindref="compound">num.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined<sp/>HAVE_CONFIG_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="libsecp256k1-config_8h" kindref="compound">libsecp256k1-config.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(USE_SCALAR_4X64)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="scalar__4x64_8h" kindref="compound">scalar_4x64.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="preprocessor">#elif<sp/>defined(USE_SCALAR_8X32)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="scalar__8x32_8h" kindref="compound">scalar_8x32.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="preprocessor">#error<sp/>&quot;Please<sp/>select<sp/>scalar<sp/>implementation&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>secp256k1_scalar_clear(<ref refid="structsecp256k1__scalar" kindref="compound">secp256k1_scalar</ref><sp/>*r);</highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>secp256k1_scalar_get_bits(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structsecp256k1__scalar" kindref="compound">secp256k1_scalar</ref><sp/>*a,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>offset,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>count);</highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>secp256k1_scalar_get_bits_var(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structsecp256k1__scalar" kindref="compound">secp256k1_scalar</ref><sp/>*a,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>offset,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>count);</highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>secp256k1_scalar_set_b32(<ref refid="structsecp256k1__scalar" kindref="compound">secp256k1_scalar</ref><sp/>*r,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*bin,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*overflow);</highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>secp256k1_scalar_set_int(<ref refid="structsecp256k1__scalar" kindref="compound">secp256k1_scalar</ref><sp/>*r,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>v);</highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>secp256k1_scalar_get_b32(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*bin,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structsecp256k1__scalar" kindref="compound">secp256k1_scalar</ref>*<sp/>a);</highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>secp256k1_scalar_add(<ref refid="structsecp256k1__scalar" kindref="compound">secp256k1_scalar</ref><sp/>*r,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structsecp256k1__scalar" kindref="compound">secp256k1_scalar</ref><sp/>*a,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structsecp256k1__scalar" kindref="compound">secp256k1_scalar</ref><sp/>*b);</highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>secp256k1_scalar_cadd_bit(<ref refid="structsecp256k1__scalar" kindref="compound">secp256k1_scalar</ref><sp/>*r,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>bit,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>flag);</highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>secp256k1_scalar_mul(<ref refid="structsecp256k1__scalar" kindref="compound">secp256k1_scalar</ref><sp/>*r,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structsecp256k1__scalar" kindref="compound">secp256k1_scalar</ref><sp/>*a,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structsecp256k1__scalar" kindref="compound">secp256k1_scalar</ref><sp/>*b);</highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>secp256k1_scalar_shr_int(<ref refid="structsecp256k1__scalar" kindref="compound">secp256k1_scalar</ref><sp/>*r,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n);</highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>secp256k1_scalar_sqr(<ref refid="structsecp256k1__scalar" kindref="compound">secp256k1_scalar</ref><sp/>*r,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structsecp256k1__scalar" kindref="compound">secp256k1_scalar</ref><sp/>*a);</highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>secp256k1_scalar_inverse(<ref refid="structsecp256k1__scalar" kindref="compound">secp256k1_scalar</ref><sp/>*r,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structsecp256k1__scalar" kindref="compound">secp256k1_scalar</ref><sp/>*a);</highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>secp256k1_scalar_inverse_var(<ref refid="structsecp256k1__scalar" kindref="compound">secp256k1_scalar</ref><sp/>*r,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structsecp256k1__scalar" kindref="compound">secp256k1_scalar</ref><sp/>*a);</highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight></codeline>
<codeline lineno="65"><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>secp256k1_scalar_negate(<ref refid="structsecp256k1__scalar" kindref="compound">secp256k1_scalar</ref><sp/>*r,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structsecp256k1__scalar" kindref="compound">secp256k1_scalar</ref><sp/>*a);</highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight></codeline>
<codeline lineno="68"><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>secp256k1_scalar_is_zero(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structsecp256k1__scalar" kindref="compound">secp256k1_scalar</ref><sp/>*a);</highlight></codeline>
<codeline lineno="69"><highlight class="normal"></highlight></codeline>
<codeline lineno="71"><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>secp256k1_scalar_is_one(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structsecp256k1__scalar" kindref="compound">secp256k1_scalar</ref><sp/>*a);</highlight></codeline>
<codeline lineno="72"><highlight class="normal"></highlight></codeline>
<codeline lineno="74"><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>secp256k1_scalar_is_even(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structsecp256k1__scalar" kindref="compound">secp256k1_scalar</ref><sp/>*a);</highlight></codeline>
<codeline lineno="75"><highlight class="normal"></highlight></codeline>
<codeline lineno="77"><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>secp256k1_scalar_is_high(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structsecp256k1__scalar" kindref="compound">secp256k1_scalar</ref><sp/>*a);</highlight></codeline>
<codeline lineno="78"><highlight class="normal"></highlight></codeline>
<codeline lineno="81"><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>secp256k1_scalar_cond_negate(<ref refid="structsecp256k1__scalar" kindref="compound">secp256k1_scalar</ref><sp/>*a,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>flag);</highlight></codeline>
<codeline lineno="82"><highlight class="normal"></highlight></codeline>
<codeline lineno="83"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>USE_NUM_NONE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="84"><highlight class="normal"></highlight></codeline>
<codeline lineno="85"><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>secp256k1_scalar_get_num(<ref refid="structsecp256k1__num" kindref="compound">secp256k1_num</ref><sp/>*r,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structsecp256k1__scalar" kindref="compound">secp256k1_scalar</ref><sp/>*a);</highlight></codeline>
<codeline lineno="86"><highlight class="normal"></highlight></codeline>
<codeline lineno="88"><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>secp256k1_scalar_order_get_num(<ref refid="structsecp256k1__num" kindref="compound">secp256k1_num</ref><sp/>*r);</highlight></codeline>
<codeline lineno="89"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="90"><highlight class="normal"></highlight></codeline>
<codeline lineno="92"><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>secp256k1_scalar_eq(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structsecp256k1__scalar" kindref="compound">secp256k1_scalar</ref><sp/>*a,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structsecp256k1__scalar" kindref="compound">secp256k1_scalar</ref><sp/>*b);</highlight></codeline>
<codeline lineno="93"><highlight class="normal"></highlight></codeline>
<codeline lineno="94"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>USE_ENDOMORPHISM</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="95"><highlight class="normal"></highlight></codeline>
<codeline lineno="96"><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>secp256k1_scalar_split_128(<ref refid="structsecp256k1__scalar" kindref="compound">secp256k1_scalar</ref><sp/>*r1,<sp/><ref refid="structsecp256k1__scalar" kindref="compound">secp256k1_scalar</ref><sp/>*r2,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structsecp256k1__scalar" kindref="compound">secp256k1_scalar</ref><sp/>*a);</highlight></codeline>
<codeline lineno="98"><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>secp256k1_scalar_split_lambda(<ref refid="structsecp256k1__scalar" kindref="compound">secp256k1_scalar</ref><sp/>*r1,<sp/><ref refid="structsecp256k1__scalar" kindref="compound">secp256k1_scalar</ref><sp/>*r2,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structsecp256k1__scalar" kindref="compound">secp256k1_scalar</ref><sp/>*a);</highlight></codeline>
<codeline lineno="99"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="100"><highlight class="normal"></highlight></codeline>
<codeline lineno="102"><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>secp256k1_scalar_mul_shift_var(<ref refid="structsecp256k1__scalar" kindref="compound">secp256k1_scalar</ref><sp/>*r,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structsecp256k1__scalar" kindref="compound">secp256k1_scalar</ref><sp/>*a,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structsecp256k1__scalar" kindref="compound">secp256k1_scalar</ref><sp/>*b,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>shift);</highlight></codeline>
<codeline lineno="103"><highlight class="normal"></highlight></codeline>
<codeline lineno="104"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
    </programlisting>
    <location file="/home/dev/ds-160209/src/secp256k1/src/scalar.h"/>
  </compounddef>
</doxygen>
