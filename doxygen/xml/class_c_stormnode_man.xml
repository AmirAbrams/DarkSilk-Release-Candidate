<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.9.1">
  <compounddef id="class_c_stormnode_man" kind="class" language="C++" prot="public">
    <compoundname>CStormnodeMan</compoundname>
    <includes refid="stormnodeman_8h" local="no">stormnodeman.h</includes>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="class_c_stormnode_man_1af95a3624b7cb77e13ae08c809dc0e108" prot="private" static="no" mutable="yes">
        <type><ref refid="sync_8h_1a37a4692b2d517f2843655ca11af7668a" kindref="member">CCriticalSection</ref></type>
        <definition>CCriticalSection CStormnodeMan::cs</definition>
        <argsstring></argsstring>
        <name>cs</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/stormnodeman.h" line="53" column="1" bodyfile="/home/dev/ds-160209/src/stormnodeman.h" bodystart="53" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_c_stormnode_man_1ae3dcad3baeba1ded45b105ca7ba76588" prot="private" static="no" mutable="yes">
        <type><ref refid="sync_8h_1a37a4692b2d517f2843655ca11af7668a" kindref="member">CCriticalSection</ref></type>
        <definition>CCriticalSection CStormnodeMan::cs_process_message</definition>
        <argsstring></argsstring>
        <name>cs_process_message</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/stormnodeman.h" line="56" column="1" bodyfile="/home/dev/ds-160209/src/stormnodeman.h" bodystart="56" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_c_stormnode_man_1acb373fe7d56e3b1ac5d31d2d7e96e35c" prot="private" static="no" mutable="no">
        <type>std::vector&lt; <ref refid="class_c_stormnode" kindref="compound">CStormnode</ref> &gt;</type>
        <definition>std::vector&lt;CStormnode&gt; CStormnodeMan::vStormnodes</definition>
        <argsstring></argsstring>
        <name>vStormnodes</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/stormnodeman.h" line="59" column="1" bodyfile="/home/dev/ds-160209/src/stormnodeman.h" bodystart="59" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_c_stormnode_man_1ad4f1f1027522a5fa7d8e35714b90c3d3" prot="private" static="no" mutable="no">
        <type>std::map&lt; <ref refid="class_c_net_addr" kindref="compound">CNetAddr</ref>, <ref refid="stdint_8h_1adec1df1b8b51cb32b77e5b86fff46471" kindref="member">int64_t</ref> &gt;</type>
        <definition>std::map&lt;CNetAddr, int64_t&gt; CStormnodeMan::mAskedUsForStormnodeList</definition>
        <argsstring></argsstring>
        <name>mAskedUsForStormnodeList</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/stormnodeman.h" line="61" column="1" bodyfile="/home/dev/ds-160209/src/stormnodeman.h" bodystart="61" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_c_stormnode_man_1a2b23ea4d62ceb28a7b4d859180994754" prot="private" static="no" mutable="no">
        <type>std::map&lt; <ref refid="class_c_net_addr" kindref="compound">CNetAddr</ref>, <ref refid="stdint_8h_1adec1df1b8b51cb32b77e5b86fff46471" kindref="member">int64_t</ref> &gt;</type>
        <definition>std::map&lt;CNetAddr, int64_t&gt; CStormnodeMan::mWeAskedForStormnodeList</definition>
        <argsstring></argsstring>
        <name>mWeAskedForStormnodeList</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/stormnodeman.h" line="63" column="1" bodyfile="/home/dev/ds-160209/src/stormnodeman.h" bodystart="63" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_c_stormnode_man_1a8068dc932793e4c2eaf4682706c04485" prot="private" static="no" mutable="no">
        <type>std::map&lt; <ref refid="class_c_out_point" kindref="compound">COutPoint</ref>, <ref refid="stdint_8h_1adec1df1b8b51cb32b77e5b86fff46471" kindref="member">int64_t</ref> &gt;</type>
        <definition>std::map&lt;COutPoint, int64_t&gt; CStormnodeMan::mWeAskedForStormnodeListEntry</definition>
        <argsstring></argsstring>
        <name>mWeAskedForStormnodeListEntry</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/stormnodeman.h" line="65" column="1" bodyfile="/home/dev/ds-160209/src/stormnodeman.h" bodystart="65" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-attrib">
      <memberdef kind="variable" id="class_c_stormnode_man_1a320b85dcbbc8f01a412c96b23bca5424" prot="public" static="no" mutable="no">
        <type>map&lt; <ref refid="classuint256" kindref="compound">uint256</ref>, <ref refid="class_c_stormnode_broadcast" kindref="compound">CStormnodeBroadcast</ref> &gt;</type>
        <definition>map&lt;uint256, CStormnodeBroadcast&gt; CStormnodeMan::mapSeenStormnodeBroadcast</definition>
        <argsstring></argsstring>
        <name>mapSeenStormnodeBroadcast</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/stormnodeman.h" line="69" column="1" bodyfile="/home/dev/ds-160209/src/stormnodeman.h" bodystart="69" bodyend="-1"/>
        <referencedby refid="class_c_stormnode_sync_1ad9e9ad7392c3fa1ec0af4b178b3c62c0" compoundref="stormnode-sync_8cpp" startline="82" endline="93">CStormnodeSync::AddedStormnodeList</referencedby>
        <referencedby refid="class_c_stormnode_broadcast_1ac182349ba784e20ce826eda23a239e3c" compoundref="stormnode_8cpp" startline="424" endline="507">CStormnodeBroadcast::CheckInputsAndAdd</referencedby>
        <referencedby refid="class_c_stormnode_ping_1af77ba52e9ff7531d09b61fefa372efa4" compoundref="stormnode_8cpp" startline="578" endline="664">CStormnodePing::CheckAndUpdate</referencedby>
        <referencedby refid="class_c_stormnode_man_1a6d8c3a832ea7d6f4780a59e2ae0441b8" compoundref="stormnodeman_8cpp" startline="255" endline="350">CheckAndRemove</referencedby>
        <referencedby refid="class_c_stormnode_man_1aef04ea77a6774bf594f205362ba8f91d" compoundref="stormnodeman_8cpp" startline="352" endline="362">Clear</referencedby>
        <referencedby refid="class_c_stormnode_man_1ae30d0b9b493e23c3d14ec48c77be7b6f" compoundref="stormnodeman_8cpp" startline="674" endline="803">ProcessMessage</referencedby>
      </memberdef>
      <memberdef kind="variable" id="class_c_stormnode_man_1a9d4e8bbd492630f16b61eec58b722a86" prot="public" static="no" mutable="no">
        <type>map&lt; <ref refid="classuint256" kindref="compound">uint256</ref>, <ref refid="class_c_stormnode_ping" kindref="compound">CStormnodePing</ref> &gt;</type>
        <definition>map&lt;uint256, CStormnodePing&gt; CStormnodeMan::mapSeenStormnodePing</definition>
        <argsstring></argsstring>
        <name>mapSeenStormnodePing</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/stormnodeman.h" line="71" column="1" bodyfile="/home/dev/ds-160209/src/stormnodeman.h" bodystart="71" bodyend="-1"/>
        <referencedby refid="class_c_stormnode_1a17bb6549af310bf95190260959a54c73" compoundref="stormnode_8cpp" startline="128" endline="145">CStormnode::UpdateFromNewBroadcast</referencedby>
        <referencedby refid="class_c_stormnode_man_1a6d8c3a832ea7d6f4780a59e2ae0441b8" compoundref="stormnodeman_8cpp" startline="255" endline="350">CheckAndRemove</referencedby>
        <referencedby refid="class_c_stormnode_man_1aef04ea77a6774bf594f205362ba8f91d" compoundref="stormnodeman_8cpp" startline="352" endline="362">Clear</referencedby>
        <referencedby refid="class_c_stormnode_man_1ae30d0b9b493e23c3d14ec48c77be7b6f" compoundref="stormnodeman_8cpp" startline="674" endline="803">ProcessMessage</referencedby>
      </memberdef>
      <memberdef kind="variable" id="class_c_stormnode_man_1a28c2a3dcb6098e416de7b1758b8d48da" prot="public" static="no" mutable="no">
        <type><ref refid="stdint_8h_1adec1df1b8b51cb32b77e5b86fff46471" kindref="member">int64_t</ref></type>
        <definition>int64_t CStormnodeMan::nSsqCount</definition>
        <argsstring></argsstring>
        <name>nSsqCount</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/stormnodeman.h" line="74" column="1" bodyfile="/home/dev/ds-160209/src/stormnodeman.h" bodystart="74" bodyend="-1"/>
        <referencedby refid="class_c_sandstorm_pool_1acf0b5b0e5703c88b7d3c9cb121ec6533" compoundref="sandstorm_8cpp" startline="38" endline="374">CSandstormPool::ProcessMessageSandstorm</referencedby>
        <referencedby refid="class_c_sandstorm_pool_1a459d1986058ad736773fa9857390ba96" compoundref="sandstorm_8cpp" startline="1353" endline="1625">CSandstormPool::DoAutomaticDenominating</referencedby>
        <referencedby refid="class_c_stormnode_man_1a72855bd5da6330e45c0964f6e1f9ade1" compoundref="stormnodeman_8cpp" startline="207" endline="209">CStormnodeMan</referencedby>
        <referencedby refid="class_c_stormnode_man_1aef04ea77a6774bf594f205362ba8f91d" compoundref="stormnodeman_8cpp" startline="352" endline="362">Clear</referencedby>
        <referencedby refid="class_c_stormnode_man_1a5c49bb4788cad79574d90fdca8ea7464" compoundref="stormnodeman_8cpp" startline="820" endline="831">ToString</referencedby>
      </memberdef>
      <memberdef kind="variable" id="class_c_stormnode_man_1a3a52c5c9b8e3d7da4cb5c649cb9a6ca3" prot="public" static="no" mutable="no">
        <type></type>
        <definition>CStormnodeMan::ADD_SERIALIZE_METHODS</definition>
        <argsstring></argsstring>
        <name>ADD_SERIALIZE_METHODS</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/stormnodeman.h" line="76" column="1" bodyfile="/home/dev/ds-160209/src/stormnodeman.h" bodystart="76" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="class_c_stormnode_man_1a2eb7be1ad46598e33b6c60248bc7b7e1" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Stream</type>
          </param>
          <param>
            <type>typename Operation</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void CStormnodeMan::SerializationOp</definition>
        <argsstring>(Stream &amp;s, Operation ser_action, int nType, int nVersion)</argsstring>
        <name>SerializationOp</name>
        <param>
          <type>Stream &amp;</type>
          <declname>s</declname>
        </param>
        <param>
          <type>Operation</type>
          <declname>ser_action</declname>
        </param>
        <param>
          <type>int</type>
          <declname>nType</declname>
        </param>
        <param>
          <type>int</type>
          <declname>nVersion</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/stormnodeman.h" line="79" column="1" bodyfile="/home/dev/ds-160209/src/stormnodeman.h" bodystart="79" bodyend="89"/>
        <references refid="sync_8h_1a911fe23f057c2fe5aad629162d6c99d0" compoundref="sync_8h" startline="159">LOCK</references>
        <references refid="serialize_8h_1a4d7fc7040e01003a01f367b8d90324f1" compoundref="serialize_8h" startline="101">READWRITE</references>
      </memberdef>
      <memberdef kind="function" id="class_c_stormnode_man_1a72855bd5da6330e45c0964f6e1f9ade1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>CStormnodeMan::CStormnodeMan</definition>
        <argsstring>()</argsstring>
        <name>CStormnodeMan</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/stormnodeman.h" line="91" column="1" bodyfile="/home/dev/ds-160209/src/stormnodeman.cpp" bodystart="207" bodyend="209"/>
        <references refid="class_c_stormnode_man_1a28c2a3dcb6098e416de7b1758b8d48da" compoundref="stormnodeman_8h" startline="74">nSsqCount</references>
      </memberdef>
      <memberdef kind="function" id="class_c_stormnode_man_1a0870cfe9ca46157c0e6ad9cf9f9cc1d7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>CStormnodeMan::CStormnodeMan</definition>
        <argsstring>(CStormnodeMan &amp;other)</argsstring>
        <name>CStormnodeMan</name>
        <param>
          <type><ref refid="class_c_stormnode_man" kindref="compound">CStormnodeMan</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/stormnodeman.h" line="92" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_c_stormnode_man_1aa4a3ed2fe6508a7922e7b7bd1cbf89c3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool CStormnodeMan::Add</definition>
        <argsstring>(CStormnode &amp;sn)</argsstring>
        <name>Add</name>
        <param>
          <type><ref refid="class_c_stormnode" kindref="compound">CStormnode</ref> &amp;</type>
          <declname>sn</declname>
        </param>
        <briefdescription>
<para>Add an entry. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/stormnodeman.h" line="95" column="1" bodyfile="/home/dev/ds-160209/src/stormnodeman.cpp" bodystart="211" bodyend="227"/>
        <references refid="sync_8h_1a911fe23f057c2fe5aad629162d6c99d0" compoundref="sync_8h" startline="159">LOCK</references>
        <references refid="class_c_stormnode_1a065cd7423a76fab999a3afdcc356ca91" compoundref="stormnode_8h" startline="242" endline="245">CStormnode::IsEnabled</references>
        <references refid="class_c_stormnode_1adb7b900b9608f2360b9cf97f7b836679" compoundref="stormnode_8h" startline="247" endline="250">CStormnode::IsPreEnabled</references>
        <references refid="class_c_stormnode_man_1a346025e5a78a04ddfa80252ea1433c72" compoundref="stormnodeman_8cpp" startline="400" endline="412">Find</references>
        <references refid="class_c_stormnode_1a62f5b0f436ca313afd612b07d687127f" compoundref="stormnode_8h" startline="122">CStormnode::vin</references>
        <references refid="class_c_stormnode_1a31e0681a92d1f4d0da756b680c695d66" compoundref="stormnode_8h" startline="123">CStormnode::addr</references>
        <references refid="class_c_service_1a336f9848fe9364e260c76499be0351a5" compoundref="netbase_8cpp" startline="1222" endline="1225">CService::ToString</references>
        <references refid="class_c_stormnode_man_1ad15cbc672903cce82c757118b74c267c" compoundref="stormnodeman_8h" startline="138" endline="138">size</references>
        <referencedby refid="class_c_stormnode_broadcast_1ac182349ba784e20ce826eda23a239e3c" compoundref="stormnode_8cpp" startline="424" endline="507">CStormnodeBroadcast::CheckInputsAndAdd</referencedby>
      </memberdef>
      <memberdef kind="function" id="class_c_stormnode_man_1a918a4ccb668808449809a77adc036301" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void CStormnodeMan::AskForSN</definition>
        <argsstring>(CNode *pnode, CTxIn &amp;vin)</argsstring>
        <name>AskForSN</name>
        <param>
          <type><ref refid="class_c_node" kindref="compound">CNode</ref> *</type>
          <declname>pnode</declname>
        </param>
        <param>
          <type><ref refid="class_c_tx_in" kindref="compound">CTxIn</ref> &amp;</type>
          <declname>vin</declname>
        </param>
        <briefdescription>
<para>Ask (source) node for snb. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/stormnodeman.h" line="98" column="1" bodyfile="/home/dev/ds-160209/src/stormnodeman.cpp" bodystart="229" bodyend="244"/>
        <references refid="class_c_tx_in_1aed9312051a25380cbd7f123408ab7c20" compoundref="transaction_8h" startline="97">CTxIn::prevout</references>
        <references refid="util_8cpp_1a46fac5fba8ba905b5f9acb364f5d8c6f" compoundref="util_8cpp" startline="1352" endline="1357">GetTime</references>
        <references refid="util_8h_1afc02c0a4258fedfb316be612bb659ba8" compoundref="util_8h" startline="158">LogPrintf</references>
        <references refid="class_c_tx_in_1aeac9b3abd4b2d81e9ec4401d1383778d" compoundref="transaction_8h" startline="147" endline="160">CTxIn::ToString</references>
        <references refid="class_c_node_1a204fda3d33404cb37698c085b1583ab2" compoundref="net_8h" startline="583" endline="595">CNode::PushMessage</references>
        <referencedby refid="instantx_8h_1a5d4434bfb70f64f95aa4de9286cbae94" compoundref="instantx_8cpp" startline="302" endline="394">ProcessConsensusVote</referencedby>
        <referencedby refid="class_c_budget_manager_1a3fc235d528e37ec1c66789f3bfed1878" compoundref="stormnode-budget_8cpp" startline="904" endline="1072">CBudgetManager::ProcessMessage</referencedby>
        <referencedby refid="class_c_stormnode_payments_1a8dc55316a297daad51a03d4cf7b37d06" compoundref="stormnode-payments_8cpp" startline="354" endline="430">CStormnodePayments::ProcessMessageStormnodePayments</referencedby>
        <referencedby refid="class_c_stormnode_payment_winner_1ae8e5cecfd1f95eed8fdd14f019360fa0" compoundref="stormnode-payments_8cpp" startline="644" endline="681">CStormnodePaymentWinner::IsValid</referencedby>
        <referencedby refid="class_c_stormnode_man_1ae30d0b9b493e23c3d14ec48c77be7b6f" compoundref="stormnodeman_8cpp" startline="674" endline="803">ProcessMessage</referencedby>
      </memberdef>
      <memberdef kind="function" id="class_c_stormnode_man_1a2e0f73af79892b3f86b7d1b07eaa85ce" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void CStormnodeMan::Check</definition>
        <argsstring>()</argsstring>
        <name>Check</name>
        <briefdescription>
<para>Check all Stormnodes. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/stormnodeman.h" line="101" column="1" bodyfile="/home/dev/ds-160209/src/stormnodeman.cpp" bodystart="246" bodyend="253"/>
        <references refid="sync_8h_1a911fe23f057c2fe5aad629162d6c99d0" compoundref="sync_8h" startline="159">LOCK</references>
        <references refid="class_c_stormnode_1af2e9fab8911feaeb300b56702d933a67" compoundref="stormnode_8cpp" startline="178" endline="226">CStormnode::Check</references>
        <referencedby refid="class_c_stormnode_man_1a6d8c3a832ea7d6f4780a59e2ae0441b8" compoundref="stormnodeman_8cpp" startline="255" endline="350">CheckAndRemove</referencedby>
      </memberdef>
      <memberdef kind="function" id="class_c_stormnode_man_1a6d8c3a832ea7d6f4780a59e2ae0441b8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void CStormnodeMan::CheckAndRemove</definition>
        <argsstring>(bool forceExpiredRemoval=false)</argsstring>
        <name>CheckAndRemove</name>
        <param>
          <type>bool</type>
          <declname>forceExpiredRemoval</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>Check all Stormnodes and remove inactive. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/stormnodeman.h" line="104" column="1" bodyfile="/home/dev/ds-160209/src/stormnodeman.cpp" bodystart="255" bodyend="350"/>
        <references refid="class_c_stormnode_man_1a2e0f73af79892b3f86b7d1b07eaa85ce" compoundref="stormnodeman_8cpp" startline="246" endline="253">Check</references>
        <references refid="sync_8h_1a911fe23f057c2fe5aad629162d6c99d0" compoundref="sync_8h" startline="159">LOCK</references>
        <references refid="class_c_stormnode_1a8c9a83b0ce70988102d71ecfabe99aa0a89fa3f4b7441a2d2add5334396a88b06" compoundref="stormnode_8h" startline="118">CStormnode::STORMNODE_REMOVE</references>
        <references refid="class_c_stormnode_1a8c9a83b0ce70988102d71ecfabe99aa0abe760cfa737f943c06d449afc2b03f1d" compoundref="stormnode_8h" startline="117">CStormnode::STORMNODE_VIN_SPENT</references>
        <references refid="class_c_stormnode_1a8c9a83b0ce70988102d71ecfabe99aa0ab3e35c4e3e07236ee4bdd2fc0cc11f99" compoundref="stormnode_8h" startline="116">CStormnode::STORMNODE_EXPIRED</references>
        <references refid="stormnode-payments_8cpp_1a1d528b1b067a2f669dfd90c513a97116" compoundref="stormnode-payments_8cpp" startline="18">stormnodePayments</references>
        <references refid="class_c_stormnode_payments_1a98392b86e945308c9c66f1cd4942a220" compoundref="stormnode-payments_8cpp" startline="348" endline="352">CStormnodePayments::GetMinStormnodePaymentsProto</references>
        <references refid="class_c_stormnode_man_1ad15cbc672903cce82c757118b74c267c" compoundref="stormnodeman_8h" startline="138" endline="138">size</references>
        <references refid="class_c_stormnode_man_1a320b85dcbbc8f01a412c96b23bca5424" compoundref="stormnodeman_8h" startline="69">mapSeenStormnodeBroadcast</references>
        <references refid="stormnode-sync_8cpp_1a4233fda53cfb60fd6ba208d981ac3fe7" compoundref="stormnode-sync_8cpp" startline="15">stormnodeSync</references>
        <references refid="class_c_stormnode_sync_1ab5874fbd02e921572983d1530cc7d69e" compoundref="stormnode-sync_8h" startline="34">CStormnodeSync::mapSeenSyncSNB</references>
        <references refid="util_8cpp_1a46fac5fba8ba905b5f9acb364f5d8c6f" compoundref="util_8cpp" startline="1352" endline="1357">GetTime</references>
        <references refid="class_c_stormnode_man_1a9d4e8bbd492630f16b61eec58b722a86" compoundref="stormnodeman_8h" startline="71">mapSeenStormnodePing</references>
        <referencedby refid="init_8h_1a1a4c1bfbf6ba1db77e988b89b9cadfd3" compoundref="init_8cpp" startline="375" endline="1285">AppInit2</referencedby>
        <referencedby refid="sandstorm_8h_1ac661e702905cd5093cb237555ba5c1c0" compoundref="sandstorm_8cpp" startline="2196" endline="2239">ThreadCheckSandStormPool</referencedby>
        <referencedby refid="class_c_stormnode_d_b_1a574f76256d8032a4c4e437d800d3795b" compoundref="stormnodeman_8cpp" startline="91" endline="176">CStormnodeDB::Read</referencedby>
      </memberdef>
      <memberdef kind="function" id="class_c_stormnode_man_1aef04ea77a6774bf594f205362ba8f91d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void CStormnodeMan::Clear</definition>
        <argsstring>()</argsstring>
        <name>Clear</name>
        <briefdescription>
<para>Clear Stormnode vector. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/stormnodeman.h" line="107" column="1" bodyfile="/home/dev/ds-160209/src/stormnodeman.cpp" bodystart="352" bodyend="362"/>
        <references refid="sync_8h_1a911fe23f057c2fe5aad629162d6c99d0" compoundref="sync_8h" startline="159">LOCK</references>
        <references refid="class_c_stormnode_man_1a320b85dcbbc8f01a412c96b23bca5424" compoundref="stormnodeman_8h" startline="69">mapSeenStormnodeBroadcast</references>
        <references refid="class_c_stormnode_man_1a9d4e8bbd492630f16b61eec58b722a86" compoundref="stormnodeman_8h" startline="71">mapSeenStormnodePing</references>
        <references refid="class_c_stormnode_man_1a28c2a3dcb6098e416de7b1758b8d48da" compoundref="stormnodeman_8h" startline="74">nSsqCount</references>
        <referencedby refid="class_c_stormnode_d_b_1a574f76256d8032a4c4e437d800d3795b" compoundref="stormnodeman_8cpp" startline="91" endline="176">CStormnodeDB::Read</referencedby>
      </memberdef>
      <memberdef kind="function" id="class_c_stormnode_man_1a02b9b11565e19f2c9dafbe132341fabd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int CStormnodeMan::CountEnabled</definition>
        <argsstring>(int protocolVersion=-1)</argsstring>
        <name>CountEnabled</name>
        <param>
          <type>int</type>
          <declname>protocolVersion</declname>
          <defval>-1</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/stormnodeman.h" line="109" column="1" bodyfile="/home/dev/ds-160209/src/stormnodeman.cpp" bodystart="364" bodyend="376"/>
        <references refid="stormnode-payments_8cpp_1a1d528b1b067a2f669dfd90c513a97116" compoundref="stormnode-payments_8cpp" startline="18">stormnodePayments</references>
        <references refid="class_c_stormnode_payments_1a98392b86e945308c9c66f1cd4942a220" compoundref="stormnode-payments_8cpp" startline="348" endline="352">CStormnodePayments::GetMinStormnodePaymentsProto</references>
        <references refid="class_c_stormnode_1af2e9fab8911feaeb300b56702d933a67" compoundref="stormnode_8cpp" startline="178" endline="226">CStormnode::Check</references>
        <references refid="class_c_stormnode_1aa2baa2da552179c9812730d4d9709502" compoundref="stormnode_8h" startline="133">CStormnode::protocolVersion</references>
        <references refid="class_c_stormnode_1a065cd7423a76fab999a3afdcc356ca91" compoundref="stormnode_8h" startline="242" endline="245">CStormnode::IsEnabled</references>
        <referencedby refid="class_client_model_1a7d932efdb3a5722ff32f99abb3ab0325" compoundref="clientmodel_8cpp" startline="59" endline="62">ClientModel::getStormnodeCountString</referencedby>
        <referencedby refid="rpcstormnode_8cpp_1a1b562b4a6a627758a7c1080f23a82aa0" compoundref="rpcstormnode_8cpp" startline="81" endline="471">stormnode</referencedby>
        <referencedby refid="class_c_sand_storm_relay_1a267e6fecd0b7381cfe31c75fba023129" compoundref="sandstorm-relay_8cpp" startline="89" endline="103">CSandStormRelay::Relay</referencedby>
        <referencedby refid="class_c_sandstorm_pool_1acf0b5b0e5703c88b7d3c9cb121ec6533" compoundref="sandstorm_8cpp" startline="38" endline="374">CSandstormPool::ProcessMessageSandstorm</referencedby>
        <referencedby refid="class_c_sandstorm_pool_1a459d1986058ad736773fa9857390ba96" compoundref="sandstorm_8cpp" startline="1353" endline="1625">CSandstormPool::DoAutomaticDenominating</referencedby>
        <referencedby refid="class_c_budget_manager_1a1011c9399df614e09f77d87ebe4f7bca" compoundref="stormnode-budget_8cpp" startline="532" endline="555">CBudgetManager::IsBudgetPaymentBlock</referencedby>
        <referencedby refid="class_c_budget_manager_1a1ad65c9d6a743371c0033abf623a291f" compoundref="stormnode-budget_8cpp" startline="574" endline="621">CBudgetManager::IsTransactionValid</referencedby>
        <referencedby refid="class_c_budget_manager_1acba591312f675bd37692e69410ff5735" compoundref="stormnode-budget_8cpp" startline="655" endline="723">CBudgetManager::GetBudget</referencedby>
        <referencedby refid="class_c_budget_proposal_1afaa5e910085e8f0aea26aad6fa99ed2b" compoundref="stormnode-budget_8cpp" startline="1326" endline="1420">CBudgetProposal::IsValid</referencedby>
        <referencedby refid="class_c_stormnode_payments_1a8dc55316a297daad51a03d4cf7b37d06" compoundref="stormnode-payments_8cpp" startline="354" endline="430">CStormnodePayments::ProcessMessageStormnodePayments</referencedby>
        <referencedby refid="class_c_stormnode_payments_1a813695c47afcbedba8858c36cb30bcfe" compoundref="stormnode-payments_8cpp" startline="792" endline="812">CStormnodePayments::Sync</referencedby>
        <referencedby refid="class_c_stormnode_sync_1adaaeb592c3432c8a459560523c7be207" compoundref="stormnode-sync_8cpp" startline="225" endline="405">CStormnodeSync::Process</referencedby>
        <referencedby refid="class_c_stormnode_1a1502f0b0559e139a3100aa5646f95bd7" compoundref="stormnode_8cpp" startline="246" endline="289">CStormnode::GetLastPaid</referencedby>
        <referencedby refid="class_c_stormnode_man_1aeaaefff98af62a3d79d72e23f5539a72" compoundref="stormnodeman_8cpp" startline="442" endline="502">GetNextStormnodeInQueueForPayment</referencedby>
        <referencedby refid="class_c_stormnode_man_1a24417dae3da8762e9be495f25b0a6d30" compoundref="stormnodeman_8cpp" startline="504" endline="534">FindRandomNotInVec</referencedby>
      </memberdef>
      <memberdef kind="function" id="class_c_stormnode_man_1a3f8f9f86f01df701533b544903b55113" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void CStormnodeMan::SsegUpdate</definition>
        <argsstring>(CNode *pnode)</argsstring>
        <name>SsegUpdate</name>
        <param>
          <type><ref refid="class_c_node" kindref="compound">CNode</ref> *</type>
          <declname>pnode</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/stormnodeman.h" line="111" column="1" bodyfile="/home/dev/ds-160209/src/stormnodeman.cpp" bodystart="378" bodyend="398"/>
        <references refid="sync_8h_1a911fe23f057c2fe5aad629162d6c99d0" compoundref="sync_8h" startline="159">LOCK</references>
        <references refid="chainparams_8cpp_1ace5c5b706d71a324a417dd2db394fd4a" compoundref="chainparams_8cpp" startline="186" endline="188">Params</references>
        <references refid="class_c_chain_params_1a5c4bb1d7c0205399ff06ee58fab7f176ab64dab5901e9dc8c7bf79daf9f7a2e1f" compoundref="chainparams_8h" startline="39">CChainParams::MAIN</references>
        <references refid="class_c_node_1a3993ecb1de2a2135a3cf0904346a6f88" compoundref="net_8h" startline="245">CNode::addr</references>
        <references refid="class_c_net_addr_1a81b190a7e0b05b93bf3097ba43e5cec1" compoundref="netbase_8cpp" startline="650" endline="656">CNetAddr::IsRFC1918</references>
        <references refid="class_c_net_addr_1a6cfa18f323424408cf7ace36c9a7c2e2" compoundref="netbase_8cpp" startline="729" endline="746">CNetAddr::IsLocal</references>
        <references refid="util_8cpp_1a46fac5fba8ba905b5f9acb364f5d8c6f" compoundref="util_8cpp" startline="1352" endline="1357">GetTime</references>
        <references refid="util_8h_1afc02c0a4258fedfb316be612bb659ba8" compoundref="util_8h" startline="158">LogPrintf</references>
        <references refid="class_c_service_1a336f9848fe9364e260c76499be0351a5" compoundref="netbase_8cpp" startline="1222" endline="1225">CService::ToString</references>
        <references refid="class_c_node_1a204fda3d33404cb37698c085b1583ab2" compoundref="net_8h" startline="583" endline="595">CNode::PushMessage</references>
        <referencedby refid="class_c_stormnode_sync_1adaaeb592c3432c8a459560523c7be207" compoundref="stormnode-sync_8cpp" startline="225" endline="405">CStormnodeSync::Process</referencedby>
      </memberdef>
      <memberdef kind="function" id="class_c_stormnode_man_1a346025e5a78a04ddfa80252ea1433c72" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_c_stormnode" kindref="compound">CStormnode</ref> *</type>
        <definition>CStormnode * CStormnodeMan::Find</definition>
        <argsstring>(const CScript &amp;payee)</argsstring>
        <name>Find</name>
        <param>
          <type>const <ref refid="class_c_script" kindref="compound">CScript</ref> &amp;</type>
          <declname>payee</declname>
        </param>
        <briefdescription>
<para>Find an entry. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/stormnodeman.h" line="114" column="1" bodyfile="/home/dev/ds-160209/src/stormnodeman.cpp" bodystart="400" bodyend="412"/>
        <references refid="sync_8h_1a911fe23f057c2fe5aad629162d6c99d0" compoundref="sync_8h" startline="159">LOCK</references>
        <references refid="script_8cpp_1ae40f28d3b46c21033f6ee1f1200d0321" compoundref="script_8cpp" startline="3226" endline="3232">GetScriptForDestination</references>
        <references refid="class_c_stormnode_1af241ab789726de5ba5d2caba082c3d01" compoundref="stormnode_8h" startline="124">CStormnode::pubkey</references>
        <references refid="class_c_pub_key_1a9c1908fef34fd9e1c4b5e0ffd5d3834e" compoundref="pubkey_8h" startline="132" endline="134">CPubKey::GetID</references>
        <referencedby refid="class_c_active_stormnode_1a9532e0804ea4c96ad7d58ab3e9da6891" compoundref="activestormnode_8cpp" startline="17" endline="140">CActiveStormnode::ManageStatus</referencedby>
        <referencedby refid="instantx_8h_1a5d4434bfb70f64f95aa4de9286cbae94" compoundref="instantx_8cpp" startline="302" endline="394">ProcessConsensusVote</referencedby>
        <referencedby refid="class_c_consensus_vote_1ac6550a89acee255e0035e189a42a6310" compoundref="instantx_8cpp" startline="471" endline="491">CConsensusVote::SignatureValid</referencedby>
        <referencedby refid="rpcstormnode-budget_8cpp_1aae19bf2ba52f3b864bfaf70206bcb29a" compoundref="rpcstormnode-budget_8cpp" startline="22" endline="515">snbudget</referencedby>
        <referencedby refid="rpcstormnode-budget_8cpp_1a0ed276908ef20f9b0ed87c3ed4c26d25" compoundref="rpcstormnode-budget_8cpp" startline="517" endline="567">snbudgetvoteraw</referencedby>
        <referencedby refid="rpcstormnode-budget_8cpp_1aaff1bdc7f9f32708efc9094bb6ab0e0d" compoundref="rpcstormnode-budget_8cpp" startline="569" endline="761">snfinalbudget</referencedby>
        <referencedby refid="rpcstormnode_8cpp_1a1b562b4a6a627758a7c1080f23a82aa0" compoundref="rpcstormnode_8cpp" startline="81" endline="471">stormnode</referencedby>
        <referencedby refid="class_c_sandstorm_pool_1acf0b5b0e5703c88b7d3c9cb121ec6533" compoundref="sandstorm_8cpp" startline="38" endline="374">CSandstormPool::ProcessMessageSandstorm</referencedby>
        <referencedby refid="class_c_sandstorm_pool_1a459d1986058ad736773fa9857390ba96" compoundref="sandstorm_8cpp" startline="1353" endline="1625">CSandstormPool::DoAutomaticDenominating</referencedby>
        <referencedby refid="class_c_sandstorm_queue_1a8ef2f37969599d3b30bbe479eff56460" compoundref="sandstorm_8cpp" startline="2132" endline="2149">CSandstormQueue::CheckSignature</referencedby>
        <referencedby refid="class_c_sandstorm_queue_1a0e1739e9a0c517f0de35807c92db1256" compoundref="sandstorm_8h" startline="179" endline="188">CSandstormQueue::GetAddress</referencedby>
        <referencedby refid="class_c_sandstorm_queue_1acaa6374baeb707ed1726ec60c67c1624" compoundref="sandstorm_8h" startline="191" endline="200">CSandstormQueue::GetProtocolVersion</referencedby>
        <referencedby refid="class_c_budget_manager_1a3fc235d528e37ec1c66789f3bfed1878" compoundref="stormnode-budget_8cpp" startline="904" endline="1072">CBudgetManager::ProcessMessage</referencedby>
        <referencedby refid="class_c_budget_vote_1ab01d2ab30c3761318a7da919bff26697" compoundref="stormnode-budget_8cpp" startline="1623" endline="1644">CBudgetVote::SignatureValid</referencedby>
        <referencedby refid="class_c_finalized_budget_vote_1aadcc860c6efe5122388a372641297014" compoundref="stormnode-budget_8cpp" startline="2024" endline="2046">CFinalizedBudgetVote::SignatureValid</referencedby>
        <referencedby refid="class_c_stormnode_payment_winner_1ae8e5cecfd1f95eed8fdd14f019360fa0" compoundref="stormnode-payments_8cpp" startline="644" endline="681">CStormnodePaymentWinner::IsValid</referencedby>
        <referencedby refid="class_c_stormnode_payment_winner_1a7c86a0fbc7e6fb5f6e07a0248ed04a43" compoundref="stormnode-payments_8cpp" startline="770" endline="790">CStormnodePaymentWinner::SignatureValid</referencedby>
        <referencedby refid="class_c_stormnode_broadcast_1a1492e5bc8fc2587de913ec8ffc9d18a8" compoundref="stormnode_8cpp" startline="351" endline="422">CStormnodeBroadcast::CheckAndUpdate</referencedby>
        <referencedby refid="class_c_stormnode_broadcast_1ac182349ba784e20ce826eda23a239e3c" compoundref="stormnode_8cpp" startline="424" endline="507">CStormnodeBroadcast::CheckInputsAndAdd</referencedby>
        <referencedby refid="class_c_stormnode_ping_1af77ba52e9ff7531d09b61fefa372efa4" compoundref="stormnode_8cpp" startline="578" endline="664">CStormnodePing::CheckAndUpdate</referencedby>
        <referencedby refid="class_c_stormnode_man_1aa4a3ed2fe6508a7922e7b7bd1cbf89c3" compoundref="stormnodeman_8cpp" startline="211" endline="227">Add</referencedby>
        <referencedby refid="class_c_stormnode_man_1aeaaefff98af62a3d79d72e23f5539a72" compoundref="stormnodeman_8cpp" startline="442" endline="502">GetNextStormnodeInQueueForPayment</referencedby>
        <referencedby refid="class_c_stormnode_man_1af631f4c124f3022e4c388d759ca69605" compoundref="stormnodeman_8cpp" startline="630" endline="660">GetStormnodeByRank</referencedby>
        <referencedby refid="class_c_stormnode_man_1ae30d0b9b493e23c3d14ec48c77be7b6f" compoundref="stormnodeman_8cpp" startline="674" endline="803">ProcessMessage</referencedby>
      </memberdef>
      <memberdef kind="function" id="class_c_stormnode_man_1a64b6022d93220e65e739c5cf8ba74918" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_c_stormnode" kindref="compound">CStormnode</ref> *</type>
        <definition>CStormnode * CStormnodeMan::Find</definition>
        <argsstring>(const CTxIn &amp;vin)</argsstring>
        <name>Find</name>
        <param>
          <type>const <ref refid="class_c_tx_in" kindref="compound">CTxIn</ref> &amp;</type>
          <declname>vin</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/stormnodeman.h" line="115" column="1" bodyfile="/home/dev/ds-160209/src/stormnodeman.cpp" bodystart="414" bodyend="424"/>
        <references refid="sync_8h_1a911fe23f057c2fe5aad629162d6c99d0" compoundref="sync_8h" startline="159">LOCK</references>
        <references refid="class_c_stormnode_1a62f5b0f436ca313afd612b07d687127f" compoundref="stormnode_8h" startline="122">CStormnode::vin</references>
        <references refid="class_c_tx_in_1aed9312051a25380cbd7f123408ab7c20" compoundref="transaction_8h" startline="97">CTxIn::prevout</references>
      </memberdef>
      <memberdef kind="function" id="class_c_stormnode_man_1a8daba6b955faaf839f9441b754bd7eef" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_c_stormnode" kindref="compound">CStormnode</ref> *</type>
        <definition>CStormnode * CStormnodeMan::Find</definition>
        <argsstring>(const CPubKey &amp;pubKeyStormnode)</argsstring>
        <name>Find</name>
        <param>
          <type>const <ref refid="class_c_pub_key" kindref="compound">CPubKey</ref> &amp;</type>
          <declname>pubKeyStormnode</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/stormnodeman.h" line="116" column="1" bodyfile="/home/dev/ds-160209/src/stormnodeman.cpp" bodystart="427" bodyend="437"/>
        <references refid="sync_8h_1a911fe23f057c2fe5aad629162d6c99d0" compoundref="sync_8h" startline="159">LOCK</references>
        <references refid="class_c_stormnode_1a43efb713c0d8e8f01b9ea593e025856b" compoundref="stormnode_8h" startline="125">CStormnode::pubkey2</references>
      </memberdef>
      <memberdef kind="function" id="class_c_stormnode_man_1aeaaefff98af62a3d79d72e23f5539a72" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_c_stormnode" kindref="compound">CStormnode</ref> *</type>
        <definition>CStormnode * CStormnodeMan::GetNextStormnodeInQueueForPayment</definition>
        <argsstring>(int nBlockHeight, bool fFilterSigTime, int &amp;nCount)</argsstring>
        <name>GetNextStormnodeInQueueForPayment</name>
        <param>
          <type>int</type>
          <declname>nBlockHeight</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>fFilterSigTime</declname>
        </param>
        <param>
          <type>int &amp;</type>
          <declname>nCount</declname>
        </param>
        <briefdescription>
<para>Find an entry in the stormnode list that is next to be paid. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/stormnodeman.h" line="119" column="1" bodyfile="/home/dev/ds-160209/src/stormnodeman.cpp" bodystart="442" bodyend="502"/>
        <references refid="sync_8h_1a911fe23f057c2fe5aad629162d6c99d0" compoundref="sync_8h" startline="159">LOCK</references>
        <references refid="class_c_stormnode_man_1a02b9b11565e19f2c9dafbe132341fabd" compoundref="stormnodeman_8cpp" startline="364" endline="376">CountEnabled</references>
        <references refid="class_c_stormnode_1af2e9fab8911feaeb300b56702d933a67" compoundref="stormnode_8cpp" startline="178" endline="226">CStormnode::Check</references>
        <references refid="class_c_stormnode_1a065cd7423a76fab999a3afdcc356ca91" compoundref="stormnode_8h" startline="242" endline="245">CStormnode::IsEnabled</references>
        <references refid="class_c_stormnode_1aa2baa2da552179c9812730d4d9709502" compoundref="stormnode_8h" startline="133">CStormnode::protocolVersion</references>
        <references refid="stormnode-payments_8cpp_1a1d528b1b067a2f669dfd90c513a97116" compoundref="stormnode-payments_8cpp" startline="18">stormnodePayments</references>
        <references refid="class_c_stormnode_payments_1a98392b86e945308c9c66f1cd4942a220" compoundref="stormnode-payments_8cpp" startline="348" endline="352">CStormnodePayments::GetMinStormnodePaymentsProto</references>
        <references refid="class_c_stormnode_payments_1ac2a8e2a9bef3c4c68c1e464903a1988f" compoundref="stormnode-payments_8cpp" startline="465" endline="488">CStormnodePayments::IsScheduled</references>
        <references refid="class_c_stormnode_1ae77544488795272ca9615ed1e23d3b77" compoundref="stormnode_8h" startline="128">CStormnode::sigTime</references>
        <references refid="timedata_8cpp_1a09f81b9c7650f898cf3cf305b87547e6" compoundref="timedata_8cpp" startline="33" endline="36">GetAdjustedTime</references>
        <references refid="class_c_stormnode_1a8a82685a7b1ea42d49e44459b35932fe" compoundref="stormnode_8h" startline="252" endline="262">CStormnode::GetStormnodeInputAge</references>
        <references refid="class_c_stormnode_1abce24148c6618317ab287e8e284c12d6" compoundref="stormnode_8cpp" startline="228" endline="244">CStormnode::SecondsSincePayment</references>
        <references refid="class_c_stormnode_1a62f5b0f436ca313afd612b07d687127f" compoundref="stormnode_8h" startline="122">CStormnode::vin</references>
        <references refid="util_8h_1aa3052ab82a2ba880ea3e30b3357c8820" compoundref="util_8h" startline="77">PAIRTYPE</references>
        <references refid="class_c_stormnode_man_1a346025e5a78a04ddfa80252ea1433c72" compoundref="stormnodeman_8cpp" startline="400" endline="412">Find</references>
        <references refid="class_c_stormnode_1a6e1fab43d9494177da3f8599c4645516" compoundref="stormnode_8cpp" startline="152" endline="176">CStormnode::CalculateScore</references>
        <referencedby refid="rpcstormnode_8cpp_1a1b562b4a6a627758a7c1080f23a82aa0" compoundref="rpcstormnode_8cpp" startline="81" endline="471">stormnode</referencedby>
        <referencedby refid="class_c_stormnode_payments_1a348b88dd03ef4a6684ae22141de841c8" compoundref="stormnode-payments_8cpp" startline="683" endline="762">CStormnodePayments::ProcessBlock</referencedby>
      </memberdef>
      <memberdef kind="function" id="class_c_stormnode_man_1a24417dae3da8762e9be495f25b0a6d30" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_c_stormnode" kindref="compound">CStormnode</ref> *</type>
        <definition>CStormnode * CStormnodeMan::FindRandomNotInVec</definition>
        <argsstring>(std::vector&lt; CTxIn &gt; &amp;vecToExclude, int protocolVersion=-1)</argsstring>
        <name>FindRandomNotInVec</name>
        <param>
          <type>std::vector&lt; <ref refid="class_c_tx_in" kindref="compound">CTxIn</ref> &gt; &amp;</type>
          <declname>vecToExclude</declname>
        </param>
        <param>
          <type>int</type>
          <declname>protocolVersion</declname>
          <defval>-1</defval>
        </param>
        <briefdescription>
<para>Find a random entry. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/stormnodeman.h" line="122" column="1" bodyfile="/home/dev/ds-160209/src/stormnodeman.cpp" bodystart="504" bodyend="534"/>
        <references refid="sync_8h_1a911fe23f057c2fe5aad629162d6c99d0" compoundref="sync_8h" startline="159">LOCK</references>
        <references refid="stormnode-payments_8cpp_1a1d528b1b067a2f669dfd90c513a97116" compoundref="stormnode-payments_8cpp" startline="18">stormnodePayments</references>
        <references refid="class_c_stormnode_payments_1a98392b86e945308c9c66f1cd4942a220" compoundref="stormnode-payments_8cpp" startline="348" endline="352">CStormnodePayments::GetMinStormnodePaymentsProto</references>
        <references refid="class_c_stormnode_man_1a02b9b11565e19f2c9dafbe132341fabd" compoundref="stormnodeman_8cpp" startline="364" endline="376">CountEnabled</references>
        <references refid="util_8h_1afc02c0a4258fedfb316be612bb659ba8" compoundref="util_8h" startline="158">LogPrintf</references>
        <references refid="db__bench_8cc_1a2391b9dab13f09bae65ae349c8d4c271" compoundref="db__bench_8cc" startline="290">rand</references>
        <references refid="util_8cpp_1a0e44e088732172da6662db2d5e37d4b2" compoundref="util_8cpp" startline="213" endline="216">GetRandInt</references>
        <references refid="class_c_stormnode_1aa2baa2da552179c9812730d4d9709502" compoundref="stormnode_8h" startline="133">CStormnode::protocolVersion</references>
        <references refid="class_c_stormnode_1a065cd7423a76fab999a3afdcc356ca91" compoundref="stormnode_8h" startline="242" endline="245">CStormnode::IsEnabled</references>
        <references refid="class_c_stormnode_1a62f5b0f436ca313afd612b07d687127f" compoundref="stormnode_8h" startline="122">CStormnode::vin</references>
        <references refid="class_c_tx_in_1aed9312051a25380cbd7f123408ab7c20" compoundref="transaction_8h" startline="97">CTxIn::prevout</references>
        <referencedby refid="class_c_sandstorm_pool_1a459d1986058ad736773fa9857390ba96" compoundref="sandstorm_8cpp" startline="1353" endline="1625">CSandstormPool::DoAutomaticDenominating</referencedby>
      </memberdef>
      <memberdef kind="function" id="class_c_stormnode_man_1aad6c3131e73e2b686f3847148b536448" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_c_stormnode" kindref="compound">CStormnode</ref> *</type>
        <definition>CStormnode * CStormnodeMan::GetCurrentStormNode</definition>
        <argsstring>(int mod=1, int64_t nBlockHeight=0, int minProtocol=0)</argsstring>
        <name>GetCurrentStormNode</name>
        <param>
          <type>int</type>
          <declname>mod</declname>
          <defval>1</defval>
        </param>
        <param>
          <type><ref refid="stdint_8h_1adec1df1b8b51cb32b77e5b86fff46471" kindref="member">int64_t</ref></type>
          <declname>nBlockHeight</declname>
          <defval>0</defval>
        </param>
        <param>
          <type>int</type>
          <declname>minProtocol</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Get the current winner for this block. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/stormnodeman.h" line="125" column="1" bodyfile="/home/dev/ds-160209/src/stormnodeman.cpp" bodystart="536" bodyend="558"/>
        <references refid="class_c_stormnode_1af2e9fab8911feaeb300b56702d933a67" compoundref="stormnode_8cpp" startline="178" endline="226">CStormnode::Check</references>
        <references refid="class_c_stormnode_1aa2baa2da552179c9812730d4d9709502" compoundref="stormnode_8h" startline="133">CStormnode::protocolVersion</references>
        <references refid="class_c_stormnode_1a065cd7423a76fab999a3afdcc356ca91" compoundref="stormnode_8h" startline="242" endline="245">CStormnode::IsEnabled</references>
        <references refid="class_c_stormnode_1a6e1fab43d9494177da3f8599c4645516" compoundref="stormnode_8cpp" startline="152" endline="176">CStormnode::CalculateScore</references>
        <references refid="classuint256_1af30486eee47f077f91ed762d0db6ddca" compoundref="uint256_8cpp" startline="274" endline="295">uint256::GetCompact</references>
        <referencedby refid="rpcstormnode_8cpp_1aea4471c128eb07bb1b70b4344ac38564" compoundref="rpcstormnode_8cpp" startline="65" endline="78">getpoolinfo</referencedby>
        <referencedby refid="rpcstormnode_8cpp_1a1b562b4a6a627758a7c1080f23a82aa0" compoundref="rpcstormnode_8cpp" startline="81" endline="471">stormnode</referencedby>
        <referencedby refid="class_c_stormnode_payments_1accaeb923fe36e73d4228fc043771c4ad" compoundref="stormnode-payments_8cpp" startline="294" endline="346">CStormnodePayments::FillBlockPayee</referencedby>
        <referencedby refid="class_c_wallet_1a644df129468440aa36f49ca3716a3c19" compoundref="wallet_8cpp" startline="3733" endline="3956">CWallet::CreateCoinStake</referencedby>
      </memberdef>
      <memberdef kind="function" id="class_c_stormnode_man_1a7002dd29b10a0db885c361f1d9981de8" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::vector&lt; <ref refid="class_c_stormnode" kindref="compound">CStormnode</ref> &gt;</type>
        <definition>std::vector&lt;CStormnode&gt; CStormnodeMan::GetFullStormnodeVector</definition>
        <argsstring>()</argsstring>
        <name>GetFullStormnodeVector</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/stormnodeman.h" line="127" column="1" bodyfile="/home/dev/ds-160209/src/stormnodeman.h" bodystart="127" bodyend="127"/>
        <referencedby refid="class_stormnode_manager_1a8176df10b7594a5d37aeb8d41941a52b" compoundref="stormnodemanager_8cpp" startline="247" endline="269">StormnodeManager::on_UpdateButton_clicked</referencedby>
        <referencedby refid="rpcstormnode_8cpp_1a1b562b4a6a627758a7c1080f23a82aa0" compoundref="rpcstormnode_8cpp" startline="81" endline="471">stormnode</referencedby>
        <referencedby refid="rpcstormnode_8cpp_1a9e44e21f26f399fc0b1bce17f862a8d9" compoundref="rpcstormnode_8cpp" startline="473" endline="572">stormnodelist</referencedby>
      </memberdef>
      <memberdef kind="function" id="class_c_stormnode_man_1a5337440744bbc51b2e7a9752c3613a26" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; pair&lt; int, <ref refid="class_c_stormnode" kindref="compound">CStormnode</ref> &gt; &gt;</type>
        <definition>std::vector&lt; pair&lt; int, CStormnode &gt; &gt; CStormnodeMan::GetStormnodeRanks</definition>
        <argsstring>(int64_t nBlockHeight, int minProtocol=0)</argsstring>
        <name>GetStormnodeRanks</name>
        <param>
          <type><ref refid="stdint_8h_1adec1df1b8b51cb32b77e5b86fff46471" kindref="member">int64_t</ref></type>
          <declname>nBlockHeight</declname>
        </param>
        <param>
          <type>int</type>
          <declname>minProtocol</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/stormnodeman.h" line="129" column="1" bodyfile="/home/dev/ds-160209/src/stormnodeman.cpp" bodystart="594" bodyend="628"/>
        <references refid="cache_8cc_1a11ecb029164e055f28f4123ce3748862" compoundref="cache_8cc" startline="34">hash</references>
        <references refid="stormnode_8cpp_1a32f5cbabfc2bd53c2f2daedf122a83cb" compoundref="stormnode_8cpp" startline="22" endline="57">GetBlockHash</references>
        <references refid="class_c_stormnode_1af2e9fab8911feaeb300b56702d933a67" compoundref="stormnode_8cpp" startline="178" endline="226">CStormnode::Check</references>
        <references refid="class_c_stormnode_1aa2baa2da552179c9812730d4d9709502" compoundref="stormnode_8h" startline="133">CStormnode::protocolVersion</references>
        <references refid="class_c_stormnode_1a065cd7423a76fab999a3afdcc356ca91" compoundref="stormnode_8h" startline="242" endline="245">CStormnode::IsEnabled</references>
        <references refid="class_c_stormnode_1a6e1fab43d9494177da3f8599c4645516" compoundref="stormnode_8cpp" startline="152" endline="176">CStormnode::CalculateScore</references>
        <references refid="classuint256_1af30486eee47f077f91ed762d0db6ddca" compoundref="uint256_8cpp" startline="274" endline="295">uint256::GetCompact</references>
        <references refid="util_8h_1aa3052ab82a2ba880ea3e30b3357c8820" compoundref="util_8h" startline="77">PAIRTYPE</references>
        <referencedby refid="rpcstormnode_8cpp_1a9e44e21f26f399fc0b1bce17f862a8d9" compoundref="rpcstormnode_8cpp" startline="473" endline="572">stormnodelist</referencedby>
      </memberdef>
      <memberdef kind="function" id="class_c_stormnode_man_1ad1fb56e4ee364e2b18bab57210f3f3cd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int CStormnodeMan::GetStormnodeRank</definition>
        <argsstring>(const CTxIn &amp;vin, int64_t nBlockHeight, int minProtocol=0, bool fOnlyActive=true)</argsstring>
        <name>GetStormnodeRank</name>
        <param>
          <type>const <ref refid="class_c_tx_in" kindref="compound">CTxIn</ref> &amp;</type>
          <declname>vin</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1adec1df1b8b51cb32b77e5b86fff46471" kindref="member">int64_t</ref></type>
          <declname>nBlockHeight</declname>
        </param>
        <param>
          <type>int</type>
          <declname>minProtocol</declname>
          <defval>0</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>fOnlyActive</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/stormnodeman.h" line="130" column="1" bodyfile="/home/dev/ds-160209/src/stormnodeman.cpp" bodystart="560" bodyend="592"/>
        <references refid="cache_8cc_1a11ecb029164e055f28f4123ce3748862" compoundref="cache_8cc" startline="34">hash</references>
        <references refid="stormnode_8cpp_1a32f5cbabfc2bd53c2f2daedf122a83cb" compoundref="stormnode_8cpp" startline="22" endline="57">GetBlockHash</references>
        <references refid="class_c_stormnode_1aa2baa2da552179c9812730d4d9709502" compoundref="stormnode_8h" startline="133">CStormnode::protocolVersion</references>
        <references refid="class_c_stormnode_1af2e9fab8911feaeb300b56702d933a67" compoundref="stormnode_8cpp" startline="178" endline="226">CStormnode::Check</references>
        <references refid="class_c_stormnode_1a065cd7423a76fab999a3afdcc356ca91" compoundref="stormnode_8h" startline="242" endline="245">CStormnode::IsEnabled</references>
        <references refid="class_c_stormnode_1a6e1fab43d9494177da3f8599c4645516" compoundref="stormnode_8cpp" startline="152" endline="176">CStormnode::CalculateScore</references>
        <references refid="classuint256_1af30486eee47f077f91ed762d0db6ddca" compoundref="uint256_8cpp" startline="274" endline="295">uint256::GetCompact</references>
        <references refid="class_c_stormnode_1a62f5b0f436ca313afd612b07d687127f" compoundref="stormnode_8h" startline="122">CStormnode::vin</references>
        <references refid="util_8h_1aa3052ab82a2ba880ea3e30b3357c8820" compoundref="util_8h" startline="77">PAIRTYPE</references>
        <references refid="class_c_tx_in_1aed9312051a25380cbd7f123408ab7c20" compoundref="transaction_8h" startline="97">CTxIn::prevout</references>
        <referencedby refid="instantx_8h_1a0753801d6e6eb2cb230a85a6ba6fd371" compoundref="instantx_8cpp" startline="259" endline="299">DoConsensusVote</referencedby>
        <referencedby refid="instantx_8h_1a5d4434bfb70f64f95aa4de9286cbae94" compoundref="instantx_8cpp" startline="302" endline="394">ProcessConsensusVote</referencedby>
        <referencedby refid="class_c_transaction_lock_1a71cb6705a8f0bfb4a8453d3b284e3cf7" compoundref="instantx_8cpp" startline="523" endline="549">CTransactionLock::SignaturesValid</referencedby>
        <referencedby refid="class_c_stormnode_payment_winner_1ae8e5cecfd1f95eed8fdd14f019360fa0" compoundref="stormnode-payments_8cpp" startline="644" endline="681">CStormnodePaymentWinner::IsValid</referencedby>
        <referencedby refid="class_c_stormnode_payments_1a348b88dd03ef4a6684ae22141de841c8" compoundref="stormnode-payments_8cpp" startline="683" endline="762">CStormnodePayments::ProcessBlock</referencedby>
      </memberdef>
      <memberdef kind="function" id="class_c_stormnode_man_1af631f4c124f3022e4c388d759ca69605" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_c_stormnode" kindref="compound">CStormnode</ref> *</type>
        <definition>CStormnode * CStormnodeMan::GetStormnodeByRank</definition>
        <argsstring>(int nRank, int64_t nBlockHeight, int minProtocol=0, bool fOnlyActive=true)</argsstring>
        <name>GetStormnodeByRank</name>
        <param>
          <type>int</type>
          <declname>nRank</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1adec1df1b8b51cb32b77e5b86fff46471" kindref="member">int64_t</ref></type>
          <declname>nBlockHeight</declname>
        </param>
        <param>
          <type>int</type>
          <declname>minProtocol</declname>
          <defval>0</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>fOnlyActive</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/stormnodeman.h" line="131" column="1" bodyfile="/home/dev/ds-160209/src/stormnodeman.cpp" bodystart="630" bodyend="660"/>
        <references refid="class_c_stormnode_1aa2baa2da552179c9812730d4d9709502" compoundref="stormnode_8h" startline="133">CStormnode::protocolVersion</references>
        <references refid="class_c_stormnode_1af2e9fab8911feaeb300b56702d933a67" compoundref="stormnode_8cpp" startline="178" endline="226">CStormnode::Check</references>
        <references refid="class_c_stormnode_1a065cd7423a76fab999a3afdcc356ca91" compoundref="stormnode_8h" startline="242" endline="245">CStormnode::IsEnabled</references>
        <references refid="class_c_stormnode_1a6e1fab43d9494177da3f8599c4645516" compoundref="stormnode_8cpp" startline="152" endline="176">CStormnode::CalculateScore</references>
        <references refid="classuint256_1af30486eee47f077f91ed762d0db6ddca" compoundref="uint256_8cpp" startline="274" endline="295">uint256::GetCompact</references>
        <references refid="class_c_stormnode_1a62f5b0f436ca313afd612b07d687127f" compoundref="stormnode_8h" startline="122">CStormnode::vin</references>
        <references refid="util_8h_1aa3052ab82a2ba880ea3e30b3357c8820" compoundref="util_8h" startline="77">PAIRTYPE</references>
        <references refid="class_c_stormnode_man_1a346025e5a78a04ddfa80252ea1433c72" compoundref="stormnodeman_8cpp" startline="400" endline="412">Find</references>
        <referencedby refid="class_c_sand_storm_relay_1aae4c929f8831a4c678812b1da8f82a55" compoundref="sandstorm-relay_8cpp" startline="105" endline="120">CSandStormRelay::RelayThroughNode</referencedby>
      </memberdef>
      <memberdef kind="function" id="class_c_stormnode_man_1a52708159ad91808d18a0b6082ed6daca" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void CStormnodeMan::ProcessStormnodeConnections</definition>
        <argsstring>()</argsstring>
        <name>ProcessStormnodeConnections</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/stormnodeman.h" line="133" column="1" bodyfile="/home/dev/ds-160209/src/stormnodeman.cpp" bodystart="662" bodyend="672"/>
        <references refid="sync_8h_1a911fe23f057c2fe5aad629162d6c99d0" compoundref="sync_8h" startline="159">LOCK</references>
        <references refid="net_8cpp_1a8282e3a7948351ac96516573cd31f9d0" compoundref="net_8cpp" startline="69">cs_vNodes</references>
        <references refid="net_8cpp_1aa5a11f8873e230cea77bc7e91ee51918" compoundref="net_8cpp" startline="68">vNodes</references>
        <references refid="class_c_node_1aab66b45769e6c8009d224c63704a1859" compoundref="net_8h" startline="265">CNode::fSandStorm</references>
        <references refid="sandstorm_8cpp_1addaca1e09682bd47278ce6208b48fd75" compoundref="sandstorm_8cpp" startline="26">sandStormPool</references>
        <references refid="class_c_sandstorm_pool_1a61589289244edd2ca3bc539d725d885c" compoundref="sandstorm_8h" startline="312">CSandstormPool::pSubmittedToStormnode</references>
        <references refid="class_c_node_1a3993ecb1de2a2135a3cf0904346a6f88" compoundref="net_8h" startline="245">CNode::addr</references>
        <references refid="class_c_stormnode_1a31e0681a92d1f4d0da756b680c695d66" compoundref="stormnode_8h" startline="123">CStormnode::addr</references>
        <references refid="util_8h_1afc02c0a4258fedfb316be612bb659ba8" compoundref="util_8h" startline="158">LogPrintf</references>
        <references refid="class_c_service_1a336f9848fe9364e260c76499be0351a5" compoundref="netbase_8cpp" startline="1222" endline="1225">CService::ToString</references>
        <references refid="class_c_node_1af2f7ea958313974e8a948292f060922e" compoundref="net_8h" startline="259">CNode::fDisconnect</references>
        <referencedby refid="sandstorm_8h_1ac661e702905cd5093cb237555ba5c1c0" compoundref="sandstorm_8cpp" startline="2196" endline="2239">ThreadCheckSandStormPool</referencedby>
      </memberdef>
      <memberdef kind="function" id="class_c_stormnode_man_1ae30d0b9b493e23c3d14ec48c77be7b6f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void CStormnodeMan::ProcessMessage</definition>
        <argsstring>(CNode *pfrom, std::string &amp;strCommand, CDataStream &amp;vRecv)</argsstring>
        <name>ProcessMessage</name>
        <param>
          <type><ref refid="class_c_node" kindref="compound">CNode</ref> *</type>
          <declname>pfrom</declname>
        </param>
        <param>
          <type>std::string &amp;</type>
          <declname>strCommand</declname>
        </param>
        <param>
          <type><ref refid="class_c_data_stream" kindref="compound">CDataStream</ref> &amp;</type>
          <declname>vRecv</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/stormnodeman.h" line="135" column="1" bodyfile="/home/dev/ds-160209/src/stormnodeman.cpp" bodystart="674" bodyend="803"/>
        <references refid="util_8cpp_1aa2216c761101b28e38757c5cffea3dc5" compoundref="util_8cpp" startline="79">fLiteMode</references>
        <references refid="stormnode-sync_8cpp_1a4233fda53cfb60fd6ba208d981ac3fe7" compoundref="stormnode-sync_8cpp" startline="15">stormnodeSync</references>
        <references refid="class_c_stormnode_sync_1adfb3343f29476ca833084be0320a7d50" compoundref="stormnode-sync_8cpp" startline="28" endline="57">CStormnodeSync::IsBlockchainSynced</references>
        <references refid="sync_8h_1a911fe23f057c2fe5aad629162d6c99d0" compoundref="sync_8h" startline="159">LOCK</references>
        <references refid="class_c_stormnode_man_1a320b85dcbbc8f01a412c96b23bca5424" compoundref="stormnodeman_8h" startline="69">mapSeenStormnodeBroadcast</references>
        <references refid="class_c_stormnode_sync_1ad9e9ad7392c3fa1ec0af4b178b3c62c0" compoundref="stormnode-sync_8cpp" startline="82" endline="93">CStormnodeSync::AddedStormnodeList</references>
        <references refid="main_8cpp_1a387fdffa0ff52dde6b7d1c2991a9bdac" compoundref="main_8cpp" startline="1741" endline="1764">Misbehaving</references>
        <references refid="class_c_node_1ac0f1a22fa938e84138536308e2001340" compoundref="net_8h" startline="424" endline="426">CNode::GetId</references>
        <references refid="sandstorm_8cpp_1af6ac9f9a52a47b030c3d4a38d13af2b1" compoundref="sandstorm_8cpp" startline="28">sandStormSigner</references>
        <references refid="class_c_sand_storm_signer_1a21af58bfa950441f5d61e789a876ddda" compoundref="sandstorm_8cpp" startline="2027" endline="2042">CSandStormSigner::IsVinAssociatedWithPubkey</references>
        <references refid="util_8h_1afc02c0a4258fedfb316be612bb659ba8" compoundref="util_8h" startline="158">LogPrintf</references>
        <references refid="net_8cpp_1ac575e3335fd15a19b567026491f8f01a" compoundref="net_8cpp" startline="61">addrman</references>
        <references refid="class_c_addr_man_1a03fcc7109b5f014760dc50a81f68c5ec" compoundref="addrman_8h" startline="414" endline="426">CAddrMan::Add</references>
        <references refid="class_c_node_1a3993ecb1de2a2135a3cf0904346a6f88" compoundref="net_8h" startline="245">CNode::addr</references>
        <references refid="class_c_stormnode_man_1a9d4e8bbd492630f16b61eec58b722a86" compoundref="stormnodeman_8h" startline="71">mapSeenStormnodePing</references>
        <references refid="class_c_stormnode_man_1a346025e5a78a04ddfa80252ea1433c72" compoundref="stormnodeman_8cpp" startline="400" endline="412">Find</references>
        <references refid="class_c_stormnode_man_1a918a4ccb668808449809a77adc036301" compoundref="stormnodeman_8cpp" startline="229" endline="244">AskForSN</references>
        <references refid="class_c_net_addr_1a81b190a7e0b05b93bf3097ba43e5cec1" compoundref="netbase_8cpp" startline="650" endline="656">CNetAddr::IsRFC1918</references>
        <references refid="class_c_net_addr_1a6cfa18f323424408cf7ace36c9a7c2e2" compoundref="netbase_8cpp" startline="729" endline="746">CNetAddr::IsLocal</references>
        <references refid="chainparams_8cpp_1ace5c5b706d71a324a417dd2db394fd4a" compoundref="chainparams_8cpp" startline="186" endline="188">Params</references>
        <references refid="class_c_chain_params_1a90dc493ec0c0325c98c3ac06eb99862b">CChainParams::NetworkID</references>
        <references refid="class_c_chain_params_1a5c4bb1d7c0205399ff06ee58fab7f176ab64dab5901e9dc8c7bf79daf9f7a2e1f" compoundref="chainparams_8h" startline="39">CChainParams::MAIN</references>
        <references refid="util_8cpp_1a46fac5fba8ba905b5f9acb364f5d8c6f" compoundref="util_8cpp" startline="1352" endline="1357">GetTime</references>
        <references refid="class_c_stormnode_1a31e0681a92d1f4d0da756b680c695d66" compoundref="stormnode_8h" startline="123">CStormnode::addr</references>
        <references refid="class_c_stormnode_1a065cd7423a76fab999a3afdcc356ca91" compoundref="stormnode_8h" startline="242" endline="245">CStormnode::IsEnabled</references>
        <references refid="class_c_service_1a336f9848fe9364e260c76499be0351a5" compoundref="netbase_8cpp" startline="1222" endline="1225">CService::ToString</references>
        <references refid="class_c_stormnode_1a62f5b0f436ca313afd612b07d687127f" compoundref="stormnode_8h" startline="122">CStormnode::vin</references>
        <references refid="cache_8cc_1a11ecb029164e055f28f4123ce3748862" compoundref="cache_8cc" startline="34">hash</references>
        <references refid="class_c_stormnode_broadcast_1aec7747051b1004f1532817aba1da1a4c" compoundref="stormnode_8h" startline="313" endline="318">CStormnodeBroadcast::GetHash</references>
        <references refid="class_c_node_1a7cef2333aa8776127a7e7fcab659eb6a" compoundref="net_8h" startline="494" endline="501">CNode::PushInventory</references>
        <references refid="protocol_8h_1ac36f475ca5b446f4fde4c9b90bec77c8ab71287146f20951917e47c06023ae400" compoundref="protocol_8h" startline="156">MSG_STORMNODE_ANNOUNCE</references>
        <references refid="class_c_node_1a204fda3d33404cb37698c085b1583ab2" compoundref="net_8h" startline="583" endline="595">CNode::PushMessage</references>
      </memberdef>
      <memberdef kind="function" id="class_c_stormnode_man_1ad15cbc672903cce82c757118b74c267c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>int CStormnodeMan::size</definition>
        <argsstring>()</argsstring>
        <name>size</name>
        <briefdescription>
<para>Return the number of (unique) Stormnodes. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/stormnodeman.h" line="138" column="1" bodyfile="/home/dev/ds-160209/src/stormnodeman.h" bodystart="138" bodyend="138"/>
        <referencedby refid="class_client_model_1a7d932efdb3a5722ff32f99abb3ab0325" compoundref="clientmodel_8cpp" startline="59" endline="62">ClientModel::getStormnodeCountString</referencedby>
        <referencedby refid="rpcstormnode_8cpp_1a1b562b4a6a627758a7c1080f23a82aa0" compoundref="rpcstormnode_8cpp" startline="81" endline="471">stormnode</referencedby>
        <referencedby refid="class_c_sandstorm_pool_1acf0b5b0e5703c88b7d3c9cb121ec6533" compoundref="sandstorm_8cpp" startline="38" endline="374">CSandstormPool::ProcessMessageSandstorm</referencedby>
        <referencedby refid="class_c_sandstorm_pool_1a459d1986058ad736773fa9857390ba96" compoundref="sandstorm_8cpp" startline="1353" endline="1625">CSandstormPool::DoAutomaticDenominating</referencedby>
        <referencedby refid="class_c_stormnode_payments_1a0113fb8a5dc2e0b0efd0b8180535f9d0" compoundref="stormnode-payments_8cpp" startline="610" endline="632">CStormnodePayments::CleanPaymentList</referencedby>
        <referencedby refid="class_c_stormnode_man_1aa4a3ed2fe6508a7922e7b7bd1cbf89c3" compoundref="stormnodeman_8cpp" startline="211" endline="227">Add</referencedby>
        <referencedby refid="class_c_stormnode_man_1a6d8c3a832ea7d6f4780a59e2ae0441b8" compoundref="stormnodeman_8cpp" startline="255" endline="350">CheckAndRemove</referencedby>
        <referencedby refid="class_c_stormnode_man_1ad1732f409f53dc6186c6bb40894f1ed5" compoundref="stormnodeman_8cpp" startline="805" endline="818">Remove</referencedby>
      </memberdef>
      <memberdef kind="function" id="class_c_stormnode_man_1a5c49bb4788cad79574d90fdca8ea7464" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string CStormnodeMan::ToString</definition>
        <argsstring>() const </argsstring>
        <name>ToString</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/stormnodeman.h" line="140" column="1" bodyfile="/home/dev/ds-160209/src/stormnodeman.cpp" bodystart="820" bodyend="831"/>
        <references refid="class_c_stormnode_man_1a28c2a3dcb6098e416de7b1758b8d48da" compoundref="stormnodeman_8h" startline="74">nSsqCount</references>
        <referencedby refid="init_8h_1a1a4c1bfbf6ba1db77e988b89b9cadfd3" compoundref="init_8cpp" startline="375" endline="1285">AppInit2</referencedby>
        <referencedby refid="class_c_stormnode_d_b_1a574f76256d8032a4c4e437d800d3795b" compoundref="stormnodeman_8cpp" startline="91" endline="176">CStormnodeDB::Read</referencedby>
      </memberdef>
      <memberdef kind="function" id="class_c_stormnode_man_1ad1732f409f53dc6186c6bb40894f1ed5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void CStormnodeMan::Remove</definition>
        <argsstring>(CTxIn vin)</argsstring>
        <name>Remove</name>
        <param>
          <type><ref refid="class_c_tx_in" kindref="compound">CTxIn</ref></type>
          <declname>vin</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/stormnodeman.h" line="142" column="1" bodyfile="/home/dev/ds-160209/src/stormnodeman.cpp" bodystart="805" bodyend="818"/>
        <references refid="sync_8h_1a911fe23f057c2fe5aad629162d6c99d0" compoundref="sync_8h" startline="159">LOCK</references>
        <references refid="class_c_stormnode_man_1ad15cbc672903cce82c757118b74c267c" compoundref="stormnodeman_8h" startline="138" endline="138">size</references>
        <referencedby refid="class_c_stormnode_broadcast_1ac182349ba784e20ce826eda23a239e3c" compoundref="stormnode_8cpp" startline="424" endline="507">CStormnodeBroadcast::CheckInputsAndAdd</referencedby>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="/home/dev/ds-160209/src/stormnodeman.h" line="50" column="1" bodyfile="/home/dev/ds-160209/src/stormnodeman.h" bodystart="49" bodyend="144"/>
    <listofallmembers>
      <member refid="class_c_stormnode_man_1aa4a3ed2fe6508a7922e7b7bd1cbf89c3" prot="public" virt="non-virtual"><scope>CStormnodeMan</scope><name>Add</name></member>
      <member refid="class_c_stormnode_man_1a3a52c5c9b8e3d7da4cb5c649cb9a6ca3" prot="public" virt="non-virtual"><scope>CStormnodeMan</scope><name>ADD_SERIALIZE_METHODS</name></member>
      <member refid="class_c_stormnode_man_1a918a4ccb668808449809a77adc036301" prot="public" virt="non-virtual"><scope>CStormnodeMan</scope><name>AskForSN</name></member>
      <member refid="class_c_stormnode_man_1a2e0f73af79892b3f86b7d1b07eaa85ce" prot="public" virt="non-virtual"><scope>CStormnodeMan</scope><name>Check</name></member>
      <member refid="class_c_stormnode_man_1a6d8c3a832ea7d6f4780a59e2ae0441b8" prot="public" virt="non-virtual"><scope>CStormnodeMan</scope><name>CheckAndRemove</name></member>
      <member refid="class_c_stormnode_man_1aef04ea77a6774bf594f205362ba8f91d" prot="public" virt="non-virtual"><scope>CStormnodeMan</scope><name>Clear</name></member>
      <member refid="class_c_stormnode_man_1a02b9b11565e19f2c9dafbe132341fabd" prot="public" virt="non-virtual"><scope>CStormnodeMan</scope><name>CountEnabled</name></member>
      <member refid="class_c_stormnode_man_1af95a3624b7cb77e13ae08c809dc0e108" prot="private" virt="non-virtual"><scope>CStormnodeMan</scope><name>cs</name></member>
      <member refid="class_c_stormnode_man_1ae3dcad3baeba1ded45b105ca7ba76588" prot="private" virt="non-virtual"><scope>CStormnodeMan</scope><name>cs_process_message</name></member>
      <member refid="class_c_stormnode_man_1a72855bd5da6330e45c0964f6e1f9ade1" prot="public" virt="non-virtual"><scope>CStormnodeMan</scope><name>CStormnodeMan</name></member>
      <member refid="class_c_stormnode_man_1a0870cfe9ca46157c0e6ad9cf9f9cc1d7" prot="public" virt="non-virtual"><scope>CStormnodeMan</scope><name>CStormnodeMan</name></member>
      <member refid="class_c_stormnode_man_1a346025e5a78a04ddfa80252ea1433c72" prot="public" virt="non-virtual"><scope>CStormnodeMan</scope><name>Find</name></member>
      <member refid="class_c_stormnode_man_1a64b6022d93220e65e739c5cf8ba74918" prot="public" virt="non-virtual"><scope>CStormnodeMan</scope><name>Find</name></member>
      <member refid="class_c_stormnode_man_1a8daba6b955faaf839f9441b754bd7eef" prot="public" virt="non-virtual"><scope>CStormnodeMan</scope><name>Find</name></member>
      <member refid="class_c_stormnode_man_1a24417dae3da8762e9be495f25b0a6d30" prot="public" virt="non-virtual"><scope>CStormnodeMan</scope><name>FindRandomNotInVec</name></member>
      <member refid="class_c_stormnode_man_1aad6c3131e73e2b686f3847148b536448" prot="public" virt="non-virtual"><scope>CStormnodeMan</scope><name>GetCurrentStormNode</name></member>
      <member refid="class_c_stormnode_man_1a7002dd29b10a0db885c361f1d9981de8" prot="public" virt="non-virtual"><scope>CStormnodeMan</scope><name>GetFullStormnodeVector</name></member>
      <member refid="class_c_stormnode_man_1aeaaefff98af62a3d79d72e23f5539a72" prot="public" virt="non-virtual"><scope>CStormnodeMan</scope><name>GetNextStormnodeInQueueForPayment</name></member>
      <member refid="class_c_stormnode_man_1af631f4c124f3022e4c388d759ca69605" prot="public" virt="non-virtual"><scope>CStormnodeMan</scope><name>GetStormnodeByRank</name></member>
      <member refid="class_c_stormnode_man_1ad1fb56e4ee364e2b18bab57210f3f3cd" prot="public" virt="non-virtual"><scope>CStormnodeMan</scope><name>GetStormnodeRank</name></member>
      <member refid="class_c_stormnode_man_1a5337440744bbc51b2e7a9752c3613a26" prot="public" virt="non-virtual"><scope>CStormnodeMan</scope><name>GetStormnodeRanks</name></member>
      <member refid="class_c_stormnode_man_1a320b85dcbbc8f01a412c96b23bca5424" prot="public" virt="non-virtual"><scope>CStormnodeMan</scope><name>mapSeenStormnodeBroadcast</name></member>
      <member refid="class_c_stormnode_man_1a9d4e8bbd492630f16b61eec58b722a86" prot="public" virt="non-virtual"><scope>CStormnodeMan</scope><name>mapSeenStormnodePing</name></member>
      <member refid="class_c_stormnode_man_1ad4f1f1027522a5fa7d8e35714b90c3d3" prot="private" virt="non-virtual"><scope>CStormnodeMan</scope><name>mAskedUsForStormnodeList</name></member>
      <member refid="class_c_stormnode_man_1a2b23ea4d62ceb28a7b4d859180994754" prot="private" virt="non-virtual"><scope>CStormnodeMan</scope><name>mWeAskedForStormnodeList</name></member>
      <member refid="class_c_stormnode_man_1a8068dc932793e4c2eaf4682706c04485" prot="private" virt="non-virtual"><scope>CStormnodeMan</scope><name>mWeAskedForStormnodeListEntry</name></member>
      <member refid="class_c_stormnode_man_1a28c2a3dcb6098e416de7b1758b8d48da" prot="public" virt="non-virtual"><scope>CStormnodeMan</scope><name>nSsqCount</name></member>
      <member refid="class_c_stormnode_man_1ae30d0b9b493e23c3d14ec48c77be7b6f" prot="public" virt="non-virtual"><scope>CStormnodeMan</scope><name>ProcessMessage</name></member>
      <member refid="class_c_stormnode_man_1a52708159ad91808d18a0b6082ed6daca" prot="public" virt="non-virtual"><scope>CStormnodeMan</scope><name>ProcessStormnodeConnections</name></member>
      <member refid="class_c_stormnode_man_1ad1732f409f53dc6186c6bb40894f1ed5" prot="public" virt="non-virtual"><scope>CStormnodeMan</scope><name>Remove</name></member>
      <member refid="class_c_stormnode_man_1a2eb7be1ad46598e33b6c60248bc7b7e1" prot="public" virt="non-virtual"><scope>CStormnodeMan</scope><name>SerializationOp</name></member>
      <member refid="class_c_stormnode_man_1ad15cbc672903cce82c757118b74c267c" prot="public" virt="non-virtual"><scope>CStormnodeMan</scope><name>size</name></member>
      <member refid="class_c_stormnode_man_1a3f8f9f86f01df701533b544903b55113" prot="public" virt="non-virtual"><scope>CStormnodeMan</scope><name>SsegUpdate</name></member>
      <member refid="class_c_stormnode_man_1a5c49bb4788cad79574d90fdca8ea7464" prot="public" virt="non-virtual"><scope>CStormnodeMan</scope><name>ToString</name></member>
      <member refid="class_c_stormnode_man_1acb373fe7d56e3b1ac5d31d2d7e96e35c" prot="private" virt="non-virtual"><scope>CStormnodeMan</scope><name>vStormnodes</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
