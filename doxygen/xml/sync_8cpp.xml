<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.9.1">
  <compounddef id="sync_8cpp" kind="file" language="C++">
    <compoundname>sync.cpp</compoundname>
    <includes refid="sync_8h" local="yes">sync.h</includes>
    <includes refid="util_8h" local="yes">util.h</includes>
    <includes local="no">boost/foreach.hpp</includes>
    <incdepgraph>
      <node id="25548">
        <label>list</label>
      </node>
      <node id="25516">
        <label>boost/thread/mutex.hpp</label>
      </node>
      <node id="25547">
        <label>amount.h</label>
        <link refid="amount_8h"/>
        <childnode refid="25522" relation="include">
        </childnode>
        <childnode refid="25536" relation="include">
        </childnode>
        <childnode refid="25523" relation="include">
        </childnode>
      </node>
      <node id="25514">
        <label>boost/thread/condition_variable.hpp</label>
      </node>
      <node id="25528">
        <label>limits</label>
      </node>
      <node id="25559">
        <label>openssl/rand.h</label>
      </node>
      <node id="25533">
        <label>boost/tuple/tuple.hpp</label>
      </node>
      <node id="25517">
        <label>boost/thread/recursive_mutex.hpp</label>
      </node>
      <node id="25541">
        <label>version.h</label>
        <link refid="version_8h"/>
        <childnode refid="25542" relation="include">
        </childnode>
        <childnode refid="25523" relation="include">
        </childnode>
      </node>
      <node id="25538">
        <label>sys/mman.h</label>
      </node>
      <node id="25536">
        <label>stdlib.h</label>
      </node>
      <node id="25561">
        <label>boost/foreach.hpp</label>
      </node>
      <node id="25558">
        <label>openssl/crypto.h</label>
      </node>
      <node id="25554">
        <label>boost/date_time/posix_time/posix_time_types.hpp</label>
      </node>
      <node id="25527">
        <label>cassert</label>
      </node>
      <node id="25546">
        <label>stdexcept</label>
      </node>
      <node id="25518">
        <label>util.h</label>
        <link refid="util_8h"/>
        <childnode refid="25519" relation="include">
        </childnode>
        <childnode refid="25520" relation="include">
        </childnode>
        <childnode refid="25521" relation="include">
        </childnode>
        <childnode refid="25522" relation="include">
        </childnode>
        <childnode refid="25543" relation="include">
        </childnode>
        <childnode refid="25547" relation="include">
        </childnode>
        <childnode refid="25525" relation="include">
        </childnode>
        <childnode refid="25548" relation="include">
        </childnode>
        <childnode refid="25549" relation="include">
        </childnode>
        <childnode refid="25524" relation="include">
        </childnode>
        <childnode refid="25523" relation="include">
        </childnode>
        <childnode refid="25550" relation="include">
        </childnode>
        <childnode refid="25551" relation="include">
        </childnode>
        <childnode refid="25552" relation="include">
        </childnode>
        <childnode refid="25553" relation="include">
        </childnode>
        <childnode refid="25554" relation="include">
        </childnode>
        <childnode refid="25555" relation="include">
        </childnode>
        <childnode refid="25556" relation="include">
        </childnode>
        <childnode refid="25557" relation="include">
        </childnode>
        <childnode refid="25558" relation="include">
        </childnode>
        <childnode refid="25559" relation="include">
        </childnode>
        <childnode refid="25560" relation="include">
        </childnode>
        <childnode refid="25529" relation="include">
        </childnode>
      </node>
      <node id="25553">
        <label>boost/date_time/gregorian/gregorian_types.hpp</label>
      </node>
      <node id="25523">
        <label>string</label>
      </node>
      <node id="25525">
        <label>map</label>
      </node>
      <node id="25550">
        <label>boost/thread.hpp</label>
      </node>
      <node id="25522">
        <label>serialize.h</label>
        <link refid="serialize_8h"/>
        <childnode refid="25523" relation="include">
        </childnode>
        <childnode refid="25524" relation="include">
        </childnode>
        <childnode refid="25525" relation="include">
        </childnode>
        <childnode refid="25526" relation="include">
        </childnode>
        <childnode refid="25527" relation="include">
        </childnode>
        <childnode refid="25528" relation="include">
        </childnode>
        <childnode refid="25529" relation="include">
        </childnode>
        <childnode refid="25530" relation="include">
        </childnode>
        <childnode refid="25531" relation="include">
        </childnode>
        <childnode refid="25532" relation="include">
        </childnode>
        <childnode refid="25533" relation="include">
        </childnode>
        <childnode refid="25534" relation="include">
        </childnode>
        <childnode refid="25541" relation="include">
        </childnode>
      </node>
      <node id="25539">
        <label>limits.h</label>
      </node>
      <node id="25513">
        <label>threadsafety.h</label>
        <link refid="threadsafety_8h"/>
      </node>
      <node id="25521">
        <label>sys/resource.h</label>
      </node>
      <node id="25555">
        <label>openssl/bio.h</label>
      </node>
      <node id="25519">
        <label>sys/types.h</label>
      </node>
      <node id="25537">
        <label>string.h</label>
      </node>
      <node id="25542">
        <label>clientversion.h</label>
        <link refid="clientversion_8h"/>
      </node>
      <node id="25531">
        <label>cstdio</label>
      </node>
      <node id="25515">
        <label>boost/thread/locks.hpp</label>
      </node>
      <node id="25557">
        <label>openssl/buffer.h</label>
      </node>
      <node id="25532">
        <label>boost/type_traits/is_fundamental.hpp</label>
      </node>
      <node id="25552">
        <label>boost/filesystem/path.hpp</label>
      </node>
      <node id="25540">
        <label>unistd.h</label>
      </node>
      <node id="25524">
        <label>vector</label>
      </node>
      <node id="25551">
        <label>boost/filesystem.hpp</label>
      </node>
      <node id="25549">
        <label>utility</label>
      </node>
      <node id="25545">
        <label>sstream</label>
      </node>
      <node id="25556">
        <label>openssl/evp.h</label>
      </node>
      <node id="25543">
        <label>tinyformat.h</label>
        <link refid="tinyformat_8h"/>
        <childnode refid="25527" relation="include">
        </childnode>
        <childnode refid="25544" relation="include">
        </childnode>
        <childnode refid="25545" relation="include">
        </childnode>
        <childnode refid="25546" relation="include">
        </childnode>
      </node>
      <node id="25529">
        <label>stdint.h</label>
        <link refid="stdint_8h"/>
      </node>
      <node id="25520">
        <label>sys/time.h</label>
      </node>
      <node id="25544">
        <label>iostream</label>
      </node>
      <node id="25511">
        <label>/home/dev/ds-160209/src/sync.cpp</label>
        <link refid="sync.cpp"/>
        <childnode refid="25512" relation="include">
        </childnode>
        <childnode refid="25518" relation="include">
        </childnode>
        <childnode refid="25561" relation="include">
        </childnode>
      </node>
      <node id="25560">
        <label>openssl/bn.h</label>
      </node>
      <node id="25534">
        <label>allocators.h</label>
        <link refid="allocators_8h"/>
        <childnode refid="25535" relation="include">
        </childnode>
        <childnode refid="25537" relation="include">
        </childnode>
        <childnode refid="25523" relation="include">
        </childnode>
        <childnode refid="25516" relation="include">
        </childnode>
        <childnode refid="25525" relation="include">
        </childnode>
        <childnode refid="25538" relation="include">
        </childnode>
        <childnode refid="25539" relation="include">
        </childnode>
        <childnode refid="25540" relation="include">
        </childnode>
      </node>
      <node id="25526">
        <label>set</label>
      </node>
      <node id="25535">
        <label>cleanse.h</label>
        <link refid="cleanse_8h"/>
        <childnode refid="25536" relation="include">
        </childnode>
      </node>
      <node id="25530">
        <label>cstring</label>
      </node>
      <node id="25512">
        <label>sync.h</label>
        <link refid="sync_8h"/>
        <childnode refid="25513" relation="include">
        </childnode>
        <childnode refid="25514" relation="include">
        </childnode>
        <childnode refid="25515" relation="include">
        </childnode>
        <childnode refid="25516" relation="include">
        </childnode>
        <childnode refid="25517" relation="include">
        </childnode>
      </node>
    </incdepgraph>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">//<sp/>Copyright<sp/>(c)<sp/>2011-2012<sp/>The<sp/>Bitcoin<sp/>Developers</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Distributed<sp/>under<sp/>the<sp/>MIT/X11<sp/>software<sp/>license,<sp/>see<sp/>the<sp/>accompanying</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="comment">//<sp/>file<sp/>COPYING<sp/>or<sp/>http://www.opensource.org/licenses/mit-license.php.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="sync_8h" kindref="compound">sync.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="util_8h" kindref="compound">util.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;boost/foreach.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>DEBUG_LOCKCONTENTION</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>PrintLockContention(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>pszName,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>pszFile,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nLine)</highlight></codeline>
<codeline lineno="13"><highlight class="normal">{</highlight></codeline>
<codeline lineno="14"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="util_8h_1afc02c0a4258fedfb316be612bb659ba8" kindref="member">LogPrintf</ref>(</highlight><highlight class="stringliteral">&quot;LOCKCONTENTION:<sp/>%s\n&quot;</highlight><highlight class="normal">,<sp/>pszName);</highlight></codeline>
<codeline lineno="15"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="util_8h_1afc02c0a4258fedfb316be612bb659ba8" kindref="member">LogPrintf</ref>(</highlight><highlight class="stringliteral">&quot;Locker:<sp/>%s:%d\n&quot;</highlight><highlight class="normal">,<sp/>pszFile,<sp/>nLine);</highlight></codeline>
<codeline lineno="16"><highlight class="normal">}</highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>DEBUG_LOCKCONTENTION<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>DEBUG_LOCKORDER</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Early<sp/>deadlock<sp/>detection.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Problem<sp/>being<sp/>solved:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>Thread<sp/>1<sp/>locks<sp/><sp/>A,<sp/>then<sp/>B,<sp/>then<sp/>C</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>Thread<sp/>2<sp/>locks<sp/><sp/>D,<sp/>then<sp/>C,<sp/>then<sp/>A</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>--&gt;<sp/>may<sp/>result<sp/>in<sp/>deadlock<sp/>between<sp/>the<sp/>two<sp/>threads,<sp/>depending<sp/>on<sp/>when<sp/>they<sp/>run.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Solution<sp/>implemented<sp/>here:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Keep<sp/>track<sp/>of<sp/>pairs<sp/>of<sp/>locks:<sp/>(A<sp/>before<sp/>B),<sp/>(A<sp/>before<sp/>C),<sp/>etc.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Complain<sp/>if<sp/>any<sp/>thread<sp/>tries<sp/>to<sp/>lock<sp/>in<sp/>a<sp/>different<sp/>order.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">CLockLocation</highlight></codeline>
<codeline lineno="32"><highlight class="normal">{</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/>CLockLocation(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>pszName,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>pszFile,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nLine)</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mutexName<sp/>=<sp/>pszName;</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sourceFile<sp/>=<sp/>pszFile;</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sourceLine<sp/>=<sp/>nLine;</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>ToString()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="41"><highlight class="keyword"><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>mutexName+</highlight><highlight class="stringliteral">&quot;<sp/><sp/>&quot;</highlight><highlight class="normal">+sourceFile+</highlight><highlight class="stringliteral">&quot;:&quot;</highlight><highlight class="normal">+<ref refid="util_8h_1a565b3ea015b133d01dc52b4ec6e45f07" kindref="member">itostr</ref>(sourceLine);</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>MutexName()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>mutexName;<sp/>}</highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>mutexName;</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>sourceFile;</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>sourceLine;</highlight></codeline>
<codeline lineno="51"><highlight class="normal">};</highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>std::vector&lt;<sp/>std::pair&lt;void*,<sp/>CLockLocation&gt;<sp/>&gt;<sp/>LockStack;</highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>boost::mutex<sp/>dd_mutex;</highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>std::map&lt;std::pair&lt;void*,<sp/>void*&gt;,<sp/>LockStack&gt;<sp/>lockorders;</highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>boost::thread_specific_ptr&lt;LockStack&gt;<sp/>lockstack;</highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>potential_deadlock_detected(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::pair&lt;void*,<sp/>void*&gt;&amp;<sp/>mismatch,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>LockStack&amp;<sp/>s1,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>LockStack&amp;<sp/>s2)</highlight></codeline>
<codeline lineno="61"><highlight class="normal">{</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="util_8h_1afc02c0a4258fedfb316be612bb659ba8" kindref="member">LogPrintf</ref>(</highlight><highlight class="stringliteral">&quot;POTENTIAL<sp/>DEADLOCK<sp/>DETECTED\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="util_8h_1afc02c0a4258fedfb316be612bb659ba8" kindref="member">LogPrintf</ref>(</highlight><highlight class="stringliteral">&quot;Previous<sp/>lock<sp/>order<sp/>was:\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/>BOOST_FOREACH(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="util_8h_1aa3052ab82a2ba880ea3e30b3357c8820" kindref="member">PAIRTYPE</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*,<sp/>CLockLocation)&amp;<sp/>i,<sp/>s2)</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(i.first<sp/>==<sp/>mismatch.first)<sp/><ref refid="util_8h_1afc02c0a4258fedfb316be612bb659ba8" kindref="member">LogPrintf</ref>(</highlight><highlight class="stringliteral">&quot;<sp/>(1)&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(i.first<sp/>==<sp/>mismatch.second)<sp/><ref refid="util_8h_1afc02c0a4258fedfb316be612bb659ba8" kindref="member">LogPrintf</ref>(</highlight><highlight class="stringliteral">&quot;<sp/>(2)&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="util_8h_1afc02c0a4258fedfb316be612bb659ba8" kindref="member">LogPrintf</ref>(</highlight><highlight class="stringliteral">&quot;<sp/>%s\n&quot;</highlight><highlight class="normal">,<sp/>i.second.ToString());</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="util_8h_1afc02c0a4258fedfb316be612bb659ba8" kindref="member">LogPrintf</ref>(</highlight><highlight class="stringliteral">&quot;Current<sp/>lock<sp/>order<sp/>is:\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/>BOOST_FOREACH(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="util_8h_1aa3052ab82a2ba880ea3e30b3357c8820" kindref="member">PAIRTYPE</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*,<sp/>CLockLocation)&amp;<sp/>i,<sp/>s1)</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(i.first<sp/>==<sp/>mismatch.first)<sp/><ref refid="util_8h_1afc02c0a4258fedfb316be612bb659ba8" kindref="member">LogPrintf</ref>(</highlight><highlight class="stringliteral">&quot;<sp/>(1)&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(i.first<sp/>==<sp/>mismatch.second)<sp/><ref refid="util_8h_1afc02c0a4258fedfb316be612bb659ba8" kindref="member">LogPrintf</ref>(</highlight><highlight class="stringliteral">&quot;<sp/>(2)&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="util_8h_1afc02c0a4258fedfb316be612bb659ba8" kindref="member">LogPrintf</ref>(</highlight><highlight class="stringliteral">&quot;<sp/>%s\n&quot;</highlight><highlight class="normal">,<sp/>i.second.ToString());</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="77"><highlight class="normal">}</highlight></codeline>
<codeline lineno="78"><highlight class="normal"></highlight></codeline>
<codeline lineno="79"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>push_lock(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>c,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>CLockLocation&amp;<sp/>locklocation,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>fTry)</highlight></codeline>
<codeline lineno="80"><highlight class="normal">{</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(lockstack.get()<sp/>==<sp/>NULL)</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lockstack.reset(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>LockStack);</highlight></codeline>
<codeline lineno="83"><highlight class="normal"></highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/>LogPrint(</highlight><highlight class="stringliteral">&quot;lock&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Locking:<sp/>%s\n&quot;</highlight><highlight class="normal">,<sp/>locklocation.ToString());</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/>dd_mutex.lock();</highlight></codeline>
<codeline lineno="86"><highlight class="normal"></highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/>(*lockstack).push_back(std::make_pair(c,<sp/>locklocation));</highlight></codeline>
<codeline lineno="88"><highlight class="normal"></highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!fTry)<sp/>{</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>BOOST_FOREACH(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="util_8h_1aa3052ab82a2ba880ea3e30b3357c8820" kindref="member">PAIRTYPE</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*,<sp/>CLockLocation)&amp;<sp/>i,<sp/>(*lockstack))<sp/>{</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(i.first<sp/>==<sp/>c)<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="92"><highlight class="normal"></highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::pair&lt;void*,<sp/>void*&gt;<sp/>p1<sp/>=<sp/>std::make_pair(i.first,<sp/>c);</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(lockorders.count(p1))</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lockorders[p1]<sp/>=<sp/>(*lockstack);</highlight></codeline>
<codeline lineno="97"><highlight class="normal"></highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::pair&lt;void*,<sp/>void*&gt;<sp/>p2<sp/>=<sp/>std::make_pair(c,<sp/>i.first);</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(lockorders.count(p2))</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>potential_deadlock_detected(p1,<sp/>lockorders[p2],<sp/>lockorders[p1]);</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/>dd_mutex.unlock();</highlight></codeline>
<codeline lineno="107"><highlight class="normal">}</highlight></codeline>
<codeline lineno="108"><highlight class="normal"></highlight></codeline>
<codeline lineno="109"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>pop_lock()</highlight></codeline>
<codeline lineno="110"><highlight class="normal">{</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="util_8cpp_1a2ba7badc843121dde40a6f109d224a42" kindref="member">fDebug</ref>)</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>CLockLocation&amp;<sp/>locklocation<sp/>=<sp/>(*lockstack).rbegin()-&gt;second;</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>LogPrint(</highlight><highlight class="stringliteral">&quot;lock&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Unlocked:<sp/>%s\n&quot;</highlight><highlight class="normal">,<sp/>locklocation.ToString());</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/>dd_mutex.lock();</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/>(*lockstack).pop_back();</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/>dd_mutex.unlock();</highlight></codeline>
<codeline lineno="119"><highlight class="normal">}</highlight></codeline>
<codeline lineno="120"><highlight class="normal"></highlight></codeline>
<codeline lineno="121"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>EnterCritical(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>pszName,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>pszFile,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nLine,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>cs,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>fTry)</highlight></codeline>
<codeline lineno="122"><highlight class="normal">{</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/>push_lock(cs,<sp/>CLockLocation(pszName,<sp/>pszFile,<sp/>nLine),<sp/>fTry);</highlight></codeline>
<codeline lineno="124"><highlight class="normal">}</highlight></codeline>
<codeline lineno="125"><highlight class="normal"></highlight></codeline>
<codeline lineno="126"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>LeaveCritical()</highlight></codeline>
<codeline lineno="127"><highlight class="normal">{</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/>pop_lock();</highlight></codeline>
<codeline lineno="129"><highlight class="normal">}</highlight></codeline>
<codeline lineno="130"><highlight class="normal"></highlight></codeline>
<codeline lineno="131"><highlight class="normal">std::string<sp/>LocksHeld()</highlight></codeline>
<codeline lineno="132"><highlight class="normal">{</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>result;</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/>BOOST_FOREACH(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="util_8h_1aa3052ab82a2ba880ea3e30b3357c8820" kindref="member">PAIRTYPE</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*,<sp/>CLockLocation)&amp;i,<sp/>*lockstack)</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result<sp/>+=<sp/>i.second.ToString()<sp/>+<sp/><ref refid="namespacestd" kindref="compound">std</ref>::</highlight><highlight class="keywordtype">string</highlight><highlight class="normal">(&quot;\n&quot;);</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>result;</highlight></codeline>
<codeline lineno="137"><highlight class="normal">}</highlight></codeline>
<codeline lineno="138"><highlight class="normal"></highlight></codeline>
<codeline lineno="139"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>AssertLockHeldInternal(const<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*pszName,<sp/>const<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>pszFile,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nLine,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*cs)</highlight></codeline>
<codeline lineno="140"><highlight class="normal">{</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/>BOOST_FOREACH(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="util_8h_1aa3052ab82a2ba880ea3e30b3357c8820" kindref="member">PAIRTYPE</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*,<sp/>CLockLocation)&amp;i,<sp/>*lockstack)</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(i.first<sp/>==<sp/>cs)<sp/>return;</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/>fprintf(stderr,<sp/>&quot;Assertion<sp/>failed:<sp/>lock<sp/>%s<sp/>not<sp/>held<sp/>in<sp/>%s:%i;<sp/>locks<sp/>held:\n%s&quot;,</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pszName,<sp/>pszFile,<sp/>nLine,<sp/>LocksHeld().c_str());</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/>abort();</highlight></codeline>
<codeline lineno="146"><highlight class="normal">}</highlight></codeline>
<codeline lineno="147"><highlight class="normal"></highlight></codeline>
<codeline lineno="148"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>DEBUG_LOCKORDER<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
    </programlisting>
    <location file="/home/dev/ds-160209/src/sync.cpp"/>
  </compounddef>
</doxygen>
