<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.9.1">
  <compounddef id="field__5x52__impl_8h" kind="file" language="C++">
    <compoundname>field_5x52_impl.h</compoundname>
    <includes local="no">string.h</includes>
    <includes refid="secp256k1_2src_2util_8h" local="yes">util.h</includes>
    <includes refid="num_8h" local="yes">num.h</includes>
    <includes refid="field_8h" local="yes">field.h</includes>
    <includes refid="field__5x52__int128__impl_8h" local="yes">field_5x52_int128_impl.h</includes>
    <incdepgraph>
      <node id="22407">
        <label>stdlib.h</label>
      </node>
      <node id="22410">
        <label>num.h</label>
        <link refid="num_8h"/>
      </node>
      <node id="22404">
        <label>/home/dev/ds-160209/src/secp256k1/src/field_5x52_impl.h</label>
        <link refid="field_5x52_impl.h"/>
        <childnode refid="22405" relation="include">
        </childnode>
        <childnode refid="22406" relation="include">
        </childnode>
        <childnode refid="22410" relation="include">
        </childnode>
        <childnode refid="22411" relation="include">
        </childnode>
        <childnode refid="22412" relation="include">
        </childnode>
      </node>
      <node id="22405">
        <label>string.h</label>
      </node>
      <node id="22406">
        <label>util.h</label>
        <link refid="secp256k1_2src_2util_8h"/>
        <childnode refid="22407" relation="include">
        </childnode>
        <childnode refid="22408" relation="include">
        </childnode>
        <childnode refid="22409" relation="include">
        </childnode>
      </node>
      <node id="22412">
        <label>field_5x52_int128_impl.h</label>
        <link refid="field__5x52__int128__impl_8h"/>
        <childnode refid="22408" relation="include">
        </childnode>
      </node>
      <node id="22411">
        <label>field.h</label>
        <link refid="field_8h"/>
      </node>
      <node id="22408">
        <label>stdint.h</label>
        <link refid="stdint_8h"/>
      </node>
      <node id="22409">
        <label>stdio.h</label>
      </node>
    </incdepgraph>
      <sectiondef kind="func">
      <memberdef kind="function" id="field__5x52__impl_8h_1a52fb44274d87bef8800379942f4424a1" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void secp256k1_fe_verify</definition>
        <argsstring>(const secp256k1_fe *a)</argsstring>
        <name>secp256k1_fe_verify</name>
        <param>
          <type>const <ref refid="structsecp256k1__fe" kindref="compound">secp256k1_fe</ref> *</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Implements arithmetic modulo FFFFFFFF FFFFFFFF FFFFFFFF FFFFFFFF FFFFFFFF FFFFFFFF FFFFFFFE FFFFFC2F, represented as 5 uint64_t&apos;s in base 2^52. The values are allowed to contain &gt;52 each. In particular, each FieldElem has a &apos;magnitude&apos; associated with it. Internally, a magnitude M means each element is at most M*(2^53-1), except the most significant one, which is limited to M*(2^49-1). All operations accept any input with magnitude at most M, and have different rules for propagating magnitude to their output. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/secp256k1/src/field_5x52_impl.h" line="54" column="1" bodyfile="/home/dev/ds-160209/src/secp256k1/src/field_5x52_impl.h" bodystart="54" bodyend="56"/>
      </memberdef>
      <memberdef kind="function" id="field__5x52__impl_8h_1a8e925e94d5a7330d2ae68f6642d0c7b9" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void secp256k1_fe_normalize</definition>
        <argsstring>(secp256k1_fe *r)</argsstring>
        <name>secp256k1_fe_normalize</name>
        <param>
          <type><ref refid="structsecp256k1__fe" kindref="compound">secp256k1_fe</ref> *</type>
          <declname>r</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/secp256k1/src/field_5x52_impl.h" line="59" column="1" bodyfile="/home/dev/ds-160209/src/secp256k1/src/field_5x52_impl.h" bodystart="59" bodyend="100"/>
      </memberdef>
      <memberdef kind="function" id="field__5x52__impl_8h_1a0aaec7df2f708a451a8e1f41a943d8b1" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void secp256k1_fe_normalize_weak</definition>
        <argsstring>(secp256k1_fe *r)</argsstring>
        <name>secp256k1_fe_normalize_weak</name>
        <param>
          <type><ref refid="structsecp256k1__fe" kindref="compound">secp256k1_fe</ref> *</type>
          <declname>r</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/secp256k1/src/field_5x52_impl.h" line="102" column="1" bodyfile="/home/dev/ds-160209/src/secp256k1/src/field_5x52_impl.h" bodystart="102" bodyend="124"/>
      </memberdef>
      <memberdef kind="function" id="field__5x52__impl_8h_1a2d45c987537eadb2923c93aa3af9db71" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void secp256k1_fe_normalize_var</definition>
        <argsstring>(secp256k1_fe *r)</argsstring>
        <name>secp256k1_fe_normalize_var</name>
        <param>
          <type><ref refid="structsecp256k1__fe" kindref="compound">secp256k1_fe</ref> *</type>
          <declname>r</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/secp256k1/src/field_5x52_impl.h" line="126" column="1" bodyfile="/home/dev/ds-160209/src/secp256k1/src/field_5x52_impl.h" bodystart="126" bodyend="168"/>
      </memberdef>
      <memberdef kind="function" id="field__5x52__impl_8h_1ac91a9780fb4f20634c2d5040e9f44936" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>static int secp256k1_fe_normalizes_to_zero</definition>
        <argsstring>(secp256k1_fe *r)</argsstring>
        <name>secp256k1_fe_normalizes_to_zero</name>
        <param>
          <type><ref refid="structsecp256k1__fe" kindref="compound">secp256k1_fe</ref> *</type>
          <declname>r</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/secp256k1/src/field_5x52_impl.h" line="170" column="1" bodyfile="/home/dev/ds-160209/src/secp256k1/src/field_5x52_impl.h" bodystart="170" bodyend="191"/>
      </memberdef>
      <memberdef kind="function" id="field__5x52__impl_8h_1a67adb176b8e6efd2d2475a9d0a199e18" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>static int secp256k1_fe_normalizes_to_zero_var</definition>
        <argsstring>(secp256k1_fe *r)</argsstring>
        <name>secp256k1_fe_normalizes_to_zero_var</name>
        <param>
          <type><ref refid="structsecp256k1__fe" kindref="compound">secp256k1_fe</ref> *</type>
          <declname>r</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/secp256k1/src/field_5x52_impl.h" line="193" column="1" bodyfile="/home/dev/ds-160209/src/secp256k1/src/field_5x52_impl.h" bodystart="193" bodyend="232"/>
      </memberdef>
      <memberdef kind="function" id="field__5x52__impl_8h_1a09de0a9b9315eb138ba2fb9ae390c37b" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="secp256k1_8h_1a7ddc487fd46aee88f21cabedb7268b1e" kindref="member">SECP256K1_INLINE</ref> void</type>
        <definition>static SECP256K1_INLINE void secp256k1_fe_set_int</definition>
        <argsstring>(secp256k1_fe *r, int a)</argsstring>
        <name>secp256k1_fe_set_int</name>
        <param>
          <type><ref refid="structsecp256k1__fe" kindref="compound">secp256k1_fe</ref> *</type>
          <declname>r</declname>
        </param>
        <param>
          <type>int</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/secp256k1/src/field_5x52_impl.h" line="234" column="1" bodyfile="/home/dev/ds-160209/src/secp256k1/src/field_5x52_impl.h" bodystart="234" bodyend="242"/>
      </memberdef>
      <memberdef kind="function" id="field__5x52__impl_8h_1a26a8258f312903d18081c6c15a571140" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="secp256k1_8h_1a7ddc487fd46aee88f21cabedb7268b1e" kindref="member">SECP256K1_INLINE</ref> int</type>
        <definition>static SECP256K1_INLINE int secp256k1_fe_is_zero</definition>
        <argsstring>(const secp256k1_fe *a)</argsstring>
        <name>secp256k1_fe_is_zero</name>
        <param>
          <type>const <ref refid="structsecp256k1__fe" kindref="compound">secp256k1_fe</ref> *</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/secp256k1/src/field_5x52_impl.h" line="244" column="1" bodyfile="/home/dev/ds-160209/src/secp256k1/src/field_5x52_impl.h" bodystart="244" bodyend="251"/>
      </memberdef>
      <memberdef kind="function" id="field__5x52__impl_8h_1a9f95c862e02af8bab643984456ac5585" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="secp256k1_8h_1a7ddc487fd46aee88f21cabedb7268b1e" kindref="member">SECP256K1_INLINE</ref> int</type>
        <definition>static SECP256K1_INLINE int secp256k1_fe_is_odd</definition>
        <argsstring>(const secp256k1_fe *a)</argsstring>
        <name>secp256k1_fe_is_odd</name>
        <param>
          <type>const <ref refid="structsecp256k1__fe" kindref="compound">secp256k1_fe</ref> *</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/secp256k1/src/field_5x52_impl.h" line="253" column="1" bodyfile="/home/dev/ds-160209/src/secp256k1/src/field_5x52_impl.h" bodystart="253" bodyend="259"/>
      </memberdef>
      <memberdef kind="function" id="field__5x52__impl_8h_1aa213f05a02544f894a8829f672b6e4ea" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="secp256k1_8h_1a7ddc487fd46aee88f21cabedb7268b1e" kindref="member">SECP256K1_INLINE</ref> void</type>
        <definition>static SECP256K1_INLINE void secp256k1_fe_clear</definition>
        <argsstring>(secp256k1_fe *a)</argsstring>
        <name>secp256k1_fe_clear</name>
        <param>
          <type><ref refid="structsecp256k1__fe" kindref="compound">secp256k1_fe</ref> *</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/secp256k1/src/field_5x52_impl.h" line="261" column="1" bodyfile="/home/dev/ds-160209/src/secp256k1/src/field_5x52_impl.h" bodystart="261" bodyend="270"/>
      </memberdef>
      <memberdef kind="function" id="field__5x52__impl_8h_1af372f2088796ef5338bb43dbb6dd5277" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>static int secp256k1_fe_cmp_var</definition>
        <argsstring>(const secp256k1_fe *a, const secp256k1_fe *b)</argsstring>
        <name>secp256k1_fe_cmp_var</name>
        <param>
          <type>const <ref refid="structsecp256k1__fe" kindref="compound">secp256k1_fe</ref> *</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="structsecp256k1__fe" kindref="compound">secp256k1_fe</ref> *</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/secp256k1/src/field_5x52_impl.h" line="272" column="1" bodyfile="/home/dev/ds-160209/src/secp256k1/src/field_5x52_impl.h" bodystart="272" bodyend="289"/>
      </memberdef>
      <memberdef kind="function" id="field__5x52__impl_8h_1a5c86a65052e3b135919c00fe2233a43d" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>static int secp256k1_fe_set_b32</definition>
        <argsstring>(secp256k1_fe *r, const unsigned char *a)</argsstring>
        <name>secp256k1_fe_set_b32</name>
        <param>
          <type><ref refid="structsecp256k1__fe" kindref="compound">secp256k1_fe</ref> *</type>
          <declname>r</declname>
        </param>
        <param>
          <type>const unsigned char *</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/secp256k1/src/field_5x52_impl.h" line="291" column="1" bodyfile="/home/dev/ds-160209/src/secp256k1/src/field_5x52_impl.h" bodystart="291" bodyend="311"/>
      </memberdef>
      <memberdef kind="function" id="field__5x52__impl_8h_1abb1017649be14b9ac1823be3c573e542" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void secp256k1_fe_get_b32</definition>
        <argsstring>(unsigned char *r, const secp256k1_fe *a)</argsstring>
        <name>secp256k1_fe_get_b32</name>
        <param>
          <type>unsigned char *</type>
          <declname>r</declname>
        </param>
        <param>
          <type>const <ref refid="structsecp256k1__fe" kindref="compound">secp256k1_fe</ref> *</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Convert a field element to a 32-byte big endian value. Requires the input to be normalized </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/secp256k1/src/field_5x52_impl.h" line="314" column="1" bodyfile="/home/dev/ds-160209/src/secp256k1/src/field_5x52_impl.h" bodystart="314" bodyend="330"/>
      </memberdef>
      <memberdef kind="function" id="field__5x52__impl_8h_1a83eb4b272cebe12d50cce564f6a7f86c" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="secp256k1_8h_1a7ddc487fd46aee88f21cabedb7268b1e" kindref="member">SECP256K1_INLINE</ref> void</type>
        <definition>static SECP256K1_INLINE void secp256k1_fe_negate</definition>
        <argsstring>(secp256k1_fe *r, const secp256k1_fe *a, int m)</argsstring>
        <name>secp256k1_fe_negate</name>
        <param>
          <type><ref refid="structsecp256k1__fe" kindref="compound">secp256k1_fe</ref> *</type>
          <declname>r</declname>
        </param>
        <param>
          <type>const <ref refid="structsecp256k1__fe" kindref="compound">secp256k1_fe</ref> *</type>
          <declname>a</declname>
        </param>
        <param>
          <type>int</type>
          <declname>m</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/secp256k1/src/field_5x52_impl.h" line="332" column="1" bodyfile="/home/dev/ds-160209/src/secp256k1/src/field_5x52_impl.h" bodystart="332" bodyend="347"/>
      </memberdef>
      <memberdef kind="function" id="field__5x52__impl_8h_1a4cedb86cbf177037f187b4161f3a1c0e" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="secp256k1_8h_1a7ddc487fd46aee88f21cabedb7268b1e" kindref="member">SECP256K1_INLINE</ref> void</type>
        <definition>static SECP256K1_INLINE void secp256k1_fe_mul_int</definition>
        <argsstring>(secp256k1_fe *r, int a)</argsstring>
        <name>secp256k1_fe_mul_int</name>
        <param>
          <type><ref refid="structsecp256k1__fe" kindref="compound">secp256k1_fe</ref> *</type>
          <declname>r</declname>
        </param>
        <param>
          <type>int</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/secp256k1/src/field_5x52_impl.h" line="349" column="1" bodyfile="/home/dev/ds-160209/src/secp256k1/src/field_5x52_impl.h" bodystart="349" bodyend="360"/>
      </memberdef>
      <memberdef kind="function" id="field__5x52__impl_8h_1abe12bdeda73ed4f520046c4d462a2f60" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="secp256k1_8h_1a7ddc487fd46aee88f21cabedb7268b1e" kindref="member">SECP256K1_INLINE</ref> void</type>
        <definition>static SECP256K1_INLINE void secp256k1_fe_add</definition>
        <argsstring>(secp256k1_fe *r, const secp256k1_fe *a)</argsstring>
        <name>secp256k1_fe_add</name>
        <param>
          <type><ref refid="structsecp256k1__fe" kindref="compound">secp256k1_fe</ref> *</type>
          <declname>r</declname>
        </param>
        <param>
          <type>const <ref refid="structsecp256k1__fe" kindref="compound">secp256k1_fe</ref> *</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/secp256k1/src/field_5x52_impl.h" line="362" column="1" bodyfile="/home/dev/ds-160209/src/secp256k1/src/field_5x52_impl.h" bodystart="362" bodyend="376"/>
      </memberdef>
      <memberdef kind="function" id="field__5x52__impl_8h_1a542b97d2574d9687c563d002587cf9a2" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void secp256k1_fe_mul</definition>
        <argsstring>(secp256k1_fe *r, const secp256k1_fe *a, const secp256k1_fe *SECP256K1_RESTRICT b)</argsstring>
        <name>secp256k1_fe_mul</name>
        <param>
          <type><ref refid="structsecp256k1__fe" kindref="compound">secp256k1_fe</ref> *</type>
          <declname>r</declname>
        </param>
        <param>
          <type>const <ref refid="structsecp256k1__fe" kindref="compound">secp256k1_fe</ref> *</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="structsecp256k1__fe" kindref="compound">secp256k1_fe</ref> *<ref refid="secp256k1_2src_2util_8h_1ad3e284f8cb00286e85a753265f6b17b8" kindref="member">SECP256K1_RESTRICT</ref></type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/secp256k1/src/field_5x52_impl.h" line="378" column="1" bodyfile="/home/dev/ds-160209/src/secp256k1/src/field_5x52_impl.h" bodystart="378" bodyend="392"/>
      </memberdef>
      <memberdef kind="function" id="field__5x52__impl_8h_1a6cbe550ca5eb35e683b1c8d68d8de26b" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void secp256k1_fe_sqr</definition>
        <argsstring>(secp256k1_fe *r, const secp256k1_fe *a)</argsstring>
        <name>secp256k1_fe_sqr</name>
        <param>
          <type><ref refid="structsecp256k1__fe" kindref="compound">secp256k1_fe</ref> *</type>
          <declname>r</declname>
        </param>
        <param>
          <type>const <ref refid="structsecp256k1__fe" kindref="compound">secp256k1_fe</ref> *</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/secp256k1/src/field_5x52_impl.h" line="394" column="1" bodyfile="/home/dev/ds-160209/src/secp256k1/src/field_5x52_impl.h" bodystart="394" bodyend="405"/>
      </memberdef>
      <memberdef kind="function" id="field__5x52__impl_8h_1a6e3018657241b547badcdfe369a95eba" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="secp256k1_8h_1a7ddc487fd46aee88f21cabedb7268b1e" kindref="member">SECP256K1_INLINE</ref> void</type>
        <definition>static SECP256K1_INLINE void secp256k1_fe_cmov</definition>
        <argsstring>(secp256k1_fe *r, const secp256k1_fe *a, int flag)</argsstring>
        <name>secp256k1_fe_cmov</name>
        <param>
          <type><ref refid="structsecp256k1__fe" kindref="compound">secp256k1_fe</ref> *</type>
          <declname>r</declname>
        </param>
        <param>
          <type>const <ref refid="structsecp256k1__fe" kindref="compound">secp256k1_fe</ref> *</type>
          <declname>a</declname>
        </param>
        <param>
          <type>int</type>
          <declname>flag</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/secp256k1/src/field_5x52_impl.h" line="407" column="1" bodyfile="/home/dev/ds-160209/src/secp256k1/src/field_5x52_impl.h" bodystart="407" bodyend="422"/>
      </memberdef>
      <memberdef kind="function" id="field__5x52__impl_8h_1a60b0cc43eca8db2069ecbbcca15b60cb" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="secp256k1_8h_1a7ddc487fd46aee88f21cabedb7268b1e" kindref="member">SECP256K1_INLINE</ref> void</type>
        <definition>static SECP256K1_INLINE void secp256k1_fe_storage_cmov</definition>
        <argsstring>(secp256k1_fe_storage *r, const secp256k1_fe_storage *a, int flag)</argsstring>
        <name>secp256k1_fe_storage_cmov</name>
        <param>
          <type><ref refid="structsecp256k1__fe__storage" kindref="compound">secp256k1_fe_storage</ref> *</type>
          <declname>r</declname>
        </param>
        <param>
          <type>const <ref refid="structsecp256k1__fe__storage" kindref="compound">secp256k1_fe_storage</ref> *</type>
          <declname>a</declname>
        </param>
        <param>
          <type>int</type>
          <declname>flag</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/secp256k1/src/field_5x52_impl.h" line="424" column="1" bodyfile="/home/dev/ds-160209/src/secp256k1/src/field_5x52_impl.h" bodystart="424" bodyend="432"/>
      </memberdef>
      <memberdef kind="function" id="field__5x52__impl_8h_1ab2813c5c17c63e222d5a15a60f239b12" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void secp256k1_fe_to_storage</definition>
        <argsstring>(secp256k1_fe_storage *r, const secp256k1_fe *a)</argsstring>
        <name>secp256k1_fe_to_storage</name>
        <param>
          <type><ref refid="structsecp256k1__fe__storage" kindref="compound">secp256k1_fe_storage</ref> *</type>
          <declname>r</declname>
        </param>
        <param>
          <type>const <ref refid="structsecp256k1__fe" kindref="compound">secp256k1_fe</ref> *</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/secp256k1/src/field_5x52_impl.h" line="434" column="1" bodyfile="/home/dev/ds-160209/src/secp256k1/src/field_5x52_impl.h" bodystart="434" bodyend="442"/>
      </memberdef>
      <memberdef kind="function" id="field__5x52__impl_8h_1abaa30147599b55339c1f8005edb18fd7" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="secp256k1_8h_1a7ddc487fd46aee88f21cabedb7268b1e" kindref="member">SECP256K1_INLINE</ref> void</type>
        <definition>static SECP256K1_INLINE void secp256k1_fe_from_storage</definition>
        <argsstring>(secp256k1_fe *r, const secp256k1_fe_storage *a)</argsstring>
        <name>secp256k1_fe_from_storage</name>
        <param>
          <type><ref refid="structsecp256k1__fe" kindref="compound">secp256k1_fe</ref> *</type>
          <declname>r</declname>
        </param>
        <param>
          <type>const <ref refid="structsecp256k1__fe__storage" kindref="compound">secp256k1_fe_storage</ref> *</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/secp256k1/src/field_5x52_impl.h" line="444" column="1" bodyfile="/home/dev/ds-160209/src/secp256k1/src/field_5x52_impl.h" bodystart="444" bodyend="454"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/**********************************************************************</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/>*<sp/>Copyright<sp/>(c)<sp/>2013,<sp/>2014<sp/>Pieter<sp/>Wuille<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*<sp/>Distributed<sp/>under<sp/>the<sp/>MIT<sp/>software<sp/>license,<sp/>see<sp/>the<sp/>accompanying<sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*<sp/>file<sp/>COPYING<sp/>or<sp/>http://www.opensource.org/licenses/mit-license.php.*</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/>**********************************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>_SECP256K1_FIELD_REPR_IMPL_H_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>_SECP256K1_FIELD_REPR_IMPL_H_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined<sp/>HAVE_CONFIG_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="libsecp256k1-config_8h" kindref="compound">libsecp256k1-config.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;string.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="secp256k1_2src_2util_8h" kindref="compound">util.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="num_8h" kindref="compound">num.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="field_8h" kindref="compound">field.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(USE_ASM_X86_64)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="field__5x52__asm__impl_8h" kindref="compound">field_5x52_asm_impl.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="field__5x52__int128__impl_8h" kindref="compound">field_5x52_int128_impl.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="preprocessor">#ifdef<sp/>VERIFY</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>secp256k1_fe_verify(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structsecp256k1__fe" kindref="compound">secp256k1_fe</ref><sp/>*a)<sp/>{</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="stdint_8h_1aaa5d1cd013383c889537491c3cfd9aad" kindref="member">uint64_t</ref><sp/>*d<sp/>=<sp/>a-&gt;<ref refid="structsecp256k1__fe_1a4e7c00a989d1da635e7ffd33105d62df" kindref="member">n</ref>;</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>m<sp/>=<sp/>a-&gt;normalized<sp/>?<sp/>1<sp/>:<sp/>2<sp/>*<sp/>a-&gt;magnitude,<sp/>r<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>secp256k1<sp/>&apos;p&apos;<sp/>value<sp/>defined<sp/>in<sp/>&quot;Standards<sp/>for<sp/>Efficient<sp/>Cryptography&quot;<sp/>(SEC2)<sp/>2.7.1.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/>r<sp/>&amp;=<sp/>(d[0]<sp/>&lt;=<sp/>0xFFFFFFFFFFFFFULL<sp/>*<sp/>m);</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/>r<sp/>&amp;=<sp/>(d[1]<sp/>&lt;=<sp/>0xFFFFFFFFFFFFFULL<sp/>*<sp/>m);</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/>r<sp/>&amp;=<sp/>(d[2]<sp/>&lt;=<sp/>0xFFFFFFFFFFFFFULL<sp/>*<sp/>m);</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/>r<sp/>&amp;=<sp/>(d[3]<sp/>&lt;=<sp/>0xFFFFFFFFFFFFFULL<sp/>*<sp/>m);</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/>r<sp/>&amp;=<sp/>(d[4]<sp/>&lt;=<sp/>0x0FFFFFFFFFFFFULL<sp/>*<sp/>m);</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/>r<sp/>&amp;=<sp/>(a-&gt;magnitude<sp/>&gt;=<sp/>0);</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/>r<sp/>&amp;=<sp/>(a-&gt;magnitude<sp/>&lt;=<sp/>2048);</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(a-&gt;normalized)<sp/>{</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>r<sp/>&amp;=<sp/>(a-&gt;magnitude<sp/>&lt;=<sp/>1);</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(r<sp/>&amp;&amp;<sp/>(d[4]<sp/>==<sp/>0x0FFFFFFFFFFFFULL)<sp/>&amp;&amp;<sp/>((d[3]<sp/>&amp;<sp/>d[2]<sp/>&amp;<sp/>d[1])<sp/>==<sp/>0xFFFFFFFFFFFFFULL))<sp/>{</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>r<sp/>&amp;=<sp/>(d[0]<sp/>&lt;<sp/>0xFFFFEFFFFFC2FULL);</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="secp256k1_2src_2util_8h_1aca8ac5ae73fd966db106de59160a178b" kindref="member">VERIFY_CHECK</ref>(r<sp/>==<sp/>1);</highlight></codeline>
<codeline lineno="52"><highlight class="normal">}</highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>secp256k1_fe_verify(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structsecp256k1__fe" kindref="compound">secp256k1_fe</ref><sp/>*a)<sp/>{</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/>(void)a;</highlight></codeline>
<codeline lineno="56"><highlight class="normal">}</highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>secp256k1_fe_normalize(<ref refid="structsecp256k1__fe" kindref="compound">secp256k1_fe</ref><sp/>*r)<sp/>{</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="stdint_8h_1aaa5d1cd013383c889537491c3cfd9aad" kindref="member">uint64_t</ref><sp/>t0<sp/>=<sp/>r-&gt;<ref refid="structsecp256k1__fe_1a4e7c00a989d1da635e7ffd33105d62df" kindref="member">n</ref>[0],<sp/>t1<sp/>=<sp/>r-&gt;<ref refid="structsecp256k1__fe_1a4e7c00a989d1da635e7ffd33105d62df" kindref="member">n</ref>[1],<sp/>t2<sp/>=<sp/>r-&gt;<ref refid="structsecp256k1__fe_1a4e7c00a989d1da635e7ffd33105d62df" kindref="member">n</ref>[2],<sp/>t3<sp/>=<sp/>r-&gt;<ref refid="structsecp256k1__fe_1a4e7c00a989d1da635e7ffd33105d62df" kindref="member">n</ref>[3],<sp/>t4<sp/>=<sp/>r-&gt;<ref refid="structsecp256k1__fe_1a4e7c00a989d1da635e7ffd33105d62df" kindref="member">n</ref>[4];</highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Reduce<sp/>t4<sp/>at<sp/>the<sp/>start<sp/>so<sp/>there<sp/>will<sp/>be<sp/>at<sp/>most<sp/>a<sp/>single<sp/>carry<sp/>from<sp/>the<sp/>first<sp/>pass<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="stdint_8h_1aaa5d1cd013383c889537491c3cfd9aad" kindref="member">uint64_t</ref><sp/>m;</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="stdint_8h_1aaa5d1cd013383c889537491c3cfd9aad" kindref="member">uint64_t</ref><sp/>x<sp/>=<sp/>t4<sp/>&gt;&gt;<sp/>48;<sp/>t4<sp/>&amp;=<sp/>0x0FFFFFFFFFFFFULL;</highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>The<sp/>first<sp/>pass<sp/>ensures<sp/>the<sp/>magnitude<sp/>is<sp/>1,<sp/>...<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/>t0<sp/>+=<sp/>x<sp/>*<sp/>0x1000003D1ULL;</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/>t1<sp/>+=<sp/>(t0<sp/>&gt;&gt;<sp/>52);<sp/>t0<sp/>&amp;=<sp/>0xFFFFFFFFFFFFFULL;</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/>t2<sp/>+=<sp/>(t1<sp/>&gt;&gt;<sp/>52);<sp/>t1<sp/>&amp;=<sp/>0xFFFFFFFFFFFFFULL;<sp/>m<sp/>=<sp/>t1;</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/>t3<sp/>+=<sp/>(t2<sp/>&gt;&gt;<sp/>52);<sp/>t2<sp/>&amp;=<sp/>0xFFFFFFFFFFFFFULL;<sp/>m<sp/>&amp;=<sp/>t2;</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/>t4<sp/>+=<sp/>(t3<sp/>&gt;&gt;<sp/>52);<sp/>t3<sp/>&amp;=<sp/>0xFFFFFFFFFFFFFULL;<sp/>m<sp/>&amp;=<sp/>t3;</highlight></codeline>
<codeline lineno="72"><highlight class="normal"></highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>...<sp/>except<sp/>for<sp/>a<sp/>possible<sp/>carry<sp/>at<sp/>bit<sp/>48<sp/>of<sp/>t4<sp/>(i.e.<sp/>bit<sp/>256<sp/>of<sp/>the<sp/>field<sp/>element)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="secp256k1_2src_2util_8h_1aca8ac5ae73fd966db106de59160a178b" kindref="member">VERIFY_CHECK</ref>(t4<sp/>&gt;&gt;<sp/>49<sp/>==<sp/>0);</highlight></codeline>
<codeline lineno="75"><highlight class="normal"></highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>At<sp/>most<sp/>a<sp/>single<sp/>final<sp/>reduction<sp/>is<sp/>needed;<sp/>check<sp/>if<sp/>the<sp/>value<sp/>is<sp/>&gt;=<sp/>the<sp/>field<sp/>characteristic<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/>x<sp/>=<sp/>(t4<sp/>&gt;&gt;<sp/>48)<sp/>|<sp/>((t4<sp/>==<sp/>0x0FFFFFFFFFFFFULL)<sp/>&amp;<sp/>(m<sp/>==<sp/>0xFFFFFFFFFFFFFULL)</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;<sp/>(t0<sp/>&gt;=<sp/>0xFFFFEFFFFFC2FULL));</highlight></codeline>
<codeline lineno="79"><highlight class="normal"></highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Apply<sp/>the<sp/>final<sp/>reduction<sp/>(for<sp/>constant-time<sp/>behaviour,<sp/>we<sp/>do<sp/>it<sp/>always)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/>t0<sp/>+=<sp/>x<sp/>*<sp/>0x1000003D1ULL;</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/>t1<sp/>+=<sp/>(t0<sp/>&gt;&gt;<sp/>52);<sp/>t0<sp/>&amp;=<sp/>0xFFFFFFFFFFFFFULL;</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/>t2<sp/>+=<sp/>(t1<sp/>&gt;&gt;<sp/>52);<sp/>t1<sp/>&amp;=<sp/>0xFFFFFFFFFFFFFULL;</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/>t3<sp/>+=<sp/>(t2<sp/>&gt;&gt;<sp/>52);<sp/>t2<sp/>&amp;=<sp/>0xFFFFFFFFFFFFFULL;</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/>t4<sp/>+=<sp/>(t3<sp/>&gt;&gt;<sp/>52);<sp/>t3<sp/>&amp;=<sp/>0xFFFFFFFFFFFFFULL;</highlight></codeline>
<codeline lineno="86"><highlight class="normal"></highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>If<sp/>t4<sp/>didn&apos;t<sp/>carry<sp/>to<sp/>bit<sp/>48<sp/>already,<sp/>then<sp/>it<sp/>should<sp/>have<sp/>after<sp/>any<sp/>final<sp/>reduction<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="secp256k1_2src_2util_8h_1aca8ac5ae73fd966db106de59160a178b" kindref="member">VERIFY_CHECK</ref>(t4<sp/>&gt;&gt;<sp/>48<sp/>==<sp/>x);</highlight></codeline>
<codeline lineno="89"><highlight class="normal"></highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Mask<sp/>off<sp/>the<sp/>possible<sp/>multiple<sp/>of<sp/>2^256<sp/>from<sp/>the<sp/>final<sp/>reduction<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/>t4<sp/>&amp;=<sp/>0x0FFFFFFFFFFFFULL;</highlight></codeline>
<codeline lineno="92"><highlight class="normal"></highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/>r-&gt;<ref refid="structsecp256k1__fe_1a4e7c00a989d1da635e7ffd33105d62df" kindref="member">n</ref>[0]<sp/>=<sp/>t0;<sp/>r-&gt;<ref refid="structsecp256k1__fe_1a4e7c00a989d1da635e7ffd33105d62df" kindref="member">n</ref>[1]<sp/>=<sp/>t1;<sp/>r-&gt;<ref refid="structsecp256k1__fe_1a4e7c00a989d1da635e7ffd33105d62df" kindref="member">n</ref>[2]<sp/>=<sp/>t2;<sp/>r-&gt;<ref refid="structsecp256k1__fe_1a4e7c00a989d1da635e7ffd33105d62df" kindref="member">n</ref>[3]<sp/>=<sp/>t3;<sp/>r-&gt;<ref refid="structsecp256k1__fe_1a4e7c00a989d1da635e7ffd33105d62df" kindref="member">n</ref>[4]<sp/>=<sp/>t4;</highlight></codeline>
<codeline lineno="94"><highlight class="normal"></highlight></codeline>
<codeline lineno="95"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>VERIFY</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/>r-&gt;magnitude<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/>r-&gt;normalized<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/>secp256k1_fe_verify(r);</highlight></codeline>
<codeline lineno="99"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="100"><highlight class="normal">}</highlight></codeline>
<codeline lineno="101"><highlight class="normal"></highlight></codeline>
<codeline lineno="102"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>secp256k1_fe_normalize_weak(<ref refid="structsecp256k1__fe" kindref="compound">secp256k1_fe</ref><sp/>*r)<sp/>{</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="stdint_8h_1aaa5d1cd013383c889537491c3cfd9aad" kindref="member">uint64_t</ref><sp/>t0<sp/>=<sp/>r-&gt;<ref refid="structsecp256k1__fe_1a4e7c00a989d1da635e7ffd33105d62df" kindref="member">n</ref>[0],<sp/>t1<sp/>=<sp/>r-&gt;<ref refid="structsecp256k1__fe_1a4e7c00a989d1da635e7ffd33105d62df" kindref="member">n</ref>[1],<sp/>t2<sp/>=<sp/>r-&gt;<ref refid="structsecp256k1__fe_1a4e7c00a989d1da635e7ffd33105d62df" kindref="member">n</ref>[2],<sp/>t3<sp/>=<sp/>r-&gt;<ref refid="structsecp256k1__fe_1a4e7c00a989d1da635e7ffd33105d62df" kindref="member">n</ref>[3],<sp/>t4<sp/>=<sp/>r-&gt;<ref refid="structsecp256k1__fe_1a4e7c00a989d1da635e7ffd33105d62df" kindref="member">n</ref>[4];</highlight></codeline>
<codeline lineno="104"><highlight class="normal"></highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Reduce<sp/>t4<sp/>at<sp/>the<sp/>start<sp/>so<sp/>there<sp/>will<sp/>be<sp/>at<sp/>most<sp/>a<sp/>single<sp/>carry<sp/>from<sp/>the<sp/>first<sp/>pass<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="stdint_8h_1aaa5d1cd013383c889537491c3cfd9aad" kindref="member">uint64_t</ref><sp/>x<sp/>=<sp/>t4<sp/>&gt;&gt;<sp/>48;<sp/>t4<sp/>&amp;=<sp/>0x0FFFFFFFFFFFFULL;</highlight></codeline>
<codeline lineno="107"><highlight class="normal"></highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>The<sp/>first<sp/>pass<sp/>ensures<sp/>the<sp/>magnitude<sp/>is<sp/>1,<sp/>...<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/>t0<sp/>+=<sp/>x<sp/>*<sp/>0x1000003D1ULL;</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/>t1<sp/>+=<sp/>(t0<sp/>&gt;&gt;<sp/>52);<sp/>t0<sp/>&amp;=<sp/>0xFFFFFFFFFFFFFULL;</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/>t2<sp/>+=<sp/>(t1<sp/>&gt;&gt;<sp/>52);<sp/>t1<sp/>&amp;=<sp/>0xFFFFFFFFFFFFFULL;</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/>t3<sp/>+=<sp/>(t2<sp/>&gt;&gt;<sp/>52);<sp/>t2<sp/>&amp;=<sp/>0xFFFFFFFFFFFFFULL;</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/>t4<sp/>+=<sp/>(t3<sp/>&gt;&gt;<sp/>52);<sp/>t3<sp/>&amp;=<sp/>0xFFFFFFFFFFFFFULL;</highlight></codeline>
<codeline lineno="114"><highlight class="normal"></highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>...<sp/>except<sp/>for<sp/>a<sp/>possible<sp/>carry<sp/>at<sp/>bit<sp/>48<sp/>of<sp/>t4<sp/>(i.e.<sp/>bit<sp/>256<sp/>of<sp/>the<sp/>field<sp/>element)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="secp256k1_2src_2util_8h_1aca8ac5ae73fd966db106de59160a178b" kindref="member">VERIFY_CHECK</ref>(t4<sp/>&gt;&gt;<sp/>49<sp/>==<sp/>0);</highlight></codeline>
<codeline lineno="117"><highlight class="normal"></highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/>r-&gt;<ref refid="structsecp256k1__fe_1a4e7c00a989d1da635e7ffd33105d62df" kindref="member">n</ref>[0]<sp/>=<sp/>t0;<sp/>r-&gt;<ref refid="structsecp256k1__fe_1a4e7c00a989d1da635e7ffd33105d62df" kindref="member">n</ref>[1]<sp/>=<sp/>t1;<sp/>r-&gt;<ref refid="structsecp256k1__fe_1a4e7c00a989d1da635e7ffd33105d62df" kindref="member">n</ref>[2]<sp/>=<sp/>t2;<sp/>r-&gt;<ref refid="structsecp256k1__fe_1a4e7c00a989d1da635e7ffd33105d62df" kindref="member">n</ref>[3]<sp/>=<sp/>t3;<sp/>r-&gt;<ref refid="structsecp256k1__fe_1a4e7c00a989d1da635e7ffd33105d62df" kindref="member">n</ref>[4]<sp/>=<sp/>t4;</highlight></codeline>
<codeline lineno="119"><highlight class="normal"></highlight></codeline>
<codeline lineno="120"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>VERIFY</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/>r-&gt;magnitude<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/>secp256k1_fe_verify(r);</highlight></codeline>
<codeline lineno="123"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="124"><highlight class="normal">}</highlight></codeline>
<codeline lineno="125"><highlight class="normal"></highlight></codeline>
<codeline lineno="126"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>secp256k1_fe_normalize_var(<ref refid="structsecp256k1__fe" kindref="compound">secp256k1_fe</ref><sp/>*r)<sp/>{</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="stdint_8h_1aaa5d1cd013383c889537491c3cfd9aad" kindref="member">uint64_t</ref><sp/>t0<sp/>=<sp/>r-&gt;<ref refid="structsecp256k1__fe_1a4e7c00a989d1da635e7ffd33105d62df" kindref="member">n</ref>[0],<sp/>t1<sp/>=<sp/>r-&gt;<ref refid="structsecp256k1__fe_1a4e7c00a989d1da635e7ffd33105d62df" kindref="member">n</ref>[1],<sp/>t2<sp/>=<sp/>r-&gt;<ref refid="structsecp256k1__fe_1a4e7c00a989d1da635e7ffd33105d62df" kindref="member">n</ref>[2],<sp/>t3<sp/>=<sp/>r-&gt;<ref refid="structsecp256k1__fe_1a4e7c00a989d1da635e7ffd33105d62df" kindref="member">n</ref>[3],<sp/>t4<sp/>=<sp/>r-&gt;<ref refid="structsecp256k1__fe_1a4e7c00a989d1da635e7ffd33105d62df" kindref="member">n</ref>[4];</highlight></codeline>
<codeline lineno="128"><highlight class="normal"></highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Reduce<sp/>t4<sp/>at<sp/>the<sp/>start<sp/>so<sp/>there<sp/>will<sp/>be<sp/>at<sp/>most<sp/>a<sp/>single<sp/>carry<sp/>from<sp/>the<sp/>first<sp/>pass<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="stdint_8h_1aaa5d1cd013383c889537491c3cfd9aad" kindref="member">uint64_t</ref><sp/>m;</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="stdint_8h_1aaa5d1cd013383c889537491c3cfd9aad" kindref="member">uint64_t</ref><sp/>x<sp/>=<sp/>t4<sp/>&gt;&gt;<sp/>48;<sp/>t4<sp/>&amp;=<sp/>0x0FFFFFFFFFFFFULL;</highlight></codeline>
<codeline lineno="132"><highlight class="normal"></highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>The<sp/>first<sp/>pass<sp/>ensures<sp/>the<sp/>magnitude<sp/>is<sp/>1,<sp/>...<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/>t0<sp/>+=<sp/>x<sp/>*<sp/>0x1000003D1ULL;</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/>t1<sp/>+=<sp/>(t0<sp/>&gt;&gt;<sp/>52);<sp/>t0<sp/>&amp;=<sp/>0xFFFFFFFFFFFFFULL;</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/>t2<sp/>+=<sp/>(t1<sp/>&gt;&gt;<sp/>52);<sp/>t1<sp/>&amp;=<sp/>0xFFFFFFFFFFFFFULL;<sp/>m<sp/>=<sp/>t1;</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/>t3<sp/>+=<sp/>(t2<sp/>&gt;&gt;<sp/>52);<sp/>t2<sp/>&amp;=<sp/>0xFFFFFFFFFFFFFULL;<sp/>m<sp/>&amp;=<sp/>t2;</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/>t4<sp/>+=<sp/>(t3<sp/>&gt;&gt;<sp/>52);<sp/>t3<sp/>&amp;=<sp/>0xFFFFFFFFFFFFFULL;<sp/>m<sp/>&amp;=<sp/>t3;</highlight></codeline>
<codeline lineno="139"><highlight class="normal"></highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>...<sp/>except<sp/>for<sp/>a<sp/>possible<sp/>carry<sp/>at<sp/>bit<sp/>48<sp/>of<sp/>t4<sp/>(i.e.<sp/>bit<sp/>256<sp/>of<sp/>the<sp/>field<sp/>element)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="secp256k1_2src_2util_8h_1aca8ac5ae73fd966db106de59160a178b" kindref="member">VERIFY_CHECK</ref>(t4<sp/>&gt;&gt;<sp/>49<sp/>==<sp/>0);</highlight></codeline>
<codeline lineno="142"><highlight class="normal"></highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>At<sp/>most<sp/>a<sp/>single<sp/>final<sp/>reduction<sp/>is<sp/>needed;<sp/>check<sp/>if<sp/>the<sp/>value<sp/>is<sp/>&gt;=<sp/>the<sp/>field<sp/>characteristic<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/>x<sp/>=<sp/>(t4<sp/>&gt;&gt;<sp/>48)<sp/>|<sp/>((t4<sp/>==<sp/>0x0FFFFFFFFFFFFULL)<sp/>&amp;<sp/>(m<sp/>==<sp/>0xFFFFFFFFFFFFFULL)</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;<sp/>(t0<sp/>&gt;=<sp/>0xFFFFEFFFFFC2FULL));</highlight></codeline>
<codeline lineno="146"><highlight class="normal"></highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(x)<sp/>{</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>t0<sp/>+=<sp/>0x1000003D1ULL;</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>t1<sp/>+=<sp/>(t0<sp/>&gt;&gt;<sp/>52);<sp/>t0<sp/>&amp;=<sp/>0xFFFFFFFFFFFFFULL;</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>t2<sp/>+=<sp/>(t1<sp/>&gt;&gt;<sp/>52);<sp/>t1<sp/>&amp;=<sp/>0xFFFFFFFFFFFFFULL;</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>t3<sp/>+=<sp/>(t2<sp/>&gt;&gt;<sp/>52);<sp/>t2<sp/>&amp;=<sp/>0xFFFFFFFFFFFFFULL;</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>t4<sp/>+=<sp/>(t3<sp/>&gt;&gt;<sp/>52);<sp/>t3<sp/>&amp;=<sp/>0xFFFFFFFFFFFFFULL;</highlight></codeline>
<codeline lineno="153"><highlight class="normal"></highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>If<sp/>t4<sp/>didn&apos;t<sp/>carry<sp/>to<sp/>bit<sp/>48<sp/>already,<sp/>then<sp/>it<sp/>should<sp/>have<sp/>after<sp/>any<sp/>final<sp/>reduction<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="secp256k1_2src_2util_8h_1aca8ac5ae73fd966db106de59160a178b" kindref="member">VERIFY_CHECK</ref>(t4<sp/>&gt;&gt;<sp/>48<sp/>==<sp/>x);</highlight></codeline>
<codeline lineno="156"><highlight class="normal"></highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Mask<sp/>off<sp/>the<sp/>possible<sp/>multiple<sp/>of<sp/>2^256<sp/>from<sp/>the<sp/>final<sp/>reduction<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>t4<sp/>&amp;=<sp/>0x0FFFFFFFFFFFFULL;</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="160"><highlight class="normal"></highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/>r-&gt;<ref refid="structsecp256k1__fe_1a4e7c00a989d1da635e7ffd33105d62df" kindref="member">n</ref>[0]<sp/>=<sp/>t0;<sp/>r-&gt;<ref refid="structsecp256k1__fe_1a4e7c00a989d1da635e7ffd33105d62df" kindref="member">n</ref>[1]<sp/>=<sp/>t1;<sp/>r-&gt;<ref refid="structsecp256k1__fe_1a4e7c00a989d1da635e7ffd33105d62df" kindref="member">n</ref>[2]<sp/>=<sp/>t2;<sp/>r-&gt;<ref refid="structsecp256k1__fe_1a4e7c00a989d1da635e7ffd33105d62df" kindref="member">n</ref>[3]<sp/>=<sp/>t3;<sp/>r-&gt;<ref refid="structsecp256k1__fe_1a4e7c00a989d1da635e7ffd33105d62df" kindref="member">n</ref>[4]<sp/>=<sp/>t4;</highlight></codeline>
<codeline lineno="162"><highlight class="normal"></highlight></codeline>
<codeline lineno="163"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>VERIFY</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/>r-&gt;magnitude<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/>r-&gt;normalized<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/>secp256k1_fe_verify(r);</highlight></codeline>
<codeline lineno="167"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="168"><highlight class="normal">}</highlight></codeline>
<codeline lineno="169"><highlight class="normal"></highlight></codeline>
<codeline lineno="170"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>secp256k1_fe_normalizes_to_zero(<ref refid="structsecp256k1__fe" kindref="compound">secp256k1_fe</ref><sp/>*r)<sp/>{</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="stdint_8h_1aaa5d1cd013383c889537491c3cfd9aad" kindref="member">uint64_t</ref><sp/>t0<sp/>=<sp/>r-&gt;<ref refid="structsecp256k1__fe_1a4e7c00a989d1da635e7ffd33105d62df" kindref="member">n</ref>[0],<sp/>t1<sp/>=<sp/>r-&gt;<ref refid="structsecp256k1__fe_1a4e7c00a989d1da635e7ffd33105d62df" kindref="member">n</ref>[1],<sp/>t2<sp/>=<sp/>r-&gt;<ref refid="structsecp256k1__fe_1a4e7c00a989d1da635e7ffd33105d62df" kindref="member">n</ref>[2],<sp/>t3<sp/>=<sp/>r-&gt;<ref refid="structsecp256k1__fe_1a4e7c00a989d1da635e7ffd33105d62df" kindref="member">n</ref>[3],<sp/>t4<sp/>=<sp/>r-&gt;<ref refid="structsecp256k1__fe_1a4e7c00a989d1da635e7ffd33105d62df" kindref="member">n</ref>[4];</highlight></codeline>
<codeline lineno="172"><highlight class="normal"></highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>z0<sp/>tracks<sp/>a<sp/>possible<sp/>raw<sp/>value<sp/>of<sp/>0,<sp/>z1<sp/>tracks<sp/>a<sp/>possible<sp/>raw<sp/>value<sp/>of<sp/>P<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="stdint_8h_1aaa5d1cd013383c889537491c3cfd9aad" kindref="member">uint64_t</ref><sp/>z0,<sp/>z1;</highlight></codeline>
<codeline lineno="175"><highlight class="normal"></highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Reduce<sp/>t4<sp/>at<sp/>the<sp/>start<sp/>so<sp/>there<sp/>will<sp/>be<sp/>at<sp/>most<sp/>a<sp/>single<sp/>carry<sp/>from<sp/>the<sp/>first<sp/>pass<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="stdint_8h_1aaa5d1cd013383c889537491c3cfd9aad" kindref="member">uint64_t</ref><sp/>x<sp/>=<sp/>t4<sp/>&gt;&gt;<sp/>48;<sp/>t4<sp/>&amp;=<sp/>0x0FFFFFFFFFFFFULL;</highlight></codeline>
<codeline lineno="178"><highlight class="normal"></highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>The<sp/>first<sp/>pass<sp/>ensures<sp/>the<sp/>magnitude<sp/>is<sp/>1,<sp/>...<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/><sp/><sp/>t0<sp/>+=<sp/>x<sp/>*<sp/>0x1000003D1ULL;</highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/><sp/>t1<sp/>+=<sp/>(t0<sp/>&gt;&gt;<sp/>52);<sp/>t0<sp/>&amp;=<sp/>0xFFFFFFFFFFFFFULL;<sp/>z0<sp/><sp/>=<sp/>t0;<sp/>z1<sp/><sp/>=<sp/>t0<sp/>^<sp/>0x1000003D0ULL;</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/><sp/>t2<sp/>+=<sp/>(t1<sp/>&gt;&gt;<sp/>52);<sp/>t1<sp/>&amp;=<sp/>0xFFFFFFFFFFFFFULL;<sp/>z0<sp/>|=<sp/>t1;<sp/>z1<sp/>&amp;=<sp/>t1;</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/><sp/>t3<sp/>+=<sp/>(t2<sp/>&gt;&gt;<sp/>52);<sp/>t2<sp/>&amp;=<sp/>0xFFFFFFFFFFFFFULL;<sp/>z0<sp/>|=<sp/>t2;<sp/>z1<sp/>&amp;=<sp/>t2;</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/><sp/><sp/>t4<sp/>+=<sp/>(t3<sp/>&gt;&gt;<sp/>52);<sp/>t3<sp/>&amp;=<sp/>0xFFFFFFFFFFFFFULL;<sp/>z0<sp/>|=<sp/>t3;<sp/>z1<sp/>&amp;=<sp/>t3;</highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>z0<sp/>|=<sp/>t4;<sp/>z1<sp/>&amp;=<sp/>t4<sp/>^<sp/>0xF000000000000ULL;</highlight></codeline>
<codeline lineno="186"><highlight class="normal"></highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>...<sp/>except<sp/>for<sp/>a<sp/>possible<sp/>carry<sp/>at<sp/>bit<sp/>48<sp/>of<sp/>t4<sp/>(i.e.<sp/>bit<sp/>256<sp/>of<sp/>the<sp/>field<sp/>element)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="secp256k1_2src_2util_8h_1aca8ac5ae73fd966db106de59160a178b" kindref="member">VERIFY_CHECK</ref>(t4<sp/>&gt;&gt;<sp/>49<sp/>==<sp/>0);</highlight></codeline>
<codeline lineno="189"><highlight class="normal"></highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(z0<sp/>==<sp/>0)<sp/>|<sp/>(z1<sp/>==<sp/>0xFFFFFFFFFFFFFULL);</highlight></codeline>
<codeline lineno="191"><highlight class="normal">}</highlight></codeline>
<codeline lineno="192"><highlight class="normal"></highlight></codeline>
<codeline lineno="193"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>secp256k1_fe_normalizes_to_zero_var(<ref refid="structsecp256k1__fe" kindref="compound">secp256k1_fe</ref><sp/>*r)<sp/>{</highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="stdint_8h_1aaa5d1cd013383c889537491c3cfd9aad" kindref="member">uint64_t</ref><sp/>t0,<sp/>t1,<sp/>t2,<sp/>t3,<sp/>t4;</highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="stdint_8h_1aaa5d1cd013383c889537491c3cfd9aad" kindref="member">uint64_t</ref><sp/>z0,<sp/>z1;</highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="stdint_8h_1aaa5d1cd013383c889537491c3cfd9aad" kindref="member">uint64_t</ref><sp/>x;</highlight></codeline>
<codeline lineno="197"><highlight class="normal"></highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/><sp/><sp/>t0<sp/>=<sp/>r-&gt;<ref refid="structsecp256k1__fe_1a4e7c00a989d1da635e7ffd33105d62df" kindref="member">n</ref>[0];</highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/><sp/><sp/>t4<sp/>=<sp/>r-&gt;<ref refid="structsecp256k1__fe_1a4e7c00a989d1da635e7ffd33105d62df" kindref="member">n</ref>[4];</highlight></codeline>
<codeline lineno="200"><highlight class="normal"></highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Reduce<sp/>t4<sp/>at<sp/>the<sp/>start<sp/>so<sp/>there<sp/>will<sp/>be<sp/>at<sp/>most<sp/>a<sp/>single<sp/>carry<sp/>from<sp/>the<sp/>first<sp/>pass<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/><sp/><sp/>x<sp/>=<sp/>t4<sp/>&gt;&gt;<sp/>48;</highlight></codeline>
<codeline lineno="203"><highlight class="normal"></highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>The<sp/>first<sp/>pass<sp/>ensures<sp/>the<sp/>magnitude<sp/>is<sp/>1,<sp/>...<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><sp/><sp/>t0<sp/>+=<sp/>x<sp/>*<sp/>0x1000003D1ULL;</highlight></codeline>
<codeline lineno="206"><highlight class="normal"></highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>z0<sp/>tracks<sp/>a<sp/>possible<sp/>raw<sp/>value<sp/>of<sp/>0,<sp/>z1<sp/>tracks<sp/>a<sp/>possible<sp/>raw<sp/>value<sp/>of<sp/>P<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/><sp/><sp/>z0<sp/>=<sp/>t0<sp/>&amp;<sp/>0xFFFFFFFFFFFFFULL;</highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/><sp/><sp/>z1<sp/>=<sp/>z0<sp/>^<sp/>0x1000003D0ULL;</highlight></codeline>
<codeline lineno="210"><highlight class="normal"></highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Fast<sp/>return<sp/>path<sp/>should<sp/>catch<sp/>the<sp/>majority<sp/>of<sp/>cases<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((z0<sp/>!=<sp/>0ULL)<sp/>&amp;<sp/>(z1<sp/>!=<sp/>0xFFFFFFFFFFFFFULL))<sp/>{</highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="215"><highlight class="normal"></highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/><sp/><sp/>t1<sp/>=<sp/>r-&gt;<ref refid="structsecp256k1__fe_1a4e7c00a989d1da635e7ffd33105d62df" kindref="member">n</ref>[1];</highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/><sp/><sp/>t2<sp/>=<sp/>r-&gt;<ref refid="structsecp256k1__fe_1a4e7c00a989d1da635e7ffd33105d62df" kindref="member">n</ref>[2];</highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/><sp/><sp/>t3<sp/>=<sp/>r-&gt;<ref refid="structsecp256k1__fe_1a4e7c00a989d1da635e7ffd33105d62df" kindref="member">n</ref>[3];</highlight></codeline>
<codeline lineno="219"><highlight class="normal"></highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/><sp/><sp/>t4<sp/>&amp;=<sp/>0x0FFFFFFFFFFFFULL;</highlight></codeline>
<codeline lineno="221"><highlight class="normal"></highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/><sp/><sp/>t1<sp/>+=<sp/>(t0<sp/>&gt;&gt;<sp/>52);</highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/><sp/><sp/>t2<sp/>+=<sp/>(t1<sp/>&gt;&gt;<sp/>52);<sp/>t1<sp/>&amp;=<sp/>0xFFFFFFFFFFFFFULL;<sp/>z0<sp/>|=<sp/>t1;<sp/>z1<sp/>&amp;=<sp/>t1;</highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/><sp/><sp/>t3<sp/>+=<sp/>(t2<sp/>&gt;&gt;<sp/>52);<sp/>t2<sp/>&amp;=<sp/>0xFFFFFFFFFFFFFULL;<sp/>z0<sp/>|=<sp/>t2;<sp/>z1<sp/>&amp;=<sp/>t2;</highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/><sp/><sp/>t4<sp/>+=<sp/>(t3<sp/>&gt;&gt;<sp/>52);<sp/>t3<sp/>&amp;=<sp/>0xFFFFFFFFFFFFFULL;<sp/>z0<sp/>|=<sp/>t3;<sp/>z1<sp/>&amp;=<sp/>t3;</highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>z0<sp/>|=<sp/>t4;<sp/>z1<sp/>&amp;=<sp/>t4<sp/>^<sp/>0xF000000000000ULL;</highlight></codeline>
<codeline lineno="227"><highlight class="normal"></highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>...<sp/>except<sp/>for<sp/>a<sp/>possible<sp/>carry<sp/>at<sp/>bit<sp/>48<sp/>of<sp/>t4<sp/>(i.e.<sp/>bit<sp/>256<sp/>of<sp/>the<sp/>field<sp/>element)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="secp256k1_2src_2util_8h_1aca8ac5ae73fd966db106de59160a178b" kindref="member">VERIFY_CHECK</ref>(t4<sp/>&gt;&gt;<sp/>49<sp/>==<sp/>0);</highlight></codeline>
<codeline lineno="230"><highlight class="normal"></highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(z0<sp/>==<sp/>0)<sp/>|<sp/>(z1<sp/>==<sp/>0xFFFFFFFFFFFFFULL);</highlight></codeline>
<codeline lineno="232"><highlight class="normal">}</highlight></codeline>
<codeline lineno="233"><highlight class="normal"></highlight></codeline>
<codeline lineno="234"><highlight class="normal"><ref refid="secp256k1_8h_1a7ddc487fd46aee88f21cabedb7268b1e" kindref="member">SECP256K1_INLINE</ref><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>secp256k1_fe_set_int(<ref refid="structsecp256k1__fe" kindref="compound">secp256k1_fe</ref><sp/>*r,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>a)<sp/>{</highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/><sp/><sp/>r-&gt;<ref refid="structsecp256k1__fe_1a4e7c00a989d1da635e7ffd33105d62df" kindref="member">n</ref>[0]<sp/>=<sp/>a;</highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/><sp/><sp/>r-&gt;<ref refid="structsecp256k1__fe_1a4e7c00a989d1da635e7ffd33105d62df" kindref="member">n</ref>[1]<sp/>=<sp/>r-&gt;<ref refid="structsecp256k1__fe_1a4e7c00a989d1da635e7ffd33105d62df" kindref="member">n</ref>[2]<sp/>=<sp/>r-&gt;<ref refid="structsecp256k1__fe_1a4e7c00a989d1da635e7ffd33105d62df" kindref="member">n</ref>[3]<sp/>=<sp/>r-&gt;<ref refid="structsecp256k1__fe_1a4e7c00a989d1da635e7ffd33105d62df" kindref="member">n</ref>[4]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="237"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>VERIFY</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/><sp/><sp/>r-&gt;magnitude<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/><sp/><sp/>r-&gt;normalized<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/><sp/><sp/>secp256k1_fe_verify(r);</highlight></codeline>
<codeline lineno="241"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="242"><highlight class="normal">}</highlight></codeline>
<codeline lineno="243"><highlight class="normal"></highlight></codeline>
<codeline lineno="244"><highlight class="normal"><ref refid="secp256k1_8h_1a7ddc487fd46aee88f21cabedb7268b1e" kindref="member">SECP256K1_INLINE</ref><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>secp256k1_fe_is_zero(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structsecp256k1__fe" kindref="compound">secp256k1_fe</ref><sp/>*a)<sp/>{</highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="stdint_8h_1aaa5d1cd013383c889537491c3cfd9aad" kindref="member">uint64_t</ref><sp/>*t<sp/>=<sp/>a-&gt;<ref refid="structsecp256k1__fe_1a4e7c00a989d1da635e7ffd33105d62df" kindref="member">n</ref>;</highlight></codeline>
<codeline lineno="246"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>VERIFY</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="secp256k1_2src_2util_8h_1aca8ac5ae73fd966db106de59160a178b" kindref="member">VERIFY_CHECK</ref>(a-&gt;normalized);</highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/><sp/><sp/>secp256k1_fe_verify(a);</highlight></codeline>
<codeline lineno="249"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(t[0]<sp/>|<sp/>t[1]<sp/>|<sp/>t[2]<sp/>|<sp/>t[3]<sp/>|<sp/>t[4])<sp/>==<sp/>0;</highlight></codeline>
<codeline lineno="251"><highlight class="normal">}</highlight></codeline>
<codeline lineno="252"><highlight class="normal"></highlight></codeline>
<codeline lineno="253"><highlight class="normal"><ref refid="secp256k1_8h_1a7ddc487fd46aee88f21cabedb7268b1e" kindref="member">SECP256K1_INLINE</ref><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>secp256k1_fe_is_odd(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structsecp256k1__fe" kindref="compound">secp256k1_fe</ref><sp/>*a)<sp/>{</highlight></codeline>
<codeline lineno="254"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>VERIFY</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="secp256k1_2src_2util_8h_1aca8ac5ae73fd966db106de59160a178b" kindref="member">VERIFY_CHECK</ref>(a-&gt;normalized);</highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/><sp/><sp/>secp256k1_fe_verify(a);</highlight></codeline>
<codeline lineno="257"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>a-&gt;<ref refid="structsecp256k1__fe_1a4e7c00a989d1da635e7ffd33105d62df" kindref="member">n</ref>[0]<sp/>&amp;<sp/>1;</highlight></codeline>
<codeline lineno="259"><highlight class="normal">}</highlight></codeline>
<codeline lineno="260"><highlight class="normal"></highlight></codeline>
<codeline lineno="261"><highlight class="normal"><ref refid="secp256k1_8h_1a7ddc487fd46aee88f21cabedb7268b1e" kindref="member">SECP256K1_INLINE</ref><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>secp256k1_fe_clear(<ref refid="structsecp256k1__fe" kindref="compound">secp256k1_fe</ref><sp/>*a)<sp/>{</highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="263"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>VERIFY</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/><sp/><sp/>a-&gt;magnitude<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/><sp/><sp/>a-&gt;normalized<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="266"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i=0;<sp/>i&lt;5;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>a-&gt;<ref refid="structsecp256k1__fe_1a4e7c00a989d1da635e7ffd33105d62df" kindref="member">n</ref>[i]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="270"><highlight class="normal">}</highlight></codeline>
<codeline lineno="271"><highlight class="normal"></highlight></codeline>
<codeline lineno="272"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>secp256k1_fe_cmp_var(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structsecp256k1__fe" kindref="compound">secp256k1_fe</ref><sp/>*a,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structsecp256k1__fe" kindref="compound">secp256k1_fe</ref><sp/>*b)<sp/>{</highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="274"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>VERIFY</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="secp256k1_2src_2util_8h_1aca8ac5ae73fd966db106de59160a178b" kindref="member">VERIFY_CHECK</ref>(a-&gt;normalized);</highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="secp256k1_2src_2util_8h_1aca8ac5ae73fd966db106de59160a178b" kindref="member">VERIFY_CHECK</ref>(b-&gt;normalized);</highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/><sp/><sp/>secp256k1_fe_verify(a);</highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/><sp/><sp/>secp256k1_fe_verify(b);</highlight></codeline>
<codeline lineno="279"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>4;<sp/>i<sp/>&gt;=<sp/>0;<sp/>i--)<sp/>{</highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(a-&gt;<ref refid="structsecp256k1__fe_1a4e7c00a989d1da635e7ffd33105d62df" kindref="member">n</ref>[i]<sp/>&gt;<sp/>b-&gt;<ref refid="structsecp256k1__fe_1a4e7c00a989d1da635e7ffd33105d62df" kindref="member">n</ref>[i])<sp/>{</highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(a-&gt;<ref refid="structsecp256k1__fe_1a4e7c00a989d1da635e7ffd33105d62df" kindref="member">n</ref>[i]<sp/>&lt;<sp/>b-&gt;<ref refid="structsecp256k1__fe_1a4e7c00a989d1da635e7ffd33105d62df" kindref="member">n</ref>[i])<sp/>{</highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="289"><highlight class="normal">}</highlight></codeline>
<codeline lineno="290"><highlight class="normal"></highlight></codeline>
<codeline lineno="291"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>secp256k1_fe_set_b32(<ref refid="structsecp256k1__fe" kindref="compound">secp256k1_fe</ref><sp/>*r,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*a)<sp/>{</highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/><sp/><sp/>r-&gt;<ref refid="structsecp256k1__fe_1a4e7c00a989d1da635e7ffd33105d62df" kindref="member">n</ref>[0]<sp/>=<sp/>r-&gt;<ref refid="structsecp256k1__fe_1a4e7c00a989d1da635e7ffd33105d62df" kindref="member">n</ref>[1]<sp/>=<sp/>r-&gt;<ref refid="structsecp256k1__fe_1a4e7c00a989d1da635e7ffd33105d62df" kindref="member">n</ref>[2]<sp/>=<sp/>r-&gt;<ref refid="structsecp256k1__fe_1a4e7c00a989d1da635e7ffd33105d62df" kindref="member">n</ref>[3]<sp/>=<sp/>r-&gt;<ref refid="structsecp256k1__fe_1a4e7c00a989d1da635e7ffd33105d62df" kindref="member">n</ref>[4]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i=0;<sp/>i&lt;32;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j;</highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(j=0;<sp/>j&lt;2;<sp/>j++)<sp/>{</highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>limb<sp/>=<sp/>(8*i+4*j)/52;</highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>shift<sp/>=<sp/>(8*i+4*j)%52;</highlight></codeline>
<codeline lineno="299"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>r-&gt;<ref refid="structsecp256k1__fe_1a4e7c00a989d1da635e7ffd33105d62df" kindref="member">n</ref>[limb]<sp/>|=<sp/>(<ref refid="stdint_8h_1aaa5d1cd013383c889537491c3cfd9aad" kindref="member">uint64_t</ref>)((a[31-i]<sp/>&gt;&gt;<sp/>(4*j))<sp/>&amp;<sp/>0xF)<sp/>&lt;&lt;<sp/>shift;</highlight></codeline>
<codeline lineno="300"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="301"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="302"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(r-&gt;<ref refid="structsecp256k1__fe_1a4e7c00a989d1da635e7ffd33105d62df" kindref="member">n</ref>[4]<sp/>==<sp/>0x0FFFFFFFFFFFFULL<sp/>&amp;&amp;<sp/>(r-&gt;<ref refid="structsecp256k1__fe_1a4e7c00a989d1da635e7ffd33105d62df" kindref="member">n</ref>[3]<sp/>&amp;<sp/>r-&gt;<ref refid="structsecp256k1__fe_1a4e7c00a989d1da635e7ffd33105d62df" kindref="member">n</ref>[2]<sp/>&amp;<sp/>r-&gt;<ref refid="structsecp256k1__fe_1a4e7c00a989d1da635e7ffd33105d62df" kindref="member">n</ref>[1])<sp/>==<sp/>0xFFFFFFFFFFFFFULL<sp/>&amp;&amp;<sp/>r-&gt;<ref refid="structsecp256k1__fe_1a4e7c00a989d1da635e7ffd33105d62df" kindref="member">n</ref>[0]<sp/>&gt;=<sp/>0xFFFFEFFFFFC2FULL)<sp/>{</highlight></codeline>
<codeline lineno="303"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="305"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>VERIFY</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="306"><highlight class="normal"><sp/><sp/><sp/><sp/>r-&gt;magnitude<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/><sp/><sp/><sp/>r-&gt;normalized<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="308"><highlight class="normal"><sp/><sp/><sp/><sp/>secp256k1_fe_verify(r);</highlight></codeline>
<codeline lineno="309"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="311"><highlight class="normal">}</highlight></codeline>
<codeline lineno="312"><highlight class="normal"></highlight></codeline>
<codeline lineno="314"><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>secp256k1_fe_get_b32(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*r,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structsecp256k1__fe" kindref="compound">secp256k1_fe</ref><sp/>*a)<sp/>{</highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="316"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>VERIFY</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="317"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="secp256k1_2src_2util_8h_1aca8ac5ae73fd966db106de59160a178b" kindref="member">VERIFY_CHECK</ref>(a-&gt;normalized);</highlight></codeline>
<codeline lineno="318"><highlight class="normal"><sp/><sp/><sp/><sp/>secp256k1_fe_verify(a);</highlight></codeline>
<codeline lineno="319"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="320"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i=0;<sp/>i&lt;32;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="321"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j;</highlight></codeline>
<codeline lineno="322"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>c<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(j=0;<sp/>j&lt;2;<sp/>j++)<sp/>{</highlight></codeline>
<codeline lineno="324"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>limb<sp/>=<sp/>(8*i+4*j)/52;</highlight></codeline>
<codeline lineno="325"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>shift<sp/>=<sp/>(8*i+4*j)%52;</highlight></codeline>
<codeline lineno="326"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>c<sp/>|=<sp/>((a-&gt;<ref refid="structsecp256k1__fe_1a4e7c00a989d1da635e7ffd33105d62df" kindref="member">n</ref>[limb]<sp/>&gt;&gt;<sp/>shift)<sp/>&amp;<sp/>0xF)<sp/>&lt;&lt;<sp/>(4<sp/>*<sp/>j);</highlight></codeline>
<codeline lineno="327"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="328"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>r[31-i]<sp/>=<sp/>c;</highlight></codeline>
<codeline lineno="329"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="330"><highlight class="normal">}</highlight></codeline>
<codeline lineno="331"><highlight class="normal"></highlight></codeline>
<codeline lineno="332"><highlight class="normal"><ref refid="secp256k1_8h_1a7ddc487fd46aee88f21cabedb7268b1e" kindref="member">SECP256K1_INLINE</ref><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>secp256k1_fe_negate(<ref refid="structsecp256k1__fe" kindref="compound">secp256k1_fe</ref><sp/>*r,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structsecp256k1__fe" kindref="compound">secp256k1_fe</ref><sp/>*a,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>m)<sp/>{</highlight></codeline>
<codeline lineno="333"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>VERIFY</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="334"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="secp256k1_2src_2util_8h_1aca8ac5ae73fd966db106de59160a178b" kindref="member">VERIFY_CHECK</ref>(a-&gt;magnitude<sp/>&lt;=<sp/>m);</highlight></codeline>
<codeline lineno="335"><highlight class="normal"><sp/><sp/><sp/><sp/>secp256k1_fe_verify(a);</highlight></codeline>
<codeline lineno="336"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="337"><highlight class="normal"><sp/><sp/><sp/><sp/>r-&gt;<ref refid="structsecp256k1__fe_1a4e7c00a989d1da635e7ffd33105d62df" kindref="member">n</ref>[0]<sp/>=<sp/>0xFFFFEFFFFFC2FULL<sp/>*<sp/>2<sp/>*<sp/>(m<sp/>+<sp/>1)<sp/>-<sp/>a-&gt;<ref refid="structsecp256k1__fe_1a4e7c00a989d1da635e7ffd33105d62df" kindref="member">n</ref>[0];</highlight></codeline>
<codeline lineno="338"><highlight class="normal"><sp/><sp/><sp/><sp/>r-&gt;<ref refid="structsecp256k1__fe_1a4e7c00a989d1da635e7ffd33105d62df" kindref="member">n</ref>[1]<sp/>=<sp/>0xFFFFFFFFFFFFFULL<sp/>*<sp/>2<sp/>*<sp/>(m<sp/>+<sp/>1)<sp/>-<sp/>a-&gt;<ref refid="structsecp256k1__fe_1a4e7c00a989d1da635e7ffd33105d62df" kindref="member">n</ref>[1];</highlight></codeline>
<codeline lineno="339"><highlight class="normal"><sp/><sp/><sp/><sp/>r-&gt;<ref refid="structsecp256k1__fe_1a4e7c00a989d1da635e7ffd33105d62df" kindref="member">n</ref>[2]<sp/>=<sp/>0xFFFFFFFFFFFFFULL<sp/>*<sp/>2<sp/>*<sp/>(m<sp/>+<sp/>1)<sp/>-<sp/>a-&gt;<ref refid="structsecp256k1__fe_1a4e7c00a989d1da635e7ffd33105d62df" kindref="member">n</ref>[2];</highlight></codeline>
<codeline lineno="340"><highlight class="normal"><sp/><sp/><sp/><sp/>r-&gt;<ref refid="structsecp256k1__fe_1a4e7c00a989d1da635e7ffd33105d62df" kindref="member">n</ref>[3]<sp/>=<sp/>0xFFFFFFFFFFFFFULL<sp/>*<sp/>2<sp/>*<sp/>(m<sp/>+<sp/>1)<sp/>-<sp/>a-&gt;<ref refid="structsecp256k1__fe_1a4e7c00a989d1da635e7ffd33105d62df" kindref="member">n</ref>[3];</highlight></codeline>
<codeline lineno="341"><highlight class="normal"><sp/><sp/><sp/><sp/>r-&gt;<ref refid="structsecp256k1__fe_1a4e7c00a989d1da635e7ffd33105d62df" kindref="member">n</ref>[4]<sp/>=<sp/>0x0FFFFFFFFFFFFULL<sp/>*<sp/>2<sp/>*<sp/>(m<sp/>+<sp/>1)<sp/>-<sp/>a-&gt;<ref refid="structsecp256k1__fe_1a4e7c00a989d1da635e7ffd33105d62df" kindref="member">n</ref>[4];</highlight></codeline>
<codeline lineno="342"><highlight class="normal">#ifdef<sp/>VERIFY</highlight></codeline>
<codeline lineno="343"><highlight class="normal"><sp/><sp/><sp/><sp/>r-&gt;magnitude<sp/>=<sp/>m<sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="344"><highlight class="normal"><sp/><sp/><sp/><sp/>r-&gt;normalized<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="345"><highlight class="normal"><sp/><sp/><sp/><sp/>secp256k1_fe_verify(r);</highlight></codeline>
<codeline lineno="346"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="347"><highlight class="normal">}</highlight></codeline>
<codeline lineno="348"><highlight class="normal"></highlight></codeline>
<codeline lineno="349"><highlight class="normal"><ref refid="secp256k1_8h_1a7ddc487fd46aee88f21cabedb7268b1e" kindref="member">SECP256K1_INLINE</ref><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>secp256k1_fe_mul_int(<ref refid="structsecp256k1__fe" kindref="compound">secp256k1_fe</ref><sp/>*r,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>a)<sp/>{</highlight></codeline>
<codeline lineno="350"><highlight class="normal"><sp/><sp/><sp/><sp/>r-&gt;<ref refid="structsecp256k1__fe_1a4e7c00a989d1da635e7ffd33105d62df" kindref="member">n</ref>[0]<sp/>*=<sp/>a;</highlight></codeline>
<codeline lineno="351"><highlight class="normal"><sp/><sp/><sp/><sp/>r-&gt;<ref refid="structsecp256k1__fe_1a4e7c00a989d1da635e7ffd33105d62df" kindref="member">n</ref>[1]<sp/>*=<sp/>a;</highlight></codeline>
<codeline lineno="352"><highlight class="normal"><sp/><sp/><sp/><sp/>r-&gt;<ref refid="structsecp256k1__fe_1a4e7c00a989d1da635e7ffd33105d62df" kindref="member">n</ref>[2]<sp/>*=<sp/>a;</highlight></codeline>
<codeline lineno="353"><highlight class="normal"><sp/><sp/><sp/><sp/>r-&gt;<ref refid="structsecp256k1__fe_1a4e7c00a989d1da635e7ffd33105d62df" kindref="member">n</ref>[3]<sp/>*=<sp/>a;</highlight></codeline>
<codeline lineno="354"><highlight class="normal"><sp/><sp/><sp/><sp/>r-&gt;<ref refid="structsecp256k1__fe_1a4e7c00a989d1da635e7ffd33105d62df" kindref="member">n</ref>[4]<sp/>*=<sp/>a;</highlight></codeline>
<codeline lineno="355"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>VERIFY</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="356"><highlight class="normal"><sp/><sp/><sp/><sp/>r-&gt;magnitude<sp/>*=<sp/>a;</highlight></codeline>
<codeline lineno="357"><highlight class="normal"><sp/><sp/><sp/><sp/>r-&gt;normalized<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="358"><highlight class="normal"><sp/><sp/><sp/><sp/>secp256k1_fe_verify(r);</highlight></codeline>
<codeline lineno="359"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="360"><highlight class="normal">}</highlight></codeline>
<codeline lineno="361"><highlight class="normal"></highlight></codeline>
<codeline lineno="362"><highlight class="normal"><ref refid="secp256k1_8h_1a7ddc487fd46aee88f21cabedb7268b1e" kindref="member">SECP256K1_INLINE</ref><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>secp256k1_fe_add(<ref refid="structsecp256k1__fe" kindref="compound">secp256k1_fe</ref><sp/>*r,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structsecp256k1__fe" kindref="compound">secp256k1_fe</ref><sp/>*a)<sp/>{</highlight></codeline>
<codeline lineno="363"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>VERIFY</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="364"><highlight class="normal"><sp/><sp/><sp/><sp/>secp256k1_fe_verify(a);</highlight></codeline>
<codeline lineno="365"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="366"><highlight class="normal"><sp/><sp/><sp/><sp/>r-&gt;<ref refid="structsecp256k1__fe_1a4e7c00a989d1da635e7ffd33105d62df" kindref="member">n</ref>[0]<sp/>+=<sp/>a-&gt;<ref refid="structsecp256k1__fe_1a4e7c00a989d1da635e7ffd33105d62df" kindref="member">n</ref>[0];</highlight></codeline>
<codeline lineno="367"><highlight class="normal"><sp/><sp/><sp/><sp/>r-&gt;<ref refid="structsecp256k1__fe_1a4e7c00a989d1da635e7ffd33105d62df" kindref="member">n</ref>[1]<sp/>+=<sp/>a-&gt;<ref refid="structsecp256k1__fe_1a4e7c00a989d1da635e7ffd33105d62df" kindref="member">n</ref>[1];</highlight></codeline>
<codeline lineno="368"><highlight class="normal"><sp/><sp/><sp/><sp/>r-&gt;<ref refid="structsecp256k1__fe_1a4e7c00a989d1da635e7ffd33105d62df" kindref="member">n</ref>[2]<sp/>+=<sp/>a-&gt;<ref refid="structsecp256k1__fe_1a4e7c00a989d1da635e7ffd33105d62df" kindref="member">n</ref>[2];</highlight></codeline>
<codeline lineno="369"><highlight class="normal"><sp/><sp/><sp/><sp/>r-&gt;<ref refid="structsecp256k1__fe_1a4e7c00a989d1da635e7ffd33105d62df" kindref="member">n</ref>[3]<sp/>+=<sp/>a-&gt;<ref refid="structsecp256k1__fe_1a4e7c00a989d1da635e7ffd33105d62df" kindref="member">n</ref>[3];</highlight></codeline>
<codeline lineno="370"><highlight class="normal"><sp/><sp/><sp/><sp/>r-&gt;<ref refid="structsecp256k1__fe_1a4e7c00a989d1da635e7ffd33105d62df" kindref="member">n</ref>[4]<sp/>+=<sp/>a-&gt;<ref refid="structsecp256k1__fe_1a4e7c00a989d1da635e7ffd33105d62df" kindref="member">n</ref>[4];</highlight></codeline>
<codeline lineno="371"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>VERIFY</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="372"><highlight class="normal"><sp/><sp/><sp/><sp/>r-&gt;magnitude<sp/>+=<sp/>a-&gt;magnitude;</highlight></codeline>
<codeline lineno="373"><highlight class="normal"><sp/><sp/><sp/><sp/>r-&gt;normalized<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="374"><highlight class="normal"><sp/><sp/><sp/><sp/>secp256k1_fe_verify(r);</highlight></codeline>
<codeline lineno="375"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="376"><highlight class="normal">}</highlight></codeline>
<codeline lineno="377"><highlight class="normal"></highlight></codeline>
<codeline lineno="378"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>secp256k1_fe_mul(<ref refid="structsecp256k1__fe" kindref="compound">secp256k1_fe</ref><sp/>*r,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structsecp256k1__fe" kindref="compound">secp256k1_fe</ref><sp/>*a,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structsecp256k1__fe" kindref="compound">secp256k1_fe</ref><sp/>*<sp/><ref refid="secp256k1_2src_2util_8h_1ad3e284f8cb00286e85a753265f6b17b8" kindref="member">SECP256K1_RESTRICT</ref><sp/>b)<sp/>{</highlight></codeline>
<codeline lineno="379"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>VERIFY</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="380"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="secp256k1_2src_2util_8h_1aca8ac5ae73fd966db106de59160a178b" kindref="member">VERIFY_CHECK</ref>(a-&gt;magnitude<sp/>&lt;=<sp/>8);</highlight></codeline>
<codeline lineno="381"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="secp256k1_2src_2util_8h_1aca8ac5ae73fd966db106de59160a178b" kindref="member">VERIFY_CHECK</ref>(b-&gt;magnitude<sp/>&lt;=<sp/>8);</highlight></codeline>
<codeline lineno="382"><highlight class="normal"><sp/><sp/><sp/><sp/>secp256k1_fe_verify(a);</highlight></codeline>
<codeline lineno="383"><highlight class="normal"><sp/><sp/><sp/><sp/>secp256k1_fe_verify(b);</highlight></codeline>
<codeline lineno="384"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="secp256k1_2src_2util_8h_1aca8ac5ae73fd966db106de59160a178b" kindref="member">VERIFY_CHECK</ref>(r<sp/>!=<sp/>b);</highlight></codeline>
<codeline lineno="385"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="386"><highlight class="normal"><sp/><sp/><sp/><sp/>secp256k1_fe_mul_inner(r-&gt;<ref refid="structsecp256k1__fe_1a4e7c00a989d1da635e7ffd33105d62df" kindref="member">n</ref>,<sp/>a-&gt;<ref refid="structsecp256k1__fe_1a4e7c00a989d1da635e7ffd33105d62df" kindref="member">n</ref>,<sp/>b-&gt;n);</highlight></codeline>
<codeline lineno="387"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>VERIFY</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="388"><highlight class="normal"><sp/><sp/><sp/><sp/>r-&gt;magnitude<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="389"><highlight class="normal"><sp/><sp/><sp/><sp/>r-&gt;normalized<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="390"><highlight class="normal"><sp/><sp/><sp/><sp/>secp256k1_fe_verify(r);</highlight></codeline>
<codeline lineno="391"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="392"><highlight class="normal">}</highlight></codeline>
<codeline lineno="393"><highlight class="normal"></highlight></codeline>
<codeline lineno="394"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>secp256k1_fe_sqr(<ref refid="structsecp256k1__fe" kindref="compound">secp256k1_fe</ref><sp/>*r,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structsecp256k1__fe" kindref="compound">secp256k1_fe</ref><sp/>*a)<sp/>{</highlight></codeline>
<codeline lineno="395"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>VERIFY</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="396"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="secp256k1_2src_2util_8h_1aca8ac5ae73fd966db106de59160a178b" kindref="member">VERIFY_CHECK</ref>(a-&gt;magnitude<sp/>&lt;=<sp/>8);</highlight></codeline>
<codeline lineno="397"><highlight class="normal"><sp/><sp/><sp/><sp/>secp256k1_fe_verify(a);</highlight></codeline>
<codeline lineno="398"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="399"><highlight class="normal"><sp/><sp/><sp/><sp/>secp256k1_fe_sqr_inner(r-&gt;<ref refid="structsecp256k1__fe_1a4e7c00a989d1da635e7ffd33105d62df" kindref="member">n</ref>,<sp/>a-&gt;<ref refid="structsecp256k1__fe_1a4e7c00a989d1da635e7ffd33105d62df" kindref="member">n</ref>);</highlight></codeline>
<codeline lineno="400"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>VERIFY</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="401"><highlight class="normal"><sp/><sp/><sp/><sp/>r-&gt;magnitude<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="402"><highlight class="normal"><sp/><sp/><sp/><sp/>r-&gt;normalized<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="403"><highlight class="normal"><sp/><sp/><sp/><sp/>secp256k1_fe_verify(r);</highlight></codeline>
<codeline lineno="404"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="405"><highlight class="normal">}</highlight></codeline>
<codeline lineno="406"><highlight class="normal"></highlight></codeline>
<codeline lineno="407"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="secp256k1_8h_1a7ddc487fd46aee88f21cabedb7268b1e" kindref="member">SECP256K1_INLINE</ref><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>secp256k1_fe_cmov(<ref refid="structsecp256k1__fe" kindref="compound">secp256k1_fe</ref><sp/>*r,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structsecp256k1__fe" kindref="compound">secp256k1_fe</ref><sp/>*a,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>flag)<sp/>{</highlight></codeline>
<codeline lineno="408"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="stdint_8h_1aaa5d1cd013383c889537491c3cfd9aad" kindref="member">uint64_t</ref><sp/>mask0,<sp/>mask1;</highlight></codeline>
<codeline lineno="409"><highlight class="normal"><sp/><sp/><sp/><sp/>mask0<sp/>=<sp/>flag<sp/>+<sp/>~((<ref refid="stdint_8h_1aaa5d1cd013383c889537491c3cfd9aad" kindref="member">uint64_t</ref>)0);</highlight></codeline>
<codeline lineno="410"><highlight class="normal"><sp/><sp/><sp/><sp/>mask1<sp/>=<sp/>~mask0;</highlight></codeline>
<codeline lineno="411"><highlight class="normal"><sp/><sp/><sp/><sp/>r-&gt;<ref refid="structsecp256k1__fe_1a4e7c00a989d1da635e7ffd33105d62df" kindref="member">n</ref>[0]<sp/>=<sp/>(r-&gt;<ref refid="structsecp256k1__fe_1a4e7c00a989d1da635e7ffd33105d62df" kindref="member">n</ref>[0]<sp/>&amp;<sp/>mask0)<sp/>|<sp/>(a-&gt;<ref refid="structsecp256k1__fe_1a4e7c00a989d1da635e7ffd33105d62df" kindref="member">n</ref>[0]<sp/>&amp;<sp/>mask1);</highlight></codeline>
<codeline lineno="412"><highlight class="normal"><sp/><sp/><sp/><sp/>r-&gt;<ref refid="structsecp256k1__fe_1a4e7c00a989d1da635e7ffd33105d62df" kindref="member">n</ref>[1]<sp/>=<sp/>(r-&gt;<ref refid="structsecp256k1__fe_1a4e7c00a989d1da635e7ffd33105d62df" kindref="member">n</ref>[1]<sp/>&amp;<sp/>mask0)<sp/>|<sp/>(a-&gt;<ref refid="structsecp256k1__fe_1a4e7c00a989d1da635e7ffd33105d62df" kindref="member">n</ref>[1]<sp/>&amp;<sp/>mask1);</highlight></codeline>
<codeline lineno="413"><highlight class="normal"><sp/><sp/><sp/><sp/>r-&gt;<ref refid="structsecp256k1__fe_1a4e7c00a989d1da635e7ffd33105d62df" kindref="member">n</ref>[2]<sp/>=<sp/>(r-&gt;<ref refid="structsecp256k1__fe_1a4e7c00a989d1da635e7ffd33105d62df" kindref="member">n</ref>[2]<sp/>&amp;<sp/>mask0)<sp/>|<sp/>(a-&gt;<ref refid="structsecp256k1__fe_1a4e7c00a989d1da635e7ffd33105d62df" kindref="member">n</ref>[2]<sp/>&amp;<sp/>mask1);</highlight></codeline>
<codeline lineno="414"><highlight class="normal"><sp/><sp/><sp/><sp/>r-&gt;<ref refid="structsecp256k1__fe_1a4e7c00a989d1da635e7ffd33105d62df" kindref="member">n</ref>[3]<sp/>=<sp/>(r-&gt;<ref refid="structsecp256k1__fe_1a4e7c00a989d1da635e7ffd33105d62df" kindref="member">n</ref>[3]<sp/>&amp;<sp/>mask0)<sp/>|<sp/>(a-&gt;<ref refid="structsecp256k1__fe_1a4e7c00a989d1da635e7ffd33105d62df" kindref="member">n</ref>[3]<sp/>&amp;<sp/>mask1);</highlight></codeline>
<codeline lineno="415"><highlight class="normal"><sp/><sp/><sp/><sp/>r-&gt;<ref refid="structsecp256k1__fe_1a4e7c00a989d1da635e7ffd33105d62df" kindref="member">n</ref>[4]<sp/>=<sp/>(r-&gt;<ref refid="structsecp256k1__fe_1a4e7c00a989d1da635e7ffd33105d62df" kindref="member">n</ref>[4]<sp/>&amp;<sp/>mask0)<sp/>|<sp/>(a-&gt;<ref refid="structsecp256k1__fe_1a4e7c00a989d1da635e7ffd33105d62df" kindref="member">n</ref>[4]<sp/>&amp;<sp/>mask1);</highlight></codeline>
<codeline lineno="416"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>VERIFY</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="417"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(a-&gt;magnitude<sp/>&gt;<sp/>r-&gt;magnitude)<sp/>{</highlight></codeline>
<codeline lineno="418"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>r-&gt;magnitude<sp/>=<sp/>a-&gt;magnitude;</highlight></codeline>
<codeline lineno="419"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="420"><highlight class="normal"><sp/><sp/><sp/><sp/>r-&gt;normalized<sp/>&amp;=<sp/>a-&gt;normalized;</highlight></codeline>
<codeline lineno="421"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="422"><highlight class="normal">}</highlight></codeline>
<codeline lineno="423"><highlight class="normal"></highlight></codeline>
<codeline lineno="424"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="secp256k1_8h_1a7ddc487fd46aee88f21cabedb7268b1e" kindref="member">SECP256K1_INLINE</ref><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>secp256k1_fe_storage_cmov(<ref refid="structsecp256k1__fe__storage" kindref="compound">secp256k1_fe_storage</ref><sp/>*r,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structsecp256k1__fe__storage" kindref="compound">secp256k1_fe_storage</ref><sp/>*a,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>flag)<sp/>{</highlight></codeline>
<codeline lineno="425"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="stdint_8h_1aaa5d1cd013383c889537491c3cfd9aad" kindref="member">uint64_t</ref><sp/>mask0,<sp/>mask1;</highlight></codeline>
<codeline lineno="426"><highlight class="normal"><sp/><sp/><sp/><sp/>mask0<sp/>=<sp/>flag<sp/>+<sp/>~((<ref refid="stdint_8h_1aaa5d1cd013383c889537491c3cfd9aad" kindref="member">uint64_t</ref>)0);</highlight></codeline>
<codeline lineno="427"><highlight class="normal"><sp/><sp/><sp/><sp/>mask1<sp/>=<sp/>~mask0;</highlight></codeline>
<codeline lineno="428"><highlight class="normal"><sp/><sp/><sp/><sp/>r-&gt;<ref refid="structsecp256k1__fe__storage_1a63f0548b6674a57ab1d2c6271008c037" kindref="member">n</ref>[0]<sp/>=<sp/>(r-&gt;<ref refid="structsecp256k1__fe__storage_1a63f0548b6674a57ab1d2c6271008c037" kindref="member">n</ref>[0]<sp/>&amp;<sp/>mask0)<sp/>|<sp/>(a-&gt;<ref refid="structsecp256k1__fe__storage_1a63f0548b6674a57ab1d2c6271008c037" kindref="member">n</ref>[0]<sp/>&amp;<sp/>mask1);</highlight></codeline>
<codeline lineno="429"><highlight class="normal"><sp/><sp/><sp/><sp/>r-&gt;<ref refid="structsecp256k1__fe__storage_1a63f0548b6674a57ab1d2c6271008c037" kindref="member">n</ref>[1]<sp/>=<sp/>(r-&gt;<ref refid="structsecp256k1__fe__storage_1a63f0548b6674a57ab1d2c6271008c037" kindref="member">n</ref>[1]<sp/>&amp;<sp/>mask0)<sp/>|<sp/>(a-&gt;<ref refid="structsecp256k1__fe__storage_1a63f0548b6674a57ab1d2c6271008c037" kindref="member">n</ref>[1]<sp/>&amp;<sp/>mask1);</highlight></codeline>
<codeline lineno="430"><highlight class="normal"><sp/><sp/><sp/><sp/>r-&gt;<ref refid="structsecp256k1__fe__storage_1a63f0548b6674a57ab1d2c6271008c037" kindref="member">n</ref>[2]<sp/>=<sp/>(r-&gt;<ref refid="structsecp256k1__fe__storage_1a63f0548b6674a57ab1d2c6271008c037" kindref="member">n</ref>[2]<sp/>&amp;<sp/>mask0)<sp/>|<sp/>(a-&gt;<ref refid="structsecp256k1__fe__storage_1a63f0548b6674a57ab1d2c6271008c037" kindref="member">n</ref>[2]<sp/>&amp;<sp/>mask1);</highlight></codeline>
<codeline lineno="431"><highlight class="normal"><sp/><sp/><sp/><sp/>r-&gt;<ref refid="structsecp256k1__fe__storage_1a63f0548b6674a57ab1d2c6271008c037" kindref="member">n</ref>[3]<sp/>=<sp/>(r-&gt;<ref refid="structsecp256k1__fe__storage_1a63f0548b6674a57ab1d2c6271008c037" kindref="member">n</ref>[3]<sp/>&amp;<sp/>mask0)<sp/>|<sp/>(a-&gt;<ref refid="structsecp256k1__fe__storage_1a63f0548b6674a57ab1d2c6271008c037" kindref="member">n</ref>[3]<sp/>&amp;<sp/>mask1);</highlight></codeline>
<codeline lineno="432"><highlight class="normal">}</highlight></codeline>
<codeline lineno="433"><highlight class="normal"></highlight></codeline>
<codeline lineno="434"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>secp256k1_fe_to_storage(<ref refid="structsecp256k1__fe__storage" kindref="compound">secp256k1_fe_storage</ref><sp/>*r,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structsecp256k1__fe" kindref="compound">secp256k1_fe</ref><sp/>*a)<sp/>{</highlight></codeline>
<codeline lineno="435"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>VERIFY</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="436"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="secp256k1_2src_2util_8h_1aca8ac5ae73fd966db106de59160a178b" kindref="member">VERIFY_CHECK</ref>(a-&gt;normalized);</highlight></codeline>
<codeline lineno="437"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="438"><highlight class="normal"><sp/><sp/><sp/><sp/>r-&gt;<ref refid="structsecp256k1__fe__storage_1a63f0548b6674a57ab1d2c6271008c037" kindref="member">n</ref>[0]<sp/>=<sp/>a-&gt;<ref refid="structsecp256k1__fe_1a4e7c00a989d1da635e7ffd33105d62df" kindref="member">n</ref>[0]<sp/>|<sp/>a-&gt;<ref refid="structsecp256k1__fe_1a4e7c00a989d1da635e7ffd33105d62df" kindref="member">n</ref>[1]<sp/>&lt;&lt;<sp/>52;</highlight></codeline>
<codeline lineno="439"><highlight class="normal"><sp/><sp/><sp/><sp/>r-&gt;<ref refid="structsecp256k1__fe__storage_1a63f0548b6674a57ab1d2c6271008c037" kindref="member">n</ref>[1]<sp/>=<sp/>a-&gt;<ref refid="structsecp256k1__fe_1a4e7c00a989d1da635e7ffd33105d62df" kindref="member">n</ref>[1]<sp/>&gt;&gt;<sp/>12<sp/>|<sp/>a-&gt;<ref refid="structsecp256k1__fe_1a4e7c00a989d1da635e7ffd33105d62df" kindref="member">n</ref>[2]<sp/>&lt;&lt;<sp/>40;</highlight></codeline>
<codeline lineno="440"><highlight class="normal"><sp/><sp/><sp/><sp/>r-&gt;<ref refid="structsecp256k1__fe__storage_1a63f0548b6674a57ab1d2c6271008c037" kindref="member">n</ref>[2]<sp/>=<sp/>a-&gt;<ref refid="structsecp256k1__fe_1a4e7c00a989d1da635e7ffd33105d62df" kindref="member">n</ref>[2]<sp/>&gt;&gt;<sp/>24<sp/>|<sp/>a-&gt;<ref refid="structsecp256k1__fe_1a4e7c00a989d1da635e7ffd33105d62df" kindref="member">n</ref>[3]<sp/>&lt;&lt;<sp/>28;</highlight></codeline>
<codeline lineno="441"><highlight class="normal"><sp/><sp/><sp/><sp/>r-&gt;<ref refid="structsecp256k1__fe__storage_1a63f0548b6674a57ab1d2c6271008c037" kindref="member">n</ref>[3]<sp/>=<sp/>a-&gt;<ref refid="structsecp256k1__fe_1a4e7c00a989d1da635e7ffd33105d62df" kindref="member">n</ref>[3]<sp/>&gt;&gt;<sp/>36<sp/>|<sp/>a-&gt;<ref refid="structsecp256k1__fe_1a4e7c00a989d1da635e7ffd33105d62df" kindref="member">n</ref>[4]<sp/>&lt;&lt;<sp/>16;</highlight></codeline>
<codeline lineno="442"><highlight class="normal">}</highlight></codeline>
<codeline lineno="443"><highlight class="normal"></highlight></codeline>
<codeline lineno="444"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="secp256k1_8h_1a7ddc487fd46aee88f21cabedb7268b1e" kindref="member">SECP256K1_INLINE</ref><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>secp256k1_fe_from_storage(<ref refid="structsecp256k1__fe" kindref="compound">secp256k1_fe</ref><sp/>*r,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structsecp256k1__fe__storage" kindref="compound">secp256k1_fe_storage</ref><sp/>*a)<sp/>{</highlight></codeline>
<codeline lineno="445"><highlight class="normal"><sp/><sp/><sp/><sp/>r-&gt;<ref refid="structsecp256k1__fe_1a4e7c00a989d1da635e7ffd33105d62df" kindref="member">n</ref>[0]<sp/>=<sp/>a-&gt;<ref refid="structsecp256k1__fe__storage_1a63f0548b6674a57ab1d2c6271008c037" kindref="member">n</ref>[0]<sp/>&amp;<sp/>0xFFFFFFFFFFFFFULL;</highlight></codeline>
<codeline lineno="446"><highlight class="normal"><sp/><sp/><sp/><sp/>r-&gt;<ref refid="structsecp256k1__fe_1a4e7c00a989d1da635e7ffd33105d62df" kindref="member">n</ref>[1]<sp/>=<sp/>a-&gt;<ref refid="structsecp256k1__fe__storage_1a63f0548b6674a57ab1d2c6271008c037" kindref="member">n</ref>[0]<sp/>&gt;&gt;<sp/>52<sp/>|<sp/>((a-&gt;<ref refid="structsecp256k1__fe__storage_1a63f0548b6674a57ab1d2c6271008c037" kindref="member">n</ref>[1]<sp/>&lt;&lt;<sp/>12)<sp/>&amp;<sp/>0xFFFFFFFFFFFFFULL);</highlight></codeline>
<codeline lineno="447"><highlight class="normal"><sp/><sp/><sp/><sp/>r-&gt;<ref refid="structsecp256k1__fe_1a4e7c00a989d1da635e7ffd33105d62df" kindref="member">n</ref>[2]<sp/>=<sp/>a-&gt;<ref refid="structsecp256k1__fe__storage_1a63f0548b6674a57ab1d2c6271008c037" kindref="member">n</ref>[1]<sp/>&gt;&gt;<sp/>40<sp/>|<sp/>((a-&gt;<ref refid="structsecp256k1__fe__storage_1a63f0548b6674a57ab1d2c6271008c037" kindref="member">n</ref>[2]<sp/>&lt;&lt;<sp/>24)<sp/>&amp;<sp/>0xFFFFFFFFFFFFFULL);</highlight></codeline>
<codeline lineno="448"><highlight class="normal"><sp/><sp/><sp/><sp/>r-&gt;<ref refid="structsecp256k1__fe_1a4e7c00a989d1da635e7ffd33105d62df" kindref="member">n</ref>[3]<sp/>=<sp/>a-&gt;<ref refid="structsecp256k1__fe__storage_1a63f0548b6674a57ab1d2c6271008c037" kindref="member">n</ref>[2]<sp/>&gt;&gt;<sp/>28<sp/>|<sp/>((a-&gt;<ref refid="structsecp256k1__fe__storage_1a63f0548b6674a57ab1d2c6271008c037" kindref="member">n</ref>[3]<sp/>&lt;&lt;<sp/>36)<sp/>&amp;<sp/>0xFFFFFFFFFFFFFULL);</highlight></codeline>
<codeline lineno="449"><highlight class="normal"><sp/><sp/><sp/><sp/>r-&gt;<ref refid="structsecp256k1__fe_1a4e7c00a989d1da635e7ffd33105d62df" kindref="member">n</ref>[4]<sp/>=<sp/>a-&gt;<ref refid="structsecp256k1__fe__storage_1a63f0548b6674a57ab1d2c6271008c037" kindref="member">n</ref>[3]<sp/>&gt;&gt;<sp/>16;</highlight></codeline>
<codeline lineno="450"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>VERIFY</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="451"><highlight class="normal"><sp/><sp/><sp/><sp/>r-&gt;magnitude<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="452"><highlight class="normal"><sp/><sp/><sp/><sp/>r-&gt;normalized<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="453"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="454"><highlight class="normal">}</highlight></codeline>
<codeline lineno="455"><highlight class="normal"></highlight></codeline>
<codeline lineno="456"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
    </programlisting>
    <location file="/home/dev/ds-160209/src/secp256k1/src/field_5x52_impl.h"/>
  </compounddef>
</doxygen>
