<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.9.1">
  <compounddef id="util_8cpp" kind="file" language="C++">
    <compoundname>util.cpp</compoundname>
    <includes refid="util_8h" local="yes">util.h</includes>
    <includes refid="amount_8h" local="yes">amount.h</includes>
    <includes refid="chainparams_8h" local="yes">chainparams.h</includes>
    <includes refid="sync_8h" local="yes">sync.h</includes>
    <includes refid="ui__interface_8h" local="yes">ui_interface.h</includes>
    <includes refid="uint256_8h" local="yes">uint256.h</includes>
    <includes refid="version_8h" local="yes">version.h</includes>
    <includes refid="netbase_8h" local="yes">netbase.h</includes>
    <includes refid="allocators_8h" local="yes">allocators.h</includes>
    <includes local="no">algorithm</includes>
    <includes local="no">boost/date_time/posix_time/posix_time.hpp</includes>
    <includes local="no">boost/algorithm/string/case_conv.hpp</includes>
    <includes local="no">boost/algorithm/string/join.hpp</includes>
    <includes local="no">boost/algorithm/string/predicate.hpp</includes>
    <includes local="no">boost/program_options/detail/config_file.hpp</includes>
    <includes local="no">boost/program_options/parsers.hpp</includes>
    <includes local="no">boost/filesystem.hpp</includes>
    <includes local="no">boost/filesystem/fstream.hpp</includes>
    <includes local="no">boost/foreach.hpp</includes>
    <includes local="no">boost/thread.hpp</includes>
    <includes local="no">openssl/crypto.h</includes>
    <includes local="no">openssl/rand.h</includes>
    <includes local="no">openssl/err.h</includes>
    <includes local="no">stdarg.h</includes>
    <incdepgraph>
      <node id="58016">
        <label>list</label>
      </node>
      <node id="58005">
        <label>boost/thread/mutex.hpp</label>
      </node>
      <node id="58061">
        <label>stdarg.h</label>
      </node>
      <node id="58046">
        <label>netinet/in.h</label>
      </node>
      <node id="58015">
        <label>amount.h</label>
        <link refid="amount_8h"/>
        <childnode refid="57989" relation="include">
        </childnode>
        <childnode refid="58003" relation="include">
        </childnode>
        <childnode refid="57990" relation="include">
        </childnode>
      </node>
      <node id="58047">
        <label>arpa/inet.h</label>
      </node>
      <node id="58035">
        <label>boost/thread/condition_variable.hpp</label>
      </node>
      <node id="57995">
        <label>limits</label>
      </node>
      <node id="58027">
        <label>openssl/rand.h</label>
      </node>
      <node id="58032">
        <label>assert.h</label>
      </node>
      <node id="58000">
        <label>boost/tuple/tuple.hpp</label>
      </node>
      <node id="58045">
        <label>net/if.h</label>
      </node>
      <node id="58037">
        <label>boost/thread/recursive_mutex.hpp</label>
      </node>
      <node id="58009">
        <label>version.h</label>
        <link refid="version_8h"/>
        <childnode refid="58010" relation="include">
        </childnode>
        <childnode refid="57990" relation="include">
        </childnode>
      </node>
      <node id="58006">
        <label>sys/mman.h</label>
      </node>
      <node id="58003">
        <label>stdlib.h</label>
      </node>
      <node id="58059">
        <label>boost/foreach.hpp</label>
      </node>
      <node id="58026">
        <label>openssl/crypto.h</label>
      </node>
      <node id="58058">
        <label>boost/filesystem/fstream.hpp</label>
      </node>
      <node id="58042">
        <label>compat.h</label>
        <link refid="compat_8h"/>
        <childnode refid="58043" relation="include">
        </childnode>
        <childnode refid="58006" relation="include">
        </childnode>
        <childnode refid="58044" relation="include">
        </childnode>
        <childnode refid="57986" relation="include">
        </childnode>
        <childnode refid="58045" relation="include">
        </childnode>
        <childnode refid="58046" relation="include">
        </childnode>
        <childnode refid="58047" relation="include">
        </childnode>
        <childnode refid="58048" relation="include">
        </childnode>
        <childnode refid="58007" relation="include">
        </childnode>
        <childnode refid="58049" relation="include">
        </childnode>
        <childnode refid="58008" relation="include">
        </childnode>
        <childnode refid="58050" relation="include">
        </childnode>
      </node>
      <node id="58022">
        <label>boost/date_time/posix_time/posix_time_types.hpp</label>
      </node>
      <node id="58050">
        <label>errno.h</label>
      </node>
      <node id="57994">
        <label>cassert</label>
      </node>
      <node id="58014">
        <label>stdexcept</label>
      </node>
      <node id="57985">
        <label>util.h</label>
        <link refid="util_8h"/>
        <childnode refid="57986" relation="include">
        </childnode>
        <childnode refid="57987" relation="include">
        </childnode>
        <childnode refid="57988" relation="include">
        </childnode>
        <childnode refid="57989" relation="include">
        </childnode>
        <childnode refid="58011" relation="include">
        </childnode>
        <childnode refid="58015" relation="include">
        </childnode>
        <childnode refid="57992" relation="include">
        </childnode>
        <childnode refid="58016" relation="include">
        </childnode>
        <childnode refid="58017" relation="include">
        </childnode>
        <childnode refid="57991" relation="include">
        </childnode>
        <childnode refid="57990" relation="include">
        </childnode>
        <childnode refid="58018" relation="include">
        </childnode>
        <childnode refid="58019" relation="include">
        </childnode>
        <childnode refid="58020" relation="include">
        </childnode>
        <childnode refid="58021" relation="include">
        </childnode>
        <childnode refid="58022" relation="include">
        </childnode>
        <childnode refid="58023" relation="include">
        </childnode>
        <childnode refid="58024" relation="include">
        </childnode>
        <childnode refid="58025" relation="include">
        </childnode>
        <childnode refid="58026" relation="include">
        </childnode>
        <childnode refid="58027" relation="include">
        </childnode>
        <childnode refid="58028" relation="include">
        </childnode>
        <childnode refid="57996" relation="include">
        </childnode>
      </node>
      <node id="58021">
        <label>boost/date_time/gregorian/gregorian_types.hpp</label>
      </node>
      <node id="57990">
        <label>string</label>
      </node>
      <node id="57992">
        <label>map</label>
      </node>
      <node id="58018">
        <label>boost/thread.hpp</label>
      </node>
      <node id="58038">
        <label>ui_interface.h</label>
        <link refid="ui__interface_8h"/>
        <childnode refid="58015" relation="include">
        </childnode>
        <childnode refid="58039" relation="include">
        </childnode>
        <childnode refid="58040" relation="include">
        </childnode>
        <childnode refid="57990" relation="include">
        </childnode>
        <childnode refid="57996" relation="include">
        </childnode>
      </node>
      <node id="58049">
        <label>netdb.h</label>
      </node>
      <node id="58043">
        <label>sys/fcntl.h</label>
      </node>
      <node id="58055">
        <label>boost/algorithm/string/predicate.hpp</label>
      </node>
      <node id="57989">
        <label>serialize.h</label>
        <link refid="serialize_8h"/>
        <childnode refid="57990" relation="include">
        </childnode>
        <childnode refid="57991" relation="include">
        </childnode>
        <childnode refid="57992" relation="include">
        </childnode>
        <childnode refid="57993" relation="include">
        </childnode>
        <childnode refid="57994" relation="include">
        </childnode>
        <childnode refid="57995" relation="include">
        </childnode>
        <childnode refid="57996" relation="include">
        </childnode>
        <childnode refid="57997" relation="include">
        </childnode>
        <childnode refid="57998" relation="include">
        </childnode>
        <childnode refid="57999" relation="include">
        </childnode>
        <childnode refid="58000" relation="include">
        </childnode>
        <childnode refid="58001" relation="include">
        </childnode>
        <childnode refid="58009" relation="include">
        </childnode>
      </node>
      <node id="58007">
        <label>limits.h</label>
      </node>
      <node id="58034">
        <label>threadsafety.h</label>
        <link refid="threadsafety_8h"/>
      </node>
      <node id="57988">
        <label>sys/resource.h</label>
      </node>
      <node id="58023">
        <label>openssl/bio.h</label>
      </node>
      <node id="58040">
        <label>boost/signals2/signal.hpp</label>
      </node>
      <node id="58041">
        <label>netbase.h</label>
        <link refid="netbase_8h"/>
        <childnode refid="57990" relation="include">
        </childnode>
        <childnode refid="57991" relation="include">
        </childnode>
        <childnode refid="57989" relation="include">
        </childnode>
        <childnode refid="58042" relation="include">
        </childnode>
      </node>
      <node id="58060">
        <label>openssl/err.h</label>
      </node>
      <node id="58048">
        <label>ifaddrs.h</label>
      </node>
      <node id="58052">
        <label>boost/date_time/posix_time/posix_time.hpp</label>
      </node>
      <node id="57986">
        <label>sys/types.h</label>
      </node>
      <node id="58004">
        <label>string.h</label>
      </node>
      <node id="58010">
        <label>clientversion.h</label>
        <link refid="clientversion_8h"/>
      </node>
      <node id="57998">
        <label>cstdio</label>
      </node>
      <node id="58036">
        <label>boost/thread/locks.hpp</label>
      </node>
      <node id="58025">
        <label>openssl/buffer.h</label>
      </node>
      <node id="57999">
        <label>boost/type_traits/is_fundamental.hpp</label>
      </node>
      <node id="58020">
        <label>boost/filesystem/path.hpp</label>
      </node>
      <node id="58008">
        <label>unistd.h</label>
      </node>
      <node id="57991">
        <label>vector</label>
      </node>
      <node id="58030">
        <label>bignum.h</label>
        <link refid="bignum_8h"/>
        <childnode refid="57989" relation="include">
        </childnode>
        <childnode refid="58031" relation="include">
        </childnode>
        <childnode refid="58028" relation="include">
        </childnode>
        <childnode refid="58014" relation="include">
        </childnode>
        <childnode refid="57991" relation="include">
        </childnode>
        <childnode refid="57996" relation="include">
        </childnode>
      </node>
      <node id="58019">
        <label>boost/filesystem.hpp</label>
      </node>
      <node id="58053">
        <label>boost/algorithm/string/case_conv.hpp</label>
      </node>
      <node id="58017">
        <label>utility</label>
      </node>
      <node id="58013">
        <label>sstream</label>
      </node>
      <node id="58039">
        <label>boost/signals2/last_value.hpp</label>
      </node>
      <node id="58024">
        <label>openssl/evp.h</label>
      </node>
      <node id="58011">
        <label>tinyformat.h</label>
        <link refid="tinyformat_8h"/>
        <childnode refid="57994" relation="include">
        </childnode>
        <childnode refid="58012" relation="include">
        </childnode>
        <childnode refid="58013" relation="include">
        </childnode>
        <childnode refid="58014" relation="include">
        </childnode>
      </node>
      <node id="57996">
        <label>stdint.h</label>
        <link refid="stdint_8h"/>
      </node>
      <node id="57984">
        <label>/home/dev/ds-160209/src/util.cpp</label>
        <link refid="util.cpp"/>
        <childnode refid="57985" relation="include">
        </childnode>
        <childnode refid="58015" relation="include">
        </childnode>
        <childnode refid="58029" relation="include">
        </childnode>
        <childnode refid="58033" relation="include">
        </childnode>
        <childnode refid="58038" relation="include">
        </childnode>
        <childnode refid="58031" relation="include">
        </childnode>
        <childnode refid="58009" relation="include">
        </childnode>
        <childnode refid="58041" relation="include">
        </childnode>
        <childnode refid="58001" relation="include">
        </childnode>
        <childnode refid="58051" relation="include">
        </childnode>
        <childnode refid="58052" relation="include">
        </childnode>
        <childnode refid="58053" relation="include">
        </childnode>
        <childnode refid="58054" relation="include">
        </childnode>
        <childnode refid="58055" relation="include">
        </childnode>
        <childnode refid="58056" relation="include">
        </childnode>
        <childnode refid="58057" relation="include">
        </childnode>
        <childnode refid="58019" relation="include">
        </childnode>
        <childnode refid="58058" relation="include">
        </childnode>
        <childnode refid="58059" relation="include">
        </childnode>
        <childnode refid="58018" relation="include">
        </childnode>
        <childnode refid="58026" relation="include">
        </childnode>
        <childnode refid="58027" relation="include">
        </childnode>
        <childnode refid="58060" relation="include">
        </childnode>
        <childnode refid="58061" relation="include">
        </childnode>
      </node>
      <node id="57987">
        <label>sys/time.h</label>
      </node>
      <node id="58012">
        <label>iostream</label>
      </node>
      <node id="58054">
        <label>boost/algorithm/string/join.hpp</label>
      </node>
      <node id="58057">
        <label>boost/program_options/parsers.hpp</label>
      </node>
      <node id="58031">
        <label>uint256.h</label>
        <link refid="uint256_8h"/>
        <childnode refid="58032" relation="include">
        </childnode>
        <childnode refid="57997" relation="include">
        </childnode>
        <childnode refid="58014" relation="include">
        </childnode>
        <childnode refid="57996" relation="include">
        </childnode>
        <childnode refid="57990" relation="include">
        </childnode>
        <childnode refid="57991" relation="include">
        </childnode>
      </node>
      <node id="58044">
        <label>sys/socket.h</label>
      </node>
      <node id="58028">
        <label>openssl/bn.h</label>
      </node>
      <node id="58001">
        <label>allocators.h</label>
        <link refid="allocators_8h"/>
        <childnode refid="58002" relation="include">
        </childnode>
        <childnode refid="58004" relation="include">
        </childnode>
        <childnode refid="57990" relation="include">
        </childnode>
        <childnode refid="58005" relation="include">
        </childnode>
        <childnode refid="57992" relation="include">
        </childnode>
        <childnode refid="58006" relation="include">
        </childnode>
        <childnode refid="58007" relation="include">
        </childnode>
        <childnode refid="58008" relation="include">
        </childnode>
      </node>
      <node id="58029">
        <label>chainparams.h</label>
        <link refid="chainparams_8h"/>
        <childnode refid="58030" relation="include">
        </childnode>
        <childnode refid="58031" relation="include">
        </childnode>
        <childnode refid="57991" relation="include">
        </childnode>
      </node>
      <node id="57993">
        <label>set</label>
      </node>
      <node id="58051">
        <label>algorithm</label>
      </node>
      <node id="58002">
        <label>cleanse.h</label>
        <link refid="cleanse_8h"/>
        <childnode refid="58003" relation="include">
        </childnode>
      </node>
      <node id="57997">
        <label>cstring</label>
      </node>
      <node id="58033">
        <label>sync.h</label>
        <link refid="sync_8h"/>
        <childnode refid="58034" relation="include">
        </childnode>
        <childnode refid="58035" relation="include">
        </childnode>
        <childnode refid="58036" relation="include">
        </childnode>
        <childnode refid="58005" relation="include">
        </childnode>
        <childnode refid="58037" relation="include">
        </childnode>
      </node>
      <node id="58056">
        <label>boost/program_options/detail/config_file.hpp</label>
      </node>
    </incdepgraph>
    <innerclass refid="class_c_init" prot="public">CInit</innerclass>
    <innernamespace refid="namespaceboost">boost</innernamespace>
    <innernamespace refid="namespaceboost_1_1program__options">boost::program_options</innernamespace>
      <sectiondef kind="var">
      <memberdef kind="variable" id="util_8cpp_1a9a7204234b904bf6a0374facf8477796" prot="public" static="no" mutable="no">
        <type>bool</type>
        <definition>bool fStormNode</definition>
        <argsstring></argsstring>
        <name>fStormNode</name>
        <initializer>= false</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/util.cpp" line="76" column="1" bodyfile="/home/dev/ds-160209/src/util.cpp" bodystart="76" bodyend="-1"/>
        <referencedby refid="class_c_active_stormnode_1a9532e0804ea4c96ad7d58ab3e9da6891" compoundref="activestormnode_8cpp" startline="17" endline="140">CActiveStormnode::ManageStatus</referencedby>
        <referencedby refid="class_c_active_stormnode_1af3925fdbe649c730b215b466680c0139" compoundref="activestormnode_8cpp" startline="402" endline="415">CActiveStormnode::EnableHotColdStormNode</referencedby>
        <referencedby refid="init_8h_1a1a4c1bfbf6ba1db77e988b89b9cadfd3" compoundref="init_8cpp" startline="375" endline="1285">AppInit2</referencedby>
        <referencedby refid="instantx_8h_1a0753801d6e6eb2cb230a85a6ba6fd371" compoundref="instantx_8cpp" startline="259" endline="299">DoConsensusVote</referencedby>
        <referencedby refid="class_overview_page_1a18c1a29cab6b745b25e701b20f234932" compoundref="overviewpage_8cpp" startline="101" endline="172">OverviewPage::OverviewPage</referencedby>
        <referencedby refid="class_overview_page_1a7fd68a7bebc327e3bbef2226b41298aa" compoundref="overviewpage_8cpp" startline="180" endline="184">OverviewPage::~OverviewPage</referencedby>
        <referencedby refid="rpcstormnode_8cpp_1ad7a328af61b85ec0efc0226abc483cf9" compoundref="rpcstormnode_8cpp" startline="20" endline="62">sandstorm</referencedby>
        <referencedby refid="rpcstormnode_8cpp_1a1b562b4a6a627758a7c1080f23a82aa0" compoundref="rpcstormnode_8cpp" startline="81" endline="471">stormnode</referencedby>
        <referencedby refid="class_c_sandstorm_pool_1acf0b5b0e5703c88b7d3c9cb121ec6533" compoundref="sandstorm_8cpp" startline="38" endline="374">CSandstormPool::ProcessMessageSandstorm</referencedby>
        <referencedby refid="class_c_sandstorm_pool_1a36dae9a698814612d6658c86eeea65b5" compoundref="sandstorm_8cpp" startline="495" endline="557">CSandstormPool::Check</referencedby>
        <referencedby refid="class_c_sandstorm_pool_1a287096eef4d6e8dcd778e7fab1dd9c11" compoundref="sandstorm_8cpp" startline="559" endline="632">CSandstormPool::CheckFinalTransaction</referencedby>
        <referencedby refid="class_c_sandstorm_pool_1a76f820f131dbb15d80f826f0c788249a" compoundref="sandstorm_8cpp" startline="646" endline="746">CSandstormPool::ChargeFees</referencedby>
        <referencedby refid="class_c_sandstorm_pool_1ac01544d518171779e6a609dae48d4f75" compoundref="sandstorm_8cpp" startline="750" endline="782">CSandstormPool::ChargeRandomFees</referencedby>
        <referencedby refid="class_c_sandstorm_pool_1ac771fe0088165502c2b804b415b32750" compoundref="sandstorm_8cpp" startline="787" endline="864">CSandstormPool::CheckTimeout</referencedby>
        <referencedby refid="class_c_sandstorm_pool_1a83d73d68f8df36be057d8dc6dad3fc28" compoundref="sandstorm_8cpp" startline="869" endline="888">CSandstormPool::CheckForCompleteQueue</referencedby>
        <referencedby refid="class_c_sandstorm_pool_1afeafad15214cd8599db468c2d9fc750e" compoundref="sandstorm_8cpp" startline="988" endline="1036">CSandstormPool::AddEntry</referencedby>
        <referencedby refid="class_c_sandstorm_pool_1a359b61acf2b36be02c04b7401a7a67d6" compoundref="sandstorm_8cpp" startline="1090" endline="1176">CSandstormPool::SendSandstormDenominate</referencedby>
        <referencedby refid="class_c_sandstorm_pool_1af272c7c4cb797a825b11d097da4cc59a" compoundref="sandstorm_8cpp" startline="1183" endline="1223">CSandstormPool::StatusUpdate</referencedby>
        <referencedby refid="class_c_sandstorm_pool_1adfe5727cd162dff15a016de05494ba44" compoundref="sandstorm_8cpp" startline="1230" endline="1305">CSandstormPool::SignFinalTransaction</referencedby>
        <referencedby refid="class_c_sandstorm_pool_1a4a844b1153973243d27a5f0702a7245d" compoundref="sandstorm_8cpp" startline="1319" endline="1341">CSandstormPool::CompletedTransaction</referencedby>
        <referencedby refid="class_c_sandstorm_pool_1a459d1986058ad736773fa9857390ba96" compoundref="sandstorm_8cpp" startline="1353" endline="1625">CSandstormPool::DoAutomaticDenominating</referencedby>
        <referencedby refid="class_c_sandstorm_queue_1a7a9c9b05136c8dfe75d9c1d4c81df83b" compoundref="sandstorm_8cpp" startline="2091" endline="2118">CSandstormQueue::Sign</referencedby>
        <referencedby refid="class_c_sandstorm_pool_1a4e48e06e3b981a9ac607a0df77428d42" compoundref="sandstorm_8h" startline="427" endline="442">CSandstormPool::UpdateState</referencedby>
        <referencedby refid="class_c_finalized_budget_1a88614fdccb5cdf722403c11832df2ad0" compoundref="stormnode-budget_8cpp" startline="1699" endline="1775">CFinalizedBudget::AutoCheck</referencedby>
        <referencedby refid="class_c_stormnode_payments_1a348b88dd03ef4a6684ae22141de841c8" compoundref="stormnode-payments_8cpp" startline="683" endline="762">CStormnodePayments::ProcessBlock</referencedby>
        <referencedby refid="class_c_stormnode_broadcast_1ac182349ba784e20ce826eda23a239e3c" compoundref="stormnode_8cpp" startline="424" endline="507">CStormnodeBroadcast::CheckInputsAndAdd</referencedby>
        <referencedby refid="class_c_wallet_1a260d40c79106bbaabbf3f4aaf328ffbc" compoundref="wallet_8cpp" startline="2488" endline="2530">CWallet::SelectCoinsDark</referencedby>
        <referencedby refid="class_c_wallet_tx_1a8bb9ffa6758ee861cd65100242c90882" compoundref="wallet_8h" startline="876" endline="913">CWalletTx::GetAnonymizableCredit</referencedby>
      </memberdef>
      <memberdef kind="variable" id="util_8cpp_1a577451f5342ffce98b2dacb94063c678" prot="public" static="no" mutable="no">
        <type>string</type>
        <definition>string strStormNodePrivKey</definition>
        <argsstring></argsstring>
        <name>strStormNodePrivKey</name>
        <initializer>= &quot;&quot;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/util.cpp" line="77" column="1" bodyfile="/home/dev/ds-160209/src/util.cpp" bodystart="77" bodyend="-1"/>
        <referencedby refid="class_c_active_stormnode_1a9532e0804ea4c96ad7d58ab3e9da6891" compoundref="activestormnode_8cpp" startline="17" endline="140">CActiveStormnode::ManageStatus</referencedby>
        <referencedby refid="init_8h_1a1a4c1bfbf6ba1db77e988b89b9cadfd3" compoundref="init_8cpp" startline="375" endline="1285">AppInit2</referencedby>
        <referencedby refid="class_c_consensus_vote_1a687495887aa75f5d5bb70f93ecb820d0" compoundref="instantx_8cpp" startline="493" endline="520">CConsensusVote::Sign</referencedby>
        <referencedby refid="rpcstormnode-budget_8cpp_1aae19bf2ba52f3b864bfaf70206bcb29a" compoundref="rpcstormnode-budget_8cpp" startline="22" endline="515">snbudget</referencedby>
        <referencedby refid="rpcstormnode-budget_8cpp_1aaff1bdc7f9f32708efc9094bb6ab0e0d" compoundref="rpcstormnode-budget_8cpp" startline="569" endline="761">snfinalbudget</referencedby>
        <referencedby refid="class_c_sandstorm_pool_1a287096eef4d6e8dcd778e7fab1dd9c11" compoundref="sandstorm_8cpp" startline="559" endline="632">CSandstormPool::CheckFinalTransaction</referencedby>
        <referencedby refid="class_c_sandstorm_queue_1a7a9c9b05136c8dfe75d9c1d4c81df83b" compoundref="sandstorm_8cpp" startline="2091" endline="2118">CSandstormQueue::Sign</referencedby>
        <referencedby refid="class_c_finalized_budget_1a8d5710eaf0fe541dcdce1d5f2ebee51c" compoundref="stormnode-budget_8cpp" startline="1914" endline="1940">CFinalizedBudget::SubmitVote</referencedby>
        <referencedby refid="class_c_stormnode_payments_1a348b88dd03ef4a6684ae22141de841c8" compoundref="stormnode-payments_8cpp" startline="683" endline="762">CStormnodePayments::ProcessBlock</referencedby>
      </memberdef>
      <memberdef kind="variable" id="util_8cpp_1a54b81bb7643acf8ec4ab91fdea98c16f" prot="public" static="no" mutable="no">
        <type>string</type>
        <definition>string strStormNodeAddr</definition>
        <argsstring></argsstring>
        <name>strStormNodeAddr</name>
        <initializer>= &quot;&quot;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/util.cpp" line="78" column="1" bodyfile="/home/dev/ds-160209/src/util.cpp" bodystart="78" bodyend="-1"/>
        <referencedby refid="class_c_active_stormnode_1a9532e0804ea4c96ad7d58ab3e9da6891" compoundref="activestormnode_8cpp" startline="17" endline="140">CActiveStormnode::ManageStatus</referencedby>
        <referencedby refid="init_8h_1a1a4c1bfbf6ba1db77e988b89b9cadfd3" compoundref="init_8cpp" startline="375" endline="1285">AppInit2</referencedby>
      </memberdef>
      <memberdef kind="variable" id="util_8cpp_1aa2216c761101b28e38757c5cffea3dc5" prot="public" static="no" mutable="no">
        <type>bool</type>
        <definition>bool fLiteMode</definition>
        <argsstring></argsstring>
        <name>fLiteMode</name>
        <initializer>= false</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/util.cpp" line="79" column="1" bodyfile="/home/dev/ds-160209/src/util.cpp" bodystart="79" bodyend="-1"/>
        <referencedby refid="init_8h_1a1a4c1bfbf6ba1db77e988b89b9cadfd3" compoundref="init_8cpp" startline="375" endline="1285">AppInit2</referencedby>
        <referencedby refid="instantx_8h_1aa516cb499ead2691d8ab216a499db5d0" compoundref="instantx_8cpp" startline="38" endline="173">ProcessMessageInstantX</referencedby>
        <referencedby refid="class_overview_page_1a18c1a29cab6b745b25e701b20f234932" compoundref="overviewpage_8cpp" startline="101" endline="172">OverviewPage::OverviewPage</referencedby>
        <referencedby refid="class_overview_page_1a7fd68a7bebc327e3bbef2226b41298aa" compoundref="overviewpage_8cpp" startline="180" endline="184">OverviewPage::~OverviewPage</referencedby>
        <referencedby refid="class_send_coins_dialog_1a0df5bc29d1df68eda44826651afc595f" compoundref="sendcoinsdialog_8cpp" startline="25" endline="109">SendCoinsDialog::SendCoinsDialog</referencedby>
        <referencedby refid="rpcmisc_8cpp_1a70335b93783d51e48d276a1e08bd721a" compoundref="rpcmisc_8cpp" startline="34" endline="81">getinfo</referencedby>
        <referencedby refid="class_c_sandstorm_pool_1acf0b5b0e5703c88b7d3c9cb121ec6533" compoundref="sandstorm_8cpp" startline="38" endline="374">CSandstormPool::ProcessMessageSandstorm</referencedby>
        <referencedby refid="sandstorm_8h_1ac661e702905cd5093cb237555ba5c1c0" compoundref="sandstorm_8cpp" startline="2196" endline="2239">ThreadCheckSandStormPool</referencedby>
        <referencedby refid="spork_8h_1a3f9c24c1f4c012152fb4422ca981610a" compoundref="spork_8cpp" startline="30" endline="78">ProcessSpork</referencedby>
        <referencedby refid="class_c_budget_manager_1a3fc235d528e37ec1c66789f3bfed1878" compoundref="stormnode-budget_8cpp" startline="904" endline="1072">CBudgetManager::ProcessMessage</referencedby>
        <referencedby refid="class_c_stormnode_payments_1a8dc55316a297daad51a03d4cf7b37d06" compoundref="stormnode-payments_8cpp" startline="354" endline="430">CStormnodePayments::ProcessMessageStormnodePayments</referencedby>
        <referencedby refid="class_c_stormnode_man_1ae30d0b9b493e23c3d14ec48c77be7b6f" compoundref="stormnodeman_8cpp" startline="674" endline="803">CStormnodeMan::ProcessMessage</referencedby>
        <referencedby refid="class_c_wallet_1a842f8ca0ec3e6879c7f95f1420c7932f" compoundref="wallet_8cpp" startline="1334" endline="1366">CWallet::GetAnonymizableBalance</referencedby>
        <referencedby refid="class_c_wallet_1af5b8987016e90d66fe1d3a475dfe03b4" compoundref="wallet_8cpp" startline="1368" endline="1402">CWallet::GetAnonymizedBalance</referencedby>
        <referencedby refid="class_c_wallet_1ab2440e827d25edcd5a98d6113601088c" compoundref="wallet_8cpp" startline="1508" endline="1546">CWallet::GetAverageAnonymizedRounds</referencedby>
        <referencedby refid="class_c_wallet_1aef7643cab406b179cdddb615cd5f26cf" compoundref="wallet_8cpp" startline="1548" endline="1582">CWallet::GetNormalizedAnonymizedBalance</referencedby>
        <referencedby refid="class_c_wallet_1aef59875cbecc432c85215334245f490b" compoundref="wallet_8cpp" startline="1584" endline="1620">CWallet::GetDenominatedBalance</referencedby>
      </memberdef>
      <memberdef kind="variable" id="util_8cpp_1acb212e467afc6516452e15829eeb58d5" prot="public" static="no" mutable="no">
        <type>bool</type>
        <definition>bool fEnableInstantX</definition>
        <argsstring></argsstring>
        <name>fEnableInstantX</name>
        <initializer>= true</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/util.cpp" line="80" column="1" bodyfile="/home/dev/ds-160209/src/util.cpp" bodystart="80" bodyend="-1"/>
        <referencedby refid="init_8h_1a1a4c1bfbf6ba1db77e988b89b9cadfd3" compoundref="init_8cpp" startline="375" endline="1285">AppInit2</referencedby>
        <referencedby refid="class_c_merkle_tx_1a6782c78aec9fd63e637dbf0668c8506e" compoundref="main_8cpp" startline="1403" endline="1415">CMerkleTx::GetTransactionLockSignatures</referencedby>
        <referencedby refid="class_c_merkle_tx_1a31b0765b267cab5f76b308d1fe5d9375" compoundref="main_8cpp" startline="1417" endline="1428">CMerkleTx::IsTransactionLockTimedOut</referencedby>
      </memberdef>
      <memberdef kind="variable" id="util_8cpp_1aaebdfd83d8252d435dfa61f10e7b86e6" prot="public" static="no" mutable="no">
        <type>int</type>
        <definition>int nInstantXDepth</definition>
        <argsstring></argsstring>
        <name>nInstantXDepth</name>
        <initializer>= 10</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/util.cpp" line="81" column="1" bodyfile="/home/dev/ds-160209/src/util.cpp" bodystart="81" bodyend="-1"/>
        <referencedby refid="init_8h_1a60c54061faf43bd9cca8ab8bfa38055a" compoundref="init_8cpp" startline="243" endline="353">HelpMessage</referencedby>
        <referencedby refid="init_8h_1a1a4c1bfbf6ba1db77e988b89b9cadfd3" compoundref="init_8cpp" startline="375" endline="1285">AppInit2</referencedby>
        <referencedby refid="class_c_merkle_tx_1a4208943ef656d3787c02ef9973d63f4a" compoundref="main_8cpp" startline="1430" endline="1447">CMerkleTx::GetDepthInMainChain</referencedby>
        <referencedby refid="main_8h_1a5c7b9ac7929375148311307df7e446d0" compoundref="main_8cpp" startline="1506" endline="1523">GetInputAgeIX</referencedby>
        <referencedby refid="main_8h_1afb9aef5806c13c7a81fda9854f852155" compoundref="main_8cpp" startline="1525" endline="1538">GetIXConfirmations</referencedby>
      </memberdef>
      <memberdef kind="variable" id="util_8cpp_1a86ef86d561556a8f20848404f267e286" prot="public" static="no" mutable="no">
        <type>int</type>
        <definition>int nSandstormRounds</definition>
        <argsstring></argsstring>
        <name>nSandstormRounds</name>
        <initializer>= 2</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/util.cpp" line="82" column="1" bodyfile="/home/dev/ds-160209/src/util.cpp" bodystart="82" bodyend="-1"/>
        <referencedby refid="init_8h_1a60c54061faf43bd9cca8ab8bfa38055a" compoundref="init_8cpp" startline="243" endline="353">HelpMessage</referencedby>
        <referencedby refid="init_8h_1a1a4c1bfbf6ba1db77e988b89b9cadfd3" compoundref="init_8cpp" startline="375" endline="1285">AppInit2</referencedby>
        <referencedby refid="class_options_model_1a0e02c341067bff7be262fede017fbea0" compoundref="optionsmodel_8cpp" startline="108" endline="199">OptionsModel::Init</referencedby>
        <referencedby refid="class_options_model_1a56d6c626e3315792c31f44754b2c8d73" compoundref="optionsmodel_8cpp" startline="206" endline="313">OptionsModel::data</referencedby>
        <referencedby refid="class_options_model_1a3102b457f4d46efac8ecb03b3d536b62" compoundref="optionsmodel_8cpp" startline="315" endline="526">OptionsModel::setData</referencedby>
        <referencedby refid="class_overview_page_1a788444cc3b3d9554505f2103a4e556b9" compoundref="overviewpage_8cpp" startline="299" endline="394">OverviewPage::updateSandstormProgress</referencedby>
        <referencedby refid="class_wallet_model_1a51469b2d95cfd4bc0a14ee456fca7b95" compoundref="walletmodel_8cpp" startline="113" endline="137">WalletModel::pollBalanceChanged</referencedby>
        <referencedby refid="class_c_sandstorm_pool_1a459d1986058ad736773fa9857390ba96" compoundref="sandstorm_8cpp" startline="1353" endline="1625">CSandstormPool::DoAutomaticDenominating</referencedby>
        <referencedby refid="class_c_sandstorm_pool_1a0348c28d46ac4180e2984336df1b4d50" compoundref="sandstorm_8cpp" startline="1628" endline="1648">CSandstormPool::PrepareSandstormDenominate</referencedby>
        <referencedby refid="class_c_wallet_1a842f8ca0ec3e6879c7f95f1420c7932f" compoundref="wallet_8cpp" startline="1334" endline="1366">CWallet::GetAnonymizableBalance</referencedby>
        <referencedby refid="class_c_wallet_1af5b8987016e90d66fe1d3a475dfe03b4" compoundref="wallet_8cpp" startline="1368" endline="1402">CWallet::GetAnonymizedBalance</referencedby>
        <referencedby refid="class_c_wallet_1ac0780b1a8f4092d5a01cf1fa615514a4" compoundref="wallet_8cpp" startline="1502" endline="1506">CWallet::GetInputSandstormRounds</referencedby>
        <referencedby refid="class_c_wallet_1aef7643cab406b179cdddb615cd5f26cf" compoundref="wallet_8cpp" startline="1548" endline="1582">CWallet::GetNormalizedAnonymizedBalance</referencedby>
        <referencedby refid="class_c_wallet_1aef59875cbecc432c85215334245f490b" compoundref="wallet_8cpp" startline="1584" endline="1620">CWallet::GetDenominatedBalance</referencedby>
        <referencedby refid="class_c_wallet_tx_1a8bb9ffa6758ee861cd65100242c90882" compoundref="wallet_8h" startline="876" endline="913">CWalletTx::GetAnonymizableCredit</referencedby>
      </memberdef>
      <memberdef kind="variable" id="util_8cpp_1a8726b2c37267fdeae9fee074106be65b" prot="public" static="no" mutable="no">
        <type>int</type>
        <definition>int nAnonymizeDarkSilkAmount</definition>
        <argsstring></argsstring>
        <name>nAnonymizeDarkSilkAmount</name>
        <initializer>= 1000</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/util.cpp" line="83" column="1" bodyfile="/home/dev/ds-160209/src/util.cpp" bodystart="83" bodyend="-1"/>
        <referencedby refid="init_8h_1a60c54061faf43bd9cca8ab8bfa38055a" compoundref="init_8cpp" startline="243" endline="353">HelpMessage</referencedby>
        <referencedby refid="init_8h_1a1a4c1bfbf6ba1db77e988b89b9cadfd3" compoundref="init_8cpp" startline="375" endline="1285">AppInit2</referencedby>
        <referencedby refid="class_options_model_1a0e02c341067bff7be262fede017fbea0" compoundref="optionsmodel_8cpp" startline="108" endline="199">OptionsModel::Init</referencedby>
        <referencedby refid="class_options_model_1a56d6c626e3315792c31f44754b2c8d73" compoundref="optionsmodel_8cpp" startline="206" endline="313">OptionsModel::data</referencedby>
        <referencedby refid="class_options_model_1a3102b457f4d46efac8ecb03b3d536b62" compoundref="optionsmodel_8cpp" startline="315" endline="526">OptionsModel::setData</referencedby>
        <referencedby refid="class_overview_page_1a788444cc3b3d9554505f2103a4e556b9" compoundref="overviewpage_8cpp" startline="299" endline="394">OverviewPage::updateSandstormProgress</referencedby>
        <referencedby refid="class_c_sandstorm_pool_1a459d1986058ad736773fa9857390ba96" compoundref="sandstorm_8cpp" startline="1353" endline="1625">CSandstormPool::DoAutomaticDenominating</referencedby>
      </memberdef>
      <memberdef kind="variable" id="util_8cpp_1a307df0d2e6f7c42eace3d972d4b3f845" prot="public" static="no" mutable="no">
        <type>int</type>
        <definition>int nLiquidityProvider</definition>
        <argsstring></argsstring>
        <name>nLiquidityProvider</name>
        <initializer>= 0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/util.cpp" line="84" column="1" bodyfile="/home/dev/ds-160209/src/util.cpp" bodystart="84" bodyend="-1"/>
        <referencedby refid="init_8h_1a60c54061faf43bd9cca8ab8bfa38055a" compoundref="init_8cpp" startline="243" endline="353">HelpMessage</referencedby>
        <referencedby refid="init_8h_1a1a4c1bfbf6ba1db77e988b89b9cadfd3" compoundref="init_8cpp" startline="375" endline="1285">AppInit2</referencedby>
        <referencedby refid="class_c_sandstorm_pool_1a459d1986058ad736773fa9857390ba96" compoundref="sandstorm_8cpp" startline="1353" endline="1625">CSandstormPool::DoAutomaticDenominating</referencedby>
      </memberdef>
      <memberdef kind="variable" id="util_8cpp_1aef1290adaaac08bd8da8b458c869554f" prot="public" static="no" mutable="no">
        <type><ref refid="stdint_8h_1adec1df1b8b51cb32b77e5b86fff46471" kindref="member">int64_t</ref></type>
        <definition>int64_t enforceStormnodePaymentsTime</definition>
        <argsstring></argsstring>
        <name>enforceStormnodePaymentsTime</name>
        <initializer>= 4085657524</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Spork enforcement enabled time </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/util.cpp" line="86" column="1" bodyfile="/home/dev/ds-160209/src/util.cpp" bodystart="86" bodyend="-1"/>
        <referencedby refid="rpcstormnode_8cpp_1a1b562b4a6a627758a7c1080f23a82aa0" compoundref="rpcstormnode_8cpp" startline="81" endline="471">stormnode</referencedby>
      </memberdef>
      <memberdef kind="variable" id="util_8cpp_1a87d1153c97b6c99fdad9a30af07fed6e" prot="public" static="no" mutable="no">
        <type>int</type>
        <definition>int nStormnodeMinProtocol</definition>
        <argsstring></argsstring>
        <name>nStormnodeMinProtocol</name>
        <initializer>= 0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/util.cpp" line="87" column="1" bodyfile="/home/dev/ds-160209/src/util.cpp" bodystart="87" bodyend="-1"/>
        <referencedby refid="init_8h_1a1a4c1bfbf6ba1db77e988b89b9cadfd3" compoundref="init_8cpp" startline="375" endline="1285">AppInit2</referencedby>
      </memberdef>
      <memberdef kind="variable" id="util_8cpp_1ad5b9f1681377dd7cf6753df60c19f96e" prot="public" static="no" mutable="no">
        <type>bool</type>
        <definition>bool fSucessfullyLoaded</definition>
        <argsstring></argsstring>
        <name>fSucessfullyLoaded</name>
        <initializer>= false</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/util.cpp" line="88" column="1" bodyfile="/home/dev/ds-160209/src/util.cpp" bodystart="88" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="util_8cpp_1a79b2665bd3b764626eddad91b0bfe954" prot="public" static="no" mutable="no">
        <type>bool</type>
        <definition>bool fEnableSandstorm</definition>
        <argsstring></argsstring>
        <name>fEnableSandstorm</name>
        <initializer>= false</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/util.cpp" line="89" column="1" bodyfile="/home/dev/ds-160209/src/util.cpp" bodystart="89" bodyend="-1"/>
        <referencedby refid="init_8h_1a60c54061faf43bd9cca8ab8bfa38055a" compoundref="init_8cpp" startline="243" endline="353">HelpMessage</referencedby>
        <referencedby refid="init_8h_1a1a4c1bfbf6ba1db77e988b89b9cadfd3" compoundref="init_8cpp" startline="375" endline="1285">AppInit2</referencedby>
        <referencedby refid="class_overview_page_1a18c1a29cab6b745b25e701b20f234932" compoundref="overviewpage_8cpp" startline="101" endline="172">OverviewPage::OverviewPage</referencedby>
        <referencedby refid="class_overview_page_1a95da1abd608bd2412b668be43446295a" compoundref="overviewpage_8cpp" startline="396" endline="513">OverviewPage::sandStormStatus</referencedby>
        <referencedby refid="rpcstormnode_8cpp_1ad7a328af61b85ec0efc0226abc483cf9" compoundref="rpcstormnode_8cpp" startline="20" endline="62">sandstorm</referencedby>
        <referencedby refid="class_c_sandstorm_pool_1ac771fe0088165502c2b804b415b32750" compoundref="sandstorm_8cpp" startline="787" endline="864">CSandstormPool::CheckTimeout</referencedby>
        <referencedby refid="class_c_sandstorm_pool_1a83d73d68f8df36be057d8dc6dad3fc28" compoundref="sandstorm_8cpp" startline="869" endline="888">CSandstormPool::CheckForCompleteQueue</referencedby>
        <referencedby refid="class_c_sandstorm_pool_1a359b61acf2b36be02c04b7401a7a67d6" compoundref="sandstorm_8cpp" startline="1090" endline="1176">CSandstormPool::SendSandstormDenominate</referencedby>
        <referencedby refid="class_c_sandstorm_pool_1a459d1986058ad736773fa9857390ba96" compoundref="sandstorm_8cpp" startline="1353" endline="1625">CSandstormPool::DoAutomaticDenominating</referencedby>
      </memberdef>
      <memberdef kind="variable" id="util_8cpp_1a33994dff9c5a89fb40154e891eaae044" prot="public" static="no" mutable="no">
        <type>std::vector&lt; <ref refid="amount_8h_1a4eaf3a5239714d8c45b851527f7cb564" kindref="member">CAmount</ref> &gt;</type>
        <definition>std::vector&lt;CAmount&gt; sandStormDenominations</definition>
        <argsstring></argsstring>
        <name>sandStormDenominations</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>All denominations used by sandstorm </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/util.cpp" line="91" column="1" bodyfile="/home/dev/ds-160209/src/util.cpp" bodystart="91" bodyend="-1"/>
        <referencedby refid="class_c_sandstorm_pool_1a459d1986058ad736773fa9857390ba96" compoundref="sandstorm_8cpp" startline="1353" endline="1625">CSandstormPool::DoAutomaticDenominating</referencedby>
        <referencedby refid="class_c_sandstorm_pool_1ab7fac1067376f91b53aaf6862c15e914" compoundref="sandstorm_8cpp" startline="1707" endline="1798">CSandstormPool::CreateDenominated</referencedby>
        <referencedby refid="class_c_sandstorm_pool_1aebbafc6e18044ba973b127787f9ff90b" compoundref="sandstorm_8cpp" startline="1913" endline="1950">CSandstormPool::GetDenominations</referencedby>
        <referencedby refid="class_c_sandstorm_pool_1af7d1f51900ef204ed612fa27096181af" compoundref="sandstorm_8cpp" startline="1966" endline="1996">CSandstormPool::GetDenominationsByAmount</referencedby>
        <referencedby refid="class_c_sandstorm_pool_1a1b40173d3fdd69fd20da1d01117a0970" compoundref="sandstorm_8h" startline="365" endline="384">CSandstormPool::InitDenominations</referencedby>
        <referencedby refid="class_c_wallet_1accb0e427b9b9d2e1ddc200feb2a35e68" compoundref="wallet_8cpp" startline="891" endline="897">CWallet::IsDenominatedAmount</referencedby>
        <referencedby refid="wallet_8cpp_1a502a73c6cf145be4a420a8bc75c6a69e" compoundref="wallet_8cpp" startline="2143" endline="2156">less_then_denom</referencedby>
        <referencedby refid="class_c_wallet_1a3106747387ad6e066a9c44fd6db22a0d" compoundref="wallet_8cpp" startline="4096" endline="4220">CWallet::PrepareSandstormDenominate</referencedby>
        <referencedby refid="class_c_wallet_tx_1a8bb9ffa6758ee861cd65100242c90882" compoundref="wallet_8h" startline="876" endline="913">CWalletTx::GetAnonymizableCredit</referencedby>
        <referencedby refid="class_c_output_1a7b967787d636440d6b67930a436d5c8f" compoundref="wallet_8h" startline="1091" endline="1099">COutput::Priority</referencedby>
      </memberdef>
      <memberdef kind="variable" id="util_8cpp_1aa6e1d8c03f1d46e89708f9c282181c47" prot="public" static="no" mutable="no">
        <type>bool</type>
        <definition>bool fSandstormMultiSession</definition>
        <argsstring></argsstring>
        <name>fSandstormMultiSession</name>
        <initializer>= false</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/util.cpp" line="92" column="1" bodyfile="/home/dev/ds-160209/src/util.cpp" bodystart="92" bodyend="-1"/>
        <referencedby refid="init_8h_1a60c54061faf43bd9cca8ab8bfa38055a" compoundref="init_8cpp" startline="243" endline="353">HelpMessage</referencedby>
        <referencedby refid="init_8h_1a1a4c1bfbf6ba1db77e988b89b9cadfd3" compoundref="init_8cpp" startline="375" endline="1285">AppInit2</referencedby>
        <referencedby refid="class_c_sandstorm_pool_1a459d1986058ad736773fa9857390ba96" compoundref="sandstorm_8cpp" startline="1353" endline="1625">CSandstormPool::DoAutomaticDenominating</referencedby>
      </memberdef>
      <memberdef kind="variable" id="util_8cpp_1a0502b74b88db99500ee21dcb446311e5" prot="public" static="no" mutable="no">
        <type>map&lt; string, string &gt;</type>
        <definition>map&lt;string, string&gt; mapArgs</definition>
        <argsstring></argsstring>
        <name>mapArgs</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/util.cpp" line="94" column="1" bodyfile="/home/dev/ds-160209/src/util.cpp" bodystart="94" bodyend="-1"/>
        <referencedby refid="darksilkd_8cpp_1ac59316b767e6984e1285f0531275286b" compoundref="darksilkd_8cpp" startline="34" endline="140">AppInit</referencedby>
        <referencedby refid="init_8h_1a1a4c1bfbf6ba1db77e988b89b9cadfd3" compoundref="init_8cpp" startline="375" endline="1285">AppInit2</referencedby>
        <referencedby refid="miner_8h_1a4113fa37961c33784bb63f1d176e4615" compoundref="miner_8cpp" startline="107" endline="381">CreateNewBlock</referencedby>
        <referencedby refid="net_8cpp_1a3b4720330e61127963a43df26b80f804" compoundref="net_8cpp" startline="1339" endline="1441">ThreadOpenConnections</referencedby>
        <referencedby refid="class_c_node_1af8d4b8c0f883afffcb62d906c31b2cdf" compoundref="net_8h" startline="544" endline="578">CNode::EndMessage</referencedby>
        <referencedby refid="darksilk_8cpp_1a0ddf1224851353fc92bfbff6f499fa97" compoundref="darksilk_8cpp" startline="128" endline="350">main</referencedby>
        <referencedby refid="class_options_model_1a0e02c341067bff7be262fede017fbea0" compoundref="optionsmodel_8cpp" startline="108" endline="199">OptionsModel::Init</referencedby>
        <referencedby refid="class_options_model_1a56d6c626e3315792c31f44754b2c8d73" compoundref="optionsmodel_8cpp" startline="206" endline="313">OptionsModel::data</referencedby>
        <referencedby refid="rpcclient_8cpp_1ae0b4394f271db49671cf894dbe94c484" compoundref="rpcclient_8cpp" startline="33" endline="95">CallRPC</referencedby>
        <referencedby refid="rpcserver_8h_1af4d692a884c24c4abe2fc3f2b165542d" compoundref="rpcserver_8cpp" startline="517" endline="634">StartRPCThreads</referencedby>
        <referencedby refid="rpcserver_8cpp_1adda5af922ba2f27c9f6219394d3c4f4c" compoundref="rpcserver_8cpp" startline="743" endline="823">ServiceConnection</referencedby>
        <referencedby refid="util_8h_1a4cfc6f116964c12bc24442828c2da007" compoundref="util_8cpp" startline="491" endline="534">ParseParameters</referencedby>
        <referencedby refid="util_8h_1a24f685720bf40370e5bd2a192ad50cd8" compoundref="util_8cpp" startline="536" endline="541">GetArg</referencedby>
        <referencedby refid="util_8h_1a64d956f1dda7f9a80ab5d594532b906d" compoundref="util_8cpp" startline="550" endline="559">GetBoolArg</referencedby>
        <referencedby refid="util_8h_1a9d94ca9f7c1496626992d1873e3f69df" compoundref="util_8cpp" startline="561" endline="567">SoftSetArg</referencedby>
        <referencedby refid="util_8h_1a0d247b470b387d7cd3f039bd26166007" compoundref="util_8cpp" startline="1109" endline="1140">GetDataDir</referencedby>
      </memberdef>
      <memberdef kind="variable" id="util_8cpp_1a34d23466f937db99d45620bc7ea5d2fb" prot="public" static="no" mutable="no">
        <type>map&lt; string, vector&lt; string &gt; &gt;</type>
        <definition>map&lt;string, vector&lt;string&gt; &gt; mapMultiArgs</definition>
        <argsstring></argsstring>
        <name>mapMultiArgs</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/util.cpp" line="95" column="1" bodyfile="/home/dev/ds-160209/src/util.cpp" bodystart="95" bodyend="-1"/>
        <referencedby refid="darksilkd_8cpp_1ac59316b767e6984e1285f0531275286b" compoundref="darksilkd_8cpp" startline="34" endline="140">AppInit</referencedby>
        <referencedby refid="init_8h_1a1a4c1bfbf6ba1db77e988b89b9cadfd3" compoundref="init_8cpp" startline="375" endline="1285">AppInit2</referencedby>
        <referencedby refid="net_8cpp_1a3b4720330e61127963a43df26b80f804" compoundref="net_8cpp" startline="1339" endline="1441">ThreadOpenConnections</referencedby>
        <referencedby refid="net_8cpp_1a2d1ca95557ae336582b886a251e7fe94" compoundref="net_8cpp" startline="1443" endline="1513">ThreadOpenAddedConnections</referencedby>
        <referencedby refid="darksilk_8cpp_1a0ddf1224851353fc92bfbff6f499fa97" compoundref="darksilk_8cpp" startline="128" endline="350">main</referencedby>
        <referencedby refid="class_options_model_1a0e02c341067bff7be262fede017fbea0" compoundref="optionsmodel_8cpp" startline="108" endline="199">OptionsModel::Init</referencedby>
        <referencedby refid="class_options_model_1a56d6c626e3315792c31f44754b2c8d73" compoundref="optionsmodel_8cpp" startline="206" endline="313">OptionsModel::data</referencedby>
        <referencedby refid="rpcserver_8cpp_1a9ec282be04e51f5fde86d5ba98467019" compoundref="rpcserver_8cpp" startline="375" endline="396">ClientAllowed</referencedby>
        <referencedby refid="util_8h_1a343d2a13efe00125f78d25dafb0a8d98" compoundref="util_8cpp" startline="252" endline="278">LogAcceptCategory</referencedby>
        <referencedby refid="util_8h_1a4cfc6f116964c12bc24442828c2da007" compoundref="util_8cpp" startline="491" endline="534">ParseParameters</referencedby>
      </memberdef>
      <memberdef kind="variable" id="util_8cpp_1a2ba7badc843121dde40a6f109d224a42" prot="public" static="no" mutable="no">
        <type>bool</type>
        <definition>bool fDebug</definition>
        <argsstring></argsstring>
        <name>fDebug</name>
        <initializer>= false</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/util.cpp" line="96" column="1" bodyfile="/home/dev/ds-160209/src/util.cpp" bodystart="96" bodyend="-1"/>
        <referencedby refid="class_c_active_stormnode_1a9532e0804ea4c96ad7d58ab3e9da6891" compoundref="activestormnode_8cpp" startline="17" endline="140">CActiveStormnode::ManageStatus</referencedby>
        <referencedby refid="class_c_block_1a1ae149d97c7b7eadf48f5cea934b6217" compoundref="chain_8cpp" startline="299" endline="490">CBlock::ConnectBlock</referencedby>
        <referencedby refid="class_c_block_1aa735790178f95defd59f984dd51bc0f2" compoundref="chain_8cpp" startline="678" endline="789">CBlock::CheckBlock</referencedby>
        <referencedby refid="init_8h_1a1a4c1bfbf6ba1db77e988b89b9cadfd3" compoundref="init_8cpp" startline="375" endline="1285">AppInit2</referencedby>
        <referencedby refid="kernel_8h_1a92f7a1863b9988c21166341c849e26db" compoundref="kernel_8cpp" startline="227" endline="283">CheckStakeKernelHash</referencedby>
        <referencedby refid="kernel_8h_1a01e09fbdb926d4581ea48c4cf2f337a1" compoundref="kernel_8cpp" startline="286" endline="320">CheckProofOfStake</referencedby>
        <referencedby refid="main_8h_1a711a5bdb30c9c9bbdc83011b1cbbe2f3" compoundref="main_8cpp" startline="3426" endline="3631">SendMessages</referencedby>
        <referencedby refid="miner_8h_1a4113fa37961c33784bb63f1d176e4615" compoundref="miner_8cpp" startline="107" endline="381">CreateNewBlock</referencedby>
        <referencedby refid="class_transaction_desc_1ab7c9dbb2048aae121dd9d75df86e64f4" compoundref="transactiondesc_8cpp" startline="41" endline="272">TransactionDesc::toHTML</referencedby>
        <referencedby refid="class_wallet_model_1a497418d4a8566b881bab45dec7ad8fd8" compoundref="walletmodel_8cpp" startline="213" endline="488">WalletModel::sendCoins</referencedby>
        <referencedby refid="class_c_sand_storm_signer_1a8d2fb7c16fcfb1be633101dd5436d3ae" compoundref="sandstorm_8cpp" startline="2073" endline="2089">CSandStormSigner::VerifyMessage</referencedby>
        <referencedby refid="spork_8h_1a3f9c24c1f4c012152fb4422ca981610a" compoundref="spork_8cpp" startline="30" endline="78">ProcessSpork</referencedby>
        <referencedby refid="class_c_stealth_address_1aa3f4655dced125bf698c208b6e7ac4b8" compoundref="stealth_8cpp" startline="17" endline="64">CStealthAddress::SetEncoded</referencedby>
        <referencedby refid="class_c_stormnode_sync_1adaaeb592c3432c8a459560523c7be207" compoundref="stormnode-sync_8cpp" startline="225" endline="405">CStormnodeSync::Process</referencedby>
        <referencedby refid="timedata_8h_1ad8af089fc8835e11c7d77f6b473fccae" compoundref="timedata_8cpp" startline="40" endline="111">AddTimeData</referencedby>
        <referencedby refid="util_8h_1a343d2a13efe00125f78d25dafb0a8d98" compoundref="util_8cpp" startline="252" endline="278">LogAcceptCategory</referencedby>
        <referencedby refid="class_c_wallet_1a0404b6bc1cb804aadc69b9902b52282a" compoundref="wallet_8cpp" startline="214" endline="248">CWallet::Lock</referencedby>
        <referencedby refid="class_c_wallet_1ab34fe5bf771619dcbe22a65f013e5469" compoundref="wallet_8cpp" startline="479" endline="596">CWallet::EncryptWallet</referencedby>
        <referencedby refid="class_c_wallet_1a119e378349dcbcada447b4343805326d" compoundref="wallet_8cpp" startline="1902" endline="2141">CWallet::SelectCoinsMinConfByCoinAge</referencedby>
        <referencedby refid="class_c_wallet_1a6938211ba1e8ab9de20b8c7071c444a4" compoundref="wallet_8cpp" startline="2158" endline="2287">CWallet::SelectCoinsMinConf</referencedby>
        <referencedby refid="class_c_wallet_1ae3bb56ad5d165525e45e4a0c9ad034f2" compoundref="wallet_8cpp" startline="2987" endline="3040">CWallet::NewStealthAddress</referencedby>
        <referencedby refid="class_c_wallet_1ac45af0632ea59c56295d3158b7387f33" compoundref="wallet_8cpp" startline="3090" endline="3240">CWallet::UnlockStealthAddresses</referencedby>
        <referencedby refid="class_c_wallet_1ae7ab98f84a9f05da46ca943b8f305c85" compoundref="wallet_8cpp" startline="3242" endline="3302">CWallet::UpdateStealthAddress</referencedby>
        <referencedby refid="class_c_wallet_1afce932bf3aa678046ab75eccff004858" compoundref="wallet_8cpp" startline="3385" endline="3468">CWallet::SendStealthMoneyToDestination</referencedby>
        <referencedby refid="class_c_wallet_1a5d0e2025dc7a87a0406be272b80509ee" compoundref="wallet_8cpp" startline="3470" endline="3697">CWallet::FindStealthTransactions</referencedby>
        <referencedby refid="walletdb_8cpp_1ad1f171cf096f5479805a06fc20480343" compoundref="walletdb_8cpp" startline="357" endline="622">ReadKeyValue</referencedby>
      </memberdef>
      <memberdef kind="variable" id="util_8cpp_1aebbe7fc2f3e1ae3d840076985c9214fa" prot="public" static="no" mutable="no">
        <type>bool</type>
        <definition>bool fDebugSmsg</definition>
        <argsstring></argsstring>
        <name>fDebugSmsg</name>
        <initializer>= false</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/util.cpp" line="97" column="1" bodyfile="/home/dev/ds-160209/src/util.cpp" bodystart="97" bodyend="-1"/>
        <referencedby refid="init_8h_1a1a4c1bfbf6ba1db77e988b89b9cadfd3" compoundref="init_8cpp" startline="375" endline="1285">AppInit2</referencedby>
        <referencedby refid="class_sec_msg_bucket_1ae6e05a91141c7cacf593b90e8c082113" compoundref="smessage_8cpp" startline="165" endline="185">SecMsgBucket::hashBucket</referencedby>
        <referencedby refid="smessage_8cpp_1a67cfe472b1e783b85b09ebfeb43afbab" compoundref="smessage_8cpp" startline="579" endline="685">ThreadSecureMsg</referencedby>
        <referencedby refid="smessage_8h_1a925f4769284eaf73a3beda3c2b15e91d" compoundref="smessage_8cpp" startline="768" endline="909">SecureMsgBuildBucketSet</referencedby>
        <referencedby refid="smessage_8h_1ab47945fac81152e28647920d324ec630" compoundref="smessage_8cpp" startline="911" endline="961">SecureMsgAddWalletAddresses</referencedby>
        <referencedby refid="smessage_8h_1aebaa05e870f58d8a3736c922295e286a" compoundref="smessage_8cpp" startline="964" endline="1036">SecureMsgReadIni</referencedby>
        <referencedby refid="smessage_8h_1ad6d4790245bc722b427671aad60f5a07" compoundref="smessage_8cpp" startline="1038" endline="1100">SecureMsgWriteIni</referencedby>
        <referencedby refid="smessage_8h_1a10fcf201b1c7066a376692b50988cdbf" compoundref="smessage_8cpp" startline="1292" endline="1781">SecureMsgReceiveData</referencedby>
        <referencedby refid="smessage_8h_1abb934a23a076a4af443e2fb0610d7833" compoundref="smessage_8cpp" startline="1783" endline="1882">SecureMsgSendData</referencedby>
        <referencedby refid="smessage_8h_1a9bd026d2eb7c6dee89c539e99ecac49f" compoundref="smessage_8cpp" startline="2037" endline="2071">SecureMsgScanBlock</referencedby>
        <referencedby refid="smessage_8h_1a440b38f2f513f80283993a2d81e908b5" compoundref="smessage_8cpp" startline="2073" endline="2121">ScanChainForPublicKeys</referencedby>
        <referencedby refid="smessage_8h_1ae6a19a8d011fefc72c9cab3d0df014bd" compoundref="smessage_8cpp" startline="2153" endline="2298">SecureMsgScanBuckets</referencedby>
        <referencedby refid="smessage_8h_1adf0fa2a06615363dc3ea6360be0939ec" compoundref="smessage_8cpp" startline="2301" endline="2444">SecureMsgWalletUnlocked</referencedby>
        <referencedby refid="smessage_8h_1a31bf2f77c776bbf1fb39bbe79b6e9f5f" compoundref="smessage_8cpp" startline="2482" endline="2599">SecureMsgScanMessage</referencedby>
        <referencedby refid="smessage_8h_1a430258e823bdead36f823a51fd6a4510" compoundref="smessage_8cpp" startline="2601" endline="2617">SecureMsgGetLocalKey</referencedby>
        <referencedby refid="smessage_8h_1a1341706507a851babcff6ce436b8ce2d" compoundref="smessage_8cpp" startline="2649" endline="2674">SecureMsgGetStoredKey</referencedby>
        <referencedby refid="smessage_8h_1a9a34bfa72cc027350d71f9daaefb8fef" compoundref="smessage_8cpp" startline="2731" endline="2794">SecureMsgRetrieve</referencedby>
        <referencedby refid="smessage_8h_1a76ffa50f445c2a6089504aead1239e9f" compoundref="smessage_8cpp" startline="2796" endline="2909">SecureMsgReceive</referencedby>
        <referencedby refid="smessage_8h_1abdde7d50a54a2f54a3aea64c47af535a" compoundref="smessage_8cpp" startline="2911" endline="2975">SecureMsgStoreUnscanned</referencedby>
        <referencedby refid="smessage_8h_1a1d8fd52e96428c7fe6561d3857363fc9" compoundref="smessage_8cpp" startline="2978" endline="3092">SecureMsgStore</referencedby>
        <referencedby refid="smessage_8h_1ae4abbffb060bb486b9e15053f83cbcbf" compoundref="smessage_8cpp" startline="3099" endline="3166">SecureMsgValidate</referencedby>
        <referencedby refid="smessage_8h_1ac434a0295e161eb2ebdad951f4049dc6" compoundref="smessage_8cpp" startline="3168" endline="3274">SecureMsgSetHash</referencedby>
        <referencedby refid="smessage_8h_1a1a9885d0f94a7d5322eafb31bcf2f90a" compoundref="smessage_8cpp" startline="3276" endline="3531">SecureMsgEncrypt</referencedby>
        <referencedby refid="smessage_8h_1acbe2815144396344354ffa3022300278" compoundref="smessage_8cpp" startline="3533" endline="3699">SecureMsgSend</referencedby>
        <referencedby refid="smessage_8h_1a2edb582fcb7f69b543174479231647be" compoundref="smessage_8cpp" startline="3702" endline="3946">SecureMsgDecrypt</referencedby>
      </memberdef>
      <memberdef kind="variable" id="util_8cpp_1a49ade2b91028ff037557259b0729b049" prot="public" static="no" mutable="no">
        <type>bool</type>
        <definition>bool fNoSmsg</definition>
        <argsstring></argsstring>
        <name>fNoSmsg</name>
        <initializer>= false</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/util.cpp" line="98" column="1" bodyfile="/home/dev/ds-160209/src/util.cpp" bodystart="98" bodyend="-1"/>
        <referencedby refid="init_8h_1a1a4c1bfbf6ba1db77e988b89b9cadfd3" compoundref="init_8cpp" startline="375" endline="1285">AppInit2</referencedby>
      </memberdef>
      <memberdef kind="variable" id="util_8cpp_1a9d6b03a0dcc515a84e620794e64b9547" prot="public" static="no" mutable="no">
        <type>bool</type>
        <definition>bool fPrintToConsole</definition>
        <argsstring></argsstring>
        <name>fPrintToConsole</name>
        <initializer>= false</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/util.cpp" line="99" column="1" bodyfile="/home/dev/ds-160209/src/util.cpp" bodystart="99" bodyend="-1"/>
        <referencedby refid="init_8h_1a1a4c1bfbf6ba1db77e988b89b9cadfd3" compoundref="init_8cpp" startline="375" endline="1285">AppInit2</referencedby>
        <referencedby refid="util_8h_1afd4c3002b2797c0560adddb6af3ca1da" compoundref="util_8cpp" startline="280" endline="318">LogPrintStr</referencedby>
      </memberdef>
      <memberdef kind="variable" id="util_8cpp_1ae1c7830d95f75ba35fbc6bfa50509913" prot="public" static="no" mutable="no">
        <type>bool</type>
        <definition>bool fPrintToDebugLog</definition>
        <argsstring></argsstring>
        <name>fPrintToDebugLog</name>
        <initializer>= true</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/util.cpp" line="100" column="1" bodyfile="/home/dev/ds-160209/src/util.cpp" bodystart="100" bodyend="-1"/>
        <referencedby refid="init_8h_1a1a4c1bfbf6ba1db77e988b89b9cadfd3" compoundref="init_8cpp" startline="375" endline="1285">AppInit2</referencedby>
        <referencedby refid="util_8h_1afd4c3002b2797c0560adddb6af3ca1da" compoundref="util_8cpp" startline="280" endline="318">LogPrintStr</referencedby>
      </memberdef>
      <memberdef kind="variable" id="util_8cpp_1a5df2572fe4f34c55eef6c97762097f6f" prot="public" static="no" mutable="no">
        <type>bool</type>
        <definition>bool fDaemon</definition>
        <argsstring></argsstring>
        <name>fDaemon</name>
        <initializer>= false</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/util.cpp" line="101" column="1" bodyfile="/home/dev/ds-160209/src/util.cpp" bodystart="101" bodyend="-1"/>
        <referencedby refid="darksilkd_8cpp_1ac59316b767e6984e1285f0531275286b" compoundref="darksilkd_8cpp" startline="34" endline="140">AppInit</referencedby>
        <referencedby refid="darksilkd_8cpp_1a0ddf1224851353fc92bfbff6f499fa97" compoundref="darksilkd_8cpp" startline="143" endline="156">main</referencedby>
      </memberdef>
      <memberdef kind="variable" id="util_8cpp_1a2839c7c01ad9d90fbd3ce55d32b50c6f" prot="public" static="no" mutable="no">
        <type>bool</type>
        <definition>bool fServer</definition>
        <argsstring></argsstring>
        <name>fServer</name>
        <initializer>= false</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/util.cpp" line="102" column="1" bodyfile="/home/dev/ds-160209/src/util.cpp" bodystart="102" bodyend="-1"/>
        <referencedby refid="init_8h_1a1a4c1bfbf6ba1db77e988b89b9cadfd3" compoundref="init_8cpp" startline="375" endline="1285">AppInit2</referencedby>
        <referencedby refid="rpcwallet_8cpp_1a733f7c70e7c18783935e6de9643c0086" compoundref="rpcwallet_8cpp" startline="1969" endline="2032">walletpassphrase</referencedby>
      </memberdef>
      <memberdef kind="variable" id="util_8cpp_1a71f0a1c395c717d77bdf878cb6ced96e" prot="public" static="no" mutable="no">
        <type>bool</type>
        <definition>bool fCommandLine</definition>
        <argsstring></argsstring>
        <name>fCommandLine</name>
        <initializer>= false</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/util.cpp" line="103" column="1" bodyfile="/home/dev/ds-160209/src/util.cpp" bodystart="103" bodyend="-1"/>
        <referencedby refid="darksilkd_8cpp_1ac59316b767e6984e1285f0531275286b" compoundref="darksilkd_8cpp" startline="34" endline="140">AppInit</referencedby>
      </memberdef>
      <memberdef kind="variable" id="util_8cpp_1a396fd0b4e52260e1ddf379fa6e09d887" prot="public" static="no" mutable="no">
        <type>string</type>
        <definition>string strMiscWarning</definition>
        <argsstring></argsstring>
        <name>strMiscWarning</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/util.cpp" line="104" column="1" bodyfile="/home/dev/ds-160209/src/util.cpp" bodystart="104" bodyend="-1"/>
        <referencedby refid="main_8h_1af573b79d097a9ffe6503869f838ccf42" compoundref="main_8cpp" startline="478" endline="486">AbortNode</referencedby>
        <referencedby refid="main_8h_1a6df609da0bad1550cbb2cdc781ad2904" compoundref="main_8cpp" startline="2024" endline="2039">CheckDiskSpace</referencedby>
        <referencedby refid="main_8cpp_1a70b1d1b79f1c760e65c960713b87b732" compoundref="main_8cpp" startline="2327" endline="2368">GetWarnings</referencedby>
        <referencedby refid="class_c_block_1a6e308b2d75d1cfc4a75eda36feb60ca1" compoundref="main_8cpp" startline="4125" endline="4242">CBlock::SetBestChain</referencedby>
        <referencedby refid="timedata_8h_1ad8af089fc8835e11c7d77f6b473fccae" compoundref="timedata_8cpp" startline="40" endline="111">AddTimeData</referencedby>
        <referencedby refid="util_8h_1a379b2307f40ae5dba4dd56a0156fa36e" compoundref="util_8cpp" startline="1060" endline="1067">PrintException</referencedby>
        <referencedby refid="util_8h_1a477231880f761159de1567ad6fb98fac" compoundref="util_8cpp" startline="1069" endline="1075">PrintExceptionContinue</referencedby>
      </memberdef>
      <memberdef kind="variable" id="util_8cpp_1a53f30a9fc322fa65a5c4e3732e4ad410" prot="public" static="no" mutable="no">
        <type>bool</type>
        <definition>bool fNoListen</definition>
        <argsstring></argsstring>
        <name>fNoListen</name>
        <initializer>= false</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/util.cpp" line="105" column="1" bodyfile="/home/dev/ds-160209/src/util.cpp" bodystart="105" bodyend="-1"/>
        <referencedby refid="init_8h_1a1a4c1bfbf6ba1db77e988b89b9cadfd3" compoundref="init_8cpp" startline="375" endline="1285">AppInit2</referencedby>
        <referencedby refid="main_8h_1a711a5bdb30c9c9bbdc83011b1cbbe2f3" compoundref="main_8cpp" startline="3426" endline="3631">SendMessages</referencedby>
        <referencedby refid="net_8h_1ac18517ca5500f0d8e1550ffd4ac56b77" compoundref="net_8cpp" startline="105" endline="127">GetLocal</referencedby>
      </memberdef>
      <memberdef kind="variable" id="util_8cpp_1aa5e7caf6936a9a94eb088f04bcc62b97" prot="public" static="no" mutable="no">
        <type>bool</type>
        <definition>bool fLogTimestamps</definition>
        <argsstring></argsstring>
        <name>fLogTimestamps</name>
        <initializer>= false</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/util.cpp" line="106" column="1" bodyfile="/home/dev/ds-160209/src/util.cpp" bodystart="106" bodyend="-1"/>
        <referencedby refid="init_8h_1a1a4c1bfbf6ba1db77e988b89b9cadfd3" compoundref="init_8cpp" startline="375" endline="1285">AppInit2</referencedby>
        <referencedby refid="util_8h_1afd4c3002b2797c0560adddb6af3ca1da" compoundref="util_8cpp" startline="280" endline="318">LogPrintStr</referencedby>
      </memberdef>
      <memberdef kind="variable" id="util_8cpp_1aad5e5c200c78bd5bdec18c8707e63822" prot="public" static="no" mutable="no">
        <type>bool</type>
        <definition>volatile bool fReopenDebugLog</definition>
        <argsstring></argsstring>
        <name>fReopenDebugLog</name>
        <initializer>= false</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/util.cpp" line="107" column="1" bodyfile="/home/dev/ds-160209/src/util.cpp" bodystart="107" bodyend="-1"/>
        <referencedby refid="init_8cpp_1a70b23efd8d46bc8c627e5c241f0d7716" compoundref="init_8cpp" startline="204" endline="207">HandleSIGHUP</referencedby>
        <referencedby refid="util_8h_1afd4c3002b2797c0560adddb6af3ca1da" compoundref="util_8cpp" startline="280" endline="318">LogPrintStr</referencedby>
      </memberdef>
      <memberdef kind="variable" id="util_8cpp_1aade01c058f2409dc8dc1f20c87370a43" prot="public" static="no" mutable="no">
        <type>string</type>
        <definition>string strBudgetMode</definition>
        <argsstring></argsstring>
        <name>strBudgetMode</name>
        <initializer>= &quot;&quot;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/util.cpp" line="108" column="1" bodyfile="/home/dev/ds-160209/src/util.cpp" bodystart="108" bodyend="-1"/>
        <referencedby refid="init_8h_1a1a4c1bfbf6ba1db77e988b89b9cadfd3" compoundref="init_8cpp" startline="375" endline="1285">AppInit2</referencedby>
        <referencedby refid="class_c_budget_manager_1a9c62c8f18b6f101465415952349ce203" compoundref="stormnode-budget_8cpp" startline="799" endline="902">CBudgetManager::NewBlock</referencedby>
        <referencedby refid="class_c_finalized_budget_1a88614fdccb5cdf722403c11832df2ad0" compoundref="stormnode-budget_8cpp" startline="1699" endline="1775">CFinalizedBudget::AutoCheck</referencedby>
      </memberdef>
      <memberdef kind="variable" id="util_8cpp_1a0d0cb3bccb6c68d7d4b83674906c83d8" prot="public" static="yes" mutable="no">
        <type><ref refid="sync_8h_1a37a4692b2d517f2843655ca11af7668a" kindref="member">CCriticalSection</ref> **</type>
        <definition>CCriticalSection** ppmutexOpenSSL</definition>
        <argsstring></argsstring>
        <name>ppmutexOpenSSL</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/util.cpp" line="111" column="1" bodyfile="/home/dev/ds-160209/src/util.cpp" bodystart="111" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="util_8cpp_1a510877804e96f753028e87b2359258c2" prot="public" static="no" mutable="no">
        <type>class <ref refid="class_c_init" kindref="compound">CInit</ref></type>
        <definition>class CInit
 instance_of_cinit</definition>
        <argsstring></argsstring>
        <name>instance_of_cinit</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/util.cpp" line="152" column="1"/>
      </memberdef>
      <memberdef kind="variable" id="util_8cpp_1a143727d7d2a7d06670ffe5ce5d0391e6" prot="public" static="yes" mutable="no">
        <type>boost::once_flag</type>
        <definition>boost::once_flag debugPrintInitFlag</definition>
        <argsstring></argsstring>
        <name>debugPrintInitFlag</name>
        <initializer>= BOOST_ONCE_INIT</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/util.cpp" line="234" column="1" bodyfile="/home/dev/ds-160209/src/util.cpp" bodystart="234" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="util_8cpp_1a5256be9be45ec4d0909f14a61d455e23" prot="public" static="yes" mutable="no">
        <type>FILE *</type>
        <definition>FILE* fileout</definition>
        <argsstring></argsstring>
        <name>fileout</name>
        <initializer>= NULL</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/util.cpp" line="237" column="1" bodyfile="/home/dev/ds-160209/src/util.cpp" bodystart="237" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="util_8cpp_1afaf72c176b6f60b450ed32d15dc1faad" prot="public" static="yes" mutable="no">
        <type>boost::mutex *</type>
        <definition>boost::mutex* mutexDebugLog</definition>
        <argsstring></argsstring>
        <name>mutexDebugLog</name>
        <initializer>= NULL</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/util.cpp" line="238" column="1" bodyfile="/home/dev/ds-160209/src/util.cpp" bodystart="238" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="util_8cpp_1a48299e74a5c04c846cbdfc372ee464ec" prot="public" static="no" mutable="no">
        <type>const signed char</type>
        <definition>const signed char p_util_hexdigit[256]</definition>
        <argsstring>[256]</argsstring>
        <name>p_util_hexdigit</name>
        <initializer>=
{ -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
  -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
  -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
  0,1,2,3,4,5,6,7,8,9,-1,-1,-1,-1,-1,-1,
  -1,0xa,0xb,0xc,0xd,0xe,0xf,-1,-1,-1,-1,-1,-1,-1,-1,-1,
  -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
  -1,0xa,0xb,0xc,0xd,0xe,0xf,-1,-1,-1,-1,-1,-1,-1,-1,-1,
  -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
  -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
  -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
  -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
  -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
  -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
  -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
  -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
  -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1, }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/util.cpp" line="422" column="1" bodyfile="/home/dev/ds-160209/src/util.cpp" bodystart="422" bodyend="-1"/>
        <referencedby refid="uint256_8h_1aa59e8a8c5a39cb5041f93bb95dd02119" compoundref="uint256_8h" startline="19" endline="22">HexDigit</referencedby>
      </memberdef>
      <memberdef kind="variable" id="util_8cpp_1a59277868c9e47749671c0070e8d8de3a" prot="public" static="yes" mutable="no">
        <type>boost::filesystem::path</type>
        <definition>boost::filesystem::path pathCached[CChainParams::MAX_NETWORK_TYPES+1]</definition>
        <argsstring>[CChainParams::MAX_NETWORK_TYPES+1]</argsstring>
        <name>pathCached</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/util.cpp" line="1106" column="1" bodyfile="/home/dev/ds-160209/src/util.cpp" bodystart="1106" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="util_8cpp_1aae329e964fe24514c272172ed85721fa" prot="public" static="yes" mutable="no">
        <type><ref refid="sync_8h_1a37a4692b2d517f2843655ca11af7668a" kindref="member">CCriticalSection</ref></type>
        <definition>CCriticalSection csPathCached</definition>
        <argsstring></argsstring>
        <name>csPathCached</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/util.cpp" line="1107" column="1" bodyfile="/home/dev/ds-160209/src/util.cpp" bodystart="1107" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="util_8cpp_1a78ba86ae81cf9a157b9b40dc4490662d" prot="public" static="yes" mutable="no">
        <type><ref refid="stdint_8h_1adec1df1b8b51cb32b77e5b86fff46471" kindref="member">int64_t</ref></type>
        <definition>int64_t nMockTime</definition>
        <argsstring></argsstring>
        <name>nMockTime</name>
        <initializer>= 0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/util.cpp" line="1350" column="1" bodyfile="/home/dev/ds-160209/src/util.cpp" bodystart="1350" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="util_8cpp_1ad679dcd7cb4960c49a8d400bcc23b0d0" prot="public" static="no" mutable="no">
        <type><ref refid="stdint_8h_1a435d1572bf3f880d55459d9805097f62" kindref="member">uint32_t</ref></type>
        <definition>uint32_t insecure_rand_Rz</definition>
        <argsstring></argsstring>
        <name>insecure_rand_Rz</name>
        <initializer>= 11</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>MWC RNG of George Marsaglia This is intended to be fast. It has a period of 2^59.3, though the least significant 16 bits only have a period of about 2^30.1.</para><para><simplesect kind="return"><para>random value </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/util.cpp" line="1364" column="1" bodyfile="/home/dev/ds-160209/src/util.cpp" bodystart="1364" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="util_8cpp_1a45e4e024616db2e96c5ffc34928c553b" prot="public" static="no" mutable="no">
        <type><ref refid="stdint_8h_1a435d1572bf3f880d55459d9805097f62" kindref="member">uint32_t</ref></type>
        <definition>uint32_t insecure_rand_Rw</definition>
        <argsstring></argsstring>
        <name>insecure_rand_Rw</name>
        <initializer>= 11</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/util.cpp" line="1365" column="1" bodyfile="/home/dev/ds-160209/src/util.cpp" bodystart="1365" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="util_8cpp_1a2dcf58b384f55190242d4b0e3b1c0b39" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void locking_callback</definition>
        <argsstring>(int mode, int i, const char *file, int line)</argsstring>
        <name>locking_callback</name>
        <param>
          <type>int</type>
          <declname>mode</declname>
        </param>
        <param>
          <type>int</type>
          <declname>i</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>file</declname>
        </param>
        <param>
          <type>int</type>
          <declname>line</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/util.cpp" line="112" column="1" bodyfile="/home/dev/ds-160209/src/util.cpp" bodystart="112" bodyend="119"/>
        <references refid="sync_8h_1a1262d24e5b9a4fa0a1adc4de02958efb" compoundref="sync_8h" startline="163">ENTER_CRITICAL_SECTION</references>
        <references refid="sync_8h_1a2b89bac48633dc1532691f1106a55f6c" compoundref="sync_8h" startline="169">LEAVE_CRITICAL_SECTION</references>
        <referencedby refid="class_c_init_1a4be18861132e828f5f0101880d04b706" compoundref="util_8cpp" startline="127" endline="142">CInit::CInit</referencedby>
      </memberdef>
      <memberdef kind="function" id="util_8cpp_1acf52c2aa8213c7b15e26594a2264ed8a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool GetRandBytes</definition>
        <argsstring>(unsigned char *buf, int num)</argsstring>
        <name>GetRandBytes</name>
        <param>
          <type>unsigned char *</type>
          <declname>buf</declname>
        </param>
        <param>
          <type>int</type>
          <declname>num</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/util.cpp" line="154" column="1" bodyfile="/home/dev/ds-160209/src/util.cpp" bodystart="154" bodyend="161"/>
        <referencedby refid="class_c_addr_man_1ad9179d1c36c2ea3492e221576f340d33" compoundref="addrman_8h" startline="384" endline="392">CAddrMan::CAddrMan</referencedby>
        <referencedby refid="class_c_key_1a9d12ed9d297e4286250fd7ea6b59e1a5" compoundref="key_8cpp" startline="139" endline="146">CKey::MakeNewKey</referencedby>
        <referencedby refid="class_c_key_1a3890764f7a2e5d9cdeffb3e102e4545d" compoundref="key_8cpp" startline="197" endline="209">CKey::VerifyPubKey</referencedby>
        <referencedby refid="key_8h_1a5ee69136607b1012d64a045ee44ccae2" compoundref="key_8cpp" startline="321" endline="338">ECC_Start</referencedby>
        <referencedby refid="main_8h_1a711a5bdb30c9c9bbdc83011b1cbbe2f3" compoundref="main_8cpp" startline="3426" endline="3631">SendMessages</referencedby>
        <referencedby refid="class_c_node_1a4dbfe4f6c1fd162aaa905e4bd201d536" compoundref="net_8cpp" startline="465" endline="475">CNode::PushVersion</referencedby>
        <referencedby refid="class_c_addr_d_b_1aaec90dba59cd69a2f25bc5630a1dde39" compoundref="net_8cpp" startline="2022" endline="2058">CAddrDB::Write</referencedby>
        <referencedby refid="rpcserver_8h_1af4d692a884c24c4abe2fc3f2b165542d" compoundref="rpcserver_8cpp" startline="517" endline="634">StartRPCThreads</referencedby>
        <referencedby refid="util_8h_1a27d9149d522b1fa87d84e5e9ca902aef" compoundref="util_8cpp" startline="198" endline="211">GetRand</referencedby>
        <referencedby refid="util_8h_1af3aedae75efabb170337a497457f7ecf" compoundref="util_8cpp" startline="218" endline="223">GetRandHash</referencedby>
        <referencedby refid="util_8h_1abef4e13668f53ac5404c796462aed9b4" compoundref="util_8cpp" startline="1366" endline="1383">seed_insecure_rand</referencedby>
        <referencedby refid="class_c_wallet_1ab34fe5bf771619dcbe22a65f013e5469" compoundref="wallet_8cpp" startline="479" endline="596">CWallet::EncryptWallet</referencedby>
      </memberdef>
      <memberdef kind="function" id="util_8cpp_1ab699fbdf803610a4e2060fd87787f7e0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void RandAddSeed</definition>
        <argsstring>()</argsstring>
        <name>RandAddSeed</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/util.cpp" line="163" column="1" bodyfile="/home/dev/ds-160209/src/util.cpp" bodystart="163" bodyend="169"/>
        <references refid="util_8h_1acd4d9988b9bb3f31fddf72a34b2bc37f" compoundref="util_8h" startline="370" endline="381">GetPerformanceCounter</references>
        <referencedby refid="class_c_init_1a4be18861132e828f5f0101880d04b706" compoundref="util_8cpp" startline="127" endline="142">CInit::CInit</referencedby>
        <referencedby refid="util_8h_1a786af12a87491f8dc24351d93b9833b6" compoundref="util_8cpp" startline="171" endline="196">RandAddSeedPerfmon</referencedby>
      </memberdef>
      <memberdef kind="function" id="util_8cpp_1a786af12a87491f8dc24351d93b9833b6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void RandAddSeedPerfmon</definition>
        <argsstring>()</argsstring>
        <name>RandAddSeedPerfmon</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/util.cpp" line="171" column="1" bodyfile="/home/dev/ds-160209/src/util.cpp" bodystart="171" bodyend="196"/>
        <references refid="util_8cpp_1ab699fbdf803610a4e2060fd87787f7e0" compoundref="util_8cpp" startline="163" endline="169">RandAddSeed</references>
        <references refid="util_8cpp_1a46fac5fba8ba905b5f9acb364f5d8c6f" compoundref="util_8cpp" startline="1352" endline="1357">GetTime</references>
        <referencedby refid="init_8h_1a1a4c1bfbf6ba1db77e988b89b9cadfd3" compoundref="init_8cpp" startline="375" endline="1285">AppInit2</referencedby>
        <referencedby refid="class_c_key_1a9d12ed9d297e4286250fd7ea6b59e1a5" compoundref="key_8cpp" startline="139" endline="146">CKey::MakeNewKey</referencedby>
        <referencedby refid="smessage_8h_1a1a9885d0f94a7d5322eafb31bcf2f90a" compoundref="smessage_8cpp" startline="3276" endline="3531">SecureMsgEncrypt</referencedby>
        <referencedby refid="stealth_8h_1ab09bf0ded4faa17a866c79087b0b20a8" compoundref="stealth_8cpp" startline="132" endline="160">GenerateRandomSecret</referencedby>
        <referencedby refid="class_c_wallet_1ab34fe5bf771619dcbe22a65f013e5469" compoundref="wallet_8cpp" startline="479" endline="596">CWallet::EncryptWallet</referencedby>
      </memberdef>
      <memberdef kind="function" id="util_8cpp_1a27d9149d522b1fa87d84e5e9ca902aef" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="stdint_8h_1aaa5d1cd013383c889537491c3cfd9aad" kindref="member">uint64_t</ref></type>
        <definition>uint64_t GetRand</definition>
        <argsstring>(uint64_t nMax)</argsstring>
        <name>GetRand</name>
        <param>
          <type><ref refid="stdint_8h_1aaa5d1cd013383c889537491c3cfd9aad" kindref="member">uint64_t</ref></type>
          <declname>nMax</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/util.cpp" line="198" column="1" bodyfile="/home/dev/ds-160209/src/util.cpp" bodystart="198" bodyend="211"/>
        <references refid="util_8cpp_1acf52c2aa8213c7b15e26594a2264ed8a" compoundref="util_8cpp" startline="154" endline="161">GetRandBytes</references>
        <referencedby refid="net_8cpp_1ab2d8883b5524ec7b80d3b9535e73a3ed" compoundref="net_8cpp" startline="1259" endline="1300">ThreadDNSAddressSeed</referencedby>
        <referencedby refid="net_8cpp_1a379b0d3521bdd62ac296f219d70c4e30" compoundref="net_8cpp" startline="1582" endline="1654">ThreadMessageHandler</referencedby>
        <referencedby refid="class_c_node_1af8d4b8c0f883afffcb62d906c31b2cdf" compoundref="net_8h" startline="544" endline="578">CNode::EndMessage</referencedby>
        <referencedby refid="util_8h_1a0e44e088732172da6662db2d5e37d4b2" compoundref="util_8cpp" startline="213" endline="216">GetRandInt</referencedby>
        <referencedby refid="class_c_wallet_1ace33dcf23623d2036a38696bc3a94553" compoundref="wallet_8cpp" startline="1262" endline="1304">CWallet::ResendWalletTransactions</referencedby>
      </memberdef>
      <memberdef kind="function" id="util_8cpp_1a0e44e088732172da6662db2d5e37d4b2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int GetRandInt</definition>
        <argsstring>(int nMax)</argsstring>
        <name>GetRandInt</name>
        <param>
          <type>int</type>
          <declname>nMax</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/util.cpp" line="213" column="1" bodyfile="/home/dev/ds-160209/src/util.cpp" bodystart="213" bodyend="216"/>
        <references refid="util_8cpp_1a27d9149d522b1fa87d84e5e9ca902aef" compoundref="util_8cpp" startline="198" endline="211">GetRand</references>
        <referencedby refid="class_c_addr_man_1a9c466eca7afe5c12554da5734f89e656" compoundref="addrman_8cpp" startline="126" endline="148">CAddrMan::SelectTried</referencedby>
        <referencedby refid="class_c_addr_man_1aebf83da3addc3bcee487a87ece3f9a2b" compoundref="addrman_8cpp" startline="150" endline="202">CAddrMan::ShrinkNew</referencedby>
        <referencedby refid="class_c_addr_man_1a33ec6a4584cf4b17af821e6e35216459" compoundref="addrman_8cpp" startline="262" endline="309">CAddrMan::Good_</referencedby>
        <referencedby refid="class_c_addr_man_1a9dd6df8b1904548a86054d19d4a90724" compoundref="addrman_8cpp" startline="311" endline="366">CAddrMan::Add_</referencedby>
        <referencedby refid="class_c_addr_man_1acd799cecb73e466d1369e6e2f23d3a8d" compoundref="addrman_8cpp" startline="387" endline="429">CAddrMan::Select_</referencedby>
        <referencedby refid="class_c_addr_man_1aff86d04dc7c0e0afae3ff5998417db17" compoundref="addrman_8cpp" startline="491" endline="511">CAddrMan::GetAddr_</referencedby>
        <referencedby refid="smessage_8h_1abb934a23a076a4af443e2fb0610d7833" compoundref="smessage_8cpp" startline="1783" endline="1882">SecureMsgSendData</referencedby>
        <referencedby refid="class_c_stormnode_man_1a24417dae3da8762e9be495f25b0a6d30" compoundref="stormnodeman_8cpp" startline="504" endline="534">CStormnodeMan::FindRandomNotInVec</referencedby>
        <referencedby refid="mruset__tests_8cpp_1a33fb141235815cfd5df660416b5fb137" compoundref="mruset__tests_8cpp" startline="32" endline="42">BOOST_AUTO_TEST_CASE</referencedby>
        <referencedby refid="class_c_wallet_1a6938211ba1e8ab9de20b8c7071c444a4" compoundref="wallet_8cpp" startline="2158" endline="2287">CWallet::SelectCoinsMinConf</referencedby>
        <referencedby refid="class_c_wallet_1a3106747387ad6e066a9c44fd6db22a0d" compoundref="wallet_8cpp" startline="4096" endline="4220">CWallet::PrepareSandstormDenominate</referencedby>
      </memberdef>
      <memberdef kind="function" id="util_8cpp_1af3aedae75efabb170337a497457f7ecf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classuint256" kindref="compound">uint256</ref></type>
        <definition>uint256 GetRandHash</definition>
        <argsstring>()</argsstring>
        <name>GetRandHash</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/util.cpp" line="218" column="1" bodyfile="/home/dev/ds-160209/src/util.cpp" bodystart="218" bodyend="223"/>
        <references refid="cache_8cc_1a11ecb029164e055f28f4123ce3748862" compoundref="cache_8cc" startline="34">hash</references>
        <references refid="util_8cpp_1acf52c2aa8213c7b15e26594a2264ed8a" compoundref="util_8cpp" startline="154" endline="161">GetRandBytes</references>
        <referencedby refid="main_8cpp_1a03c1ac9fc43feb8f1d67e92f17cceb38" compoundref="main_8cpp" startline="548" endline="562">LimitOrphanTxSize</referencedby>
        <referencedby refid="main_8h_1a711a5bdb30c9c9bbdc83011b1cbbe2f3" compoundref="main_8cpp" startline="3426" endline="3631">SendMessages</referencedby>
        <referencedby refid="class_c_signature_cache_1ac2e63052c7b13f73fa0f6f4624e29c07" compoundref="script_8cpp" startline="2268" endline="2296">CSignatureCache::Set</referencedby>
      </memberdef>
      <memberdef kind="function" id="util_8cpp_1a751ff5f21d880737811136b5e0bcea12" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void DebugPrintInit</definition>
        <argsstring>()</argsstring>
        <name>DebugPrintInit</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/util.cpp" line="240" column="1" bodyfile="/home/dev/ds-160209/src/util.cpp" bodystart="240" bodyend="250"/>
      </memberdef>
      <memberdef kind="function" id="util_8cpp_1a343d2a13efe00125f78d25dafb0a8d98" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool LogAcceptCategory</definition>
        <argsstring>(const char *category)</argsstring>
        <name>LogAcceptCategory</name>
        <param>
          <type>const char *</type>
          <declname>category</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/util.cpp" line="252" column="1" bodyfile="/home/dev/ds-160209/src/util.cpp" bodystart="252" bodyend="278"/>
        <references refid="util_8cpp_1a2ba7badc843121dde40a6f109d224a42" compoundref="util_8cpp" startline="96">fDebug</references>
        <references refid="util_8cpp_1a34d23466f937db99d45620bc7ea5d2fb" compoundref="util_8cpp" startline="95">mapMultiArgs</references>
        <referencedby refid="kernel_8h_1aa58b095aa0abb6f956cc68169124099a" compoundref="kernel_8cpp" startline="111" endline="189">ComputeNextStakeModifier</referencedby>
      </memberdef>
      <memberdef kind="function" id="util_8cpp_1afd4c3002b2797c0560adddb6af3ca1da" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int LogPrintStr</definition>
        <argsstring>(const std::string &amp;str)</argsstring>
        <name>LogPrintStr</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>str</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/util.cpp" line="280" column="1" bodyfile="/home/dev/ds-160209/src/util.cpp" bodystart="280" bodyend="318"/>
        <references refid="util_8cpp_1a9d6b03a0dcc515a84e620794e64b9547" compoundref="util_8cpp" startline="99">fPrintToConsole</references>
        <references refid="util_8cpp_1ae1c7830d95f75ba35fbc6bfa50509913" compoundref="util_8cpp" startline="100">fPrintToDebugLog</references>
        <references refid="util_8cpp_1aad5e5c200c78bd5bdec18c8707e63822" compoundref="util_8cpp" startline="107">fReopenDebugLog</references>
        <references refid="util_8cpp_1ab83866a054745d4b30a3948a1b44beba" compoundref="util_8cpp" startline="1109" endline="1140">GetDataDir</references>
        <references refid="util_8cpp_1aa5e7caf6936a9a94eb088f04bcc62b97" compoundref="util_8cpp" startline="106">fLogTimestamps</references>
        <references refid="util_8cpp_1a749bc6776c8ec72d7c5e4dea56aee415" compoundref="util_8cpp" startline="1465" endline="1473">DateTimeStrFormat</references>
        <references refid="util_8cpp_1a46fac5fba8ba905b5f9acb364f5d8c6f" compoundref="util_8cpp" startline="1352" endline="1357">GetTime</references>
      </memberdef>
      <memberdef kind="function" id="util_8cpp_1a402d4994067a2c1d88d5740afa45cf8f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ParseString</definition>
        <argsstring>(const string &amp;str, char c, vector&lt; string &gt; &amp;v)</argsstring>
        <name>ParseString</name>
        <param>
          <type>const string &amp;</type>
          <declname>str</declname>
        </param>
        <param>
          <type>char</type>
          <declname>c</declname>
        </param>
        <param>
          <type>vector&lt; string &gt; &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/util.cpp" line="320" column="1" bodyfile="/home/dev/ds-160209/src/util.cpp" bodystart="320" bodyend="337"/>
      </memberdef>
      <memberdef kind="function" id="util_8cpp_1a72fc7ee9c182de0580a9909c5895fe24" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>string</type>
        <definition>string FormatMoney</definition>
        <argsstring>(CAmount n, bool fPlus)</argsstring>
        <name>FormatMoney</name>
        <param>
          <type><ref refid="amount_8h_1a4eaf3a5239714d8c45b851527f7cb564" kindref="member">CAmount</ref></type>
          <declname>n</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>fPlus</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/util.cpp" line="339" column="1" bodyfile="/home/dev/ds-160209/src/util.cpp" bodystart="339" bodyend="360"/>
        <references refid="tinyformat_8h_1a56c674871a61baaad36ad52238c08857" compoundref="tinyformat_8h" startline="1011">strprintf</references>
        <referencedby refid="class_c_block_index_1abed1fcbcd372db6b9efa6bb9da317469" compoundref="chain_8h" startline="316" endline="327">CBlockIndex::ToString</referencedby>
        <referencedby refid="main_8h_1a54eeb686375f66683fb139de496c088d" compoundref="main_8cpp" startline="1662" endline="1675">GetProofOfWorkReward</referencedby>
        <referencedby refid="main_8h_1aac88c75e65aa0dee60e4332dbcc16120" compoundref="main_8cpp" startline="2146" endline="2217">PrintBlockTree</referencedby>
        <referencedby refid="miner_8h_1aadd8a05aa6d8fae1c0f4daa5e971a12a" compoundref="miner_8cpp" startline="447" endline="485">CheckWork</referencedby>
        <referencedby refid="miner_8h_1a68be4bcfa03b86095641eac5ca996fed" compoundref="miner_8cpp" startline="487" endline="534">CheckStake</referencedby>
        <referencedby refid="class_c_tx_out_1aee479c0d4a3786c44e2bc4c35d93b105" compoundref="transaction_8h" startline="245" endline="249">CTxOut::ToString</referencedby>
        <referencedby refid="rpcwallet_8cpp_1a33a914aa20f1ded289040800898a0e79" compoundref="rpcwallet_8cpp" startline="421" endline="454">SendMoney</referencedby>
        <referencedby refid="class_c_wallet_1a796c23450c8482e10e0c75ae5c1fa8ed" compoundref="wallet_8cpp" startline="1153" endline="1223">CWallet::ReacceptWalletTransactions</referencedby>
        <referencedby refid="class_c_wallet_1a119e378349dcbcada447b4343805326d" compoundref="wallet_8cpp" startline="1902" endline="2141">CWallet::SelectCoinsMinConfByCoinAge</referencedby>
        <referencedby refid="class_c_wallet_1a6938211ba1e8ab9de20b8c7071c444a4" compoundref="wallet_8cpp" startline="2158" endline="2287">CWallet::SelectCoinsMinConf</referencedby>
        <referencedby refid="class_c_wallet_1a509492fe45395af29a4a16045686c239" compoundref="wallet_8cpp" startline="3347" endline="3383">CWallet::SendStealthMoney</referencedby>
        <referencedby refid="class_c_wallet_1a356d16f6df1f109674adf1d1dc577f2e" compoundref="wallet_8cpp" startline="4019" endline="4059">CWallet::SendMoney</referencedby>
        <referencedby refid="class_c_wallet_1aa1e6f8f54b36ae7ec11f567a59a99aa3" compoundref="wallet_8cpp" startline="4596" endline="4642">CWallet::FixSpentCoins</referencedby>
        <referencedby refid="class_c_output_1a30a78d31f6667803c613efdef28cbe52" compoundref="wallet_8h" startline="1085" endline="1088">COutput::ToString</referencedby>
      </memberdef>
      <memberdef kind="function" id="util_8cpp_1a9ebffff9292ea77a3801d29ae2f23572" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool ParseMoney</definition>
        <argsstring>(const string &amp;str, CAmount &amp;nRet)</argsstring>
        <name>ParseMoney</name>
        <param>
          <type>const string &amp;</type>
          <declname>str</declname>
        </param>
        <param>
          <type><ref refid="amount_8h_1a4eaf3a5239714d8c45b851527f7cb564" kindref="member">CAmount</ref> &amp;</type>
          <declname>nRet</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/util.cpp" line="363" column="1" bodyfile="/home/dev/ds-160209/src/util.cpp" bodystart="363" bodyend="366"/>
        <referencedby refid="init_8h_1a1a4c1bfbf6ba1db77e988b89b9cadfd3" compoundref="init_8cpp" startline="375" endline="1285">AppInit2</referencedby>
        <referencedby refid="miner_8h_1a4113fa37961c33784bb63f1d176e4615" compoundref="miner_8cpp" startline="107" endline="381">CreateNewBlock</referencedby>
      </memberdef>
      <memberdef kind="function" id="util_8cpp_1a72faa2422b590d61f0d365e8f8877e57" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool ParseMoney</definition>
        <argsstring>(const char *pszIn, CAmount &amp;nRet)</argsstring>
        <name>ParseMoney</name>
        <param>
          <type>const char *</type>
          <declname>pszIn</declname>
        </param>
        <param>
          <type><ref refid="amount_8h_1a4eaf3a5239714d8c45b851527f7cb564" kindref="member">CAmount</ref> &amp;</type>
          <declname>nRet</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/util.cpp" line="368" column="1" bodyfile="/home/dev/ds-160209/src/util.cpp" bodystart="368" bodyend="406"/>
        <references refid="util_8h_1a22916d155600c742c4efad727462588e" compoundref="util_8h" startline="297" endline="304">atoi64</references>
      </memberdef>
      <memberdef kind="function" id="util_8cpp_1a65cbdab672b083cd9faa3356a836eb46" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>string</type>
        <definition>static string safeChars</definition>
        <argsstring>(&quot;abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ01234567890 .,;-/:?@&quot;)</argsstring>
        <name>safeChars</name>
        <param>
          <type>&quot;</type>
          <declname>abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ01234567890 .</declname>
        </param>
        <param>
          <type>;-/:?@&quot;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/util.cpp" line="410" column="1"/>
      </memberdef>
      <memberdef kind="function" id="util_8cpp_1ae204f01eeaadc5a85015a51f369a8356" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>string</type>
        <definition>string SanitizeString</definition>
        <argsstring>(const string &amp;str)</argsstring>
        <name>SanitizeString</name>
        <param>
          <type>const string &amp;</type>
          <declname>str</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/util.cpp" line="411" column="1" bodyfile="/home/dev/ds-160209/src/util.cpp" bodystart="411" bodyend="420"/>
        <referencedby refid="class_c_alert_1af3e6b2e5d3584f58c5d7be9dbd72b4cc" compoundref="alert_8cpp" startline="174" endline="263">CAlert::ProcessAlert</referencedby>
        <referencedby refid="rpcstormnode-budget_8cpp_1aae19bf2ba52f3b864bfaf70206bcb29a" compoundref="rpcstormnode-budget_8cpp" startline="22" endline="515">snbudget</referencedby>
        <referencedby refid="rpcstormnode-budget_8cpp_1aaff1bdc7f9f32708efc9094bb6ab0e0d" compoundref="rpcstormnode-budget_8cpp" startline="569" endline="761">snfinalbudget</referencedby>
        <referencedby refid="class_c_budget_proposal_1afaa5e910085e8f0aea26aad6fa99ed2b" compoundref="stormnode-budget_8cpp" startline="1326" endline="1420">CBudgetProposal::IsValid</referencedby>
      </memberdef>
      <memberdef kind="function" id="util_8cpp_1aa4e3553d2b2fe693c106f4296685f75c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool IsHex</definition>
        <argsstring>(const string &amp;str)</argsstring>
        <name>IsHex</name>
        <param>
          <type>const string &amp;</type>
          <declname>str</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/util.cpp" line="440" column="1" bodyfile="/home/dev/ds-160209/src/util.cpp" bodystart="440" bodyend="448"/>
        <references refid="uint256_8h_1aa59e8a8c5a39cb5041f93bb95dd02119" compoundref="uint256_8h" startline="19" endline="22">HexDigit</references>
        <referencedby refid="rpcdump_8cpp_1a457bc572859c8265c72a0afd1a6db56c" compoundref="rpcdump_8cpp" startline="161" endline="230">importaddress</referencedby>
        <referencedby refid="rpcmining_8cpp_1a36ee2284a7252841b8a62a9531b6acbc" compoundref="rpcmining_8cpp" startline="150" endline="234">checkkernel</referencedby>
        <referencedby refid="rpcrawtransaction_8cpp_1a7924d2aa3d68d890b82773445e0d949e" compoundref="rpcrawtransaction_8cpp" startline="236" endline="299">createrawtransaction</referencedby>
        <referencedby refid="rpcrawtransaction_8cpp_1aa0d151e35c0ad5ec82df451a833aeadb" compoundref="rpcrawtransaction_8cpp" startline="349" endline="555">signrawtransaction</referencedby>
        <referencedby refid="rpcserver_8cpp_1ae00da5fd5abdf11d125f98190e599194" compoundref="rpcserver_8cpp" startline="108" endline="118">ParseHashV</referencedby>
        <referencedby refid="rpcserver_8cpp_1a6912ee7b40ffee24ad6d599b3667d4c8" compoundref="rpcserver_8cpp" startline="125" endline="133">ParseHexV</referencedby>
        <referencedby refid="rpcwallet_8cpp_1aca53a9372c92e81fc665cbdeb8fcdbc5" compoundref="rpcwallet_8cpp" startline="89" endline="142">_createmultisig</referencedby>
        <referencedby refid="rpcwallet_8cpp_1a01e8a83cbd4209f10c71719383d7ca2d" compoundref="rpcwallet_8cpp" startline="1091" endline="1180">addmultisigaddress</referencedby>
        <referencedby refid="rpcwallet_8cpp_1a4bde25c1b4a97ec6068d2808594c9820" compoundref="rpcwallet_8cpp" startline="2383" endline="2487">importstealthaddress</referencedby>
      </memberdef>
      <memberdef kind="function" id="util_8cpp_1abea395175fbc4a788ed0f0a41710b8a7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>vector&lt; unsigned char &gt;</type>
        <definition>vector&lt;unsigned char&gt; ParseHex</definition>
        <argsstring>(const char *psz)</argsstring>
        <name>ParseHex</name>
        <param>
          <type>const char *</type>
          <declname>psz</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/util.cpp" line="450" column="1" bodyfile="/home/dev/ds-160209/src/util.cpp" bodystart="450" bodyend="469"/>
        <references refid="uint256_8h_1aa59e8a8c5a39cb5041f93bb95dd02119" compoundref="uint256_8h" startline="19" endline="22">HexDigit</references>
        <referencedby refid="class_c_main_params_1ab7dfebf3c4dd5cc0ebdfabe1111056d6" compoundref="chainparams_8cpp" startline="54" endline="117">CMainParams::CMainParams</referencedby>
        <referencedby refid="class_c_test_net_params_1abbd5f6e3e94bc8abf99a5dfaff75374a" compoundref="chainparams_8cpp" startline="138" endline="178">CTestNetParams::CTestNetParams</referencedby>
        <referencedby refid="class_c_d_b_env_1a08726637bff0809ab9c7c493383a3914" compoundref="db_8cpp" startline="167" endline="219">CDBEnv::Salvage</referencedby>
        <referencedby refid="rpcdump_8cpp_1a457bc572859c8265c72a0afd1a6db56c" compoundref="rpcdump_8cpp" startline="161" endline="230">importaddress</referencedby>
        <referencedby refid="rpcmining_8cpp_1a389f62bd448bb24933a1ea8920411d7e" compoundref="rpcmining_8cpp" startline="56" endline="76">getstakesubsidy</referencedby>
        <referencedby refid="rpcmining_8cpp_1aa40f86dc468a3f2ef4a3bba99e20a069" compoundref="rpcmining_8cpp" startline="236" endline="360">getworkex</referencedby>
        <referencedby refid="rpcmining_8cpp_1a356be62c93d38267a7da9e1cb644d547" compoundref="rpcmining_8cpp" startline="363" endline="473">getwork</referencedby>
        <referencedby refid="rpcmining_8cpp_1a6fc1aa077add8cb1c74207056616134d" compoundref="rpcmining_8cpp" startline="655" endline="679">submitblock</referencedby>
        <referencedby refid="rpcmisc_8cpp_1a32620752527477f4bac811a7db5ab35b" compoundref="rpcmisc_8cpp" startline="167" endline="205">validatepubkey</referencedby>
        <referencedby refid="rpcnet_8cpp_1a89a8e338923aea165bb7d8d572d76203" compoundref="rpcnet_8cpp" startline="244" endline="301">sendalert</referencedby>
        <referencedby refid="rpcrawtransaction_8cpp_1a6775c600b1bfdbb22f38e5f1cd27cfea" compoundref="rpcrawtransaction_8cpp" startline="301" endline="324">decoderawtransaction</referencedby>
        <referencedby refid="rpcrawtransaction_8cpp_1aa0d151e35c0ad5ec82df451a833aeadb" compoundref="rpcrawtransaction_8cpp" startline="349" endline="555">signrawtransaction</referencedby>
        <referencedby refid="rpcrawtransaction_8cpp_1ad5aad44f890060f42efb49acf349511e" compoundref="rpcrawtransaction_8cpp" startline="558" endline="602">sendrawtransaction</referencedby>
        <referencedby refid="rpcserver_8cpp_1a6912ee7b40ffee24ad6d599b3667d4c8" compoundref="rpcserver_8cpp" startline="125" endline="133">ParseHexV</referencedby>
        <referencedby refid="rpcwallet_8cpp_1aca53a9372c92e81fc665cbdeb8fcdbc5" compoundref="rpcwallet_8cpp" startline="89" endline="142">_createmultisig</referencedby>
        <referencedby refid="rpcwallet_8cpp_1a01e8a83cbd4209f10c71719383d7ca2d" compoundref="rpcwallet_8cpp" startline="1091" endline="1180">addmultisigaddress</referencedby>
        <referencedby refid="rpcwallet_8cpp_1a4bde25c1b4a97ec6068d2808594c9820" compoundref="rpcwallet_8cpp" startline="2383" endline="2487">importstealthaddress</referencedby>
        <referencedby refid="class_c_spork_manager_1a697d8c0ce5c422ea125eee96687aa7b3" compoundref="spork_8cpp" startline="175" endline="188">CSporkManager::CheckSignature</referencedby>
        <referencedby refid="base58__tests_8cpp_1ad270e557a9bafea8a9047386547b6615" compoundref="base58__tests_8cpp" startline="15" endline="34">BOOST_AUTO_TEST_CASE</referencedby>
        <referencedby refid="util_8cpp_1a64d56c5bed7672ee006ff2c29f3554ee" compoundref="util_8cpp" startline="471" endline="474">ParseHex</referencedby>
      </memberdef>
      <memberdef kind="function" id="util_8cpp_1a64d56c5bed7672ee006ff2c29f3554ee" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>vector&lt; unsigned char &gt;</type>
        <definition>vector&lt;unsigned char&gt; ParseHex</definition>
        <argsstring>(const string &amp;str)</argsstring>
        <name>ParseHex</name>
        <param>
          <type>const string &amp;</type>
          <declname>str</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/util.cpp" line="471" column="1" bodyfile="/home/dev/ds-160209/src/util.cpp" bodystart="471" bodyend="474"/>
        <references refid="util_8cpp_1abea395175fbc4a788ed0f0a41710b8a7" compoundref="util_8cpp" startline="450" endline="469">ParseHex</references>
      </memberdef>
      <memberdef kind="function" id="util_8cpp_1a180e2c0e2b959b9455066178901440c0" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void InterpretNegativeSetting</definition>
        <argsstring>(string name, map&lt; string, string &gt; &amp;mapSettingsRet)</argsstring>
        <name>InterpretNegativeSetting</name>
        <param>
          <type>string</type>
          <declname>name</declname>
        </param>
        <param>
          <type>map&lt; string, string &gt; &amp;</type>
          <declname>mapSettingsRet</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/util.cpp" line="476" column="1" bodyfile="/home/dev/ds-160209/src/util.cpp" bodystart="476" bodyend="489"/>
      </memberdef>
      <memberdef kind="function" id="util_8cpp_1a4cfc6f116964c12bc24442828c2da007" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ParseParameters</definition>
        <argsstring>(int argc, const char *const argv[])</argsstring>
        <name>ParseParameters</name>
        <param>
          <type>int</type>
          <declname>argc</declname>
        </param>
        <param>
          <type>const char *const</type>
          <declname>argv</declname>
          <array>[]</array>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/util.cpp" line="491" column="1" bodyfile="/home/dev/ds-160209/src/util.cpp" bodystart="491" bodyend="534"/>
        <references refid="util_8cpp_1a0502b74b88db99500ee21dcb446311e5" compoundref="util_8cpp" startline="94">mapArgs</references>
        <references refid="util_8cpp_1a34d23466f937db99d45620bc7ea5d2fb" compoundref="util_8cpp" startline="95">mapMultiArgs</references>
        <references refid="util_8h_1aa3052ab82a2ba880ea3e30b3357c8820" compoundref="util_8h" startline="77">PAIRTYPE</references>
        <referencedby refid="darksilkd_8cpp_1ac59316b767e6984e1285f0531275286b" compoundref="darksilkd_8cpp" startline="34" endline="140">AppInit</referencedby>
        <referencedby refid="darksilk_8cpp_1a0ddf1224851353fc92bfbff6f499fa97" compoundref="darksilk_8cpp" startline="128" endline="350">main</referencedby>
      </memberdef>
      <memberdef kind="function" id="util_8cpp_1a24f685720bf40370e5bd2a192ad50cd8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string GetArg</definition>
        <argsstring>(const std::string &amp;strArg, const std::string &amp;strDefault)</argsstring>
        <name>GetArg</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>strArg</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>strDefault</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Return string argument or default value</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>strArg</parametername>
</parameternamelist>
<parameterdescription>
<para>Argument to get (e.g. &quot;-foo&quot;) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>default</parametername>
</parameternamelist>
<parameterdescription>
<para>(e.g. &quot;1&quot;) </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>command-line argument or default value </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/util.cpp" line="536" column="1" bodyfile="/home/dev/ds-160209/src/util.cpp" bodystart="536" bodyend="541"/>
        <references refid="util_8cpp_1a0502b74b88db99500ee21dcb446311e5" compoundref="util_8cpp" startline="94">mapArgs</references>
        <referencedby refid="class_c_alert_1af3e6b2e5d3584f58c5d7be9dbd72b4cc" compoundref="alert_8cpp" startline="174" endline="263">CAlert::ProcessAlert</referencedby>
        <referencedby refid="class_c_d_b_env_1a1a81be1585305e5cedd2bccd6c7570c3" compoundref="db_8cpp" startline="63" endline="114">CDBEnv::Open</referencedby>
        <referencedby refid="class_c_d_b_1ab4a0447a8d19b4871b9fcc40edee9480" compoundref="db_8cpp" startline="288" endline="299">CDB::Flush</referencedby>
        <referencedby refid="init_8h_1a1a4c1bfbf6ba1db77e988b89b9cadfd3" compoundref="init_8cpp" startline="375" endline="1285">AppInit2</referencedby>
        <referencedby refid="main_8h_1a8189e51a581977f4de34ed4e0159bf63" compoundref="main_8cpp" startline="865" endline="1023">AcceptToMemoryPool</referencedby>
        <referencedby refid="main_8h_1a4d2373d0ce79227c95358116aae667f3" compoundref="main_8cpp" startline="1230" endline="1375">AcceptableInputs</referencedby>
        <referencedby refid="main_8h_1a4b04650c6aa3e5b02921ba992658d647" compoundref="main_8cpp" startline="1741" endline="1764">Misbehaving</referencedby>
        <referencedby refid="class_c_block_1a6e308b2d75d1cfc4a75eda36feb60ca1" compoundref="main_8cpp" startline="4125" endline="4242">CBlock::SetBestChain</referencedby>
        <referencedby refid="miner_8h_1a4113fa37961c33784bb63f1d176e4615" compoundref="miner_8cpp" startline="107" endline="381">CreateNewBlock</referencedby>
        <referencedby refid="net_8h_1af6d341a24d761a509fca026458cf2f72" compoundref="net_8cpp" startline="99" endline="102">GetListenPort</referencedby>
        <referencedby refid="class_c_node_1a1923dffc7124eeedcc4bb58c2cd75754" compoundref="net_8cpp" startline="505" endline="528">CNode::Misbehaving</referencedby>
        <referencedby refid="net_8cpp_1aa1111c12121e039bbd8eedb556e4514a" compoundref="net_8cpp" startline="754" endline="1131">ThreadSocketHandler</referencedby>
        <referencedby refid="net_8h_1a9396d8054e8f74959e9391871aaddde0" compoundref="net_8cpp" startline="1858" endline="1899">StartNode</referencedby>
        <referencedby refid="net_8h_1a7b020b8dc4437a88cf92570b82c55f25" compoundref="net_8h" startline="37" endline="37">ReceiveFloodSize</referencedby>
        <referencedby refid="net_8h_1a13f289d6233bd32b78a38793f76bdccb" compoundref="net_8h" startline="38" endline="38">SendBufferSize</referencedby>
        <referencedby refid="darksilk_8cpp_1a0ddf1224851353fc92bfbff6f499fa97" compoundref="darksilk_8cpp" startline="128" endline="350">main</referencedby>
        <referencedby refid="class_options_model_1a56d6c626e3315792c31f44754b2c8d73" compoundref="optionsmodel_8cpp" startline="206" endline="313">OptionsModel::data</referencedby>
        <referencedby refid="rpcclient_8cpp_1ae0b4394f271db49671cf894dbe94c484" compoundref="rpcclient_8cpp" startline="33" endline="95">CallRPC</referencedby>
        <referencedby refid="rpcserver_8h_1af4d692a884c24c4abe2fc3f2b165542d" compoundref="rpcserver_8cpp" startline="517" endline="634">StartRPCThreads</referencedby>
        <referencedby refid="rpcwallet_8cpp_1afe8615fcf2c8e5319166c2fa8c638e08" compoundref="rpcwallet_8cpp" startline="1930" endline="1959">keypoolrefill</referencedby>
        <referencedby refid="class_c_signature_cache_1ac2e63052c7b13f73fa0f6f4624e29c07" compoundref="script_8cpp" startline="2268" endline="2296">CSignatureCache::Set</referencedby>
        <referencedby refid="getarg__tests_8cpp_1afd6c5281773add42ad794d8a63b528bf" compoundref="getarg__tests_8cpp" startline="77" endline="99">BOOST_AUTO_TEST_CASE</referencedby>
        <referencedby refid="class_c_tx_d_b_1abcb9df0821d996f811f6604b452a26a0" compoundref="txdb-leveldb_8cpp" startline="337" endline="581">CTxDB::LoadBlockIndex</referencedby>
        <referencedby refid="util_8h_1a7d86fadf98dfaba55f80b9be0ab0f978" compoundref="util_8cpp" startline="1148" endline="1153">GetConfigFile</referencedby>
        <referencedby refid="util_8h_1a424ea7e15366f453189c6b977f14b420" compoundref="util_8cpp" startline="1155" endline="1160">GetStormnodeConfigFile</referencedby>
        <referencedby refid="util_8h_1a91d2f3eb3a1bb92ab4eb1bd4b713a99e" compoundref="util_8cpp" startline="1245" endline="1250">GetPidFile</referencedby>
        <referencedby refid="class_c_wallet_1adf34c789fd6eab1eeed22ef16837f558" compoundref="wallet_8cpp" startline="644" endline="761">CWallet::AddToWallet</referencedby>
        <referencedby refid="class_c_wallet_1a7353ba1e79fc4167fbfbe79b41698fa7" compoundref="wallet_8cpp" startline="4307" endline="4329">CWallet::NewKeyPool</referencedby>
        <referencedby refid="class_c_wallet_1aeeeca131336b2ec20cede9a2fccc203a" compoundref="wallet_8cpp" startline="4331" endline="4363">CWallet::TopUpKeyPool</referencedby>
      </memberdef>
      <memberdef kind="function" id="util_8cpp_1a1bade4f0fca4498b4911abdbe4227dc4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="stdint_8h_1adec1df1b8b51cb32b77e5b86fff46471" kindref="member">int64_t</ref></type>
        <definition>int64_t GetArg</definition>
        <argsstring>(const std::string &amp;strArg, int64_t nDefault)</argsstring>
        <name>GetArg</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>strArg</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1adec1df1b8b51cb32b77e5b86fff46471" kindref="member">int64_t</ref></type>
          <declname>nDefault</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Return integer argument or default value</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>strArg</parametername>
</parameternamelist>
<parameterdescription>
<para>Argument to get (e.g. &quot;-foo&quot;) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>default</parametername>
</parameternamelist>
<parameterdescription>
<para>(e.g. 1) </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>command-line argument (0 if invalid number) or default value </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/util.cpp" line="543" column="1" bodyfile="/home/dev/ds-160209/src/util.cpp" bodystart="543" bodyend="548"/>
        <references refid="util_8cpp_1a0502b74b88db99500ee21dcb446311e5" compoundref="util_8cpp" startline="94">mapArgs</references>
        <references refid="util_8h_1a22916d155600c742c4efad727462588e" compoundref="util_8h" startline="297" endline="304">atoi64</references>
      </memberdef>
      <memberdef kind="function" id="util_8cpp_1a64d956f1dda7f9a80ab5d594532b906d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool GetBoolArg</definition>
        <argsstring>(const std::string &amp;strArg, bool fDefault)</argsstring>
        <name>GetBoolArg</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>strArg</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>fDefault</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Return boolean argument or default value</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>strArg</parametername>
</parameternamelist>
<parameterdescription>
<para>Argument to get (e.g. &quot;-foo&quot;) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>default</parametername>
</parameternamelist>
<parameterdescription>
<para>(true or false) </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>command-line argument or default value </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/util.cpp" line="550" column="1" bodyfile="/home/dev/ds-160209/src/util.cpp" bodystart="550" bodyend="559"/>
        <references refid="util_8cpp_1a0502b74b88db99500ee21dcb446311e5" compoundref="util_8cpp" startline="94">mapArgs</references>
        <references refid="util_8h_1aa5ce96ec36f4413f820cec9c1831c070" compoundref="util_8h" startline="315" endline="318">atoi</references>
        <referencedby refid="class_c_active_stormnode_1af66060dcef7137a1db78ad72b396d741" compoundref="activestormnode_8cpp" startline="365" endline="399">CActiveStormnode::SelectCoinsStormnode</referencedby>
        <referencedby refid="chainparams_8h_1a8b1e95814ad8f7fbcd9dead5cae3783d" compoundref="chainparams_8cpp" startline="204" endline="214">SelectParamsFromCommandLine</referencedby>
        <referencedby refid="darksilkd_8cpp_1ac59316b767e6984e1285f0531275286b" compoundref="darksilkd_8cpp" startline="34" endline="140">AppInit</referencedby>
        <referencedby refid="class_c_d_b_env_1a1a81be1585305e5cedd2bccd6c7570c3" compoundref="db_8cpp" startline="63" endline="114">CDBEnv::Open</referencedby>
        <referencedby refid="init_8h_1a1a4c1bfbf6ba1db77e988b89b9cadfd3" compoundref="init_8cpp" startline="375" endline="1285">AppInit2</referencedby>
        <referencedby refid="main_8cpp_1a70b1d1b79f1c760e65c960713b87b732" compoundref="main_8cpp" startline="2327" endline="2368">GetWarnings</referencedby>
        <referencedby refid="miner_8h_1a4113fa37961c33784bb63f1d176e4615" compoundref="miner_8cpp" startline="107" endline="381">CreateNewBlock</referencedby>
        <referencedby refid="net_8cpp_1ab2d8883b5524ec7b80d3b9535e73a3ed" compoundref="net_8cpp" startline="1259" endline="1300">ThreadDNSAddressSeed</referencedby>
        <referencedby refid="net_8h_1a9396d8054e8f74959e9391871aaddde0" compoundref="net_8cpp" startline="1858" endline="1899">StartNode</referencedby>
        <referencedby refid="darksilk_8cpp_1a0ddf1224851353fc92bfbff6f499fa97" compoundref="darksilk_8cpp" startline="128" endline="350">main</referencedby>
        <referencedby refid="class_dark_silk_g_u_i_1a94e64087cc435432dade5c24f3d25650" compoundref="darksilkgui_8cpp" startline="83" endline="277">DarkSilkGUI::DarkSilkGUI</referencedby>
        <referencedby refid="class_options_model_1a56d6c626e3315792c31f44754b2c8d73" compoundref="optionsmodel_8cpp" startline="206" endline="313">OptionsModel::data</referencedby>
        <referencedby refid="class_overview_page_1a18c1a29cab6b745b25e701b20f234932" compoundref="overviewpage_8cpp" startline="101" endline="172">OverviewPage::OverviewPage</referencedby>
        <referencedby refid="rpcclient_8cpp_1ae0b4394f271db49671cf894dbe94c484" compoundref="rpcclient_8cpp" startline="33" endline="95">CallRPC</referencedby>
        <referencedby refid="rpcmining_8cpp_1aedf628177ea04e0077d9d530963d40d6" compoundref="rpcmining_8cpp" startline="114" endline="148">getstakinginfo</referencedby>
        <referencedby refid="rpcserver_8h_1af4d692a884c24c4abe2fc3f2b165542d" compoundref="rpcserver_8cpp" startline="517" endline="634">StartRPCThreads</referencedby>
        <referencedby refid="class_c_r_p_c_table_1aebba8d5a8f62089d1aa63278dbaf30a2" compoundref="rpcserver_8cpp" startline="825" endline="870">CRPCTable::execute</referencedby>
        <referencedby refid="getarg__tests_8cpp_1ac078da6d58911b4bedb51cdecb08cedd" compoundref="getarg__tests_8cpp" startline="25" endline="75">BOOST_AUTO_TEST_CASE</referencedby>
        <referencedby refid="walletdb_8cpp_1a571e13707ba159c7c047875764ae5e2b" compoundref="walletdb_8cpp" startline="732" endline="792">ThreadFlushWalletDB</referencedby>
      </memberdef>
      <memberdef kind="function" id="util_8cpp_1a9d94ca9f7c1496626992d1873e3f69df" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool SoftSetArg</definition>
        <argsstring>(const std::string &amp;strArg, const std::string &amp;strValue)</argsstring>
        <name>SoftSetArg</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>strArg</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>strValue</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Set an argument if it doesn&apos;t already have a value</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>strArg</parametername>
</parameternamelist>
<parameterdescription>
<para>Argument to set (e.g. &quot;-foo&quot;) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>strValue</parametername>
</parameternamelist>
<parameterdescription>
<para>Value (e.g. &quot;1&quot;) </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true if argument gets set, false if it already had a value </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/util.cpp" line="561" column="1" bodyfile="/home/dev/ds-160209/src/util.cpp" bodystart="561" bodyend="567"/>
        <references refid="util_8cpp_1a0502b74b88db99500ee21dcb446311e5" compoundref="util_8cpp" startline="94">mapArgs</references>
        <referencedby refid="init_8h_1a1a4c1bfbf6ba1db77e988b89b9cadfd3" compoundref="init_8cpp" startline="375" endline="1285">AppInit2</referencedby>
        <referencedby refid="class_options_model_1a0e02c341067bff7be262fede017fbea0" compoundref="optionsmodel_8cpp" startline="108" endline="199">OptionsModel::Init</referencedby>
        <referencedby refid="util_8h_1acb3060cad083d342898b6055e43692ae" compoundref="util_8cpp" startline="569" endline="575">SoftSetBoolArg</referencedby>
      </memberdef>
      <memberdef kind="function" id="util_8cpp_1acb3060cad083d342898b6055e43692ae" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool SoftSetBoolArg</definition>
        <argsstring>(const std::string &amp;strArg, bool fValue)</argsstring>
        <name>SoftSetBoolArg</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>strArg</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>fValue</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Set a boolean argument if it doesn&apos;t already have a value</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>strArg</parametername>
</parameternamelist>
<parameterdescription>
<para>Argument to set (e.g. &quot;-foo&quot;) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>fValue</parametername>
</parameternamelist>
<parameterdescription>
<para>Value (e.g. false) </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true if argument gets set, false if it already had a value </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/util.cpp" line="569" column="1" bodyfile="/home/dev/ds-160209/src/util.cpp" bodystart="569" bodyend="575"/>
        <references refid="util_8cpp_1a9d94ca9f7c1496626992d1873e3f69df" compoundref="util_8cpp" startline="561" endline="567">SoftSetArg</references>
        <referencedby refid="darksilkd_8cpp_1ac59316b767e6984e1285f0531275286b" compoundref="darksilkd_8cpp" startline="34" endline="140">AppInit</referencedby>
        <referencedby refid="init_8h_1a1a4c1bfbf6ba1db77e988b89b9cadfd3" compoundref="init_8cpp" startline="375" endline="1285">AppInit2</referencedby>
        <referencedby refid="class_options_model_1a0e02c341067bff7be262fede017fbea0" compoundref="optionsmodel_8cpp" startline="108" endline="199">OptionsModel::Init</referencedby>
        <referencedby refid="class_c_wallet_d_b_1a14f26e53502d1a60dd2b034f830acf03" compoundref="walletdb_8cpp" startline="630" endline="730">CWalletDB::LoadWallet</referencedby>
      </memberdef>
      <memberdef kind="function" id="util_8cpp_1a5e074135870a6fdfae4ac02047bc0432" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>string</type>
        <definition>string EncodeBase64</definition>
        <argsstring>(const unsigned char *pch, size_t len)</argsstring>
        <name>EncodeBase64</name>
        <param>
          <type>const unsigned char *</type>
          <declname>pch</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>len</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/util.cpp" line="578" column="1" bodyfile="/home/dev/ds-160209/src/util.cpp" bodystart="578" bodyend="622"/>
        <referencedby refid="rpcclient_8cpp_1ae0b4394f271db49671cf894dbe94c484" compoundref="rpcclient_8cpp" startline="33" endline="95">CallRPC</referencedby>
        <referencedby refid="rpcwallet_8cpp_1a315b42a2c859c4b50a54c1b05984928c" compoundref="rpcwallet_8cpp" startline="575" endline="624">signmessage</referencedby>
        <referencedby refid="base64__tests_8cpp_1a2359bd06114a1f3a41c3ebc5895e21bb" compoundref="base64__tests_8cpp" startline="9" endline="20">BOOST_AUTO_TEST_CASE</referencedby>
        <referencedby refid="util_8cpp_1a01c144e3a6e8de1ea8481bd7c69fef07" compoundref="util_8cpp" startline="624" endline="627">EncodeBase64</referencedby>
      </memberdef>
      <memberdef kind="function" id="util_8cpp_1a01c144e3a6e8de1ea8481bd7c69fef07" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>string</type>
        <definition>string EncodeBase64</definition>
        <argsstring>(const string &amp;str)</argsstring>
        <name>EncodeBase64</name>
        <param>
          <type>const string &amp;</type>
          <declname>str</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/util.cpp" line="624" column="1" bodyfile="/home/dev/ds-160209/src/util.cpp" bodystart="624" bodyend="627"/>
        <references refid="util_8cpp_1a5e074135870a6fdfae4ac02047bc0432" compoundref="util_8cpp" startline="578" endline="622">EncodeBase64</references>
      </memberdef>
      <memberdef kind="function" id="util_8cpp_1a224a1ec4dc69c9463abf0e8ae767af0d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>vector&lt; unsigned char &gt;</type>
        <definition>vector&lt;unsigned char&gt; DecodeBase64</definition>
        <argsstring>(const char *p, bool *pfInvalid)</argsstring>
        <name>DecodeBase64</name>
        <param>
          <type>const char *</type>
          <declname>p</declname>
        </param>
        <param>
          <type>bool *</type>
          <declname>pfInvalid</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/util.cpp" line="629" column="1" bodyfile="/home/dev/ds-160209/src/util.cpp" bodystart="629" bodyend="710"/>
        <referencedby refid="class_i2_p_session_1a4daa60a1a5767f354ebc5af8cabc4691" compoundref="i2p_8cpp" startline="193" endline="207">I2PSession::GenerateB32AddressFromDestination</referencedby>
        <referencedby refid="rpcmisc_8cpp_1ad8fce781dfd9dfd4866bba2a4589141a" compoundref="rpcmisc_8cpp" startline="207" endline="241">verifymessage</referencedby>
        <referencedby refid="rpcserver_8cpp_1ab8fabed74cd2c68e52b1838425da0f0f" compoundref="rpcserver_8cpp" startline="354" endline="362">HTTPAuthorized</referencedby>
        <referencedby refid="rpcstormnode-budget_8cpp_1a0ed276908ef20f9b0ed87c3ed4c26d25" compoundref="rpcstormnode-budget_8cpp" startline="517" endline="567">snbudgetvoteraw</referencedby>
        <referencedby refid="base64__tests_8cpp_1a2359bd06114a1f3a41c3ebc5895e21bb" compoundref="base64__tests_8cpp" startline="9" endline="20">BOOST_AUTO_TEST_CASE</referencedby>
        <referencedby refid="util_8cpp_1a1fc3cb76c00fb587855511c99a715af5" compoundref="util_8cpp" startline="712" endline="716">DecodeBase64</referencedby>
      </memberdef>
      <memberdef kind="function" id="util_8cpp_1a1fc3cb76c00fb587855511c99a715af5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>string</type>
        <definition>string DecodeBase64</definition>
        <argsstring>(const string &amp;str)</argsstring>
        <name>DecodeBase64</name>
        <param>
          <type>const string &amp;</type>
          <declname>str</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/util.cpp" line="712" column="1" bodyfile="/home/dev/ds-160209/src/util.cpp" bodystart="712" bodyend="716"/>
        <references refid="util_8cpp_1a224a1ec4dc69c9463abf0e8ae767af0d" compoundref="util_8cpp" startline="629" endline="710">DecodeBase64</references>
      </memberdef>
      <memberdef kind="function" id="util_8cpp_1a49f6f1cd42cb886762be52c72466dc7e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="allocators_8h_1a396ed773a5ac24aec28c8f7dc413c7ac" kindref="member">SecureString</ref></type>
        <definition>SecureString EncodeBase64Secure</definition>
        <argsstring>(const SecureString &amp;input)</argsstring>
        <name>EncodeBase64Secure</name>
        <param>
          <type>const <ref refid="allocators_8h_1a396ed773a5ac24aec28c8f7dc413c7ac" kindref="member">SecureString</ref> &amp;</type>
          <declname>input</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/util.cpp" line="719" column="1" bodyfile="/home/dev/ds-160209/src/util.cpp" bodystart="719" bodyend="743"/>
      </memberdef>
      <memberdef kind="function" id="util_8cpp_1a0071c0bf91d611895e43999e62666c96" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="allocators_8h_1a396ed773a5ac24aec28c8f7dc413c7ac" kindref="member">SecureString</ref></type>
        <definition>SecureString DecodeBase64Secure</definition>
        <argsstring>(const SecureString &amp;input)</argsstring>
        <name>DecodeBase64Secure</name>
        <param>
          <type>const <ref refid="allocators_8h_1a396ed773a5ac24aec28c8f7dc413c7ac" kindref="member">SecureString</ref> &amp;</type>
          <declname>input</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/util.cpp" line="746" column="1" bodyfile="/home/dev/ds-160209/src/util.cpp" bodystart="746" bodyend="772"/>
      </memberdef>
      <memberdef kind="function" id="util_8cpp_1a71aa75e646de8a10971f887bc71d9a75" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>string</type>
        <definition>string EncodeBase32</definition>
        <argsstring>(const unsigned char *pch, size_t len)</argsstring>
        <name>EncodeBase32</name>
        <param>
          <type>const unsigned char *</type>
          <declname>pch</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>len</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/util.cpp" line="775" column="1" bodyfile="/home/dev/ds-160209/src/util.cpp" bodystart="775" bodyend="832"/>
        <referencedby refid="class_i2_p_session_1a4daa60a1a5767f354ebc5af8cabc4691" compoundref="i2p_8cpp" startline="193" endline="207">I2PSession::GenerateB32AddressFromDestination</referencedby>
        <referencedby refid="class_c_net_addr_1a7ec845c27b63853fb0db08a4d154266f" compoundref="netbase_8cpp" startline="822" endline="848">CNetAddr::ToStringIP</referencedby>
        <referencedby refid="base32__tests_8cpp_1aae94806c3fd4446ae6ebfe0f368d0b36" compoundref="base32__tests_8cpp" startline="7" endline="18">BOOST_AUTO_TEST_CASE</referencedby>
        <referencedby refid="util_8cpp_1aa4484ee0b7560f87051606f109e5d96a" compoundref="util_8cpp" startline="834" endline="837">EncodeBase32</referencedby>
      </memberdef>
      <memberdef kind="function" id="util_8cpp_1aa4484ee0b7560f87051606f109e5d96a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>string</type>
        <definition>string EncodeBase32</definition>
        <argsstring>(const string &amp;str)</argsstring>
        <name>EncodeBase32</name>
        <param>
          <type>const string &amp;</type>
          <declname>str</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/util.cpp" line="834" column="1" bodyfile="/home/dev/ds-160209/src/util.cpp" bodystart="834" bodyend="837"/>
        <references refid="util_8cpp_1a71aa75e646de8a10971f887bc71d9a75" compoundref="util_8cpp" startline="775" endline="832">EncodeBase32</references>
      </memberdef>
      <memberdef kind="function" id="util_8cpp_1a8266fd137bc7f76f4a75024baab5c18f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>vector&lt; unsigned char &gt;</type>
        <definition>vector&lt;unsigned char&gt; DecodeBase32</definition>
        <argsstring>(const char *p, bool *pfInvalid)</argsstring>
        <name>DecodeBase32</name>
        <param>
          <type>const char *</type>
          <declname>p</declname>
        </param>
        <param>
          <type>bool *</type>
          <declname>pfInvalid</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/util.cpp" line="839" column="1" bodyfile="/home/dev/ds-160209/src/util.cpp" bodystart="839" bodyend="954"/>
        <referencedby refid="class_c_net_addr_1aa3e44dfd064d9d8da1cb48cdcb7dd231" compoundref="netbase_8cpp" startline="560" endline="591">CNetAddr::SetSpecial</referencedby>
        <referencedby refid="base32__tests_8cpp_1aae94806c3fd4446ae6ebfe0f368d0b36" compoundref="base32__tests_8cpp" startline="7" endline="18">BOOST_AUTO_TEST_CASE</referencedby>
        <referencedby refid="util_8cpp_1ab2bcbf931beb3b2a813db9daf09f265c" compoundref="util_8cpp" startline="956" endline="960">DecodeBase32</referencedby>
      </memberdef>
      <memberdef kind="function" id="util_8cpp_1ab2bcbf931beb3b2a813db9daf09f265c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>string</type>
        <definition>string DecodeBase32</definition>
        <argsstring>(const string &amp;str)</argsstring>
        <name>DecodeBase32</name>
        <param>
          <type>const string &amp;</type>
          <declname>str</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/util.cpp" line="956" column="1" bodyfile="/home/dev/ds-160209/src/util.cpp" bodystart="956" bodyend="960"/>
        <references refid="util_8cpp_1a8266fd137bc7f76f4a75024baab5c18f" compoundref="util_8cpp" startline="839" endline="954">DecodeBase32</references>
      </memberdef>
      <memberdef kind="function" id="util_8cpp_1a134e5ff2f94e103c1de7b642675546ca" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool WildcardMatch</definition>
        <argsstring>(const char *psz, const char *mask)</argsstring>
        <name>WildcardMatch</name>
        <param>
          <type>const char *</type>
          <declname>psz</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>mask</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/util.cpp" line="963" column="1" bodyfile="/home/dev/ds-160209/src/util.cpp" bodystart="963" bodyend="985"/>
        <references refid="util_8cpp_1a134e5ff2f94e103c1de7b642675546ca" compoundref="util_8cpp" startline="963" endline="985">WildcardMatch</references>
        <referencedby refid="rpcserver_8cpp_1a9ec282be04e51f5fde86d5ba98467019" compoundref="rpcserver_8cpp" startline="375" endline="396">ClientAllowed</referencedby>
        <referencedby refid="util_8h_1a134e5ff2f94e103c1de7b642675546ca" compoundref="util_8cpp" startline="963" endline="985">WildcardMatch</referencedby>
      </memberdef>
      <memberdef kind="function" id="util_8cpp_1aac41a59b5975b5fc5d340d4ba0ab29ea" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool WildcardMatch</definition>
        <argsstring>(const string &amp;str, const string &amp;mask)</argsstring>
        <name>WildcardMatch</name>
        <param>
          <type>const string &amp;</type>
          <declname>str</declname>
        </param>
        <param>
          <type>const string &amp;</type>
          <declname>mask</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/util.cpp" line="987" column="1" bodyfile="/home/dev/ds-160209/src/util.cpp" bodystart="987" bodyend="990"/>
        <references refid="util_8cpp_1a134e5ff2f94e103c1de7b642675546ca" compoundref="util_8cpp" startline="963" endline="985">WildcardMatch</references>
      </memberdef>
      <memberdef kind="function" id="util_8cpp_1a880a215d9e931432b095084c756a49bb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool ParseInt32</definition>
        <argsstring>(const std::string &amp;str, int32_t *out)</argsstring>
        <name>ParseInt32</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>str</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1ab1967d8591af1a4e48c37fd2b0f184d0" kindref="member">int32_t</ref> *</type>
          <declname>out</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Convert string to signed 32-bit integer with strict parse error feedback. <simplesect kind="return"><para>true if the entire string could be parsed as valid integer, false if not the entire string could be parsed or when overflow or underflow occurred. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/util.cpp" line="993" column="1" bodyfile="/home/dev/ds-160209/src/util.cpp" bodystart="993" bodyend="1005"/>
      </memberdef>
      <memberdef kind="function" id="util_8cpp_1a3eded752d24f2ca1ad72f6907dd23832" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string FormatParagraph</definition>
        <argsstring>(const std::string in, size_t width, size_t indent)</argsstring>
        <name>FormatParagraph</name>
        <param>
          <type>const std::string</type>
          <declname>in</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>width</declname>
          <defval>79</defval>
        </param>
        <param>
          <type>size_t</type>
          <declname>indent</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Format a paragraph of text to a fixed width, adding spaces for indentation to any added line. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/util.cpp" line="1007" column="1" bodyfile="/home/dev/ds-160209/src/util.cpp" bodystart="1007" bodyend="1040"/>
      </memberdef>
      <memberdef kind="function" id="util_8cpp_1a4758c4b8791b61f02cb4cdf67e3e95b6" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>static std::string FormatException</definition>
        <argsstring>(std::exception *pex, const char *pszThread)</argsstring>
        <name>FormatException</name>
        <param>
          <type>std::exception *</type>
          <declname>pex</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>pszThread</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/util.cpp" line="1044" column="1" bodyfile="/home/dev/ds-160209/src/util.cpp" bodystart="1044" bodyend="1058"/>
      </memberdef>
      <memberdef kind="function" id="util_8cpp_1a379b2307f40ae5dba4dd56a0156fa36e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void PrintException</definition>
        <argsstring>(std::exception *pex, const char *pszThread)</argsstring>
        <name>PrintException</name>
        <param>
          <type>std::exception *</type>
          <declname>pex</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>pszThread</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/util.cpp" line="1060" column="1" bodyfile="/home/dev/ds-160209/src/util.cpp" bodystart="1060" bodyend="1067"/>
        <references refid="util_8h_1afc02c0a4258fedfb316be612bb659ba8" compoundref="util_8h" startline="158">LogPrintf</references>
        <references refid="util_8cpp_1a396fd0b4e52260e1ddf379fa6e09d887" compoundref="util_8cpp" startline="104">strMiscWarning</references>
        <referencedby refid="darksilkd_8cpp_1ac59316b767e6984e1285f0531275286b" compoundref="darksilkd_8cpp" startline="34" endline="140">AppInit</referencedby>
        <referencedby refid="rpcclient_8h_1a4ee23259648a971c9c05aeff8b545a6d" compoundref="rpcclient_8cpp" startline="232" endline="295">CommandLineRPC</referencedby>
        <referencedby refid="util_8h_1ac6be85b683de5d9b41dc3046e50d6acd" compoundref="util_8h" startline="597" endline="621">LoopForever</referencedby>
        <referencedby refid="util_8h_1ac481a378af0229bf71e3d9fee7b938ad" compoundref="util_8h" startline="623" endline="644">TraceThread</referencedby>
      </memberdef>
      <memberdef kind="function" id="util_8cpp_1a477231880f761159de1567ad6fb98fac" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void PrintExceptionContinue</definition>
        <argsstring>(std::exception *pex, const char *pszThread)</argsstring>
        <name>PrintExceptionContinue</name>
        <param>
          <type>std::exception *</type>
          <declname>pex</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>pszThread</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/util.cpp" line="1069" column="1" bodyfile="/home/dev/ds-160209/src/util.cpp" bodystart="1069" bodyend="1075"/>
        <references refid="util_8h_1afc02c0a4258fedfb316be612bb659ba8" compoundref="util_8h" startline="158">LogPrintf</references>
        <references refid="util_8cpp_1a396fd0b4e52260e1ddf379fa6e09d887" compoundref="util_8cpp" startline="104">strMiscWarning</references>
        <referencedby refid="main_8h_1a196f9318f02448b85b28d612698934fd" compoundref="main_8cpp" startline="3306" endline="3423">ProcessMessages</referencedby>
      </memberdef>
      <memberdef kind="function" id="util_8cpp_1ab272995de020a3bcbf743be630e485c6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>boost::filesystem::path</type>
        <definition>boost::filesystem::path GetDefaultDataDir</definition>
        <argsstring>()</argsstring>
        <name>GetDefaultDataDir</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/util.cpp" line="1077" column="1" bodyfile="/home/dev/ds-160209/src/util.cpp" bodystart="1077" bodyend="1104"/>
        <referencedby refid="init_8h_1a1a4c1bfbf6ba1db77e988b89b9cadfd3" compoundref="init_8cpp" startline="375" endline="1285">AppInit2</referencedby>
        <referencedby refid="util_8h_1a0d247b470b387d7cd3f039bd26166007" compoundref="util_8cpp" startline="1109" endline="1140">GetDataDir</referencedby>
      </memberdef>
      <memberdef kind="function" id="util_8cpp_1ab83866a054745d4b30a3948a1b44beba" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const boost::filesystem::path &amp;</type>
        <definition>const boost::filesystem::path&amp; GetDataDir</definition>
        <argsstring>(bool fNetSpecific)</argsstring>
        <name>GetDataDir</name>
        <param>
          <type>bool</type>
          <declname>fNetSpecific</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/util.cpp" line="1109" column="1" bodyfile="/home/dev/ds-160209/src/util.cpp" bodystart="1109" bodyend="1140"/>
        <references refid="sync_8h_1a911fe23f057c2fe5aad629162d6c99d0" compoundref="sync_8h" startline="159">LOCK</references>
        <references refid="class_c_chain_params_1a5c4bb1d7c0205399ff06ee58fab7f176ac930c321a94adf771179465e98c13674" compoundref="chainparams_8h" startline="42">CChainParams::MAX_NETWORK_TYPES</references>
        <references refid="chainparams_8cpp_1ace5c5b706d71a324a417dd2db394fd4a" compoundref="chainparams_8cpp" startline="186" endline="188">Params</references>
        <references refid="class_c_chain_params_1a90dc493ec0c0325c98c3ac06eb99862b">CChainParams::NetworkID</references>
        <references refid="util_8cpp_1a0502b74b88db99500ee21dcb446311e5" compoundref="util_8cpp" startline="94">mapArgs</references>
        <references refid="util_8cpp_1ab272995de020a3bcbf743be630e485c6" compoundref="util_8cpp" startline="1077" endline="1104">GetDefaultDataDir</references>
        <references refid="class_c_chain_params_1ad11dd170e65650ff4b12d45a32b9c774" compoundref="chainparams_8h" startline="63" endline="63">CChainParams::DataDir</references>
        <referencedby refid="darksilkd_8cpp_1ac59316b767e6984e1285f0531275286b" compoundref="darksilkd_8cpp" startline="34" endline="140">AppInit</referencedby>
        <referencedby refid="class_c_d_b_1aa5f2317ab28c6424bfebdaa969aa2b2c" compoundref="db_8cpp" startline="230" endline="286">CDB::CDB</referencedby>
        <referencedby refid="init_8h_1ac5f038c2b480cf9ef5e19e3eba8dbaf9" compoundref="init_8cpp" startline="130" endline="194">Shutdown</referencedby>
        <referencedby refid="init_8h_1a1a4c1bfbf6ba1db77e988b89b9cadfd3" compoundref="init_8cpp" startline="375" endline="1285">AppInit2</referencedby>
        <referencedby refid="main_8h_1a6df609da0bad1550cbb2cdc781ad2904" compoundref="main_8cpp" startline="2024" endline="2039">CheckDiskSpace</referencedby>
        <referencedby refid="main_8h_1a0189c34248cd89bbbe20d4d6045bd7c9" compoundref="main_8cpp" startline="2294" endline="2317">ThreadImport</referencedby>
        <referencedby refid="main_8h_1a2f26f074aac584c3398de1dcdac59de9" compoundref="main_8cpp" startline="4008" endline="4011">GetBlockPosFilename</referencedby>
        <referencedby refid="class_c_addr_d_b_1af8c039f1904b1892c5a14e484a5b31a7" compoundref="net_8cpp" startline="2017" endline="2020">CAddrDB::CAddrDB</referencedby>
        <referencedby refid="class_c_addr_d_b_1aaec90dba59cd69a2f25bc5630a1dde39" compoundref="net_8cpp" startline="2022" endline="2058">CAddrDB::Write</referencedby>
        <referencedby refid="darksilk_8cpp_1a0ddf1224851353fc92bfbff6f499fa97" compoundref="darksilk_8cpp" startline="128" endline="350">main</referencedby>
        <referencedby refid="namespace_g_u_i_util_1aad169e3227e7a851db52a08bfb30391c" compoundref="guiutil_8cpp" startline="248" endline="255">GUIUtil::openDebugLogfile</referencedby>
        <referencedby refid="rpcserver_8h_1af4d692a884c24c4abe2fc3f2b165542d" compoundref="rpcserver_8cpp" startline="517" endline="634">StartRPCThreads</referencedby>
        <referencedby refid="rpcsmessage_8cpp_1ab34a83fffcd660b6c514cd5ebb3a03ab" compoundref="rpcsmessage_8cpp" startline="773" endline="896">smsgbuckets</referencedby>
        <referencedby refid="class_sec_msg_d_b_1a1fc6ac45b72e4df75be07fdadfc356ce" compoundref="smessage_8cpp" startline="188" endline="221">SecMsgDB::Open</referencedby>
        <referencedby refid="smessage_8cpp_1a67cfe472b1e783b85b09ebfeb43afbab" compoundref="smessage_8cpp" startline="579" endline="685">ThreadSecureMsg</referencedby>
        <referencedby refid="smessage_8h_1a925f4769284eaf73a3beda3c2b15e91d" compoundref="smessage_8cpp" startline="768" endline="909">SecureMsgBuildBucketSet</referencedby>
        <referencedby refid="smessage_8h_1aebaa05e870f58d8a3736c922295e286a" compoundref="smessage_8cpp" startline="964" endline="1036">SecureMsgReadIni</referencedby>
        <referencedby refid="smessage_8h_1ad6d4790245bc722b427671aad60f5a07" compoundref="smessage_8cpp" startline="1038" endline="1100">SecureMsgWriteIni</referencedby>
        <referencedby refid="smessage_8h_1ae6a19a8d011fefc72c9cab3d0df014bd" compoundref="smessage_8cpp" startline="2153" endline="2298">SecureMsgScanBuckets</referencedby>
        <referencedby refid="smessage_8h_1adf0fa2a06615363dc3ea6360be0939ec" compoundref="smessage_8cpp" startline="2301" endline="2444">SecureMsgWalletUnlocked</referencedby>
        <referencedby refid="smessage_8h_1a9a34bfa72cc027350d71f9daaefb8fef" compoundref="smessage_8cpp" startline="2731" endline="2794">SecureMsgRetrieve</referencedby>
        <referencedby refid="smessage_8h_1abdde7d50a54a2f54a3aea64c47af535a" compoundref="smessage_8cpp" startline="2911" endline="2975">SecureMsgStoreUnscanned</referencedby>
        <referencedby refid="smessage_8h_1a1d8fd52e96428c7fe6561d3857363fc9" compoundref="smessage_8cpp" startline="2978" endline="3092">SecureMsgStore</referencedby>
        <referencedby refid="class_c_budget_d_b_1a133c5d41d7aa4a73b02a14bd286b4503" compoundref="stormnode-budget_8cpp" startline="204" endline="208">CBudgetDB::CBudgetDB</referencedby>
        <referencedby refid="class_c_stormnode_payment_d_b_1ade4ae1d8cfaa218535e5abc8174729dd" compoundref="stormnode-payments_8cpp" startline="28" endline="32">CStormnodePaymentDB::CStormnodePaymentDB</referencedby>
        <referencedby refid="class_c_stormnode_d_b_1a212d16c07750eca6c23496e53aec5512" compoundref="stormnodeman_8cpp" startline="51" endline="55">CStormnodeDB::CStormnodeDB</referencedby>
        <referencedby refid="util_8h_1afd4c3002b2797c0560adddb6af3ca1da" compoundref="util_8cpp" startline="280" endline="318">LogPrintStr</referencedby>
        <referencedby refid="util_8h_1a7d86fadf98dfaba55f80b9be0ab0f978" compoundref="util_8cpp" startline="1148" endline="1153">GetConfigFile</referencedby>
        <referencedby refid="util_8h_1a424ea7e15366f453189c6b977f14b420" compoundref="util_8cpp" startline="1155" endline="1160">GetStormnodeConfigFile</referencedby>
        <referencedby refid="util_8h_1a91d2f3eb3a1bb92ab4eb1bd4b713a99e" compoundref="util_8cpp" startline="1245" endline="1250">GetPidFile</referencedby>
        <referencedby refid="util_8h_1a37fca7e305fe0caa306b23fdb37f88e2" compoundref="util_8cpp" startline="1328" endline="1348">ShrinkDebugFile</referencedby>
        <referencedby refid="walletdb_8cpp_1a273c3692765c732c5f724cec93e6b62f" compoundref="walletdb_8cpp" startline="794" endline="832">BackupWallet</referencedby>
      </memberdef>
      <memberdef kind="function" id="util_8cpp_1abfb50dfe077aced7591f2aba601f605d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ClearDatadirCache</definition>
        <argsstring>()</argsstring>
        <name>ClearDatadirCache</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/util.cpp" line="1142" column="1" bodyfile="/home/dev/ds-160209/src/util.cpp" bodystart="1142" bodyend="1146"/>
        <references refid="class_c_chain_params_1a5c4bb1d7c0205399ff06ee58fab7f176ac930c321a94adf771179465e98c13674" compoundref="chainparams_8h" startline="42">CChainParams::MAX_NETWORK_TYPES</references>
        <referencedby refid="util_8cpp_1a27ba417174a3ee63cb8ee1abb279a668" compoundref="util_8cpp" startline="1212" endline="1243">ReadConfigFile</referencedby>
      </memberdef>
      <memberdef kind="function" id="util_8cpp_1a7d86fadf98dfaba55f80b9be0ab0f978" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>boost::filesystem::path</type>
        <definition>boost::filesystem::path GetConfigFile</definition>
        <argsstring>()</argsstring>
        <name>GetConfigFile</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/util.cpp" line="1148" column="1" bodyfile="/home/dev/ds-160209/src/util.cpp" bodystart="1148" bodyend="1153"/>
        <references refid="util_8cpp_1a24f685720bf40370e5bd2a192ad50cd8" compoundref="util_8cpp" startline="536" endline="541">GetArg</references>
        <references refid="util_8cpp_1ab83866a054745d4b30a3948a1b44beba" compoundref="util_8cpp" startline="1109" endline="1140">GetDataDir</references>
        <referencedby refid="init_8h_1a1a4c1bfbf6ba1db77e988b89b9cadfd3" compoundref="init_8cpp" startline="375" endline="1285">AppInit2</referencedby>
        <referencedby refid="rpcclient_8cpp_1ae0b4394f271db49671cf894dbe94c484" compoundref="rpcclient_8cpp" startline="33" endline="95">CallRPC</referencedby>
        <referencedby refid="rpcserver_8h_1af4d692a884c24c4abe2fc3f2b165542d" compoundref="rpcserver_8cpp" startline="517" endline="634">StartRPCThreads</referencedby>
        <referencedby refid="util_8cpp_1a27ba417174a3ee63cb8ee1abb279a668" compoundref="util_8cpp" startline="1212" endline="1243">ReadConfigFile</referencedby>
      </memberdef>
      <memberdef kind="function" id="util_8cpp_1a424ea7e15366f453189c6b977f14b420" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>boost::filesystem::path</type>
        <definition>boost::filesystem::path GetStormnodeConfigFile</definition>
        <argsstring>()</argsstring>
        <name>GetStormnodeConfigFile</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/util.cpp" line="1155" column="1" bodyfile="/home/dev/ds-160209/src/util.cpp" bodystart="1155" bodyend="1160"/>
        <references refid="util_8cpp_1a24f685720bf40370e5bd2a192ad50cd8" compoundref="util_8cpp" startline="536" endline="541">GetArg</references>
        <references refid="util_8cpp_1ab83866a054745d4b30a3948a1b44beba" compoundref="util_8cpp" startline="1109" endline="1140">GetDataDir</references>
        <referencedby refid="class_c_stormnode_config_1a6ad22bf283a95ac600d0e1d37fa41d54" compoundref="stormnodeconfig_8cpp" startline="21" endline="80">CStormnodeConfig::read</referencedby>
      </memberdef>
      <memberdef kind="function" id="util_8cpp_1a016054b32fbbc241353faf86a94eae9b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string GenerateRandomString</definition>
        <argsstring>(unsigned int len)</argsstring>
        <name>GenerateRandomString</name>
        <param>
          <type>unsigned int</type>
          <declname>len</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/util.cpp" line="1162" column="1" bodyfile="/home/dev/ds-160209/src/util.cpp" bodystart="1162" bodyend="1180"/>
        <references refid="db__bench_8cc_1a2391b9dab13f09bae65ae349c8d4c271" compoundref="db__bench_8cc" startline="290">rand</references>
        <referencedby refid="util_8h_1a22a2db2aea31bc8220b804147c1a82db" compoundref="util_8cpp" startline="1188" endline="1204">WriteConfigFile</referencedby>
      </memberdef>
      <memberdef kind="function" id="util_8cpp_1a680db3065fcd18a556ea6e1fc977e3b0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>unsigned int</type>
        <definition>unsigned int RandomIntegerRange</definition>
        <argsstring>(unsigned int nMin, unsigned int nMax)</argsstring>
        <name>RandomIntegerRange</name>
        <param>
          <type>unsigned int</type>
          <declname>nMin</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>nMax</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/util.cpp" line="1182" column="1" bodyfile="/home/dev/ds-160209/src/util.cpp" bodystart="1182" bodyend="1186"/>
        <references refid="db__bench_8cc_1a2391b9dab13f09bae65ae349c8d4c271" compoundref="db__bench_8cc" startline="290">rand</references>
        <referencedby refid="util_8h_1a22a2db2aea31bc8220b804147c1a82db" compoundref="util_8cpp" startline="1188" endline="1204">WriteConfigFile</referencedby>
      </memberdef>
      <memberdef kind="function" id="util_8cpp_1a22a2db2aea31bc8220b804147c1a82db" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void WriteConfigFile</definition>
        <argsstring>(FILE *configFile)</argsstring>
        <name>WriteConfigFile</name>
        <param>
          <type>FILE *</type>
          <declname>configFile</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/util.cpp" line="1188" column="1" bodyfile="/home/dev/ds-160209/src/util.cpp" bodystart="1188" bodyend="1204"/>
        <references refid="util_8cpp_1a016054b32fbbc241353faf86a94eae9b" compoundref="util_8cpp" startline="1162" endline="1180">GenerateRandomString</references>
        <references refid="util_8cpp_1a680db3065fcd18a556ea6e1fc977e3b0" compoundref="util_8cpp" startline="1182" endline="1186">RandomIntegerRange</references>
        <referencedby refid="util_8cpp_1a27ba417174a3ee63cb8ee1abb279a668" compoundref="util_8cpp" startline="1212" endline="1243">ReadConfigFile</referencedby>
      </memberdef>
      <memberdef kind="function" id="util_8cpp_1a990b64b5cc5ec1ba733a834916f4c0a7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool FileExists</definition>
        <argsstring>(const char *fileName)</argsstring>
        <name>FileExists</name>
        <param>
          <type>const char *</type>
          <declname>fileName</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/util.cpp" line="1206" column="1" bodyfile="/home/dev/ds-160209/src/util.cpp" bodystart="1206" bodyend="1210"/>
      </memberdef>
      <memberdef kind="function" id="util_8cpp_1a27ba417174a3ee63cb8ee1abb279a668" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ReadConfigFile</definition>
        <argsstring>(map&lt; string, string &gt; &amp;mapSettingsRet, map&lt; string, vector&lt; string &gt; &gt; &amp;mapMultiSettingsRet)</argsstring>
        <name>ReadConfigFile</name>
        <param>
          <type>map&lt; string, string &gt; &amp;</type>
          <declname>mapSettingsRet</declname>
        </param>
        <param>
          <type>map&lt; string, vector&lt; string &gt; &gt; &amp;</type>
          <declname>mapMultiSettingsRet</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/util.cpp" line="1212" column="1" bodyfile="/home/dev/ds-160209/src/util.cpp" bodystart="1212" bodyend="1243"/>
        <references refid="util_8cpp_1a7d86fadf98dfaba55f80b9be0ab0f978" compoundref="util_8cpp" startline="1148" endline="1153">GetConfigFile</references>
        <references refid="util_8cpp_1a22a2db2aea31bc8220b804147c1a82db" compoundref="util_8cpp" startline="1188" endline="1204">WriteConfigFile</references>
        <references refid="util_8cpp_1abfb50dfe077aced7591f2aba601f605d" compoundref="util_8cpp" startline="1142" endline="1146">ClearDatadirCache</references>
        <referencedby refid="darksilkd_8cpp_1ac59316b767e6984e1285f0531275286b" compoundref="darksilkd_8cpp" startline="34" endline="140">AppInit</referencedby>
        <referencedby refid="darksilk_8cpp_1a0ddf1224851353fc92bfbff6f499fa97" compoundref="darksilk_8cpp" startline="128" endline="350">main</referencedby>
      </memberdef>
      <memberdef kind="function" id="util_8cpp_1a91d2f3eb3a1bb92ab4eb1bd4b713a99e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>boost::filesystem::path</type>
        <definition>boost::filesystem::path GetPidFile</definition>
        <argsstring>()</argsstring>
        <name>GetPidFile</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/util.cpp" line="1245" column="1" bodyfile="/home/dev/ds-160209/src/util.cpp" bodystart="1245" bodyend="1250"/>
        <references refid="util_8cpp_1a24f685720bf40370e5bd2a192ad50cd8" compoundref="util_8cpp" startline="536" endline="541">GetArg</references>
        <references refid="util_8cpp_1ab83866a054745d4b30a3948a1b44beba" compoundref="util_8cpp" startline="1109" endline="1140">GetDataDir</references>
        <referencedby refid="darksilkd_8cpp_1ac59316b767e6984e1285f0531275286b" compoundref="darksilkd_8cpp" startline="34" endline="140">AppInit</referencedby>
        <referencedby refid="init_8h_1ac5f038c2b480cf9ef5e19e3eba8dbaf9" compoundref="init_8cpp" startline="130" endline="194">Shutdown</referencedby>
      </memberdef>
      <memberdef kind="function" id="util_8cpp_1a0ec1d8fc76760232b016335fdcf7c539" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void CreatePidFile</definition>
        <argsstring>(const boost::filesystem::path &amp;path, pid_t pid)</argsstring>
        <name>CreatePidFile</name>
        <param>
          <type>const boost::filesystem::path &amp;</type>
          <declname>path</declname>
        </param>
        <param>
          <type>pid_t</type>
          <declname>pid</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/util.cpp" line="1253" column="1" bodyfile="/home/dev/ds-160209/src/util.cpp" bodystart="1253" bodyend="1261"/>
        <referencedby refid="darksilkd_8cpp_1ac59316b767e6984e1285f0531275286b" compoundref="darksilkd_8cpp" startline="34" endline="140">AppInit</referencedby>
      </memberdef>
      <memberdef kind="function" id="util_8cpp_1ad8f8509a84cc6f53344a5ac76369c327" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool RenameOver</definition>
        <argsstring>(boost::filesystem::path src, boost::filesystem::path dest)</argsstring>
        <name>RenameOver</name>
        <param>
          <type>boost::filesystem::path</type>
          <declname>src</declname>
        </param>
        <param>
          <type>boost::filesystem::path</type>
          <declname>dest</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/util.cpp" line="1264" column="1" bodyfile="/home/dev/ds-160209/src/util.cpp" bodystart="1264" bodyend="1273"/>
        <referencedby refid="main_8h_1a0189c34248cd89bbbe20d4d6045bd7c9" compoundref="main_8cpp" startline="2294" endline="2317">ThreadImport</referencedby>
        <referencedby refid="class_c_addr_d_b_1aaec90dba59cd69a2f25bc5630a1dde39" compoundref="net_8cpp" startline="2022" endline="2058">CAddrDB::Write</referencedby>
      </memberdef>
      <memberdef kind="function" id="util_8cpp_1a4458ca67cacd593b21c8e1386d192064" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool TryCreateDirectory</definition>
        <argsstring>(const boost::filesystem::path &amp;p)</argsstring>
        <name>TryCreateDirectory</name>
        <param>
          <type>const boost::filesystem::path &amp;</type>
          <declname>p</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Ignores exceptions thrown by Boost&apos;s create_directory if the requested directory exists. Specifically handles case where path p exists, but it wasn&apos;t possible for the user to write to the parent directory. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/util.cpp" line="1280" column="1" bodyfile="/home/dev/ds-160209/src/util.cpp" bodystart="1280" bodyend="1292"/>
        <referencedby refid="class_c_level_d_b_wrapper_1ae796b1190c072df6275e0ada4d187943" compoundref="leveldbwrapper_8cpp" startline="44" endline="67">CLevelDBWrapper::CLevelDBWrapper</referencedby>
      </memberdef>
      <memberdef kind="function" id="util_8cpp_1a7572b77c2a5191de8d40d4050322ab84" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void FileCommit</definition>
        <argsstring>(FILE *fileout)</argsstring>
        <name>FileCommit</name>
        <param>
          <type>FILE *</type>
          <declname>fileout</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/util.cpp" line="1294" column="1" bodyfile="/home/dev/ds-160209/src/util.cpp" bodystart="1294" bodyend="1302"/>
        <referencedby refid="class_c_block_1a606df2cab7dc67e5dd11b157d288cf2b" compoundref="chain_8cpp" startline="830" endline="854">CBlock::WriteToDisk</referencedby>
        <referencedby refid="class_c_addr_d_b_1aaec90dba59cd69a2f25bc5630a1dde39" compoundref="net_8cpp" startline="2022" endline="2058">CAddrDB::Write</referencedby>
      </memberdef>
      <memberdef kind="function" id="util_8cpp_1accff8f395fb4e283af38111daf096f0d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string getTimeString</definition>
        <argsstring>(int64_t timestamp, char *buffer, size_t nBuffer)</argsstring>
        <name>getTimeString</name>
        <param>
          <type><ref refid="stdint_8h_1adec1df1b8b51cb32b77e5b86fff46471" kindref="member">int64_t</ref></type>
          <declname>timestamp</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>buffer</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>nBuffer</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/util.cpp" line="1304" column="1" bodyfile="/home/dev/ds-160209/src/util.cpp" bodystart="1304" bodyend="1312"/>
        <referencedby refid="rpcsmessage_8cpp_1aeaef3f326a95b9510ad4ff2af7f80efe" compoundref="rpcsmessage_8cpp" startline="566" endline="677">smsginbox</referencedby>
        <referencedby refid="rpcsmessage_8cpp_1a09f153f6fb0e6094919452744ef58ded" compoundref="rpcsmessage_8cpp" startline="679" endline="770">smsgoutbox</referencedby>
        <referencedby refid="rpcsmessage_8cpp_1ab34a83fffcd660b6c514cd5ebb3a03ab" compoundref="rpcsmessage_8cpp" startline="773" endline="896">smsgbuckets</referencedby>
      </memberdef>
      <memberdef kind="function" id="util_8cpp_1a6476623f1d1477b76ae3f751f6db644b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string bytesReadable</definition>
        <argsstring>(uint64_t nBytes)</argsstring>
        <name>bytesReadable</name>
        <param>
          <type><ref refid="stdint_8h_1aaa5d1cd013383c889537491c3cfd9aad" kindref="member">uint64_t</ref></type>
          <declname>nBytes</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/util.cpp" line="1314" column="1" bodyfile="/home/dev/ds-160209/src/util.cpp" bodystart="1314" bodyend="1326"/>
        <references refid="tinyformat_8h_1a56c674871a61baaad36ad52238c08857" compoundref="tinyformat_8h" startline="1011">strprintf</references>
        <referencedby refid="rpcsmessage_8cpp_1ab34a83fffcd660b6c514cd5ebb3a03ab" compoundref="rpcsmessage_8cpp" startline="773" endline="896">smsgbuckets</referencedby>
      </memberdef>
      <memberdef kind="function" id="util_8cpp_1a37fca7e305fe0caa306b23fdb37f88e2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ShrinkDebugFile</definition>
        <argsstring>()</argsstring>
        <name>ShrinkDebugFile</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/util.cpp" line="1328" column="1" bodyfile="/home/dev/ds-160209/src/util.cpp" bodystart="1328" bodyend="1348"/>
        <references refid="util_8cpp_1ab83866a054745d4b30a3948a1b44beba" compoundref="util_8cpp" startline="1109" endline="1140">GetDataDir</references>
        <referencedby refid="init_8h_1a1a4c1bfbf6ba1db77e988b89b9cadfd3" compoundref="init_8cpp" startline="375" endline="1285">AppInit2</referencedby>
      </memberdef>
      <memberdef kind="function" id="util_8cpp_1a46fac5fba8ba905b5f9acb364f5d8c6f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="stdint_8h_1adec1df1b8b51cb32b77e5b86fff46471" kindref="member">int64_t</ref></type>
        <definition>int64_t GetTime</definition>
        <argsstring>()</argsstring>
        <name>GetTime</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/util.cpp" line="1352" column="1" bodyfile="/home/dev/ds-160209/src/util.cpp" bodystart="1352" bodyend="1357"/>
        <referencedby refid="chain_8h_1a5edcd96316574fd4a7f3ae0922a5cfd6" compoundref="chain_8cpp" startline="660" endline="676">IsInitialBlockDownload</referencedby>
        <referencedby refid="init_8h_1a1a4c1bfbf6ba1db77e988b89b9cadfd3" compoundref="init_8cpp" startline="375" endline="1285">AppInit2</referencedby>
        <referencedby refid="instantx_8h_1aa516cb499ead2691d8ab216a499db5d0" compoundref="instantx_8cpp" startline="38" endline="173">ProcessMessageInstantX</referencedby>
        <referencedby refid="instantx_8h_1a3774b6dae3dfa0a6c85e3604e742150c" compoundref="instantx_8cpp" startline="221" endline="256">CreateNewLock</referencedby>
        <referencedby refid="instantx_8h_1a5d4434bfb70f64f95aa4de9286cbae94" compoundref="instantx_8cpp" startline="302" endline="394">ProcessConsensusVote</referencedby>
        <referencedby refid="instantx_8h_1aef32a1712071881d322fdb3740c07227" compoundref="instantx_8cpp" startline="396" endline="417">CheckForConflictingLocks</referencedby>
        <referencedby refid="instantx_8h_1afede7ddd9c324103f27d52a2a3b75b1c" compoundref="instantx_8cpp" startline="434" endline="463">CleanTransactionLocksList</referencedby>
        <referencedby refid="main_8h_1a8189e51a581977f4de34ed4e0159bf63" compoundref="main_8cpp" startline="865" endline="1023">AcceptToMemoryPool</referencedby>
        <referencedby refid="main_8h_1a4d2373d0ce79227c95358116aae667f3" compoundref="main_8cpp" startline="1230" endline="1375">AcceptableInputs</referencedby>
        <referencedby refid="class_c_merkle_tx_1a31b0765b267cab5f76b308d1fe5d9375" compoundref="main_8cpp" startline="1417" endline="1428">CMerkleTx::IsTransactionLockTimedOut</referencedby>
        <referencedby refid="main_8h_1a711a5bdb30c9c9bbdc83011b1cbbe2f3" compoundref="main_8cpp" startline="3426" endline="3631">SendMessages</referencedby>
        <referencedby refid="class_c_block_1a6e308b2d75d1cfc4a75eda36feb60ca1" compoundref="main_8cpp" startline="4125" endline="4242">CBlock::SetBestChain</referencedby>
        <referencedby refid="miner_8cpp_1a31faece5ef0e403969b3d3debd79b352" compoundref="miner_8cpp" startline="536" endline="591">ThreadStakeMiner</referencedby>
        <referencedby refid="net_8h_1a57ffc895ab641207e0eb30fd7e00a585" compoundref="net_8cpp" startline="378" endline="443">ConnectNode</referencedby>
        <referencedby refid="class_c_node_1a4dbfe4f6c1fd162aaa905e4bd201d536" compoundref="net_8cpp" startline="465" endline="475">CNode::PushVersion</referencedby>
        <referencedby refid="class_c_node_1aefa8b81afa53b4c6635dc4c6c024211a" compoundref="net_8cpp" startline="489" endline="503">CNode::IsBanned</referencedby>
        <referencedby refid="class_c_node_1a1923dffc7124eeedcc4bb58c2cd75754" compoundref="net_8cpp" startline="505" endline="528">CNode::Misbehaving</referencedby>
        <referencedby refid="net_8h_1aff6b7f2f213ce1e8d3aea65c41c99cb8" compoundref="net_8cpp" startline="709" endline="750">SocketSendData</referencedby>
        <referencedby refid="net_8cpp_1aa1111c12121e039bbd8eedb556e4514a" compoundref="net_8cpp" startline="754" endline="1131">ThreadSocketHandler</referencedby>
        <referencedby refid="net_8cpp_1ab2d8883b5524ec7b80d3b9535e73a3ed" compoundref="net_8cpp" startline="1259" endline="1300">ThreadDNSAddressSeed</referencedby>
        <referencedby refid="net_8cpp_1a3b4720330e61127963a43df26b80f804" compoundref="net_8cpp" startline="1339" endline="1441">ThreadOpenConnections</referencedby>
        <referencedby refid="net_8h_1aa7eea5ebcc85b5a7a0ae3716608bfffe" compoundref="net_8cpp" startline="1953" endline="1971">RelayTransaction</referencedby>
        <referencedby refid="class_c_node_1a51556705550511146245b9fb2fec09c1" compoundref="net_8h" startline="314" endline="369">CNode::CNode</referencedby>
        <referencedby refid="class_c_node_1ae0def1498409407d1612833a7d38c875" compoundref="net_8h" startline="503" endline="520">CNode::AskFor</referencedby>
        <referencedby refid="class_dark_silk_g_u_i_1a2a303132be32277f46691fe91803f766" compoundref="darksilkgui_8cpp" startline="860" endline="944">DarkSilkGUI::setNumBlocks</referencedby>
        <referencedby refid="class_overview_page_1a95da1abd608bd2412b668be43446295a" compoundref="overviewpage_8cpp" startline="396" endline="513">OverviewPage::sandStormStatus</referencedby>
        <referencedby refid="rpcdump_8cpp_1a831ddf746d4f2500ba6f6c07f63445cd" compoundref="rpcdump_8cpp" startline="345" endline="401">dumpwallet</referencedby>
        <referencedby refid="rpcmining_8cpp_1aa40f86dc468a3f2ef4a3bba99e20a069" compoundref="rpcmining_8cpp" startline="236" endline="360">getworkex</referencedby>
        <referencedby refid="rpcmining_8cpp_1a356be62c93d38267a7da9e1cb644d547" compoundref="rpcmining_8cpp" startline="363" endline="473">getwork</referencedby>
        <referencedby refid="rpcmining_8cpp_1a27347eecedd59156c914fcb5ce488f9a" compoundref="rpcmining_8cpp" startline="476" endline="653">getblocktemplate</referencedby>
        <referencedby refid="rpcwallet_8cpp_1a733f7c70e7c18783935e6de9643c0086" compoundref="rpcwallet_8cpp" startline="1969" endline="2032">walletpassphrase</referencedby>
        <referencedby refid="class_c_sandstorm_pool_1acf0b5b0e5703c88b7d3c9cb121ec6533" compoundref="sandstorm_8cpp" startline="38" endline="374">CSandstormPool::ProcessMessageSandstorm</referencedby>
        <referencedby refid="class_c_sandstorm_pool_1a83d73d68f8df36be057d8dc6dad3fc28" compoundref="sandstorm_8cpp" startline="869" endline="888">CSandstormPool::CheckForCompleteQueue</referencedby>
        <referencedby refid="class_c_sandstorm_pool_1a657fcb1ca83116777fdcfed8676107ea" compoundref="sandstorm_8cpp" startline="1307" endline="1316">CSandstormPool::NewBlock</referencedby>
        <referencedby refid="class_c_sandstorm_pool_1a6ca453bd284507a2d5b26e9d4491e00c" compoundref="sandstorm_8cpp" startline="1813" endline="1867">CSandstormPool::IsCompatibleWithSession</referencedby>
        <referencedby refid="class_c_sand_storm_entry_1aa1497e8d6693f47968af94ea946ea9e6" compoundref="sandstorm_8h" startline="106" endline="122">CSandStormEntry::Add</referencedby>
        <referencedby refid="class_c_sand_storm_entry_1a903de6ae89a6755fa2e9112e52c6d161" compoundref="sandstorm_8h" startline="140" endline="143">CSandStormEntry::IsExpired</referencedby>
        <referencedby refid="class_c_sandstorm_queue_1a2b509d89f0a6c0d858a5e28bab2e2017" compoundref="sandstorm_8h" startline="214" endline="217">CSandstormQueue::IsExpired</referencedby>
        <referencedby refid="class_sec_msg_bucket_1ae6e05a91141c7cacf593b90e8c082113" compoundref="smessage_8cpp" startline="165" endline="185">SecMsgBucket::hashBucket</referencedby>
        <referencedby refid="smessage_8cpp_1a67cfe472b1e783b85b09ebfeb43afbab" compoundref="smessage_8cpp" startline="579" endline="685">ThreadSecureMsg</referencedby>
        <referencedby refid="smessage_8h_1a925f4769284eaf73a3beda3c2b15e91d" compoundref="smessage_8cpp" startline="768" endline="909">SecureMsgBuildBucketSet</referencedby>
        <referencedby refid="smessage_8h_1a10fcf201b1c7066a376692b50988cdbf" compoundref="smessage_8cpp" startline="1292" endline="1781">SecureMsgReceiveData</referencedby>
        <referencedby refid="smessage_8h_1abb934a23a076a4af443e2fb0610d7833" compoundref="smessage_8cpp" startline="1783" endline="1882">SecureMsgSendData</referencedby>
        <referencedby refid="smessage_8h_1ae6a19a8d011fefc72c9cab3d0df014bd" compoundref="smessage_8cpp" startline="2153" endline="2298">SecureMsgScanBuckets</referencedby>
        <referencedby refid="smessage_8h_1adf0fa2a06615363dc3ea6360be0939ec" compoundref="smessage_8cpp" startline="2301" endline="2444">SecureMsgWalletUnlocked</referencedby>
        <referencedby refid="smessage_8h_1a31bf2f77c776bbf1fb39bbe79b6e9f5f" compoundref="smessage_8cpp" startline="2482" endline="2599">SecureMsgScanMessage</referencedby>
        <referencedby refid="smessage_8h_1a76ffa50f445c2a6089504aead1239e9f" compoundref="smessage_8cpp" startline="2796" endline="2909">SecureMsgReceive</referencedby>
        <referencedby refid="smessage_8h_1abdde7d50a54a2f54a3aea64c47af535a" compoundref="smessage_8cpp" startline="2911" endline="2975">SecureMsgStoreUnscanned</referencedby>
        <referencedby refid="smessage_8h_1a1d8fd52e96428c7fe6561d3857363fc9" compoundref="smessage_8cpp" startline="2978" endline="3092">SecureMsgStore</referencedby>
        <referencedby refid="smessage_8h_1a1a9885d0f94a7d5322eafb31bcf2f90a" compoundref="smessage_8cpp" startline="3276" endline="3531">SecureMsgEncrypt</referencedby>
        <referencedby refid="smessage_8h_1acbe2815144396344354ffa3022300278" compoundref="smessage_8cpp" startline="3533" endline="3699">SecureMsgSend</referencedby>
        <referencedby refid="spork_8h_1a3305663176e21e81c80dc951a7f8ea5e" compoundref="spork_8cpp" startline="82" endline="102">IsSporkActive</referencedby>
        <referencedby refid="class_c_spork_manager_1afb7e15fe29bd548939657a20ca5feafb" compoundref="spork_8cpp" startline="217" endline="233">CSporkManager::UpdateSpork</referencedby>
        <referencedby refid="class_c_budget_manager_1a9c62c8f18b6f101465415952349ce203" compoundref="stormnode-budget_8cpp" startline="799" endline="902">CBudgetManager::NewBlock</referencedby>
        <referencedby refid="class_c_budget_manager_1a643d564d0232ed6f9e6ca025b8377c13" compoundref="stormnode-budget_8cpp" startline="1231" endline="1256">CBudgetManager::UpdateProposal</referencedby>
        <referencedby refid="class_c_budget_manager_1a4ac3207b673d7163a7d03005e35d6f8b" compoundref="stormnode-budget_8cpp" startline="1258" endline="1283">CBudgetManager::UpdateFinalizedBudget</referencedby>
        <referencedby refid="class_c_budget_proposal_1ad153df04aa541d0c06eb068d79d0cf96" compoundref="stormnode-budget_8cpp" startline="1422" endline="1449">CBudgetProposal::AddOrUpdateVote</referencedby>
        <referencedby refid="class_c_finalized_budget_1a63fadb286f5d0f9f735bc33deba56b02" compoundref="stormnode-budget_8cpp" startline="1670" endline="1696">CFinalizedBudget::AddOrUpdateVote</referencedby>
        <referencedby refid="class_c_budget_proposal_1a0f4231aa216c99a6a3ad2b6bf31d8bfe" compoundref="stormnode-budget_8h" startline="423" endline="430">CBudgetProposal::IsEstablished</referencedby>
        <referencedby refid="class_c_stormnode_sync_1adfb3343f29476ca833084be0320a7d50" compoundref="stormnode-sync_8cpp" startline="28" endline="57">CStormnodeSync::IsBlockchainSynced</referencedby>
        <referencedby refid="class_c_stormnode_sync_1a14d6ee22d6cd11c4045b9fb8c7891551" compoundref="stormnode-sync_8cpp" startline="59" endline="80">CStormnodeSync::Reset</referencedby>
        <referencedby refid="class_c_stormnode_sync_1ad9e9ad7392c3fa1ec0af4b178b3c62c0" compoundref="stormnode-sync_8cpp" startline="82" endline="93">CStormnodeSync::AddedStormnodeList</referencedby>
        <referencedby refid="class_c_stormnode_sync_1a686a36163137e9079365e7fd0ede826c" compoundref="stormnode-sync_8cpp" startline="95" endline="106">CStormnodeSync::AddedStormnodeWinner</referencedby>
        <referencedby refid="class_c_stormnode_sync_1af200f11664c64e5256ad77bd0465b634" compoundref="stormnode-sync_8cpp" startline="108" endline="120">CStormnodeSync::AddedBudgetItem</referencedby>
        <referencedby refid="class_c_stormnode_sync_1a3c70130712267c3c100a69d35b97acf8" compoundref="stormnode-sync_8cpp" startline="132" endline="157">CStormnodeSync::GetNextAsset</referencedby>
        <referencedby refid="class_c_stormnode_sync_1adaaeb592c3432c8a459560523c7be207" compoundref="stormnode-sync_8cpp" startline="225" endline="405">CStormnodeSync::Process</referencedby>
        <referencedby refid="class_c_stormnode_1af2e9fab8911feaeb300b56702d933a67" compoundref="stormnode_8cpp" startline="178" endline="226">CStormnode::Check</referencedby>
        <referencedby refid="class_c_stormnode_man_1a918a4ccb668808449809a77adc036301" compoundref="stormnodeman_8cpp" startline="229" endline="244">CStormnodeMan::AskForSN</referencedby>
        <referencedby refid="class_c_stormnode_man_1a6d8c3a832ea7d6f4780a59e2ae0441b8" compoundref="stormnodeman_8cpp" startline="255" endline="350">CStormnodeMan::CheckAndRemove</referencedby>
        <referencedby refid="class_c_stormnode_man_1a3f8f9f86f01df701533b544903b55113" compoundref="stormnodeman_8cpp" startline="378" endline="398">CStormnodeMan::SsegUpdate</referencedby>
        <referencedby refid="class_c_stormnode_man_1ae30d0b9b493e23c3d14ec48c77be7b6f" compoundref="stormnodeman_8cpp" startline="674" endline="803">CStormnodeMan::ProcessMessage</referencedby>
        <referencedby refid="timedata_8h_1a09f81b9c7650f898cf3cf305b87547e6" compoundref="timedata_8cpp" startline="33" endline="36">GetAdjustedTime</referencedby>
        <referencedby refid="util_8h_1a786af12a87491f8dc24351d93b9833b6" compoundref="util_8cpp" startline="171" endline="196">RandAddSeedPerfmon</referencedby>
        <referencedby refid="util_8h_1afd4c3002b2797c0560adddb6af3ca1da" compoundref="util_8cpp" startline="280" endline="318">LogPrintStr</referencedby>
        <referencedby refid="class_c_wallet_1a061fe7f54f80ec40f856b3e6365c2f4a" compoundref="wallet_8cpp" startline="77" endline="101">CWallet::GenerateNewKey</referencedby>
        <referencedby refid="class_c_wallet_1ace33dcf23623d2036a38696bc3a94553" compoundref="wallet_8cpp" startline="1262" endline="1304">CWallet::ResendWalletTransactions</referencedby>
        <referencedby refid="class_c_wallet_1a8fe028fa266ab65464992b829861a627" compoundref="wallet_8cpp" startline="3699" endline="3730">CWallet::GetStakeWeight</referencedby>
        <referencedby refid="class_c_wallet_1a2555a9442e58b3c5593fef21f1b39d2d" compoundref="wallet_8cpp" startline="4448" endline="4457">CWallet::GetOldestKeyPoolTime</referencedby>
        <referencedby refid="class_c_key_pool_1ab1f33489faff7a7e1edbd61a5a18f604" compoundref="wallet_8h" startline="75" endline="78">CKeyPool::CKeyPool</referencedby>
        <referencedby refid="class_c_wallet_key_1aa2603825b543b1d5153f31482139a6b2" compoundref="wallet_8h" startline="1121" endline="1125">CWalletKey::CWalletKey</referencedby>
        <referencedby refid="walletdb_8cpp_1a571e13707ba159c7c047875764ae5e2b" compoundref="walletdb_8cpp" startline="732" endline="792">ThreadFlushWalletDB</referencedby>
        <referencedby refid="class_c_wallet_d_b_1a3ebeb12f37d9c66512e2bc2903a6854a" compoundref="walletdb_8cpp" startline="837" endline="913">CWalletDB::Recover</referencedby>
      </memberdef>
      <memberdef kind="function" id="util_8cpp_1a79d4c36b511d6690ab0bbde0e0da9251" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void SetMockTime</definition>
        <argsstring>(int64_t nMockTimeIn)</argsstring>
        <name>SetMockTime</name>
        <param>
          <type><ref refid="stdint_8h_1adec1df1b8b51cb32b77e5b86fff46471" kindref="member">int64_t</ref></type>
          <declname>nMockTimeIn</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/util.cpp" line="1359" column="1" bodyfile="/home/dev/ds-160209/src/util.cpp" bodystart="1359" bodyend="1362"/>
      </memberdef>
      <memberdef kind="function" id="util_8cpp_1aacea702dc3d4d2bcbbd5eb96d410417c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void seed_insecure_rand</definition>
        <argsstring>(bool fDeterministic)</argsstring>
        <name>seed_insecure_rand</name>
        <param>
          <type>bool</type>
          <declname>fDeterministic</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Seed insecure_rand using the random pool. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>Deterministic</parametername>
</parameternamelist>
<parameterdescription>
<para>Use a determinstic seed </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/util.cpp" line="1366" column="1" bodyfile="/home/dev/ds-160209/src/util.cpp" bodystart="1366" bodyend="1383"/>
        <references refid="util_8cpp_1acf52c2aa8213c7b15e26594a2264ed8a" compoundref="util_8cpp" startline="154" endline="161">GetRandBytes</references>
      </memberdef>
      <memberdef kind="function" id="util_8cpp_1a184f6760badcf145f3430cdf6cc5dfa2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>string</type>
        <definition>string FormatVersion</definition>
        <argsstring>(int nVersion)</argsstring>
        <name>FormatVersion</name>
        <param>
          <type>int</type>
          <declname>nVersion</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/util.cpp" line="1385" column="1" bodyfile="/home/dev/ds-160209/src/util.cpp" bodystart="1385" bodyend="1391"/>
        <references refid="tinyformat_8h_1a56c674871a61baaad36ad52238c08857" compoundref="tinyformat_8h" startline="1011">strprintf</references>
        <referencedby refid="util_8h_1a7e6809cdbfc7f83b46f83caea740894d" compoundref="util_8cpp" startline="1406" endline="1415">FormatSubVersion</referencedby>
      </memberdef>
      <memberdef kind="function" id="util_8cpp_1ac2170cca99e9347171fca492ae533d96" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>string</type>
        <definition>string FormatFullVersion</definition>
        <argsstring>()</argsstring>
        <name>FormatFullVersion</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/util.cpp" line="1393" column="1" bodyfile="/home/dev/ds-160209/src/util.cpp" bodystart="1393" bodyend="1396"/>
        <references refid="version_8h_1a1a5e163cdc615d789b2db896d591230b">CLIENT_BUILD</references>
        <referencedby refid="darksilkd_8cpp_1ac59316b767e6984e1285f0531275286b" compoundref="darksilkd_8cpp" startline="34" endline="140">AppInit</referencedby>
        <referencedby refid="init_8h_1a1a4c1bfbf6ba1db77e988b89b9cadfd3" compoundref="init_8cpp" startline="375" endline="1285">AppInit2</referencedby>
        <referencedby refid="class_client_model_1a1c93d11fd03ef9aabf9b694e73698710" compoundref="clientmodel_8cpp" startline="238" endline="241">ClientModel::formatFullVersion</referencedby>
        <referencedby refid="class_g_u_i_util_1_1_help_message_box_1af8c3ad315224552b1699ac34c7ebd839" compoundref="guiutil_8cpp" startline="425" endline="445">GUIUtil::HelpMessageBox::HelpMessageBox</referencedby>
        <referencedby refid="rpcmisc_8cpp_1a70335b93783d51e48d276a1e08bd721a" compoundref="rpcmisc_8cpp" startline="34" endline="81">getinfo</referencedby>
        <referencedby refid="rpcprotocol_8cpp_1af2d91e7026366657a021311ecc188262" compoundref="rpcprotocol_8cpp" startline="39" endline="54">HTTPPost</referencedby>
        <referencedby refid="rpcprotocol_8cpp_1afa39f57077df4d88ad60373f58d793e1" compoundref="rpcprotocol_8cpp" startline="61" endline="103">HTTPReply</referencedby>
      </memberdef>
      <memberdef kind="function" id="util_8cpp_1a7e6809cdbfc7f83b46f83caea740894d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string FormatSubVersion</definition>
        <argsstring>(const std::string &amp;name, int nClientVersion, const std::vector&lt; std::string &gt; &amp;comments)</argsstring>
        <name>FormatSubVersion</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>name</declname>
        </param>
        <param>
          <type>int</type>
          <declname>nClientVersion</declname>
        </param>
        <param>
          <type>const std::vector&lt; std::string &gt; &amp;</type>
          <declname>comments</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/util.cpp" line="1406" column="1" bodyfile="/home/dev/ds-160209/src/util.cpp" bodystart="1406" bodyend="1415"/>
        <references refid="util_8cpp_1a184f6760badcf145f3430cdf6cc5dfa2" compoundref="util_8cpp" startline="1385" endline="1391">FormatVersion</references>
        <referencedby refid="class_c_alert_1a0a7fab6a971781904afb3e4a0ee29e12" compoundref="alert_8cpp" startline="124" endline="127">CAlert::AppliesToMe</referencedby>
        <referencedby refid="class_c_node_1a4dbfe4f6c1fd162aaa905e4bd201d536" compoundref="net_8cpp" startline="465" endline="475">CNode::PushVersion</referencedby>
        <referencedby refid="rpcnet_8cpp_1a3a10a507386b9bbcc48ebd3004bfe58a" compoundref="rpcnet_8cpp" startline="338" endline="398">getnetworkinfo</referencedby>
      </memberdef>
      <memberdef kind="function" id="util_8cpp_1adf94c00a5ac719c92a2f1bb2f8b2167f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void runCommand</definition>
        <argsstring>(std::string strCommand)</argsstring>
        <name>runCommand</name>
        <param>
          <type>std::string</type>
          <declname>strCommand</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/util.cpp" line="1434" column="1" bodyfile="/home/dev/ds-160209/src/util.cpp" bodystart="1434" bodyend="1439"/>
        <references refid="util_8h_1afc02c0a4258fedfb316be612bb659ba8" compoundref="util_8h" startline="158">LogPrintf</references>
        <referencedby refid="class_c_alert_1af3e6b2e5d3584f58c5d7be9dbd72b4cc" compoundref="alert_8cpp" startline="174" endline="263">CAlert::ProcessAlert</referencedby>
        <referencedby refid="class_c_block_1a6e308b2d75d1cfc4a75eda36feb60ca1" compoundref="main_8cpp" startline="4125" endline="4242">CBlock::SetBestChain</referencedby>
        <referencedby refid="class_c_wallet_1adf34c789fd6eab1eeed22ef16837f558" compoundref="wallet_8cpp" startline="644" endline="761">CWallet::AddToWallet</referencedby>
      </memberdef>
      <memberdef kind="function" id="util_8cpp_1a85fc1244e0bd3c91ee7a1c05ed10ebbb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void RenameThread</definition>
        <argsstring>(const char *name)</argsstring>
        <name>RenameThread</name>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/util.cpp" line="1441" column="1" bodyfile="/home/dev/ds-160209/src/util.cpp" bodystart="1441" bodyend="1463"/>
        <referencedby refid="init_8h_1ac5f038c2b480cf9ef5e19e3eba8dbaf9" compoundref="init_8cpp" startline="130" endline="194">Shutdown</referencedby>
        <referencedby refid="main_8h_1a0189c34248cd89bbbe20d4d6045bd7c9" compoundref="main_8cpp" startline="2294" endline="2317">ThreadImport</referencedby>
        <referencedby refid="miner_8cpp_1a31faece5ef0e403969b3d3debd79b352" compoundref="miner_8cpp" startline="536" endline="591">ThreadStakeMiner</referencedby>
        <referencedby refid="sandstorm_8h_1ac661e702905cd5093cb237555ba5c1c0" compoundref="sandstorm_8cpp" startline="2196" endline="2239">ThreadCheckSandStormPool</referencedby>
        <referencedby refid="util_8h_1ac6be85b683de5d9b41dc3046e50d6acd" compoundref="util_8h" startline="597" endline="621">LoopForever</referencedby>
        <referencedby refid="util_8h_1ac481a378af0229bf71e3d9fee7b938ad" compoundref="util_8h" startline="623" endline="644">TraceThread</referencedby>
        <referencedby refid="walletdb_8cpp_1a571e13707ba159c7c047875764ae5e2b" compoundref="walletdb_8cpp" startline="732" endline="792">ThreadFlushWalletDB</referencedby>
      </memberdef>
      <memberdef kind="function" id="util_8cpp_1a749bc6776c8ec72d7c5e4dea56aee415" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string DateTimeStrFormat</definition>
        <argsstring>(const char *pszFormat, int64_t nTime)</argsstring>
        <name>DateTimeStrFormat</name>
        <param>
          <type>const char *</type>
          <declname>pszFormat</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1adec1df1b8b51cb32b77e5b86fff46471" kindref="member">int64_t</ref></type>
          <declname>nTime</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/util.cpp" line="1465" column="1" bodyfile="/home/dev/ds-160209/src/util.cpp" bodystart="1465" bodyend="1473"/>
        <referencedby refid="chain_8h_1ae282007adebd031cdbfecdd0ad1feeb8" compoundref="chain_8cpp" startline="492" endline="512">InvalidChainFound</referencedby>
        <referencedby refid="init_8h_1a1a4c1bfbf6ba1db77e988b89b9cadfd3" compoundref="init_8cpp" startline="375" endline="1285">AppInit2</referencedby>
        <referencedby refid="kernel_8h_1aa58b095aa0abb6f956cc68169124099a" compoundref="kernel_8cpp" startline="111" endline="189">ComputeNextStakeModifier</referencedby>
        <referencedby refid="kernel_8h_1a92f7a1863b9988c21166341c849e26db" compoundref="kernel_8cpp" startline="227" endline="283">CheckStakeKernelHash</referencedby>
        <referencedby refid="main_8h_1aac88c75e65aa0dee60e4332dbcc16120" compoundref="main_8cpp" startline="2146" endline="2217">PrintBlockTree</referencedby>
        <referencedby refid="class_c_block_1a6e308b2d75d1cfc4a75eda36feb60ca1" compoundref="main_8cpp" startline="4125" endline="4242">CBlock::SetBestChain</referencedby>
        <referencedby refid="class_c_node_1ae0def1498409407d1612833a7d38c875" compoundref="net_8h" startline="503" endline="520">CNode::AskFor</referencedby>
        <referencedby refid="rpcblockchain_8cpp_1a18e0cd566c85cd589c2d687fa06d77e7" compoundref="rpcblockchain_8cpp" startline="276" endline="293">getcheckpoint</referencedby>
        <referencedby refid="util_8h_1a5d620750c7cb9c95ce815e3dd036e134" compoundref="util_8h" startline="398" endline="401">DateTimeStrFormat</referencedby>
        <referencedby refid="class_c_tx_d_b_1abcb9df0821d996f811f6604b452a26a0" compoundref="txdb-leveldb_8cpp" startline="337" endline="581">CTxDB::LoadBlockIndex</referencedby>
        <referencedby refid="util_8h_1afd4c3002b2797c0560adddb6af3ca1da" compoundref="util_8cpp" startline="280" endline="318">LogPrintStr</referencedby>
      </memberdef>
      <memberdef kind="function" id="util_8cpp_1acb8d6b822bc1bfa609bf43bbac1a0d44" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool TruncateFile</definition>
        <argsstring>(FILE *file, unsigned int length)</argsstring>
        <name>TruncateFile</name>
        <param>
          <type>FILE *</type>
          <declname>file</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>length</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/util.cpp" line="1475" column="1" bodyfile="/home/dev/ds-160209/src/util.cpp" bodystart="1475" bodyend="1481"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">//<sp/>Copyright<sp/>(c)<sp/>2009-2016<sp/>Satoshi<sp/>Nakamoto</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Copyright<sp/>(c)<sp/>2009-2016<sp/>The<sp/>Bitcoin<sp/>Developers</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Copyright<sp/>(c)<sp/>2015-2016<sp/>Silk<sp/>Network</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Distributed<sp/>under<sp/>the<sp/>MIT/X11<sp/>software<sp/>license,<sp/>see<sp/>the<sp/>accompanying</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="comment">//<sp/>file<sp/>COPYING<sp/>or<sp/>http://www.opensource.org/licenses/mit-license.php.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="util_8h" kindref="compound">util.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="amount_8h" kindref="compound">amount.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="chainparams_8h" kindref="compound">chainparams.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="sync_8h" kindref="compound">sync.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="ui__interface_8h" kindref="compound">ui_interface.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="uint256_8h" kindref="compound">uint256.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="version_8h" kindref="compound">version.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="netbase_8h" kindref="compound">netbase.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="allocators_8h" kindref="compound">allocators.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;algorithm&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;boost/date_time/posix_time/posix_time.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;boost/algorithm/string/case_conv.hpp&gt;</highlight><highlight class="normal"><sp/></highlight><highlight class="comment">//<sp/>for<sp/>to_lower()</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;boost/algorithm/string/join.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;boost/algorithm/string/predicate.hpp&gt;</highlight><highlight class="normal"><sp/></highlight><highlight class="comment">//<sp/>for<sp/>startswith()<sp/>and<sp/>endswith()</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Work<sp/>around<sp/>clang<sp/>compilation<sp/>problem<sp/>in<sp/>Boost<sp/>1.46:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="comment">//<sp/>/usr/include/boost/program_options/detail/config_file.hpp:163:17:<sp/>error:<sp/>call<sp/>to<sp/>function<sp/>&apos;to_internal&apos;<sp/>that<sp/>is<sp/>neither<sp/>visible<sp/>in<sp/>the<sp/>template<sp/>definition<sp/>nor<sp/>found<sp/>by<sp/>argument-dependent<sp/>lookup</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="comment">//<sp/>See<sp/>also:<sp/>http://stackoverflow.com/questions/10020179/compilation-fail-in-boost-librairies-program-options</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>http://clang.debian.net/status.php?version=3.0&amp;key=CANNOT_FIND_FUNCTION</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespaceboost" kindref="compound">boost</ref><sp/>{</highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight></codeline>
<codeline lineno="31" refid="namespaceboost_1_1program__options" refkind="compound"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">program_options<sp/>{</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/><ref refid="namespaceboost_1_1program__options_1a62ea8cef2a8959ba5d6220b5b61a5dcb" kindref="member">to_internal</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;);</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>boost</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;boost/program_options/detail/config_file.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;boost/program_options/parsers.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;boost/filesystem.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;boost/filesystem/fstream.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;boost/foreach.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;boost/thread.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;openssl/crypto.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;openssl/rand.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;openssl/err.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdarg.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>WIN32</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>_MSC_VER</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight><highlight class="preprocessor">#pragma<sp/>warning(disable:4786)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight><highlight class="preprocessor">#pragma<sp/>warning(disable:4804)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight><highlight class="preprocessor">#pragma<sp/>warning(disable:4805)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight><highlight class="preprocessor">#pragma<sp/>warning(disable:4717)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>_WIN32_WINNT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight><highlight class="preprocessor">#undef<sp/>_WIN32_WINNT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>_WIN32_WINNT<sp/>0x0501</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>_WIN32_IE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight><highlight class="preprocessor">#undef<sp/>_WIN32_IE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>_WIN32_IE<sp/>0x0501</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>WIN32_LEAN_AND_MEAN<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>NOMINMAX</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NOMINMAX</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;io.h&gt;</highlight><highlight class="normal"><sp/></highlight><highlight class="comment">/*<sp/>for<sp/>_commit<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="68"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;shlobj.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="69"><highlight class="normal"></highlight><highlight class="preprocessor">#elif<sp/>defined(__linux__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="70"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>include<sp/>&lt;sys/prctl.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="71"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="72"><highlight class="normal"></highlight></codeline>
<codeline lineno="73"><highlight class="normal"></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal"><ref refid="namespacestd" kindref="compound">std</ref>;</highlight></codeline>
<codeline lineno="74"><highlight class="normal"></highlight></codeline>
<codeline lineno="75"><highlight class="normal"></highlight><highlight class="comment">//Dark<sp/><sp/>features</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="76" refid="util_8h_1a9a7204234b904bf6a0374facf8477796" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="util_8cpp_1a9a7204234b904bf6a0374facf8477796" kindref="member">fStormNode</ref><sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="77" refid="util_8cpp_1a577451f5342ffce98b2dacb94063c678" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/><ref refid="util_8cpp_1a577451f5342ffce98b2dacb94063c678" kindref="member">strStormNodePrivKey</ref><sp/>=<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="78" refid="util_8h_1a0143873cb7d76647f41ff47afe5a2255" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/><ref refid="util_8cpp_1a54b81bb7643acf8ec4ab91fdea98c16f" kindref="member">strStormNodeAddr</ref><sp/>=<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="79" refid="util_8h_1aa2216c761101b28e38757c5cffea3dc5" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="util_8cpp_1aa2216c761101b28e38757c5cffea3dc5" kindref="member">fLiteMode</ref><sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="80" refid="util_8h_1acb212e467afc6516452e15829eeb58d5" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="util_8cpp_1acb212e467afc6516452e15829eeb58d5" kindref="member">fEnableInstantX</ref><sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="81" refid="util_8h_1aaebdfd83d8252d435dfa61f10e7b86e6" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="util_8cpp_1aaebdfd83d8252d435dfa61f10e7b86e6" kindref="member">nInstantXDepth</ref><sp/>=<sp/>10;</highlight></codeline>
<codeline lineno="82" refid="util_8h_1a86ef86d561556a8f20848404f267e286" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="util_8cpp_1a86ef86d561556a8f20848404f267e286" kindref="member">nSandstormRounds</ref><sp/>=<sp/>2;</highlight></codeline>
<codeline lineno="83" refid="util_8h_1a8726b2c37267fdeae9fee074106be65b" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="util_8cpp_1a8726b2c37267fdeae9fee074106be65b" kindref="member">nAnonymizeDarkSilkAmount</ref><sp/>=<sp/>1000;</highlight></codeline>
<codeline lineno="84" refid="util_8h_1a307df0d2e6f7c42eace3d972d4b3f845" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="util_8cpp_1a307df0d2e6f7c42eace3d972d4b3f845" kindref="member">nLiquidityProvider</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="86" refid="util_8h_1aef1290adaaac08bd8da8b458c869554f" refkind="member"><highlight class="normal"><ref refid="stdint_8h_1adec1df1b8b51cb32b77e5b86fff46471" kindref="member">int64_t</ref><sp/><ref refid="util_8cpp_1aef1290adaaac08bd8da8b458c869554f" kindref="member">enforceStormnodePaymentsTime</ref><sp/>=<sp/>4085657524;</highlight></codeline>
<codeline lineno="87" refid="util_8h_1a87d1153c97b6c99fdad9a30af07fed6e" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="util_8cpp_1a87d1153c97b6c99fdad9a30af07fed6e" kindref="member">nStormnodeMinProtocol</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="88" refid="util_8h_1ad5b9f1681377dd7cf6753df60c19f96e" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="util_8cpp_1ad5b9f1681377dd7cf6753df60c19f96e" kindref="member">fSucessfullyLoaded</ref><sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="89" refid="util_8h_1a79b2665bd3b764626eddad91b0bfe954" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="util_8cpp_1a79b2665bd3b764626eddad91b0bfe954" kindref="member">fEnableSandstorm</ref><sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="91" refid="util_8h_1a33994dff9c5a89fb40154e891eaae044" refkind="member"><highlight class="normal">std::vector&lt;CAmount&gt;<sp/><ref refid="util_8cpp_1a33994dff9c5a89fb40154e891eaae044" kindref="member">sandStormDenominations</ref>;</highlight></codeline>
<codeline lineno="92" refid="util_8h_1aa6e1d8c03f1d46e89708f9c282181c47" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="util_8cpp_1aa6e1d8c03f1d46e89708f9c282181c47" kindref="member">fSandstormMultiSession</ref><sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="93"><highlight class="normal"></highlight></codeline>
<codeline lineno="94" refid="util_8h_1ac6e877d09800ef2f6ed5b4ddee4a202c" refkind="member"><highlight class="normal">map&lt;string,<sp/>string&gt;<sp/><ref refid="util_8cpp_1a0502b74b88db99500ee21dcb446311e5" kindref="member">mapArgs</ref>;</highlight></codeline>
<codeline lineno="95" refid="util_8h_1ad1aaac805f4fdc2da7dddf5aafaa8bac" refkind="member"><highlight class="normal">map&lt;string,<sp/>vector&lt;string&gt;<sp/>&gt;<sp/><ref refid="util_8cpp_1a34d23466f937db99d45620bc7ea5d2fb" kindref="member">mapMultiArgs</ref>;</highlight></codeline>
<codeline lineno="96" refid="util_8h_1a2ba7badc843121dde40a6f109d224a42" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="util_8cpp_1a2ba7badc843121dde40a6f109d224a42" kindref="member">fDebug</ref><sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="97" refid="util_8h_1aebbe7fc2f3e1ae3d840076985c9214fa" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="util_8cpp_1aebbe7fc2f3e1ae3d840076985c9214fa" kindref="member">fDebugSmsg</ref><sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="98" refid="util_8h_1a49ade2b91028ff037557259b0729b049" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="util_8cpp_1a49ade2b91028ff037557259b0729b049" kindref="member">fNoSmsg</ref><sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="99" refid="util_8h_1a9d6b03a0dcc515a84e620794e64b9547" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="util_8cpp_1a9d6b03a0dcc515a84e620794e64b9547" kindref="member">fPrintToConsole</ref><sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="100" refid="util_8h_1ae1c7830d95f75ba35fbc6bfa50509913" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="util_8cpp_1ae1c7830d95f75ba35fbc6bfa50509913" kindref="member">fPrintToDebugLog</ref><sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="101" refid="util_8cpp_1a5df2572fe4f34c55eef6c97762097f6f" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="util_8cpp_1a5df2572fe4f34c55eef6c97762097f6f" kindref="member">fDaemon</ref><sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="102" refid="util_8h_1a2839c7c01ad9d90fbd3ce55d32b50c6f" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="util_8cpp_1a2839c7c01ad9d90fbd3ce55d32b50c6f" kindref="member">fServer</ref><sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="103" refid="util_8h_1a71f0a1c395c717d77bdf878cb6ced96e" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="util_8cpp_1a71f0a1c395c717d77bdf878cb6ced96e" kindref="member">fCommandLine</ref><sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="104" refid="util_8h_1a41393eb45547527ac7cdaede34ab701e" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/><ref refid="util_8cpp_1a396fd0b4e52260e1ddf379fa6e09d887" kindref="member">strMiscWarning</ref>;</highlight></codeline>
<codeline lineno="105" refid="util_8h_1a53f30a9fc322fa65a5c4e3732e4ad410" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="util_8cpp_1a53f30a9fc322fa65a5c4e3732e4ad410" kindref="member">fNoListen</ref><sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="106" refid="util_8h_1aa5e7caf6936a9a94eb088f04bcc62b97" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="util_8cpp_1aa5e7caf6936a9a94eb088f04bcc62b97" kindref="member">fLogTimestamps</ref><sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="107" refid="util_8h_1aad5e5c200c78bd5bdec18c8707e63822" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="util_8cpp_1aad5e5c200c78bd5bdec18c8707e63822" kindref="member">fReopenDebugLog</ref><sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="108" refid="util_8h_1a4f8e018a639d7a5acd7275b15ff66bfa" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/><ref refid="util_8cpp_1aade01c058f2409dc8dc1f20c87370a43" kindref="member">strBudgetMode</ref><sp/>=<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="109"><highlight class="normal"></highlight></codeline>
<codeline lineno="110"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Init<sp/>OpenSSL<sp/>library<sp/>multithreading<sp/>support</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="111"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="class_annotated_mixin" kindref="compound">CCriticalSection</ref>**<sp/>ppmutexOpenSSL;</highlight></codeline>
<codeline lineno="112" refid="util_8cpp_1a2dcf58b384f55190242d4b0e3b1c0b39" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="util_8cpp_1a2dcf58b384f55190242d4b0e3b1c0b39" kindref="member">locking_callback</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>mode,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>file,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>line)</highlight></codeline>
<codeline lineno="113"><highlight class="normal">{</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mode<sp/>&amp;<sp/>CRYPTO_LOCK)<sp/>{</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="sync_8h_1a1262d24e5b9a4fa0a1adc4de02958efb" kindref="member">ENTER_CRITICAL_SECTION</ref>(*ppmutexOpenSSL[i]);</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="sync_8h_1a2b89bac48633dc1532691f1106a55f6c" kindref="member">LEAVE_CRITICAL_SECTION</ref>(*ppmutexOpenSSL[i]);</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="119"><highlight class="normal">}</highlight></codeline>
<codeline lineno="120"><highlight class="normal"></highlight></codeline>
<codeline lineno="121"><highlight class="normal"><ref refid="class_locked_page_manager" kindref="compound">LockedPageManager</ref><sp/><ref refid="class_locked_page_manager_1aedd82df65c12c1d83d43ac8500c57fcf" kindref="member">LockedPageManager::instance</ref>;</highlight></codeline>
<codeline lineno="122"><highlight class="normal"></highlight></codeline>
<codeline lineno="123"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Init</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="124" refid="class_c_init" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="class_c_init" kindref="compound">CInit</ref></highlight></codeline>
<codeline lineno="125"><highlight class="normal">{</highlight></codeline>
<codeline lineno="126"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="127" refid="class_c_init_1a4be18861132e828f5f0101880d04b706" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_c_init_1a4be18861132e828f5f0101880d04b706" kindref="member">CInit</ref>()</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Init<sp/>OpenSSL<sp/>library<sp/>multithreading<sp/>support</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ppmutexOpenSSL<sp/>=<sp/>(<ref refid="class_annotated_mixin" kindref="compound">CCriticalSection</ref>**)OPENSSL_malloc(CRYPTO_num_locks()<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="class_annotated_mixin" kindref="compound">CCriticalSection</ref>*));</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>CRYPTO_num_locks();<sp/>i++)</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ppmutexOpenSSL[i]<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="sync_8h_1a37a4692b2d517f2843655ca11af7668a" kindref="member">CCriticalSection</ref>();</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CRYPTO_set_locking_callback(<ref refid="util_8cpp_1a2dcf58b384f55190242d4b0e3b1c0b39" kindref="member">locking_callback</ref>);</highlight></codeline>
<codeline lineno="134"><highlight class="normal"></highlight></codeline>
<codeline lineno="135"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>WIN32</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Seed<sp/>OpenSSL<sp/>PRNG<sp/>with<sp/>current<sp/>contents<sp/>of<sp/>the<sp/>screen</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>RAND_screen();</highlight></codeline>
<codeline lineno="138"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="139"><highlight class="normal"></highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Seed<sp/>OpenSSL<sp/>PRNG<sp/>with<sp/>performance<sp/>counter</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="util_8cpp_1ab699fbdf803610a4e2060fd87787f7e0" kindref="member">RandAddSeed</ref>();</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="143" refid="class_c_init_1aa3e8928241211e08a42749f4f49a9c3e" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_c_init_1aa3e8928241211e08a42749f4f49a9c3e" kindref="member">~CInit</ref>()</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Shutdown<sp/>OpenSSL<sp/>library<sp/>multithreading<sp/>support</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CRYPTO_set_locking_callback(NULL);</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>CRYPTO_num_locks();<sp/>i++)</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>ppmutexOpenSSL[i];</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>OPENSSL_free(ppmutexOpenSSL);</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="151"><highlight class="normal">}</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><ref refid="util_8cpp_1a510877804e96f753028e87b2359258c2" kindref="member">instance_of_cinit</ref>;</highlight></codeline>
<codeline lineno="153"><highlight class="normal"></highlight></codeline>
<codeline lineno="154" refid="util_8h_1acf52c2aa8213c7b15e26594a2264ed8a" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="util_8cpp_1acf52c2aa8213c7b15e26594a2264ed8a" kindref="member">GetRandBytes</ref>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*buf,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>num)</highlight></codeline>
<codeline lineno="155"><highlight class="normal">{</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(RAND_bytes(buf,<sp/>num)<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>LogPrint(</highlight><highlight class="stringliteral">&quot;rand&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;%s<sp/>:<sp/>OpenSSL<sp/>RAND_bytes()<sp/>failed<sp/>with<sp/>error:<sp/>%s\n&quot;</highlight><highlight class="normal">,<sp/>__func__,<sp/>ERR_error_string(ERR_get_error(),<sp/>NULL));</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="161"><highlight class="normal">}</highlight></codeline>
<codeline lineno="162"><highlight class="normal"></highlight></codeline>
<codeline lineno="163" refid="util_8h_1ab699fbdf803610a4e2060fd87787f7e0" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="util_8cpp_1ab699fbdf803610a4e2060fd87787f7e0" kindref="member">RandAddSeed</ref>()</highlight></codeline>
<codeline lineno="164"><highlight class="normal">{</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Seed<sp/>with<sp/>CPU<sp/>performance<sp/>counter</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="stdint_8h_1adec1df1b8b51cb32b77e5b86fff46471" kindref="member">int64_t</ref><sp/>nCounter<sp/>=<sp/><ref refid="util_8h_1acd4d9988b9bb3f31fddf72a34b2bc37f" kindref="member">GetPerformanceCounter</ref>();</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/>RAND_add(&amp;nCounter,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(nCounter),<sp/>1.5);</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/><sp/>memset(&amp;nCounter,<sp/>0,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(nCounter));</highlight></codeline>
<codeline lineno="169"><highlight class="normal">}</highlight></codeline>
<codeline lineno="170"><highlight class="normal"></highlight></codeline>
<codeline lineno="171" refid="util_8h_1a786af12a87491f8dc24351d93b9833b6" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="util_8cpp_1a786af12a87491f8dc24351d93b9833b6" kindref="member">RandAddSeedPerfmon</ref>()</highlight></codeline>
<codeline lineno="172"><highlight class="normal">{</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="util_8cpp_1ab699fbdf803610a4e2060fd87787f7e0" kindref="member">RandAddSeed</ref>();</highlight></codeline>
<codeline lineno="174"><highlight class="normal"></highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>This<sp/>can<sp/>take<sp/>up<sp/>to<sp/>2<sp/>seconds,<sp/>so<sp/>only<sp/>do<sp/>it<sp/>every<sp/>10<sp/>minutes</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="stdint_8h_1adec1df1b8b51cb32b77e5b86fff46471" kindref="member">int64_t</ref><sp/>nLastPerfmon;</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="util_8cpp_1a46fac5fba8ba905b5f9acb364f5d8c6f" kindref="member">GetTime</ref>()<sp/>&lt;<sp/>nLastPerfmon<sp/>+<sp/>10<sp/>*<sp/>60)</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/><sp/><sp/>nLastPerfmon<sp/>=<sp/><ref refid="util_8cpp_1a46fac5fba8ba905b5f9acb364f5d8c6f" kindref="member">GetTime</ref>();</highlight></codeline>
<codeline lineno="180"><highlight class="normal"></highlight></codeline>
<codeline lineno="181"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>WIN32</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Don&apos;t<sp/>need<sp/>this<sp/>on<sp/>Linux,<sp/>OpenSSL<sp/>automatically<sp/>uses<sp/>/dev/urandom</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Seed<sp/>with<sp/>the<sp/>entire<sp/>set<sp/>of<sp/>perfmon<sp/>data</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>pdata[250000];</highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><sp/><sp/>memset(pdata,<sp/>0,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(pdata));</highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>nSize<sp/>=<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(pdata);</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>ret<sp/>=<sp/>RegQueryValueExA(HKEY_PERFORMANCE_DATA,<sp/></highlight><highlight class="stringliteral">&quot;Global&quot;</highlight><highlight class="normal">,<sp/>NULL,<sp/>NULL,<sp/>pdata,<sp/>&amp;nSize);</highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><sp/><sp/>RegCloseKey(HKEY_PERFORMANCE_DATA);</highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ret<sp/>==<sp/>ERROR_SUCCESS)</highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>RAND_add(pdata,<sp/>nSize,<sp/>nSize/100.0);</highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>OPENSSL_cleanse(pdata,<sp/>nSize);</highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>LogPrint(</highlight><highlight class="stringliteral">&quot;rand&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;RandAddSeed()<sp/>%lu<sp/>bytes\n&quot;</highlight><highlight class="normal">,<sp/>nSize);</highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="195"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="196"><highlight class="normal">}</highlight></codeline>
<codeline lineno="197"><highlight class="normal"></highlight></codeline>
<codeline lineno="198" refid="util_8h_1a27d9149d522b1fa87d84e5e9ca902aef" refkind="member"><highlight class="normal"><ref refid="stdint_8h_1aaa5d1cd013383c889537491c3cfd9aad" kindref="member">uint64_t</ref><sp/><ref refid="util_8cpp_1a27d9149d522b1fa87d84e5e9ca902aef" kindref="member">GetRand</ref>(<ref refid="stdint_8h_1aaa5d1cd013383c889537491c3cfd9aad" kindref="member">uint64_t</ref><sp/>nMax)</highlight></codeline>
<codeline lineno="199"><highlight class="normal">{</highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(nMax<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="202"><highlight class="normal"></highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>range<sp/>of<sp/>the<sp/>random<sp/>source<sp/>must<sp/>be<sp/>a<sp/>multiple<sp/>of<sp/>the<sp/>modulus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>to<sp/>give<sp/>every<sp/>possible<sp/>output<sp/>value<sp/>an<sp/>equal<sp/>possibility</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="stdint_8h_1aaa5d1cd013383c889537491c3cfd9aad" kindref="member">uint64_t</ref><sp/>nRange<sp/>=<sp/>(std::numeric_limits&lt;uint64_t&gt;::max()<sp/>/<sp/>nMax)<sp/>*<sp/>nMax;</highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="stdint_8h_1aaa5d1cd013383c889537491c3cfd9aad" kindref="member">uint64_t</ref><sp/>nRand<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">do</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="util_8cpp_1acf52c2aa8213c7b15e26594a2264ed8a" kindref="member">GetRandBytes</ref>((</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*)&amp;nRand,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(nRand));</highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(nRand<sp/>&gt;=<sp/>nRange);;</highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(nRand<sp/>%<sp/>nMax);</highlight></codeline>
<codeline lineno="211"><highlight class="normal">}</highlight></codeline>
<codeline lineno="212"><highlight class="normal"></highlight></codeline>
<codeline lineno="213" refid="util_8h_1a0e44e088732172da6662db2d5e37d4b2" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="util_8cpp_1a0e44e088732172da6662db2d5e37d4b2" kindref="member">GetRandInt</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nMax)</highlight></codeline>
<codeline lineno="214"><highlight class="normal">{</highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="util_8cpp_1a27d9149d522b1fa87d84e5e9ca902aef" kindref="member">GetRand</ref>(nMax);</highlight></codeline>
<codeline lineno="216"><highlight class="normal">}</highlight></codeline>
<codeline lineno="217"><highlight class="normal"></highlight></codeline>
<codeline lineno="218" refid="util_8h_1af3aedae75efabb170337a497457f7ecf" refkind="member"><highlight class="normal"><ref refid="classuint256" kindref="compound">uint256</ref><sp/><ref refid="util_8cpp_1af3aedae75efabb170337a497457f7ecf" kindref="member">GetRandHash</ref>()</highlight></codeline>
<codeline lineno="219"><highlight class="normal">{</highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classuint256" kindref="compound">uint256</ref><sp/><ref refid="cache_8cc_1a11ecb029164e055f28f4123ce3748862" kindref="member">hash</ref>;</highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="util_8cpp_1acf52c2aa8213c7b15e26594a2264ed8a" kindref="member">GetRandBytes</ref>((</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*)&amp;hash,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(hash));</highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="cache_8cc_1a11ecb029164e055f28f4123ce3748862" kindref="member">hash</ref>;</highlight></codeline>
<codeline lineno="223"><highlight class="normal">}</highlight></codeline>
<codeline lineno="224"><highlight class="normal"></highlight></codeline>
<codeline lineno="225"><highlight class="normal"></highlight><highlight class="comment">//<sp/>LogPrintf()<sp/>has<sp/>been<sp/>broken<sp/>a<sp/>couple<sp/>of<sp/>times<sp/>now</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="226"><highlight class="normal"></highlight><highlight class="comment">//<sp/>by<sp/>well-meaning<sp/>people<sp/>adding<sp/>mutexes<sp/>in<sp/>the<sp/>most<sp/>straightforward<sp/>way.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="227"><highlight class="normal"></highlight><highlight class="comment">//<sp/>It<sp/>breaks<sp/>because<sp/>it<sp/>may<sp/>be<sp/>called<sp/>by<sp/>global<sp/>destructors<sp/>during<sp/>shutdown.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="228"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Since<sp/>the<sp/>order<sp/>of<sp/>destruction<sp/>of<sp/>static/global<sp/>objects<sp/>is<sp/>undefined,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="229"><highlight class="normal"></highlight><highlight class="comment">//<sp/>defining<sp/>a<sp/>mutex<sp/>as<sp/>a<sp/>global<sp/>object<sp/>doesn&apos;t<sp/>work<sp/>(the<sp/>mutex<sp/>gets</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="230"><highlight class="normal"></highlight><highlight class="comment">//<sp/>destroyed,<sp/>and<sp/>then<sp/>some<sp/>later<sp/>destructor<sp/>calls<sp/>OutputDebugStringF,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="231"><highlight class="normal"></highlight><highlight class="comment">//<sp/>maybe<sp/>indirectly,<sp/>and<sp/>you<sp/>get<sp/>a<sp/>core<sp/>dump<sp/>at<sp/>shutdown<sp/>trying<sp/>to<sp/>lock</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="232"><highlight class="normal"></highlight><highlight class="comment">//<sp/>the<sp/>mutex).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="233"><highlight class="normal"></highlight></codeline>
<codeline lineno="234"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>boost::once_flag<sp/>debugPrintInitFlag<sp/>=<sp/>BOOST_ONCE_INIT;</highlight></codeline>
<codeline lineno="235"><highlight class="normal"></highlight><highlight class="comment">//<sp/>We<sp/>use<sp/>boost::call_once()<sp/>to<sp/>make<sp/>sure<sp/>these<sp/>are<sp/>initialized<sp/>in</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="236"><highlight class="normal"></highlight><highlight class="comment">//<sp/>in<sp/>a<sp/>thread-safe<sp/>manner<sp/>the<sp/>first<sp/>time<sp/>it<sp/>is<sp/>called:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="237"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>FILE*<sp/>fileout<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="238"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>boost::mutex*<sp/>mutexDebugLog<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="239"><highlight class="normal"></highlight></codeline>
<codeline lineno="240"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>DebugPrintInit()</highlight></codeline>
<codeline lineno="241"><highlight class="normal">{</highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(fileout<sp/>==<sp/>NULL);</highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(mutexDebugLog<sp/>==<sp/>NULL);</highlight></codeline>
<codeline lineno="244"><highlight class="normal"></highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/><sp/><sp/>boost::filesystem::path<sp/>pathDebug<sp/>=<sp/><ref refid="util_8cpp_1ab83866a054745d4b30a3948a1b44beba" kindref="member">GetDataDir</ref>()<sp/>/<sp/></highlight><highlight class="stringliteral">&quot;debug.log&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/><sp/><sp/>fileout<sp/>=<sp/>fopen(pathDebug.string().c_str(),<sp/></highlight><highlight class="stringliteral">&quot;a&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fileout)<sp/>setbuf(fileout,<sp/>NULL);<sp/></highlight><highlight class="comment">//<sp/>unbuffered</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="248"><highlight class="normal"></highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/><sp/><sp/>mutexDebugLog<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>boost::mutex();</highlight></codeline>
<codeline lineno="250"><highlight class="normal">}</highlight></codeline>
<codeline lineno="251"><highlight class="normal"></highlight></codeline>
<codeline lineno="252" refid="util_8h_1a343d2a13efe00125f78d25dafb0a8d98" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="util_8cpp_1a343d2a13efe00125f78d25dafb0a8d98" kindref="member">LogAcceptCategory</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>category)</highlight></codeline>
<codeline lineno="253"><highlight class="normal">{</highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(category<sp/>!=<sp/>NULL)</highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="util_8cpp_1a2ba7badc843121dde40a6f109d224a42" kindref="member">fDebug</ref>)</highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="258"><highlight class="normal"></highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Give<sp/>each<sp/>thread<sp/>quick<sp/>access<sp/>to<sp/>-debug<sp/>settings.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>This<sp/>helps<sp/>prevent<sp/>issues<sp/>debugging<sp/>global<sp/>destructors,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>where<sp/>mapMultiArgs<sp/>might<sp/>be<sp/>deleted<sp/>before<sp/>another</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>global<sp/>destructor<sp/>calls<sp/>LogPrint()</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>boost::thread_specific_ptr&lt;set&lt;string&gt;<sp/>&gt;<sp/>ptrCategory;</highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ptrCategory.get()<sp/>==<sp/>NULL)</highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>vector&lt;string&gt;&amp;<sp/>categories<sp/>=<sp/><ref refid="util_8cpp_1a34d23466f937db99d45620bc7ea5d2fb" kindref="member">mapMultiArgs</ref>[</highlight><highlight class="stringliteral">&quot;-debug&quot;</highlight><highlight class="normal">];</highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ptrCategory.reset(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>set&lt;string&gt;(categories.begin(),<sp/>categories.end()));</highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>thread_specific_ptr<sp/>automatically<sp/>deletes<sp/>the<sp/>set<sp/>when<sp/>the<sp/>thread<sp/>ends.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>set&lt;string&gt;&amp;<sp/>setCategories<sp/>=<sp/>*ptrCategory.get();</highlight></codeline>
<codeline lineno="271"><highlight class="normal"></highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>if<sp/>not<sp/>debugging<sp/>everything<sp/>and<sp/>not<sp/>debugging<sp/>specific<sp/>category,<sp/>LogPrint<sp/>does<sp/>nothing.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(setCategories.count(</highlight><highlight class="keywordtype">string</highlight><highlight class="normal">(</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">))<sp/>==<sp/>0<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>setCategories.count(</highlight><highlight class="keywordtype">string</highlight><highlight class="normal">(category))<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="278"><highlight class="normal">}</highlight></codeline>
<codeline lineno="279"><highlight class="normal"></highlight></codeline>
<codeline lineno="280" refid="util_8h_1afd4c3002b2797c0560adddb6af3ca1da" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="util_8cpp_1afd4c3002b2797c0560adddb6af3ca1da" kindref="member">LogPrintStr</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;str)</highlight></codeline>
<codeline lineno="281"><highlight class="normal">{</highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ret<sp/>=<sp/>0;<sp/></highlight><highlight class="comment">//<sp/>Returns<sp/>total<sp/>number<sp/>of<sp/>characters<sp/>written</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="util_8cpp_1a9d6b03a0dcc515a84e620794e64b9547" kindref="member">fPrintToConsole</ref>)</highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>print<sp/>to<sp/>console</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ret<sp/>=<sp/>fwrite(str.data(),<sp/>1,<sp/>str.size(),<sp/>stdout);</highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="util_8cpp_1ae1c7830d95f75ba35fbc6bfa50509913" kindref="member">fPrintToDebugLog</ref>)</highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>fStartedNewLine<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>boost::call_once(&amp;DebugPrintInit,<sp/>debugPrintInitFlag);</highlight></codeline>
<codeline lineno="292"><highlight class="normal"></highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fileout<sp/>==<sp/>NULL)</highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ret;</highlight></codeline>
<codeline lineno="295"><highlight class="normal"></highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>boost::mutex::scoped_lock<sp/>scoped_lock(*mutexDebugLog);</highlight></codeline>
<codeline lineno="297"><highlight class="normal"></highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>reopen<sp/>the<sp/>log<sp/>file,<sp/>if<sp/>requested</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="299"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="util_8cpp_1aad5e5c200c78bd5bdec18c8707e63822" kindref="member">fReopenDebugLog</ref>)<sp/>{</highlight></codeline>
<codeline lineno="300"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="util_8cpp_1aad5e5c200c78bd5bdec18c8707e63822" kindref="member">fReopenDebugLog</ref><sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="301"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>boost::filesystem::path<sp/>pathDebug<sp/>=<sp/><ref refid="util_8cpp_1ab83866a054745d4b30a3948a1b44beba" kindref="member">GetDataDir</ref>()<sp/>/<sp/></highlight><highlight class="stringliteral">&quot;debug.log&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="302"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(freopen(pathDebug.string().c_str(),</highlight><highlight class="stringliteral">&quot;a&quot;</highlight><highlight class="normal">,fileout)<sp/>!=<sp/>NULL)</highlight></codeline>
<codeline lineno="303"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>setbuf(fileout,<sp/>NULL);<sp/></highlight><highlight class="comment">//<sp/>unbuffered</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="305"><highlight class="normal"></highlight></codeline>
<codeline lineno="306"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Debug<sp/>print<sp/>useful<sp/>for<sp/>profiling</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="util_8cpp_1aa5e7caf6936a9a94eb088f04bcc62b97" kindref="member">fLogTimestamps</ref><sp/>&amp;&amp;<sp/>fStartedNewLine)</highlight></codeline>
<codeline lineno="308"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ret<sp/>+=<sp/>fprintf(fileout,<sp/></highlight><highlight class="stringliteral">&quot;%s<sp/>&quot;</highlight><highlight class="normal">,<sp/><ref refid="util_8cpp_1a749bc6776c8ec72d7c5e4dea56aee415" kindref="member">DateTimeStrFormat</ref>(</highlight><highlight class="stringliteral">&quot;%Y-%m-%d<sp/>%H:%M:%S&quot;</highlight><highlight class="normal">,<sp/><ref refid="util_8cpp_1a46fac5fba8ba905b5f9acb364f5d8c6f" kindref="member">GetTime</ref>()).c_str());</highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!str.empty()<sp/>&amp;&amp;<sp/>str[str.size()-1]<sp/>==<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fStartedNewLine<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fStartedNewLine<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="313"><highlight class="normal"></highlight></codeline>
<codeline lineno="314"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ret<sp/>=<sp/>fwrite(str.data(),<sp/>1,<sp/>str.size(),<sp/>fileout);</highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="316"><highlight class="normal"></highlight></codeline>
<codeline lineno="317"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ret;</highlight></codeline>
<codeline lineno="318"><highlight class="normal">}</highlight></codeline>
<codeline lineno="319"><highlight class="normal"></highlight></codeline>
<codeline lineno="320" refid="util_8cpp_1a402d4994067a2c1d88d5740afa45cf8f" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="util_8cpp_1a402d4994067a2c1d88d5740afa45cf8f" kindref="member">ParseString</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal">&amp;<sp/>str,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>c,<sp/>vector&lt;string&gt;&amp;<sp/>v)</highlight></codeline>
<codeline lineno="321"><highlight class="normal">{</highlight></codeline>
<codeline lineno="322"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(str.empty())</highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="324"><highlight class="normal"><sp/><sp/><sp/><sp/>string::size_type<sp/>i1<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="325"><highlight class="normal"><sp/><sp/><sp/><sp/>string::size_type<sp/>i2;</highlight></codeline>
<codeline lineno="326"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">true</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="327"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="328"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>i2<sp/>=<sp/>str.find(c,<sp/>i1);</highlight></codeline>
<codeline lineno="329"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(i2<sp/>==<sp/>str.npos)</highlight></codeline>
<codeline lineno="330"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="331"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>v.push_back(str.substr(i1));</highlight></codeline>
<codeline lineno="332"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="333"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="334"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>v.push_back(str.substr(i1,<sp/>i2-i1));</highlight></codeline>
<codeline lineno="335"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>i1<sp/>=<sp/>i2+1;</highlight></codeline>
<codeline lineno="336"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="337"><highlight class="normal">}</highlight></codeline>
<codeline lineno="338"><highlight class="normal"></highlight></codeline>
<codeline lineno="339" refid="util_8h_1a9b8dfe28f5d12bf84ab1f179606f338b" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/><ref refid="util_8cpp_1a72fc7ee9c182de0580a9909c5895fe24" kindref="member">FormatMoney</ref>(<ref refid="amount_8h_1a4eaf3a5239714d8c45b851527f7cb564" kindref="member">CAmount</ref><sp/>n,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>fPlus)</highlight></codeline>
<codeline lineno="340"><highlight class="normal">{</highlight></codeline>
<codeline lineno="341"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Note:<sp/>not<sp/>using<sp/>straight<sp/>sprintf<sp/>here<sp/>because<sp/>we<sp/>do<sp/>NOT<sp/>want</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="342"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>localized<sp/>number<sp/>formatting.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="343"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="amount_8h_1a4eaf3a5239714d8c45b851527f7cb564" kindref="member">CAmount</ref><sp/>n_abs<sp/>=<sp/>(n<sp/>&gt;<sp/>0<sp/>?<sp/>n<sp/>:<sp/>-n);</highlight></codeline>
<codeline lineno="344"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="amount_8h_1a4eaf3a5239714d8c45b851527f7cb564" kindref="member">CAmount</ref><sp/>quotient<sp/>=<sp/>n_abs/COIN;</highlight></codeline>
<codeline lineno="345"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="amount_8h_1a4eaf3a5239714d8c45b851527f7cb564" kindref="member">CAmount</ref><sp/>remainder<sp/>=<sp/>n_abs%COIN;</highlight></codeline>
<codeline lineno="346"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>str<sp/>=<sp/><ref refid="tinyformat_8h_1a56c674871a61baaad36ad52238c08857" kindref="member">strprintf</ref>(</highlight><highlight class="stringliteral">&quot;%d.%08d&quot;</highlight><highlight class="normal">,<sp/>quotient,<sp/>remainder);</highlight></codeline>
<codeline lineno="347"><highlight class="normal"></highlight></codeline>
<codeline lineno="348"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Right-trim<sp/>excess<sp/>zeros<sp/>before<sp/>the<sp/>decimal<sp/>point:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="349"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nTrim<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="350"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>str.size()-1;<sp/>(str[i]<sp/>==<sp/></highlight><highlight class="charliteral">&apos;0&apos;</highlight><highlight class="normal"><sp/>&amp;&amp;<sp/>isdigit(str[i-2]));<sp/>--i)</highlight></codeline>
<codeline lineno="351"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++nTrim;</highlight></codeline>
<codeline lineno="352"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(nTrim)</highlight></codeline>
<codeline lineno="353"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>str.erase(str.size()-nTrim,<sp/>nTrim);</highlight></codeline>
<codeline lineno="354"><highlight class="normal"></highlight></codeline>
<codeline lineno="355"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(n<sp/>&lt;<sp/>0)</highlight></codeline>
<codeline lineno="356"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>str.insert((</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)0,<sp/>1,<sp/></highlight><highlight class="charliteral">&apos;-&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="357"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fPlus<sp/>&amp;&amp;<sp/>n<sp/>&gt;<sp/>0)</highlight></codeline>
<codeline lineno="358"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>str.insert((</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)0,<sp/>1,<sp/></highlight><highlight class="charliteral">&apos;+&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="359"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>str;</highlight></codeline>
<codeline lineno="360"><highlight class="normal">}</highlight></codeline>
<codeline lineno="361"><highlight class="normal"></highlight></codeline>
<codeline lineno="362"><highlight class="normal"></highlight></codeline>
<codeline lineno="363" refid="util_8cpp_1a9ebffff9292ea77a3801d29ae2f23572" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="util_8cpp_1a9ebffff9292ea77a3801d29ae2f23572" kindref="member">ParseMoney</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal">&amp;<sp/>str,<sp/><ref refid="amount_8h_1a4eaf3a5239714d8c45b851527f7cb564" kindref="member">CAmount</ref>&amp;<sp/>nRet)</highlight></codeline>
<codeline lineno="364"><highlight class="normal">{</highlight></codeline>
<codeline lineno="365"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="util_8cpp_1a9ebffff9292ea77a3801d29ae2f23572" kindref="member">ParseMoney</ref>(str.c_str(),<sp/>nRet);</highlight></codeline>
<codeline lineno="366"><highlight class="normal">}</highlight></codeline>
<codeline lineno="367"><highlight class="normal"></highlight></codeline>
<codeline lineno="368" refid="util_8h_1a72faa2422b590d61f0d365e8f8877e57" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="util_8cpp_1a9ebffff9292ea77a3801d29ae2f23572" kindref="member">ParseMoney</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>pszIn,<sp/><ref refid="amount_8h_1a4eaf3a5239714d8c45b851527f7cb564" kindref="member">CAmount</ref>&amp;<sp/>nRet)</highlight></codeline>
<codeline lineno="369"><highlight class="normal">{</highlight></codeline>
<codeline lineno="370"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>strWhole;</highlight></codeline>
<codeline lineno="371"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="stdint_8h_1adec1df1b8b51cb32b77e5b86fff46471" kindref="member">int64_t</ref><sp/>nUnits<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="372"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>p<sp/>=<sp/>pszIn;</highlight></codeline>
<codeline lineno="373"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(isspace(*p))</highlight></codeline>
<codeline lineno="374"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p++;</highlight></codeline>
<codeline lineno="375"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(;<sp/>*p;<sp/>p++)</highlight></codeline>
<codeline lineno="376"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="377"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(*p<sp/>==<sp/></highlight><highlight class="charliteral">&apos;.&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="378"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="379"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p++;</highlight></codeline>
<codeline lineno="380"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="amount_8h_1a4eaf3a5239714d8c45b851527f7cb564" kindref="member">CAmount</ref><sp/>nMult<sp/>=<sp/>CENT*10;</highlight></codeline>
<codeline lineno="381"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(isdigit(*p)<sp/>&amp;&amp;<sp/>(nMult<sp/>&gt;<sp/>0))</highlight></codeline>
<codeline lineno="382"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="383"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nUnits<sp/>+=<sp/>nMult<sp/>*<sp/>(*p++<sp/>-<sp/></highlight><highlight class="charliteral">&apos;0&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="384"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nMult<sp/>/=<sp/>10;</highlight></codeline>
<codeline lineno="385"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="386"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="387"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="388"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(isspace(*p))</highlight></codeline>
<codeline lineno="389"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="390"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!isdigit(*p))</highlight></codeline>
<codeline lineno="391"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="392"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>strWhole.insert(strWhole.end(),<sp/>*p);</highlight></codeline>
<codeline lineno="393"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="394"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(;<sp/>*p;<sp/>p++)</highlight></codeline>
<codeline lineno="395"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!isspace(*p))</highlight></codeline>
<codeline lineno="396"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="397"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(strWhole.size()<sp/>&gt;<sp/>10)<sp/></highlight><highlight class="comment">//<sp/>guard<sp/>against<sp/>63<sp/>bit<sp/>overflow</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="398"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="399"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(nUnits<sp/>&lt;<sp/>0<sp/>||<sp/>nUnits<sp/>&gt;<sp/>COIN)</highlight></codeline>
<codeline lineno="400"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="401"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="amount_8h_1a4eaf3a5239714d8c45b851527f7cb564" kindref="member">CAmount</ref><sp/>nWhole<sp/>=<sp/><ref refid="util_8h_1a22916d155600c742c4efad727462588e" kindref="member">atoi64</ref>(strWhole);</highlight></codeline>
<codeline lineno="402"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="amount_8h_1a4eaf3a5239714d8c45b851527f7cb564" kindref="member">CAmount</ref><sp/>nValue<sp/>=<sp/>nWhole*COIN<sp/>+<sp/>nUnits;</highlight></codeline>
<codeline lineno="403"><highlight class="normal"></highlight></codeline>
<codeline lineno="404"><highlight class="normal"><sp/><sp/><sp/><sp/>nRet<sp/>=<sp/>nValue;</highlight></codeline>
<codeline lineno="405"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="406"><highlight class="normal">}</highlight></codeline>
<codeline lineno="407"><highlight class="normal"></highlight></codeline>
<codeline lineno="408"><highlight class="normal"></highlight><highlight class="comment">//<sp/>safeChars<sp/>chosen<sp/>to<sp/>allow<sp/>simple<sp/>messages/URLs/email<sp/>addresses,<sp/>but<sp/>avoid<sp/>anything</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="409"><highlight class="normal"></highlight><highlight class="comment">//<sp/>even<sp/>possibly<sp/>remotely<sp/>dangerous<sp/>like<sp/>&amp;<sp/>or<sp/>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="410"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>safeChars(</highlight><highlight class="stringliteral">&quot;abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ01234567890<sp/>.,;-/:?@&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="411" refid="util_8cpp_1ae204f01eeaadc5a85015a51f369a8356" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/><ref refid="util_8cpp_1ae204f01eeaadc5a85015a51f369a8356" kindref="member">SanitizeString</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal">&amp;<sp/>str)</highlight></codeline>
<codeline lineno="412"><highlight class="normal">{</highlight></codeline>
<codeline lineno="413"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>strResult;</highlight></codeline>
<codeline lineno="414"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(std::string::size_type<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>str.size();<sp/>i++)</highlight></codeline>
<codeline lineno="415"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="416"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(safeChars.find(str[i])<sp/>!=<sp/>std::string::npos)</highlight></codeline>
<codeline lineno="417"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>strResult.push_back(str[i]);</highlight></codeline>
<codeline lineno="418"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="419"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>strResult;</highlight></codeline>
<codeline lineno="420"><highlight class="normal">}</highlight></codeline>
<codeline lineno="421"><highlight class="normal"></highlight></codeline>
<codeline lineno="422" refid="util_8cpp_1a48299e74a5c04c846cbdfc372ee464ec" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">signed</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/><ref refid="util_8cpp_1a48299e74a5c04c846cbdfc372ee464ec" kindref="member">p_util_hexdigit</ref>[256]<sp/>=</highlight></codeline>
<codeline lineno="423"><highlight class="normal">{<sp/>-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,</highlight></codeline>
<codeline lineno="424"><highlight class="normal"><sp/><sp/>-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,</highlight></codeline>
<codeline lineno="425"><highlight class="normal"><sp/><sp/>-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,</highlight></codeline>
<codeline lineno="426"><highlight class="normal"><sp/><sp/>0,1,2,3,4,5,6,7,8,9,-1,-1,-1,-1,-1,-1,</highlight></codeline>
<codeline lineno="427"><highlight class="normal"><sp/><sp/>-1,0xa,0xb,0xc,0xd,0xe,0xf,-1,-1,-1,-1,-1,-1,-1,-1,-1,</highlight></codeline>
<codeline lineno="428"><highlight class="normal"><sp/><sp/>-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,</highlight></codeline>
<codeline lineno="429"><highlight class="normal"><sp/><sp/>-1,0xa,0xb,0xc,0xd,0xe,0xf,-1,-1,-1,-1,-1,-1,-1,-1,-1,</highlight></codeline>
<codeline lineno="430"><highlight class="normal"><sp/><sp/>-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,</highlight></codeline>
<codeline lineno="431"><highlight class="normal"><sp/><sp/>-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,</highlight></codeline>
<codeline lineno="432"><highlight class="normal"><sp/><sp/>-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,</highlight></codeline>
<codeline lineno="433"><highlight class="normal"><sp/><sp/>-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,</highlight></codeline>
<codeline lineno="434"><highlight class="normal"><sp/><sp/>-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,</highlight></codeline>
<codeline lineno="435"><highlight class="normal"><sp/><sp/>-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,</highlight></codeline>
<codeline lineno="436"><highlight class="normal"><sp/><sp/>-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,</highlight></codeline>
<codeline lineno="437"><highlight class="normal"><sp/><sp/>-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,</highlight></codeline>
<codeline lineno="438"><highlight class="normal"><sp/><sp/>-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,<sp/>};</highlight></codeline>
<codeline lineno="439"><highlight class="normal"></highlight></codeline>
<codeline lineno="440" refid="util_8cpp_1aa4e3553d2b2fe693c106f4296685f75c" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="util_8cpp_1aa4e3553d2b2fe693c106f4296685f75c" kindref="member">IsHex</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal">&amp;<sp/>str)</highlight></codeline>
<codeline lineno="441"><highlight class="normal">{</highlight></codeline>
<codeline lineno="442"><highlight class="normal"><sp/><sp/><sp/><sp/>BOOST_FOREACH(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>c,<sp/>str)</highlight></codeline>
<codeline lineno="443"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="444"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="uint256_8h_1aa59e8a8c5a39cb5041f93bb95dd02119" kindref="member">HexDigit</ref>(c)<sp/>&lt;<sp/>0)</highlight></codeline>
<codeline lineno="445"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="446"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="447"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(str.size()<sp/>&gt;<sp/>0)<sp/>&amp;&amp;<sp/>(str.size()%2<sp/>==<sp/>0);</highlight></codeline>
<codeline lineno="448"><highlight class="normal">}</highlight></codeline>
<codeline lineno="449"><highlight class="normal"></highlight></codeline>
<codeline lineno="450" refid="util_8h_1a5a787187ddd5c52baae692350ec5a2cb" refkind="member"><highlight class="normal">vector&lt;unsigned<sp/>char&gt;<sp/><ref refid="util_8cpp_1abea395175fbc4a788ed0f0a41710b8a7" kindref="member">ParseHex</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>psz)</highlight></codeline>
<codeline lineno="451"><highlight class="normal">{</highlight></codeline>
<codeline lineno="452"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>convert<sp/>hex<sp/>dump<sp/>to<sp/>vector</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="453"><highlight class="normal"><sp/><sp/><sp/><sp/>vector&lt;unsigned<sp/>char&gt;<sp/>vch;</highlight></codeline>
<codeline lineno="454"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">true</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="455"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="456"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(isspace(*psz))</highlight></codeline>
<codeline lineno="457"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>psz++;</highlight></codeline>
<codeline lineno="458"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">signed</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>c<sp/>=<sp/><ref refid="uint256_8h_1aa59e8a8c5a39cb5041f93bb95dd02119" kindref="member">HexDigit</ref>(*psz++);</highlight></codeline>
<codeline lineno="459"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(c<sp/>==<sp/>(</highlight><highlight class="keywordtype">signed</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">)-1)</highlight></codeline>
<codeline lineno="460"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="461"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>n<sp/>=<sp/>(c<sp/>&lt;&lt;<sp/>4);</highlight></codeline>
<codeline lineno="462"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>c<sp/>=<sp/><ref refid="uint256_8h_1aa59e8a8c5a39cb5041f93bb95dd02119" kindref="member">HexDigit</ref>(*psz++);</highlight></codeline>
<codeline lineno="463"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(c<sp/>==<sp/>(</highlight><highlight class="keywordtype">signed</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">)-1)</highlight></codeline>
<codeline lineno="464"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="465"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>n<sp/>|=<sp/>c;</highlight></codeline>
<codeline lineno="466"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vch.push_back(n);</highlight></codeline>
<codeline lineno="467"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="468"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>vch;</highlight></codeline>
<codeline lineno="469"><highlight class="normal">}</highlight></codeline>
<codeline lineno="470"><highlight class="normal"></highlight></codeline>
<codeline lineno="471" refid="util_8cpp_1a64d56c5bed7672ee006ff2c29f3554ee" refkind="member"><highlight class="normal">vector&lt;unsigned<sp/>char&gt;<sp/><ref refid="util_8cpp_1abea395175fbc4a788ed0f0a41710b8a7" kindref="member">ParseHex</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal">&amp;<sp/>str)</highlight></codeline>
<codeline lineno="472"><highlight class="normal">{</highlight></codeline>
<codeline lineno="473"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="util_8cpp_1abea395175fbc4a788ed0f0a41710b8a7" kindref="member">ParseHex</ref>(str.c_str());</highlight></codeline>
<codeline lineno="474"><highlight class="normal">}</highlight></codeline>
<codeline lineno="475"><highlight class="normal"></highlight></codeline>
<codeline lineno="476"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>InterpretNegativeSetting(</highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/><ref refid="testharness_8cc_1a8f8f80d37794cde9472343e4487ba3eb" kindref="member">name</ref>,<sp/>map&lt;string,<sp/>string&gt;&amp;<sp/>mapSettingsRet)</highlight></codeline>
<codeline lineno="477"><highlight class="normal">{</highlight></codeline>
<codeline lineno="478"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>interpret<sp/>-nofoo<sp/>as<sp/>-foo=0<sp/>(and<sp/>-nofoo=0<sp/>as<sp/>-foo=1)<sp/>as<sp/>long<sp/>as<sp/>-foo<sp/>not<sp/>set</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="479"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(name.find(</highlight><highlight class="stringliteral">&quot;-no&quot;</highlight><highlight class="normal">)<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="480"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="481"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>positive(</highlight><highlight class="stringliteral">&quot;-&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="482"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>positive.append(name.begin()+3,<sp/>name.end());</highlight></codeline>
<codeline lineno="483"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mapSettingsRet.count(positive)<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="484"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="485"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="version__set_8cc_1a38c8b88c432e666ad10b0c5573e1160a" kindref="member">value</ref><sp/>=<sp/>!<ref refid="util_8cpp_1a64d956f1dda7f9a80ab5d594532b906d" kindref="member">GetBoolArg</ref>(name,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="486"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mapSettingsRet[positive]<sp/>=<sp/>(value<sp/>?<sp/></highlight><highlight class="stringliteral">&quot;1&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;0&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="487"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="488"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="489"><highlight class="normal">}</highlight></codeline>
<codeline lineno="490"><highlight class="normal"></highlight></codeline>
<codeline lineno="491" refid="util_8h_1a4cfc6f116964c12bc24442828c2da007" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="util_8cpp_1a4cfc6f116964c12bc24442828c2da007" kindref="member">ParseParameters</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>argc,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>argv[])</highlight></codeline>
<codeline lineno="492"><highlight class="normal">{</highlight></codeline>
<codeline lineno="493"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="util_8cpp_1a0502b74b88db99500ee21dcb446311e5" kindref="member">mapArgs</ref>.clear();</highlight></codeline>
<codeline lineno="494"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="util_8cpp_1a34d23466f937db99d45620bc7ea5d2fb" kindref="member">mapMultiArgs</ref>.clear();</highlight></codeline>
<codeline lineno="495"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>1;<sp/>i<sp/>&lt;<sp/>argc;<sp/>i++)</highlight></codeline>
<codeline lineno="496"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="497"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>str(argv[i]);</highlight></codeline>
<codeline lineno="498"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>strValue;</highlight></codeline>
<codeline lineno="499"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>is_index<sp/>=<sp/>str.find(</highlight><highlight class="charliteral">&apos;=&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="500"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(is_index<sp/>!=<sp/>std::string::npos)</highlight></codeline>
<codeline lineno="501"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="502"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>strValue<sp/>=<sp/>str.substr(is_index+1);</highlight></codeline>
<codeline lineno="503"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>str<sp/>=<sp/>str.substr(0,<sp/>is_index);</highlight></codeline>
<codeline lineno="504"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="505"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>WIN32</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="506"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>boost::to_lower(str);</highlight></codeline>
<codeline lineno="507"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(boost::algorithm::starts_with(str,<sp/></highlight><highlight class="stringliteral">&quot;/&quot;</highlight><highlight class="normal">))</highlight></codeline>
<codeline lineno="508"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>str<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;-&quot;</highlight><highlight class="normal"><sp/>+<sp/>str.substr(1);</highlight></codeline>
<codeline lineno="509"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="510"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(str[0]<sp/>!=<sp/></highlight><highlight class="charliteral">&apos;-&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="511"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="512"><highlight class="normal"></highlight></codeline>
<codeline lineno="513"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="util_8cpp_1a0502b74b88db99500ee21dcb446311e5" kindref="member">mapArgs</ref>[str]<sp/>=<sp/>strValue;</highlight></codeline>
<codeline lineno="514"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="util_8cpp_1a34d23466f937db99d45620bc7ea5d2fb" kindref="member">mapMultiArgs</ref>[str].push_back(strValue);</highlight></codeline>
<codeline lineno="515"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="516"><highlight class="normal"></highlight></codeline>
<codeline lineno="517"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>New<sp/>0.6<sp/>features:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="518"><highlight class="normal"><sp/><sp/><sp/><sp/>BOOST_FOREACH(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="util_8h_1aa3052ab82a2ba880ea3e30b3357c8820" kindref="member">PAIRTYPE</ref>(</highlight><highlight class="keywordtype">string</highlight><highlight class="normal">,</highlight><highlight class="keywordtype">string</highlight><highlight class="normal">)&amp;<sp/>entry,<sp/><ref refid="util_8cpp_1a0502b74b88db99500ee21dcb446311e5" kindref="member">mapArgs</ref>)</highlight></codeline>
<codeline lineno="519"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="520"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>name<sp/>=<sp/>entry.first;</highlight></codeline>
<codeline lineno="521"><highlight class="normal"></highlight></codeline>
<codeline lineno="522"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/>interpret<sp/>--foo<sp/>as<sp/>-foo<sp/>(as<sp/>long<sp/>as<sp/>both<sp/>are<sp/>not<sp/>set)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="523"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(name.find(</highlight><highlight class="stringliteral">&quot;--&quot;</highlight><highlight class="normal">)<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="524"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="525"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>singleDash(name.begin()+1,<sp/>name.end());</highlight></codeline>
<codeline lineno="526"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="util_8cpp_1a0502b74b88db99500ee21dcb446311e5" kindref="member">mapArgs</ref>.count(singleDash)<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="527"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="util_8cpp_1a0502b74b88db99500ee21dcb446311e5" kindref="member">mapArgs</ref>[singleDash]<sp/>=<sp/>entry.second;</highlight></codeline>
<codeline lineno="528"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>name<sp/>=<sp/>singleDash;</highlight></codeline>
<codeline lineno="529"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="530"><highlight class="normal"></highlight></codeline>
<codeline lineno="531"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>interpret<sp/>-nofoo<sp/>as<sp/>-foo=0<sp/>(and<sp/>-nofoo=0<sp/>as<sp/>-foo=1)<sp/>as<sp/>long<sp/>as<sp/>-foo<sp/>not<sp/>set</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="532"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>InterpretNegativeSetting(name,<sp/><ref refid="util_8cpp_1a0502b74b88db99500ee21dcb446311e5" kindref="member">mapArgs</ref>);</highlight></codeline>
<codeline lineno="533"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="534"><highlight class="normal">}</highlight></codeline>
<codeline lineno="535"><highlight class="normal"></highlight></codeline>
<codeline lineno="536" refid="util_8h_1a24f685720bf40370e5bd2a192ad50cd8" refkind="member"><highlight class="normal">std::string<sp/><ref refid="util_8cpp_1a24f685720bf40370e5bd2a192ad50cd8" kindref="member">GetArg</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>strArg,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>strDefault)</highlight></codeline>
<codeline lineno="537"><highlight class="normal">{</highlight></codeline>
<codeline lineno="538"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="util_8cpp_1a0502b74b88db99500ee21dcb446311e5" kindref="member">mapArgs</ref>.count(strArg))</highlight></codeline>
<codeline lineno="539"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="util_8cpp_1a0502b74b88db99500ee21dcb446311e5" kindref="member">mapArgs</ref>[strArg];</highlight></codeline>
<codeline lineno="540"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>strDefault;</highlight></codeline>
<codeline lineno="541"><highlight class="normal">}</highlight></codeline>
<codeline lineno="542"><highlight class="normal"></highlight></codeline>
<codeline lineno="543" refid="util_8h_1a1bade4f0fca4498b4911abdbe4227dc4" refkind="member"><highlight class="normal"><ref refid="stdint_8h_1adec1df1b8b51cb32b77e5b86fff46471" kindref="member">int64_t</ref><sp/><ref refid="util_8cpp_1a24f685720bf40370e5bd2a192ad50cd8" kindref="member">GetArg</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>strArg,<sp/><ref refid="stdint_8h_1adec1df1b8b51cb32b77e5b86fff46471" kindref="member">int64_t</ref><sp/>nDefault)</highlight></codeline>
<codeline lineno="544"><highlight class="normal">{</highlight></codeline>
<codeline lineno="545"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="util_8cpp_1a0502b74b88db99500ee21dcb446311e5" kindref="member">mapArgs</ref>.count(strArg))</highlight></codeline>
<codeline lineno="546"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="util_8h_1a22916d155600c742c4efad727462588e" kindref="member">atoi64</ref>(<ref refid="util_8cpp_1a0502b74b88db99500ee21dcb446311e5" kindref="member">mapArgs</ref>[strArg]);</highlight></codeline>
<codeline lineno="547"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>nDefault;</highlight></codeline>
<codeline lineno="548"><highlight class="normal">}</highlight></codeline>
<codeline lineno="549"><highlight class="normal"></highlight></codeline>
<codeline lineno="550" refid="util_8h_1a64d956f1dda7f9a80ab5d594532b906d" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="util_8cpp_1a64d956f1dda7f9a80ab5d594532b906d" kindref="member">GetBoolArg</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>strArg,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>fDefault)</highlight></codeline>
<codeline lineno="551"><highlight class="normal">{</highlight></codeline>
<codeline lineno="552"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="util_8cpp_1a0502b74b88db99500ee21dcb446311e5" kindref="member">mapArgs</ref>.count(strArg))</highlight></codeline>
<codeline lineno="553"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="554"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="util_8cpp_1a0502b74b88db99500ee21dcb446311e5" kindref="member">mapArgs</ref>[strArg].empty())</highlight></codeline>
<codeline lineno="555"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="556"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="util_8h_1aa5ce96ec36f4413f820cec9c1831c070" kindref="member">atoi</ref>(<ref refid="util_8cpp_1a0502b74b88db99500ee21dcb446311e5" kindref="member">mapArgs</ref>[strArg])<sp/>!=<sp/>0);</highlight></codeline>
<codeline lineno="557"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="558"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>fDefault;</highlight></codeline>
<codeline lineno="559"><highlight class="normal">}</highlight></codeline>
<codeline lineno="560"><highlight class="normal"></highlight></codeline>
<codeline lineno="561" refid="util_8h_1a9d94ca9f7c1496626992d1873e3f69df" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="util_8cpp_1a9d94ca9f7c1496626992d1873e3f69df" kindref="member">SoftSetArg</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>strArg,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>strValue)</highlight></codeline>
<codeline lineno="562"><highlight class="normal">{</highlight></codeline>
<codeline lineno="563"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="util_8cpp_1a0502b74b88db99500ee21dcb446311e5" kindref="member">mapArgs</ref>.count(strArg))</highlight></codeline>
<codeline lineno="564"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="565"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="util_8cpp_1a0502b74b88db99500ee21dcb446311e5" kindref="member">mapArgs</ref>[strArg]<sp/>=<sp/>strValue;</highlight></codeline>
<codeline lineno="566"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="567"><highlight class="normal">}</highlight></codeline>
<codeline lineno="568"><highlight class="normal"></highlight></codeline>
<codeline lineno="569" refid="util_8h_1acb3060cad083d342898b6055e43692ae" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="util_8cpp_1acb3060cad083d342898b6055e43692ae" kindref="member">SoftSetBoolArg</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>strArg,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>fValue)</highlight></codeline>
<codeline lineno="570"><highlight class="normal">{</highlight></codeline>
<codeline lineno="571"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fValue)</highlight></codeline>
<codeline lineno="572"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="util_8cpp_1a9d94ca9f7c1496626992d1873e3f69df" kindref="member">SoftSetArg</ref>(strArg,<sp/>std::string(</highlight><highlight class="stringliteral">&quot;1&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="573"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="574"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="util_8cpp_1a9d94ca9f7c1496626992d1873e3f69df" kindref="member">SoftSetArg</ref>(strArg,<sp/>std::string(</highlight><highlight class="stringliteral">&quot;0&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="575"><highlight class="normal">}</highlight></codeline>
<codeline lineno="576"><highlight class="normal"></highlight></codeline>
<codeline lineno="577"><highlight class="normal"></highlight></codeline>
<codeline lineno="578" refid="utilstrencodings_8h_1ab088e17c477707c187113686457eabb8" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/><ref refid="util_8cpp_1a5e074135870a6fdfae4ac02047bc0432" kindref="member">EncodeBase64</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>pch,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>len)</highlight></codeline>
<codeline lineno="579"><highlight class="normal">{</highlight></codeline>
<codeline lineno="580"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*pbase64<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="581"><highlight class="normal"></highlight></codeline>
<codeline lineno="582"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>strRet=</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="583"><highlight class="normal"><sp/><sp/><sp/><sp/>strRet.reserve((len+2)/3*4);</highlight></codeline>
<codeline lineno="584"><highlight class="normal"></highlight></codeline>
<codeline lineno="585"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>mode=0,<sp/>left=0;</highlight></codeline>
<codeline lineno="586"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*pchEnd<sp/>=<sp/>pch+len;</highlight></codeline>
<codeline lineno="587"><highlight class="normal"></highlight></codeline>
<codeline lineno="588"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(pch&lt;pchEnd)</highlight></codeline>
<codeline lineno="589"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="590"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>enc<sp/>=<sp/>*(pch++);</highlight></codeline>
<codeline lineno="591"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(mode)</highlight></codeline>
<codeline lineno="592"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="593"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>0:<sp/></highlight><highlight class="comment">//<sp/>we<sp/>have<sp/>no<sp/>bits</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="594"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>strRet<sp/>+=<sp/>pbase64[enc<sp/>&gt;&gt;<sp/>2];</highlight></codeline>
<codeline lineno="595"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>left<sp/>=<sp/>(enc<sp/>&amp;<sp/>3)<sp/>&lt;&lt;<sp/>4;</highlight></codeline>
<codeline lineno="596"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mode<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="597"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="598"><highlight class="normal"></highlight></codeline>
<codeline lineno="599"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>1:<sp/></highlight><highlight class="comment">//<sp/>we<sp/>have<sp/>two<sp/>bits</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="600"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>strRet<sp/>+=<sp/>pbase64[left<sp/>|<sp/>(enc<sp/>&gt;&gt;<sp/>4)];</highlight></codeline>
<codeline lineno="601"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>left<sp/>=<sp/>(enc<sp/>&amp;<sp/>15)<sp/>&lt;&lt;<sp/>2;</highlight></codeline>
<codeline lineno="602"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mode<sp/>=<sp/>2;</highlight></codeline>
<codeline lineno="603"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="604"><highlight class="normal"></highlight></codeline>
<codeline lineno="605"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>2:<sp/></highlight><highlight class="comment">//<sp/>we<sp/>have<sp/>four<sp/>bits</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="606"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>strRet<sp/>+=<sp/>pbase64[left<sp/>|<sp/>(enc<sp/>&gt;&gt;<sp/>6)];</highlight></codeline>
<codeline lineno="607"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>strRet<sp/>+=<sp/>pbase64[enc<sp/>&amp;<sp/>63];</highlight></codeline>
<codeline lineno="608"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mode<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="609"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="610"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="611"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="612"><highlight class="normal"></highlight></codeline>
<codeline lineno="613"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mode)</highlight></codeline>
<codeline lineno="614"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="615"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>strRet<sp/>+=<sp/>pbase64[left];</highlight></codeline>
<codeline lineno="616"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>strRet<sp/>+=<sp/></highlight><highlight class="charliteral">&apos;=&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="617"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mode<sp/>==<sp/>1)</highlight></codeline>
<codeline lineno="618"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>strRet<sp/>+=<sp/></highlight><highlight class="charliteral">&apos;=&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="619"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="620"><highlight class="normal"></highlight></codeline>
<codeline lineno="621"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>strRet;</highlight></codeline>
<codeline lineno="622"><highlight class="normal">}</highlight></codeline>
<codeline lineno="623"><highlight class="normal"></highlight></codeline>
<codeline lineno="624" refid="util_8cpp_1a01c144e3a6e8de1ea8481bd7c69fef07" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/><ref refid="util_8cpp_1a5e074135870a6fdfae4ac02047bc0432" kindref="member">EncodeBase64</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal">&amp;<sp/>str)</highlight></codeline>
<codeline lineno="625"><highlight class="normal">{</highlight></codeline>
<codeline lineno="626"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="util_8cpp_1a5e074135870a6fdfae4ac02047bc0432" kindref="member">EncodeBase64</ref>((</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*)str.c_str(),<sp/>str.size());</highlight></codeline>
<codeline lineno="627"><highlight class="normal">}</highlight></codeline>
<codeline lineno="628"><highlight class="normal"></highlight></codeline>
<codeline lineno="629" refid="utilstrencodings_8h_1ad7d5462ec6ec6e23493c839d01da7424" refkind="member"><highlight class="normal">vector&lt;unsigned<sp/>char&gt;<sp/><ref refid="util_8cpp_1a224a1ec4dc69c9463abf0e8ae767af0d" kindref="member">DecodeBase64</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>p,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal">*<sp/>pfInvalid)</highlight></codeline>
<codeline lineno="630"><highlight class="normal">{</highlight></codeline>
<codeline lineno="631"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>decode64_table[256]<sp/>=</highlight></codeline>
<codeline lineno="632"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="633"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-1,<sp/>-1,<sp/>-1,<sp/>-1,<sp/>-1,<sp/>-1,<sp/>-1,<sp/>-1,<sp/>-1,<sp/>-1,<sp/>-1,<sp/>-1,<sp/>-1,<sp/>-1,<sp/>-1,<sp/>-1,<sp/>-1,<sp/>-1,<sp/>-1,<sp/>-1,</highlight></codeline>
<codeline lineno="634"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-1,<sp/>-1,<sp/>-1,<sp/>-1,<sp/>-1,<sp/>-1,<sp/>-1,<sp/>-1,<sp/>-1,<sp/>-1,<sp/>-1,<sp/>-1,<sp/>-1,<sp/>-1,<sp/>-1,<sp/>-1,<sp/>-1,<sp/>-1,<sp/>-1,<sp/>-1,</highlight></codeline>
<codeline lineno="635"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-1,<sp/>-1,<sp/>-1,<sp/>62,<sp/>-1,<sp/>-1,<sp/>-1,<sp/>63,<sp/>52,<sp/>53,<sp/>54,<sp/>55,<sp/>56,<sp/>57,<sp/>58,<sp/>59,<sp/>60,<sp/>61,<sp/>-1,<sp/>-1,</highlight></codeline>
<codeline lineno="636"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-1,<sp/>-1,<sp/>-1,<sp/>-1,<sp/>-1,<sp/><sp/>0,<sp/><sp/>1,<sp/><sp/>2,<sp/><sp/>3,<sp/><sp/>4,<sp/><sp/>5,<sp/><sp/>6,<sp/><sp/>7,<sp/><sp/>8,<sp/><sp/>9,<sp/>10,<sp/>11,<sp/>12,<sp/>13,<sp/>14,</highlight></codeline>
<codeline lineno="637"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>15,<sp/>16,<sp/>17,<sp/>18,<sp/>19,<sp/>20,<sp/>21,<sp/>22,<sp/>23,<sp/>24,<sp/>25,<sp/>-1,<sp/>-1,<sp/>-1,<sp/>-1,<sp/>-1,<sp/>-1,<sp/>26,<sp/>27,<sp/>28,</highlight></codeline>
<codeline lineno="638"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>29,<sp/>30,<sp/>31,<sp/>32,<sp/>33,<sp/>34,<sp/>35,<sp/>36,<sp/>37,<sp/>38,<sp/>39,<sp/>40,<sp/>41,<sp/>42,<sp/>43,<sp/>44,<sp/>45,<sp/>46,<sp/>47,<sp/>48,</highlight></codeline>
<codeline lineno="639"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>49,<sp/>50,<sp/>51,<sp/>-1,<sp/>-1,<sp/>-1,<sp/>-1,<sp/>-1,<sp/>-1,<sp/>-1,<sp/>-1,<sp/>-1,<sp/>-1,<sp/>-1,<sp/>-1,<sp/>-1,<sp/>-1,<sp/>-1,<sp/>-1,<sp/>-1,</highlight></codeline>
<codeline lineno="640"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-1,<sp/>-1,<sp/>-1,<sp/>-1,<sp/>-1,<sp/>-1,<sp/>-1,<sp/>-1,<sp/>-1,<sp/>-1,<sp/>-1,<sp/>-1,<sp/>-1,<sp/>-1,<sp/>-1,<sp/>-1,<sp/>-1,<sp/>-1,<sp/>-1,<sp/>-1,</highlight></codeline>
<codeline lineno="641"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-1,<sp/>-1,<sp/>-1,<sp/>-1,<sp/>-1,<sp/>-1,<sp/>-1,<sp/>-1,<sp/>-1,<sp/>-1,<sp/>-1,<sp/>-1,<sp/>-1,<sp/>-1,<sp/>-1,<sp/>-1,<sp/>-1,<sp/>-1,<sp/>-1,<sp/>-1,</highlight></codeline>
<codeline lineno="642"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-1,<sp/>-1,<sp/>-1,<sp/>-1,<sp/>-1,<sp/>-1,<sp/>-1,<sp/>-1,<sp/>-1,<sp/>-1,<sp/>-1,<sp/>-1,<sp/>-1,<sp/>-1,<sp/>-1,<sp/>-1,<sp/>-1,<sp/>-1,<sp/>-1,<sp/>-1,</highlight></codeline>
<codeline lineno="643"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-1,<sp/>-1,<sp/>-1,<sp/>-1,<sp/>-1,<sp/>-1,<sp/>-1,<sp/>-1,<sp/>-1,<sp/>-1,<sp/>-1,<sp/>-1,<sp/>-1,<sp/>-1,<sp/>-1,<sp/>-1,<sp/>-1,<sp/>-1,<sp/>-1,<sp/>-1,</highlight></codeline>
<codeline lineno="644"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-1,<sp/>-1,<sp/>-1,<sp/>-1,<sp/>-1,<sp/>-1,<sp/>-1,<sp/>-1,<sp/>-1,<sp/>-1,<sp/>-1,<sp/>-1,<sp/>-1,<sp/>-1,<sp/>-1,<sp/>-1,<sp/>-1,<sp/>-1,<sp/>-1,<sp/>-1,</highlight></codeline>
<codeline lineno="645"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-1,<sp/>-1,<sp/>-1,<sp/>-1,<sp/>-1,<sp/>-1,<sp/>-1,<sp/>-1,<sp/>-1,<sp/>-1,<sp/>-1,<sp/>-1,<sp/>-1,<sp/>-1,<sp/>-1,<sp/>-1</highlight></codeline>
<codeline lineno="646"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="647"><highlight class="normal"></highlight></codeline>
<codeline lineno="648"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(pfInvalid)</highlight></codeline>
<codeline lineno="649"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*pfInvalid<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="650"><highlight class="normal"></highlight></codeline>
<codeline lineno="651"><highlight class="normal"><sp/><sp/><sp/><sp/>vector&lt;unsigned<sp/>char&gt;<sp/>vchRet;</highlight></codeline>
<codeline lineno="652"><highlight class="normal"><sp/><sp/><sp/><sp/>vchRet.reserve(strlen(p)*3/4);</highlight></codeline>
<codeline lineno="653"><highlight class="normal"></highlight></codeline>
<codeline lineno="654"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>mode<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="655"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>left<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="656"><highlight class="normal"></highlight></codeline>
<codeline lineno="657"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(1)</highlight></codeline>
<codeline lineno="658"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="659"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>dec<sp/>=<sp/>decode64_table[(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>char)*p];</highlight></codeline>
<codeline lineno="660"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(dec<sp/>==<sp/>-1)<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="661"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p++;</highlight></codeline>
<codeline lineno="662"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(mode)</highlight></codeline>
<codeline lineno="663"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="664"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>0:<sp/></highlight><highlight class="comment">//<sp/>we<sp/>have<sp/>no<sp/>bits<sp/>and<sp/>get<sp/>6</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="665"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>left<sp/>=<sp/>dec;</highlight></codeline>
<codeline lineno="666"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mode<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="667"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="668"><highlight class="normal"></highlight></codeline>
<codeline lineno="669"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>1:<sp/></highlight><highlight class="comment">//<sp/>we<sp/>have<sp/>6<sp/>bits<sp/>and<sp/>keep<sp/>4</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="670"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vchRet.push_back((left&lt;&lt;2)<sp/>|<sp/>(dec&gt;&gt;4));</highlight></codeline>
<codeline lineno="671"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>left<sp/>=<sp/>dec<sp/>&amp;<sp/>15;</highlight></codeline>
<codeline lineno="672"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mode<sp/>=<sp/>2;</highlight></codeline>
<codeline lineno="673"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="674"><highlight class="normal"></highlight></codeline>
<codeline lineno="675"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>2:<sp/></highlight><highlight class="comment">//<sp/>we<sp/>have<sp/>4<sp/>bits<sp/>and<sp/>get<sp/>6,<sp/>we<sp/>keep<sp/>2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="676"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vchRet.push_back((left&lt;&lt;4)<sp/>|<sp/>(dec&gt;&gt;2));</highlight></codeline>
<codeline lineno="677"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>left<sp/>=<sp/>dec<sp/>&amp;<sp/>3;</highlight></codeline>
<codeline lineno="678"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mode<sp/>=<sp/>3;</highlight></codeline>
<codeline lineno="679"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="680"><highlight class="normal"></highlight></codeline>
<codeline lineno="681"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>3:<sp/></highlight><highlight class="comment">//<sp/>we<sp/>have<sp/>2<sp/>bits<sp/>and<sp/>get<sp/>6</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="682"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vchRet.push_back((left&lt;&lt;6)<sp/>|<sp/>dec);</highlight></codeline>
<codeline lineno="683"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mode<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="684"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="685"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="686"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="687"><highlight class="normal"></highlight></codeline>
<codeline lineno="688"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(pfInvalid)</highlight></codeline>
<codeline lineno="689"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(mode)</highlight></codeline>
<codeline lineno="690"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="691"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>0:<sp/></highlight><highlight class="comment">//<sp/>4n<sp/>base64<sp/>characters<sp/>processed:<sp/>ok</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="692"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="693"><highlight class="normal"></highlight></codeline>
<codeline lineno="694"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>1:<sp/></highlight><highlight class="comment">//<sp/>4n+1<sp/>base64<sp/>character<sp/>processed:<sp/>impossible</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="695"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*pfInvalid<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="696"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="697"><highlight class="normal"></highlight></codeline>
<codeline lineno="698"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>2:<sp/></highlight><highlight class="comment">//<sp/>4n+2<sp/>base64<sp/>characters<sp/>processed:<sp/>require<sp/>&apos;==&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="699"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(left<sp/>||<sp/>p[0]<sp/>!=<sp/></highlight><highlight class="charliteral">&apos;=&apos;</highlight><highlight class="normal"><sp/>||<sp/>p[1]<sp/>!=<sp/></highlight><highlight class="charliteral">&apos;=&apos;</highlight><highlight class="normal"><sp/>||<sp/>decode64_table[(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">)p[2]]<sp/>!=<sp/>-1)</highlight></codeline>
<codeline lineno="700"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*pfInvalid<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="701"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="702"><highlight class="normal"></highlight></codeline>
<codeline lineno="703"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>3:<sp/></highlight><highlight class="comment">//<sp/>4n+3<sp/>base64<sp/>characters<sp/>processed:<sp/>require<sp/>&apos;=&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="704"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(left<sp/>||<sp/>p[0]<sp/>!=<sp/></highlight><highlight class="charliteral">&apos;=&apos;</highlight><highlight class="normal"><sp/>||<sp/>decode64_table[(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">)p[1]]<sp/>!=<sp/>-1)</highlight></codeline>
<codeline lineno="705"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*pfInvalid<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="706"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="707"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="708"><highlight class="normal"></highlight></codeline>
<codeline lineno="709"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>vchRet;</highlight></codeline>
<codeline lineno="710"><highlight class="normal">}</highlight></codeline>
<codeline lineno="711"><highlight class="normal"></highlight></codeline>
<codeline lineno="712" refid="util_8cpp_1a1fc3cb76c00fb587855511c99a715af5" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/><ref refid="util_8cpp_1a224a1ec4dc69c9463abf0e8ae767af0d" kindref="member">DecodeBase64</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal">&amp;<sp/>str)</highlight></codeline>
<codeline lineno="713"><highlight class="normal">{</highlight></codeline>
<codeline lineno="714"><highlight class="normal"><sp/><sp/><sp/><sp/>vector&lt;unsigned<sp/>char&gt;<sp/>vchRet<sp/>=<sp/><ref refid="util_8cpp_1a224a1ec4dc69c9463abf0e8ae767af0d" kindref="member">DecodeBase64</ref>(str.c_str());</highlight></codeline>
<codeline lineno="715"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>string((</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*)&amp;vchRet[0],<sp/>vchRet.size());</highlight></codeline>
<codeline lineno="716"><highlight class="normal">}</highlight></codeline>
<codeline lineno="717"><highlight class="normal"></highlight></codeline>
<codeline lineno="718"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Base64<sp/>encoding<sp/>with<sp/>secure<sp/>memory<sp/>allocation</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="719" refid="utilstrencodings_8h_1a49f6f1cd42cb886762be52c72466dc7e" refkind="member"><highlight class="normal"><ref refid="allocators_8h_1a396ed773a5ac24aec28c8f7dc413c7ac" kindref="member">SecureString</ref><sp/><ref refid="util_8cpp_1a49f6f1cd42cb886762be52c72466dc7e" kindref="member">EncodeBase64Secure</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="allocators_8h_1a396ed773a5ac24aec28c8f7dc413c7ac" kindref="member">SecureString</ref>&amp;<sp/>input)</highlight></codeline>
<codeline lineno="720"><highlight class="normal">{</highlight></codeline>
<codeline lineno="721"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Init<sp/>openssl<sp/>BIO<sp/>with<sp/>base64<sp/>filter<sp/>and<sp/>memory<sp/>output</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="722"><highlight class="normal"><sp/><sp/><sp/><sp/>BIO<sp/>*b64,<sp/>*<ref refid="db__impl_8cc_1a1a1fa02d49bbc4c0896ff1cb12618dc3" kindref="member">mem</ref>;</highlight></codeline>
<codeline lineno="723"><highlight class="normal"><sp/><sp/><sp/><sp/>b64<sp/>=<sp/>BIO_new(BIO_f_base64());</highlight></codeline>
<codeline lineno="724"><highlight class="normal"><sp/><sp/><sp/><sp/>BIO_set_flags(b64,<sp/>BIO_FLAGS_BASE64_NO_NL);<sp/></highlight><highlight class="comment">//<sp/>No<sp/>newlines<sp/>in<sp/>output</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="725"><highlight class="normal"><sp/><sp/><sp/><sp/>mem<sp/>=<sp/>BIO_new(BIO_s_mem());</highlight></codeline>
<codeline lineno="726"><highlight class="normal"><sp/><sp/><sp/><sp/>BIO_push(b64,<sp/>mem);</highlight></codeline>
<codeline lineno="727"><highlight class="normal"></highlight></codeline>
<codeline lineno="728"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Decode<sp/>the<sp/>string</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="729"><highlight class="normal"><sp/><sp/><sp/><sp/>BIO_write(b64,<sp/>&amp;input[0],<sp/>input.size());</highlight></codeline>
<codeline lineno="730"><highlight class="normal"><sp/><sp/><sp/><sp/>(void)<sp/>BIO_flush(b64);</highlight></codeline>
<codeline lineno="731"><highlight class="normal"></highlight></codeline>
<codeline lineno="732"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Create<sp/>output<sp/>variable<sp/>from<sp/>buffer<sp/>mem<sp/>ptr</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="733"><highlight class="normal"><sp/><sp/><sp/><sp/>BUF_MEM<sp/>*bptr;</highlight></codeline>
<codeline lineno="734"><highlight class="normal"><sp/><sp/><sp/><sp/>BIO_get_mem_ptr(b64,<sp/>&amp;bptr);</highlight></codeline>
<codeline lineno="735"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="allocators_8h_1a396ed773a5ac24aec28c8f7dc413c7ac" kindref="member">SecureString</ref><sp/>output(bptr-&gt;data,<sp/>bptr-&gt;length);</highlight></codeline>
<codeline lineno="736"><highlight class="normal"></highlight></codeline>
<codeline lineno="737"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Cleanse<sp/>secure<sp/>data<sp/>buffer<sp/>from<sp/>memory</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="738"><highlight class="normal"><sp/><sp/><sp/><sp/>OPENSSL_cleanse((</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)<sp/>bptr-&gt;data,<sp/>bptr-&gt;length);</highlight></codeline>
<codeline lineno="739"><highlight class="normal"></highlight></codeline>
<codeline lineno="740"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Free<sp/>memory</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="741"><highlight class="normal"><sp/><sp/><sp/><sp/>BIO_free_all(b64);</highlight></codeline>
<codeline lineno="742"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>output;</highlight></codeline>
<codeline lineno="743"><highlight class="normal">}</highlight></codeline>
<codeline lineno="744"><highlight class="normal"></highlight></codeline>
<codeline lineno="745"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Base64<sp/>decoding<sp/>with<sp/>secure<sp/>memory<sp/>allocation</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="746" refid="utilstrencodings_8h_1a0071c0bf91d611895e43999e62666c96" refkind="member"><highlight class="normal"><ref refid="allocators_8h_1a396ed773a5ac24aec28c8f7dc413c7ac" kindref="member">SecureString</ref><sp/><ref refid="util_8cpp_1a0071c0bf91d611895e43999e62666c96" kindref="member">DecodeBase64Secure</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="allocators_8h_1a396ed773a5ac24aec28c8f7dc413c7ac" kindref="member">SecureString</ref>&amp;<sp/>input)</highlight></codeline>
<codeline lineno="747"><highlight class="normal">{</highlight></codeline>
<codeline lineno="748"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="allocators_8h_1a396ed773a5ac24aec28c8f7dc413c7ac" kindref="member">SecureString</ref><sp/>output;</highlight></codeline>
<codeline lineno="749"><highlight class="normal"></highlight></codeline>
<codeline lineno="750"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Init<sp/>openssl<sp/>BIO<sp/>with<sp/>base64<sp/>filter<sp/>and<sp/>memory<sp/>input</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="751"><highlight class="normal"><sp/><sp/><sp/><sp/>BIO<sp/>*b64,<sp/>*<ref refid="db__impl_8cc_1a1a1fa02d49bbc4c0896ff1cb12618dc3" kindref="member">mem</ref>;</highlight></codeline>
<codeline lineno="752"><highlight class="normal"><sp/><sp/><sp/><sp/>b64<sp/>=<sp/>BIO_new(BIO_f_base64());</highlight></codeline>
<codeline lineno="753"><highlight class="normal"><sp/><sp/><sp/><sp/>BIO_set_flags(b64,<sp/>BIO_FLAGS_BASE64_NO_NL);<sp/></highlight><highlight class="comment">//Do<sp/>not<sp/>use<sp/>newlines<sp/>to<sp/>flush<sp/>buffer</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="754"><highlight class="normal"><sp/><sp/><sp/><sp/>mem<sp/>=<sp/>BIO_new_mem_buf((</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)<sp/>&amp;input[0],<sp/>input.size());</highlight></codeline>
<codeline lineno="755"><highlight class="normal"><sp/><sp/><sp/><sp/>BIO_push(b64,<sp/>mem);</highlight></codeline>
<codeline lineno="756"><highlight class="normal"></highlight></codeline>
<codeline lineno="757"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Prepare<sp/>buffer<sp/>to<sp/>receive<sp/>decoded<sp/>data</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="758"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(input.size()<sp/>%<sp/>4<sp/>!=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="759"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>runtime_error(</highlight><highlight class="stringliteral">&quot;Input<sp/>length<sp/>should<sp/>be<sp/>a<sp/>multiple<sp/>of<sp/>4&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="760"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="761"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>nMaxLen<sp/>=<sp/>input.size()<sp/>/<sp/>4<sp/>*<sp/>3;<sp/></highlight><highlight class="comment">//<sp/>upper<sp/>bound,<sp/>guaranteed<sp/>divisible<sp/>by<sp/>4</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="762"><highlight class="normal"><sp/><sp/><sp/><sp/>output.resize(nMaxLen);</highlight></codeline>
<codeline lineno="763"><highlight class="normal"></highlight></codeline>
<codeline lineno="764"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Decode<sp/>the<sp/>string</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="765"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>nLen;</highlight></codeline>
<codeline lineno="766"><highlight class="normal"><sp/><sp/><sp/><sp/>nLen<sp/>=<sp/>BIO_read(b64,<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)<sp/>&amp;output[0],<sp/>input.size());</highlight></codeline>
<codeline lineno="767"><highlight class="normal"><sp/><sp/><sp/><sp/>output.resize(nLen);</highlight></codeline>
<codeline lineno="768"><highlight class="normal"></highlight></codeline>
<codeline lineno="769"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Free<sp/>memory</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="770"><highlight class="normal"><sp/><sp/><sp/><sp/>BIO_free_all(b64);</highlight></codeline>
<codeline lineno="771"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>output;</highlight></codeline>
<codeline lineno="772"><highlight class="normal">}</highlight></codeline>
<codeline lineno="773"><highlight class="normal"></highlight></codeline>
<codeline lineno="774"><highlight class="normal"></highlight></codeline>
<codeline lineno="775" refid="utilstrencodings_8h_1aed1944a78afffe9d5f3129e656dc8aa6" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/><ref refid="util_8cpp_1a71aa75e646de8a10971f887bc71d9a75" kindref="member">EncodeBase32</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>pch,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>len)</highlight></codeline>
<codeline lineno="776"><highlight class="normal">{</highlight></codeline>
<codeline lineno="777"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*pbase32<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;abcdefghijklmnopqrstuvwxyz234567&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="778"><highlight class="normal"></highlight></codeline>
<codeline lineno="779"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>strRet=</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="780"><highlight class="normal"><sp/><sp/><sp/><sp/>strRet.reserve((len+4)/5*8);</highlight></codeline>
<codeline lineno="781"><highlight class="normal"></highlight></codeline>
<codeline lineno="782"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>mode=0,<sp/>left=0;</highlight></codeline>
<codeline lineno="783"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*pchEnd<sp/>=<sp/>pch+len;</highlight></codeline>
<codeline lineno="784"><highlight class="normal"></highlight></codeline>
<codeline lineno="785"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(pch&lt;pchEnd)</highlight></codeline>
<codeline lineno="786"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="787"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>enc<sp/>=<sp/>*(pch++);</highlight></codeline>
<codeline lineno="788"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(mode)</highlight></codeline>
<codeline lineno="789"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="790"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>0:<sp/></highlight><highlight class="comment">//<sp/>we<sp/>have<sp/>no<sp/>bits</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="791"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>strRet<sp/>+=<sp/>pbase32[enc<sp/>&gt;&gt;<sp/>3];</highlight></codeline>
<codeline lineno="792"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>left<sp/>=<sp/>(enc<sp/>&amp;<sp/>7)<sp/>&lt;&lt;<sp/>2;</highlight></codeline>
<codeline lineno="793"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mode<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="794"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="795"><highlight class="normal"></highlight></codeline>
<codeline lineno="796"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>1:<sp/></highlight><highlight class="comment">//<sp/>we<sp/>have<sp/>three<sp/>bits</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="797"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>strRet<sp/>+=<sp/>pbase32[left<sp/>|<sp/>(enc<sp/>&gt;&gt;<sp/>6)];</highlight></codeline>
<codeline lineno="798"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>strRet<sp/>+=<sp/>pbase32[(enc<sp/>&gt;&gt;<sp/>1)<sp/>&amp;<sp/>31];</highlight></codeline>
<codeline lineno="799"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>left<sp/>=<sp/>(enc<sp/>&amp;<sp/>1)<sp/>&lt;&lt;<sp/>4;</highlight></codeline>
<codeline lineno="800"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mode<sp/>=<sp/>2;</highlight></codeline>
<codeline lineno="801"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="802"><highlight class="normal"></highlight></codeline>
<codeline lineno="803"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>2:<sp/></highlight><highlight class="comment">//<sp/>we<sp/>have<sp/>one<sp/>bit</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="804"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>strRet<sp/>+=<sp/>pbase32[left<sp/>|<sp/>(enc<sp/>&gt;&gt;<sp/>4)];</highlight></codeline>
<codeline lineno="805"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>left<sp/>=<sp/>(enc<sp/>&amp;<sp/>15)<sp/>&lt;&lt;<sp/>1;</highlight></codeline>
<codeline lineno="806"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mode<sp/>=<sp/>3;</highlight></codeline>
<codeline lineno="807"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="808"><highlight class="normal"></highlight></codeline>
<codeline lineno="809"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>3:<sp/></highlight><highlight class="comment">//<sp/>we<sp/>have<sp/>four<sp/>bits</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="810"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>strRet<sp/>+=<sp/>pbase32[left<sp/>|<sp/>(enc<sp/>&gt;&gt;<sp/>7)];</highlight></codeline>
<codeline lineno="811"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>strRet<sp/>+=<sp/>pbase32[(enc<sp/>&gt;&gt;<sp/>2)<sp/>&amp;<sp/>31];</highlight></codeline>
<codeline lineno="812"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>left<sp/>=<sp/>(enc<sp/>&amp;<sp/>3)<sp/>&lt;&lt;<sp/>3;</highlight></codeline>
<codeline lineno="813"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mode<sp/>=<sp/>4;</highlight></codeline>
<codeline lineno="814"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="815"><highlight class="normal"></highlight></codeline>
<codeline lineno="816"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>4:<sp/></highlight><highlight class="comment">//<sp/>we<sp/>have<sp/>two<sp/>bits</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="817"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>strRet<sp/>+=<sp/>pbase32[left<sp/>|<sp/>(enc<sp/>&gt;&gt;<sp/>5)];</highlight></codeline>
<codeline lineno="818"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>strRet<sp/>+=<sp/>pbase32[enc<sp/>&amp;<sp/>31];</highlight></codeline>
<codeline lineno="819"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mode<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="820"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="821"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="822"><highlight class="normal"></highlight></codeline>
<codeline lineno="823"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nPadding[5]<sp/>=<sp/>{0,<sp/>6,<sp/>4,<sp/>3,<sp/>1};</highlight></codeline>
<codeline lineno="824"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mode)</highlight></codeline>
<codeline lineno="825"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="826"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>strRet<sp/>+=<sp/>pbase32[left];</highlight></codeline>
<codeline lineno="827"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n=0;<sp/>n&lt;nPadding[mode];<sp/>n++)</highlight></codeline>
<codeline lineno="828"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>strRet<sp/>+=<sp/></highlight><highlight class="charliteral">&apos;=&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="829"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="830"><highlight class="normal"></highlight></codeline>
<codeline lineno="831"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>strRet;</highlight></codeline>
<codeline lineno="832"><highlight class="normal">}</highlight></codeline>
<codeline lineno="833"><highlight class="normal"></highlight></codeline>
<codeline lineno="834" refid="util_8cpp_1aa4484ee0b7560f87051606f109e5d96a" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/><ref refid="util_8cpp_1a71aa75e646de8a10971f887bc71d9a75" kindref="member">EncodeBase32</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal">&amp;<sp/>str)</highlight></codeline>
<codeline lineno="835"><highlight class="normal">{</highlight></codeline>
<codeline lineno="836"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="util_8cpp_1a71aa75e646de8a10971f887bc71d9a75" kindref="member">EncodeBase32</ref>((</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*)str.c_str(),<sp/>str.size());</highlight></codeline>
<codeline lineno="837"><highlight class="normal">}</highlight></codeline>
<codeline lineno="838"><highlight class="normal"></highlight></codeline>
<codeline lineno="839" refid="utilstrencodings_8h_1a58e69b413820ff62a4f203eb5c1a827a" refkind="member"><highlight class="normal">vector&lt;unsigned<sp/>char&gt;<sp/><ref refid="util_8cpp_1a8266fd137bc7f76f4a75024baab5c18f" kindref="member">DecodeBase32</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>p,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal">*<sp/>pfInvalid)</highlight></codeline>
<codeline lineno="840"><highlight class="normal">{</highlight></codeline>
<codeline lineno="841"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>decode32_table[256]<sp/>=</highlight></codeline>
<codeline lineno="842"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="843"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-1,<sp/>-1,<sp/>-1,<sp/>-1,<sp/>-1,<sp/>-1,<sp/>-1,<sp/>-1,<sp/>-1,<sp/>-1,<sp/>-1,<sp/>-1,<sp/>-1,<sp/>-1,<sp/>-1,<sp/>-1,<sp/>-1,<sp/>-1,<sp/>-1,<sp/>-1,</highlight></codeline>
<codeline lineno="844"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-1,<sp/>-1,<sp/>-1,<sp/>-1,<sp/>-1,<sp/>-1,<sp/>-1,<sp/>-1,<sp/>-1,<sp/>-1,<sp/>-1,<sp/>-1,<sp/>-1,<sp/>-1,<sp/>-1,<sp/>-1,<sp/>-1,<sp/>-1,<sp/>-1,<sp/>-1,</highlight></codeline>
<codeline lineno="845"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-1,<sp/>-1,<sp/>-1,<sp/>-1,<sp/>-1,<sp/>-1,<sp/>-1,<sp/>-1,<sp/>-1,<sp/>-1,<sp/>26,<sp/>27,<sp/>28,<sp/>29,<sp/>30,<sp/>31,<sp/>-1,<sp/>-1,<sp/>-1,<sp/>-1,</highlight></codeline>
<codeline lineno="846"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-1,<sp/>-1,<sp/>-1,<sp/>-1,<sp/>-1,<sp/><sp/>0,<sp/><sp/>1,<sp/><sp/>2,<sp/><sp/>3,<sp/><sp/>4,<sp/><sp/>5,<sp/><sp/>6,<sp/><sp/>7,<sp/><sp/>8,<sp/><sp/>9,<sp/>10,<sp/>11,<sp/>12,<sp/>13,<sp/>14,</highlight></codeline>
<codeline lineno="847"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>15,<sp/>16,<sp/>17,<sp/>18,<sp/>19,<sp/>20,<sp/>21,<sp/>22,<sp/>23,<sp/>24,<sp/>25,<sp/>-1,<sp/>-1,<sp/>-1,<sp/>-1,<sp/>-1,<sp/>-1,<sp/><sp/>0,<sp/><sp/>1,<sp/><sp/>2,</highlight></codeline>
<codeline lineno="848"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>3,<sp/><sp/>4,<sp/><sp/>5,<sp/><sp/>6,<sp/><sp/>7,<sp/><sp/>8,<sp/><sp/>9,<sp/>10,<sp/>11,<sp/>12,<sp/>13,<sp/>14,<sp/>15,<sp/>16,<sp/>17,<sp/>18,<sp/>19,<sp/>20,<sp/>21,<sp/>22,</highlight></codeline>
<codeline lineno="849"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>23,<sp/>24,<sp/>25,<sp/>-1,<sp/>-1,<sp/>-1,<sp/>-1,<sp/>-1,<sp/>-1,<sp/>-1,<sp/>-1,<sp/>-1,<sp/>-1,<sp/>-1,<sp/>-1,<sp/>-1,<sp/>-1,<sp/>-1,<sp/>-1,<sp/>-1,</highlight></codeline>
<codeline lineno="850"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-1,<sp/>-1,<sp/>-1,<sp/>-1,<sp/>-1,<sp/>-1,<sp/>-1,<sp/>-1,<sp/>-1,<sp/>-1,<sp/>-1,<sp/>-1,<sp/>-1,<sp/>-1,<sp/>-1,<sp/>-1,<sp/>-1,<sp/>-1,<sp/>-1,<sp/>-1,</highlight></codeline>
<codeline lineno="851"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-1,<sp/>-1,<sp/>-1,<sp/>-1,<sp/>-1,<sp/>-1,<sp/>-1,<sp/>-1,<sp/>-1,<sp/>-1,<sp/>-1,<sp/>-1,<sp/>-1,<sp/>-1,<sp/>-1,<sp/>-1,<sp/>-1,<sp/>-1,<sp/>-1,<sp/>-1,</highlight></codeline>
<codeline lineno="852"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-1,<sp/>-1,<sp/>-1,<sp/>-1,<sp/>-1,<sp/>-1,<sp/>-1,<sp/>-1,<sp/>-1,<sp/>-1,<sp/>-1,<sp/>-1,<sp/>-1,<sp/>-1,<sp/>-1,<sp/>-1,<sp/>-1,<sp/>-1,<sp/>-1,<sp/>-1,</highlight></codeline>
<codeline lineno="853"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-1,<sp/>-1,<sp/>-1,<sp/>-1,<sp/>-1,<sp/>-1,<sp/>-1,<sp/>-1,<sp/>-1,<sp/>-1,<sp/>-1,<sp/>-1,<sp/>-1,<sp/>-1,<sp/>-1,<sp/>-1,<sp/>-1,<sp/>-1,<sp/>-1,<sp/>-1,</highlight></codeline>
<codeline lineno="854"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-1,<sp/>-1,<sp/>-1,<sp/>-1,<sp/>-1,<sp/>-1,<sp/>-1,<sp/>-1,<sp/>-1,<sp/>-1,<sp/>-1,<sp/>-1,<sp/>-1,<sp/>-1,<sp/>-1,<sp/>-1,<sp/>-1,<sp/>-1,<sp/>-1,<sp/>-1,</highlight></codeline>
<codeline lineno="855"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-1,<sp/>-1,<sp/>-1,<sp/>-1,<sp/>-1,<sp/>-1,<sp/>-1,<sp/>-1,<sp/>-1,<sp/>-1,<sp/>-1,<sp/>-1,<sp/>-1,<sp/>-1,<sp/>-1,<sp/>-1</highlight></codeline>
<codeline lineno="856"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="857"><highlight class="normal"></highlight></codeline>
<codeline lineno="858"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(pfInvalid)</highlight></codeline>
<codeline lineno="859"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*pfInvalid<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="860"><highlight class="normal"></highlight></codeline>
<codeline lineno="861"><highlight class="normal"><sp/><sp/><sp/><sp/>vector&lt;unsigned<sp/>char&gt;<sp/>vchRet;</highlight></codeline>
<codeline lineno="862"><highlight class="normal"><sp/><sp/><sp/><sp/>vchRet.reserve((strlen(p))*5/8);</highlight></codeline>
<codeline lineno="863"><highlight class="normal"></highlight></codeline>
<codeline lineno="864"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>mode<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="865"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>left<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="866"><highlight class="normal"></highlight></codeline>
<codeline lineno="867"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(1)</highlight></codeline>
<codeline lineno="868"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="869"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>dec<sp/>=<sp/>decode32_table[(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>char)*p];</highlight></codeline>
<codeline lineno="870"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(dec<sp/>==<sp/>-1)<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="871"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p++;</highlight></codeline>
<codeline lineno="872"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(mode)</highlight></codeline>
<codeline lineno="873"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="874"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>0:<sp/></highlight><highlight class="comment">//<sp/>we<sp/>have<sp/>no<sp/>bits<sp/>and<sp/>get<sp/>5</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="875"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>left<sp/>=<sp/>dec;</highlight></codeline>
<codeline lineno="876"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mode<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="877"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="878"><highlight class="normal"></highlight></codeline>
<codeline lineno="879"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>1:<sp/></highlight><highlight class="comment">//<sp/>we<sp/>have<sp/>5<sp/>bits<sp/>and<sp/>keep<sp/>2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="880"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vchRet.push_back((left&lt;&lt;3)<sp/>|<sp/>(dec&gt;&gt;2));</highlight></codeline>
<codeline lineno="881"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>left<sp/>=<sp/>dec<sp/>&amp;<sp/>3;</highlight></codeline>
<codeline lineno="882"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mode<sp/>=<sp/>2;</highlight></codeline>
<codeline lineno="883"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="884"><highlight class="normal"></highlight></codeline>
<codeline lineno="885"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>2:<sp/></highlight><highlight class="comment">//<sp/>we<sp/>have<sp/>2<sp/>bits<sp/>and<sp/>keep<sp/>7</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="886"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>left<sp/>=<sp/>left<sp/>&lt;&lt;<sp/>5<sp/>|<sp/>dec;</highlight></codeline>
<codeline lineno="887"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mode<sp/>=<sp/>3;</highlight></codeline>
<codeline lineno="888"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="889"><highlight class="normal"></highlight></codeline>
<codeline lineno="890"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>3:<sp/></highlight><highlight class="comment">//<sp/>we<sp/>have<sp/>7<sp/>bits<sp/>and<sp/>keep<sp/>4</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="891"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vchRet.push_back((left&lt;&lt;1)<sp/>|<sp/>(dec&gt;&gt;4));</highlight></codeline>
<codeline lineno="892"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>left<sp/>=<sp/>dec<sp/>&amp;<sp/>15;</highlight></codeline>
<codeline lineno="893"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mode<sp/>=<sp/>4;</highlight></codeline>
<codeline lineno="894"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="895"><highlight class="normal"></highlight></codeline>
<codeline lineno="896"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>4:<sp/></highlight><highlight class="comment">//<sp/>we<sp/>have<sp/>4<sp/>bits,<sp/>and<sp/>keep<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="897"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vchRet.push_back((left&lt;&lt;4)<sp/>|<sp/>(dec&gt;&gt;1));</highlight></codeline>
<codeline lineno="898"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>left<sp/>=<sp/>dec<sp/>&amp;<sp/>1;</highlight></codeline>
<codeline lineno="899"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mode<sp/>=<sp/>5;</highlight></codeline>
<codeline lineno="900"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="901"><highlight class="normal"></highlight></codeline>
<codeline lineno="902"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>5:<sp/></highlight><highlight class="comment">//<sp/>we<sp/>have<sp/>1<sp/>bit,<sp/>and<sp/>keep<sp/>6</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="903"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>left<sp/>=<sp/>left<sp/>&lt;&lt;<sp/>5<sp/>|<sp/>dec;</highlight></codeline>
<codeline lineno="904"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mode<sp/>=<sp/>6;</highlight></codeline>
<codeline lineno="905"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="906"><highlight class="normal"></highlight></codeline>
<codeline lineno="907"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>6:<sp/></highlight><highlight class="comment">//<sp/>we<sp/>have<sp/>6<sp/>bits,<sp/>and<sp/>keep<sp/>3</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="908"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vchRet.push_back((left&lt;&lt;2)<sp/>|<sp/>(dec&gt;&gt;3));</highlight></codeline>
<codeline lineno="909"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>left<sp/>=<sp/>dec<sp/>&amp;<sp/>7;</highlight></codeline>
<codeline lineno="910"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mode<sp/>=<sp/>7;</highlight></codeline>
<codeline lineno="911"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="912"><highlight class="normal"></highlight></codeline>
<codeline lineno="913"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>7:<sp/></highlight><highlight class="comment">//<sp/>we<sp/>have<sp/>3<sp/>bits,<sp/>and<sp/>keep<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="914"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vchRet.push_back((left&lt;&lt;5)<sp/>|<sp/>dec);</highlight></codeline>
<codeline lineno="915"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mode<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="916"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="917"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="918"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="919"><highlight class="normal"></highlight></codeline>
<codeline lineno="920"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(pfInvalid)</highlight></codeline>
<codeline lineno="921"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(mode)</highlight></codeline>
<codeline lineno="922"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="923"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>0:<sp/></highlight><highlight class="comment">//<sp/>8n<sp/>base32<sp/>characters<sp/>processed:<sp/>ok</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="924"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="925"><highlight class="normal"></highlight></codeline>
<codeline lineno="926"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>1:<sp/></highlight><highlight class="comment">//<sp/>8n+1<sp/>base32<sp/>characters<sp/>processed:<sp/>impossible</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="927"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>3:<sp/></highlight><highlight class="comment">//<sp/><sp/><sp/>+3</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="928"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>6:<sp/></highlight><highlight class="comment">//<sp/><sp/><sp/>+6</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="929"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*pfInvalid<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="930"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="931"><highlight class="normal"></highlight></codeline>
<codeline lineno="932"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>2:<sp/></highlight><highlight class="comment">//<sp/>8n+2<sp/>base32<sp/>characters<sp/>processed:<sp/>require<sp/>&apos;======&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="933"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(left<sp/>||<sp/>p[0]<sp/>!=<sp/></highlight><highlight class="charliteral">&apos;=&apos;</highlight><highlight class="normal"><sp/>||<sp/>p[1]<sp/>!=<sp/></highlight><highlight class="charliteral">&apos;=&apos;</highlight><highlight class="normal"><sp/>||<sp/>p[2]<sp/>!=<sp/></highlight><highlight class="charliteral">&apos;=&apos;</highlight><highlight class="normal"><sp/>||<sp/>p[3]<sp/>!=<sp/></highlight><highlight class="charliteral">&apos;=&apos;</highlight><highlight class="normal"><sp/>||<sp/>p[4]<sp/>!=<sp/></highlight><highlight class="charliteral">&apos;=&apos;</highlight><highlight class="normal"><sp/>||<sp/>p[5]<sp/>!=<sp/></highlight><highlight class="charliteral">&apos;=&apos;</highlight><highlight class="normal"><sp/>||<sp/>decode32_table[(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">)p[6]]<sp/>!=<sp/>-1)</highlight></codeline>
<codeline lineno="934"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*pfInvalid<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="935"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="936"><highlight class="normal"></highlight></codeline>
<codeline lineno="937"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>4:<sp/></highlight><highlight class="comment">//<sp/>8n+4<sp/>base32<sp/>characters<sp/>processed:<sp/>require<sp/>&apos;====&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="938"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(left<sp/>||<sp/>p[0]<sp/>!=<sp/></highlight><highlight class="charliteral">&apos;=&apos;</highlight><highlight class="normal"><sp/>||<sp/>p[1]<sp/>!=<sp/></highlight><highlight class="charliteral">&apos;=&apos;</highlight><highlight class="normal"><sp/>||<sp/>p[2]<sp/>!=<sp/></highlight><highlight class="charliteral">&apos;=&apos;</highlight><highlight class="normal"><sp/>||<sp/>p[3]<sp/>!=<sp/></highlight><highlight class="charliteral">&apos;=&apos;</highlight><highlight class="normal"><sp/>||<sp/>decode32_table[(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">)p[4]]<sp/>!=<sp/>-1)</highlight></codeline>
<codeline lineno="939"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*pfInvalid<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="940"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="941"><highlight class="normal"></highlight></codeline>
<codeline lineno="942"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>5:<sp/></highlight><highlight class="comment">//<sp/>8n+5<sp/>base32<sp/>characters<sp/>processed:<sp/>require<sp/>&apos;===&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="943"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(left<sp/>||<sp/>p[0]<sp/>!=<sp/></highlight><highlight class="charliteral">&apos;=&apos;</highlight><highlight class="normal"><sp/>||<sp/>p[1]<sp/>!=<sp/></highlight><highlight class="charliteral">&apos;=&apos;</highlight><highlight class="normal"><sp/>||<sp/>p[2]<sp/>!=<sp/></highlight><highlight class="charliteral">&apos;=&apos;</highlight><highlight class="normal"><sp/>||<sp/>decode32_table[(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">)p[3]]<sp/>!=<sp/>-1)</highlight></codeline>
<codeline lineno="944"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*pfInvalid<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="945"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="946"><highlight class="normal"></highlight></codeline>
<codeline lineno="947"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>7:<sp/></highlight><highlight class="comment">//<sp/>8n+7<sp/>base32<sp/>characters<sp/>processed:<sp/>require<sp/>&apos;=&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="948"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(left<sp/>||<sp/>p[0]<sp/>!=<sp/></highlight><highlight class="charliteral">&apos;=&apos;</highlight><highlight class="normal"><sp/>||<sp/>decode32_table[(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">)p[1]]<sp/>!=<sp/>-1)</highlight></codeline>
<codeline lineno="949"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*pfInvalid<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="950"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="951"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="952"><highlight class="normal"></highlight></codeline>
<codeline lineno="953"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>vchRet;</highlight></codeline>
<codeline lineno="954"><highlight class="normal">}</highlight></codeline>
<codeline lineno="955"><highlight class="normal"></highlight></codeline>
<codeline lineno="956" refid="util_8cpp_1ab2bcbf931beb3b2a813db9daf09f265c" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/><ref refid="util_8cpp_1a8266fd137bc7f76f4a75024baab5c18f" kindref="member">DecodeBase32</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal">&amp;<sp/>str)</highlight></codeline>
<codeline lineno="957"><highlight class="normal">{</highlight></codeline>
<codeline lineno="958"><highlight class="normal"><sp/><sp/><sp/><sp/>vector&lt;unsigned<sp/>char&gt;<sp/>vchRet<sp/>=<sp/><ref refid="util_8cpp_1a8266fd137bc7f76f4a75024baab5c18f" kindref="member">DecodeBase32</ref>(str.c_str());</highlight></codeline>
<codeline lineno="959"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>string((</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*)&amp;vchRet[0],<sp/>vchRet.size());</highlight></codeline>
<codeline lineno="960"><highlight class="normal">}</highlight></codeline>
<codeline lineno="961"><highlight class="normal"></highlight></codeline>
<codeline lineno="962"><highlight class="normal"></highlight></codeline>
<codeline lineno="963" refid="util_8h_1a134e5ff2f94e103c1de7b642675546ca" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="util_8cpp_1a134e5ff2f94e103c1de7b642675546ca" kindref="member">WildcardMatch</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>psz,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>mask)</highlight></codeline>
<codeline lineno="964"><highlight class="normal">{</highlight></codeline>
<codeline lineno="965"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">true</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="966"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="967"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(*mask)</highlight></codeline>
<codeline lineno="968"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="969"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="970"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(*psz<sp/>==<sp/></highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="971"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;*&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="972"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="util_8cpp_1a134e5ff2f94e103c1de7b642675546ca" kindref="member">WildcardMatch</ref>(psz,<sp/>mask+1)<sp/>||<sp/>(*psz<sp/>&amp;&amp;<sp/><ref refid="util_8cpp_1a134e5ff2f94e103c1de7b642675546ca" kindref="member">WildcardMatch</ref>(psz+1,<sp/>mask));</highlight></codeline>
<codeline lineno="973"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;?&apos;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="974"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(*psz<sp/>==<sp/></highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="975"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="976"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="977"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="978"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(*psz<sp/>!=<sp/>*mask)</highlight></codeline>
<codeline lineno="979"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="980"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="981"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="982"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>psz++;</highlight></codeline>
<codeline lineno="983"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mask++;</highlight></codeline>
<codeline lineno="984"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="985"><highlight class="normal">}</highlight></codeline>
<codeline lineno="986"><highlight class="normal"></highlight></codeline>
<codeline lineno="987" refid="util_8cpp_1aac41a59b5975b5fc5d340d4ba0ab29ea" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="util_8cpp_1a134e5ff2f94e103c1de7b642675546ca" kindref="member">WildcardMatch</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal">&amp;<sp/>str,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal">&amp;<sp/>mask)</highlight></codeline>
<codeline lineno="988"><highlight class="normal">{</highlight></codeline>
<codeline lineno="989"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="util_8cpp_1a134e5ff2f94e103c1de7b642675546ca" kindref="member">WildcardMatch</ref>(str.c_str(),<sp/>mask.c_str());</highlight></codeline>
<codeline lineno="990"><highlight class="normal">}</highlight></codeline>
<codeline lineno="991"><highlight class="normal"></highlight></codeline>
<codeline lineno="992"><highlight class="normal"></highlight></codeline>
<codeline lineno="993" refid="utilstrencodings_8h_1a880a215d9e931432b095084c756a49bb" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="util_8cpp_1a880a215d9e931432b095084c756a49bb" kindref="member">ParseInt32</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>str,<sp/><ref refid="stdint_8h_1ab1967d8591af1a4e48c37fd2b0f184d0" kindref="member">int32_t</ref><sp/>*out)</highlight></codeline>
<codeline lineno="994"><highlight class="normal">{</highlight></codeline>
<codeline lineno="995"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*endp<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="996"><highlight class="normal"><sp/><sp/><sp/><sp/>errno<sp/>=<sp/>0;<sp/></highlight><highlight class="comment">//<sp/>strtol<sp/>will<sp/>not<sp/>set<sp/>errno<sp/>if<sp/>valid</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="997"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n<sp/>=<sp/>strtol(str.c_str(),<sp/>&amp;endp,<sp/>10);</highlight></codeline>
<codeline lineno="998"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(out)<sp/>*out<sp/>=<sp/>(int)n;</highlight></codeline>
<codeline lineno="999"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Note<sp/>that<sp/>strtol<sp/>returns<sp/>a<sp/>*long<sp/>int*,<sp/>so<sp/>even<sp/>if<sp/>strtol<sp/>doesn&apos;t<sp/>report<sp/>a<sp/>over/underflow</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1000"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>we<sp/>still<sp/>have<sp/>to<sp/>check<sp/>that<sp/>the<sp/>returned<sp/>value<sp/>is<sp/>within<sp/>the<sp/>range<sp/>of<sp/>an<sp/>*int32_t*.<sp/>On<sp/>64-bit</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1001"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>platforms<sp/>the<sp/>size<sp/>of<sp/>these<sp/>types<sp/>may<sp/>be<sp/>different.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1002"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>endp<sp/>&amp;&amp;<sp/>*endp<sp/>==<sp/>0<sp/>&amp;&amp;<sp/>!errno<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="1003"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>n<sp/>&gt;=<sp/>std::numeric_limits&lt;int32_t&gt;::min()<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="1004"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>n<sp/>&lt;=<sp/>std::numeric_limits&lt;int32_t&gt;::max();</highlight></codeline>
<codeline lineno="1005"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1006"><highlight class="normal"></highlight></codeline>
<codeline lineno="1007" refid="utilstrencodings_8h_1ab754c84a5a52f6853642e86447ce460e" refkind="member"><highlight class="normal">std::string<sp/><ref refid="util_8cpp_1a3eded752d24f2ca1ad72f6907dd23832" kindref="member">FormatParagraph</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>in,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>width,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>indent)</highlight></codeline>
<codeline lineno="1008"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1009"><highlight class="normal"><sp/><sp/><sp/><sp/>std::stringstream<sp/>out;</highlight></codeline>
<codeline lineno="1010"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>col<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1011"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>ptr<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1012"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(ptr<sp/>&lt;<sp/>in.size())</highlight></codeline>
<codeline lineno="1013"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1014"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Find<sp/>beginning<sp/>of<sp/>next<sp/>word</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1015"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ptr<sp/>=<sp/>in.find_first_not_of(</highlight><highlight class="charliteral">&apos;<sp/>&apos;</highlight><highlight class="normal">,<sp/>ptr);</highlight></codeline>
<codeline lineno="1016"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ptr<sp/>==<sp/>std::string::npos)</highlight></codeline>
<codeline lineno="1017"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1018"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Find<sp/>end<sp/>of<sp/>next<sp/>word</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1019"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>endword<sp/>=<sp/>in.find_first_of(</highlight><highlight class="charliteral">&apos;<sp/>&apos;</highlight><highlight class="normal">,<sp/>ptr);</highlight></codeline>
<codeline lineno="1020"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(endword<sp/>==<sp/>std::string::npos)</highlight></codeline>
<codeline lineno="1021"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>endword<sp/>=<sp/>in.size();</highlight></codeline>
<codeline lineno="1022"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Add<sp/>newline<sp/>and<sp/>indentation<sp/>if<sp/>this<sp/>wraps<sp/>over<sp/>the<sp/>allowed<sp/>width</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1023"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(col<sp/>&gt;<sp/>0)</highlight></codeline>
<codeline lineno="1024"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1025"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((col<sp/>+<sp/>endword<sp/>-<sp/>ptr)<sp/>&gt;<sp/>width)</highlight></codeline>
<codeline lineno="1026"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1027"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>out<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1028"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i=0;<sp/>i&lt;indent;<sp/>++i)</highlight></codeline>
<codeline lineno="1029"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>out<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;<sp/>&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1030"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>col<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1031"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1032"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>out<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;<sp/>&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1033"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1034"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Append<sp/>word</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1035"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>out<sp/>&lt;&lt;<sp/>in.substr(ptr,<sp/>endword<sp/>-<sp/>ptr);</highlight></codeline>
<codeline lineno="1036"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>col<sp/>+=<sp/>endword<sp/>-<sp/>ptr<sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="1037"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ptr<sp/>=<sp/>endword;</highlight></codeline>
<codeline lineno="1038"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1039"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>out.str();</highlight></codeline>
<codeline lineno="1040"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1041"><highlight class="normal"></highlight></codeline>
<codeline lineno="1042"><highlight class="normal"></highlight></codeline>
<codeline lineno="1043"><highlight class="normal"></highlight></codeline>
<codeline lineno="1044"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>std::string<sp/>FormatException(std::exception*<sp/>pex,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>pszThread)</highlight></codeline>
<codeline lineno="1045"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1046"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>WIN32</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1047"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>pszModule[<ref refid="util_8h_1ab99ded389af74001a6298fc9e44e74e5" kindref="member">MAX_PATH</ref>]<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1048"><highlight class="normal"><sp/><sp/><sp/><sp/>GetModuleFileNameA(NULL,<sp/>pszModule,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(pszModule));</highlight></codeline>
<codeline lineno="1049"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1050"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>pszModule<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;darksilk&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1051"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1052"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(pex)</highlight></codeline>
<codeline lineno="1053"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="tinyformat_8h_1a56c674871a61baaad36ad52238c08857" kindref="member">strprintf</ref>(</highlight></codeline>
<codeline lineno="1054"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;EXCEPTION:<sp/>%s<sp/><sp/><sp/><sp/><sp/><sp/><sp/>\n%s<sp/><sp/><sp/><sp/><sp/><sp/><sp/>\n%s<sp/>in<sp/>%s<sp/><sp/><sp/><sp/><sp/><sp/><sp/>\n&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">typeid</highlight><highlight class="normal">(*pex).name(),<sp/>pex-&gt;what(),<sp/>pszModule,<sp/>pszThread);</highlight></codeline>
<codeline lineno="1055"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1056"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="tinyformat_8h_1a56c674871a61baaad36ad52238c08857" kindref="member">strprintf</ref>(</highlight></codeline>
<codeline lineno="1057"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;UNKNOWN<sp/>EXCEPTION<sp/><sp/><sp/><sp/><sp/><sp/><sp/>\n%s<sp/>in<sp/>%s<sp/><sp/><sp/><sp/><sp/><sp/><sp/>\n&quot;</highlight><highlight class="normal">,<sp/>pszModule,<sp/>pszThread);</highlight></codeline>
<codeline lineno="1058"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1059"><highlight class="normal"></highlight></codeline>
<codeline lineno="1060" refid="util_8h_1a379b2307f40ae5dba4dd56a0156fa36e" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="util_8cpp_1a379b2307f40ae5dba4dd56a0156fa36e" kindref="member">PrintException</ref>(std::exception*<sp/>pex,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>pszThread)</highlight></codeline>
<codeline lineno="1061"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1062"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>message<sp/>=<sp/>FormatException(pex,<sp/>pszThread);</highlight></codeline>
<codeline lineno="1063"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="util_8h_1afc02c0a4258fedfb316be612bb659ba8" kindref="member">LogPrintf</ref>(</highlight><highlight class="stringliteral">&quot;\n\n************************\n%s\n&quot;</highlight><highlight class="normal">,<sp/>message);</highlight></codeline>
<codeline lineno="1064"><highlight class="normal"><sp/><sp/><sp/><sp/>fprintf(stderr,<sp/></highlight><highlight class="stringliteral">&quot;\n\n************************\n%s\n&quot;</highlight><highlight class="normal">,<sp/>message.c_str());</highlight></codeline>
<codeline lineno="1065"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="util_8cpp_1a396fd0b4e52260e1ddf379fa6e09d887" kindref="member">strMiscWarning</ref><sp/>=<sp/>message;</highlight></codeline>
<codeline lineno="1066"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1067"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1068"><highlight class="normal"></highlight></codeline>
<codeline lineno="1069" refid="util_8h_1a477231880f761159de1567ad6fb98fac" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="util_8cpp_1a477231880f761159de1567ad6fb98fac" kindref="member">PrintExceptionContinue</ref>(std::exception*<sp/>pex,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>pszThread)</highlight></codeline>
<codeline lineno="1070"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1071"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>message<sp/>=<sp/>FormatException(pex,<sp/>pszThread);</highlight></codeline>
<codeline lineno="1072"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="util_8h_1afc02c0a4258fedfb316be612bb659ba8" kindref="member">LogPrintf</ref>(</highlight><highlight class="stringliteral">&quot;\n\n************************\n%s\n&quot;</highlight><highlight class="normal">,<sp/>message);</highlight></codeline>
<codeline lineno="1073"><highlight class="normal"><sp/><sp/><sp/><sp/>fprintf(stderr,<sp/></highlight><highlight class="stringliteral">&quot;\n\n************************\n%s\n&quot;</highlight><highlight class="normal">,<sp/>message.c_str());</highlight></codeline>
<codeline lineno="1074"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="util_8cpp_1a396fd0b4e52260e1ddf379fa6e09d887" kindref="member">strMiscWarning</ref><sp/>=<sp/>message;</highlight></codeline>
<codeline lineno="1075"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1076"><highlight class="normal"></highlight></codeline>
<codeline lineno="1077" refid="util_8h_1ab272995de020a3bcbf743be630e485c6" refkind="member"><highlight class="normal">boost::filesystem::path<sp/><ref refid="util_8cpp_1ab272995de020a3bcbf743be630e485c6" kindref="member">GetDefaultDataDir</ref>()</highlight></codeline>
<codeline lineno="1078"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1079"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">fs<sp/>=<sp/>boost::filesystem;</highlight></codeline>
<codeline lineno="1080"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Windows<sp/>&lt;<sp/>Vista:<sp/>C:\Documents<sp/>and<sp/>Settings\Username\Application<sp/>Data\DarkSilk</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1081"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Windows<sp/>&gt;=<sp/>Vista:<sp/>C:\Users\Username\AppData\Roaming\DarkSilk</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1082"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Mac:<sp/>~/Library/Application<sp/>Support/DarkSilk</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1083"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Unix:<sp/>~/.darksilk</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1084"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>WIN32</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1085"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Windows</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1086"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>GetSpecialFolderPath(CSIDL_APPDATA)<sp/>/<sp/></highlight><highlight class="stringliteral">&quot;DarkSilk&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1087"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1088"><highlight class="normal"><sp/><sp/><sp/><sp/>fs::path<sp/>pathRet;</highlight></codeline>
<codeline lineno="1089"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>pszHome<sp/>=<sp/>getenv(</highlight><highlight class="stringliteral">&quot;HOME&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1090"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(pszHome<sp/>==<sp/>NULL<sp/>||<sp/>strlen(pszHome)<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="1091"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pathRet<sp/>=<sp/>fs::path(</highlight><highlight class="stringliteral">&quot;/&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1092"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1093"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pathRet<sp/>=<sp/>fs::path(pszHome);</highlight></codeline>
<codeline lineno="1094"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>MAC_OSX</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1095"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Mac</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1096"><highlight class="normal"><sp/><sp/><sp/><sp/>pathRet<sp/>/=<sp/></highlight><highlight class="stringliteral">&quot;Library/Application<sp/>Support&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1097"><highlight class="normal"><sp/><sp/><sp/><sp/>fs::create_directory(pathRet);</highlight></codeline>
<codeline lineno="1098"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>pathRet<sp/>/<sp/></highlight><highlight class="stringliteral">&quot;DarkSilk&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1099"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1100"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Unix</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1101"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>pathRet<sp/>/<sp/></highlight><highlight class="stringliteral">&quot;.darksilk&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1102"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1103"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1104"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1105"><highlight class="normal"></highlight></codeline>
<codeline lineno="1106"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>boost::filesystem::path<sp/>pathCached[<ref refid="class_c_chain_params_1a5c4bb1d7c0205399ff06ee58fab7f176ac930c321a94adf771179465e98c13674" kindref="member">CChainParams::MAX_NETWORK_TYPES</ref>+1];</highlight></codeline>
<codeline lineno="1107"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="class_annotated_mixin" kindref="compound">CCriticalSection</ref><sp/>csPathCached;</highlight></codeline>
<codeline lineno="1108"><highlight class="normal"></highlight></codeline>
<codeline lineno="1109" refid="util_8h_1a0d247b470b387d7cd3f039bd26166007" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>boost::filesystem::path<sp/>&amp;<ref refid="util_8cpp_1ab83866a054745d4b30a3948a1b44beba" kindref="member">GetDataDir</ref>(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>fNetSpecific)</highlight></codeline>
<codeline lineno="1110"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1111"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">fs<sp/>=<sp/>boost::filesystem;</highlight></codeline>
<codeline lineno="1112"><highlight class="normal"></highlight></codeline>
<codeline lineno="1113"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="sync_8h_1a911fe23f057c2fe5aad629162d6c99d0" kindref="member">LOCK</ref>(csPathCached);</highlight></codeline>
<codeline lineno="1114"><highlight class="normal"></highlight></codeline>
<codeline lineno="1115"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nNet<sp/>=<sp/><ref refid="class_c_chain_params_1a5c4bb1d7c0205399ff06ee58fab7f176ac930c321a94adf771179465e98c13674" kindref="member">CChainParams::MAX_NETWORK_TYPES</ref>;</highlight></codeline>
<codeline lineno="1116"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fNetSpecific)<sp/>nNet<sp/>=<sp/><ref refid="chainparams_8cpp_1ace5c5b706d71a324a417dd2db394fd4a" kindref="member">Params</ref>().<ref refid="class_c_chain_params_1a90dc493ec0c0325c98c3ac06eb99862b" kindref="member">NetworkID</ref>();</highlight></codeline>
<codeline lineno="1117"><highlight class="normal"></highlight></codeline>
<codeline lineno="1118"><highlight class="normal"><sp/><sp/><sp/><sp/>fs::path<sp/>&amp;path<sp/>=<sp/>pathCached[nNet];</highlight></codeline>
<codeline lineno="1119"><highlight class="normal"></highlight></codeline>
<codeline lineno="1120"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>This<sp/>can<sp/>be<sp/>called<sp/>during<sp/>exceptions<sp/>by<sp/>LogPrintf(),<sp/>so<sp/>we<sp/>cache<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1121"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>value<sp/>so<sp/>we<sp/>don&apos;t<sp/>have<sp/>to<sp/>do<sp/>memory<sp/>allocations<sp/>after<sp/>that.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1122"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!path.empty())</highlight></codeline>
<codeline lineno="1123"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>path;</highlight></codeline>
<codeline lineno="1124"><highlight class="normal"></highlight></codeline>
<codeline lineno="1125"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="util_8cpp_1a0502b74b88db99500ee21dcb446311e5" kindref="member">mapArgs</ref>.count(</highlight><highlight class="stringliteral">&quot;-datadir&quot;</highlight><highlight class="normal">))<sp/>{</highlight></codeline>
<codeline lineno="1126"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>path<sp/>=<sp/>fs::system_complete(<ref refid="util_8cpp_1a0502b74b88db99500ee21dcb446311e5" kindref="member">mapArgs</ref>[</highlight><highlight class="stringliteral">&quot;-datadir&quot;</highlight><highlight class="normal">]);</highlight></codeline>
<codeline lineno="1127"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!fs::is_directory(path))<sp/>{</highlight></codeline>
<codeline lineno="1128"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>path<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1129"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>path;</highlight></codeline>
<codeline lineno="1130"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1131"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1132"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>path<sp/>=<sp/><ref refid="util_8cpp_1ab272995de020a3bcbf743be630e485c6" kindref="member">GetDefaultDataDir</ref>();</highlight></codeline>
<codeline lineno="1133"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1134"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fNetSpecific)</highlight></codeline>
<codeline lineno="1135"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>path<sp/>/=<sp/><ref refid="chainparams_8cpp_1ace5c5b706d71a324a417dd2db394fd4a" kindref="member">Params</ref>().<ref refid="class_c_chain_params_1ad11dd170e65650ff4b12d45a32b9c774" kindref="member">DataDir</ref>();</highlight></codeline>
<codeline lineno="1136"><highlight class="normal"></highlight></codeline>
<codeline lineno="1137"><highlight class="normal"><sp/><sp/><sp/><sp/>fs::create_directory(path);</highlight></codeline>
<codeline lineno="1138"><highlight class="normal"></highlight></codeline>
<codeline lineno="1139"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>path;</highlight></codeline>
<codeline lineno="1140"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1141"><highlight class="normal"></highlight></codeline>
<codeline lineno="1142" refid="util_8cpp_1abfb50dfe077aced7591f2aba601f605d" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="util_8cpp_1abfb50dfe077aced7591f2aba601f605d" kindref="member">ClearDatadirCache</ref>()</highlight></codeline>
<codeline lineno="1143"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1144"><highlight class="normal"><sp/><sp/><sp/><sp/>std::fill(&amp;pathCached[0],<sp/>&amp;pathCached[<ref refid="class_c_chain_params_1a5c4bb1d7c0205399ff06ee58fab7f176ac930c321a94adf771179465e98c13674" kindref="member">CChainParams::MAX_NETWORK_TYPES</ref>+1],</highlight></codeline>
<codeline lineno="1145"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>boost::filesystem::path());</highlight></codeline>
<codeline lineno="1146"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1147"><highlight class="normal"></highlight></codeline>
<codeline lineno="1148" refid="util_8h_1a7d86fadf98dfaba55f80b9be0ab0f978" refkind="member"><highlight class="normal">boost::filesystem::path<sp/><ref refid="util_8cpp_1a7d86fadf98dfaba55f80b9be0ab0f978" kindref="member">GetConfigFile</ref>()</highlight></codeline>
<codeline lineno="1149"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1150"><highlight class="normal"><sp/><sp/><sp/><sp/>boost::filesystem::path<sp/>pathConfigFile(<ref refid="util_8cpp_1a24f685720bf40370e5bd2a192ad50cd8" kindref="member">GetArg</ref>(</highlight><highlight class="stringliteral">&quot;-conf&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;darksilk.conf&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="1151"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!pathConfigFile.is_complete())<sp/>pathConfigFile<sp/>=<sp/><ref refid="util_8cpp_1ab83866a054745d4b30a3948a1b44beba" kindref="member">GetDataDir</ref>()<sp/>/<sp/>pathConfigFile;</highlight></codeline>
<codeline lineno="1152"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>pathConfigFile;</highlight></codeline>
<codeline lineno="1153"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1154"><highlight class="normal"></highlight></codeline>
<codeline lineno="1155" refid="util_8h_1a424ea7e15366f453189c6b977f14b420" refkind="member"><highlight class="normal">boost::filesystem::path<sp/><ref refid="util_8cpp_1a424ea7e15366f453189c6b977f14b420" kindref="member">GetStormnodeConfigFile</ref>()</highlight></codeline>
<codeline lineno="1156"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1157"><highlight class="normal"><sp/><sp/><sp/><sp/>boost::filesystem::path<sp/>pathConfigFile(<ref refid="util_8cpp_1a24f685720bf40370e5bd2a192ad50cd8" kindref="member">GetArg</ref>(</highlight><highlight class="stringliteral">&quot;-snconf&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;stormnode.conf&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="1158"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!pathConfigFile.is_complete())<sp/>pathConfigFile<sp/>=<sp/><ref refid="util_8cpp_1ab83866a054745d4b30a3948a1b44beba" kindref="member">GetDataDir</ref>()<sp/>/<sp/>pathConfigFile;</highlight></codeline>
<codeline lineno="1159"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>pathConfigFile;</highlight></codeline>
<codeline lineno="1160"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1161"><highlight class="normal"></highlight></codeline>
<codeline lineno="1162" refid="util_8h_1aa968b3d087118c9a4913566b31c7ae4b" refkind="member"><highlight class="normal">std::string<sp/><ref refid="util_8cpp_1a016054b32fbbc241353faf86a94eae9b" kindref="member">GenerateRandomString</ref>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>len)<sp/>{</highlight></codeline>
<codeline lineno="1163"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(len<sp/>==<sp/>0){</highlight></codeline>
<codeline lineno="1164"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>len<sp/>=<sp/>24;</highlight></codeline>
<codeline lineno="1165"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1166"><highlight class="normal"><sp/><sp/><sp/><sp/>srand(time(NULL)<sp/>+<sp/>len);<sp/></highlight><highlight class="comment">//seed<sp/>srand<sp/>before<sp/>using</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1167"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>s[len];</highlight></codeline>
<codeline lineno="1168"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>alphanum[]<sp/>=</highlight></codeline>
<codeline lineno="1169"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;0123456789&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1170"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;ABCDEFGHIJKLMNOPQRSTUVWXYZ&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1171"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;abcdefghijklmnopqrstuvwxyz&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1172"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;@*[]{}+-~&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1173"><highlight class="normal"></highlight></codeline>
<codeline lineno="1174"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>len;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="1175"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s[i]<sp/>=<sp/>alphanum[<ref refid="db__bench_8cc_1a2391b9dab13f09bae65ae349c8d4c271" kindref="member">rand</ref>()<sp/>%<sp/>(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(alphanum)<sp/>-<sp/>1)];</highlight></codeline>
<codeline lineno="1176"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1177"><highlight class="normal"><sp/><sp/><sp/><sp/>s[len]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1178"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>sPassword(s);</highlight></codeline>
<codeline lineno="1179"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>sPassword;</highlight></codeline>
<codeline lineno="1180"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1181"><highlight class="normal"></highlight></codeline>
<codeline lineno="1182" refid="util_8h_1a680db3065fcd18a556ea6e1fc977e3b0" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="util_8cpp_1a680db3065fcd18a556ea6e1fc977e3b0" kindref="member">RandomIntegerRange</ref>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nMin,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nMax)</highlight></codeline>
<codeline lineno="1183"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1184"><highlight class="normal"><sp/><sp/>srand(time(NULL)<sp/>+<sp/>nMax);<sp/></highlight><highlight class="comment">//seed<sp/>srand<sp/>before<sp/>using</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1185"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>nMin<sp/>+<sp/><ref refid="db__bench_8cc_1a2391b9dab13f09bae65ae349c8d4c271" kindref="member">rand</ref>()<sp/>%<sp/>(nMax<sp/>-<sp/>nMin)<sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="1186"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1187"><highlight class="normal"></highlight></codeline>
<codeline lineno="1188" refid="util_8h_1a22a2db2aea31bc8220b804147c1a82db" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="util_8cpp_1a22a2db2aea31bc8220b804147c1a82db" kindref="member">WriteConfigFile</ref>(FILE*<sp/>configFile)</highlight></codeline>
<codeline lineno="1189"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1190"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>sRPCpassword<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;rpcpassword=&quot;</highlight><highlight class="normal"><sp/>+<sp/><ref refid="util_8cpp_1a016054b32fbbc241353faf86a94eae9b" kindref="member">GenerateRandomString</ref>(<ref refid="util_8cpp_1a680db3065fcd18a556ea6e1fc977e3b0" kindref="member">RandomIntegerRange</ref>(18,<sp/>24))<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1191"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>sUserID<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;rpcuser=&quot;</highlight><highlight class="normal"><sp/>+<sp/><ref refid="util_8cpp_1a016054b32fbbc241353faf86a94eae9b" kindref="member">GenerateRandomString</ref>(<ref refid="util_8cpp_1a680db3065fcd18a556ea6e1fc977e3b0" kindref="member">RandomIntegerRange</ref>(7,<sp/>11))<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1192"><highlight class="normal"><sp/><sp/><sp/><sp/>fputs<sp/>(sUserID.c_str(),<sp/>configFile);</highlight></codeline>
<codeline lineno="1193"><highlight class="normal"><sp/><sp/><sp/><sp/>fputs<sp/>(sRPCpassword.c_str(),<sp/>configFile);</highlight></codeline>
<codeline lineno="1194"><highlight class="normal"><sp/><sp/><sp/><sp/>fputs<sp/>(</highlight><highlight class="stringliteral">&quot;server=1\n&quot;</highlight><highlight class="normal">,<sp/>configFile);</highlight></codeline>
<codeline lineno="1195"><highlight class="normal"><sp/><sp/><sp/><sp/>fputs<sp/>(</highlight><highlight class="stringliteral">&quot;rpcport=31500\n&quot;</highlight><highlight class="normal">,<sp/>configFile);<sp/></highlight><highlight class="comment">//TODO<sp/>(Amir):<sp/>use<sp/>default<sp/>rpcport<sp/>instead...</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1196"><highlight class="normal"><sp/><sp/><sp/><sp/>fputs<sp/>(</highlight><highlight class="stringliteral">&quot;gen=1\n&quot;</highlight><highlight class="normal"><sp/>,configFile);</highlight></codeline>
<codeline lineno="1197"><highlight class="normal"><sp/><sp/><sp/><sp/>fputs<sp/>(</highlight><highlight class="stringliteral">&quot;listen=1\n&quot;</highlight><highlight class="normal">,<sp/>configFile);</highlight></codeline>
<codeline lineno="1198"><highlight class="normal"><sp/><sp/><sp/><sp/>fputs<sp/>(</highlight><highlight class="stringliteral">&quot;testnet=0\n&quot;</highlight><highlight class="normal">,<sp/>configFile);</highlight></codeline>
<codeline lineno="1199"><highlight class="normal"><sp/><sp/><sp/><sp/>fputs<sp/>(</highlight><highlight class="stringliteral">&quot;daemon=1\n&quot;</highlight><highlight class="normal">,<sp/>configFile);</highlight></codeline>
<codeline lineno="1200"><highlight class="normal"><sp/><sp/><sp/><sp/>fputs<sp/>(</highlight><highlight class="stringliteral">&quot;rpcallow=0\n&quot;</highlight><highlight class="normal">,<sp/>configFile);</highlight></codeline>
<codeline lineno="1201"><highlight class="normal"><sp/><sp/><sp/><sp/>fputs<sp/>(</highlight><highlight class="stringliteral">&quot;rpcallowip=127.0.0.1\n&quot;</highlight><highlight class="normal">,<sp/>configFile);</highlight></codeline>
<codeline lineno="1202"><highlight class="normal"><sp/><sp/><sp/><sp/>fputs<sp/>(</highlight><highlight class="stringliteral">&quot;addnode=159.203.21.45:31000\n&quot;</highlight><highlight class="normal">,<sp/>configFile);<sp/></highlight><highlight class="comment">//TODO<sp/>(Amir):<sp/>removed<sp/>hardcoded<sp/>addnode...</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1203"><highlight class="normal"><sp/><sp/><sp/><sp/>fclose(configFile);</highlight></codeline>
<codeline lineno="1204"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1205"><highlight class="normal"></highlight></codeline>
<codeline lineno="1206" refid="util_8h_1a990b64b5cc5ec1ba733a834916f4c0a7" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="util_8cpp_1a990b64b5cc5ec1ba733a834916f4c0a7" kindref="member">FileExists</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*fileName)</highlight></codeline>
<codeline lineno="1207"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1208"><highlight class="normal"><sp/><sp/><sp/><sp/>std::ifstream<sp/>infile(fileName);</highlight></codeline>
<codeline lineno="1209"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>infile.good();</highlight></codeline>
<codeline lineno="1210"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1211"><highlight class="normal"></highlight></codeline>
<codeline lineno="1212" refid="util_8cpp_1a27ba417174a3ee63cb8ee1abb279a668" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="util_8cpp_1a27ba417174a3ee63cb8ee1abb279a668" kindref="member">ReadConfigFile</ref>(map&lt;string,<sp/>string&gt;&amp;<sp/>mapSettingsRet,</highlight></codeline>
<codeline lineno="1213"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>map&lt;</highlight><highlight class="keywordtype">string</highlight><highlight class="normal">,<sp/>vector&lt;string&gt;<sp/>&gt;&amp;<sp/>mapMultiSettingsRet)</highlight></codeline>
<codeline lineno="1214"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1215"><highlight class="normal"><sp/><sp/><sp/><sp/>boost::filesystem::ifstream<sp/>streamConfig(<ref refid="util_8cpp_1a7d86fadf98dfaba55f80b9be0ab0f978" kindref="member">GetConfigFile</ref>());</highlight></codeline>
<codeline lineno="1216"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!streamConfig.good()){</highlight></codeline>
<codeline lineno="1217"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Create<sp/>darksilk.conf<sp/>if<sp/>it<sp/>does<sp/>not<sp/>exist</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1218"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FILE*<sp/>configFile<sp/>=<sp/>fopen(<ref refid="util_8cpp_1a7d86fadf98dfaba55f80b9be0ab0f978" kindref="member">GetConfigFile</ref>().</highlight><highlight class="keywordtype">string</highlight><highlight class="normal">().c_str(),<sp/></highlight><highlight class="stringliteral">&quot;a&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1219"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(configFile<sp/>!=<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="1220"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Write<sp/>darksilk.conf<sp/>file<sp/>with<sp/>random<sp/>username<sp/>and<sp/>password.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1221"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="util_8cpp_1a22a2db2aea31bc8220b804147c1a82db" kindref="member">WriteConfigFile</ref>(configFile);</highlight></codeline>
<codeline lineno="1222"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>New<sp/>darksilk.conf<sp/>file<sp/>written,<sp/>now<sp/>read<sp/>it.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1223"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1224"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1225"><highlight class="normal"></highlight></codeline>
<codeline lineno="1226"><highlight class="normal"><sp/><sp/><sp/><sp/>set&lt;string&gt;<sp/>setOptions;</highlight></codeline>
<codeline lineno="1227"><highlight class="normal"><sp/><sp/><sp/><sp/>setOptions.insert(</highlight><highlight class="stringliteral">&quot;*&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1228"><highlight class="normal"></highlight></codeline>
<codeline lineno="1229"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(boost::program_options::detail::config_file_iterator<sp/>it(streamConfig,<sp/>setOptions),<sp/>end;<sp/>it<sp/>!=<sp/>end;<sp/>++it)</highlight></codeline>
<codeline lineno="1230"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1231"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Don&apos;t<sp/>overwrite<sp/>existing<sp/>settings<sp/>so<sp/>command<sp/>line<sp/>settings<sp/>override<sp/>darksilk.conf</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1232"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>strKey<sp/>=<sp/>string(</highlight><highlight class="stringliteral">&quot;-&quot;</highlight><highlight class="normal">)<sp/>+<sp/>it-&gt;string_key;</highlight></codeline>
<codeline lineno="1233"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mapSettingsRet.count(strKey)<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="1234"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1235"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mapSettingsRet[strKey]<sp/>=<sp/>it-&gt;value[0];</highlight></codeline>
<codeline lineno="1236"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>interpret<sp/>nofoo=1<sp/>as<sp/>foo=0<sp/>(and<sp/>nofoo=0<sp/>as<sp/>foo=1)<sp/>as<sp/>long<sp/>as<sp/>foo<sp/>not<sp/>set)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1237"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>InterpretNegativeSetting(strKey,<sp/>mapSettingsRet);</highlight></codeline>
<codeline lineno="1238"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1239"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mapMultiSettingsRet[strKey].push_back(it-&gt;value[0]);</highlight></codeline>
<codeline lineno="1240"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1241"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>datadir<sp/>is<sp/>changed<sp/>in<sp/>.conf<sp/>file:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1242"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="util_8cpp_1abfb50dfe077aced7591f2aba601f605d" kindref="member">ClearDatadirCache</ref>();</highlight></codeline>
<codeline lineno="1243"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1244"><highlight class="normal"></highlight></codeline>
<codeline lineno="1245" refid="util_8h_1a91d2f3eb3a1bb92ab4eb1bd4b713a99e" refkind="member"><highlight class="normal">boost::filesystem::path<sp/><ref refid="util_8cpp_1a91d2f3eb3a1bb92ab4eb1bd4b713a99e" kindref="member">GetPidFile</ref>()</highlight></codeline>
<codeline lineno="1246"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1247"><highlight class="normal"><sp/><sp/><sp/><sp/>boost::filesystem::path<sp/>pathPidFile(<ref refid="util_8cpp_1a24f685720bf40370e5bd2a192ad50cd8" kindref="member">GetArg</ref>(</highlight><highlight class="stringliteral">&quot;-pid&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;darksilkd.pid&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="1248"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!pathPidFile.is_complete())<sp/>pathPidFile<sp/>=<sp/><ref refid="util_8cpp_1ab83866a054745d4b30a3948a1b44beba" kindref="member">GetDataDir</ref>()<sp/>/<sp/>pathPidFile;</highlight></codeline>
<codeline lineno="1249"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>pathPidFile;</highlight></codeline>
<codeline lineno="1250"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1251"><highlight class="normal"></highlight></codeline>
<codeline lineno="1252"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>WIN32</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1253" refid="util_8h_1a0ec1d8fc76760232b016335fdcf7c539" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="util_8cpp_1a0ec1d8fc76760232b016335fdcf7c539" kindref="member">CreatePidFile</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>boost::filesystem::path<sp/>&amp;path,<sp/>pid_t<sp/>pid)</highlight></codeline>
<codeline lineno="1254"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1255"><highlight class="normal"><sp/><sp/><sp/><sp/>FILE*<sp/>file<sp/>=<sp/>fopen(path.string().c_str(),<sp/></highlight><highlight class="stringliteral">&quot;w&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1256"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(file)</highlight></codeline>
<codeline lineno="1257"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1258"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(file,<sp/></highlight><highlight class="stringliteral">&quot;%d\n&quot;</highlight><highlight class="normal">,<sp/>pid);</highlight></codeline>
<codeline lineno="1259"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fclose(file);</highlight></codeline>
<codeline lineno="1260"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1261"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1262"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1263"><highlight class="normal"></highlight></codeline>
<codeline lineno="1264" refid="util_8h_1ad8f8509a84cc6f53344a5ac76369c327" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="util_8cpp_1ad8f8509a84cc6f53344a5ac76369c327" kindref="member">RenameOver</ref>(boost::filesystem::path<sp/>src,<sp/>boost::filesystem::path<sp/>dest)</highlight></codeline>
<codeline lineno="1265"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1266"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>WIN32</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1267"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>MoveFileExA(src.string().c_str(),<sp/>dest.string().c_str(),</highlight></codeline>
<codeline lineno="1268"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MOVEFILE_REPLACE_EXISTING);</highlight></codeline>
<codeline lineno="1269"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1270"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>rc<sp/>=<sp/>std::rename(src.string().c_str(),<sp/>dest.string().c_str());</highlight></codeline>
<codeline lineno="1271"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(rc<sp/>==<sp/>0);</highlight></codeline>
<codeline lineno="1272"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>WIN32<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1273"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1274"><highlight class="normal"></highlight></codeline>
<codeline lineno="1280" refid="util_8h_1a4458ca67cacd593b21c8e1386d192064" refkind="member"><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="util_8cpp_1a4458ca67cacd593b21c8e1386d192064" kindref="member">TryCreateDirectory</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>boost::filesystem::path&amp;<sp/>p)</highlight></codeline>
<codeline lineno="1281"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1282"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">try</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1283"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1284"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>boost::filesystem::create_directory(p);</highlight></codeline>
<codeline lineno="1285"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">catch</highlight><highlight class="normal"><sp/>(boost::filesystem::filesystem_error)<sp/>{</highlight></codeline>
<codeline lineno="1286"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!boost::filesystem::exists(p)<sp/>||<sp/>!boost::filesystem::is_directory(p))</highlight></codeline>
<codeline lineno="1287"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1288"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1289"><highlight class="normal"></highlight></codeline>
<codeline lineno="1290"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>create_directory<sp/>didn&apos;t<sp/>create<sp/>the<sp/>directory,<sp/>it<sp/>had<sp/>to<sp/>have<sp/>existed<sp/>already</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1291"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1292"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1293"><highlight class="normal"></highlight></codeline>
<codeline lineno="1294" refid="util_8h_1a7572b77c2a5191de8d40d4050322ab84" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="util_8cpp_1a7572b77c2a5191de8d40d4050322ab84" kindref="member">FileCommit</ref>(FILE<sp/>*fileout)</highlight></codeline>
<codeline lineno="1295"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1296"><highlight class="normal"><sp/><sp/><sp/><sp/>fflush(fileout);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>harmless<sp/>if<sp/>redundantly<sp/>called</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1297"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>WIN32</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1298"><highlight class="normal"><sp/><sp/><sp/><sp/>_commit(_fileno(fileout));</highlight></codeline>
<codeline lineno="1299"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1300"><highlight class="normal"><sp/><sp/><sp/><sp/>fsync(fileno(fileout));</highlight></codeline>
<codeline lineno="1301"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1302"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1303"><highlight class="normal"></highlight></codeline>
<codeline lineno="1304" refid="util_8h_1accff8f395fb4e283af38111daf096f0d" refkind="member"><highlight class="normal">std::string<sp/><ref refid="util_8cpp_1accff8f395fb4e283af38111daf096f0d" kindref="member">getTimeString</ref>(<ref refid="stdint_8h_1adec1df1b8b51cb32b77e5b86fff46471" kindref="member">int64_t</ref><sp/>timestamp,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*buffer,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>nBuffer)</highlight></codeline>
<codeline lineno="1305"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1306"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">tm*<sp/>dt;</highlight></codeline>
<codeline lineno="1307"><highlight class="normal"><sp/><sp/><sp/><sp/>time_t<sp/>t<sp/>=<sp/>timestamp;</highlight></codeline>
<codeline lineno="1308"><highlight class="normal"><sp/><sp/><sp/><sp/>dt<sp/>=<sp/>localtime(&amp;t);</highlight></codeline>
<codeline lineno="1309"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1310"><highlight class="normal"><sp/><sp/><sp/><sp/>strftime(buffer,<sp/>nBuffer,<sp/></highlight><highlight class="stringliteral">&quot;%Y-%m-%d<sp/>%H:%M:%S<sp/>%z&quot;</highlight><highlight class="normal">,<sp/>dt);<sp/></highlight><highlight class="comment">//<sp/>%Z<sp/>shows<sp/>long<sp/>strings<sp/>on<sp/>windows</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1311"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::string(buffer);<sp/></highlight><highlight class="comment">//<sp/>copies<sp/>the<sp/>null-terminated<sp/>character<sp/>sequence</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1312"><highlight class="normal">};</highlight></codeline>
<codeline lineno="1313"><highlight class="normal"></highlight></codeline>
<codeline lineno="1314" refid="util_8h_1a6476623f1d1477b76ae3f751f6db644b" refkind="member"><highlight class="normal">std::string<sp/><ref refid="util_8cpp_1a6476623f1d1477b76ae3f751f6db644b" kindref="member">bytesReadable</ref>(<ref refid="stdint_8h_1aaa5d1cd013383c889537491c3cfd9aad" kindref="member">uint64_t</ref><sp/>nBytes)</highlight></codeline>
<codeline lineno="1315"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1316"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(nBytes<sp/>&gt;=<sp/>1024ll*1024ll*1024ll*1024ll)</highlight></codeline>
<codeline lineno="1317"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="tinyformat_8h_1a56c674871a61baaad36ad52238c08857" kindref="member">strprintf</ref>(</highlight><highlight class="stringliteral">&quot;%.2f<sp/>TB&quot;</highlight><highlight class="normal">,<sp/>nBytes/1024.0/1024.0/1024.0/1024.0);</highlight></codeline>
<codeline lineno="1318"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(nBytes<sp/>&gt;=<sp/>1024*1024*1024)</highlight></codeline>
<codeline lineno="1319"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="tinyformat_8h_1a56c674871a61baaad36ad52238c08857" kindref="member">strprintf</ref>(</highlight><highlight class="stringliteral">&quot;%.2f<sp/>GB&quot;</highlight><highlight class="normal">,<sp/>nBytes/1024.0/1024.0/1024.0);</highlight></codeline>
<codeline lineno="1320"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(nBytes<sp/>&gt;=<sp/>1024*1024)</highlight></codeline>
<codeline lineno="1321"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="tinyformat_8h_1a56c674871a61baaad36ad52238c08857" kindref="member">strprintf</ref>(</highlight><highlight class="stringliteral">&quot;%.2f<sp/>MB&quot;</highlight><highlight class="normal">,<sp/>nBytes/1024.0/1024.0);</highlight></codeline>
<codeline lineno="1322"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(nBytes<sp/>&gt;=<sp/>1024)</highlight></codeline>
<codeline lineno="1323"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="tinyformat_8h_1a56c674871a61baaad36ad52238c08857" kindref="member">strprintf</ref>(</highlight><highlight class="stringliteral">&quot;%.2f<sp/>KB&quot;</highlight><highlight class="normal">,<sp/>nBytes/1024.0);</highlight></codeline>
<codeline lineno="1324"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1325"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="tinyformat_8h_1a56c674871a61baaad36ad52238c08857" kindref="member">strprintf</ref>(</highlight><highlight class="stringliteral">&quot;%d<sp/>B&quot;</highlight><highlight class="normal">,<sp/>nBytes);</highlight></codeline>
<codeline lineno="1326"><highlight class="normal">};</highlight></codeline>
<codeline lineno="1327"><highlight class="normal"></highlight></codeline>
<codeline lineno="1328" refid="util_8h_1a37fca7e305fe0caa306b23fdb37f88e2" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="util_8cpp_1a37fca7e305fe0caa306b23fdb37f88e2" kindref="member">ShrinkDebugFile</ref>()</highlight></codeline>
<codeline lineno="1329"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1330"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Scroll<sp/>debug.log<sp/>if<sp/>it&apos;s<sp/>getting<sp/>too<sp/>big</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1331"><highlight class="normal"><sp/><sp/><sp/><sp/>boost::filesystem::path<sp/>pathLog<sp/>=<sp/><ref refid="util_8cpp_1ab83866a054745d4b30a3948a1b44beba" kindref="member">GetDataDir</ref>()<sp/>/<sp/></highlight><highlight class="stringliteral">&quot;debug.log&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1332"><highlight class="normal"><sp/><sp/><sp/><sp/>FILE*<sp/>file<sp/>=<sp/>fopen(pathLog.string().c_str(),<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1333"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(file<sp/>&amp;&amp;<sp/>boost::filesystem::file_size(pathLog)<sp/>&gt;<sp/>10<sp/>*<sp/>1000000)</highlight></codeline>
<codeline lineno="1334"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1335"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Restart<sp/>the<sp/>file<sp/>with<sp/>some<sp/>of<sp/>the<sp/>end</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1336"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>pch[200000];</highlight></codeline>
<codeline lineno="1337"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fseek(file,<sp/>-</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(pch),<sp/>SEEK_END);</highlight></codeline>
<codeline lineno="1338"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nBytes<sp/>=<sp/>fread(pch,<sp/>1,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(pch),<sp/>file);</highlight></codeline>
<codeline lineno="1339"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fclose(file);</highlight></codeline>
<codeline lineno="1340"><highlight class="normal"></highlight></codeline>
<codeline lineno="1341"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>file<sp/>=<sp/>fopen(pathLog.string().c_str(),<sp/></highlight><highlight class="stringliteral">&quot;w&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1342"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(file)</highlight></codeline>
<codeline lineno="1343"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1344"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fwrite(pch,<sp/>1,<sp/>nBytes,<sp/>file);</highlight></codeline>
<codeline lineno="1345"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fclose(file);</highlight></codeline>
<codeline lineno="1346"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1347"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1348"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1349"><highlight class="normal"></highlight></codeline>
<codeline lineno="1350"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="stdint_8h_1adec1df1b8b51cb32b77e5b86fff46471" kindref="member">int64_t</ref><sp/>nMockTime<sp/>=<sp/>0;<sp/><sp/></highlight><highlight class="comment">//<sp/>For<sp/>unit<sp/>testing</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1351"><highlight class="normal"></highlight></codeline>
<codeline lineno="1352" refid="util_8h_1a46fac5fba8ba905b5f9acb364f5d8c6f" refkind="member"><highlight class="normal"><ref refid="stdint_8h_1adec1df1b8b51cb32b77e5b86fff46471" kindref="member">int64_t</ref><sp/><ref refid="util_8cpp_1a46fac5fba8ba905b5f9acb364f5d8c6f" kindref="member">GetTime</ref>()</highlight></codeline>
<codeline lineno="1353"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1354"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(nMockTime)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>nMockTime;</highlight></codeline>
<codeline lineno="1355"><highlight class="normal"></highlight></codeline>
<codeline lineno="1356"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>time(NULL);</highlight></codeline>
<codeline lineno="1357"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1358"><highlight class="normal"></highlight></codeline>
<codeline lineno="1359" refid="util_8h_1a79d4c36b511d6690ab0bbde0e0da9251" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="util_8cpp_1a79d4c36b511d6690ab0bbde0e0da9251" kindref="member">SetMockTime</ref>(<ref refid="stdint_8h_1adec1df1b8b51cb32b77e5b86fff46471" kindref="member">int64_t</ref><sp/>nMockTimeIn)</highlight></codeline>
<codeline lineno="1360"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1361"><highlight class="normal"><sp/><sp/><sp/><sp/>nMockTime<sp/>=<sp/>nMockTimeIn;</highlight></codeline>
<codeline lineno="1362"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1363"><highlight class="normal"></highlight></codeline>
<codeline lineno="1364" refid="util_8h_1ad679dcd7cb4960c49a8d400bcc23b0d0" refkind="member"><highlight class="normal"><ref refid="stdint_8h_1a435d1572bf3f880d55459d9805097f62" kindref="member">uint32_t</ref><sp/><ref refid="util_8cpp_1ad679dcd7cb4960c49a8d400bcc23b0d0" kindref="member">insecure_rand_Rz</ref><sp/>=<sp/>11;</highlight></codeline>
<codeline lineno="1365" refid="util_8h_1a45e4e024616db2e96c5ffc34928c553b" refkind="member"><highlight class="normal"><ref refid="stdint_8h_1a435d1572bf3f880d55459d9805097f62" kindref="member">uint32_t</ref><sp/><ref refid="util_8cpp_1a45e4e024616db2e96c5ffc34928c553b" kindref="member">insecure_rand_Rw</ref><sp/>=<sp/>11;</highlight></codeline>
<codeline lineno="1366" refid="util_8h_1abef4e13668f53ac5404c796462aed9b4" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="util_8cpp_1aacea702dc3d4d2bcbbd5eb96d410417c" kindref="member">seed_insecure_rand</ref>(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>fDeterministic)</highlight></codeline>
<codeline lineno="1367"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1368"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//The<sp/>seed<sp/>values<sp/>have<sp/>some<sp/>unlikely<sp/>fixed<sp/>points<sp/>which<sp/>we<sp/>avoid.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1369"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(fDeterministic)</highlight></codeline>
<codeline lineno="1370"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1371"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>insecure_rand_Rz<sp/>=<sp/>insecure_rand_Rw<sp/>=<sp/>11;</highlight></codeline>
<codeline lineno="1372"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1373"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stdint_8h_1a435d1572bf3f880d55459d9805097f62" kindref="member">uint32_t</ref><sp/>tmp;</highlight></codeline>
<codeline lineno="1374"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">do</highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1375"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="util_8cpp_1acf52c2aa8213c7b15e26594a2264ed8a" kindref="member">GetRandBytes</ref>((</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*)&amp;tmp,4);</highlight></codeline>
<codeline lineno="1376"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(tmp==0<sp/>||<sp/>tmp==0x9068ffffU);</highlight></codeline>
<codeline lineno="1377"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>insecure_rand_Rz=tmp;</highlight></codeline>
<codeline lineno="1378"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">do</highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1379"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="util_8cpp_1acf52c2aa8213c7b15e26594a2264ed8a" kindref="member">GetRandBytes</ref>((</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*)&amp;tmp,4);</highlight></codeline>
<codeline lineno="1380"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(tmp==0<sp/>||<sp/>tmp==0x464fffffU);</highlight></codeline>
<codeline lineno="1381"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>insecure_rand_Rw=tmp;</highlight></codeline>
<codeline lineno="1382"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1383"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1384"><highlight class="normal"></highlight></codeline>
<codeline lineno="1385" refid="util_8cpp_1a184f6760badcf145f3430cdf6cc5dfa2" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/><ref refid="util_8cpp_1a184f6760badcf145f3430cdf6cc5dfa2" kindref="member">FormatVersion</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nVersion)</highlight></codeline>
<codeline lineno="1386"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1387"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(nVersion%100<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="1388"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="tinyformat_8h_1a56c674871a61baaad36ad52238c08857" kindref="member">strprintf</ref>(</highlight><highlight class="stringliteral">&quot;%d.%d.%d&quot;</highlight><highlight class="normal">,<sp/>nVersion/1000000,<sp/>(nVersion/10000)%100,<sp/>(nVersion/100)%100);</highlight></codeline>
<codeline lineno="1389"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1390"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="tinyformat_8h_1a56c674871a61baaad36ad52238c08857" kindref="member">strprintf</ref>(</highlight><highlight class="stringliteral">&quot;%d.%d.%d.%d&quot;</highlight><highlight class="normal">,<sp/>nVersion/1000000,<sp/>(nVersion/10000)%100,<sp/>(nVersion/100)%100,<sp/>nVersion%100);</highlight></codeline>
<codeline lineno="1391"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1392"><highlight class="normal"></highlight></codeline>
<codeline lineno="1393" refid="util_8h_1ac3e3098552063f228d9deac38a8b9848" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/><ref refid="util_8cpp_1ac2170cca99e9347171fca492ae533d96" kindref="member">FormatFullVersion</ref>()</highlight></codeline>
<codeline lineno="1394"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1395"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="version_8h_1a1a5e163cdc615d789b2db896d591230b" kindref="member">CLIENT_BUILD</ref>;</highlight></codeline>
<codeline lineno="1396"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1397"><highlight class="normal"></highlight></codeline>
<codeline lineno="1398"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>USE_NATIVE_I2P</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1399"><highlight class="normal">std::string<sp/>FormatI2PNativeFullVersion()</highlight></codeline>
<codeline lineno="1400"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1401"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>I2P_NATIVE_BUILD;</highlight></codeline>
<codeline lineno="1402"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1403"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1404"><highlight class="normal"></highlight></codeline>
<codeline lineno="1405"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Format<sp/>the<sp/>subversion<sp/>field<sp/>according<sp/>to<sp/>BIP<sp/>14<sp/>spec<sp/>(https://en.darksilk.it/wiki/BIP_0014)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1406" refid="util_8h_1a7e6809cdbfc7f83b46f83caea740894d" refkind="member"><highlight class="normal">std::string<sp/><ref refid="util_8cpp_1a7e6809cdbfc7f83b46f83caea740894d" kindref="member">FormatSubVersion</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>name,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nClientVersion,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;std::string&gt;&amp;<sp/>comments)</highlight></codeline>
<codeline lineno="1407"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1408"><highlight class="normal"><sp/><sp/><sp/><sp/>std::ostringstream<sp/>ss;</highlight></codeline>
<codeline lineno="1409"><highlight class="normal"><sp/><sp/><sp/><sp/>ss<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;/&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1410"><highlight class="normal"><sp/><sp/><sp/><sp/>ss<sp/>&lt;&lt;<sp/>name<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;:&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/><ref refid="util_8cpp_1a184f6760badcf145f3430cdf6cc5dfa2" kindref="member">FormatVersion</ref>(nClientVersion);</highlight></codeline>
<codeline lineno="1411"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!comments.empty())</highlight></codeline>
<codeline lineno="1412"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ss<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;(&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>boost::algorithm::join(comments,<sp/></highlight><highlight class="stringliteral">&quot;;<sp/>&quot;</highlight><highlight class="normal">)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;)&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1413"><highlight class="normal"><sp/><sp/><sp/><sp/>ss<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;/&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1414"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ss.str();</highlight></codeline>
<codeline lineno="1415"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1416"><highlight class="normal"></highlight></codeline>
<codeline lineno="1417"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>WIN32</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1418"><highlight class="normal">boost::filesystem::path<sp/>GetSpecialFolderPath(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nFolder,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>fCreate)</highlight></codeline>
<codeline lineno="1419"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1420"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">fs<sp/>=<sp/>boost::filesystem;</highlight></codeline>
<codeline lineno="1421"><highlight class="normal"></highlight></codeline>
<codeline lineno="1422"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>pszPath[<ref refid="util_8h_1ab99ded389af74001a6298fc9e44e74e5" kindref="member">MAX_PATH</ref>]<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1423"><highlight class="normal"></highlight></codeline>
<codeline lineno="1424"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(SHGetSpecialFolderPathA(NULL,<sp/>pszPath,<sp/>nFolder,<sp/>fCreate))</highlight></codeline>
<codeline lineno="1425"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1426"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>fs::path(pszPath);</highlight></codeline>
<codeline lineno="1427"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1428"><highlight class="normal"></highlight></codeline>
<codeline lineno="1429"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="util_8h_1afc02c0a4258fedfb316be612bb659ba8" kindref="member">LogPrintf</ref>(</highlight><highlight class="stringliteral">&quot;SHGetSpecialFolderPathA()<sp/>failed,<sp/>could<sp/>not<sp/>obtain<sp/>requested<sp/>path.\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1430"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>fs::path(</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1431"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1432"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1433"><highlight class="normal"></highlight></codeline>
<codeline lineno="1434" refid="util_8h_1adf94c00a5ac719c92a2f1bb2f8b2167f" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="util_8cpp_1adf94c00a5ac719c92a2f1bb2f8b2167f" kindref="member">runCommand</ref>(std::string<sp/>strCommand)</highlight></codeline>
<codeline lineno="1435"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1436"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nErr<sp/>=<sp/>::system(strCommand.c_str());</highlight></codeline>
<codeline lineno="1437"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(nErr)</highlight></codeline>
<codeline lineno="1438"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="util_8h_1afc02c0a4258fedfb316be612bb659ba8" kindref="member">LogPrintf</ref>(</highlight><highlight class="stringliteral">&quot;runCommand<sp/>error:<sp/>system(%s)<sp/>returned<sp/>%d\n&quot;</highlight><highlight class="normal">,<sp/>strCommand,<sp/>nErr);</highlight></codeline>
<codeline lineno="1439"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1440"><highlight class="normal"></highlight></codeline>
<codeline lineno="1441" refid="util_8h_1a85fc1244e0bd3c91ee7a1c05ed10ebbb" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="util_8cpp_1a85fc1244e0bd3c91ee7a1c05ed10ebbb" kindref="member">RenameThread</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>name)</highlight></codeline>
<codeline lineno="1442"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1443"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(PR_SET_NAME)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1444"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Only<sp/>the<sp/>first<sp/>15<sp/>characters<sp/>are<sp/>used<sp/>(16<sp/>-<sp/>NUL<sp/>terminator)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1445"><highlight class="normal"><sp/><sp/><sp/><sp/>::prctl(PR_SET_NAME,<sp/>name,<sp/>0,<sp/>0,<sp/>0);</highlight></codeline>
<codeline lineno="1446"><highlight class="normal"></highlight><highlight class="preprocessor">#elif<sp/>0<sp/>&amp;&amp;<sp/>(defined(__FreeBSD__)<sp/>||<sp/>defined(__OpenBSD__))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1447"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>TODO:<sp/>This<sp/>is<sp/>currently<sp/>disabled<sp/>because<sp/>it<sp/>needs<sp/>to<sp/>be<sp/>verified<sp/>to<sp/>work</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1448"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/>on<sp/>FreeBSD<sp/>or<sp/>OpenBSD<sp/>first.<sp/>When<sp/>verified<sp/>the<sp/>&apos;0<sp/>&amp;&amp;&apos;<sp/>part<sp/>can<sp/>be</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1449"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/>removed.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1450"><highlight class="normal"><sp/><sp/><sp/><sp/>pthread_set_name_np(pthread_self(),<sp/>name);</highlight></codeline>
<codeline lineno="1451"><highlight class="normal"></highlight></codeline>
<codeline lineno="1452"><highlight class="normal"></highlight><highlight class="preprocessor">#elif<sp/>defined(MAC_OSX)<sp/>&amp;&amp;<sp/>defined(__MAC_OS_X_VERSION_MAX_ALLOWED)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1453"><highlight class="normal"></highlight></codeline>
<codeline lineno="1454"><highlight class="normal"></highlight><highlight class="comment">//<sp/>pthread_setname_np<sp/>is<sp/>XCode<sp/>10.6-and-later</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1455"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>__MAC_OS_X_VERSION_MAX_ALLOWED<sp/>&gt;=<sp/>1060</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1456"><highlight class="normal"><sp/><sp/><sp/><sp/>pthread_setname_np(name);</highlight></codeline>
<codeline lineno="1457"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1458"><highlight class="normal"></highlight></codeline>
<codeline lineno="1459"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1460"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Prevent<sp/>warnings<sp/>for<sp/>unused<sp/>parameters...</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1461"><highlight class="normal"><sp/><sp/><sp/><sp/>(void)name;</highlight></codeline>
<codeline lineno="1462"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1463"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1464"><highlight class="normal"></highlight></codeline>
<codeline lineno="1465" refid="util_8h_1a749bc6776c8ec72d7c5e4dea56aee415" refkind="member"><highlight class="normal">std::string<sp/><ref refid="util_8cpp_1a749bc6776c8ec72d7c5e4dea56aee415" kindref="member">DateTimeStrFormat</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>pszFormat,<sp/><ref refid="stdint_8h_1adec1df1b8b51cb32b77e5b86fff46471" kindref="member">int64_t</ref><sp/>nTime)</highlight></codeline>
<codeline lineno="1466"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1467"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>std::locale<sp/>takes<sp/>ownership<sp/>of<sp/>the<sp/>pointer</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1468"><highlight class="normal"><sp/><sp/><sp/><sp/>std::locale<sp/>loc(std::locale::classic(),<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>boost::posix_time::time_facet(pszFormat));</highlight></codeline>
<codeline lineno="1469"><highlight class="normal"><sp/><sp/><sp/><sp/>std::stringstream<sp/>ss;</highlight></codeline>
<codeline lineno="1470"><highlight class="normal"><sp/><sp/><sp/><sp/>ss.imbue(loc);</highlight></codeline>
<codeline lineno="1471"><highlight class="normal"><sp/><sp/><sp/><sp/>ss<sp/>&lt;&lt;<sp/>boost::posix_time::from_time_t(nTime);</highlight></codeline>
<codeline lineno="1472"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ss.str();</highlight></codeline>
<codeline lineno="1473"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1474"><highlight class="normal"></highlight></codeline>
<codeline lineno="1475" refid="util_8h_1acb8d6b822bc1bfa609bf43bbac1a0d44" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="util_8cpp_1acb8d6b822bc1bfa609bf43bbac1a0d44" kindref="member">TruncateFile</ref>(FILE<sp/>*file,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>length)<sp/>{</highlight></codeline>
<codeline lineno="1476"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(WIN32)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1477"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>_chsize(_fileno(file),<sp/>length)<sp/>==<sp/>0;</highlight></codeline>
<codeline lineno="1478"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1479"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ftruncate(fileno(file),<sp/>length)<sp/>==<sp/>0;</highlight></codeline>
<codeline lineno="1480"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1481"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="/home/dev/ds-160209/src/util.cpp"/>
  </compounddef>
</doxygen>
