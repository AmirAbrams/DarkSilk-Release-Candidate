<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.9.1">
  <compounddef id="ecmult__gen__impl_8h" kind="file" language="C++">
    <compoundname>ecmult_gen_impl.h</compoundname>
    <includes refid="scalar_8h" local="yes">scalar.h</includes>
    <includes refid="group_8h" local="yes">group.h</includes>
    <includes refid="ecmult__gen_8h" local="yes">ecmult_gen.h</includes>
    <includes refid="hash__impl_8h" local="yes">hash_impl.h</includes>
    <includedby refid="secp256k1_8c" local="yes">/home/dev/ds-160209/src/secp256k1/src/secp256k1.c</includedby>
    <includedby refid="gen__context_8c" local="yes">/home/dev/ds-160209/src/secp256k1/src/gen_context.c</includedby>
    <incdepgraph>
      <node id="51791">
        <label>scalar.h</label>
        <link refid="scalar_8h"/>
        <childnode refid="51792" relation="include">
        </childnode>
      </node>
      <node id="51798">
        <label>stdlib.h</label>
      </node>
      <node id="51792">
        <label>num.h</label>
        <link refid="num_8h"/>
      </node>
      <node id="51793">
        <label>group.h</label>
        <link refid="group_8h"/>
        <childnode refid="51792" relation="include">
        </childnode>
        <childnode refid="51794" relation="include">
        </childnode>
      </node>
      <node id="51796">
        <label>hash_impl.h</label>
        <link refid="hash__impl_8h"/>
        <childnode refid="51797" relation="include">
        </childnode>
        <childnode refid="51798" relation="include">
        </childnode>
        <childnode refid="51799" relation="include">
        </childnode>
        <childnode refid="51800" relation="include">
        </childnode>
      </node>
      <node id="51800">
        <label>string.h</label>
      </node>
      <node id="51795">
        <label>ecmult_gen.h</label>
        <link refid="ecmult__gen_8h"/>
        <childnode refid="51791" relation="include">
        </childnode>
        <childnode refid="51793" relation="include">
        </childnode>
      </node>
      <node id="51797">
        <label>hash.h</label>
        <link refid="secp256k1_2src_2hash_8h"/>
        <childnode refid="51798" relation="include">
        </childnode>
        <childnode refid="51799" relation="include">
        </childnode>
      </node>
      <node id="51794">
        <label>field.h</label>
        <link refid="field_8h"/>
      </node>
      <node id="51799">
        <label>stdint.h</label>
        <link refid="stdint_8h"/>
      </node>
      <node id="51790">
        <label>/home/dev/ds-160209/src/secp256k1/src/ecmult_gen_impl.h</label>
        <link refid="ecmult_gen_impl.h"/>
        <childnode refid="51791" relation="include">
        </childnode>
        <childnode refid="51793" relation="include">
        </childnode>
        <childnode refid="51795" relation="include">
        </childnode>
        <childnode refid="51796" relation="include">
        </childnode>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="51805">
        <label>/home/dev/ds-160209/src/secp256k1/src/gen_context.c</label>
        <link refid="gen__context_8c"/>
      </node>
      <node id="51804">
        <label>/home/dev/ds-160209/src/secp256k1/src/tests.c</label>
        <link refid="tests_8c"/>
      </node>
      <node id="51802">
        <label>/home/dev/ds-160209/src/secp256k1/src/secp256k1.c</label>
        <link refid="secp256k1_8c"/>
        <childnode refid="51803" relation="include">
        </childnode>
        <childnode refid="51804" relation="include">
        </childnode>
      </node>
      <node id="51803">
        <label>/home/dev/ds-160209/src/secp256k1/src/bench_internal.c</label>
        <link refid="bench__internal_8c"/>
      </node>
      <node id="51801">
        <label>/home/dev/ds-160209/src/secp256k1/src/ecmult_gen_impl.h</label>
        <link refid="ecmult_gen_impl.h"/>
        <childnode refid="51802" relation="include">
        </childnode>
        <childnode refid="51805" relation="include">
        </childnode>
      </node>
    </invincdepgraph>
      <sectiondef kind="func">
      <memberdef kind="function" id="ecmult__gen__impl_8h_1a85f9fd11a4166d3d482309317d65c276" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void secp256k1_ecmult_gen_context_init</definition>
        <argsstring>(secp256k1_ecmult_gen_context *ctx)</argsstring>
        <name>secp256k1_ecmult_gen_context_init</name>
        <param>
          <type><ref refid="structsecp256k1__ecmult__gen__context" kindref="compound">secp256k1_ecmult_gen_context</ref> *</type>
          <declname>ctx</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/secp256k1/src/ecmult_gen_impl.h" line="17" column="1" bodyfile="/home/dev/ds-160209/src/secp256k1/src/ecmult_gen_impl.h" bodystart="17" bodyend="19"/>
      </memberdef>
      <memberdef kind="function" id="ecmult__gen__impl_8h_1afaf90b2a6554053187cdc89df0dafd21" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void secp256k1_ecmult_gen_context_build</definition>
        <argsstring>(secp256k1_ecmult_gen_context *ctx, const secp256k1_callback *cb)</argsstring>
        <name>secp256k1_ecmult_gen_context_build</name>
        <param>
          <type><ref refid="structsecp256k1__ecmult__gen__context" kindref="compound">secp256k1_ecmult_gen_context</ref> *</type>
          <declname>ctx</declname>
        </param>
        <param>
          <type>const <ref refid="structsecp256k1__callback" kindref="compound">secp256k1_callback</ref> *</type>
          <declname>cb</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/secp256k1/src/ecmult_gen_impl.h" line="21" column="1" bodyfile="/home/dev/ds-160209/src/secp256k1/src/ecmult_gen_impl.h" bodystart="21" bodyend="92"/>
      </memberdef>
      <memberdef kind="function" id="ecmult__gen__impl_8h_1a9a40662d6ed2cbab43dbddc25f570f97" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>static int secp256k1_ecmult_gen_context_is_built</definition>
        <argsstring>(const secp256k1_ecmult_gen_context *ctx)</argsstring>
        <name>secp256k1_ecmult_gen_context_is_built</name>
        <param>
          <type>const <ref refid="structsecp256k1__ecmult__gen__context" kindref="compound">secp256k1_ecmult_gen_context</ref> *</type>
          <declname>ctx</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/secp256k1/src/ecmult_gen_impl.h" line="94" column="1" bodyfile="/home/dev/ds-160209/src/secp256k1/src/ecmult_gen_impl.h" bodystart="94" bodyend="96"/>
      </memberdef>
      <memberdef kind="function" id="ecmult__gen__impl_8h_1aab03a4f94d775718656aabc6b14cfbee" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void secp256k1_ecmult_gen_context_clone</definition>
        <argsstring>(secp256k1_ecmult_gen_context *dst, const secp256k1_ecmult_gen_context *src, const secp256k1_callback *cb)</argsstring>
        <name>secp256k1_ecmult_gen_context_clone</name>
        <param>
          <type><ref refid="structsecp256k1__ecmult__gen__context" kindref="compound">secp256k1_ecmult_gen_context</ref> *</type>
          <declname>dst</declname>
        </param>
        <param>
          <type>const <ref refid="structsecp256k1__ecmult__gen__context" kindref="compound">secp256k1_ecmult_gen_context</ref> *</type>
          <declname>src</declname>
        </param>
        <param>
          <type>const <ref refid="structsecp256k1__callback" kindref="compound">secp256k1_callback</ref> *</type>
          <declname>cb</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/secp256k1/src/ecmult_gen_impl.h" line="98" column="1" bodyfile="/home/dev/ds-160209/src/secp256k1/src/ecmult_gen_impl.h" bodystart="98" bodyend="113"/>
      </memberdef>
      <memberdef kind="function" id="ecmult__gen__impl_8h_1a2832f924fc8c5c9d0540d808ccdd7072" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void secp256k1_ecmult_gen_context_clear</definition>
        <argsstring>(secp256k1_ecmult_gen_context *ctx)</argsstring>
        <name>secp256k1_ecmult_gen_context_clear</name>
        <param>
          <type><ref refid="structsecp256k1__ecmult__gen__context" kindref="compound">secp256k1_ecmult_gen_context</ref> *</type>
          <declname>ctx</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/secp256k1/src/ecmult_gen_impl.h" line="115" column="1" bodyfile="/home/dev/ds-160209/src/secp256k1/src/ecmult_gen_impl.h" bodystart="115" bodyend="122"/>
      </memberdef>
      <memberdef kind="function" id="ecmult__gen__impl_8h_1a3d28ad125fc1206272b0ecbdfdf7a8f4" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void secp256k1_ecmult_gen</definition>
        <argsstring>(const secp256k1_ecmult_gen_context *ctx, secp256k1_gej *r, const secp256k1_scalar *gn)</argsstring>
        <name>secp256k1_ecmult_gen</name>
        <param>
          <type>const <ref refid="structsecp256k1__ecmult__gen__context" kindref="compound">secp256k1_ecmult_gen_context</ref> *</type>
          <declname>ctx</declname>
        </param>
        <param>
          <type><ref refid="structsecp256k1__gej" kindref="compound">secp256k1_gej</ref> *</type>
          <declname>r</declname>
        </param>
        <param>
          <type>const <ref refid="structsecp256k1__scalar" kindref="compound">secp256k1_scalar</ref> *</type>
          <declname>gn</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>This uses a conditional move to avoid any secret data in array indexes. <emphasis>Any</emphasis> use of secret indexes has been demonstrated to result in timing sidechannels, even when the cache-line access patterns are uniform. See also: &quot;A word of warning&quot;, CHES 2013 Rump Session, by Daniel J. Bernstein and Peter Schwabe (<ulink url="https://cryptojedi.org/peter/data/chesrump-20130822.pdf">https://cryptojedi.org/peter/data/chesrump-20130822.pdf</ulink>) and &quot;Cache Attacks and Countermeasures: the Case of AES&quot;, RSA 2006, by Dag Arne Osvik, Adi Shamir, and Eran Tromer (<ulink url="http://www.tau.ac.il/~tromer/papers/cache.pdf">http://www.tau.ac.il/~tromer/papers/cache.pdf</ulink>)</para>        </inbodydescription>
        <location file="/home/dev/ds-160209/src/secp256k1/src/ecmult_gen_impl.h" line="124" column="1" bodyfile="/home/dev/ds-160209/src/secp256k1/src/ecmult_gen_impl.h" bodystart="124" bodyend="156"/>
      </memberdef>
      <memberdef kind="function" id="ecmult__gen__impl_8h_1a7e41f045cb4901a4eba781966fa35abd" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void secp256k1_ecmult_gen_blind</definition>
        <argsstring>(secp256k1_ecmult_gen_context *ctx, const unsigned char *seed32)</argsstring>
        <name>secp256k1_ecmult_gen_blind</name>
        <param>
          <type><ref refid="structsecp256k1__ecmult__gen__context" kindref="compound">secp256k1_ecmult_gen_context</ref> *</type>
          <declname>ctx</declname>
        </param>
        <param>
          <type>const unsigned char *</type>
          <declname>seed32</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>Using a CSPRNG allows a failure free interface, avoids needing large amounts of random data, and guards against weak or adversarial seeds. This is a simpler and safer interface than asking the caller for blinding values directly and expecting them to retry on failure.</para>        </inbodydescription>
        <location file="/home/dev/ds-160209/src/secp256k1/src/ecmult_gen_impl.h" line="159" column="1" bodyfile="/home/dev/ds-160209/src/secp256k1/src/ecmult_gen_impl.h" bodystart="159" bodyend="208"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/**********************************************************************</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/>*<sp/>Copyright<sp/>(c)<sp/>2013,<sp/>2014,<sp/>2015<sp/>Pieter<sp/>Wuille,<sp/>Gregory<sp/>Maxwell<sp/><sp/><sp/><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*<sp/>Distributed<sp/>under<sp/>the<sp/>MIT<sp/>software<sp/>license,<sp/>see<sp/>the<sp/>accompanying<sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*<sp/>file<sp/>COPYING<sp/>or<sp/>http://www.opensource.org/licenses/mit-license.php.*</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/>**********************************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>_SECP256K1_ECMULT_GEN_IMPL_H_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>_SECP256K1_ECMULT_GEN_IMPL_H_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="scalar_8h" kindref="compound">scalar.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="group_8h" kindref="compound">group.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="ecmult__gen_8h" kindref="compound">ecmult_gen.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="hash__impl_8h" kindref="compound">hash_impl.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>USE_ECMULT_STATIC_PRECOMPUTATION</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="ecmult__static__context_8h" kindref="compound">ecmult_static_context.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>secp256k1_ecmult_gen_context_init(<ref refid="structsecp256k1__ecmult__gen__context" kindref="compound">secp256k1_ecmult_gen_context</ref><sp/>*ctx)<sp/>{</highlight></codeline>
<codeline lineno="18"><highlight class="normal"><sp/><sp/><sp/><sp/>ctx-&gt;<ref refid="structsecp256k1__ecmult__gen__context_1ad1ebc8daeace10a8d646f89bbdf32882" kindref="member">prec</ref><sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="19"><highlight class="normal">}</highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>secp256k1_ecmult_gen_context_build(<ref refid="structsecp256k1__ecmult__gen__context" kindref="compound">secp256k1_ecmult_gen_context</ref><sp/>*ctx,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structsecp256k1__callback" kindref="compound">secp256k1_callback</ref>*<sp/>cb)<sp/>{</highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>USE_ECMULT_STATIC_PRECOMPUTATION</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structsecp256k1__ge" kindref="compound">secp256k1_ge</ref><sp/>prec[1024];</highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structsecp256k1__gej" kindref="compound">secp256k1_gej</ref><sp/>gj;</highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structsecp256k1__gej" kindref="compound">secp256k1_gej</ref><sp/>nums_gej;</highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i,<sp/>j;</highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ctx-&gt;<ref refid="structsecp256k1__ecmult__gen__context_1ad1ebc8daeace10a8d646f89bbdf32882" kindref="member">prec</ref><sp/>!=<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>USE_ECMULT_STATIC_PRECOMPUTATION</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/>ctx-&gt;<ref refid="structsecp256k1__ecmult__gen__context_1ad1ebc8daeace10a8d646f89bbdf32882" kindref="member">prec</ref><sp/>=<sp/>(<ref refid="structsecp256k1__ge__storage" kindref="compound">secp256k1_ge_storage</ref><sp/>(*)[64][16])checked_malloc(cb,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(*ctx-&gt;<ref refid="structsecp256k1__ecmult__gen__context_1ad1ebc8daeace10a8d646f89bbdf32882" kindref="member">prec</ref>));</highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>get<sp/>the<sp/>generator<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/>secp256k1_gej_set_ge(&amp;gj,<sp/>&amp;secp256k1_ge_const_g);</highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Construct<sp/>a<sp/>group<sp/>element<sp/>with<sp/>no<sp/>known<sp/>corresponding<sp/>scalar<sp/>(nothing<sp/>up<sp/>my<sp/>sleeve).<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>nums_b32[33]<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;The<sp/>scalar<sp/>for<sp/>this<sp/>x<sp/>is<sp/>unknown&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structsecp256k1__fe" kindref="compound">secp256k1_fe</ref><sp/>nums_x;</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structsecp256k1__ge" kindref="compound">secp256k1_ge</ref><sp/>nums_ge;</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>r;</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>r<sp/>=<sp/>secp256k1_fe_set_b32(&amp;nums_x,<sp/>nums_b32);</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(void)r;</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="secp256k1_2src_2util_8h_1aca8ac5ae73fd966db106de59160a178b" kindref="member">VERIFY_CHECK</ref>(r);</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>r<sp/>=<sp/>secp256k1_ge_set_xo_var(&amp;nums_ge,<sp/>&amp;nums_x,<sp/>0);</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(void)r;</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="secp256k1_2src_2util_8h_1aca8ac5ae73fd966db106de59160a178b" kindref="member">VERIFY_CHECK</ref>(r);</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>secp256k1_gej_set_ge(&amp;nums_gej,<sp/>&amp;nums_ge);</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Add<sp/>G<sp/>to<sp/>make<sp/>the<sp/>bits<sp/>in<sp/>x<sp/>uniformly<sp/>distributed.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>secp256k1_gej_add_ge_var(&amp;nums_gej,<sp/>&amp;nums_gej,<sp/>&amp;secp256k1_ge_const_g,<sp/>NULL);</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>compute<sp/>prec.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structsecp256k1__gej" kindref="compound">secp256k1_gej</ref><sp/>precj[1024];<sp/></highlight><highlight class="comment">/*<sp/>Jacobian<sp/>versions<sp/>of<sp/>prec.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structsecp256k1__gej" kindref="compound">secp256k1_gej</ref><sp/>gbase;</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structsecp256k1__gej" kindref="compound">secp256k1_gej</ref><sp/>numsbase;</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gbase<sp/>=<sp/>gj;<sp/></highlight><highlight class="comment">/*<sp/>16^j<sp/>*<sp/>G<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>numsbase<sp/>=<sp/>nums_gej;<sp/></highlight><highlight class="comment">/*<sp/>2^j<sp/>*<sp/>nums.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>64;<sp/>j++)<sp/>{</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Set<sp/>precj[j*16<sp/>..<sp/>j*16+15]<sp/>to<sp/>(numsbase,<sp/>numsbase<sp/>+<sp/>gbase,<sp/>...,<sp/>numsbase<sp/>+<sp/>15*gbase).<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>precj[j*16]<sp/>=<sp/>numsbase;</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>1;<sp/>i<sp/>&lt;<sp/>16;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>secp256k1_gej_add_var(&amp;precj[j*16<sp/>+<sp/>i],<sp/>&amp;precj[j*16<sp/>+<sp/>i<sp/>-<sp/>1],<sp/>&amp;gbase,<sp/>NULL);</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Multiply<sp/>gbase<sp/>by<sp/>16.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>4;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>secp256k1_gej_double_var(&amp;gbase,<sp/>&amp;gbase,<sp/>NULL);</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Multiply<sp/>numbase<sp/>by<sp/>2.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>secp256k1_gej_double_var(&amp;numsbase,<sp/>&amp;numsbase,<sp/>NULL);</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(j<sp/>==<sp/>62)<sp/>{</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>In<sp/>the<sp/>last<sp/>iteration,<sp/>numsbase<sp/>is<sp/>(1<sp/>-<sp/>2^j)<sp/>*<sp/>nums<sp/>instead.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>secp256k1_gej_neg(&amp;numsbase,<sp/>&amp;numsbase);</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>secp256k1_gej_add_var(&amp;numsbase,<sp/>&amp;numsbase,<sp/>&amp;nums_gej,<sp/>NULL);</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>secp256k1_ge_set_all_gej_var(1024,<sp/>prec,<sp/>precj,<sp/>cb);</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>64;<sp/>j++)<sp/>{</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>16;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>secp256k1_ge_to_storage(&amp;(*ctx-&gt;<ref refid="structsecp256k1__ecmult__gen__context_1ad1ebc8daeace10a8d646f89bbdf32882" kindref="member">prec</ref>)[j][i],<sp/>&amp;prec[j*16<sp/>+<sp/>i]);</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="87"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/>(void)cb;</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/>ctx-&gt;<ref refid="structsecp256k1__ecmult__gen__context_1ad1ebc8daeace10a8d646f89bbdf32882" kindref="member">prec</ref><sp/>=<sp/>(<ref refid="structsecp256k1__ge__storage" kindref="compound">secp256k1_ge_storage</ref><sp/>(*)[64][16])secp256k1_ecmult_static_context;</highlight></codeline>
<codeline lineno="90"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/>secp256k1_ecmult_gen_blind(ctx,<sp/>NULL);</highlight></codeline>
<codeline lineno="92"><highlight class="normal">}</highlight></codeline>
<codeline lineno="93"><highlight class="normal"></highlight></codeline>
<codeline lineno="94"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>secp256k1_ecmult_gen_context_is_built(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structsecp256k1__ecmult__gen__context" kindref="compound">secp256k1_ecmult_gen_context</ref>*<sp/>ctx)<sp/>{</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ctx-&gt;<ref refid="structsecp256k1__ecmult__gen__context_1ad1ebc8daeace10a8d646f89bbdf32882" kindref="member">prec</ref><sp/>!=<sp/>NULL;</highlight></codeline>
<codeline lineno="96"><highlight class="normal">}</highlight></codeline>
<codeline lineno="97"><highlight class="normal"></highlight></codeline>
<codeline lineno="98"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>secp256k1_ecmult_gen_context_clone(<ref refid="structsecp256k1__ecmult__gen__context" kindref="compound">secp256k1_ecmult_gen_context</ref><sp/>*dst,</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structsecp256k1__ecmult__gen__context" kindref="compound">secp256k1_ecmult_gen_context</ref><sp/>*src,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structsecp256k1__callback" kindref="compound">secp256k1_callback</ref>*<sp/>cb)<sp/>{</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(src-&gt;<ref refid="structsecp256k1__ecmult__gen__context_1ad1ebc8daeace10a8d646f89bbdf32882" kindref="member">prec</ref><sp/>==<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dst-&gt;<ref refid="structsecp256k1__ecmult__gen__context_1ad1ebc8daeace10a8d646f89bbdf32882" kindref="member">prec</ref><sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="103"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>USE_ECMULT_STATIC_PRECOMPUTATION</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dst-&gt;<ref refid="structsecp256k1__ecmult__gen__context_1ad1ebc8daeace10a8d646f89bbdf32882" kindref="member">prec</ref><sp/>=<sp/>(<ref refid="structsecp256k1__ge__storage" kindref="compound">secp256k1_ge_storage</ref><sp/>(*)[64][16])checked_malloc(cb,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(*dst-&gt;<ref refid="structsecp256k1__ecmult__gen__context_1ad1ebc8daeace10a8d646f89bbdf32882" kindref="member">prec</ref>));</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>memcpy(dst-&gt;<ref refid="structsecp256k1__ecmult__gen__context_1ad1ebc8daeace10a8d646f89bbdf32882" kindref="member">prec</ref>,<sp/>src-&gt;<ref refid="structsecp256k1__ecmult__gen__context_1ad1ebc8daeace10a8d646f89bbdf32882" kindref="member">prec</ref>,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(*dst-&gt;<ref refid="structsecp256k1__ecmult__gen__context_1ad1ebc8daeace10a8d646f89bbdf32882" kindref="member">prec</ref>));</highlight></codeline>
<codeline lineno="106"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(void)cb;</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dst-&gt;<ref refid="structsecp256k1__ecmult__gen__context_1ad1ebc8daeace10a8d646f89bbdf32882" kindref="member">prec</ref><sp/>=<sp/>src-&gt;<ref refid="structsecp256k1__ecmult__gen__context_1ad1ebc8daeace10a8d646f89bbdf32882" kindref="member">prec</ref>;</highlight></codeline>
<codeline lineno="109"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dst-&gt;<ref refid="structsecp256k1__ecmult__gen__context_1a1ebfe4de83e25248ea9d989d06c9b069" kindref="member">initial</ref><sp/>=<sp/>src-&gt;<ref refid="structsecp256k1__ecmult__gen__context_1a1ebfe4de83e25248ea9d989d06c9b069" kindref="member">initial</ref>;</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dst-&gt;<ref refid="structsecp256k1__ecmult__gen__context_1af2f3064a367e86f936ab1c8b93d6f27e" kindref="member">blind</ref><sp/>=<sp/>src-&gt;<ref refid="structsecp256k1__ecmult__gen__context_1af2f3064a367e86f936ab1c8b93d6f27e" kindref="member">blind</ref>;</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="113"><highlight class="normal">}</highlight></codeline>
<codeline lineno="114"><highlight class="normal"></highlight></codeline>
<codeline lineno="115"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>secp256k1_ecmult_gen_context_clear(<ref refid="structsecp256k1__ecmult__gen__context" kindref="compound">secp256k1_ecmult_gen_context</ref><sp/>*ctx)<sp/>{</highlight></codeline>
<codeline lineno="116"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>USE_ECMULT_STATIC_PRECOMPUTATION</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/>free(ctx-&gt;<ref refid="structsecp256k1__ecmult__gen__context_1ad1ebc8daeace10a8d646f89bbdf32882" kindref="member">prec</ref>);</highlight></codeline>
<codeline lineno="118"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/>secp256k1_scalar_clear(&amp;ctx-&gt;<ref refid="structsecp256k1__ecmult__gen__context_1af2f3064a367e86f936ab1c8b93d6f27e" kindref="member">blind</ref>);</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/>secp256k1_gej_clear(&amp;ctx-&gt;<ref refid="structsecp256k1__ecmult__gen__context_1a1ebfe4de83e25248ea9d989d06c9b069" kindref="member">initial</ref>);</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/>ctx-&gt;<ref refid="structsecp256k1__ecmult__gen__context_1ad1ebc8daeace10a8d646f89bbdf32882" kindref="member">prec</ref><sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="122"><highlight class="normal">}</highlight></codeline>
<codeline lineno="123"><highlight class="normal"></highlight></codeline>
<codeline lineno="124"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>secp256k1_ecmult_gen(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structsecp256k1__ecmult__gen__context" kindref="compound">secp256k1_ecmult_gen_context</ref><sp/>*ctx,<sp/><ref refid="structsecp256k1__gej" kindref="compound">secp256k1_gej</ref><sp/>*r,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structsecp256k1__scalar" kindref="compound">secp256k1_scalar</ref><sp/>*gn)<sp/>{</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structsecp256k1__ge" kindref="compound">secp256k1_ge</ref><sp/>add;</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structsecp256k1__ge__storage" kindref="compound">secp256k1_ge_storage</ref><sp/>adds;</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structsecp256k1__scalar" kindref="compound">secp256k1_scalar</ref><sp/>gnb;</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>bits;</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i,<sp/>j;</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/>memset(&amp;adds,<sp/>0,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(adds));</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/>*r<sp/>=<sp/>ctx-&gt;<ref refid="structsecp256k1__ecmult__gen__context_1a1ebfe4de83e25248ea9d989d06c9b069" kindref="member">initial</ref>;</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Blind<sp/>scalar/point<sp/>multiplication<sp/>by<sp/>computing<sp/>(n-b)G<sp/>+<sp/>bG<sp/>instead<sp/>of<sp/>nG.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/>secp256k1_scalar_add(&amp;gnb,<sp/>gn,<sp/>&amp;ctx-&gt;<ref refid="structsecp256k1__ecmult__gen__context_1af2f3064a367e86f936ab1c8b93d6f27e" kindref="member">blind</ref>);</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/>add.<ref refid="structsecp256k1__ge_1a1cdb35fe7abf6f17c08e4375eeb26628" kindref="member">infinity</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>64;<sp/>j++)<sp/>{</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bits<sp/>=<sp/>secp256k1_scalar_get_bits(&amp;gnb,<sp/>j<sp/>*<sp/>4,<sp/>4);</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>16;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>secp256k1_ge_storage_cmov(&amp;adds,<sp/>&amp;(*ctx-&gt;<ref refid="structsecp256k1__ecmult__gen__context_1ad1ebc8daeace10a8d646f89bbdf32882" kindref="member">prec</ref>)[j][i],<sp/>i<sp/>==<sp/>bits);</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>secp256k1_ge_from_storage(&amp;add,<sp/>&amp;adds);</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>secp256k1_gej_add_ge(r,<sp/>r,<sp/>&amp;add);</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/>bits<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/>secp256k1_ge_clear(&amp;add);</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/>secp256k1_scalar_clear(&amp;gnb);</highlight></codeline>
<codeline lineno="156"><highlight class="normal">}</highlight></codeline>
<codeline lineno="157"><highlight class="normal"></highlight></codeline>
<codeline lineno="158"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Setup<sp/>blinding<sp/>values<sp/>for<sp/>secp256k1_ecmult_gen.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="159"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>secp256k1_ecmult_gen_blind(<ref refid="structsecp256k1__ecmult__gen__context" kindref="compound">secp256k1_ecmult_gen_context</ref><sp/>*ctx,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*seed32)<sp/>{</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structsecp256k1__scalar" kindref="compound">secp256k1_scalar</ref><sp/>b;</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structsecp256k1__gej" kindref="compound">secp256k1_gej</ref><sp/>gb;</highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structsecp256k1__fe" kindref="compound">secp256k1_fe</ref><sp/>s;</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>nonce32[32];</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structsecp256k1__rfc6979__hmac__sha256__t" kindref="compound">secp256k1_rfc6979_hmac_sha256_t</ref><sp/>rng;</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>retry;</highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>keydata[64]<sp/>=<sp/>{0};</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(seed32<sp/>==<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>When<sp/>seed<sp/>is<sp/>NULL,<sp/>reset<sp/>the<sp/>initial<sp/>point<sp/>and<sp/>blinding<sp/>value.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>secp256k1_gej_set_ge(&amp;ctx-&gt;<ref refid="structsecp256k1__ecmult__gen__context_1a1ebfe4de83e25248ea9d989d06c9b069" kindref="member">initial</ref>,<sp/>&amp;secp256k1_ge_const_g);</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>secp256k1_gej_neg(&amp;ctx-&gt;<ref refid="structsecp256k1__ecmult__gen__context_1a1ebfe4de83e25248ea9d989d06c9b069" kindref="member">initial</ref>,<sp/>&amp;ctx-&gt;<ref refid="structsecp256k1__ecmult__gen__context_1a1ebfe4de83e25248ea9d989d06c9b069" kindref="member">initial</ref>);</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>secp256k1_scalar_set_int(&amp;ctx-&gt;<ref refid="structsecp256k1__ecmult__gen__context_1af2f3064a367e86f936ab1c8b93d6f27e" kindref="member">blind</ref>,<sp/>1);</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>The<sp/>prior<sp/>blinding<sp/>value<sp/>(if<sp/>not<sp/>reset)<sp/>is<sp/>chained<sp/>forward<sp/>by<sp/>including<sp/>it<sp/>in<sp/>the<sp/>hash.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><sp/>secp256k1_scalar_get_b32(nonce32,<sp/>&amp;ctx-&gt;<ref refid="structsecp256k1__ecmult__gen__context_1af2f3064a367e86f936ab1c8b93d6f27e" kindref="member">blind</ref>);</highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/><sp/><sp/>memcpy(keydata,<sp/>nonce32,<sp/>32);</highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(seed32<sp/>!=<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>memcpy(keydata<sp/>+<sp/>32,<sp/>seed32,<sp/>32);</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/><sp/>secp256k1_rfc6979_hmac_sha256_initialize(&amp;rng,<sp/>keydata,<sp/>seed32<sp/>?<sp/>64<sp/>:<sp/>32);</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/><sp/><sp/>memset(keydata,<sp/>0,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(keydata));</highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Retry<sp/>for<sp/>out<sp/>of<sp/>range<sp/>results<sp/>to<sp/>achieve<sp/>uniformity.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">do</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>secp256k1_rfc6979_hmac_sha256_generate(&amp;rng,<sp/>nonce32,<sp/>32);</highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>retry<sp/>=<sp/>!secp256k1_fe_set_b32(&amp;s,<sp/>nonce32);</highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>retry<sp/>|=<sp/>secp256k1_fe_is_zero(&amp;s);</highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(retry);<sp/></highlight><highlight class="comment">/*<sp/>This<sp/>branch<sp/>true<sp/>is<sp/>cryptographically<sp/>unreachable.<sp/>Requires<sp/>sha256_hmac<sp/>output<sp/>&gt;<sp/>Fp.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Randomize<sp/>the<sp/>projection<sp/>to<sp/>defend<sp/>against<sp/>multiplier<sp/>sidechannels.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/><sp/>secp256k1_gej_rescale(&amp;ctx-&gt;<ref refid="structsecp256k1__ecmult__gen__context_1a1ebfe4de83e25248ea9d989d06c9b069" kindref="member">initial</ref>,<sp/>&amp;s);</highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/><sp/>secp256k1_fe_clear(&amp;s);</highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">do</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>secp256k1_rfc6979_hmac_sha256_generate(&amp;rng,<sp/>nonce32,<sp/>32);</highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>secp256k1_scalar_set_b32(&amp;b,<sp/>nonce32,<sp/>&amp;retry);</highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>A<sp/>blinding<sp/>value<sp/>of<sp/>0<sp/>works,<sp/>but<sp/>would<sp/>undermine<sp/>the<sp/>projection<sp/>hardening.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>retry<sp/>|=<sp/>secp256k1_scalar_is_zero(&amp;b);</highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(retry);<sp/></highlight><highlight class="comment">/*<sp/>This<sp/>branch<sp/>true<sp/>is<sp/>cryptographically<sp/>unreachable.<sp/>Requires<sp/>sha256_hmac<sp/>output<sp/>&gt;<sp/>order.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/><sp/><sp/>secp256k1_rfc6979_hmac_sha256_finalize(&amp;rng);</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/>memset(nonce32,<sp/>0,<sp/>32);</highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/><sp/><sp/>secp256k1_ecmult_gen(ctx,<sp/>&amp;gb,<sp/>&amp;b);</highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><sp/><sp/>secp256k1_scalar_negate(&amp;b,<sp/>&amp;b);</highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/><sp/><sp/>ctx-&gt;<ref refid="structsecp256k1__ecmult__gen__context_1af2f3064a367e86f936ab1c8b93d6f27e" kindref="member">blind</ref><sp/>=<sp/>b;</highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><sp/><sp/>ctx-&gt;<ref refid="structsecp256k1__ecmult__gen__context_1a1ebfe4de83e25248ea9d989d06c9b069" kindref="member">initial</ref><sp/>=<sp/>gb;</highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/><sp/>secp256k1_scalar_clear(&amp;b);</highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/><sp/><sp/>secp256k1_gej_clear(&amp;gb);</highlight></codeline>
<codeline lineno="208"><highlight class="normal">}</highlight></codeline>
<codeline lineno="209"><highlight class="normal"></highlight></codeline>
<codeline lineno="210"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
    </programlisting>
    <location file="/home/dev/ds-160209/src/secp256k1/src/ecmult_gen_impl.h"/>
  </compounddef>
</doxygen>
