<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.9.1">
  <compounddef id="utilstrencodings_8h" kind="file" language="C++">
    <compoundname>utilstrencodings.h</compoundname>
    <includes refid="stdint_8h" local="no">stdint.h</includes>
    <includes local="no">string</includes>
    <includes local="no">vector</includes>
    <includes refid="serialize_8h" local="yes">serialize.h</includes>
    <includes refid="allocators_8h" local="yes">allocators.h</includes>
    <includes local="no">boost/date_time/posix_time/posix_time.hpp</includes>
    <includes local="no">openssl/bio.h</includes>
    <includes local="no">openssl/evp.h</includes>
    <includes local="no">openssl/buffer.h</includes>
    <includes local="no">openssl/crypto.h</includes>
    <includes local="no">openssl/rand.h</includes>
    <includes local="no">openssl/bn.h</includes>
    <includedby refid="uint256_8cpp" local="yes">/home/dev/ds-160209/src/uint256.cpp</includedby>
    <includedby refid="utilstrencodings_8cpp" local="yes">/home/dev/ds-160209/src/utilstrencodings.cpp</includedby>
    <incdepgraph>
      <node id="58118">
        <label>boost/thread/mutex.hpp</label>
      </node>
      <node id="58109">
        <label>limits</label>
      </node>
      <node id="58129">
        <label>openssl/rand.h</label>
      </node>
      <node id="58113">
        <label>boost/tuple/tuple.hpp</label>
      </node>
      <node id="58122">
        <label>version.h</label>
        <link refid="version_8h"/>
        <childnode refid="58123" relation="include">
        </childnode>
        <childnode refid="58103" relation="include">
        </childnode>
      </node>
      <node id="58119">
        <label>sys/mman.h</label>
      </node>
      <node id="58116">
        <label>stdlib.h</label>
      </node>
      <node id="58128">
        <label>openssl/crypto.h</label>
      </node>
      <node id="58108">
        <label>cassert</label>
      </node>
      <node id="58103">
        <label>string</label>
      </node>
      <node id="58106">
        <label>map</label>
      </node>
      <node id="58105">
        <label>serialize.h</label>
        <link refid="serialize_8h"/>
        <childnode refid="58103" relation="include">
        </childnode>
        <childnode refid="58104" relation="include">
        </childnode>
        <childnode refid="58106" relation="include">
        </childnode>
        <childnode refid="58107" relation="include">
        </childnode>
        <childnode refid="58108" relation="include">
        </childnode>
        <childnode refid="58109" relation="include">
        </childnode>
        <childnode refid="58102" relation="include">
        </childnode>
        <childnode refid="58110" relation="include">
        </childnode>
        <childnode refid="58111" relation="include">
        </childnode>
        <childnode refid="58112" relation="include">
        </childnode>
        <childnode refid="58113" relation="include">
        </childnode>
        <childnode refid="58114" relation="include">
        </childnode>
        <childnode refid="58122" relation="include">
        </childnode>
      </node>
      <node id="58120">
        <label>limits.h</label>
      </node>
      <node id="58125">
        <label>openssl/bio.h</label>
      </node>
      <node id="58124">
        <label>boost/date_time/posix_time/posix_time.hpp</label>
      </node>
      <node id="58117">
        <label>string.h</label>
      </node>
      <node id="58123">
        <label>clientversion.h</label>
        <link refid="clientversion_8h"/>
      </node>
      <node id="58111">
        <label>cstdio</label>
      </node>
      <node id="58127">
        <label>openssl/buffer.h</label>
      </node>
      <node id="58112">
        <label>boost/type_traits/is_fundamental.hpp</label>
      </node>
      <node id="58121">
        <label>unistd.h</label>
      </node>
      <node id="58104">
        <label>vector</label>
      </node>
      <node id="58126">
        <label>openssl/evp.h</label>
      </node>
      <node id="58102">
        <label>stdint.h</label>
        <link refid="stdint_8h"/>
      </node>
      <node id="58101">
        <label>/home/dev/ds-160209/src/utilstrencodings.h</label>
        <link refid="utilstrencodings.h"/>
        <childnode refid="58102" relation="include">
        </childnode>
        <childnode refid="58103" relation="include">
        </childnode>
        <childnode refid="58104" relation="include">
        </childnode>
        <childnode refid="58105" relation="include">
        </childnode>
        <childnode refid="58114" relation="include">
        </childnode>
        <childnode refid="58124" relation="include">
        </childnode>
        <childnode refid="58125" relation="include">
        </childnode>
        <childnode refid="58126" relation="include">
        </childnode>
        <childnode refid="58127" relation="include">
        </childnode>
        <childnode refid="58128" relation="include">
        </childnode>
        <childnode refid="58129" relation="include">
        </childnode>
        <childnode refid="58130" relation="include">
        </childnode>
      </node>
      <node id="58130">
        <label>openssl/bn.h</label>
      </node>
      <node id="58114">
        <label>allocators.h</label>
        <link refid="allocators_8h"/>
        <childnode refid="58115" relation="include">
        </childnode>
        <childnode refid="58117" relation="include">
        </childnode>
        <childnode refid="58103" relation="include">
        </childnode>
        <childnode refid="58118" relation="include">
        </childnode>
        <childnode refid="58106" relation="include">
        </childnode>
        <childnode refid="58119" relation="include">
        </childnode>
        <childnode refid="58120" relation="include">
        </childnode>
        <childnode refid="58121" relation="include">
        </childnode>
      </node>
      <node id="58107">
        <label>set</label>
      </node>
      <node id="58115">
        <label>cleanse.h</label>
        <link refid="cleanse_8h"/>
        <childnode refid="58116" relation="include">
        </childnode>
      </node>
      <node id="58110">
        <label>cstring</label>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="58131">
        <label>/home/dev/ds-160209/src/utilstrencodings.h</label>
        <link refid="utilstrencodings.h"/>
        <childnode refid="58132" relation="include">
        </childnode>
        <childnode refid="58133" relation="include">
        </childnode>
      </node>
      <node id="58133">
        <label>/home/dev/ds-160209/src/utilstrencodings.cpp</label>
        <link refid="utilstrencodings_8cpp"/>
      </node>
      <node id="58132">
        <label>/home/dev/ds-160209/src/uint256.cpp</label>
        <link refid="uint256_8cpp"/>
      </node>
    </invincdepgraph>
      <sectiondef kind="define">
      <memberdef kind="define" id="utilstrencodings_8h_1a5f5e63e2c340bc52049e38c09b37e6e1" prot="public" static="no">
        <name>BEGIN</name>
        <param><defname>a</defname></param>
        <initializer>((char*)&amp;(a))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Utilities for converting data from/to strings. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/utilstrencodings.h" line="28" column="9" bodyfile="/home/dev/ds-160209/src/utilstrencodings.h" bodystart="28" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="utilstrencodings_8h_1ac32457d3f041434e57a2924847796fda" prot="public" static="no">
        <name>END</name>
        <param><defname>a</defname></param>
        <initializer>((char*)&amp;((&amp;(a))[1]))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/utilstrencodings.h" line="29" column="9" bodyfile="/home/dev/ds-160209/src/utilstrencodings.h" bodystart="29" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="utilstrencodings_8h_1a4a903229f3d520fdb700f1c82586368b" prot="public" static="no">
        <name>UBEGIN</name>
        <param><defname>a</defname></param>
        <initializer>((unsigned char*)&amp;(a))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/utilstrencodings.h" line="30" column="9" bodyfile="/home/dev/ds-160209/src/utilstrencodings.h" bodystart="30" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="utilstrencodings_8h_1af0f53b3b9bd67803cd1efe42c7894aa3" prot="public" static="no">
        <name>UEND</name>
        <param><defname>a</defname></param>
        <initializer>((unsigned char*)&amp;((&amp;(a))[1]))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/utilstrencodings.h" line="31" column="9" bodyfile="/home/dev/ds-160209/src/utilstrencodings.h" bodystart="31" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="utilstrencodings_8h_1a35bf72ac971bd331fba0b3e8117bcbf9" prot="public" static="no">
        <name>ARRAYLEN</name>
        <param><defname>array</defname></param>
        <initializer>(sizeof(array)/sizeof((array)[0]))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/utilstrencodings.h" line="32" column="9" bodyfile="/home/dev/ds-160209/src/utilstrencodings.h" bodystart="32" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="utilstrencodings_8h_1aa3052ab82a2ba880ea3e30b3357c8820" prot="public" static="no">
        <name>PAIRTYPE</name>
        <param><defname>t1</defname></param>
        <param><defname>t2</defname></param>
        <initializer>std::pair&lt;t1, t2&gt;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is needed because the foreach macro can&apos;t get over the comma in pair&lt;t1, t2&gt; </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/utilstrencodings.h" line="35" column="9" bodyfile="/home/dev/ds-160209/src/utilstrencodings.h" bodystart="35" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="utilstrencodings_8h_1ad7d5462ec6ec6e23493c839d01da7424" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; unsigned char &gt;</type>
        <definition>std::vector&lt;unsigned char&gt; DecodeBase64</definition>
        <argsstring>(const char *p, bool *pfInvalid=NULL)</argsstring>
        <name>DecodeBase64</name>
        <param>
          <type>const char *</type>
          <declname>p</declname>
        </param>
        <param>
          <type>bool *</type>
          <declname>pfInvalid</declname>
          <defval>NULL</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/utilstrencodings.h" line="39" column="1" bodyfile="/home/dev/ds-160209/src/util.cpp" bodystart="629" bodyend="710"/>
        <referencedby refid="class_i2_p_session_1a4daa60a1a5767f354ebc5af8cabc4691" compoundref="i2p_8cpp" startline="193" endline="207">I2PSession::GenerateB32AddressFromDestination</referencedby>
        <referencedby refid="rpcmisc_8cpp_1ad8fce781dfd9dfd4866bba2a4589141a" compoundref="rpcmisc_8cpp" startline="207" endline="241">verifymessage</referencedby>
        <referencedby refid="rpcserver_8cpp_1ab8fabed74cd2c68e52b1838425da0f0f" compoundref="rpcserver_8cpp" startline="354" endline="362">HTTPAuthorized</referencedby>
        <referencedby refid="rpcstormnode-budget_8cpp_1a0ed276908ef20f9b0ed87c3ed4c26d25" compoundref="rpcstormnode-budget_8cpp" startline="517" endline="567">snbudgetvoteraw</referencedby>
        <referencedby refid="base64__tests_8cpp_1a2359bd06114a1f3a41c3ebc5895e21bb" compoundref="base64__tests_8cpp" startline="9" endline="20">BOOST_AUTO_TEST_CASE</referencedby>
        <referencedby refid="util_8cpp_1a1fc3cb76c00fb587855511c99a715af5" compoundref="util_8cpp" startline="712" endline="716">DecodeBase64</referencedby>
      </memberdef>
      <memberdef kind="function" id="utilstrencodings_8h_1abe1060fd27543de8bf9806678f4e91eb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string DecodeBase64</definition>
        <argsstring>(const std::string &amp;str)</argsstring>
        <name>DecodeBase64</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>str</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/utilstrencodings.h" line="40" column="1"/>
      </memberdef>
      <memberdef kind="function" id="utilstrencodings_8h_1ab088e17c477707c187113686457eabb8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string EncodeBase64</definition>
        <argsstring>(const unsigned char *pch, size_t len)</argsstring>
        <name>EncodeBase64</name>
        <param>
          <type>const unsigned char *</type>
          <declname>pch</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>len</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/utilstrencodings.h" line="41" column="1" bodyfile="/home/dev/ds-160209/src/util.cpp" bodystart="578" bodyend="622"/>
        <referencedby refid="rpcclient_8cpp_1ae0b4394f271db49671cf894dbe94c484" compoundref="rpcclient_8cpp" startline="33" endline="95">CallRPC</referencedby>
        <referencedby refid="rpcwallet_8cpp_1a315b42a2c859c4b50a54c1b05984928c" compoundref="rpcwallet_8cpp" startline="575" endline="624">signmessage</referencedby>
        <referencedby refid="base64__tests_8cpp_1a2359bd06114a1f3a41c3ebc5895e21bb" compoundref="base64__tests_8cpp" startline="9" endline="20">BOOST_AUTO_TEST_CASE</referencedby>
        <referencedby refid="util_8cpp_1a01c144e3a6e8de1ea8481bd7c69fef07" compoundref="util_8cpp" startline="624" endline="627">EncodeBase64</referencedby>
      </memberdef>
      <memberdef kind="function" id="utilstrencodings_8h_1ad00e71aa1ead536a941d6f7d7c0292ae" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string EncodeBase64</definition>
        <argsstring>(const std::string &amp;str)</argsstring>
        <name>EncodeBase64</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>str</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/utilstrencodings.h" line="42" column="1"/>
      </memberdef>
      <memberdef kind="function" id="utilstrencodings_8h_1a0071c0bf91d611895e43999e62666c96" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="allocators_8h_1a396ed773a5ac24aec28c8f7dc413c7ac" kindref="member">SecureString</ref></type>
        <definition>SecureString DecodeBase64Secure</definition>
        <argsstring>(const SecureString &amp;input)</argsstring>
        <name>DecodeBase64Secure</name>
        <param>
          <type>const <ref refid="allocators_8h_1a396ed773a5ac24aec28c8f7dc413c7ac" kindref="member">SecureString</ref> &amp;</type>
          <declname>input</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/utilstrencodings.h" line="43" column="1" bodyfile="/home/dev/ds-160209/src/util.cpp" bodystart="746" bodyend="772"/>
        <references refid="db__impl_8cc_1a1a1fa02d49bbc4c0896ff1cb12618dc3" compoundref="db__impl_8cc" startline="1020">mem</references>
      </memberdef>
      <memberdef kind="function" id="utilstrencodings_8h_1a49f6f1cd42cb886762be52c72466dc7e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="allocators_8h_1a396ed773a5ac24aec28c8f7dc413c7ac" kindref="member">SecureString</ref></type>
        <definition>SecureString EncodeBase64Secure</definition>
        <argsstring>(const SecureString &amp;input)</argsstring>
        <name>EncodeBase64Secure</name>
        <param>
          <type>const <ref refid="allocators_8h_1a396ed773a5ac24aec28c8f7dc413c7ac" kindref="member">SecureString</ref> &amp;</type>
          <declname>input</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/utilstrencodings.h" line="44" column="1" bodyfile="/home/dev/ds-160209/src/util.cpp" bodystart="719" bodyend="743"/>
        <references refid="db__impl_8cc_1a1a1fa02d49bbc4c0896ff1cb12618dc3" compoundref="db__impl_8cc" startline="1020">mem</references>
      </memberdef>
      <memberdef kind="function" id="utilstrencodings_8h_1a58e69b413820ff62a4f203eb5c1a827a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; unsigned char &gt;</type>
        <definition>std::vector&lt;unsigned char&gt; DecodeBase32</definition>
        <argsstring>(const char *p, bool *pfInvalid=NULL)</argsstring>
        <name>DecodeBase32</name>
        <param>
          <type>const char *</type>
          <declname>p</declname>
        </param>
        <param>
          <type>bool *</type>
          <declname>pfInvalid</declname>
          <defval>NULL</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/utilstrencodings.h" line="45" column="1" bodyfile="/home/dev/ds-160209/src/util.cpp" bodystart="839" bodyend="954"/>
        <referencedby refid="class_c_net_addr_1aa3e44dfd064d9d8da1cb48cdcb7dd231" compoundref="netbase_8cpp" startline="560" endline="591">CNetAddr::SetSpecial</referencedby>
        <referencedby refid="base32__tests_8cpp_1aae94806c3fd4446ae6ebfe0f368d0b36" compoundref="base32__tests_8cpp" startline="7" endline="18">BOOST_AUTO_TEST_CASE</referencedby>
        <referencedby refid="util_8cpp_1ab2bcbf931beb3b2a813db9daf09f265c" compoundref="util_8cpp" startline="956" endline="960">DecodeBase32</referencedby>
      </memberdef>
      <memberdef kind="function" id="utilstrencodings_8h_1a31f169e89be696c17678f84b74c1666c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string DecodeBase32</definition>
        <argsstring>(const std::string &amp;str)</argsstring>
        <name>DecodeBase32</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>str</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/utilstrencodings.h" line="46" column="1"/>
      </memberdef>
      <memberdef kind="function" id="utilstrencodings_8h_1aed1944a78afffe9d5f3129e656dc8aa6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string EncodeBase32</definition>
        <argsstring>(const unsigned char *pch, size_t len)</argsstring>
        <name>EncodeBase32</name>
        <param>
          <type>const unsigned char *</type>
          <declname>pch</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>len</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/utilstrencodings.h" line="47" column="1" bodyfile="/home/dev/ds-160209/src/util.cpp" bodystart="775" bodyend="832"/>
        <referencedby refid="class_i2_p_session_1a4daa60a1a5767f354ebc5af8cabc4691" compoundref="i2p_8cpp" startline="193" endline="207">I2PSession::GenerateB32AddressFromDestination</referencedby>
        <referencedby refid="class_c_net_addr_1a7ec845c27b63853fb0db08a4d154266f" compoundref="netbase_8cpp" startline="822" endline="848">CNetAddr::ToStringIP</referencedby>
        <referencedby refid="base32__tests_8cpp_1aae94806c3fd4446ae6ebfe0f368d0b36" compoundref="base32__tests_8cpp" startline="7" endline="18">BOOST_AUTO_TEST_CASE</referencedby>
        <referencedby refid="util_8cpp_1aa4484ee0b7560f87051606f109e5d96a" compoundref="util_8cpp" startline="834" endline="837">EncodeBase32</referencedby>
      </memberdef>
      <memberdef kind="function" id="utilstrencodings_8h_1a352475038cfcd87d2d7d9a098d96a9d5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string EncodeBase32</definition>
        <argsstring>(const std::string &amp;str)</argsstring>
        <name>EncodeBase32</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>str</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/utilstrencodings.h" line="48" column="1"/>
      </memberdef>
      <memberdef kind="function" id="utilstrencodings_8h_1ab7a07cad3bcdf95935f4f6b5c039c546" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string i64tostr</definition>
        <argsstring>(int64_t n)</argsstring>
        <name>i64tostr</name>
        <param>
          <type><ref refid="stdint_8h_1adec1df1b8b51cb32b77e5b86fff46471" kindref="member">int64_t</ref></type>
          <declname>n</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/utilstrencodings.h" line="51" column="1" bodyfile="/home/dev/ds-160209/src/util.h" bodystart="287" bodyend="290"/>
        <references refid="tinyformat_8h_1a56c674871a61baaad36ad52238c08857" compoundref="tinyformat_8h" startline="1011">strprintf</references>
      </memberdef>
      <memberdef kind="function" id="utilstrencodings_8h_1a565b3ea015b133d01dc52b4ec6e45f07" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string itostr</definition>
        <argsstring>(int n)</argsstring>
        <name>itostr</name>
        <param>
          <type>int</type>
          <declname>n</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/utilstrencodings.h" line="52" column="1" bodyfile="/home/dev/ds-160209/src/util.h" bodystart="292" bodyend="295"/>
        <references refid="tinyformat_8h_1a56c674871a61baaad36ad52238c08857" compoundref="tinyformat_8h" startline="1011">strprintf</references>
        <referencedby refid="rpcclient_8cpp_1ae0b4394f271db49671cf894dbe94c484" compoundref="rpcclient_8cpp" startline="33" endline="95">CallRPC</referencedby>
        <referencedby refid="rpcwallet_8cpp_1afe8615fcf2c8e5319166c2fa8c638e08" compoundref="rpcwallet_8cpp" startline="1930" endline="1959">keypoolrefill</referencedby>
      </memberdef>
      <memberdef kind="function" id="utilstrencodings_8h_1a22916d155600c742c4efad727462588e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="stdint_8h_1adec1df1b8b51cb32b77e5b86fff46471" kindref="member">int64_t</ref></type>
        <definition>int64_t atoi64</definition>
        <argsstring>(const char *psz)</argsstring>
        <name>atoi64</name>
        <param>
          <type>const char *</type>
          <declname>psz</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/utilstrencodings.h" line="53" column="1" bodyfile="/home/dev/ds-160209/src/util.h" bodystart="297" bodyend="304"/>
        <referencedby refid="util_8h_1a72faa2422b590d61f0d365e8f8877e57" compoundref="util_8cpp" startline="368" endline="406">ParseMoney</referencedby>
        <referencedby refid="util_8h_1a1bade4f0fca4498b4911abdbe4227dc4" compoundref="util_8cpp" startline="543" endline="548">GetArg</referencedby>
        <referencedby refid="class_c_wallet_tx_1a94e65d0105f2a75a627e374b0bbefe06" compoundref="wallet_8h" startline="636" endline="692">CWalletTx::SerializationOp</referencedby>
      </memberdef>
      <memberdef kind="function" id="utilstrencodings_8h_1aba1c6f08c135078a7af3385ed3e91ef3" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="stdint_8h_1adec1df1b8b51cb32b77e5b86fff46471" kindref="member">int64_t</ref></type>
        <definition>int64_t atoi64</definition>
        <argsstring>(const std::string &amp;str)</argsstring>
        <name>atoi64</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>str</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/utilstrencodings.h" line="54" column="1" bodyfile="/home/dev/ds-160209/src/util.h" bodystart="306" bodyend="313"/>
      </memberdef>
      <memberdef kind="function" id="utilstrencodings_8h_1aa5ce96ec36f4413f820cec9c1831c070" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>int atoi</definition>
        <argsstring>(const std::string &amp;str)</argsstring>
        <name>atoi</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>str</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/utilstrencodings.h" line="55" column="1" bodyfile="/home/dev/ds-160209/src/util.h" bodystart="315" bodyend="318"/>
        <references refid="util_8h_1aa5ce96ec36f4413f820cec9c1831c070" compoundref="util_8h" startline="315" endline="318">atoi</references>
        <referencedby refid="class_c_active_stormnode_1af66060dcef7137a1db78ad72b396d741" compoundref="activestormnode_8cpp" startline="365" endline="399">CActiveStormnode::SelectCoinsStormnode</referencedby>
        <referencedby refid="classleveldb_1_1_d_b_test_1aa7c845810f6d57b0655eda370e8de33f" compoundref="db__test_8cc" startline="378" endline="384">leveldb::DBTest::NumTableFilesAtLevel</referencedby>
        <referencedby refid="namespaceleveldb_1a175371052945d08563d145130faec721" compoundref="table__test_8cc" startline="736" endline="758">leveldb::TEST</referencedby>
        <referencedby refid="namespaceleveldb_1_1test_1a0d48ce23bccd2763df90789cb3aac03c" compoundref="testharness_8cc" startline="67" endline="74">leveldb::test::RandomSeed</referencedby>
        <referencedby refid="class_c_node_1af8d4b8c0f883afffcb62d906c31b2cdf" compoundref="net_8h" startline="544" endline="578">CNode::EndMessage</referencedby>
        <referencedby refid="rpcprotocol_8cpp_1add578b3fb095706a7a78d265fa97d8d0" compoundref="rpcprotocol_8cpp" startline="105" endline="138">ReadHTTPRequestLine</referencedby>
        <referencedby refid="rpcprotocol_8h_1af615c564cc7794d255e5adfacade4066" compoundref="rpcprotocol_8cpp" startline="140" endline="153">ReadHTTPStatus</referencedby>
        <referencedby refid="rpcprotocol_8cpp_1adfa1ef30dd1e00dcbecff15e1161e369" compoundref="rpcprotocol_8cpp" startline="155" endline="178">ReadHTTPHeaders</referencedby>
        <referencedby refid="rpcstormnode_8cpp_1a1b562b4a6a627758a7c1080f23a82aa0" compoundref="rpcstormnode_8cpp" startline="81" endline="471">stormnode</referencedby>
        <referencedby refid="utilstrencodings_8h_1aa5ce96ec36f4413f820cec9c1831c070" compoundref="util_8h" startline="315" endline="318">atoi</referencedby>
        <referencedby refid="util_8h_1a64d956f1dda7f9a80ab5d594532b906d" compoundref="util_8cpp" startline="550" endline="559">GetBoolArg</referencedby>
      </memberdef>
      <memberdef kind="function" id="utilstrencodings_8h_1a880a215d9e931432b095084c756a49bb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool ParseInt32</definition>
        <argsstring>(const std::string &amp;str, int32_t *out)</argsstring>
        <name>ParseInt32</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>str</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1ab1967d8591af1a4e48c37fd2b0f184d0" kindref="member">int32_t</ref> *</type>
          <declname>out</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Convert string to signed 32-bit integer with strict parse error feedback. <simplesect kind="return"><para>true if the entire string could be parsed as valid integer, false if not the entire string could be parsed or when overflow or underflow occurred. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/utilstrencodings.h" line="62" column="1" bodyfile="/home/dev/ds-160209/src/util.cpp" bodystart="993" bodyend="1005"/>
      </memberdef>
      <memberdef kind="function" id="utilstrencodings_8h_1ab754c84a5a52f6853642e86447ce460e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string FormatParagraph</definition>
        <argsstring>(const std::string in, size_t width=79, size_t indent=0)</argsstring>
        <name>FormatParagraph</name>
        <param>
          <type>const std::string</type>
          <declname>in</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>width</declname>
          <defval>79</defval>
        </param>
        <param>
          <type>size_t</type>
          <declname>indent</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Format a paragraph of text to a fixed width, adding spaces for indentation to any added line. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/utilstrencodings.h" line="68" column="1" bodyfile="/home/dev/ds-160209/src/util.cpp" bodystart="1007" bodyend="1040"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">//<sp/>Copyright<sp/>(c)<sp/>2009-2016<sp/>Satoshi<sp/>Nakamoto</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Copyright<sp/>(c)<sp/>2009-2016<sp/>The<sp/>Bitcoin<sp/>Developers</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Distributed<sp/>under<sp/>the<sp/>MIT<sp/>software<sp/>license,<sp/>see<sp/>the<sp/>accompanying</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="comment">//<sp/>file<sp/>COPYING<sp/>or<sp/>http://www.opensource.org/licenses/mit-license.php.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="preprocessor">#ifndef<sp/>DARKSILK_UTILSTRENCODINGS_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DARKSILK_UTILSTRENCODINGS_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="stdint_8h" kindref="compound">stdint.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;string&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;vector&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="serialize_8h" kindref="compound">serialize.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="allocators_8h" kindref="compound">allocators.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;boost/date_time/posix_time/posix_time.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;openssl/bio.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;openssl/evp.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;openssl/buffer.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;openssl/crypto.h&gt;</highlight><highlight class="normal"><sp/></highlight><highlight class="comment">//<sp/>for<sp/>OPENSSL_cleanse()</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;openssl/rand.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;openssl/bn.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight></codeline>
<codeline lineno="28" refid="utilstrencodings_8h_1a5f5e63e2c340bc52049e38c09b37e6e1" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>BEGIN(a)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((char*)&amp;(a))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29" refid="utilstrencodings_8h_1ac32457d3f041434e57a2924847796fda" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>END(a)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((char*)&amp;((&amp;(a))[1]))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="30" refid="utilstrencodings_8h_1a4a903229f3d520fdb700f1c82586368b" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>UBEGIN(a)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((unsigned<sp/>char*)&amp;(a))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="31" refid="utilstrencodings_8h_1af0f53b3b9bd67803cd1efe42c7894aa3" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>UEND(a)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((unsigned<sp/>char*)&amp;((&amp;(a))[1]))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32" refid="utilstrencodings_8h_1a35bf72ac971bd331fba0b3e8117bcbf9" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ARRAYLEN(array)<sp/><sp/><sp/><sp/><sp/>(sizeof(array)/sizeof((array)[0]))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight></codeline>
<codeline lineno="35" refid="utilstrencodings_8h_1aa3052ab82a2ba880ea3e30b3357c8820" refkind="member"><highlight class="preprocessor">#define<sp/>PAIRTYPE(t1,<sp/>t2)<sp/><sp/><sp/><sp/>std::pair&lt;t1,<sp/>t2&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal">std::vector&lt;unsigned<sp/>char&gt;<sp/><ref refid="utilstrencodings_8h_1ad7d5462ec6ec6e23493c839d01da7424" kindref="member">DecodeBase64</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>p,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal">*<sp/>pfInvalid<sp/>=<sp/>NULL);</highlight></codeline>
<codeline lineno="40"><highlight class="normal">std::string<sp/><ref refid="utilstrencodings_8h_1ad7d5462ec6ec6e23493c839d01da7424" kindref="member">DecodeBase64</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>str);</highlight></codeline>
<codeline lineno="41"><highlight class="normal">std::string<sp/><ref refid="utilstrencodings_8h_1ab088e17c477707c187113686457eabb8" kindref="member">EncodeBase64</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>pch,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>len);</highlight></codeline>
<codeline lineno="42"><highlight class="normal">std::string<sp/><ref refid="utilstrencodings_8h_1ab088e17c477707c187113686457eabb8" kindref="member">EncodeBase64</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>str);</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><ref refid="allocators_8h_1a396ed773a5ac24aec28c8f7dc413c7ac" kindref="member">SecureString</ref><sp/><ref refid="utilstrencodings_8h_1a0071c0bf91d611895e43999e62666c96" kindref="member">DecodeBase64Secure</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="allocators_8h_1a396ed773a5ac24aec28c8f7dc413c7ac" kindref="member">SecureString</ref>&amp;<sp/>input);</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><ref refid="allocators_8h_1a396ed773a5ac24aec28c8f7dc413c7ac" kindref="member">SecureString</ref><sp/><ref refid="utilstrencodings_8h_1a49f6f1cd42cb886762be52c72466dc7e" kindref="member">EncodeBase64Secure</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="allocators_8h_1a396ed773a5ac24aec28c8f7dc413c7ac" kindref="member">SecureString</ref>&amp;<sp/>input);</highlight></codeline>
<codeline lineno="45"><highlight class="normal">std::vector&lt;unsigned<sp/>char&gt;<sp/><ref refid="utilstrencodings_8h_1a58e69b413820ff62a4f203eb5c1a827a" kindref="member">DecodeBase32</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>p,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal">*<sp/>pfInvalid<sp/>=<sp/>NULL);</highlight></codeline>
<codeline lineno="46"><highlight class="normal">std::string<sp/><ref refid="utilstrencodings_8h_1a58e69b413820ff62a4f203eb5c1a827a" kindref="member">DecodeBase32</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>str);</highlight></codeline>
<codeline lineno="47"><highlight class="normal">std::string<sp/><ref refid="utilstrencodings_8h_1aed1944a78afffe9d5f3129e656dc8aa6" kindref="member">EncodeBase32</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>pch,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>len);</highlight></codeline>
<codeline lineno="48"><highlight class="normal">std::string<sp/><ref refid="utilstrencodings_8h_1aed1944a78afffe9d5f3129e656dc8aa6" kindref="member">EncodeBase32</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>str);</highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal">std::string<sp/><ref refid="utilstrencodings_8h_1ab7a07cad3bcdf95935f4f6b5c039c546" kindref="member">i64tostr</ref>(<ref refid="stdint_8h_1adec1df1b8b51cb32b77e5b86fff46471" kindref="member">int64_t</ref><sp/>n);</highlight></codeline>
<codeline lineno="52"><highlight class="normal">std::string<sp/><ref refid="utilstrencodings_8h_1a565b3ea015b133d01dc52b4ec6e45f07" kindref="member">itostr</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n);</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><ref refid="stdint_8h_1adec1df1b8b51cb32b77e5b86fff46471" kindref="member">int64_t</ref><sp/><ref refid="utilstrencodings_8h_1a22916d155600c742c4efad727462588e" kindref="member">atoi64</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>psz);</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><ref refid="stdint_8h_1adec1df1b8b51cb32b77e5b86fff46471" kindref="member">int64_t</ref><sp/><ref refid="utilstrencodings_8h_1a22916d155600c742c4efad727462588e" kindref="member">atoi64</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>str);</highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="utilstrencodings_8h_1aa5ce96ec36f4413f820cec9c1831c070" kindref="member">atoi</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>str);</highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="utilstrencodings_8h_1a880a215d9e931432b095084c756a49bb" kindref="member">ParseInt32</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>str,<sp/><ref refid="stdint_8h_1ab1967d8591af1a4e48c37fd2b0f184d0" kindref="member">int32_t</ref><sp/>*out);</highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight></codeline>
<codeline lineno="68"><highlight class="normal">std::string<sp/><ref refid="utilstrencodings_8h_1ab754c84a5a52f6853642e86447ce460e" kindref="member">FormatParagraph</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>in,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>width=79,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>indent=0);</highlight></codeline>
<codeline lineno="69"><highlight class="normal"></highlight></codeline>
<codeline lineno="70"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/>//<sp/>DARKSILK_UTILSTRENCODINGS_H</highlight></codeline>
    </programlisting>
    <location file="/home/dev/ds-160209/src/utilstrencodings.h"/>
  </compounddef>
</doxygen>
