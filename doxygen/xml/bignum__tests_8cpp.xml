<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.9.1">
  <compounddef id="bignum__tests_8cpp" kind="file" language="C++">
    <compoundname>bignum_tests.cpp</compoundname>
    <includes local="no">boost/test/unit_test.hpp</includes>
    <includes local="no">limits</includes>
    <includes refid="bignum_8h" local="yes">bignum.h</includes>
    <includes local="yes">util.h</includes>
    <incdepgraph>
      <node id="55616">
        <label>boost/thread/mutex.hpp</label>
      </node>
      <node id="55599">
        <label>limits</label>
      </node>
      <node id="55623">
        <label>assert.h</label>
      </node>
      <node id="55611">
        <label>boost/tuple/tuple.hpp</label>
      </node>
      <node id="55620">
        <label>version.h</label>
        <link refid="version_8h"/>
        <childnode refid="55621" relation="include">
        </childnode>
        <childnode refid="55602" relation="include">
        </childnode>
      </node>
      <node id="55598">
        <label>boost/test/unit_test.hpp</label>
      </node>
      <node id="55617">
        <label>sys/mman.h</label>
      </node>
      <node id="55614">
        <label>stdlib.h</label>
      </node>
      <node id="55606">
        <label>cassert</label>
      </node>
      <node id="55624">
        <label>stdexcept</label>
      </node>
      <node id="55602">
        <label>string</label>
      </node>
      <node id="55604">
        <label>map</label>
      </node>
      <node id="55601">
        <label>serialize.h</label>
        <link refid="serialize_8h"/>
        <childnode refid="55602" relation="include">
        </childnode>
        <childnode refid="55603" relation="include">
        </childnode>
        <childnode refid="55604" relation="include">
        </childnode>
        <childnode refid="55605" relation="include">
        </childnode>
        <childnode refid="55606" relation="include">
        </childnode>
        <childnode refid="55599" relation="include">
        </childnode>
        <childnode refid="55607" relation="include">
        </childnode>
        <childnode refid="55608" relation="include">
        </childnode>
        <childnode refid="55609" relation="include">
        </childnode>
        <childnode refid="55610" relation="include">
        </childnode>
        <childnode refid="55611" relation="include">
        </childnode>
        <childnode refid="55612" relation="include">
        </childnode>
        <childnode refid="55620" relation="include">
        </childnode>
      </node>
      <node id="55618">
        <label>limits.h</label>
      </node>
      <node id="55597">
        <label>/home/dev/ds-160209/src/test/bignum_tests.cpp</label>
        <link refid="bignum_tests.cpp"/>
        <childnode refid="55598" relation="include">
        </childnode>
        <childnode refid="55599" relation="include">
        </childnode>
        <childnode refid="55600" relation="include">
        </childnode>
        <childnode refid="55626" relation="include">
        </childnode>
      </node>
      <node id="55615">
        <label>string.h</label>
      </node>
      <node id="55621">
        <label>clientversion.h</label>
        <link refid="clientversion_8h"/>
      </node>
      <node id="55609">
        <label>cstdio</label>
      </node>
      <node id="55610">
        <label>boost/type_traits/is_fundamental.hpp</label>
      </node>
      <node id="55619">
        <label>unistd.h</label>
      </node>
      <node id="55603">
        <label>vector</label>
      </node>
      <node id="55600">
        <label>bignum.h</label>
        <link refid="bignum_8h"/>
        <childnode refid="55601" relation="include">
        </childnode>
        <childnode refid="55622" relation="include">
        </childnode>
        <childnode refid="55625" relation="include">
        </childnode>
        <childnode refid="55624" relation="include">
        </childnode>
        <childnode refid="55603" relation="include">
        </childnode>
        <childnode refid="55607" relation="include">
        </childnode>
      </node>
      <node id="55607">
        <label>stdint.h</label>
        <link refid="stdint_8h"/>
      </node>
      <node id="55622">
        <label>uint256.h</label>
        <link refid="uint256_8h"/>
        <childnode refid="55623" relation="include">
        </childnode>
        <childnode refid="55608" relation="include">
        </childnode>
        <childnode refid="55624" relation="include">
        </childnode>
        <childnode refid="55607" relation="include">
        </childnode>
        <childnode refid="55602" relation="include">
        </childnode>
        <childnode refid="55603" relation="include">
        </childnode>
      </node>
      <node id="55625">
        <label>openssl/bn.h</label>
      </node>
      <node id="55612">
        <label>allocators.h</label>
        <link refid="allocators_8h"/>
        <childnode refid="55613" relation="include">
        </childnode>
        <childnode refid="55615" relation="include">
        </childnode>
        <childnode refid="55602" relation="include">
        </childnode>
        <childnode refid="55616" relation="include">
        </childnode>
        <childnode refid="55604" relation="include">
        </childnode>
        <childnode refid="55617" relation="include">
        </childnode>
        <childnode refid="55618" relation="include">
        </childnode>
        <childnode refid="55619" relation="include">
        </childnode>
      </node>
      <node id="55605">
        <label>set</label>
      </node>
      <node id="55626">
        <label>util.h</label>
      </node>
      <node id="55613">
        <label>cleanse.h</label>
        <link refid="cleanse_8h"/>
        <childnode refid="55614" relation="include">
        </childnode>
      </node>
      <node id="55608">
        <label>cstring</label>
      </node>
    </incdepgraph>
      <sectiondef kind="define">
      <memberdef kind="define" id="bignum__tests_8cpp_1a1b173d22e57d9395897acbd8de62d505" prot="public" static="no">
        <name>NOINLINE</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/test/bignum_tests.cpp" line="23" column="10" bodyfile="/home/dev/ds-160209/src/test/bignum_tests.cpp" bodystart="23" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="bignum__tests_8cpp_1af69d853f536678941b4ff731b241168a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="bignum__tests_8cpp_1a1b173d22e57d9395897acbd8de62d505" kindref="member">NOINLINE</ref> void</type>
        <definition>NOINLINE void mysetint64</definition>
        <argsstring>(CBigNum &amp;num, int64 n)</argsstring>
        <name>mysetint64</name>
        <param>
          <type><ref refid="class_c_big_num" kindref="compound">CBigNum</ref> &amp;</type>
          <declname>num</declname>
        </param>
        <param>
          <type>int64</type>
          <declname>n</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/test/bignum_tests.cpp" line="49" column="1" bodyfile="/home/dev/ds-160209/src/test/bignum_tests.cpp" bodystart="49" bodyend="52"/>
        <references refid="class_c_big_num_1aca73fa36a797c91b30515ae61cc5d765" compoundref="bignum_8h" startline="165" endline="206">CBigNum::setint64</references>
        <referencedby refid="bignum__tests_8cpp_1a01242cefe2fb6ac92a93475329803eaf" compoundref="bignum__tests_8cpp" startline="56" endline="123">BOOST_AUTO_TEST_CASE</referencedby>
      </memberdef>
      <memberdef kind="function" id="bignum__tests_8cpp_1a01242cefe2fb6ac92a93475329803eaf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>BOOST_AUTO_TEST_CASE</definition>
        <argsstring>(bignum_setint64)</argsstring>
        <name>BOOST_AUTO_TEST_CASE</name>
        <param>
          <type>bignum_setint64</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/test/bignum_tests.cpp" line="56" column="1" bodyfile="/home/dev/ds-160209/src/test/bignum_tests.cpp" bodystart="56" bodyend="123"/>
        <references refid="class_c_big_num_1adca0fa61568497152375328deef6c895" compoundref="bignum_8h" startline="376" endline="400">CBigNum::ToString</references>
        <references refid="class_c_big_num_1ac8c00c696d9cbd3fa309a2d0a6bc4b1d" compoundref="bignum_8h" startline="140" endline="144">CBigNum::setulong</references>
        <references refid="bignum__tests_8cpp_1af69d853f536678941b4ff731b241168a" compoundref="bignum__tests_8cpp" startline="49" endline="52">mysetint64</references>
      </memberdef>
      <memberdef kind="function" id="bignum__tests_8cpp_1a973cf447bcf2388c4a58a7860a342151" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>BOOST_AUTO_TEST_CASE</definition>
        <argsstring>(bignum_SetHex)</argsstring>
        <name>BOOST_AUTO_TEST_CASE</name>
        <param>
          <type>bignum_SetHex</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/test/bignum_tests.cpp" line="125" column="1" bodyfile="/home/dev/ds-160209/src/test/bignum_tests.cpp" bodystart="125" bodyend="131"/>
        <references refid="class_c_big_num_1a9d4f7c42f141e45410af96e6804c54fe" compoundref="bignum_8h" startline="346" endline="374">CBigNum::SetHex</references>
        <references refid="class_c_big_num_1afdfc11e08c544e06e2877767b3fb8730" compoundref="bignum_8h" startline="402" endline="405">CBigNum::GetHex</references>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#include<sp/>&lt;boost/test/unit_test.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;limits&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="bignum_8h" kindref="compound">bignum.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;util.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal">BOOST_AUTO_TEST_SUITE(bignum_tests)</highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Unfortunately<sp/>there&apos;s<sp/>no<sp/>standard<sp/>way<sp/>of<sp/>preventing<sp/>a<sp/>function<sp/>from<sp/>being</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="comment">//<sp/>inlined,<sp/>so<sp/>we<sp/>define<sp/>a<sp/>macro<sp/>for<sp/>it.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="comment">//<sp/>You<sp/>should<sp/>use<sp/>it<sp/>like<sp/>this:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>NOINLINE<sp/>void<sp/>function()<sp/>{...}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(__GNUC__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="comment">//<sp/>This<sp/>also<sp/>works<sp/>and<sp/>will<sp/>be<sp/>defined<sp/>for<sp/>any<sp/>compiler<sp/>implementing<sp/>GCC</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="comment">//<sp/>extensions,<sp/>such<sp/>as<sp/>Clang<sp/>and<sp/>ICC.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NOINLINE<sp/>__attribute__((noinline))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="preprocessor">#elif<sp/>defined(_MSC_VER)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NOINLINE<sp/>__declspec(noinline)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="comment">//<sp/>We<sp/>give<sp/>out<sp/>a<sp/>warning<sp/>because<sp/>it<sp/>impacts<sp/>the<sp/>correctness<sp/>of<sp/>one<sp/>bignum<sp/>test.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="preprocessor">#warning<sp/>You<sp/>should<sp/>define<sp/>NOINLINE<sp/>for<sp/>your<sp/>compiler.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23" refid="bignum__tests_8cpp_1a1b173d22e57d9395897acbd8de62d505" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NOINLINE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="comment">//<sp/>For<sp/>the<sp/>following<sp/>test<sp/>case,<sp/>it<sp/>is<sp/>useful<sp/>to<sp/>use<sp/>additional<sp/>tools.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>simplest<sp/>one<sp/>to<sp/>use<sp/>is<sp/>the<sp/>compiler<sp/>flag<sp/>-ftrapv,<sp/>which<sp/>detects<sp/>integer</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="comment">//<sp/>overflows<sp/>and<sp/>similar<sp/>errors.<sp/>However,<sp/>due<sp/>to<sp/>optimizations<sp/>and<sp/>compilers</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight><highlight class="comment">//<sp/>taking<sp/>advantage<sp/>of<sp/>undefined<sp/>behavior<sp/>sometimes<sp/>it<sp/>may<sp/>not<sp/>actually<sp/>detect</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight><highlight class="comment">//<sp/>anything.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight><highlight class="comment">//<sp/>You<sp/>can<sp/>also<sp/>use<sp/>compiler-based<sp/>stack<sp/>protection<sp/>to<sp/>possibly<sp/>detect<sp/>possible</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight><highlight class="comment">//<sp/>stack<sp/>buffer<sp/>overruns.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight><highlight class="comment">//<sp/>For<sp/>more<sp/>accurate<sp/>diagnostics,<sp/>you<sp/>can<sp/>use<sp/>an<sp/>undefined<sp/>arithmetic<sp/>operation</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight><highlight class="comment">//<sp/>detector<sp/>such<sp/>as<sp/>the<sp/>clang-based<sp/>tool:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight><highlight class="comment">//<sp/>&quot;IOC:<sp/>An<sp/>Integer<sp/>Overflow<sp/>Checker<sp/>for<sp/>C/C++&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Available<sp/>at:<sp/>http://embed.cs.utah.edu/ioc/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight><highlight class="comment">//<sp/>It<sp/>might<sp/>also<sp/>be<sp/>useful<sp/>to<sp/>use<sp/>Google&apos;s<sp/>AddressSanitizer<sp/>to<sp/>detect</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight><highlight class="comment">//<sp/>stack<sp/>buffer<sp/>overruns,<sp/>which<sp/>valgrind<sp/>can&apos;t<sp/>currently<sp/>detect.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Let&apos;s<sp/>force<sp/>this<sp/>code<sp/>not<sp/>to<sp/>be<sp/>inlined,<sp/>in<sp/>order<sp/>to<sp/>actually</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight><highlight class="comment">//<sp/>test<sp/>a<sp/>generic<sp/>version<sp/>of<sp/>the<sp/>function.<sp/>This<sp/>increases<sp/>the<sp/>chance</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight><highlight class="comment">//<sp/>that<sp/>-ftrapv<sp/>will<sp/>detect<sp/>overflows.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="49" refid="bignum__tests_8cpp_1af69d853f536678941b4ff731b241168a" refkind="member"><highlight class="normal"><ref refid="bignum__tests_8cpp_1a1b173d22e57d9395897acbd8de62d505" kindref="member">NOINLINE</ref><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="bignum__tests_8cpp_1af69d853f536678941b4ff731b241168a" kindref="member">mysetint64</ref>(<ref refid="class_c_big_num" kindref="compound">CBigNum</ref>&amp;<sp/>num,<sp/>int64<sp/>n)</highlight></codeline>
<codeline lineno="50"><highlight class="normal">{</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/>num.<ref refid="class_c_big_num_1aca73fa36a797c91b30515ae61cc5d765" kindref="member">setint64</ref>(n);</highlight></codeline>
<codeline lineno="52"><highlight class="normal">}</highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight><highlight class="comment">//<sp/>For<sp/>each<sp/>number,<sp/>we<sp/>do<sp/>2<sp/>tests:<sp/>one<sp/>with<sp/>inline<sp/>code,<sp/>then<sp/>we<sp/>reset<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight><highlight class="comment">//<sp/>value<sp/>to<sp/>0,<sp/>then<sp/>the<sp/>second<sp/>one<sp/>with<sp/>a<sp/>non-inlined<sp/>function.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="56" refid="bignum__tests_8cpp_1a01242cefe2fb6ac92a93475329803eaf" refkind="member"><highlight class="normal"><ref refid="bignum__tests_8cpp_1a01242cefe2fb6ac92a93475329803eaf" kindref="member">BOOST_AUTO_TEST_CASE</ref>(bignum_setint64)</highlight></codeline>
<codeline lineno="57"><highlight class="normal">{</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/>int64<sp/>n;</highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>n<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_c_big_num" kindref="compound">CBigNum</ref><sp/>num(n);</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>BOOST_CHECK(num.<ref refid="class_c_big_num_1adca0fa61568497152375328deef6c895" kindref="member">ToString</ref>()<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;0&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>num.<ref refid="class_c_big_num_1ac8c00c696d9cbd3fa309a2d0a6bc4b1d" kindref="member">setulong</ref>(0);</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>BOOST_CHECK(num.<ref refid="class_c_big_num_1adca0fa61568497152375328deef6c895" kindref="member">ToString</ref>()<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;0&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="bignum__tests_8cpp_1af69d853f536678941b4ff731b241168a" kindref="member">mysetint64</ref>(num,<sp/>n);</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>BOOST_CHECK(num.<ref refid="class_c_big_num_1adca0fa61568497152375328deef6c895" kindref="member">ToString</ref>()<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;0&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>n<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_c_big_num" kindref="compound">CBigNum</ref><sp/>num(n);</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>BOOST_CHECK(num.<ref refid="class_c_big_num_1adca0fa61568497152375328deef6c895" kindref="member">ToString</ref>()<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;1&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>num.<ref refid="class_c_big_num_1ac8c00c696d9cbd3fa309a2d0a6bc4b1d" kindref="member">setulong</ref>(0);</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>BOOST_CHECK(num.<ref refid="class_c_big_num_1adca0fa61568497152375328deef6c895" kindref="member">ToString</ref>()<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;0&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="bignum__tests_8cpp_1af69d853f536678941b4ff731b241168a" kindref="member">mysetint64</ref>(num,<sp/>n);</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>BOOST_CHECK(num.<ref refid="class_c_big_num_1adca0fa61568497152375328deef6c895" kindref="member">ToString</ref>()<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;1&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>n<sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_c_big_num" kindref="compound">CBigNum</ref><sp/>num(n);</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>BOOST_CHECK(num.<ref refid="class_c_big_num_1adca0fa61568497152375328deef6c895" kindref="member">ToString</ref>()<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;-1&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>num.<ref refid="class_c_big_num_1ac8c00c696d9cbd3fa309a2d0a6bc4b1d" kindref="member">setulong</ref>(0);</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>BOOST_CHECK(num.<ref refid="class_c_big_num_1adca0fa61568497152375328deef6c895" kindref="member">ToString</ref>()<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;0&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="bignum__tests_8cpp_1af69d853f536678941b4ff731b241168a" kindref="member">mysetint64</ref>(num,<sp/>n);</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>BOOST_CHECK(num.<ref refid="class_c_big_num_1adca0fa61568497152375328deef6c895" kindref="member">ToString</ref>()<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;-1&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>n<sp/>=<sp/>5;</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_c_big_num" kindref="compound">CBigNum</ref><sp/>num(n);</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>BOOST_CHECK(num.<ref refid="class_c_big_num_1adca0fa61568497152375328deef6c895" kindref="member">ToString</ref>()<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;5&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>num.<ref refid="class_c_big_num_1ac8c00c696d9cbd3fa309a2d0a6bc4b1d" kindref="member">setulong</ref>(0);</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>BOOST_CHECK(num.<ref refid="class_c_big_num_1adca0fa61568497152375328deef6c895" kindref="member">ToString</ref>()<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;0&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="bignum__tests_8cpp_1af69d853f536678941b4ff731b241168a" kindref="member">mysetint64</ref>(num,<sp/>n);</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>BOOST_CHECK(num.<ref refid="class_c_big_num_1adca0fa61568497152375328deef6c895" kindref="member">ToString</ref>()<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;5&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>n<sp/>=<sp/>-5;</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_c_big_num" kindref="compound">CBigNum</ref><sp/>num(n);</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>BOOST_CHECK(num.<ref refid="class_c_big_num_1adca0fa61568497152375328deef6c895" kindref="member">ToString</ref>()<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;-5&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>num.<ref refid="class_c_big_num_1ac8c00c696d9cbd3fa309a2d0a6bc4b1d" kindref="member">setulong</ref>(0);</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>BOOST_CHECK(num.<ref refid="class_c_big_num_1adca0fa61568497152375328deef6c895" kindref="member">ToString</ref>()<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;0&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="bignum__tests_8cpp_1af69d853f536678941b4ff731b241168a" kindref="member">mysetint64</ref>(num,<sp/>n);</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>BOOST_CHECK(num.<ref refid="class_c_big_num_1adca0fa61568497152375328deef6c895" kindref="member">ToString</ref>()<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;-5&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>n<sp/>=<sp/>std::numeric_limits&lt;int64&gt;::min();</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_c_big_num" kindref="compound">CBigNum</ref><sp/>num(n);</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>BOOST_CHECK(num.<ref refid="class_c_big_num_1adca0fa61568497152375328deef6c895" kindref="member">ToString</ref>()<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;-9223372036854775808&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>num.<ref refid="class_c_big_num_1ac8c00c696d9cbd3fa309a2d0a6bc4b1d" kindref="member">setulong</ref>(0);</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>BOOST_CHECK(num.<ref refid="class_c_big_num_1adca0fa61568497152375328deef6c895" kindref="member">ToString</ref>()<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;0&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="bignum__tests_8cpp_1af69d853f536678941b4ff731b241168a" kindref="member">mysetint64</ref>(num,<sp/>n);</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>BOOST_CHECK(num.<ref refid="class_c_big_num_1adca0fa61568497152375328deef6c895" kindref="member">ToString</ref>()<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;-9223372036854775808&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>n<sp/>=<sp/>std::numeric_limits&lt;int64&gt;::max();</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_c_big_num" kindref="compound">CBigNum</ref><sp/>num(n);</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>BOOST_CHECK(num.<ref refid="class_c_big_num_1adca0fa61568497152375328deef6c895" kindref="member">ToString</ref>()<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;9223372036854775807&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>num.<ref refid="class_c_big_num_1ac8c00c696d9cbd3fa309a2d0a6bc4b1d" kindref="member">setulong</ref>(0);</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>BOOST_CHECK(num.<ref refid="class_c_big_num_1adca0fa61568497152375328deef6c895" kindref="member">ToString</ref>()<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;0&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="bignum__tests_8cpp_1af69d853f536678941b4ff731b241168a" kindref="member">mysetint64</ref>(num,<sp/>n);</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>BOOST_CHECK(num.<ref refid="class_c_big_num_1adca0fa61568497152375328deef6c895" kindref="member">ToString</ref>()<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;9223372036854775807&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="123"><highlight class="normal">}</highlight></codeline>
<codeline lineno="124"><highlight class="normal"></highlight></codeline>
<codeline lineno="125" refid="bignum__tests_8cpp_1a973cf447bcf2388c4a58a7860a342151" refkind="member"><highlight class="normal"><ref refid="bignum__tests_8cpp_1a01242cefe2fb6ac92a93475329803eaf" kindref="member">BOOST_AUTO_TEST_CASE</ref>(bignum_SetHex)</highlight></codeline>
<codeline lineno="126"><highlight class="normal">{</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>hexStr<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;deecf97fd890808b9cc0f1b6a3e7a60b400f52710e6ad075b1340755bfa58cc9&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_c_big_num" kindref="compound">CBigNum</ref><sp/>num;</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/>num.<ref refid="class_c_big_num_1a9d4f7c42f141e45410af96e6804c54fe" kindref="member">SetHex</ref>(hexStr);</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/>BOOST_CHECK_EQUAL(num.<ref refid="class_c_big_num_1afdfc11e08c544e06e2877767b3fb8730" kindref="member">GetHex</ref>(),<sp/>hexStr);</highlight></codeline>
<codeline lineno="131"><highlight class="normal">}</highlight></codeline>
<codeline lineno="132"><highlight class="normal"></highlight></codeline>
<codeline lineno="133"><highlight class="normal">BOOST_AUTO_TEST_SUITE_END()</highlight></codeline>
    </programlisting>
    <location file="/home/dev/ds-160209/src/test/bignum_tests.cpp"/>
  </compounddef>
</doxygen>
