<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.9.1">
  <compounddef id="structsecure__allocator" kind="struct" language="C++" prot="public">
    <compoundname>secure_allocator</compoundname>
    <basecompoundref prot="public" virt="non-virtual">std::allocator&lt; T &gt;</basecompoundref>
    <includes refid="allocators_8h" local="no">allocators.h</includes>
    <innerclass refid="structsecure__allocator_1_1rebind" prot="public">secure_allocator::rebind</innerclass>
    <templateparamlist>
      <param>
        <type>typename</type>
        <declname>T</declname>
        <defname>T</defname>
      </param>
    </templateparamlist>
      <sectiondef kind="public-type">
      <memberdef kind="typedef" id="structsecure__allocator_1aecbe486abe3e32e35e3289e149bd2356" prot="public" static="no">
        <type>std::allocator&lt; T &gt;</type>
        <definition>typedef std::allocator&lt;T&gt; secure_allocator&lt; T &gt;::base</definition>
        <argsstring></argsstring>
        <name>base</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/allocators.h" line="202" column="1" bodyfile="/home/dev/ds-160209/src/allocators.h" bodystart="202" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="structsecure__allocator_1aa9db67804b069d61983213bded98c08f" prot="public" static="no">
        <type>base::size_type</type>
        <definition>typedef base::size_type secure_allocator&lt; T &gt;::size_type</definition>
        <argsstring></argsstring>
        <name>size_type</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/allocators.h" line="203" column="1" bodyfile="/home/dev/ds-160209/src/allocators.h" bodystart="203" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="structsecure__allocator_1a6ced0c166194ce9a266df10018cbb862" prot="public" static="no">
        <type>base::difference_type</type>
        <definition>typedef base::difference_type secure_allocator&lt; T &gt;::difference_type</definition>
        <argsstring></argsstring>
        <name>difference_type</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/allocators.h" line="204" column="1" bodyfile="/home/dev/ds-160209/src/allocators.h" bodystart="204" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="structsecure__allocator_1a71b267e8d1667eacf8c3505cce785aea" prot="public" static="no">
        <type>base::pointer</type>
        <definition>typedef base::pointer secure_allocator&lt; T &gt;::pointer</definition>
        <argsstring></argsstring>
        <name>pointer</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/allocators.h" line="205" column="1" bodyfile="/home/dev/ds-160209/src/allocators.h" bodystart="205" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="structsecure__allocator_1abf76dd1c45de47c15d7a8c53cb2d8ab9" prot="public" static="no">
        <type>base::const_pointer</type>
        <definition>typedef base::const_pointer secure_allocator&lt; T &gt;::const_pointer</definition>
        <argsstring></argsstring>
        <name>const_pointer</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/allocators.h" line="206" column="1" bodyfile="/home/dev/ds-160209/src/allocators.h" bodystart="206" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="structsecure__allocator_1a6d85bb5fed183fb2304b8403a8843eb4" prot="public" static="no">
        <type>base::reference</type>
        <definition>typedef base::reference secure_allocator&lt; T &gt;::reference</definition>
        <argsstring></argsstring>
        <name>reference</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/allocators.h" line="207" column="1" bodyfile="/home/dev/ds-160209/src/allocators.h" bodystart="207" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="structsecure__allocator_1a5ec58945b7a8010f7e8a77ebfd96ae8e" prot="public" static="no">
        <type>base::const_reference</type>
        <definition>typedef base::const_reference secure_allocator&lt; T &gt;::const_reference</definition>
        <argsstring></argsstring>
        <name>const_reference</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/allocators.h" line="208" column="1" bodyfile="/home/dev/ds-160209/src/allocators.h" bodystart="208" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="structsecure__allocator_1a344198c1316ccf0a1b58ce9c0de7c012" prot="public" static="no">
        <type>base::value_type</type>
        <definition>typedef base::value_type secure_allocator&lt; T &gt;::value_type</definition>
        <argsstring></argsstring>
        <name>value_type</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/allocators.h" line="209" column="1" bodyfile="/home/dev/ds-160209/src/allocators.h" bodystart="209" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="structsecure__allocator_1ac5a927e4133d37b72aece43242903760" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>secure_allocator&lt; T &gt;::secure_allocator</definition>
        <argsstring>()</argsstring>
        <name>secure_allocator</name>
        <exceptions> throw ()</exceptions>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/allocators.h" line="210" column="1" bodyfile="/home/dev/ds-160209/src/allocators.h" bodystart="210" bodyend="210"/>
      </memberdef>
      <memberdef kind="function" id="structsecure__allocator_1ae5bfb3589a310e55894bae988d566c44" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>secure_allocator&lt; T &gt;::secure_allocator</definition>
        <argsstring>(const secure_allocator &amp;a)</argsstring>
        <name>secure_allocator</name>
        <param>
          <type>const <ref refid="structsecure__allocator" kindref="compound">secure_allocator</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <exceptions> throw ()</exceptions>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/allocators.h" line="211" column="1" bodyfile="/home/dev/ds-160209/src/allocators.h" bodystart="211" bodyend="211"/>
      </memberdef>
      <memberdef kind="function" id="structsecure__allocator_1ad7605317012ed2eed2eecb955345d140" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename U</type>
          </param>
        </templateparamlist>
        <type></type>
        <definition>secure_allocator&lt; T &gt;::secure_allocator</definition>
        <argsstring>(const secure_allocator&lt; U &gt; &amp;a)</argsstring>
        <name>secure_allocator</name>
        <param>
          <type>const <ref refid="structsecure__allocator" kindref="compound">secure_allocator</ref>&lt; U &gt; &amp;</type>
          <declname>a</declname>
        </param>
        <exceptions> throw ()</exceptions>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/allocators.h" line="213" column="1" bodyfile="/home/dev/ds-160209/src/allocators.h" bodystart="213" bodyend="213"/>
      </memberdef>
      <memberdef kind="function" id="structsecure__allocator_1ac942adb3e90eff2b3b17be72a63c86a8" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>secure_allocator&lt; T &gt;::~secure_allocator</definition>
        <argsstring>()</argsstring>
        <name>~secure_allocator</name>
        <exceptions> throw ()</exceptions>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/allocators.h" line="214" column="1" bodyfile="/home/dev/ds-160209/src/allocators.h" bodystart="214" bodyend="214"/>
      </memberdef>
      <memberdef kind="function" id="structsecure__allocator_1aee6c375ead3ab5b477898787308bd2d9" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>T *</type>
        <definition>T* secure_allocator&lt; T &gt;::allocate</definition>
        <argsstring>(std::size_t n, const void *hint=0)</argsstring>
        <name>allocate</name>
        <param>
          <type>std::size_t</type>
          <declname>n</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>hint</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/allocators.h" line="218" column="1" bodyfile="/home/dev/ds-160209/src/allocators.h" bodystart="218" bodyend="225"/>
      </memberdef>
      <memberdef kind="function" id="structsecure__allocator_1af86cc49185bd507b8b479e070d744eb0" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void secure_allocator&lt; T &gt;::deallocate</definition>
        <argsstring>(T *p, std::size_t n)</argsstring>
        <name>deallocate</name>
        <param>
          <type>T *</type>
          <declname>p</declname>
        </param>
        <param>
          <type>std::size_t</type>
          <declname>n</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/allocators.h" line="227" column="1" bodyfile="/home/dev/ds-160209/src/allocators.h" bodystart="227" bodyend="235"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="1656">
        <label>secure_allocator&lt; T &gt;</label>
        <link refid="structsecure__allocator"/>
        <childnode refid="1657" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1657">
        <label>std::allocator&lt; T &gt;</label>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="1658">
        <label>secure_allocator&lt; T &gt;</label>
        <link refid="structsecure__allocator"/>
        <childnode refid="1659" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1659">
        <label>std::allocator&lt; T &gt;</label>
      </node>
    </collaborationgraph>
    <location file="/home/dev/ds-160209/src/allocators.h" line="200" column="1" bodyfile="/home/dev/ds-160209/src/allocators.h" bodystart="199" bodyend="236"/>
    <listofallmembers>
      <member refid="structsecure__allocator_1aee6c375ead3ab5b477898787308bd2d9" prot="public" virt="non-virtual"><scope>secure_allocator</scope><name>allocate</name></member>
      <member refid="structsecure__allocator_1aecbe486abe3e32e35e3289e149bd2356" prot="public" virt="non-virtual"><scope>secure_allocator</scope><name>base</name></member>
      <member refid="structsecure__allocator_1abf76dd1c45de47c15d7a8c53cb2d8ab9" prot="public" virt="non-virtual"><scope>secure_allocator</scope><name>const_pointer</name></member>
      <member refid="structsecure__allocator_1a5ec58945b7a8010f7e8a77ebfd96ae8e" prot="public" virt="non-virtual"><scope>secure_allocator</scope><name>const_reference</name></member>
      <member refid="structsecure__allocator_1af86cc49185bd507b8b479e070d744eb0" prot="public" virt="non-virtual"><scope>secure_allocator</scope><name>deallocate</name></member>
      <member refid="structsecure__allocator_1a6ced0c166194ce9a266df10018cbb862" prot="public" virt="non-virtual"><scope>secure_allocator</scope><name>difference_type</name></member>
      <member refid="structsecure__allocator_1a71b267e8d1667eacf8c3505cce785aea" prot="public" virt="non-virtual"><scope>secure_allocator</scope><name>pointer</name></member>
      <member refid="structsecure__allocator_1a6d85bb5fed183fb2304b8403a8843eb4" prot="public" virt="non-virtual"><scope>secure_allocator</scope><name>reference</name></member>
      <member refid="structsecure__allocator_1ac5a927e4133d37b72aece43242903760" prot="public" virt="non-virtual"><scope>secure_allocator</scope><name>secure_allocator</name></member>
      <member refid="structsecure__allocator_1ae5bfb3589a310e55894bae988d566c44" prot="public" virt="non-virtual"><scope>secure_allocator</scope><name>secure_allocator</name></member>
      <member refid="structsecure__allocator_1ad7605317012ed2eed2eecb955345d140" prot="public" virt="non-virtual"><scope>secure_allocator</scope><name>secure_allocator</name></member>
      <member refid="structsecure__allocator_1aa9db67804b069d61983213bded98c08f" prot="public" virt="non-virtual"><scope>secure_allocator</scope><name>size_type</name></member>
      <member refid="structsecure__allocator_1a344198c1316ccf0a1b58ce9c0de7c012" prot="public" virt="non-virtual"><scope>secure_allocator</scope><name>value_type</name></member>
      <member refid="structsecure__allocator_1ac942adb3e90eff2b3b17be72a63c86a8" prot="public" virt="non-virtual"><scope>secure_allocator</scope><name>~secure_allocator</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
