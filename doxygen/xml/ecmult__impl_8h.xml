<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.9.1">
  <compounddef id="ecmult__impl_8h" kind="file" language="C++">
    <compoundname>ecmult_impl.h</compoundname>
    <includes refid="group_8h" local="yes">group.h</includes>
    <includes refid="scalar_8h" local="yes">scalar.h</includes>
    <includes refid="ecmult_8h" local="yes">ecmult.h</includes>
    <includedby refid="ecmult__const__impl_8h" local="yes">/home/dev/ds-160209/src/secp256k1/src/ecmult_const_impl.h</includedby>
    <includedby refid="bench__internal_8c" local="yes">/home/dev/ds-160209/src/secp256k1/src/bench_internal.c</includedby>
    <includedby refid="secp256k1_8c" local="yes">/home/dev/ds-160209/src/secp256k1/src/secp256k1.c</includedby>
    <incdepgraph>
      <node id="22348">
        <label>scalar.h</label>
        <link refid="scalar_8h"/>
        <childnode refid="22346" relation="include">
        </childnode>
      </node>
      <node id="22344">
        <label>/home/dev/ds-160209/src/secp256k1/src/ecmult_impl.h</label>
        <link refid="ecmult_impl.h"/>
        <childnode refid="22345" relation="include">
        </childnode>
        <childnode refid="22348" relation="include">
        </childnode>
        <childnode refid="22349" relation="include">
        </childnode>
      </node>
      <node id="22346">
        <label>num.h</label>
        <link refid="num_8h"/>
      </node>
      <node id="22345">
        <label>group.h</label>
        <link refid="group_8h"/>
        <childnode refid="22346" relation="include">
        </childnode>
        <childnode refid="22347" relation="include">
        </childnode>
      </node>
      <node id="22349">
        <label>ecmult.h</label>
        <link refid="ecmult_8h"/>
        <childnode refid="22346" relation="include">
        </childnode>
        <childnode refid="22345" relation="include">
        </childnode>
      </node>
      <node id="22347">
        <label>field.h</label>
        <link refid="field_8h"/>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="22350">
        <label>/home/dev/ds-160209/src/secp256k1/src/ecmult_impl.h</label>
        <link refid="ecmult_impl.h"/>
        <childnode refid="22351" relation="include">
        </childnode>
        <childnode refid="22352" relation="include">
        </childnode>
        <childnode refid="22353" relation="include">
        </childnode>
      </node>
      <node id="22354">
        <label>/home/dev/ds-160209/src/secp256k1/src/tests.c</label>
        <link refid="tests_8c"/>
      </node>
      <node id="22355">
        <label>/home/dev/ds-160209/src/secp256k1/src/modules/ecdh/main_impl.h</label>
        <link refid="ecdh_2main__impl_8h"/>
      </node>
      <node id="22353">
        <label>/home/dev/ds-160209/src/secp256k1/src/secp256k1.c</label>
        <link refid="secp256k1_8c"/>
        <childnode refid="22352" relation="include">
        </childnode>
        <childnode refid="22354" relation="include">
        </childnode>
      </node>
      <node id="22351">
        <label>/home/dev/ds-160209/src/secp256k1/src/ecmult_const_impl.h</label>
        <link refid="ecmult__const__impl_8h"/>
        <childnode refid="22352" relation="include">
        </childnode>
        <childnode refid="22353" relation="include">
        </childnode>
        <childnode refid="22355" relation="include">
        </childnode>
      </node>
      <node id="22352">
        <label>/home/dev/ds-160209/src/secp256k1/src/bench_internal.c</label>
        <link refid="bench__internal_8c"/>
      </node>
    </invincdepgraph>
      <sectiondef kind="define">
      <memberdef kind="define" id="ecmult__impl_8h_1a6216c81c6adbb8796c55fe0c8d3b6718" prot="public" static="no">
        <name>WINDOW_A</name>
        <initializer>5</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/secp256k1/src/ecmult_impl.h" line="15" column="9" bodyfile="/home/dev/ds-160209/src/secp256k1/src/ecmult_impl.h" bodystart="15" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ecmult__impl_8h_1afe951ac62b5b06848cb4e6f4dbc69616" prot="public" static="no">
        <name>WINDOW_G</name>
        <initializer>16</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>larger numbers may result in slightly better performance, at the cost of exponentially larger precomputed tables. One table for window size 16: 1.375 MiB. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/secp256k1/src/ecmult_impl.h" line="24" column="9" bodyfile="/home/dev/ds-160209/src/secp256k1/src/ecmult_impl.h" bodystart="24" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ecmult__impl_8h_1a97c6c6e5aa98f202eec77c4c931e02f1" prot="public" static="no">
        <name>ECMULT_TABLE_SIZE</name>
        <param><defname>w</defname></param>
        <initializer>(1 &lt;&lt; ((w)-2))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>The number of entries a table with precomputed multiples needs to have. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/secp256k1/src/ecmult_impl.h" line="28" column="9" bodyfile="/home/dev/ds-160209/src/secp256k1/src/ecmult_impl.h" bodystart="28" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ecmult__impl_8h_1afe9218069a15709b99aacd7af0ba2636" prot="public" static="no">
        <name>ECMULT_TABLE_GET_GE</name>
        <param><defname>r</defname></param>
        <param><defname>pre</defname></param>
        <param><defname>n</defname></param>
        <param><defname>w</defname></param>
        <initializer>do { \
    <ref refid="secp256k1_2src_2util_8h_1aca8ac5ae73fd966db106de59160a178b" kindref="member">VERIFY_CHECK</ref>(((n) &amp; 1) == 1); \
    <ref refid="secp256k1_2src_2util_8h_1aca8ac5ae73fd966db106de59160a178b" kindref="member">VERIFY_CHECK</ref>((n) &gt;= -((1 &lt;&lt; ((w)-1)) - 1)); \
    <ref refid="secp256k1_2src_2util_8h_1aca8ac5ae73fd966db106de59160a178b" kindref="member">VERIFY_CHECK</ref>((n) &lt;=  ((1 &lt;&lt; ((w)-1)) - 1)); \
    if ((n) &gt; 0) { \
        *(r) = (pre)[((n)-1)/2]; \
    } else { \
        secp256k1_ge_neg((r), &amp;(pre)[(-(n)-1)/2]); \
    } \
} while(0)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>The following two macro retrieves a particular odd multiple from a table of precomputed multiples. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/secp256k1/src/ecmult_impl.h" line="117" column="9" bodyfile="/home/dev/ds-160209/src/secp256k1/src/ecmult_impl.h" bodystart="117" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ecmult__impl_8h_1a45d4a36e1a06a0214837d20789239f8b" prot="public" static="no">
        <name>ECMULT_TABLE_GET_GE_STORAGE</name>
        <param><defname>r</defname></param>
        <param><defname>pre</defname></param>
        <param><defname>n</defname></param>
        <param><defname>w</defname></param>
        <initializer>do { \
    <ref refid="secp256k1_2src_2util_8h_1aca8ac5ae73fd966db106de59160a178b" kindref="member">VERIFY_CHECK</ref>(((n) &amp; 1) == 1); \
    <ref refid="secp256k1_2src_2util_8h_1aca8ac5ae73fd966db106de59160a178b" kindref="member">VERIFY_CHECK</ref>((n) &gt;= -((1 &lt;&lt; ((w)-1)) - 1)); \
    <ref refid="secp256k1_2src_2util_8h_1aca8ac5ae73fd966db106de59160a178b" kindref="member">VERIFY_CHECK</ref>((n) &lt;=  ((1 &lt;&lt; ((w)-1)) - 1)); \
    if ((n) &gt; 0) { \
        secp256k1_ge_from_storage((r), &amp;(pre)[((n)-1)/2]); \
    } else { \
        secp256k1_ge_from_storage((r), &amp;(pre)[(-(n)-1)/2]); \
        secp256k1_ge_neg((r), (r)); \
    } \
} while(0)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/secp256k1/src/ecmult_impl.h" line="128" column="9" bodyfile="/home/dev/ds-160209/src/secp256k1/src/ecmult_impl.h" bodystart="128" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="ecmult__impl_8h_1a5008191228d03c7325ea86aa8baaf4dc" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void secp256k1_ecmult_odd_multiples_table</definition>
        <argsstring>(int n, secp256k1_gej *prej, secp256k1_fe *zr, const secp256k1_gej *a)</argsstring>
        <name>secp256k1_ecmult_odd_multiples_table</name>
        <param>
          <type>int</type>
          <declname>n</declname>
        </param>
        <param>
          <type><ref refid="structsecp256k1__gej" kindref="compound">secp256k1_gej</ref> *</type>
          <declname>prej</declname>
        </param>
        <param>
          <type><ref refid="structsecp256k1__fe" kindref="compound">secp256k1_fe</ref> *</type>
          <declname>zr</declname>
        </param>
        <param>
          <type>const <ref refid="structsecp256k1__gej" kindref="compound">secp256k1_gej</ref> *</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Fill a table &apos;prej&apos; with precomputed odd multiples of a. Prej will contain the values [1*a,3*a,...,(2*n-1)*a], so it space for n values. zr[0] will contain prej[0].z / a.z. The other zr[i] values = prej[i].z / prej[i-1].z. Prej&apos;s Z values are undefined, except for the last value. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/secp256k1/src/ecmult_impl.h" line="35" column="1" bodyfile="/home/dev/ds-160209/src/secp256k1/src/ecmult_impl.h" bodystart="35" bodyend="68"/>
      </memberdef>
      <memberdef kind="function" id="ecmult__impl_8h_1a33fe27d5aa383017999f80a1cdd8d8ca" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void secp256k1_ecmult_odd_multiples_table_globalz_windowa</definition>
        <argsstring>(secp256k1_ge *pre, secp256k1_fe *globalz, const secp256k1_gej *a)</argsstring>
        <name>secp256k1_ecmult_odd_multiples_table_globalz_windowa</name>
        <param>
          <type><ref refid="structsecp256k1__ge" kindref="compound">secp256k1_ge</ref> *</type>
          <declname>pre</declname>
        </param>
        <param>
          <type><ref refid="structsecp256k1__fe" kindref="compound">secp256k1_fe</ref> *</type>
          <declname>globalz</declname>
        </param>
        <param>
          <type>const <ref refid="structsecp256k1__gej" kindref="compound">secp256k1_gej</ref> *</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Fill a table &apos;pre&apos; with precomputed odd multiples of a.</para><para>There are two versions of this function:<itemizedlist>
<listitem><para>secp256k1_ecmult_odd_multiples_table_globalz_windowa which brings its resulting point set to a single constant Z denominator, stores the X and Y coordinates as ge_storage points in pre, and stores the global Z in rz. It only operates on tables sized for WINDOW_A wnaf multiples.</para></listitem><listitem><para>secp256k1_ecmult_odd_multiples_table_storage_var, which converts its resulting point set to actually affine points, and stores those in pre. It operates on tables of any size, but uses heap-allocated temporaries.</para></listitem></itemizedlist>
</para><para>To compute a*P + b*G, we compute a table for P using the first function, and for G using the second (which requires an inverse, but it only needs to happen once). </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/secp256k1/src/ecmult_impl.h" line="85" column="1" bodyfile="/home/dev/ds-160209/src/secp256k1/src/ecmult_impl.h" bodystart="85" bodyend="93"/>
      </memberdef>
      <memberdef kind="function" id="ecmult__impl_8h_1a72a05df0626a92692be8ca5e68c19a56" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void secp256k1_ecmult_odd_multiples_table_storage_var</definition>
        <argsstring>(int n, secp256k1_ge_storage *pre, const secp256k1_gej *a, const secp256k1_callback *cb)</argsstring>
        <name>secp256k1_ecmult_odd_multiples_table_storage_var</name>
        <param>
          <type>int</type>
          <declname>n</declname>
        </param>
        <param>
          <type><ref refid="structsecp256k1__ge__storage" kindref="compound">secp256k1_ge_storage</ref> *</type>
          <declname>pre</declname>
        </param>
        <param>
          <type>const <ref refid="structsecp256k1__gej" kindref="compound">secp256k1_gej</ref> *</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="structsecp256k1__callback" kindref="compound">secp256k1_callback</ref> *</type>
          <declname>cb</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/secp256k1/src/ecmult_impl.h" line="95" column="1" bodyfile="/home/dev/ds-160209/src/secp256k1/src/ecmult_impl.h" bodystart="95" bodyend="113"/>
      </memberdef>
      <memberdef kind="function" id="ecmult__impl_8h_1a3d2b8a81ffed27e7eca0058eb65831b5" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void secp256k1_ecmult_context_init</definition>
        <argsstring>(secp256k1_ecmult_context *ctx)</argsstring>
        <name>secp256k1_ecmult_context_init</name>
        <param>
          <type><ref refid="structsecp256k1__ecmult__context" kindref="compound">secp256k1_ecmult_context</ref> *</type>
          <declname>ctx</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/secp256k1/src/ecmult_impl.h" line="140" column="1" bodyfile="/home/dev/ds-160209/src/secp256k1/src/ecmult_impl.h" bodystart="140" bodyend="145"/>
      </memberdef>
      <memberdef kind="function" id="ecmult__impl_8h_1acc2494f319c79f6cc15982f43e7a6f00" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void secp256k1_ecmult_context_build</definition>
        <argsstring>(secp256k1_ecmult_context *ctx, const secp256k1_callback *cb)</argsstring>
        <name>secp256k1_ecmult_context_build</name>
        <param>
          <type><ref refid="structsecp256k1__ecmult__context" kindref="compound">secp256k1_ecmult_context</ref> *</type>
          <declname>ctx</declname>
        </param>
        <param>
          <type>const <ref refid="structsecp256k1__callback" kindref="compound">secp256k1_callback</ref> *</type>
          <declname>cb</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/secp256k1/src/ecmult_impl.h" line="147" column="1" bodyfile="/home/dev/ds-160209/src/secp256k1/src/ecmult_impl.h" bodystart="147" bodyend="177"/>
      </memberdef>
      <memberdef kind="function" id="ecmult__impl_8h_1a95a3e0c69a07d94a248cdb06328966f6" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void secp256k1_ecmult_context_clone</definition>
        <argsstring>(secp256k1_ecmult_context *dst, const secp256k1_ecmult_context *src, const secp256k1_callback *cb)</argsstring>
        <name>secp256k1_ecmult_context_clone</name>
        <param>
          <type><ref refid="structsecp256k1__ecmult__context" kindref="compound">secp256k1_ecmult_context</ref> *</type>
          <declname>dst</declname>
        </param>
        <param>
          <type>const <ref refid="structsecp256k1__ecmult__context" kindref="compound">secp256k1_ecmult_context</ref> *</type>
          <declname>src</declname>
        </param>
        <param>
          <type>const <ref refid="structsecp256k1__callback" kindref="compound">secp256k1_callback</ref> *</type>
          <declname>cb</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/secp256k1/src/ecmult_impl.h" line="179" column="1" bodyfile="/home/dev/ds-160209/src/secp256k1/src/ecmult_impl.h" bodystart="179" bodyend="197"/>
      </memberdef>
      <memberdef kind="function" id="ecmult__impl_8h_1aa4f6f213989d3ec35850c40c8f1b313b" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>static int secp256k1_ecmult_context_is_built</definition>
        <argsstring>(const secp256k1_ecmult_context *ctx)</argsstring>
        <name>secp256k1_ecmult_context_is_built</name>
        <param>
          <type>const <ref refid="structsecp256k1__ecmult__context" kindref="compound">secp256k1_ecmult_context</ref> *</type>
          <declname>ctx</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/secp256k1/src/ecmult_impl.h" line="199" column="1" bodyfile="/home/dev/ds-160209/src/secp256k1/src/ecmult_impl.h" bodystart="199" bodyend="201"/>
      </memberdef>
      <memberdef kind="function" id="ecmult__impl_8h_1a0e60dbc86c237360d13ac9433caa13af" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void secp256k1_ecmult_context_clear</definition>
        <argsstring>(secp256k1_ecmult_context *ctx)</argsstring>
        <name>secp256k1_ecmult_context_clear</name>
        <param>
          <type><ref refid="structsecp256k1__ecmult__context" kindref="compound">secp256k1_ecmult_context</ref> *</type>
          <declname>ctx</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/secp256k1/src/ecmult_impl.h" line="203" column="1" bodyfile="/home/dev/ds-160209/src/secp256k1/src/ecmult_impl.h" bodystart="203" bodyend="209"/>
      </memberdef>
      <memberdef kind="function" id="ecmult__impl_8h_1a48a8b6bbead18d4475c8a29d28376c5b" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>static int secp256k1_ecmult_wnaf</definition>
        <argsstring>(int *wnaf, int len, const secp256k1_scalar *a, int w)</argsstring>
        <name>secp256k1_ecmult_wnaf</name>
        <param>
          <type>int *</type>
          <declname>wnaf</declname>
        </param>
        <param>
          <type>int</type>
          <declname>len</declname>
        </param>
        <param>
          <type>const <ref refid="structsecp256k1__scalar" kindref="compound">secp256k1_scalar</ref> *</type>
          <declname>a</declname>
        </param>
        <param>
          <type>int</type>
          <declname>w</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Convert a number to WNAF notation. The number becomes represented by sum(2^i * wnaf[i], i=0..bits), with the following guarantees:<itemizedlist>
<listitem><para>each wnaf[i] is either 0, or an odd integer between -(1&lt;&lt;(w-1) - 1) and (1&lt;&lt;(w-1) - 1)</para></listitem><listitem><para>two non-zero entries in wnaf are separated by at least w-1 zeroes.</para></listitem><listitem><para>the number of set values in wnaf is returned. This number is at most 256, and at most one more than the number of bits in the (absolute value) of the input. </para></listitem></itemizedlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/secp256k1/src/ecmult_impl.h" line="218" column="1" bodyfile="/home/dev/ds-160209/src/secp256k1/src/ecmult_impl.h" bodystart="218" bodyend="267"/>
      </memberdef>
      <memberdef kind="function" id="ecmult__impl_8h_1aacf8b6ba48671daf24d549adb176366c" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void secp256k1_ecmult</definition>
        <argsstring>(const secp256k1_ecmult_context *ctx, secp256k1_gej *r, const secp256k1_gej *a, const secp256k1_scalar *na, const secp256k1_scalar *ng)</argsstring>
        <name>secp256k1_ecmult</name>
        <param>
          <type>const <ref refid="structsecp256k1__ecmult__context" kindref="compound">secp256k1_ecmult_context</ref> *</type>
          <declname>ctx</declname>
        </param>
        <param>
          <type><ref refid="structsecp256k1__gej" kindref="compound">secp256k1_gej</ref> *</type>
          <declname>r</declname>
        </param>
        <param>
          <type>const <ref refid="structsecp256k1__gej" kindref="compound">secp256k1_gej</ref> *</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="structsecp256k1__scalar" kindref="compound">secp256k1_scalar</ref> *</type>
          <declname>na</declname>
        </param>
        <param>
          <type>const <ref refid="structsecp256k1__scalar" kindref="compound">secp256k1_scalar</ref> *</type>
          <declname>ng</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/secp256k1/src/ecmult_impl.h" line="269" column="1" bodyfile="/home/dev/ds-160209/src/secp256k1/src/ecmult_impl.h" bodystart="269" bodyend="387"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/**********************************************************************</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/>*<sp/>Copyright<sp/>(c)<sp/>2013,<sp/>2014<sp/>Pieter<sp/>Wuille<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*<sp/>Distributed<sp/>under<sp/>the<sp/>MIT<sp/>software<sp/>license,<sp/>see<sp/>the<sp/>accompanying<sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*<sp/>file<sp/>COPYING<sp/>or<sp/>http://www.opensource.org/licenses/mit-license.php.*</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/>**********************************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>_SECP256K1_ECMULT_IMPL_H_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>_SECP256K1_ECMULT_IMPL_H_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="group_8h" kindref="compound">group.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="scalar_8h" kindref="compound">scalar.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="ecmult_8h" kindref="compound">ecmult.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>optimal<sp/>for<sp/>128-bit<sp/>and<sp/>256-bit<sp/>exponents.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15" refid="ecmult__impl_8h_1a6216c81c6adbb8796c55fe0c8d3b6718" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>WINDOW_A<sp/>5</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="preprocessor">#ifdef<sp/>USE_ENDOMORPHISM</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="preprocessor">#define<sp/>WINDOW_G<sp/>15</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight></codeline>
<codeline lineno="24" refid="ecmult__impl_8h_1afe951ac62b5b06848cb4e6f4dbc69616" refkind="member"><highlight class="preprocessor">#define<sp/>WINDOW_G<sp/>16</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight></codeline>
<codeline lineno="28" refid="ecmult__impl_8h_1a97c6c6e5aa98f202eec77c4c931e02f1" refkind="member"><highlight class="preprocessor">#define<sp/>ECMULT_TABLE_SIZE(w)<sp/>(1<sp/>&lt;&lt;<sp/>((w)-2))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>secp256k1_ecmult_odd_multiples_table(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n,<sp/><ref refid="structsecp256k1__gej" kindref="compound">secp256k1_gej</ref><sp/>*prej,<sp/><ref refid="structsecp256k1__fe" kindref="compound">secp256k1_fe</ref><sp/>*zr,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structsecp256k1__gej" kindref="compound">secp256k1_gej</ref><sp/>*a)<sp/>{</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structsecp256k1__gej" kindref="compound">secp256k1_gej</ref><sp/>d;</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structsecp256k1__ge" kindref="compound">secp256k1_ge</ref><sp/>a_ge,<sp/>d_ge;</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="secp256k1_2src_2util_8h_1aca8ac5ae73fd966db106de59160a178b" kindref="member">VERIFY_CHECK</ref>(!a-&gt;<ref refid="structsecp256k1__gej_1ab3ec8168caf27aa3a092d512eaadaad9" kindref="member">infinity</ref>);</highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/>secp256k1_gej_double_var(&amp;d,<sp/>a,<sp/>NULL);</highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="45"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>Perform<sp/>the<sp/>additions<sp/>on<sp/>an<sp/>isomorphism<sp/>where<sp/>&apos;d&apos;<sp/>is<sp/>affine:<sp/>drop<sp/>the<sp/>z<sp/>coordinate</highlight></codeline>
<codeline lineno="46"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>of<sp/>&apos;d&apos;,<sp/>and<sp/>scale<sp/>the<sp/>1P<sp/>starting<sp/>value&apos;s<sp/>x/y<sp/>coordinates<sp/>without<sp/>changing<sp/>its<sp/>z.</highlight></codeline>
<codeline lineno="47"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/>d_ge.<ref refid="structsecp256k1__ge_1a3c04a97b606c82ea87e55d4a06f06b6e" kindref="member">x</ref><sp/>=<sp/>d.<ref refid="structsecp256k1__gej_1a7d2451c89411d62628ac466eb28c8ff5" kindref="member">x</ref>;</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/>d_ge.<ref refid="structsecp256k1__ge_1a604295983a1f4aa6e8b5b0f1e46f9ee0" kindref="member">y</ref><sp/>=<sp/>d.<ref refid="structsecp256k1__gej_1a29d5184060ad790d85a0c89a13820e0d" kindref="member">y</ref>;</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/>d_ge.<ref refid="structsecp256k1__ge_1a1cdb35fe7abf6f17c08e4375eeb26628" kindref="member">infinity</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/>secp256k1_ge_set_gej_zinv(&amp;a_ge,<sp/>a,<sp/>&amp;d.<ref refid="structsecp256k1__gej_1ae41776408dba32cbe28b5e345b5f2286" kindref="member">z</ref>);</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/>prej[0].<ref refid="structsecp256k1__gej_1a7d2451c89411d62628ac466eb28c8ff5" kindref="member">x</ref><sp/>=<sp/>a_ge.<ref refid="structsecp256k1__ge_1a3c04a97b606c82ea87e55d4a06f06b6e" kindref="member">x</ref>;</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/>prej[0].<ref refid="structsecp256k1__gej_1a29d5184060ad790d85a0c89a13820e0d" kindref="member">y</ref><sp/>=<sp/>a_ge.<ref refid="structsecp256k1__ge_1a604295983a1f4aa6e8b5b0f1e46f9ee0" kindref="member">y</ref>;</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/>prej[0].<ref refid="structsecp256k1__gej_1ae41776408dba32cbe28b5e345b5f2286" kindref="member">z</ref><sp/>=<sp/>a-&gt;<ref refid="structsecp256k1__gej_1ae41776408dba32cbe28b5e345b5f2286" kindref="member">z</ref>;</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/>prej[0].<ref refid="structsecp256k1__gej_1ab3ec8168caf27aa3a092d512eaadaad9" kindref="member">infinity</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/>zr[0]<sp/>=<sp/>d.<ref refid="structsecp256k1__gej_1ae41776408dba32cbe28b5e345b5f2286" kindref="member">z</ref>;</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>1;<sp/>i<sp/>&lt;<sp/>n;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>secp256k1_gej_add_ge_var(&amp;prej[i],<sp/>&amp;prej[i-1],<sp/>&amp;d_ge,<sp/>&amp;zr[i]);</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="64"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>Each<sp/>point<sp/>in<sp/>&apos;prej&apos;<sp/>has<sp/>a<sp/>z<sp/>coordinate<sp/>too<sp/>small<sp/>by<sp/>a<sp/>factor<sp/>of<sp/>&apos;d.z&apos;.<sp/>Only</highlight></codeline>
<codeline lineno="65"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>the<sp/>final<sp/>point&apos;s<sp/>z<sp/>coordinate<sp/>is<sp/>actually<sp/>used<sp/>though,<sp/>so<sp/>just<sp/>update<sp/>that.</highlight></codeline>
<codeline lineno="66"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/>secp256k1_fe_mul(&amp;prej[n-1].z,<sp/>&amp;prej[n-1].z,<sp/>&amp;d.<ref refid="structsecp256k1__gej_1ae41776408dba32cbe28b5e345b5f2286" kindref="member">z</ref>);</highlight></codeline>
<codeline lineno="68"><highlight class="normal">}</highlight></codeline>
<codeline lineno="69"><highlight class="normal"></highlight></codeline>
<codeline lineno="85"><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>secp256k1_ecmult_odd_multiples_table_globalz_windowa(<ref refid="structsecp256k1__ge" kindref="compound">secp256k1_ge</ref><sp/>*pre,<sp/><ref refid="structsecp256k1__fe" kindref="compound">secp256k1_fe</ref><sp/>*globalz,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structsecp256k1__gej" kindref="compound">secp256k1_gej</ref><sp/>*a)<sp/>{</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structsecp256k1__gej" kindref="compound">secp256k1_gej</ref><sp/>prej[<ref refid="ecmult__impl_8h_1a97c6c6e5aa98f202eec77c4c931e02f1" kindref="member">ECMULT_TABLE_SIZE</ref>(<ref refid="ecmult__impl_8h_1a6216c81c6adbb8796c55fe0c8d3b6718" kindref="member">WINDOW_A</ref>)];</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structsecp256k1__fe" kindref="compound">secp256k1_fe</ref><sp/>zr[<ref refid="ecmult__impl_8h_1a97c6c6e5aa98f202eec77c4c931e02f1" kindref="member">ECMULT_TABLE_SIZE</ref>(<ref refid="ecmult__impl_8h_1a6216c81c6adbb8796c55fe0c8d3b6718" kindref="member">WINDOW_A</ref>)];</highlight></codeline>
<codeline lineno="88"><highlight class="normal"></highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Compute<sp/>the<sp/>odd<sp/>multiples<sp/>in<sp/>Jacobian<sp/>form.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/>secp256k1_ecmult_odd_multiples_table(<ref refid="ecmult__impl_8h_1a97c6c6e5aa98f202eec77c4c931e02f1" kindref="member">ECMULT_TABLE_SIZE</ref>(<ref refid="ecmult__impl_8h_1a6216c81c6adbb8796c55fe0c8d3b6718" kindref="member">WINDOW_A</ref>),<sp/>prej,<sp/>zr,<sp/>a);</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Bring<sp/>them<sp/>to<sp/>the<sp/>same<sp/>Z<sp/>denominator.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/>secp256k1_ge_globalz_set_table_gej(<ref refid="ecmult__impl_8h_1a97c6c6e5aa98f202eec77c4c931e02f1" kindref="member">ECMULT_TABLE_SIZE</ref>(<ref refid="ecmult__impl_8h_1a6216c81c6adbb8796c55fe0c8d3b6718" kindref="member">WINDOW_A</ref>),<sp/>pre,<sp/>globalz,<sp/>prej,<sp/>zr);</highlight></codeline>
<codeline lineno="93"><highlight class="normal">}</highlight></codeline>
<codeline lineno="94"><highlight class="normal"></highlight></codeline>
<codeline lineno="95"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>secp256k1_ecmult_odd_multiples_table_storage_var(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n,<sp/><ref refid="structsecp256k1__ge__storage" kindref="compound">secp256k1_ge_storage</ref><sp/>*pre,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structsecp256k1__gej" kindref="compound">secp256k1_gej</ref><sp/>*a,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structsecp256k1__callback" kindref="compound">secp256k1_callback</ref><sp/>*cb)<sp/>{</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structsecp256k1__gej" kindref="compound">secp256k1_gej</ref><sp/>*prej<sp/>=<sp/>(<ref refid="structsecp256k1__gej" kindref="compound">secp256k1_gej</ref>*)checked_malloc(cb,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="structsecp256k1__gej" kindref="compound">secp256k1_gej</ref>)<sp/>*<sp/>n);</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structsecp256k1__ge" kindref="compound">secp256k1_ge</ref><sp/>*prea<sp/>=<sp/>(<ref refid="structsecp256k1__ge" kindref="compound">secp256k1_ge</ref>*)checked_malloc(cb,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="structsecp256k1__ge" kindref="compound">secp256k1_ge</ref>)<sp/>*<sp/>n);</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structsecp256k1__fe" kindref="compound">secp256k1_fe</ref><sp/>*zr<sp/>=<sp/>(<ref refid="structsecp256k1__fe" kindref="compound">secp256k1_fe</ref>*)checked_malloc(cb,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="structsecp256k1__fe" kindref="compound">secp256k1_fe</ref>)<sp/>*<sp/>n);</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="100"><highlight class="normal"></highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Compute<sp/>the<sp/>odd<sp/>multiples<sp/>in<sp/>Jacobian<sp/>form.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/>secp256k1_ecmult_odd_multiples_table(n,<sp/>prej,<sp/>zr,<sp/>a);</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Convert<sp/>them<sp/>in<sp/>batch<sp/>to<sp/>affine<sp/>coordinates.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/>secp256k1_ge_set_table_gej_var(n,<sp/>prea,<sp/>prej,<sp/>zr);</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Convert<sp/>them<sp/>to<sp/>compact<sp/>storage<sp/>form.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>n;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>secp256k1_ge_to_storage(&amp;pre[i],<sp/>&amp;prea[i]);</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="109"><highlight class="normal"></highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/>free(prea);</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/>free(prej);</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/>free(zr);</highlight></codeline>
<codeline lineno="113"><highlight class="normal">}</highlight></codeline>
<codeline lineno="114"><highlight class="normal"></highlight></codeline>
<codeline lineno="117" refid="ecmult__impl_8h_1afe9218069a15709b99aacd7af0ba2636" refkind="member"><highlight class="preprocessor">#define<sp/>ECMULT_TABLE_GET_GE(r,pre,n,w)<sp/>do<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="118"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>VERIFY_CHECK(((n)<sp/>&amp;<sp/>1)<sp/>==<sp/>1);<sp/>\</highlight></codeline>
<codeline lineno="119"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>VERIFY_CHECK((n)<sp/>&gt;=<sp/>-((1<sp/>&lt;&lt;<sp/>((w)-1))<sp/>-<sp/>1));<sp/>\</highlight></codeline>
<codeline lineno="120"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>VERIFY_CHECK((n)<sp/>&lt;=<sp/><sp/>((1<sp/>&lt;&lt;<sp/>((w)-1))<sp/>-<sp/>1));<sp/>\</highlight></codeline>
<codeline lineno="121"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>if<sp/>((n)<sp/>&gt;<sp/>0)<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="122"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*(r)<sp/>=<sp/>(pre)[((n)-1)/2];<sp/>\</highlight></codeline>
<codeline lineno="123"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>}<sp/>else<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="124"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>secp256k1_ge_neg((r),<sp/>&amp;(pre)[(-(n)-1)/2]);<sp/>\</highlight></codeline>
<codeline lineno="125"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>}<sp/>\</highlight></codeline>
<codeline lineno="126"><highlight class="preprocessor">}<sp/>while(0)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="127"><highlight class="normal"></highlight></codeline>
<codeline lineno="128" refid="ecmult__impl_8h_1a45d4a36e1a06a0214837d20789239f8b" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ECMULT_TABLE_GET_GE_STORAGE(r,pre,n,w)<sp/>do<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="129"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>VERIFY_CHECK(((n)<sp/>&amp;<sp/>1)<sp/>==<sp/>1);<sp/>\</highlight></codeline>
<codeline lineno="130"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>VERIFY_CHECK((n)<sp/>&gt;=<sp/>-((1<sp/>&lt;&lt;<sp/>((w)-1))<sp/>-<sp/>1));<sp/>\</highlight></codeline>
<codeline lineno="131"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>VERIFY_CHECK((n)<sp/>&lt;=<sp/><sp/>((1<sp/>&lt;&lt;<sp/>((w)-1))<sp/>-<sp/>1));<sp/>\</highlight></codeline>
<codeline lineno="132"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>if<sp/>((n)<sp/>&gt;<sp/>0)<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="133"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>secp256k1_ge_from_storage((r),<sp/>&amp;(pre)[((n)-1)/2]);<sp/>\</highlight></codeline>
<codeline lineno="134"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>}<sp/>else<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="135"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>secp256k1_ge_from_storage((r),<sp/>&amp;(pre)[(-(n)-1)/2]);<sp/>\</highlight></codeline>
<codeline lineno="136"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>secp256k1_ge_neg((r),<sp/>(r));<sp/>\</highlight></codeline>
<codeline lineno="137"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>}<sp/>\</highlight></codeline>
<codeline lineno="138"><highlight class="preprocessor">}<sp/>while(0)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="139"><highlight class="normal"></highlight></codeline>
<codeline lineno="140"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>secp256k1_ecmult_context_init(<ref refid="structsecp256k1__ecmult__context" kindref="compound">secp256k1_ecmult_context</ref><sp/>*ctx)<sp/>{</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/>ctx-&gt;<ref refid="structsecp256k1__ecmult__context_1ac517c6e7e4f131328f395123fe4cb536" kindref="member">pre_g</ref><sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="142"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>USE_ENDOMORPHISM</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/>ctx-&gt;pre_g_128<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="144"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="145"><highlight class="normal">}</highlight></codeline>
<codeline lineno="146"><highlight class="normal"></highlight></codeline>
<codeline lineno="147"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>secp256k1_ecmult_context_build(<ref refid="structsecp256k1__ecmult__context" kindref="compound">secp256k1_ecmult_context</ref><sp/>*ctx,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structsecp256k1__callback" kindref="compound">secp256k1_callback</ref><sp/>*cb)<sp/>{</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structsecp256k1__gej" kindref="compound">secp256k1_gej</ref><sp/>gj;</highlight></codeline>
<codeline lineno="149"><highlight class="normal"></highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ctx-&gt;<ref refid="structsecp256k1__ecmult__context_1ac517c6e7e4f131328f395123fe4cb536" kindref="member">pre_g</ref><sp/>!=<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="153"><highlight class="normal"></highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>get<sp/>the<sp/>generator<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/>secp256k1_gej_set_ge(&amp;gj,<sp/>&amp;secp256k1_ge_const_g);</highlight></codeline>
<codeline lineno="156"><highlight class="normal"></highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/>ctx-&gt;<ref refid="structsecp256k1__ecmult__context_1ac517c6e7e4f131328f395123fe4cb536" kindref="member">pre_g</ref><sp/>=<sp/>(<ref refid="structsecp256k1__ge__storage" kindref="compound">secp256k1_ge_storage</ref><sp/>(*)[])checked_malloc(cb,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">((*ctx-&gt;<ref refid="structsecp256k1__ecmult__context_1ac517c6e7e4f131328f395123fe4cb536" kindref="member">pre_g</ref>)[0])<sp/>*<sp/><ref refid="ecmult__impl_8h_1a97c6c6e5aa98f202eec77c4c931e02f1" kindref="member">ECMULT_TABLE_SIZE</ref>(<ref refid="ecmult__impl_8h_1afe951ac62b5b06848cb4e6f4dbc69616" kindref="member">WINDOW_G</ref>));</highlight></codeline>
<codeline lineno="158"><highlight class="normal"></highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>precompute<sp/>the<sp/>tables<sp/>with<sp/>odd<sp/>multiples<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/>secp256k1_ecmult_odd_multiples_table_storage_var(<ref refid="ecmult__impl_8h_1a97c6c6e5aa98f202eec77c4c931e02f1" kindref="member">ECMULT_TABLE_SIZE</ref>(<ref refid="ecmult__impl_8h_1afe951ac62b5b06848cb4e6f4dbc69616" kindref="member">WINDOW_G</ref>),<sp/>*ctx-&gt;<ref refid="structsecp256k1__ecmult__context_1ac517c6e7e4f131328f395123fe4cb536" kindref="member">pre_g</ref>,<sp/>&amp;gj,<sp/>cb);</highlight></codeline>
<codeline lineno="161"><highlight class="normal"></highlight></codeline>
<codeline lineno="162"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>USE_ENDOMORPHISM</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structsecp256k1__gej" kindref="compound">secp256k1_gej</ref><sp/>g_128j;</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="166"><highlight class="normal"></highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ctx-&gt;pre_g_128<sp/>=<sp/>(<ref refid="structsecp256k1__ge__storage" kindref="compound">secp256k1_ge_storage</ref><sp/>(*)[])checked_malloc(cb,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">((*ctx-&gt;pre_g_128)[0])<sp/>*<sp/><ref refid="ecmult__impl_8h_1a97c6c6e5aa98f202eec77c4c931e02f1" kindref="member">ECMULT_TABLE_SIZE</ref>(<ref refid="ecmult__impl_8h_1afe951ac62b5b06848cb4e6f4dbc69616" kindref="member">WINDOW_G</ref>));</highlight></codeline>
<codeline lineno="168"><highlight class="normal"></highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>calculate<sp/>2^128*generator<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>g_128j<sp/>=<sp/>gj;</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>128;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>secp256k1_gej_double_var(&amp;g_128j,<sp/>&amp;g_128j,<sp/>NULL);</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>secp256k1_ecmult_odd_multiples_table_storage_var(<ref refid="ecmult__impl_8h_1a97c6c6e5aa98f202eec77c4c931e02f1" kindref="member">ECMULT_TABLE_SIZE</ref>(<ref refid="ecmult__impl_8h_1afe951ac62b5b06848cb4e6f4dbc69616" kindref="member">WINDOW_G</ref>),<sp/>*ctx-&gt;pre_g_128,<sp/>&amp;g_128j,<sp/>cb);</highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="176"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="177"><highlight class="normal">}</highlight></codeline>
<codeline lineno="178"><highlight class="normal"></highlight></codeline>
<codeline lineno="179"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>secp256k1_ecmult_context_clone(<ref refid="structsecp256k1__ecmult__context" kindref="compound">secp256k1_ecmult_context</ref><sp/>*dst,</highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structsecp256k1__ecmult__context" kindref="compound">secp256k1_ecmult_context</ref><sp/>*src,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structsecp256k1__callback" kindref="compound">secp256k1_callback</ref><sp/>*cb)<sp/>{</highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(src-&gt;<ref refid="structsecp256k1__ecmult__context_1ac517c6e7e4f131328f395123fe4cb536" kindref="member">pre_g</ref><sp/>==<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dst-&gt;<ref refid="structsecp256k1__ecmult__context_1ac517c6e7e4f131328f395123fe4cb536" kindref="member">pre_g</ref><sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>size<sp/>=<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">((*dst-&gt;<ref refid="structsecp256k1__ecmult__context_1ac517c6e7e4f131328f395123fe4cb536" kindref="member">pre_g</ref>)[0])<sp/>*<sp/><ref refid="ecmult__impl_8h_1a97c6c6e5aa98f202eec77c4c931e02f1" kindref="member">ECMULT_TABLE_SIZE</ref>(<ref refid="ecmult__impl_8h_1afe951ac62b5b06848cb4e6f4dbc69616" kindref="member">WINDOW_G</ref>);</highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dst-&gt;<ref refid="structsecp256k1__ecmult__context_1ac517c6e7e4f131328f395123fe4cb536" kindref="member">pre_g</ref><sp/>=<sp/>(<ref refid="structsecp256k1__ge__storage" kindref="compound">secp256k1_ge_storage</ref><sp/>(*)[])checked_malloc(cb,<sp/>size);</highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>memcpy(dst-&gt;<ref refid="structsecp256k1__ecmult__context_1ac517c6e7e4f131328f395123fe4cb536" kindref="member">pre_g</ref>,<sp/>src-&gt;<ref refid="structsecp256k1__ecmult__context_1ac517c6e7e4f131328f395123fe4cb536" kindref="member">pre_g</ref>,<sp/>size);</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="188"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>USE_ENDOMORPHISM</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(src-&gt;pre_g_128<sp/>==<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dst-&gt;pre_g_128<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>size<sp/>=<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">((*dst-&gt;pre_g_128)[0])<sp/>*<sp/><ref refid="ecmult__impl_8h_1a97c6c6e5aa98f202eec77c4c931e02f1" kindref="member">ECMULT_TABLE_SIZE</ref>(<ref refid="ecmult__impl_8h_1afe951ac62b5b06848cb4e6f4dbc69616" kindref="member">WINDOW_G</ref>);</highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dst-&gt;pre_g_128<sp/>=<sp/>(<ref refid="structsecp256k1__ge__storage" kindref="compound">secp256k1_ge_storage</ref><sp/>(*)[])checked_malloc(cb,<sp/>size);</highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>memcpy(dst-&gt;pre_g_128,<sp/>src-&gt;pre_g_128,<sp/>size);</highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="196"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="197"><highlight class="normal">}</highlight></codeline>
<codeline lineno="198"><highlight class="normal"></highlight></codeline>
<codeline lineno="199"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>secp256k1_ecmult_context_is_built(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structsecp256k1__ecmult__context" kindref="compound">secp256k1_ecmult_context</ref><sp/>*ctx)<sp/>{</highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ctx-&gt;<ref refid="structsecp256k1__ecmult__context_1ac517c6e7e4f131328f395123fe4cb536" kindref="member">pre_g</ref><sp/>!=<sp/>NULL;</highlight></codeline>
<codeline lineno="201"><highlight class="normal">}</highlight></codeline>
<codeline lineno="202"><highlight class="normal"></highlight></codeline>
<codeline lineno="203"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>secp256k1_ecmult_context_clear(<ref refid="structsecp256k1__ecmult__context" kindref="compound">secp256k1_ecmult_context</ref><sp/>*ctx)<sp/>{</highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/><sp/><sp/>free(ctx-&gt;<ref refid="structsecp256k1__ecmult__context_1ac517c6e7e4f131328f395123fe4cb536" kindref="member">pre_g</ref>);</highlight></codeline>
<codeline lineno="205"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>USE_ENDOMORPHISM</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/><sp/>free(ctx-&gt;pre_g_128);</highlight></codeline>
<codeline lineno="207"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/><sp/><sp/>secp256k1_ecmult_context_init(ctx);</highlight></codeline>
<codeline lineno="209"><highlight class="normal">}</highlight></codeline>
<codeline lineno="210"><highlight class="normal"></highlight></codeline>
<codeline lineno="218"><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>secp256k1_ecmult_wnaf(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*wnaf,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>len,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structsecp256k1__scalar" kindref="compound">secp256k1_scalar</ref><sp/>*a,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>w)<sp/>{</highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structsecp256k1__scalar" kindref="compound">secp256k1_scalar</ref><sp/>s<sp/>=<sp/>*a;</highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>last_set_bit<sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>bit<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>sign<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>carry<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="224"><highlight class="normal"></highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="secp256k1_2src_2util_8h_1aca8ac5ae73fd966db106de59160a178b" kindref="member">VERIFY_CHECK</ref>(wnaf<sp/>!=<sp/>NULL);</highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="secp256k1_2src_2util_8h_1aca8ac5ae73fd966db106de59160a178b" kindref="member">VERIFY_CHECK</ref>(0<sp/>&lt;=<sp/>len<sp/>&amp;&amp;<sp/>len<sp/>&lt;=<sp/>256);</highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="secp256k1_2src_2util_8h_1aca8ac5ae73fd966db106de59160a178b" kindref="member">VERIFY_CHECK</ref>(a<sp/>!=<sp/>NULL);</highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="secp256k1_2src_2util_8h_1aca8ac5ae73fd966db106de59160a178b" kindref="member">VERIFY_CHECK</ref>(2<sp/>&lt;=<sp/>w<sp/>&amp;&amp;<sp/>w<sp/>&lt;=<sp/>31);</highlight></codeline>
<codeline lineno="229"><highlight class="normal"></highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/><sp/><sp/>memset(wnaf,<sp/>0,<sp/>len<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(wnaf[0]));</highlight></codeline>
<codeline lineno="231"><highlight class="normal"></highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(secp256k1_scalar_get_bits(&amp;s,<sp/>255,<sp/>1))<sp/>{</highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>secp256k1_scalar_negate(&amp;s,<sp/>&amp;s);</highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sign<sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="236"><highlight class="normal"></highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(bit<sp/>&lt;<sp/>len)<sp/>{</highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>now;</highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>word;</highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(secp256k1_scalar_get_bits(&amp;s,<sp/>bit,<sp/>1)<sp/>==<sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)carry)<sp/>{</highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bit++;</highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="244"><highlight class="normal"></highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>now<sp/>=<sp/>w;</highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(now<sp/>&gt;<sp/>len<sp/>-<sp/>bit)<sp/>{</highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>now<sp/>=<sp/>len<sp/>-<sp/>bit;</highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="249"><highlight class="normal"></highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>word<sp/>=<sp/>secp256k1_scalar_get_bits_var(&amp;s,<sp/>bit,<sp/>now)<sp/>+<sp/>carry;</highlight></codeline>
<codeline lineno="251"><highlight class="normal"></highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>carry<sp/>=<sp/>(word<sp/>&gt;&gt;<sp/>(w-1))<sp/>&amp;<sp/>1;</highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>word<sp/>-=<sp/>carry<sp/>&lt;&lt;<sp/>w;</highlight></codeline>
<codeline lineno="254"><highlight class="normal"></highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>wnaf[bit]<sp/>=<sp/>sign<sp/>*<sp/>word;</highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>last_set_bit<sp/>=<sp/>bit;</highlight></codeline>
<codeline lineno="257"><highlight class="normal"></highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bit<sp/>+=<sp/>now;</highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="260"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>VERIFY</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="secp256k1_2src_2util_8h_1aba1590ff86288c886c47dc8a27b30467" kindref="member">CHECK</ref>(carry<sp/>==<sp/>0);</highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(bit<sp/>&lt;<sp/>256)<sp/>{</highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="secp256k1_2src_2util_8h_1aba1590ff86288c886c47dc8a27b30467" kindref="member">CHECK</ref>(secp256k1_scalar_get_bits(&amp;s,<sp/>bit++,<sp/>1)<sp/>==<sp/>0);</highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight></codeline>
<codeline lineno="265"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>last_set_bit<sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="267"><highlight class="normal">}</highlight></codeline>
<codeline lineno="268"><highlight class="normal"></highlight></codeline>
<codeline lineno="269"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>secp256k1_ecmult(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structsecp256k1__ecmult__context" kindref="compound">secp256k1_ecmult_context</ref><sp/>*ctx,<sp/><ref refid="structsecp256k1__gej" kindref="compound">secp256k1_gej</ref><sp/>*r,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structsecp256k1__gej" kindref="compound">secp256k1_gej</ref><sp/>*a,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structsecp256k1__scalar" kindref="compound">secp256k1_scalar</ref><sp/>*na,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structsecp256k1__scalar" kindref="compound">secp256k1_scalar</ref><sp/>*ng)<sp/>{</highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structsecp256k1__ge" kindref="compound">secp256k1_ge</ref><sp/>pre_a[<ref refid="ecmult__impl_8h_1a97c6c6e5aa98f202eec77c4c931e02f1" kindref="member">ECMULT_TABLE_SIZE</ref>(<ref refid="ecmult__impl_8h_1a6216c81c6adbb8796c55fe0c8d3b6718" kindref="member">WINDOW_A</ref>)];</highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structsecp256k1__ge" kindref="compound">secp256k1_ge</ref><sp/>tmpa;</highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structsecp256k1__fe" kindref="compound">secp256k1_fe</ref><sp/>Z;</highlight></codeline>
<codeline lineno="273"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>USE_ENDOMORPHISM</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structsecp256k1__ge" kindref="compound">secp256k1_ge</ref><sp/>pre_a_lam[<ref refid="ecmult__impl_8h_1a97c6c6e5aa98f202eec77c4c931e02f1" kindref="member">ECMULT_TABLE_SIZE</ref>(<ref refid="ecmult__impl_8h_1a6216c81c6adbb8796c55fe0c8d3b6718" kindref="member">WINDOW_A</ref>)];</highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structsecp256k1__scalar" kindref="compound">secp256k1_scalar</ref><sp/>na_1,<sp/>na_lam;</highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Splitted<sp/>G<sp/>factors.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structsecp256k1__scalar" kindref="compound">secp256k1_scalar</ref><sp/>ng_1,<sp/>ng_128;</highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>wnaf_na_1[130];</highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>wnaf_na_lam[130];</highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>bits_na_1;</highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>bits_na_lam;</highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>wnaf_ng_1[129];</highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>bits_ng_1;</highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>wnaf_ng_128[129];</highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>bits_ng_128;</highlight></codeline>
<codeline lineno="286"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>wnaf_na[256];</highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>bits_na;</highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>wnaf_ng[256];</highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>bits_ng;</highlight></codeline>
<codeline lineno="291"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>bits;</highlight></codeline>
<codeline lineno="294"><highlight class="normal"></highlight></codeline>
<codeline lineno="295"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>USE_ENDOMORPHISM</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>split<sp/>na<sp/>into<sp/>na_1<sp/>and<sp/>na_lam<sp/>(where<sp/>na<sp/>=<sp/>na_1<sp/>+<sp/>na_lam*lambda,<sp/>and<sp/>na_1<sp/>and<sp/>na_lam<sp/>are<sp/>~128<sp/>bit)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/><sp/><sp/>secp256k1_scalar_split_lambda(&amp;na_1,<sp/>&amp;na_lam,<sp/>na);</highlight></codeline>
<codeline lineno="298"><highlight class="normal"></highlight></codeline>
<codeline lineno="299"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>build<sp/>wnaf<sp/>representation<sp/>for<sp/>na_1<sp/>and<sp/>na_lam.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="300"><highlight class="normal"><sp/><sp/><sp/><sp/>bits_na_1<sp/><sp/><sp/>=<sp/>secp256k1_ecmult_wnaf(wnaf_na_1,<sp/><sp/><sp/>130,<sp/>&amp;na_1,<sp/><sp/><sp/><ref refid="ecmult__impl_8h_1a6216c81c6adbb8796c55fe0c8d3b6718" kindref="member">WINDOW_A</ref>);</highlight></codeline>
<codeline lineno="301"><highlight class="normal"><sp/><sp/><sp/><sp/>bits_na_lam<sp/>=<sp/>secp256k1_ecmult_wnaf(wnaf_na_lam,<sp/>130,<sp/>&amp;na_lam,<sp/><ref refid="ecmult__impl_8h_1a6216c81c6adbb8796c55fe0c8d3b6718" kindref="member">WINDOW_A</ref>);</highlight></codeline>
<codeline lineno="302"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="secp256k1_2src_2util_8h_1aca8ac5ae73fd966db106de59160a178b" kindref="member">VERIFY_CHECK</ref>(bits_na_1<sp/>&lt;=<sp/>130);</highlight></codeline>
<codeline lineno="303"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="secp256k1_2src_2util_8h_1aca8ac5ae73fd966db106de59160a178b" kindref="member">VERIFY_CHECK</ref>(bits_na_lam<sp/>&lt;=<sp/>130);</highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/><sp/><sp/>bits<sp/>=<sp/>bits_na_1;</highlight></codeline>
<codeline lineno="305"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(bits_na_lam<sp/>&gt;<sp/>bits)<sp/>{</highlight></codeline>
<codeline lineno="306"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bits<sp/>=<sp/>bits_na_lam;</highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="308"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>build<sp/>wnaf<sp/>representation<sp/>for<sp/>na.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/><sp/><sp/>bits_na<sp/><sp/><sp/><sp/><sp/>=<sp/>secp256k1_ecmult_wnaf(wnaf_na,<sp/><sp/><sp/><sp/><sp/>256,<sp/>na,<sp/><sp/><sp/><sp/><sp/><sp/><ref refid="ecmult__impl_8h_1a6216c81c6adbb8796c55fe0c8d3b6718" kindref="member">WINDOW_A</ref>);</highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/><sp/><sp/>bits<sp/>=<sp/>bits_na;</highlight></codeline>
<codeline lineno="312"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="313"><highlight class="normal"></highlight></codeline>
<codeline lineno="314"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Calculate<sp/>odd<sp/>multiples<sp/>of<sp/>a.</highlight></codeline>
<codeline lineno="315"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>All<sp/>multiples<sp/>are<sp/>brought<sp/>to<sp/>the<sp/>same<sp/>Z<sp/>&apos;denominator&apos;,<sp/>which<sp/>is<sp/>stored</highlight></codeline>
<codeline lineno="316"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>in<sp/>Z.<sp/>Due<sp/>to<sp/>secp256k1&apos;<sp/>isomorphism<sp/>we<sp/>can<sp/>do<sp/>all<sp/>operations<sp/>pretending</highlight></codeline>
<codeline lineno="317"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>that<sp/>the<sp/>Z<sp/>coordinate<sp/>was<sp/>1,<sp/>use<sp/>affine<sp/>addition<sp/>formulae,<sp/>and<sp/>correct</highlight></codeline>
<codeline lineno="318"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>the<sp/>Z<sp/>coordinate<sp/>of<sp/>the<sp/>result<sp/>once<sp/>at<sp/>the<sp/>end.</highlight></codeline>
<codeline lineno="319"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>The<sp/>exception<sp/>is<sp/>the<sp/>precomputed<sp/>G<sp/>table<sp/>points,<sp/>which<sp/>are<sp/>actually</highlight></codeline>
<codeline lineno="320"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>affine.<sp/>Compared<sp/>to<sp/>the<sp/>base<sp/>used<sp/>for<sp/>other<sp/>points,<sp/>they<sp/>have<sp/>a<sp/>Z<sp/>ratio</highlight></codeline>
<codeline lineno="321"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>of<sp/>1/Z,<sp/>so<sp/>we<sp/>can<sp/>use<sp/>secp256k1_gej_add_zinv_var,<sp/>which<sp/>uses<sp/>the<sp/>same</highlight></codeline>
<codeline lineno="322"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>isomorphism<sp/>to<sp/>efficiently<sp/>add<sp/>with<sp/>a<sp/>known<sp/>Z<sp/>inverse.</highlight></codeline>
<codeline lineno="323"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="324"><highlight class="normal"><sp/><sp/><sp/><sp/>secp256k1_ecmult_odd_multiples_table_globalz_windowa(pre_a,<sp/>&amp;Z,<sp/>a);</highlight></codeline>
<codeline lineno="325"><highlight class="normal"></highlight></codeline>
<codeline lineno="326"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>USE_ENDOMORPHISM</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="327"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/><ref refid="ecmult__impl_8h_1a97c6c6e5aa98f202eec77c4c931e02f1" kindref="member">ECMULT_TABLE_SIZE</ref>(<ref refid="ecmult__impl_8h_1a6216c81c6adbb8796c55fe0c8d3b6718" kindref="member">WINDOW_A</ref>);<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="328"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>secp256k1_ge_mul_lambda(&amp;pre_a_lam[i],<sp/>&amp;pre_a[i]);</highlight></codeline>
<codeline lineno="329"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="330"><highlight class="normal"></highlight></codeline>
<codeline lineno="331"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>split<sp/>ng<sp/>into<sp/>ng_1<sp/>and<sp/>ng_128<sp/>(where<sp/>gn<sp/>=<sp/>gn_1<sp/>+<sp/>gn_128*2^128,<sp/>and<sp/>gn_1<sp/>and<sp/>gn_128<sp/>are<sp/>~128<sp/>bit)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="332"><highlight class="normal"><sp/><sp/><sp/><sp/>secp256k1_scalar_split_128(&amp;ng_1,<sp/>&amp;ng_128,<sp/>ng);</highlight></codeline>
<codeline lineno="333"><highlight class="normal"></highlight></codeline>
<codeline lineno="334"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Build<sp/>wnaf<sp/>representation<sp/>for<sp/>ng_1<sp/>and<sp/>ng_128<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="335"><highlight class="normal"><sp/><sp/><sp/><sp/>bits_ng_1<sp/><sp/><sp/>=<sp/>secp256k1_ecmult_wnaf(wnaf_ng_1,<sp/><sp/><sp/>129,<sp/>&amp;ng_1,<sp/><sp/><sp/><ref refid="ecmult__impl_8h_1afe951ac62b5b06848cb4e6f4dbc69616" kindref="member">WINDOW_G</ref>);</highlight></codeline>
<codeline lineno="336"><highlight class="normal"><sp/><sp/><sp/><sp/>bits_ng_128<sp/>=<sp/>secp256k1_ecmult_wnaf(wnaf_ng_128,<sp/>129,<sp/>&amp;ng_128,<sp/><ref refid="ecmult__impl_8h_1afe951ac62b5b06848cb4e6f4dbc69616" kindref="member">WINDOW_G</ref>);</highlight></codeline>
<codeline lineno="337"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(bits_ng_1<sp/>&gt;<sp/>bits)<sp/>{</highlight></codeline>
<codeline lineno="338"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bits<sp/>=<sp/>bits_ng_1;</highlight></codeline>
<codeline lineno="339"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="340"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(bits_ng_128<sp/>&gt;<sp/>bits)<sp/>{</highlight></codeline>
<codeline lineno="341"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bits<sp/>=<sp/>bits_ng_128;</highlight></codeline>
<codeline lineno="342"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="343"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="344"><highlight class="normal"><sp/><sp/><sp/><sp/>bits_ng<sp/><sp/><sp/><sp/><sp/>=<sp/>secp256k1_ecmult_wnaf(wnaf_ng,<sp/><sp/><sp/><sp/><sp/>256,<sp/>ng,<sp/><sp/><sp/><sp/><sp/><sp/><ref refid="ecmult__impl_8h_1afe951ac62b5b06848cb4e6f4dbc69616" kindref="member">WINDOW_G</ref>);</highlight></codeline>
<codeline lineno="345"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(bits_ng<sp/>&gt;<sp/>bits)<sp/>{</highlight></codeline>
<codeline lineno="346"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bits<sp/>=<sp/>bits_ng;</highlight></codeline>
<codeline lineno="347"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="348"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="349"><highlight class="normal"></highlight></codeline>
<codeline lineno="350"><highlight class="normal"><sp/><sp/><sp/><sp/>secp256k1_gej_set_infinity(r);</highlight></codeline>
<codeline lineno="351"><highlight class="normal"></highlight></codeline>
<codeline lineno="352"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>bits<sp/>-<sp/>1;<sp/>i<sp/>&gt;=<sp/>0;<sp/>i--)<sp/>{</highlight></codeline>
<codeline lineno="353"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n;</highlight></codeline>
<codeline lineno="354"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>secp256k1_gej_double_var(r,<sp/>r,<sp/>NULL);</highlight></codeline>
<codeline lineno="355"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>USE_ENDOMORPHISM</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="356"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(i<sp/>&lt;<sp/>bits_na_1<sp/>&amp;&amp;<sp/>(n<sp/>=<sp/>wnaf_na_1[i]))<sp/>{</highlight></codeline>
<codeline lineno="357"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="ecmult__impl_8h_1afe9218069a15709b99aacd7af0ba2636" kindref="member">ECMULT_TABLE_GET_GE</ref>(&amp;tmpa,<sp/>pre_a,<sp/>n,<sp/><ref refid="ecmult__impl_8h_1a6216c81c6adbb8796c55fe0c8d3b6718" kindref="member">WINDOW_A</ref>);</highlight></codeline>
<codeline lineno="358"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>secp256k1_gej_add_ge_var(r,<sp/>r,<sp/>&amp;tmpa,<sp/>NULL);</highlight></codeline>
<codeline lineno="359"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="360"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(i<sp/>&lt;<sp/>bits_na_lam<sp/>&amp;&amp;<sp/>(n<sp/>=<sp/>wnaf_na_lam[i]))<sp/>{</highlight></codeline>
<codeline lineno="361"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="ecmult__impl_8h_1afe9218069a15709b99aacd7af0ba2636" kindref="member">ECMULT_TABLE_GET_GE</ref>(&amp;tmpa,<sp/>pre_a_lam,<sp/>n,<sp/><ref refid="ecmult__impl_8h_1a6216c81c6adbb8796c55fe0c8d3b6718" kindref="member">WINDOW_A</ref>);</highlight></codeline>
<codeline lineno="362"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>secp256k1_gej_add_ge_var(r,<sp/>r,<sp/>&amp;tmpa,<sp/>NULL);</highlight></codeline>
<codeline lineno="363"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="364"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(i<sp/>&lt;<sp/>bits_ng_1<sp/>&amp;&amp;<sp/>(n<sp/>=<sp/>wnaf_ng_1[i]))<sp/>{</highlight></codeline>
<codeline lineno="365"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="ecmult__impl_8h_1a45d4a36e1a06a0214837d20789239f8b" kindref="member">ECMULT_TABLE_GET_GE_STORAGE</ref>(&amp;tmpa,<sp/>*ctx-&gt;<ref refid="structsecp256k1__ecmult__context_1ac517c6e7e4f131328f395123fe4cb536" kindref="member">pre_g</ref>,<sp/>n,<sp/><ref refid="ecmult__impl_8h_1afe951ac62b5b06848cb4e6f4dbc69616" kindref="member">WINDOW_G</ref>);</highlight></codeline>
<codeline lineno="366"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>secp256k1_gej_add_zinv_var(r,<sp/>r,<sp/>&amp;tmpa,<sp/>&amp;Z);</highlight></codeline>
<codeline lineno="367"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="368"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(i<sp/>&lt;<sp/>bits_ng_128<sp/>&amp;&amp;<sp/>(n<sp/>=<sp/>wnaf_ng_128[i]))<sp/>{</highlight></codeline>
<codeline lineno="369"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="ecmult__impl_8h_1a45d4a36e1a06a0214837d20789239f8b" kindref="member">ECMULT_TABLE_GET_GE_STORAGE</ref>(&amp;tmpa,<sp/>*ctx-&gt;pre_g_128,<sp/>n,<sp/><ref refid="ecmult__impl_8h_1afe951ac62b5b06848cb4e6f4dbc69616" kindref="member">WINDOW_G</ref>);</highlight></codeline>
<codeline lineno="370"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>secp256k1_gej_add_zinv_var(r,<sp/>r,<sp/>&amp;tmpa,<sp/>&amp;Z);</highlight></codeline>
<codeline lineno="371"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="372"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="373"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(i<sp/>&lt;<sp/>bits_na<sp/>&amp;&amp;<sp/>(n<sp/>=<sp/>wnaf_na[i]))<sp/>{</highlight></codeline>
<codeline lineno="374"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="ecmult__impl_8h_1afe9218069a15709b99aacd7af0ba2636" kindref="member">ECMULT_TABLE_GET_GE</ref>(&amp;tmpa,<sp/>pre_a,<sp/>n,<sp/><ref refid="ecmult__impl_8h_1a6216c81c6adbb8796c55fe0c8d3b6718" kindref="member">WINDOW_A</ref>);</highlight></codeline>
<codeline lineno="375"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>secp256k1_gej_add_ge_var(r,<sp/>r,<sp/>&amp;tmpa,<sp/>NULL);</highlight></codeline>
<codeline lineno="376"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="377"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(i<sp/>&lt;<sp/>bits_ng<sp/>&amp;&amp;<sp/>(n<sp/>=<sp/>wnaf_ng[i]))<sp/>{</highlight></codeline>
<codeline lineno="378"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="ecmult__impl_8h_1a45d4a36e1a06a0214837d20789239f8b" kindref="member">ECMULT_TABLE_GET_GE_STORAGE</ref>(&amp;tmpa,<sp/>*ctx-&gt;<ref refid="structsecp256k1__ecmult__context_1ac517c6e7e4f131328f395123fe4cb536" kindref="member">pre_g</ref>,<sp/>n,<sp/><ref refid="ecmult__impl_8h_1afe951ac62b5b06848cb4e6f4dbc69616" kindref="member">WINDOW_G</ref>);</highlight></codeline>
<codeline lineno="379"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>secp256k1_gej_add_zinv_var(r,<sp/>r,<sp/>&amp;tmpa,<sp/>&amp;Z);</highlight></codeline>
<codeline lineno="380"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="381"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="382"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="383"><highlight class="normal"></highlight></codeline>
<codeline lineno="384"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!r-&gt;<ref refid="structsecp256k1__gej_1ab3ec8168caf27aa3a092d512eaadaad9" kindref="member">infinity</ref>)<sp/>{</highlight></codeline>
<codeline lineno="385"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>secp256k1_fe_mul(&amp;r-&gt;<ref refid="structsecp256k1__gej_1ae41776408dba32cbe28b5e345b5f2286" kindref="member">z</ref>,<sp/>&amp;r-&gt;<ref refid="structsecp256k1__gej_1ae41776408dba32cbe28b5e345b5f2286" kindref="member">z</ref>,<sp/>&amp;Z);</highlight></codeline>
<codeline lineno="386"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="387"><highlight class="normal">}</highlight></codeline>
<codeline lineno="388"><highlight class="normal"></highlight></codeline>
<codeline lineno="389"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
    </programlisting>
    <location file="/home/dev/ds-160209/src/secp256k1/src/ecmult_impl.h"/>
  </compounddef>
</doxygen>
