<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.9.1">
  <compounddef id="group_8h" kind="file" language="C++">
    <compoundname>group.h</compoundname>
    <includes refid="num_8h" local="yes">num.h</includes>
    <includes refid="field_8h" local="yes">field.h</includes>
    <includedby refid="group__impl_8h" local="yes">/home/dev/ds-160209/src/secp256k1/src/group_impl.h</includedby>
    <includedby refid="scalar__impl_8h" local="yes">/home/dev/ds-160209/src/secp256k1/src/scalar_impl.h</includedby>
    <includedby refid="ecmult__const__impl_8h" local="yes">/home/dev/ds-160209/src/secp256k1/src/ecmult_const_impl.h</includedby>
    <includedby refid="ecmult__const_8h" local="yes">/home/dev/ds-160209/src/secp256k1/src/ecmult_const.h</includedby>
    <includedby refid="ecmult__impl_8h" local="yes">/home/dev/ds-160209/src/secp256k1/src/ecmult_impl.h</includedby>
    <includedby refid="ecmult_8h" local="yes">/home/dev/ds-160209/src/secp256k1/src/ecmult.h</includedby>
    <includedby refid="ecmult__gen__impl_8h" local="yes">/home/dev/ds-160209/src/secp256k1/src/ecmult_gen_impl.h</includedby>
    <includedby refid="ecmult__gen_8h" local="yes">/home/dev/ds-160209/src/secp256k1/src/ecmult_gen.h</includedby>
    <includedby refid="ecdsa__impl_8h" local="yes">/home/dev/ds-160209/src/secp256k1/src/ecdsa_impl.h</includedby>
    <includedby refid="ecdsa_8h" local="yes">/home/dev/ds-160209/src/secp256k1/src/ecdsa.h</includedby>
    <includedby refid="eckey_8h" local="yes">/home/dev/ds-160209/src/secp256k1/src/eckey.h</includedby>
    <includedby refid="eckey__impl_8h" local="yes">/home/dev/ds-160209/src/secp256k1/src/eckey_impl.h</includedby>
    <includedby refid="ecmult__static__context_8h" local="yes">/home/dev/ds-160209/src/secp256k1/src/ecmult_static_context.h</includedby>
    <includedby refid="schnorr_8h" local="yes">/home/dev/ds-160209/src/secp256k1/src/modules/schnorr/schnorr.h</includedby>
    <includedby refid="schnorr__impl_8h" local="yes">/home/dev/ds-160209/src/secp256k1/src/modules/schnorr/schnorr_impl.h</includedby>
    <incdepgraph>
      <node id="22450">
        <label>num.h</label>
        <link refid="num_8h"/>
      </node>
      <node id="22449">
        <label>/home/dev/ds-160209/src/secp256k1/src/group.h</label>
        <link refid="group.h"/>
        <childnode refid="22450" relation="include">
        </childnode>
        <childnode refid="22451" relation="include">
        </childnode>
      </node>
      <node id="22451">
        <label>field.h</label>
        <link refid="field_8h"/>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="22462">
        <label>/home/dev/ds-160209/src/secp256k1/src/ecmult_impl.h</label>
        <link refid="ecmult__impl_8h"/>
        <childnode refid="22459" relation="include">
        </childnode>
        <childnode refid="22454" relation="include">
        </childnode>
        <childnode refid="22455" relation="include">
        </childnode>
      </node>
      <node id="22458">
        <label>/home/dev/ds-160209/src/secp256k1/src/scalar_impl.h</label>
        <link refid="scalar__impl_8h"/>
        <childnode refid="22454" relation="include">
        </childnode>
        <childnode refid="22455" relation="include">
        </childnode>
        <childnode refid="22457" relation="include">
        </childnode>
      </node>
      <node id="22472">
        <label>/home/dev/ds-160209/src/secp256k1/src/ecmult_static_context.h</label>
        <link refid="ecmult__static__context_8h"/>
      </node>
      <node id="22473">
        <label>/home/dev/ds-160209/src/secp256k1/src/modules/schnorr/schnorr.h</label>
        <link refid="schnorr_8h"/>
        <childnode refid="22468" relation="include">
        </childnode>
      </node>
      <node id="22457">
        <label>/home/dev/ds-160209/src/secp256k1/src/gen_context.c</label>
        <link refid="gen__context_8c"/>
      </node>
      <node id="22452">
        <label>/home/dev/ds-160209/src/secp256k1/src/group.h</label>
        <link refid="group.h"/>
        <childnode refid="22453" relation="include">
        </childnode>
        <childnode refid="22458" relation="include">
        </childnode>
        <childnode refid="22459" relation="include">
        </childnode>
        <childnode refid="22461" relation="include">
        </childnode>
        <childnode refid="22462" relation="include">
        </childnode>
        <childnode refid="22463" relation="include">
        </childnode>
        <childnode refid="22470" relation="include">
        </childnode>
        <childnode refid="22471" relation="include">
        </childnode>
        <childnode refid="22464" relation="include">
        </childnode>
        <childnode refid="22465" relation="include">
        </childnode>
        <childnode refid="22466" relation="include">
        </childnode>
        <childnode refid="22467" relation="include">
        </childnode>
        <childnode refid="22472" relation="include">
        </childnode>
        <childnode refid="22473" relation="include">
        </childnode>
        <childnode refid="22468" relation="include">
        </childnode>
      </node>
      <node id="22456">
        <label>/home/dev/ds-160209/src/secp256k1/src/tests.c</label>
        <link refid="tests_8c"/>
      </node>
      <node id="22468">
        <label>/home/dev/ds-160209/src/secp256k1/src/modules/schnorr/schnorr_impl.h</label>
        <link refid="schnorr__impl_8h"/>
        <childnode refid="22469" relation="include">
        </childnode>
      </node>
      <node id="22469">
        <label>/home/dev/ds-160209/src/secp256k1/src/modules/schnorr/main_impl.h</label>
        <link refid="schnorr_2main__impl_8h"/>
      </node>
      <node id="22460">
        <label>/home/dev/ds-160209/src/secp256k1/src/modules/ecdh/main_impl.h</label>
        <link refid="ecdh_2main__impl_8h"/>
      </node>
      <node id="22455">
        <label>/home/dev/ds-160209/src/secp256k1/src/secp256k1.c</label>
        <link refid="secp256k1_8c"/>
        <childnode refid="22454" relation="include">
        </childnode>
        <childnode refid="22456" relation="include">
        </childnode>
      </node>
      <node id="22463">
        <label>/home/dev/ds-160209/src/secp256k1/src/ecmult.h</label>
        <link refid="ecmult_8h"/>
        <childnode refid="22462" relation="include">
        </childnode>
        <childnode refid="22464" relation="include">
        </childnode>
        <childnode refid="22465" relation="include">
        </childnode>
        <childnode refid="22466" relation="include">
        </childnode>
        <childnode refid="22468" relation="include">
        </childnode>
      </node>
      <node id="22453">
        <label>/home/dev/ds-160209/src/secp256k1/src/group_impl.h</label>
        <link refid="group__impl_8h"/>
        <childnode refid="22454" relation="include">
        </childnode>
        <childnode refid="22455" relation="include">
        </childnode>
        <childnode refid="22457" relation="include">
        </childnode>
      </node>
      <node id="22471">
        <label>/home/dev/ds-160209/src/secp256k1/src/ecmult_gen.h</label>
        <link refid="ecmult__gen_8h"/>
        <childnode refid="22470" relation="include">
        </childnode>
        <childnode refid="22464" relation="include">
        </childnode>
        <childnode refid="22466" relation="include">
        </childnode>
        <childnode refid="22467" relation="include">
        </childnode>
        <childnode refid="22468" relation="include">
        </childnode>
      </node>
      <node id="22467">
        <label>/home/dev/ds-160209/src/secp256k1/src/eckey_impl.h</label>
        <link refid="eckey__impl_8h"/>
        <childnode refid="22455" relation="include">
        </childnode>
      </node>
      <node id="22459">
        <label>/home/dev/ds-160209/src/secp256k1/src/ecmult_const_impl.h</label>
        <link refid="ecmult__const__impl_8h"/>
        <childnode refid="22454" relation="include">
        </childnode>
        <childnode refid="22455" relation="include">
        </childnode>
        <childnode refid="22460" relation="include">
        </childnode>
      </node>
      <node id="22465">
        <label>/home/dev/ds-160209/src/secp256k1/src/ecdsa.h</label>
        <link refid="ecdsa_8h"/>
        <childnode refid="22464" relation="include">
        </childnode>
      </node>
      <node id="22461">
        <label>/home/dev/ds-160209/src/secp256k1/src/ecmult_const.h</label>
        <link refid="ecmult__const_8h"/>
        <childnode refid="22459" relation="include">
        </childnode>
      </node>
      <node id="22466">
        <label>/home/dev/ds-160209/src/secp256k1/src/eckey.h</label>
        <link refid="eckey_8h"/>
        <childnode refid="22467" relation="include">
        </childnode>
      </node>
      <node id="22454">
        <label>/home/dev/ds-160209/src/secp256k1/src/bench_internal.c</label>
        <link refid="bench__internal_8c"/>
      </node>
      <node id="22470">
        <label>/home/dev/ds-160209/src/secp256k1/src/ecmult_gen_impl.h</label>
        <link refid="ecmult__gen__impl_8h"/>
        <childnode refid="22455" relation="include">
        </childnode>
        <childnode refid="22457" relation="include">
        </childnode>
      </node>
      <node id="22464">
        <label>/home/dev/ds-160209/src/secp256k1/src/ecdsa_impl.h</label>
        <link refid="ecdsa__impl_8h"/>
        <childnode refid="22455" relation="include">
        </childnode>
      </node>
    </invincdepgraph>
    <innerclass refid="structsecp256k1__ge" prot="public">secp256k1_ge</innerclass>
    <innerclass refid="structsecp256k1__gej" prot="public">secp256k1_gej</innerclass>
    <innerclass refid="structsecp256k1__ge__storage" prot="public">secp256k1_ge_storage</innerclass>
      <sectiondef kind="define">
      <memberdef kind="define" id="group_8h_1adb0cb248ca6d0aabe3a82423233e6ce3" prot="public" static="no">
        <name>SECP256K1_GE_CONST</name>
        <param><defname>a</defname></param>
        <param><defname>b</defname></param>
        <param><defname>c</defname></param>
        <param><defname>d</defname></param>
        <param><defname>e</defname></param>
        <param><defname>f</defname></param>
        <param><defname>g</defname></param>
        <param><defname>h</defname></param>
        <param><defname>i</defname></param>
        <param><defname>j</defname></param>
        <param><defname>k</defname></param>
        <param><defname>l</defname></param>
        <param><defname>m</defname></param>
        <param><defname>n</defname></param>
        <param><defname>o</defname></param>
        <param><defname>p</defname></param>
        <initializer>{<ref refid="field__5x52_8h_1a8c00ba3d97ea0d9b0d461463e890de15" kindref="member">SECP256K1_FE_CONST</ref>((a),(b),(c),(d),(e),(f),(g),(h)), <ref refid="field__5x52_8h_1a8c00ba3d97ea0d9b0d461463e890de15" kindref="member">SECP256K1_FE_CONST</ref>((i),(j),(k),(l),(m),(n),(o),(p)), 0}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/secp256k1/src/group.h" line="20" column="9" bodyfile="/home/dev/ds-160209/src/secp256k1/src/group.h" bodystart="20" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group_8h_1a9b939335f1394bfa95e55b3f4f8d0d58" prot="public" static="no">
        <name>SECP256K1_GE_CONST_INFINITY</name>
        <initializer>{<ref refid="field__5x52_8h_1a8c00ba3d97ea0d9b0d461463e890de15" kindref="member">SECP256K1_FE_CONST</ref>(0, 0, 0, 0, 0, 0, 0, 0), <ref refid="field__5x52_8h_1a8c00ba3d97ea0d9b0d461463e890de15" kindref="member">SECP256K1_FE_CONST</ref>(0, 0, 0, 0, 0, 0, 0, 0), 1}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/secp256k1/src/group.h" line="21" column="9" bodyfile="/home/dev/ds-160209/src/secp256k1/src/group.h" bodystart="21" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group_8h_1af46c307c9174e2aa45dbf6f32e61ed21" prot="public" static="no">
        <name>SECP256K1_GEJ_CONST</name>
        <param><defname>a</defname></param>
        <param><defname>b</defname></param>
        <param><defname>c</defname></param>
        <param><defname>d</defname></param>
        <param><defname>e</defname></param>
        <param><defname>f</defname></param>
        <param><defname>g</defname></param>
        <param><defname>h</defname></param>
        <param><defname>i</defname></param>
        <param><defname>j</defname></param>
        <param><defname>k</defname></param>
        <param><defname>l</defname></param>
        <param><defname>m</defname></param>
        <param><defname>n</defname></param>
        <param><defname>o</defname></param>
        <param><defname>p</defname></param>
        <initializer>{<ref refid="field__5x52_8h_1a8c00ba3d97ea0d9b0d461463e890de15" kindref="member">SECP256K1_FE_CONST</ref>((a),(b),(c),(d),(e),(f),(g),(h)), <ref refid="field__5x52_8h_1a8c00ba3d97ea0d9b0d461463e890de15" kindref="member">SECP256K1_FE_CONST</ref>((i),(j),(k),(l),(m),(n),(o),(p)), <ref refid="field__5x52_8h_1a8c00ba3d97ea0d9b0d461463e890de15" kindref="member">SECP256K1_FE_CONST</ref>(0, 0, 0, 0, 0, 0, 0, 1), 0}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/secp256k1/src/group.h" line="31" column="9" bodyfile="/home/dev/ds-160209/src/secp256k1/src/group.h" bodystart="31" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group_8h_1a0143422e1ce1601b00ff71c20c455ceb" prot="public" static="no">
        <name>SECP256K1_GEJ_CONST_INFINITY</name>
        <initializer>{<ref refid="field__5x52_8h_1a8c00ba3d97ea0d9b0d461463e890de15" kindref="member">SECP256K1_FE_CONST</ref>(0, 0, 0, 0, 0, 0, 0, 0), <ref refid="field__5x52_8h_1a8c00ba3d97ea0d9b0d461463e890de15" kindref="member">SECP256K1_FE_CONST</ref>(0, 0, 0, 0, 0, 0, 0, 0), <ref refid="field__5x52_8h_1a8c00ba3d97ea0d9b0d461463e890de15" kindref="member">SECP256K1_FE_CONST</ref>(0, 0, 0, 0, 0, 0, 0, 0), 1}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/secp256k1/src/group.h" line="32" column="9" bodyfile="/home/dev/ds-160209/src/secp256k1/src/group.h" bodystart="32" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group_8h_1a01dc428f2a47a18098539b5c620834f1" prot="public" static="no">
        <name>SECP256K1_GE_STORAGE_CONST</name>
        <param><defname>a</defname></param>
        <param><defname>b</defname></param>
        <param><defname>c</defname></param>
        <param><defname>d</defname></param>
        <param><defname>e</defname></param>
        <param><defname>f</defname></param>
        <param><defname>g</defname></param>
        <param><defname>h</defname></param>
        <param><defname>i</defname></param>
        <param><defname>j</defname></param>
        <param><defname>k</defname></param>
        <param><defname>l</defname></param>
        <param><defname>m</defname></param>
        <param><defname>n</defname></param>
        <param><defname>o</defname></param>
        <param><defname>p</defname></param>
        <initializer>{<ref refid="field__5x52_8h_1ae6927483c41044bd04e5f8efb42f53ba" kindref="member">SECP256K1_FE_STORAGE_CONST</ref>((a),(b),(c),(d),(e),(f),(g),(h)), <ref refid="field__5x52_8h_1ae6927483c41044bd04e5f8efb42f53ba" kindref="member">SECP256K1_FE_STORAGE_CONST</ref>((i),(j),(k),(l),(m),(n),(o),(p))}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/secp256k1/src/group.h" line="39" column="9" bodyfile="/home/dev/ds-160209/src/secp256k1/src/group.h" bodystart="39" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group_8h_1adefefa4ed4193a466784391616bc2f9f" prot="public" static="no">
        <name>SECP256K1_GE_STORAGE_CONST_GET</name>
        <param><defname>t</defname></param>
        <initializer><ref refid="field__10x26_8h_1a07b67ff641d5db9df0691b14cdc29584" kindref="member">SECP256K1_FE_STORAGE_CONST_GET</ref>(t.x), <ref refid="field__10x26_8h_1a07b67ff641d5db9df0691b14cdc29584" kindref="member">SECP256K1_FE_STORAGE_CONST_GET</ref>(t.y)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/secp256k1/src/group.h" line="41" column="9" bodyfile="/home/dev/ds-160209/src/secp256k1/src/group.h" bodystart="41" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="group_8h_1a34ab3d1a9a0a7ff0ed1cedff9db5f73c" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void secp256k1_ge_set_xy</definition>
        <argsstring>(secp256k1_ge *r, const secp256k1_fe *x, const secp256k1_fe *y)</argsstring>
        <name>secp256k1_ge_set_xy</name>
        <param>
          <type><ref refid="structsecp256k1__ge" kindref="compound">secp256k1_ge</ref> *</type>
          <declname>r</declname>
        </param>
        <param>
          <type>const <ref refid="structsecp256k1__fe" kindref="compound">secp256k1_fe</ref> *</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const <ref refid="structsecp256k1__fe" kindref="compound">secp256k1_fe</ref> *</type>
          <declname>y</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Set a group element equal to the point with given X and Y coordinates </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/secp256k1/src/group.h" line="44" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group_8h_1a767d4255b822bcd84f84d9b440b3af86" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>static int secp256k1_ge_set_xquad_var</definition>
        <argsstring>(secp256k1_ge *r, const secp256k1_fe *x)</argsstring>
        <name>secp256k1_ge_set_xquad_var</name>
        <param>
          <type><ref refid="structsecp256k1__ge" kindref="compound">secp256k1_ge</ref> *</type>
          <declname>r</declname>
        </param>
        <param>
          <type>const <ref refid="structsecp256k1__fe" kindref="compound">secp256k1_fe</ref> *</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Set a group element (affine) equal to the point with the given X coordinate and a Y coordinate that is a quadratic residue modulo p. The return value is true iff a coordinate with the given X coordinate exists. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/secp256k1/src/group.h" line="50" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group_8h_1a3c3d9154b093bb4ed48ba55e4c28a0b5" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>static int secp256k1_ge_set_xo_var</definition>
        <argsstring>(secp256k1_ge *r, const secp256k1_fe *x, int odd)</argsstring>
        <name>secp256k1_ge_set_xo_var</name>
        <param>
          <type><ref refid="structsecp256k1__ge" kindref="compound">secp256k1_ge</ref> *</type>
          <declname>r</declname>
        </param>
        <param>
          <type>const <ref refid="structsecp256k1__fe" kindref="compound">secp256k1_fe</ref> *</type>
          <declname>x</declname>
        </param>
        <param>
          <type>int</type>
          <declname>odd</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Set a group element (affine) equal to the point with the given X coordinate, and given oddness for Y. Return value indicates whether the result is valid. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/secp256k1/src/group.h" line="54" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group_8h_1ac83592db46af97faf7ba9b9a39a1f6ff" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>static int secp256k1_ge_is_infinity</definition>
        <argsstring>(const secp256k1_ge *a)</argsstring>
        <name>secp256k1_ge_is_infinity</name>
        <param>
          <type>const <ref refid="structsecp256k1__ge" kindref="compound">secp256k1_ge</ref> *</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Check whether a group element is the point at infinity. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/secp256k1/src/group.h" line="57" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group_8h_1a83600b0c4d8e95a8b2e730b4e2f207dc" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>static int secp256k1_ge_is_valid_var</definition>
        <argsstring>(const secp256k1_ge *a)</argsstring>
        <name>secp256k1_ge_is_valid_var</name>
        <param>
          <type>const <ref refid="structsecp256k1__ge" kindref="compound">secp256k1_ge</ref> *</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Check whether a group element is valid (i.e., on the curve). </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/secp256k1/src/group.h" line="60" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group_8h_1abcb34de0cfdf82a125e059f4f98de1d9" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void secp256k1_ge_neg</definition>
        <argsstring>(secp256k1_ge *r, const secp256k1_ge *a)</argsstring>
        <name>secp256k1_ge_neg</name>
        <param>
          <type><ref refid="structsecp256k1__ge" kindref="compound">secp256k1_ge</ref> *</type>
          <declname>r</declname>
        </param>
        <param>
          <type>const <ref refid="structsecp256k1__ge" kindref="compound">secp256k1_ge</ref> *</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/secp256k1/src/group.h" line="62" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group_8h_1aa511eebf8cd7419763f06555ed4fb62d" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void secp256k1_ge_set_gej</definition>
        <argsstring>(secp256k1_ge *r, secp256k1_gej *a)</argsstring>
        <name>secp256k1_ge_set_gej</name>
        <param>
          <type><ref refid="structsecp256k1__ge" kindref="compound">secp256k1_ge</ref> *</type>
          <declname>r</declname>
        </param>
        <param>
          <type><ref refid="structsecp256k1__gej" kindref="compound">secp256k1_gej</ref> *</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Set a group element equal to another which is given in jacobian coordinates </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/secp256k1/src/group.h" line="65" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group_8h_1ada58b0cf328a74cfdd1f8b35083668a1" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void secp256k1_ge_set_all_gej_var</definition>
        <argsstring>(size_t len, secp256k1_ge *r, const secp256k1_gej *a, const secp256k1_callback *cb)</argsstring>
        <name>secp256k1_ge_set_all_gej_var</name>
        <param>
          <type>size_t</type>
          <declname>len</declname>
        </param>
        <param>
          <type><ref refid="structsecp256k1__ge" kindref="compound">secp256k1_ge</ref> *</type>
          <declname>r</declname>
        </param>
        <param>
          <type>const <ref refid="structsecp256k1__gej" kindref="compound">secp256k1_gej</ref> *</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="structsecp256k1__callback" kindref="compound">secp256k1_callback</ref> *</type>
          <declname>cb</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Set a batch of group elements equal to the inputs given in jacobian coordinates </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/secp256k1/src/group.h" line="68" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group_8h_1a1cf9611464711ed63bde94d92ecc70de" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void secp256k1_ge_set_table_gej_var</definition>
        <argsstring>(size_t len, secp256k1_ge *r, const secp256k1_gej *a, const secp256k1_fe *zr)</argsstring>
        <name>secp256k1_ge_set_table_gej_var</name>
        <param>
          <type>size_t</type>
          <declname>len</declname>
        </param>
        <param>
          <type><ref refid="structsecp256k1__ge" kindref="compound">secp256k1_ge</ref> *</type>
          <declname>r</declname>
        </param>
        <param>
          <type>const <ref refid="structsecp256k1__gej" kindref="compound">secp256k1_gej</ref> *</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="structsecp256k1__fe" kindref="compound">secp256k1_fe</ref> *</type>
          <declname>zr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Set a batch of group elements equal to the inputs given in jacobian coordinates (with known z-ratios). zr must contain the known z-ratios such that mul(a[i].z, zr[i+1]) == a[i+1].z. zr[0] is ignored. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/secp256k1/src/group.h" line="73" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group_8h_1a5391d63ab98be9202d5f14611133fe35" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void secp256k1_ge_globalz_set_table_gej</definition>
        <argsstring>(size_t len, secp256k1_ge *r, secp256k1_fe *globalz, const secp256k1_gej *a, const secp256k1_fe *zr)</argsstring>
        <name>secp256k1_ge_globalz_set_table_gej</name>
        <param>
          <type>size_t</type>
          <declname>len</declname>
        </param>
        <param>
          <type><ref refid="structsecp256k1__ge" kindref="compound">secp256k1_ge</ref> *</type>
          <declname>r</declname>
        </param>
        <param>
          <type><ref refid="structsecp256k1__fe" kindref="compound">secp256k1_fe</ref> *</type>
          <declname>globalz</declname>
        </param>
        <param>
          <type>const <ref refid="structsecp256k1__gej" kindref="compound">secp256k1_gej</ref> *</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="structsecp256k1__fe" kindref="compound">secp256k1_fe</ref> *</type>
          <declname>zr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Bring a batch inputs given in jacobian coordinates (with known z-ratios) to the same global z &quot;denominator&quot;. zr must contain the known z-ratios such that mul(a[i].z, zr[i+1]) == a[i+1].z. zr[0] is ignored. The x and y coordinates of the result are stored in r, the common z coordinate is stored in globalz. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/secp256k1/src/group.h" line="80" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group_8h_1a2c6b24a2db08260d89e891eab7035b2c" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void secp256k1_gej_set_infinity</definition>
        <argsstring>(secp256k1_gej *r)</argsstring>
        <name>secp256k1_gej_set_infinity</name>
        <param>
          <type><ref refid="structsecp256k1__gej" kindref="compound">secp256k1_gej</ref> *</type>
          <declname>r</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Set a group element (jacobian) equal to the point at infinity. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/secp256k1/src/group.h" line="83" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group_8h_1ad5f813e26afb239f03e83f0e61e05498" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void secp256k1_gej_set_ge</definition>
        <argsstring>(secp256k1_gej *r, const secp256k1_ge *a)</argsstring>
        <name>secp256k1_gej_set_ge</name>
        <param>
          <type><ref refid="structsecp256k1__gej" kindref="compound">secp256k1_gej</ref> *</type>
          <declname>r</declname>
        </param>
        <param>
          <type>const <ref refid="structsecp256k1__ge" kindref="compound">secp256k1_ge</ref> *</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Set a group element (jacobian) equal to another which is given in affine coordinates. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/secp256k1/src/group.h" line="86" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group_8h_1aa32fc177f081f16d5979045d3632cf8b" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>static int secp256k1_gej_eq_x_var</definition>
        <argsstring>(const secp256k1_fe *x, const secp256k1_gej *a)</argsstring>
        <name>secp256k1_gej_eq_x_var</name>
        <param>
          <type>const <ref refid="structsecp256k1__fe" kindref="compound">secp256k1_fe</ref> *</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const <ref refid="structsecp256k1__gej" kindref="compound">secp256k1_gej</ref> *</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Compare the X coordinate of a group element (jacobian). </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/secp256k1/src/group.h" line="89" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group_8h_1af9194949a7aaf18aceab1dee73fe4027" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void secp256k1_gej_neg</definition>
        <argsstring>(secp256k1_gej *r, const secp256k1_gej *a)</argsstring>
        <name>secp256k1_gej_neg</name>
        <param>
          <type><ref refid="structsecp256k1__gej" kindref="compound">secp256k1_gej</ref> *</type>
          <declname>r</declname>
        </param>
        <param>
          <type>const <ref refid="structsecp256k1__gej" kindref="compound">secp256k1_gej</ref> *</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Set r equal to the inverse of a (i.e., mirrored around the X axis) </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/secp256k1/src/group.h" line="92" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group_8h_1a33786d5853579c92d46fac51f6a40093" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>static int secp256k1_gej_is_infinity</definition>
        <argsstring>(const secp256k1_gej *a)</argsstring>
        <name>secp256k1_gej_is_infinity</name>
        <param>
          <type>const <ref refid="structsecp256k1__gej" kindref="compound">secp256k1_gej</ref> *</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Check whether a group element is the point at infinity. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/secp256k1/src/group.h" line="95" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group_8h_1a4424d01156ea843dad5a8d27b2feec4f" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void secp256k1_gej_double_nonzero</definition>
        <argsstring>(secp256k1_gej *r, const secp256k1_gej *a, secp256k1_fe *rzr)</argsstring>
        <name>secp256k1_gej_double_nonzero</name>
        <param>
          <type><ref refid="structsecp256k1__gej" kindref="compound">secp256k1_gej</ref> *</type>
          <declname>r</declname>
        </param>
        <param>
          <type>const <ref refid="structsecp256k1__gej" kindref="compound">secp256k1_gej</ref> *</type>
          <declname>a</declname>
        </param>
        <param>
          <type><ref refid="structsecp256k1__fe" kindref="compound">secp256k1_fe</ref> *</type>
          <declname>rzr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Set r equal to the double of a. If rzr is not-NULL, r-&gt;z = a-&gt;z * *rzr (where infinity means an implicit z = 0). a may not be zero. Constant time. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/secp256k1/src/group.h" line="99" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group_8h_1a033aa434a4d0838f649ad757dd44db46" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void secp256k1_gej_double_var</definition>
        <argsstring>(secp256k1_gej *r, const secp256k1_gej *a, secp256k1_fe *rzr)</argsstring>
        <name>secp256k1_gej_double_var</name>
        <param>
          <type><ref refid="structsecp256k1__gej" kindref="compound">secp256k1_gej</ref> *</type>
          <declname>r</declname>
        </param>
        <param>
          <type>const <ref refid="structsecp256k1__gej" kindref="compound">secp256k1_gej</ref> *</type>
          <declname>a</declname>
        </param>
        <param>
          <type><ref refid="structsecp256k1__fe" kindref="compound">secp256k1_fe</ref> *</type>
          <declname>rzr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Set r equal to the double of a. If rzr is not-NULL, r-&gt;z = a-&gt;z * *rzr (where infinity means an implicit z = 0). </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/secp256k1/src/group.h" line="102" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group_8h_1a8df21f3ef7412e6c4d39fb67dc0140c6" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void secp256k1_gej_add_var</definition>
        <argsstring>(secp256k1_gej *r, const secp256k1_gej *a, const secp256k1_gej *b, secp256k1_fe *rzr)</argsstring>
        <name>secp256k1_gej_add_var</name>
        <param>
          <type><ref refid="structsecp256k1__gej" kindref="compound">secp256k1_gej</ref> *</type>
          <declname>r</declname>
        </param>
        <param>
          <type>const <ref refid="structsecp256k1__gej" kindref="compound">secp256k1_gej</ref> *</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="structsecp256k1__gej" kindref="compound">secp256k1_gej</ref> *</type>
          <declname>b</declname>
        </param>
        <param>
          <type><ref refid="structsecp256k1__fe" kindref="compound">secp256k1_fe</ref> *</type>
          <declname>rzr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Set r equal to the sum of a and b. If rzr is non-NULL, r-&gt;z = a-&gt;z * *rzr (a cannot be infinity in that case). </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/secp256k1/src/group.h" line="105" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group_8h_1a586b55d5921edcd68799f584c0a3c58d" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void secp256k1_gej_add_ge</definition>
        <argsstring>(secp256k1_gej *r, const secp256k1_gej *a, const secp256k1_ge *b)</argsstring>
        <name>secp256k1_gej_add_ge</name>
        <param>
          <type><ref refid="structsecp256k1__gej" kindref="compound">secp256k1_gej</ref> *</type>
          <declname>r</declname>
        </param>
        <param>
          <type>const <ref refid="structsecp256k1__gej" kindref="compound">secp256k1_gej</ref> *</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="structsecp256k1__ge" kindref="compound">secp256k1_ge</ref> *</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Set r equal to the sum of a and b (with b given in affine coordinates, and not infinity). </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/secp256k1/src/group.h" line="108" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group_8h_1a4d0338f50b08d082caa32f8e72707b55" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void secp256k1_gej_add_ge_var</definition>
        <argsstring>(secp256k1_gej *r, const secp256k1_gej *a, const secp256k1_ge *b, secp256k1_fe *rzr)</argsstring>
        <name>secp256k1_gej_add_ge_var</name>
        <param>
          <type><ref refid="structsecp256k1__gej" kindref="compound">secp256k1_gej</ref> *</type>
          <declname>r</declname>
        </param>
        <param>
          <type>const <ref refid="structsecp256k1__gej" kindref="compound">secp256k1_gej</ref> *</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="structsecp256k1__ge" kindref="compound">secp256k1_ge</ref> *</type>
          <declname>b</declname>
        </param>
        <param>
          <type><ref refid="structsecp256k1__fe" kindref="compound">secp256k1_fe</ref> *</type>
          <declname>rzr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Set r equal to the sum of a and b (with b given in affine coordinates). This is more efficient than secp256k1_gej_add_var. It is identical to secp256k1_gej_add_ge but without constant-time guarantee, and b is allowed to be infinity. If rzr is non-NULL, r-&gt;z = a-&gt;z * *rzr (a cannot be infinity in that case). </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/secp256k1/src/group.h" line="113" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group_8h_1a180d4e54e906f101ce0f1e74563ce5f6" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void secp256k1_gej_add_zinv_var</definition>
        <argsstring>(secp256k1_gej *r, const secp256k1_gej *a, const secp256k1_ge *b, const secp256k1_fe *bzinv)</argsstring>
        <name>secp256k1_gej_add_zinv_var</name>
        <param>
          <type><ref refid="structsecp256k1__gej" kindref="compound">secp256k1_gej</ref> *</type>
          <declname>r</declname>
        </param>
        <param>
          <type>const <ref refid="structsecp256k1__gej" kindref="compound">secp256k1_gej</ref> *</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="structsecp256k1__ge" kindref="compound">secp256k1_ge</ref> *</type>
          <declname>b</declname>
        </param>
        <param>
          <type>const <ref refid="structsecp256k1__fe" kindref="compound">secp256k1_fe</ref> *</type>
          <declname>bzinv</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Set r equal to the sum of a and b (with the inverse of b&apos;s Z coordinate passed as bzinv). </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/secp256k1/src/group.h" line="116" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group_8h_1a2454dfbe1e75eba118d2c0a4184a9acc" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void secp256k1_gej_clear</definition>
        <argsstring>(secp256k1_gej *r)</argsstring>
        <name>secp256k1_gej_clear</name>
        <param>
          <type><ref refid="structsecp256k1__gej" kindref="compound">secp256k1_gej</ref> *</type>
          <declname>r</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Clear a <ref refid="structsecp256k1__gej" kindref="compound">secp256k1_gej</ref> to prevent leaking sensitive information. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/secp256k1/src/group.h" line="124" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group_8h_1a34793cf48794f089bb28597d1a9f23b2" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void secp256k1_ge_clear</definition>
        <argsstring>(secp256k1_ge *r)</argsstring>
        <name>secp256k1_ge_clear</name>
        <param>
          <type><ref refid="structsecp256k1__ge" kindref="compound">secp256k1_ge</ref> *</type>
          <declname>r</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Clear a <ref refid="structsecp256k1__ge" kindref="compound">secp256k1_ge</ref> to prevent leaking sensitive information. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/secp256k1/src/group.h" line="127" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group_8h_1ad6499ae629f998e50d8614869ee3c67f" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void secp256k1_ge_to_storage</definition>
        <argsstring>(secp256k1_ge_storage *r, const secp256k1_ge *a)</argsstring>
        <name>secp256k1_ge_to_storage</name>
        <param>
          <type><ref refid="structsecp256k1__ge__storage" kindref="compound">secp256k1_ge_storage</ref> *</type>
          <declname>r</declname>
        </param>
        <param>
          <type>const <ref refid="structsecp256k1__ge" kindref="compound">secp256k1_ge</ref> *</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Convert a group element to the storage type. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/secp256k1/src/group.h" line="130" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group_8h_1a8c1e7f328284d9ba56404bb8d99bf765" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void secp256k1_ge_from_storage</definition>
        <argsstring>(secp256k1_ge *r, const secp256k1_ge_storage *a)</argsstring>
        <name>secp256k1_ge_from_storage</name>
        <param>
          <type><ref refid="structsecp256k1__ge" kindref="compound">secp256k1_ge</ref> *</type>
          <declname>r</declname>
        </param>
        <param>
          <type>const <ref refid="structsecp256k1__ge__storage" kindref="compound">secp256k1_ge_storage</ref> *</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Convert a group element back from the storage type. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/secp256k1/src/group.h" line="133" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group_8h_1a9a5ec01f9c5a8fcbae1a83217cd96069" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void secp256k1_ge_storage_cmov</definition>
        <argsstring>(secp256k1_ge_storage *r, const secp256k1_ge_storage *a, int flag)</argsstring>
        <name>secp256k1_ge_storage_cmov</name>
        <param>
          <type><ref refid="structsecp256k1__ge__storage" kindref="compound">secp256k1_ge_storage</ref> *</type>
          <declname>r</declname>
        </param>
        <param>
          <type>const <ref refid="structsecp256k1__ge__storage" kindref="compound">secp256k1_ge_storage</ref> *</type>
          <declname>a</declname>
        </param>
        <param>
          <type>int</type>
          <declname>flag</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>If flag is true, set *r equal to *a; otherwise leave it. Constant-time. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/secp256k1/src/group.h" line="136" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group_8h_1a96ba360f6eb5f21c88e019e741a098ee" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void secp256k1_gej_rescale</definition>
        <argsstring>(secp256k1_gej *r, const secp256k1_fe *b)</argsstring>
        <name>secp256k1_gej_rescale</name>
        <param>
          <type><ref refid="structsecp256k1__gej" kindref="compound">secp256k1_gej</ref> *</type>
          <declname>r</declname>
        </param>
        <param>
          <type>const <ref refid="structsecp256k1__fe" kindref="compound">secp256k1_fe</ref> *</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Rescale a jacobian point by b which must be non-zero. Constant-time. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/secp256k1/src/group.h" line="139" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/**********************************************************************</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/>*<sp/>Copyright<sp/>(c)<sp/>2013,<sp/>2014<sp/>Pieter<sp/>Wuille<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*<sp/>Distributed<sp/>under<sp/>the<sp/>MIT<sp/>software<sp/>license,<sp/>see<sp/>the<sp/>accompanying<sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*<sp/>file<sp/>COPYING<sp/>or<sp/>http://www.opensource.org/licenses/mit-license.php.*</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/>**********************************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>_SECP256K1_GROUP_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>_SECP256K1_GROUP_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="num_8h" kindref="compound">num.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="field_8h" kindref="compound">field.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight></codeline>
<codeline lineno="14" refid="structsecp256k1__ge" refkind="compound"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="15" refid="structsecp256k1__ge_1a3c04a97b606c82ea87e55d4a06f06b6e" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structsecp256k1__fe" kindref="compound">secp256k1_fe</ref><sp/><ref refid="structsecp256k1__ge_1a3c04a97b606c82ea87e55d4a06f06b6e" kindref="member">x</ref>;</highlight></codeline>
<codeline lineno="16" refid="structsecp256k1__ge_1a604295983a1f4aa6e8b5b0f1e46f9ee0" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structsecp256k1__fe" kindref="compound">secp256k1_fe</ref><sp/><ref refid="structsecp256k1__ge_1a604295983a1f4aa6e8b5b0f1e46f9ee0" kindref="member">y</ref>;</highlight></codeline>
<codeline lineno="17" refid="structsecp256k1__ge_1a1cdb35fe7abf6f17c08e4375eeb26628" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="structsecp256k1__ge_1a1cdb35fe7abf6f17c08e4375eeb26628" kindref="member">infinity</ref>;<sp/></highlight><highlight class="comment">/*<sp/>whether<sp/>this<sp/>represents<sp/>the<sp/>point<sp/>at<sp/>infinity<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal">}<sp/><ref refid="structsecp256k1__ge" kindref="compound">secp256k1_ge</ref>;</highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight></codeline>
<codeline lineno="20" refid="group_8h_1adb0cb248ca6d0aabe3a82423233e6ce3" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SECP256K1_GE_CONST(a,<sp/>b,<sp/>c,<sp/>d,<sp/>e,<sp/>f,<sp/>g,<sp/>h,<sp/>i,<sp/>j,<sp/>k,<sp/>l,<sp/>m,<sp/>n,<sp/>o,<sp/>p)<sp/>{SECP256K1_FE_CONST((a),(b),(c),(d),(e),(f),(g),(h)),<sp/>SECP256K1_FE_CONST((i),(j),(k),(l),(m),(n),(o),(p)),<sp/>0}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21" refid="group_8h_1a9b939335f1394bfa95e55b3f4f8d0d58" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SECP256K1_GE_CONST_INFINITY<sp/>{SECP256K1_FE_CONST(0,<sp/>0,<sp/>0,<sp/>0,<sp/>0,<sp/>0,<sp/>0,<sp/>0),<sp/>SECP256K1_FE_CONST(0,<sp/>0,<sp/>0,<sp/>0,<sp/>0,<sp/>0,<sp/>0,<sp/>0),<sp/>1}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight></codeline>
<codeline lineno="24" refid="structsecp256k1__gej" refkind="compound"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="25" refid="structsecp256k1__gej_1a7d2451c89411d62628ac466eb28c8ff5" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structsecp256k1__fe" kindref="compound">secp256k1_fe</ref><sp/><ref refid="structsecp256k1__gej_1a7d2451c89411d62628ac466eb28c8ff5" kindref="member">x</ref>;<sp/></highlight><highlight class="comment">/*<sp/>actual<sp/>X:<sp/>x/z^2<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26" refid="structsecp256k1__gej_1a29d5184060ad790d85a0c89a13820e0d" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structsecp256k1__fe" kindref="compound">secp256k1_fe</ref><sp/><ref refid="structsecp256k1__gej_1a29d5184060ad790d85a0c89a13820e0d" kindref="member">y</ref>;<sp/></highlight><highlight class="comment">/*<sp/>actual<sp/>Y:<sp/>y/z^3<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27" refid="structsecp256k1__gej_1ae41776408dba32cbe28b5e345b5f2286" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structsecp256k1__fe" kindref="compound">secp256k1_fe</ref><sp/><ref refid="structsecp256k1__gej_1ae41776408dba32cbe28b5e345b5f2286" kindref="member">z</ref>;</highlight></codeline>
<codeline lineno="28" refid="structsecp256k1__gej_1ab3ec8168caf27aa3a092d512eaadaad9" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="structsecp256k1__gej_1ab3ec8168caf27aa3a092d512eaadaad9" kindref="member">infinity</ref>;<sp/></highlight><highlight class="comment">/*<sp/>whether<sp/>this<sp/>represents<sp/>the<sp/>point<sp/>at<sp/>infinity<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal">}<sp/><ref refid="structsecp256k1__gej" kindref="compound">secp256k1_gej</ref>;</highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight></codeline>
<codeline lineno="31" refid="group_8h_1af46c307c9174e2aa45dbf6f32e61ed21" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SECP256K1_GEJ_CONST(a,<sp/>b,<sp/>c,<sp/>d,<sp/>e,<sp/>f,<sp/>g,<sp/>h,<sp/>i,<sp/>j,<sp/>k,<sp/>l,<sp/>m,<sp/>n,<sp/>o,<sp/>p)<sp/>{SECP256K1_FE_CONST((a),(b),(c),(d),(e),(f),(g),(h)),<sp/>SECP256K1_FE_CONST((i),(j),(k),(l),(m),(n),(o),(p)),<sp/>SECP256K1_FE_CONST(0,<sp/>0,<sp/>0,<sp/>0,<sp/>0,<sp/>0,<sp/>0,<sp/>1),<sp/>0}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32" refid="group_8h_1a0143422e1ce1601b00ff71c20c455ceb" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SECP256K1_GEJ_CONST_INFINITY<sp/>{SECP256K1_FE_CONST(0,<sp/>0,<sp/>0,<sp/>0,<sp/>0,<sp/>0,<sp/>0,<sp/>0),<sp/>SECP256K1_FE_CONST(0,<sp/>0,<sp/>0,<sp/>0,<sp/>0,<sp/>0,<sp/>0,<sp/>0),<sp/>SECP256K1_FE_CONST(0,<sp/>0,<sp/>0,<sp/>0,<sp/>0,<sp/>0,<sp/>0,<sp/>0),<sp/>1}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight></codeline>
<codeline lineno="34" refid="structsecp256k1__ge__storage" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="35" refid="structsecp256k1__ge__storage_1abace3c7f244d8e7e42ac1b66a071371b" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structsecp256k1__fe__storage" kindref="compound">secp256k1_fe_storage</ref><sp/><ref refid="structsecp256k1__ge__storage_1abace3c7f244d8e7e42ac1b66a071371b" kindref="member">x</ref>;</highlight></codeline>
<codeline lineno="36" refid="structsecp256k1__ge__storage_1af0b13f3e06135a94484cc6f6dd4ef3cc" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structsecp256k1__fe__storage" kindref="compound">secp256k1_fe_storage</ref><sp/><ref refid="structsecp256k1__ge__storage_1af0b13f3e06135a94484cc6f6dd4ef3cc" kindref="member">y</ref>;</highlight></codeline>
<codeline lineno="37"><highlight class="normal">}<sp/><ref refid="structsecp256k1__ge__storage" kindref="compound">secp256k1_ge_storage</ref>;</highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight></codeline>
<codeline lineno="39" refid="group_8h_1a01dc428f2a47a18098539b5c620834f1" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SECP256K1_GE_STORAGE_CONST(a,<sp/>b,<sp/>c,<sp/>d,<sp/>e,<sp/>f,<sp/>g,<sp/>h,<sp/>i,<sp/>j,<sp/>k,<sp/>l,<sp/>m,<sp/>n,<sp/>o,<sp/>p)<sp/>{SECP256K1_FE_STORAGE_CONST((a),(b),(c),(d),(e),(f),(g),(h)),<sp/>SECP256K1_FE_STORAGE_CONST((i),(j),(k),(l),(m),(n),(o),(p))}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight></codeline>
<codeline lineno="41" refid="group_8h_1adefefa4ed4193a466784391616bc2f9f" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SECP256K1_GE_STORAGE_CONST_GET(t)<sp/>SECP256K1_FE_STORAGE_CONST_GET(t.x),<sp/>SECP256K1_FE_STORAGE_CONST_GET(t.y)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>secp256k1_ge_set_xy(<ref refid="structsecp256k1__ge" kindref="compound">secp256k1_ge</ref><sp/>*r,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structsecp256k1__fe" kindref="compound">secp256k1_fe</ref><sp/>*x,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structsecp256k1__fe" kindref="compound">secp256k1_fe</ref><sp/>*y);</highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>secp256k1_ge_set_xquad_var(<ref refid="structsecp256k1__ge" kindref="compound">secp256k1_ge</ref><sp/>*r,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structsecp256k1__fe" kindref="compound">secp256k1_fe</ref><sp/>*x);</highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>secp256k1_ge_set_xo_var(<ref refid="structsecp256k1__ge" kindref="compound">secp256k1_ge</ref><sp/>*r,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structsecp256k1__fe" kindref="compound">secp256k1_fe</ref><sp/>*x,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>odd);</highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight></codeline>
<codeline lineno="57"><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>secp256k1_ge_is_infinity(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structsecp256k1__ge" kindref="compound">secp256k1_ge</ref><sp/>*a);</highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>secp256k1_ge_is_valid_var(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structsecp256k1__ge" kindref="compound">secp256k1_ge</ref><sp/>*a);</highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>secp256k1_ge_neg(<ref refid="structsecp256k1__ge" kindref="compound">secp256k1_ge</ref><sp/>*r,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structsecp256k1__ge" kindref="compound">secp256k1_ge</ref><sp/>*a);</highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight></codeline>
<codeline lineno="65"><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>secp256k1_ge_set_gej(<ref refid="structsecp256k1__ge" kindref="compound">secp256k1_ge</ref><sp/>*r,<sp/><ref refid="structsecp256k1__gej" kindref="compound">secp256k1_gej</ref><sp/>*a);</highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight></codeline>
<codeline lineno="68"><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>secp256k1_ge_set_all_gej_var(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>len,<sp/><ref refid="structsecp256k1__ge" kindref="compound">secp256k1_ge</ref><sp/>*r,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structsecp256k1__gej" kindref="compound">secp256k1_gej</ref><sp/>*a,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structsecp256k1__callback" kindref="compound">secp256k1_callback</ref><sp/>*cb);</highlight></codeline>
<codeline lineno="69"><highlight class="normal"></highlight></codeline>
<codeline lineno="73"><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>secp256k1_ge_set_table_gej_var(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>len,<sp/><ref refid="structsecp256k1__ge" kindref="compound">secp256k1_ge</ref><sp/>*r,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structsecp256k1__gej" kindref="compound">secp256k1_gej</ref><sp/>*a,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structsecp256k1__fe" kindref="compound">secp256k1_fe</ref><sp/>*zr);</highlight></codeline>
<codeline lineno="74"><highlight class="normal"></highlight></codeline>
<codeline lineno="80"><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>secp256k1_ge_globalz_set_table_gej(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>len,<sp/><ref refid="structsecp256k1__ge" kindref="compound">secp256k1_ge</ref><sp/>*r,<sp/><ref refid="structsecp256k1__fe" kindref="compound">secp256k1_fe</ref><sp/>*globalz,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structsecp256k1__gej" kindref="compound">secp256k1_gej</ref><sp/>*a,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structsecp256k1__fe" kindref="compound">secp256k1_fe</ref><sp/>*zr);</highlight></codeline>
<codeline lineno="81"><highlight class="normal"></highlight></codeline>
<codeline lineno="83"><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>secp256k1_gej_set_infinity(<ref refid="structsecp256k1__gej" kindref="compound">secp256k1_gej</ref><sp/>*r);</highlight></codeline>
<codeline lineno="84"><highlight class="normal"></highlight></codeline>
<codeline lineno="86"><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>secp256k1_gej_set_ge(<ref refid="structsecp256k1__gej" kindref="compound">secp256k1_gej</ref><sp/>*r,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structsecp256k1__ge" kindref="compound">secp256k1_ge</ref><sp/>*a);</highlight></codeline>
<codeline lineno="87"><highlight class="normal"></highlight></codeline>
<codeline lineno="89"><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>secp256k1_gej_eq_x_var(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structsecp256k1__fe" kindref="compound">secp256k1_fe</ref><sp/>*x,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structsecp256k1__gej" kindref="compound">secp256k1_gej</ref><sp/>*a);</highlight></codeline>
<codeline lineno="90"><highlight class="normal"></highlight></codeline>
<codeline lineno="92"><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>secp256k1_gej_neg(<ref refid="structsecp256k1__gej" kindref="compound">secp256k1_gej</ref><sp/>*r,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structsecp256k1__gej" kindref="compound">secp256k1_gej</ref><sp/>*a);</highlight></codeline>
<codeline lineno="93"><highlight class="normal"></highlight></codeline>
<codeline lineno="95"><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>secp256k1_gej_is_infinity(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structsecp256k1__gej" kindref="compound">secp256k1_gej</ref><sp/>*a);</highlight></codeline>
<codeline lineno="96"><highlight class="normal"></highlight></codeline>
<codeline lineno="99"><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>secp256k1_gej_double_nonzero(<ref refid="structsecp256k1__gej" kindref="compound">secp256k1_gej</ref><sp/>*r,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structsecp256k1__gej" kindref="compound">secp256k1_gej</ref><sp/>*a,<sp/><ref refid="structsecp256k1__fe" kindref="compound">secp256k1_fe</ref><sp/>*rzr);</highlight></codeline>
<codeline lineno="100"><highlight class="normal"></highlight></codeline>
<codeline lineno="102"><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>secp256k1_gej_double_var(<ref refid="structsecp256k1__gej" kindref="compound">secp256k1_gej</ref><sp/>*r,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structsecp256k1__gej" kindref="compound">secp256k1_gej</ref><sp/>*a,<sp/><ref refid="structsecp256k1__fe" kindref="compound">secp256k1_fe</ref><sp/>*rzr);</highlight></codeline>
<codeline lineno="103"><highlight class="normal"></highlight></codeline>
<codeline lineno="105"><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>secp256k1_gej_add_var(<ref refid="structsecp256k1__gej" kindref="compound">secp256k1_gej</ref><sp/>*r,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structsecp256k1__gej" kindref="compound">secp256k1_gej</ref><sp/>*a,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structsecp256k1__gej" kindref="compound">secp256k1_gej</ref><sp/>*b,<sp/><ref refid="structsecp256k1__fe" kindref="compound">secp256k1_fe</ref><sp/>*rzr);</highlight></codeline>
<codeline lineno="106"><highlight class="normal"></highlight></codeline>
<codeline lineno="108"><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>secp256k1_gej_add_ge(<ref refid="structsecp256k1__gej" kindref="compound">secp256k1_gej</ref><sp/>*r,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structsecp256k1__gej" kindref="compound">secp256k1_gej</ref><sp/>*a,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structsecp256k1__ge" kindref="compound">secp256k1_ge</ref><sp/>*b);</highlight></codeline>
<codeline lineno="109"><highlight class="normal"></highlight></codeline>
<codeline lineno="113"><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>secp256k1_gej_add_ge_var(<ref refid="structsecp256k1__gej" kindref="compound">secp256k1_gej</ref><sp/>*r,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structsecp256k1__gej" kindref="compound">secp256k1_gej</ref><sp/>*a,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structsecp256k1__ge" kindref="compound">secp256k1_ge</ref><sp/>*b,<sp/><ref refid="structsecp256k1__fe" kindref="compound">secp256k1_fe</ref><sp/>*rzr);</highlight></codeline>
<codeline lineno="114"><highlight class="normal"></highlight></codeline>
<codeline lineno="116"><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>secp256k1_gej_add_zinv_var(<ref refid="structsecp256k1__gej" kindref="compound">secp256k1_gej</ref><sp/>*r,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structsecp256k1__gej" kindref="compound">secp256k1_gej</ref><sp/>*a,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structsecp256k1__ge" kindref="compound">secp256k1_ge</ref><sp/>*b,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structsecp256k1__fe" kindref="compound">secp256k1_fe</ref><sp/>*bzinv);</highlight></codeline>
<codeline lineno="117"><highlight class="normal"></highlight></codeline>
<codeline lineno="118"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>USE_ENDOMORPHISM</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="119"><highlight class="normal"></highlight></codeline>
<codeline lineno="120"><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>secp256k1_ge_mul_lambda(<ref refid="structsecp256k1__ge" kindref="compound">secp256k1_ge</ref><sp/>*r,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structsecp256k1__ge" kindref="compound">secp256k1_ge</ref><sp/>*a);</highlight></codeline>
<codeline lineno="121"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="122"><highlight class="normal"></highlight></codeline>
<codeline lineno="124"><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>secp256k1_gej_clear(<ref refid="structsecp256k1__gej" kindref="compound">secp256k1_gej</ref><sp/>*r);</highlight></codeline>
<codeline lineno="125"><highlight class="normal"></highlight></codeline>
<codeline lineno="127"><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>secp256k1_ge_clear(<ref refid="structsecp256k1__ge" kindref="compound">secp256k1_ge</ref><sp/>*r);</highlight></codeline>
<codeline lineno="128"><highlight class="normal"></highlight></codeline>
<codeline lineno="130"><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>secp256k1_ge_to_storage(<ref refid="structsecp256k1__ge__storage" kindref="compound">secp256k1_ge_storage</ref><sp/>*r,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structsecp256k1__ge" kindref="compound">secp256k1_ge</ref><sp/>*a);</highlight></codeline>
<codeline lineno="131"><highlight class="normal"></highlight></codeline>
<codeline lineno="133"><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>secp256k1_ge_from_storage(<ref refid="structsecp256k1__ge" kindref="compound">secp256k1_ge</ref><sp/>*r,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structsecp256k1__ge__storage" kindref="compound">secp256k1_ge_storage</ref><sp/>*a);</highlight></codeline>
<codeline lineno="134"><highlight class="normal"></highlight></codeline>
<codeline lineno="136"><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>secp256k1_ge_storage_cmov(<ref refid="structsecp256k1__ge__storage" kindref="compound">secp256k1_ge_storage</ref><sp/>*r,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structsecp256k1__ge__storage" kindref="compound">secp256k1_ge_storage</ref><sp/>*a,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>flag);</highlight></codeline>
<codeline lineno="137"><highlight class="normal"></highlight></codeline>
<codeline lineno="139"><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>secp256k1_gej_rescale(<ref refid="structsecp256k1__gej" kindref="compound">secp256k1_gej</ref><sp/>*r,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structsecp256k1__fe" kindref="compound">secp256k1_fe</ref><sp/>*b);</highlight></codeline>
<codeline lineno="140"><highlight class="normal"></highlight></codeline>
<codeline lineno="141"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
    </programlisting>
    <location file="/home/dev/ds-160209/src/secp256k1/src/group.h"/>
  </compounddef>
</doxygen>
