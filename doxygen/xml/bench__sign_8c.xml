<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.9.1">
  <compounddef id="bench__sign_8c" kind="file" language="C++">
    <compoundname>bench_sign.c</compoundname>
    <includes refid="secp256k1_8h" local="yes">include/secp256k1.h</includes>
    <includes refid="secp256k1_2src_2util_8h" local="yes">util.h</includes>
    <includes refid="bench_8h" local="yes">bench.h</includes>
    <incdepgraph>
      <node id="51663">
        <label>stdlib.h</label>
      </node>
      <node id="51660">
        <label>include/secp256k1.h</label>
        <link refid="secp256k1_8h"/>
        <childnode refid="51661" relation="include">
        </childnode>
      </node>
      <node id="51661">
        <label>stddef.h</label>
      </node>
      <node id="51659">
        <label>/home/dev/ds-160209/src/secp256k1/src/bench_sign.c</label>
        <link refid="bench_sign.c"/>
        <childnode refid="51660" relation="include">
        </childnode>
        <childnode refid="51662" relation="include">
        </childnode>
        <childnode refid="51666" relation="include">
        </childnode>
      </node>
      <node id="51662">
        <label>util.h</label>
        <link refid="secp256k1_2src_2util_8h"/>
        <childnode refid="51663" relation="include">
        </childnode>
        <childnode refid="51664" relation="include">
        </childnode>
        <childnode refid="51665" relation="include">
        </childnode>
      </node>
      <node id="51667">
        <label>math.h</label>
      </node>
      <node id="51664">
        <label>stdint.h</label>
        <link refid="stdint_8h"/>
      </node>
      <node id="51668">
        <label>sys/time.h</label>
      </node>
      <node id="51665">
        <label>stdio.h</label>
      </node>
      <node id="51666">
        <label>bench.h</label>
        <link refid="bench_8h"/>
        <childnode refid="51665" relation="include">
        </childnode>
        <childnode refid="51667" relation="include">
        </childnode>
        <childnode refid="51668" relation="include">
        </childnode>
      </node>
    </incdepgraph>
    <innerclass refid="structbench__sign__t" prot="public">bench_sign_t</innerclass>
      <sectiondef kind="func">
      <memberdef kind="function" id="bench__sign_8c_1a8419f0da65f4ef41eaab115e550670d1" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void bench_sign_setup</definition>
        <argsstring>(void *arg)</argsstring>
        <name>bench_sign_setup</name>
        <param>
          <type>void *</type>
          <declname>arg</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/secp256k1/src/bench_sign.c" line="17" column="1" bodyfile="/home/dev/ds-160209/src/secp256k1/src/bench_sign.c" bodystart="17" bodyend="27"/>
      </memberdef>
      <memberdef kind="function" id="bench__sign_8c_1ab94f8aceb19d41bc9223619892cfba5c" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void bench_sign</definition>
        <argsstring>(void *arg)</argsstring>
        <name>bench_sign</name>
        <param>
          <type>void *</type>
          <declname>arg</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/secp256k1/src/bench_sign.c" line="29" column="1" bodyfile="/home/dev/ds-160209/src/secp256k1/src/bench_sign.c" bodystart="29" bodyend="45"/>
      </memberdef>
      <memberdef kind="function" id="bench__sign_8c_1a840291bc02cba5474a4cb46a9b9566fe" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int main</definition>
        <argsstring>(void)</argsstring>
        <name>main</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/secp256k1/src/bench_sign.c" line="47" column="1" bodyfile="/home/dev/ds-160209/src/secp256k1/src/bench_sign.c" bodystart="47" bodyend="56"/>
        <references refid="structbench__sign__t_1ae16684ae6cff7c19bf558e5a0204b9ea" compoundref="bench__sign_8c" startline="12">bench_sign_t::ctx</references>
        <references refid="secp256k1_8h_1a769d478f352afbb55200e33970533a3c" compoundref="secp256k1_8c" startline="60" endline="83">secp256k1_context_create</references>
        <references refid="secp256k1_8h_1a0d34fe6baa73d3145f2e376e43de0b15" compoundref="secp256k1_8h" startline="161">SECP256K1_CONTEXT_SIGN</references>
        <references refid="bench_8h_1a62a3537c97d14006568dd6f8b2bc5472" compoundref="bench_8h" startline="33" endline="64">run_benchmark</references>
        <references refid="secp256k1_8h_1af8569fb9aa73c0acf46afce4df662950" compoundref="secp256k1_8c" startline="94" endline="101">secp256k1_context_destroy</references>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/**********************************************************************</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/>*<sp/>Copyright<sp/>(c)<sp/>2014<sp/>Pieter<sp/>Wuille<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*<sp/>Distributed<sp/>under<sp/>the<sp/>MIT<sp/>software<sp/>license,<sp/>see<sp/>the<sp/>accompanying<sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*<sp/>file<sp/>COPYING<sp/>or<sp/>http://www.opensource.org/licenses/mit-license.php.*</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/>**********************************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="secp256k1_8h" kindref="compound">include/secp256k1.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="secp256k1_2src_2util_8h" kindref="compound">util.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="bench_8h" kindref="compound">bench.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight></codeline>
<codeline lineno="11" refid="structbench__sign__t" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="12" refid="structbench__sign__t_1ae16684ae6cff7c19bf558e5a0204b9ea" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structsecp256k1__context__struct" kindref="compound">secp256k1_context</ref>*<sp/><ref refid="structbench__sign__t_1ae16684ae6cff7c19bf558e5a0204b9ea" kindref="member">ctx</ref>;</highlight></codeline>
<codeline lineno="13" refid="structbench__sign__t_1a8710d756cc35409f8c230a89b9a52f71" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>msg[32];</highlight></codeline>
<codeline lineno="14" refid="structbench__sign__t_1ae58b8838304b713a59437d4ec87b15d8" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>key[32];</highlight></codeline>
<codeline lineno="15"><highlight class="normal">}<sp/><ref refid="structbench__sign__t" kindref="compound">bench_sign_t</ref>;</highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>bench_sign_setup(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/><ref refid="env__posix_8cc_1a9ce2ec4812a92cb6ab39f6e81e9173a9" kindref="member">arg</ref>)<sp/>{</highlight></codeline>
<codeline lineno="18"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="19"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structbench__sign__t" kindref="compound">bench_sign_t</ref><sp/>*data<sp/>=<sp/>(<ref refid="structbench__sign__t" kindref="compound">bench_sign_t</ref>*)arg;</highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>32;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>data-&gt;<ref refid="structbench__sign__t_1a8710d756cc35409f8c230a89b9a52f71" kindref="member">msg</ref>[i]<sp/>=<sp/>i<sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>32;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>data-&gt;<ref refid="structbench__sign__t_1ae58b8838304b713a59437d4ec87b15d8" kindref="member">key</ref>[i]<sp/>=<sp/>i<sp/>+<sp/>65;</highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="27"><highlight class="normal">}</highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>bench_sign(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>arg)<sp/>{</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structbench__sign__t" kindref="compound">bench_sign_t</ref><sp/>*data<sp/>=<sp/>(<ref refid="structbench__sign__t" kindref="compound">bench_sign_t</ref>*)arg;</highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>sig[74];</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>20000;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>siglen<sp/>=<sp/>74;</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j;</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structsecp256k1__ecdsa__signature" kindref="compound">secp256k1_ecdsa_signature</ref><sp/>signature;</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="secp256k1_2src_2util_8h_1aba1590ff86288c886c47dc8a27b30467" kindref="member">CHECK</ref>(<ref refid="secp256k1_8h_1a691c048f3a3b4e7f51417c57ec058be7" kindref="member">secp256k1_ecdsa_sign</ref>(data-&gt;<ref refid="structbench__sign__t_1ae16684ae6cff7c19bf558e5a0204b9ea" kindref="member">ctx</ref>,<sp/>&amp;signature,<sp/>data-&gt;<ref refid="structbench__sign__t_1a8710d756cc35409f8c230a89b9a52f71" kindref="member">msg</ref>,<sp/>data-&gt;<ref refid="structbench__sign__t_1ae58b8838304b713a59437d4ec87b15d8" kindref="member">key</ref>,<sp/>NULL,<sp/>NULL));</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="secp256k1_2src_2util_8h_1aba1590ff86288c886c47dc8a27b30467" kindref="member">CHECK</ref>(<ref refid="secp256k1_8h_1ac07809ca872ec967ab4d3b1a95eafe0b" kindref="member">secp256k1_ecdsa_signature_serialize_der</ref>(data-&gt;<ref refid="structbench__sign__t_1ae16684ae6cff7c19bf558e5a0204b9ea" kindref="member">ctx</ref>,<sp/>sig,<sp/>&amp;siglen,<sp/>&amp;signature));</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>32;<sp/>j++)<sp/>{</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>data-&gt;<ref refid="structbench__sign__t_1a8710d756cc35409f8c230a89b9a52f71" kindref="member">msg</ref>[j]<sp/>=<sp/>sig[j];</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>data-&gt;<ref refid="structbench__sign__t_1ae58b8838304b713a59437d4ec87b15d8" kindref="member">key</ref>[j]<sp/>=<sp/>sig[j<sp/>+<sp/>32];</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="45"><highlight class="normal">}</highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight></codeline>
<codeline lineno="47" refid="bench__sign_8c_1a840291bc02cba5474a4cb46a9b9566fe" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="bench__sign_8c_1a840291bc02cba5474a4cb46a9b9566fe" kindref="member">main</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structbench__sign__t" kindref="compound">bench_sign_t</ref><sp/>data;</highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/>data.<ref refid="structbench__sign__t_1ae16684ae6cff7c19bf558e5a0204b9ea" kindref="member">ctx</ref><sp/>=<sp/><ref refid="secp256k1_8h_1a769d478f352afbb55200e33970533a3c" kindref="member">secp256k1_context_create</ref>(<ref refid="secp256k1_8h_1a0d34fe6baa73d3145f2e376e43de0b15" kindref="member">SECP256K1_CONTEXT_SIGN</ref>);</highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="bench_8h_1a62a3537c97d14006568dd6f8b2bc5472" kindref="member">run_benchmark</ref>(</highlight><highlight class="stringliteral">&quot;ecdsa_sign&quot;</highlight><highlight class="normal">,<sp/>bench_sign,<sp/>bench_sign_setup,<sp/>NULL,<sp/>&amp;data,<sp/>10,<sp/>20000);</highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="secp256k1_8h_1af8569fb9aa73c0acf46afce4df662950" kindref="member">secp256k1_context_destroy</ref>(data.<ref refid="structbench__sign__t_1ae16684ae6cff7c19bf558e5a0204b9ea" kindref="member">ctx</ref>);</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="56"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="/home/dev/ds-160209/src/secp256k1/src/bench_sign.c"/>
  </compounddef>
</doxygen>
