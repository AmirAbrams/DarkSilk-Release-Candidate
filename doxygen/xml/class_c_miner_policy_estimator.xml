<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.9.1">
  <compounddef id="class_c_miner_policy_estimator" kind="class" language="C++" prot="public">
    <compoundname>CMinerPolicyEstimator</compoundname>
    <includes refid="txmempool_8h" local="no">txmempool.h</includes>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="class_c_miner_policy_estimator_1a88208767def4f348ae778b6f901b993e" prot="private" static="no" mutable="no">
        <type>std::vector&lt; <ref refid="class_c_block_average" kindref="compound">CBlockAverage</ref> &gt;</type>
        <definition>std::vector&lt;CBlockAverage&gt; CMinerPolicyEstimator::history</definition>
        <argsstring></argsstring>
        <name>history</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Records observed averages transactions that confirmed within one block, two blocks, three blocks etc. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/txmempool.h" line="163" column="1" bodyfile="/home/dev/ds-160209/src/txmempool.h" bodystart="163" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_c_miner_policy_estimator_1a86e77ded95d760c086729a9df30937cd" prot="private" static="no" mutable="no">
        <type>std::vector&lt; <ref refid="class_c_fee_rate" kindref="compound">CFeeRate</ref> &gt;</type>
        <definition>std::vector&lt;CFeeRate&gt; CMinerPolicyEstimator::sortedFeeSamples</definition>
        <argsstring></argsstring>
        <name>sortedFeeSamples</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/txmempool.h" line="164" column="1" bodyfile="/home/dev/ds-160209/src/txmempool.h" bodystart="164" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_c_miner_policy_estimator_1ad982b588d977fee658afa82d297be6cf" prot="private" static="no" mutable="no">
        <type>std::vector&lt; double &gt;</type>
        <definition>std::vector&lt;double&gt; CMinerPolicyEstimator::sortedPrioritySamples</definition>
        <argsstring></argsstring>
        <name>sortedPrioritySamples</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/txmempool.h" line="165" column="1" bodyfile="/home/dev/ds-160209/src/txmempool.h" bodystart="165" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_c_miner_policy_estimator_1a4d43610ab68977a565f05ef10a72eaa8" prot="private" static="no" mutable="no">
        <type>int</type>
        <definition>int CMinerPolicyEstimator::nBestSeenHeight</definition>
        <argsstring></argsstring>
        <name>nBestSeenHeight</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/txmempool.h" line="167" column="1" bodyfile="/home/dev/ds-160209/src/txmempool.h" bodystart="167" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="class_c_miner_policy_estimator_1abfa7a5c0c62621c64951fba632e46ed1" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void CMinerPolicyEstimator::seenTxConfirm</definition>
        <argsstring>(const CFeeRate &amp;feeRate, const CFeeRate &amp;minRelayFee, double dPriority, int nBlocksAgo)</argsstring>
        <name>seenTxConfirm</name>
        <param>
          <type>const <ref refid="class_c_fee_rate" kindref="compound">CFeeRate</ref> &amp;</type>
          <declname>feeRate</declname>
        </param>
        <param>
          <type>const <ref refid="class_c_fee_rate" kindref="compound">CFeeRate</ref> &amp;</type>
          <declname>minRelayFee</declname>
        </param>
        <param>
          <type>double</type>
          <declname>dPriority</declname>
        </param>
        <param>
          <type>int</type>
          <declname>nBlocksAgo</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>nBlocksAgo is 0 based, i.e. transactions that confirmed in the highest seen block are nBlocksAgo == 0, transactions in the block before that are nBlocksAgo == 1 etc. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/txmempool.h" line="173" column="1" bodyfile="/home/dev/ds-160209/src/txmempool.h" bodystart="173" bodyend="201"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="class_c_miner_policy_estimator_1a13e8fe709d07a3e6b1bf31fbc128a998" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>CMinerPolicyEstimator::CMinerPolicyEstimator</definition>
        <argsstring>(int nEntries)</argsstring>
        <name>CMinerPolicyEstimator</name>
        <param>
          <type>int</type>
          <declname>nEntries</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/txmempool.h" line="204" column="1" bodyfile="/home/dev/ds-160209/src/txmempool.h" bodystart="204" bodyend="207"/>
      </memberdef>
      <memberdef kind="function" id="class_c_miner_policy_estimator_1a2b30e1eaa7eec2744c576fba5bd1a168" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void CMinerPolicyEstimator::seenBlock</definition>
        <argsstring>(const std::vector&lt; CTxMemPoolEntry &gt; &amp;entries, int nBlockHeight, const CFeeRate minRelayFee)</argsstring>
        <name>seenBlock</name>
        <param>
          <type>const std::vector&lt; <ref refid="class_c_tx_mem_pool_entry" kindref="compound">CTxMemPoolEntry</ref> &gt; &amp;</type>
          <declname>entries</declname>
        </param>
        <param>
          <type>int</type>
          <declname>nBlockHeight</declname>
        </param>
        <param>
          <type>const <ref refid="class_c_fee_rate" kindref="compound">CFeeRate</ref></type>
          <declname>minRelayFee</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/txmempool.h" line="209" column="1" bodyfile="/home/dev/ds-160209/src/txmempool.h" bodystart="209" bodyend="270"/>
      </memberdef>
      <memberdef kind="function" id="class_c_miner_policy_estimator_1a00b6f58a508ee87999910972f37b3281" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_c_fee_rate" kindref="compound">CFeeRate</ref></type>
        <definition>CFeeRate CMinerPolicyEstimator::estimateFee</definition>
        <argsstring>(int nBlocksToConfirm)</argsstring>
        <name>estimateFee</name>
        <param>
          <type>int</type>
          <declname>nBlocksToConfirm</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Can return <ref refid="class_c_fee_rate" kindref="compound">CFeeRate(0)</ref> if we don&apos;t have any data for that many blocks back. nBlocksToConfirm is 1 based. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/txmempool.h" line="275" column="1" bodyfile="/home/dev/ds-160209/src/txmempool.h" bodystart="275" bodyend="309"/>
      </memberdef>
      <memberdef kind="function" id="class_c_miner_policy_estimator_1ae9bb4813622680e6e3b48ea8c0ce41b6" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>double</type>
        <definition>double CMinerPolicyEstimator::estimatePriority</definition>
        <argsstring>(int nBlocksToConfirm)</argsstring>
        <name>estimatePriority</name>
        <param>
          <type>int</type>
          <declname>nBlocksToConfirm</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/txmempool.h" line="310" column="1" bodyfile="/home/dev/ds-160209/src/txmempool.h" bodystart="310" bodyend="339"/>
      </memberdef>
      <memberdef kind="function" id="class_c_miner_policy_estimator_1aeb98d716f91294503bd5738589ffe6c3" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void CMinerPolicyEstimator::Write</definition>
        <argsstring>(CAutoFile &amp;fileout) const </argsstring>
        <name>Write</name>
        <param>
          <type><ref refid="class_c_auto_file" kindref="compound">CAutoFile</ref> &amp;</type>
          <declname>fileout</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/txmempool.h" line="341" column="1" bodyfile="/home/dev/ds-160209/src/txmempool.h" bodystart="341" bodyend="349"/>
      </memberdef>
      <memberdef kind="function" id="class_c_miner_policy_estimator_1a86e709bc44e9f6f597519173f15595ff" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void CMinerPolicyEstimator::Read</definition>
        <argsstring>(CAutoFile &amp;filein, const CFeeRate &amp;minRelayFee)</argsstring>
        <name>Read</name>
        <param>
          <type><ref refid="class_c_auto_file" kindref="compound">CAutoFile</ref> &amp;</type>
          <declname>filein</declname>
        </param>
        <param>
          <type>const <ref refid="class_c_fee_rate" kindref="compound">CFeeRate</ref> &amp;</type>
          <declname>minRelayFee</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/txmempool.h" line="351" column="1" bodyfile="/home/dev/ds-160209/src/txmempool.h" bodystart="351" bodyend="374"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="/home/dev/ds-160209/src/txmempool.h" line="157" column="1" bodyfile="/home/dev/ds-160209/src/txmempool.h" bodystart="156" bodyend="375"/>
    <listofallmembers>
      <member refid="class_c_miner_policy_estimator_1a13e8fe709d07a3e6b1bf31fbc128a998" prot="public" virt="non-virtual"><scope>CMinerPolicyEstimator</scope><name>CMinerPolicyEstimator</name></member>
      <member refid="class_c_miner_policy_estimator_1a00b6f58a508ee87999910972f37b3281" prot="public" virt="non-virtual"><scope>CMinerPolicyEstimator</scope><name>estimateFee</name></member>
      <member refid="class_c_miner_policy_estimator_1ae9bb4813622680e6e3b48ea8c0ce41b6" prot="public" virt="non-virtual"><scope>CMinerPolicyEstimator</scope><name>estimatePriority</name></member>
      <member refid="class_c_miner_policy_estimator_1a88208767def4f348ae778b6f901b993e" prot="private" virt="non-virtual"><scope>CMinerPolicyEstimator</scope><name>history</name></member>
      <member refid="class_c_miner_policy_estimator_1a4d43610ab68977a565f05ef10a72eaa8" prot="private" virt="non-virtual"><scope>CMinerPolicyEstimator</scope><name>nBestSeenHeight</name></member>
      <member refid="class_c_miner_policy_estimator_1a86e709bc44e9f6f597519173f15595ff" prot="public" virt="non-virtual"><scope>CMinerPolicyEstimator</scope><name>Read</name></member>
      <member refid="class_c_miner_policy_estimator_1a2b30e1eaa7eec2744c576fba5bd1a168" prot="public" virt="non-virtual"><scope>CMinerPolicyEstimator</scope><name>seenBlock</name></member>
      <member refid="class_c_miner_policy_estimator_1abfa7a5c0c62621c64951fba632e46ed1" prot="private" virt="non-virtual"><scope>CMinerPolicyEstimator</scope><name>seenTxConfirm</name></member>
      <member refid="class_c_miner_policy_estimator_1a86e77ded95d760c086729a9df30937cd" prot="private" virt="non-virtual"><scope>CMinerPolicyEstimator</scope><name>sortedFeeSamples</name></member>
      <member refid="class_c_miner_policy_estimator_1ad982b588d977fee658afa82d297be6cf" prot="private" virt="non-virtual"><scope>CMinerPolicyEstimator</scope><name>sortedPrioritySamples</name></member>
      <member refid="class_c_miner_policy_estimator_1aeb98d716f91294503bd5738589ffe6c3" prot="public" virt="non-virtual"><scope>CMinerPolicyEstimator</scope><name>Write</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
