<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.9.1">
  <compounddef id="main_8cpp" kind="file" language="C++">
    <compoundname>main.cpp</compoundname>
    <includes local="no">boost/algorithm/string/replace.hpp</includes>
    <includes local="no">boost/filesystem.hpp</includes>
    <includes local="no">boost/filesystem/fstream.hpp</includes>
    <includes local="no">boost/lexical_cast.hpp</includes>
    <includes refid="main_8h" local="yes">main.h</includes>
    <includes refid="alert_8h" local="yes">alert.h</includes>
    <includes refid="chainparams_8h" local="yes">chainparams.h</includes>
    <includes refid="checkpoints_8h" local="yes">checkpoints.h</includes>
    <includes refid="db_8h" local="yes">db.h</includes>
    <includes refid="init_8h" local="yes">init.h</includes>
    <includes refid="kernel_8h" local="yes">kernel.h</includes>
    <includes refid="txdb_8h" local="yes">txdb.h</includes>
    <includes refid="ui__interface_8h" local="yes">ui_interface.h</includes>
    <includes refid="instantx_8h" local="yes">instantx.h</includes>
    <includes refid="sandstorm_8h" local="yes">sandstorm.h</includes>
    <includes refid="stormnodeman_8h" local="yes">stormnodeman.h</includes>
    <includes refid="stormnode-budget_8h" local="yes">stormnode-budget.h</includes>
    <includes refid="stormnode-payments_8h" local="yes">stormnode-payments.h</includes>
    <includes refid="stormnode-sync_8h" local="yes">stormnode-sync.h</includes>
    <includes refid="spork_8h" local="yes">spork.h</includes>
    <includes refid="smessage_8h" local="yes">smessage.h</includes>
    <includes refid="coins_8h" local="yes">coins.h</includes>
    <includes refid="txdb-leveldb_8h" local="yes">txdb-leveldb.h</includes>
    <incdepgraph>
      <node id="10939">
        <label>list</label>
      </node>
      <node id="10908">
        <label>boost/thread/mutex.hpp</label>
      </node>
      <node id="10972">
        <label>leveldb/write_batch.h</label>
        <link refid="write__batch_8h"/>
        <childnode refid="10893" relation="include">
        </childnode>
        <childnode refid="10970" relation="include">
        </childnode>
      </node>
      <node id="10986">
        <label>netinet/in.h</label>
      </node>
      <node id="10891">
        <label>amount.h</label>
        <link refid="amount_8h"/>
        <childnode refid="10892" relation="include">
        </childnode>
        <childnode refid="10906" relation="include">
        </childnode>
        <childnode refid="10893" relation="include">
        </childnode>
      </node>
      <node id="10979">
        <label>arpa/inet.h</label>
      </node>
      <node id="10956">
        <label>boost/thread/condition_variable.hpp</label>
      </node>
      <node id="10898">
        <label>limits</label>
      </node>
      <node id="11000">
        <label>init.h</label>
        <link refid="init_8h"/>
      </node>
      <node id="10926">
        <label>crypto/sha256.h</label>
        <link refid="sha256_8h"/>
        <childnode refid="10899" relation="include">
        </childnode>
        <childnode refid="10906" relation="include">
        </childnode>
      </node>
      <node id="11015">
        <label>stormnode-budget.h</label>
        <link refid="stormnode-budget_8h"/>
        <childnode refid="10888" relation="include">
        </childnode>
        <childnode refid="10954" relation="include">
        </childnode>
        <childnode refid="10975" relation="include">
        </childnode>
        <childnode refid="11007" relation="include">
        </childnode>
        <childnode refid="10932" relation="include">
        </childnode>
        <childnode refid="11013" relation="include">
        </childnode>
        <childnode refid="11014" relation="include">
        </childnode>
        <childnode refid="10887" relation="include">
        </childnode>
        <childnode refid="11000" relation="include">
        </childnode>
      </node>
      <node id="10927">
        <label>crypto/argon2/blake2/blake2.h</label>
        <link refid="blake2_8h"/>
        <childnode refid="10928" relation="include">
        </childnode>
        <childnode refid="10899" relation="include">
        </childnode>
        <childnode refid="10910" relation="include">
        </childnode>
      </node>
      <node id="10890">
        <label>primitives/transaction.h</label>
        <link refid="transaction_8h"/>
        <childnode refid="10891" relation="include">
        </childnode>
        <childnode refid="10914" relation="include">
        </childnode>
        <childnode refid="10892" relation="include">
        </childnode>
        <childnode refid="10917" relation="include">
        </childnode>
        <childnode refid="10918" relation="include">
        </childnode>
        <childnode refid="10953" relation="include">
        </childnode>
        <childnode refid="10951" relation="include">
        </childnode>
      </node>
      <node id="10918">
        <label>script.h</label>
        <link refid="script_8h"/>
        <childnode refid="10893" relation="include">
        </childnode>
        <childnode refid="10894" relation="include">
        </childnode>
        <childnode refid="10899" relation="include">
        </childnode>
        <childnode refid="10919" relation="include">
        </childnode>
        <childnode refid="10920" relation="include">
        </childnode>
        <childnode refid="10921" relation="include">
        </childnode>
        <childnode refid="10930" relation="include">
        </childnode>
        <childnode refid="10932" relation="include">
        </childnode>
        <childnode refid="10950" relation="include">
        </childnode>
      </node>
      <node id="10949">
        <label>openssl/rand.h</label>
      </node>
      <node id="11009">
        <label>walletdb.h</label>
        <link refid="walletdb_8h"/>
        <childnode refid="10998" relation="include">
        </childnode>
        <childnode refid="11010" relation="include">
        </childnode>
        <childnode refid="10950" relation="include">
        </childnode>
        <childnode refid="10891" relation="include">
        </childnode>
        <childnode refid="10939" relation="include">
        </childnode>
        <childnode refid="10893" relation="include">
        </childnode>
        <childnode refid="10940" relation="include">
        </childnode>
        <childnode refid="10894" relation="include">
        </childnode>
      </node>
      <node id="10915">
        <label>assert.h</label>
      </node>
      <node id="10903">
        <label>boost/tuple/tuple.hpp</label>
      </node>
      <node id="10985">
        <label>net/if.h</label>
      </node>
      <node id="11005">
        <label>sandstorm.h</label>
        <link refid="sandstorm_8h"/>
        <childnode refid="10954" relation="include">
        </childnode>
        <childnode refid="11006" relation="include">
        </childnode>
        <childnode refid="11012" relation="include">
        </childnode>
      </node>
      <node id="10997">
        <label>checkpoints.h</label>
        <link refid="checkpoints_8h"/>
        <childnode refid="10895" relation="include">
        </childnode>
        <childnode refid="10914" relation="include">
        </childnode>
      </node>
      <node id="11017">
        <label>stormnode-sync.h</label>
        <link refid="stormnode-sync_8h"/>
        <childnode refid="11016" relation="include">
        </childnode>
        <childnode refid="10888" relation="include">
        </childnode>
      </node>
      <node id="10889">
        <label>txmempool.h</label>
        <link refid="txmempool_8h"/>
        <childnode refid="10890" relation="include">
        </childnode>
        <childnode refid="10954" relation="include">
        </childnode>
        <childnode refid="10959" relation="include">
        </childnode>
        <childnode refid="10891" relation="include">
        </childnode>
        <childnode refid="10974" relation="include">
        </childnode>
      </node>
      <node id="10887">
        <label>boost/lexical_cast.hpp</label>
      </node>
      <node id="10971">
        <label>leveldb/options.h</label>
        <link refid="options_8h"/>
        <childnode refid="10928" relation="include">
        </childnode>
      </node>
      <node id="10958">
        <label>boost/thread/recursive_mutex.hpp</label>
      </node>
      <node id="11013">
        <label>base58.h</label>
        <link refid="base58_8h"/>
        <childnode refid="10991" relation="include">
        </childnode>
        <childnode refid="10921" relation="include">
        </childnode>
        <childnode refid="11007" relation="include">
        </childnode>
        <childnode refid="10918" relation="include">
        </childnode>
        <childnode refid="10904" relation="include">
        </childnode>
        <childnode refid="10893" relation="include">
        </childnode>
        <childnode refid="10894" relation="include">
        </childnode>
      </node>
      <node id="10912">
        <label>version.h</label>
        <link refid="version_8h"/>
        <childnode refid="10913" relation="include">
        </childnode>
        <childnode refid="10893" relation="include">
        </childnode>
      </node>
      <node id="11020">
        <label>lz4/lz4.h</label>
        <link refid="lz4_8h"/>
      </node>
      <node id="10959">
        <label>coins.h</label>
        <link refid="coins_8h"/>
        <childnode refid="10960" relation="include">
        </childnode>
        <childnode refid="10889" relation="include">
        </childnode>
        <childnode refid="10915" relation="include">
        </childnode>
        <childnode refid="10899" relation="include">
        </childnode>
        <childnode refid="10919" relation="include">
        </childnode>
        <childnode refid="10973" relation="include">
        </childnode>
      </node>
      <node id="10909">
        <label>sys/mman.h</label>
      </node>
      <node id="10906">
        <label>stdlib.h</label>
      </node>
      <node id="10993">
        <label>chain.h</label>
        <link refid="chain_8h"/>
        <childnode refid="10994" relation="include">
        </childnode>
        <childnode refid="10932" relation="include">
        </childnode>
        <childnode refid="10991" relation="include">
        </childnode>
        <childnode refid="10894" relation="include">
        </childnode>
        <childnode refid="10919" relation="include">
        </childnode>
      </node>
      <node id="11019">
        <label>smessage.h</label>
        <link refid="smessage_8h"/>
        <childnode refid="10967" relation="include">
        </childnode>
        <childnode refid="10972" relation="include">
        </childnode>
        <childnode refid="10975" relation="include">
        </childnode>
        <childnode refid="10998" relation="include">
        </childnode>
        <childnode refid="11008" relation="include">
        </childnode>
        <childnode refid="11013" relation="include">
        </childnode>
        <childnode refid="11020" relation="include">
        </childnode>
      </node>
      <node id="10919">
        <label>boost/foreach.hpp</label>
      </node>
      <node id="10948">
        <label>openssl/crypto.h</label>
      </node>
      <node id="11016">
        <label>stormnode-payments.h</label>
        <link refid="stormnode-payments_8h"/>
        <childnode refid="11007" relation="include">
        </childnode>
        <childnode refid="10888" relation="include">
        </childnode>
        <childnode refid="11014" relation="include">
        </childnode>
        <childnode refid="10887" relation="include">
        </childnode>
      </node>
      <node id="10886">
        <label>boost/filesystem/fstream.hpp</label>
      </node>
      <node id="10982">
        <label>compat.h</label>
        <link refid="compat_8h"/>
        <childnode refid="10983" relation="include">
        </childnode>
        <childnode refid="10909" relation="include">
        </childnode>
        <childnode refid="10984" relation="include">
        </childnode>
        <childnode refid="10933" relation="include">
        </childnode>
        <childnode refid="10985" relation="include">
        </childnode>
        <childnode refid="10986" relation="include">
        </childnode>
        <childnode refid="10979" relation="include">
        </childnode>
        <childnode refid="10987" relation="include">
        </childnode>
        <childnode refid="10910" relation="include">
        </childnode>
        <childnode refid="10988" relation="include">
        </childnode>
        <childnode refid="10911" relation="include">
        </childnode>
        <childnode refid="10989" relation="include">
        </childnode>
      </node>
      <node id="10944">
        <label>boost/date_time/posix_time/posix_time_types.hpp</label>
      </node>
      <node id="10923">
        <label>openssl/sha.h</label>
      </node>
      <node id="10989">
        <label>errno.h</label>
      </node>
      <node id="10897">
        <label>cassert</label>
      </node>
      <node id="10916">
        <label>stdexcept</label>
      </node>
      <node id="10932">
        <label>util.h</label>
        <link refid="util_8h"/>
        <childnode refid="10933" relation="include">
        </childnode>
        <childnode refid="10934" relation="include">
        </childnode>
        <childnode refid="10935" relation="include">
        </childnode>
        <childnode refid="10892" relation="include">
        </childnode>
        <childnode refid="10936" relation="include">
        </childnode>
        <childnode refid="10891" relation="include">
        </childnode>
        <childnode refid="10895" relation="include">
        </childnode>
        <childnode refid="10939" relation="include">
        </childnode>
        <childnode refid="10940" relation="include">
        </childnode>
        <childnode refid="10894" relation="include">
        </childnode>
        <childnode refid="10893" relation="include">
        </childnode>
        <childnode refid="10941" relation="include">
        </childnode>
        <childnode refid="10885" relation="include">
        </childnode>
        <childnode refid="10942" relation="include">
        </childnode>
        <childnode refid="10943" relation="include">
        </childnode>
        <childnode refid="10944" relation="include">
        </childnode>
        <childnode refid="10945" relation="include">
        </childnode>
        <childnode refid="10946" relation="include">
        </childnode>
        <childnode refid="10947" relation="include">
        </childnode>
        <childnode refid="10948" relation="include">
        </childnode>
        <childnode refid="10949" relation="include">
        </childnode>
        <childnode refid="10931" relation="include">
        </childnode>
        <childnode refid="10899" relation="include">
        </childnode>
      </node>
      <node id="10990">
        <label>protocol.h</label>
        <link refid="protocol_8h"/>
        <childnode refid="10991" relation="include">
        </childnode>
        <childnode refid="10892" relation="include">
        </childnode>
        <childnode refid="10981" relation="include">
        </childnode>
        <childnode refid="10899" relation="include">
        </childnode>
        <childnode refid="10893" relation="include">
        </childnode>
      </node>
      <node id="10943">
        <label>boost/date_time/gregorian/gregorian_types.hpp</label>
      </node>
      <node id="10967">
        <label>leveldb/db.h</label>
        <link refid="leveldb_2include_2leveldb_2db_8h"/>
        <childnode refid="10899" relation="include">
        </childnode>
        <childnode refid="10951" relation="include">
        </childnode>
        <childnode refid="10968" relation="include">
        </childnode>
        <childnode refid="10971" relation="include">
        </childnode>
      </node>
      <node id="10893">
        <label>string</label>
      </node>
      <node id="11008">
        <label>wallet.h</label>
        <link refid="wallet_8h"/>
        <childnode refid="11009" relation="include">
        </childnode>
        <childnode refid="10893" relation="include">
        </childnode>
        <childnode refid="10894" relation="include">
        </childnode>
        <childnode refid="10906" relation="include">
        </childnode>
        <childnode refid="10994" relation="include">
        </childnode>
        <childnode refid="10890" relation="include">
        </childnode>
        <childnode refid="11011" relation="include">
        </childnode>
        <childnode refid="10888" relation="include">
        </childnode>
        <childnode refid="11007" relation="include">
        </childnode>
        <childnode refid="11010" relation="include">
        </childnode>
        <childnode refid="10918" relation="include">
        </childnode>
        <childnode refid="11002" relation="include">
        </childnode>
        <childnode refid="10932" relation="include">
        </childnode>
        <childnode refid="10950" relation="include">
        </childnode>
      </node>
      <node id="10995">
        <label>scrypt.h</label>
        <link refid="scrypt_8h"/>
        <childnode refid="10899" relation="include">
        </childnode>
        <childnode refid="10906" relation="include">
        </childnode>
        <childnode refid="10932" relation="include">
        </childnode>
        <childnode refid="10975" relation="include">
        </childnode>
      </node>
      <node id="10895">
        <label>map</label>
      </node>
      <node id="10941">
        <label>boost/thread.hpp</label>
      </node>
      <node id="10992">
        <label>addrman.h</label>
        <link refid="addrman_8h"/>
        <childnode refid="10981" relation="include">
        </childnode>
        <childnode refid="10990" relation="include">
        </childnode>
        <childnode refid="10954" relation="include">
        </childnode>
        <childnode refid="10953" relation="include">
        </childnode>
        <childnode refid="10932" relation="include">
        </childnode>
        <childnode refid="10895" relation="include">
        </childnode>
        <childnode refid="10894" relation="include">
        </childnode>
      </node>
      <node id="11014">
        <label>stormnode.h</label>
        <link refid="stormnode_8h"/>
        <childnode refid="10954" relation="include">
        </childnode>
        <childnode refid="10975" relation="include">
        </childnode>
        <childnode refid="11007" relation="include">
        </childnode>
        <childnode refid="10932" relation="include">
        </childnode>
        <childnode refid="11013" relation="include">
        </childnode>
        <childnode refid="10888" relation="include">
        </childnode>
        <childnode refid="10953" relation="include">
        </childnode>
      </node>
      <node id="11002">
        <label>ui_interface.h</label>
        <link refid="ui__interface_8h"/>
        <childnode refid="10891" relation="include">
        </childnode>
        <childnode refid="11003" relation="include">
        </childnode>
        <childnode refid="10978" relation="include">
        </childnode>
        <childnode refid="10893" relation="include">
        </childnode>
        <childnode refid="10899" relation="include">
        </childnode>
      </node>
      <node id="10963">
        <label>leveldbwrapper.h</label>
        <link refid="leveldbwrapper_8h"/>
        <childnode refid="10892" relation="include">
        </childnode>
        <childnode refid="10964" relation="include">
        </childnode>
        <childnode refid="10932" relation="include">
        </childnode>
        <childnode refid="10942" relation="include">
        </childnode>
        <childnode refid="10967" relation="include">
        </childnode>
        <childnode refid="10972" relation="include">
        </childnode>
      </node>
      <node id="10928">
        <label>stddef.h</label>
      </node>
      <node id="10920">
        <label>boost/variant.hpp</label>
      </node>
      <node id="11004">
        <label>instantx.h</label>
        <link refid="instantx_8h"/>
        <childnode refid="10890" relation="include">
        </childnode>
      </node>
      <node id="10988">
        <label>netdb.h</label>
      </node>
      <node id="10983">
        <label>sys/fcntl.h</label>
      </node>
      <node id="10960">
        <label>undo.h</label>
        <link refid="undo_8h"/>
        <childnode refid="10961" relation="include">
        </childnode>
      </node>
      <node id="10970">
        <label>leveldb/status.h</label>
        <link refid="status_8h"/>
        <childnode refid="10893" relation="include">
        </childnode>
        <childnode refid="10969" relation="include">
        </childnode>
      </node>
      <node id="10974">
        <label>boost/circular_buffer.hpp</label>
      </node>
      <node id="10892">
        <label>serialize.h</label>
        <link refid="serialize_8h"/>
        <childnode refid="10893" relation="include">
        </childnode>
        <childnode refid="10894" relation="include">
        </childnode>
        <childnode refid="10895" relation="include">
        </childnode>
        <childnode refid="10896" relation="include">
        </childnode>
        <childnode refid="10897" relation="include">
        </childnode>
        <childnode refid="10898" relation="include">
        </childnode>
        <childnode refid="10899" relation="include">
        </childnode>
        <childnode refid="10900" relation="include">
        </childnode>
        <childnode refid="10901" relation="include">
        </childnode>
        <childnode refid="10902" relation="include">
        </childnode>
        <childnode refid="10903" relation="include">
        </childnode>
        <childnode refid="10904" relation="include">
        </childnode>
        <childnode refid="10912" relation="include">
        </childnode>
      </node>
      <node id="10910">
        <label>limits.h</label>
      </node>
      <node id="10955">
        <label>threadsafety.h</label>
        <link refid="threadsafety_8h"/>
      </node>
      <node id="10980">
        <label>mruset.h</label>
        <link refid="mruset_8h"/>
        <childnode refid="10896" relation="include">
        </childnode>
        <childnode refid="10976" relation="include">
        </childnode>
      </node>
      <node id="10935">
        <label>sys/resource.h</label>
      </node>
      <node id="10945">
        <label>openssl/bio.h</label>
      </node>
      <node id="11011">
        <label>crypter.h</label>
        <link refid="crypter_8h"/>
        <childnode refid="10904" relation="include">
        </childnode>
        <childnode refid="10892" relation="include">
        </childnode>
        <childnode refid="11010" relation="include">
        </childnode>
      </node>
      <node id="10978">
        <label>boost/signals2/signal.hpp</label>
      </node>
      <node id="10981">
        <label>netbase.h</label>
        <link refid="netbase_8h"/>
        <childnode refid="10893" relation="include">
        </childnode>
        <childnode refid="10894" relation="include">
        </childnode>
        <childnode refid="10892" relation="include">
        </childnode>
        <childnode refid="10982" relation="include">
        </childnode>
      </node>
      <node id="11010">
        <label>keystore.h</label>
        <link refid="keystore_8h"/>
        <childnode refid="11007" relation="include">
        </childnode>
        <childnode refid="10921" relation="include">
        </childnode>
        <childnode refid="10954" relation="include">
        </childnode>
        <childnode refid="10918" relation="include">
        </childnode>
        <childnode refid="10978" relation="include">
        </childnode>
        <childnode refid="10920" relation="include">
        </childnode>
      </node>
      <node id="10996">
        <label>alert.h</label>
        <link refid="alert_8h"/>
        <childnode refid="10892" relation="include">
        </childnode>
        <childnode refid="10954" relation="include">
        </childnode>
        <childnode refid="10914" relation="include">
        </childnode>
        <childnode refid="10895" relation="include">
        </childnode>
        <childnode refid="10896" relation="include">
        </childnode>
        <childnode refid="10899" relation="include">
        </childnode>
        <childnode refid="10893" relation="include">
        </childnode>
      </node>
      <node id="10922">
        <label>hash.h</label>
        <link refid="hash_8h"/>
        <childnode refid="10914" relation="include">
        </childnode>
        <childnode refid="10892" relation="include">
        </childnode>
        <childnode refid="10923" relation="include">
        </childnode>
        <childnode refid="10924" relation="include">
        </childnode>
        <childnode refid="10925" relation="include">
        </childnode>
        <childnode refid="10926" relation="include">
        </childnode>
        <childnode refid="10927" relation="include">
        </childnode>
        <childnode refid="10929" relation="include">
        </childnode>
        <childnode refid="10894" relation="include">
        </childnode>
      </node>
      <node id="10987">
        <label>ifaddrs.h</label>
      </node>
      <node id="10950">
        <label>stealth.h</label>
        <link refid="stealth_8h"/>
        <childnode refid="10932" relation="include">
        </childnode>
        <childnode refid="10892" relation="include">
        </childnode>
        <childnode refid="10906" relation="include">
        </childnode>
        <childnode refid="10951" relation="include">
        </childnode>
        <childnode refid="10894" relation="include">
        </childnode>
        <childnode refid="10952" relation="include">
        </childnode>
      </node>
      <node id="11001">
        <label>kernel.h</label>
        <link refid="kernel_8h"/>
        <childnode refid="10993" relation="include">
        </childnode>
      </node>
      <node id="10933">
        <label>sys/types.h</label>
      </node>
      <node id="10966">
        <label>ios</label>
      </node>
      <node id="10907">
        <label>string.h</label>
      </node>
      <node id="10913">
        <label>clientversion.h</label>
        <link refid="clientversion_8h"/>
      </node>
      <node id="10901">
        <label>cstdio</label>
      </node>
      <node id="10957">
        <label>boost/thread/locks.hpp</label>
      </node>
      <node id="10947">
        <label>openssl/buffer.h</label>
      </node>
      <node id="10902">
        <label>boost/type_traits/is_fundamental.hpp</label>
      </node>
      <node id="10888">
        <label>main.h</label>
        <link refid="main_8h"/>
        <childnode refid="10889" relation="include">
        </childnode>
        <childnode refid="10975" relation="include">
        </childnode>
        <childnode refid="10918" relation="include">
        </childnode>
        <childnode refid="10964" relation="include">
        </childnode>
        <childnode refid="10962" relation="include">
        </childnode>
        <childnode refid="10993" relation="include">
        </childnode>
        <childnode refid="10939" relation="include">
        </childnode>
        <childnode refid="10973" relation="include">
        </childnode>
      </node>
      <node id="10942">
        <label>boost/filesystem/path.hpp</label>
      </node>
      <node id="11012">
        <label>stormnodeman.h</label>
        <link refid="stormnodeman_8h"/>
        <childnode refid="10954" relation="include">
        </childnode>
        <childnode refid="10975" relation="include">
        </childnode>
        <childnode refid="11007" relation="include">
        </childnode>
        <childnode refid="10932" relation="include">
        </childnode>
        <childnode refid="11013" relation="include">
        </childnode>
        <childnode refid="10888" relation="include">
        </childnode>
        <childnode refid="11014" relation="include">
        </childnode>
      </node>
      <node id="10973">
        <label>boost/unordered_map.hpp</label>
      </node>
      <node id="10921">
        <label>pubkey.h</label>
        <link refid="pubkey_8h"/>
        <childnode refid="10922" relation="include">
        </childnode>
        <childnode refid="10892" relation="include">
        </childnode>
        <childnode refid="10914" relation="include">
        </childnode>
        <childnode refid="10916" relation="include">
        </childnode>
        <childnode refid="10894" relation="include">
        </childnode>
      </node>
      <node id="10911">
        <label>unistd.h</label>
      </node>
      <node id="10999">
        <label>db_cxx.h</label>
      </node>
      <node id="10894">
        <label>vector</label>
      </node>
      <node id="10930">
        <label>bignum.h</label>
        <link refid="bignum_8h"/>
        <childnode refid="10892" relation="include">
        </childnode>
        <childnode refid="10914" relation="include">
        </childnode>
        <childnode refid="10931" relation="include">
        </childnode>
        <childnode refid="10916" relation="include">
        </childnode>
        <childnode refid="10894" relation="include">
        </childnode>
        <childnode refid="10899" relation="include">
        </childnode>
      </node>
      <node id="10975">
        <label>net.h</label>
        <link refid="net_8h"/>
        <childnode refid="10976" relation="include">
        </childnode>
        <childnode refid="10977" relation="include">
        </childnode>
        <childnode refid="10919" relation="include">
        </childnode>
        <childnode refid="10978" relation="include">
        </childnode>
        <childnode refid="10949" relation="include">
        </childnode>
        <childnode refid="10979" relation="include">
        </childnode>
        <childnode refid="10980" relation="include">
        </childnode>
        <childnode refid="10981" relation="include">
        </childnode>
        <childnode refid="10990" relation="include">
        </childnode>
        <childnode refid="10992" relation="include">
        </childnode>
        <childnode refid="10922" relation="include">
        </childnode>
        <childnode refid="10964" relation="include">
        </childnode>
      </node>
      <node id="10924">
        <label>openssl/ripemd.h</label>
      </node>
      <node id="10885">
        <label>boost/filesystem.hpp</label>
      </node>
      <node id="10940">
        <label>utility</label>
      </node>
      <node id="10961">
        <label>compressor.h</label>
        <link refid="compressor_8h"/>
        <childnode refid="10890" relation="include">
        </childnode>
        <childnode refid="10962" relation="include">
        </childnode>
      </node>
      <node id="10938">
        <label>sstream</label>
      </node>
      <node id="11003">
        <label>boost/signals2/last_value.hpp</label>
      </node>
      <node id="11021">
        <label>txdb-leveldb.h</label>
        <link refid="txdb-leveldb_8h"/>
        <childnode refid="10888" relation="include">
        </childnode>
        <childnode refid="10895" relation="include">
        </childnode>
        <childnode refid="10893" relation="include">
        </childnode>
        <childnode refid="10894" relation="include">
        </childnode>
        <childnode refid="10967" relation="include">
        </childnode>
        <childnode refid="10972" relation="include">
        </childnode>
        <childnode refid="10964" relation="include">
        </childnode>
      </node>
      <node id="11007">
        <label>key.h</label>
        <link refid="key_8h"/>
        <childnode refid="10904" relation="include">
        </childnode>
        <childnode refid="10921" relation="include">
        </childnode>
        <childnode refid="10916" relation="include">
        </childnode>
        <childnode refid="10894" relation="include">
        </childnode>
      </node>
      <node id="10946">
        <label>openssl/evp.h</label>
      </node>
      <node id="10936">
        <label>tinyformat.h</label>
        <link refid="tinyformat_8h"/>
        <childnode refid="10897" relation="include">
        </childnode>
        <childnode refid="10937" relation="include">
        </childnode>
        <childnode refid="10938" relation="include">
        </childnode>
        <childnode refid="10916" relation="include">
        </childnode>
      </node>
      <node id="10899">
        <label>stdint.h</label>
        <link refid="stdint_8h"/>
      </node>
      <node id="10998">
        <label>db.h</label>
        <link refid="db_8h"/>
        <childnode refid="10892" relation="include">
        </childnode>
        <childnode refid="10954" relation="include">
        </childnode>
        <childnode refid="10964" relation="include">
        </childnode>
        <childnode refid="10895" relation="include">
        </childnode>
        <childnode refid="10893" relation="include">
        </childnode>
        <childnode refid="10894" relation="include">
        </childnode>
        <childnode refid="10942" relation="include">
        </childnode>
        <childnode refid="10999" relation="include">
        </childnode>
      </node>
      <node id="10964">
        <label>streams.h</label>
        <link refid="streams_8h"/>
        <childnode refid="10904" relation="include">
        </childnode>
        <childnode refid="10892" relation="include">
        </childnode>
        <childnode refid="10965" relation="include">
        </childnode>
        <childnode refid="10915" relation="include">
        </childnode>
        <childnode refid="10966" relation="include">
        </childnode>
        <childnode refid="10898" relation="include">
        </childnode>
        <childnode refid="10895" relation="include">
        </childnode>
        <childnode refid="10896" relation="include">
        </childnode>
        <childnode refid="10899" relation="include">
        </childnode>
        <childnode refid="10893" relation="include">
        </childnode>
        <childnode refid="10907" relation="include">
        </childnode>
        <childnode refid="10940" relation="include">
        </childnode>
        <childnode refid="10894" relation="include">
        </childnode>
      </node>
      <node id="10929">
        <label>crypto/argon2/argon2.h</label>
        <link refid="argon2_8h"/>
        <childnode refid="10899" relation="include">
        </childnode>
        <childnode refid="10928" relation="include">
        </childnode>
        <childnode refid="10910" relation="include">
        </childnode>
      </node>
      <node id="11018">
        <label>spork.h</label>
        <link refid="spork_8h"/>
        <childnode refid="10930" relation="include">
        </childnode>
        <childnode refid="10954" relation="include">
        </childnode>
        <childnode refid="10975" relation="include">
        </childnode>
        <childnode refid="11007" relation="include">
        </childnode>
        <childnode refid="10932" relation="include">
        </childnode>
        <childnode refid="10918" relation="include">
        </childnode>
        <childnode refid="11013" relation="include">
        </childnode>
        <childnode refid="10888" relation="include">
        </childnode>
        <childnode refid="10990" relation="include">
        </childnode>
        <childnode refid="11005" relation="include">
        </childnode>
        <childnode refid="10887" relation="include">
        </childnode>
      </node>
      <node id="10934">
        <label>sys/time.h</label>
      </node>
      <node id="10937">
        <label>iostream</label>
      </node>
      <node id="10976">
        <label>deque</label>
      </node>
      <node id="10914">
        <label>uint256.h</label>
        <link refid="uint256_8h"/>
        <childnode refid="10915" relation="include">
        </childnode>
        <childnode refid="10900" relation="include">
        </childnode>
        <childnode refid="10916" relation="include">
        </childnode>
        <childnode refid="10899" relation="include">
        </childnode>
        <childnode refid="10893" relation="include">
        </childnode>
        <childnode refid="10894" relation="include">
        </childnode>
      </node>
      <node id="10984">
        <label>sys/socket.h</label>
      </node>
      <node id="10969">
        <label>leveldb/slice.h</label>
        <link refid="slice_8h"/>
        <childnode refid="10915" relation="include">
        </childnode>
        <childnode refid="10928" relation="include">
        </childnode>
        <childnode refid="10907" relation="include">
        </childnode>
        <childnode refid="10893" relation="include">
        </childnode>
      </node>
      <node id="10977">
        <label>boost/array.hpp</label>
      </node>
      <node id="10931">
        <label>openssl/bn.h</label>
      </node>
      <node id="10962">
        <label>txdb.h</label>
        <link refid="txdb_8h"/>
        <childnode refid="10963" relation="include">
        </childnode>
        <childnode refid="10888" relation="include">
        </childnode>
        <childnode refid="10895" relation="include">
        </childnode>
        <childnode refid="10893" relation="include">
        </childnode>
        <childnode refid="10940" relation="include">
        </childnode>
        <childnode refid="10894" relation="include">
        </childnode>
      </node>
      <node id="10953">
        <label>timedata.h</label>
        <link refid="timedata_8h"/>
        <childnode refid="10899" relation="include">
        </childnode>
      </node>
      <node id="10904">
        <label>allocators.h</label>
        <link refid="allocators_8h"/>
        <childnode refid="10905" relation="include">
        </childnode>
        <childnode refid="10907" relation="include">
        </childnode>
        <childnode refid="10893" relation="include">
        </childnode>
        <childnode refid="10908" relation="include">
        </childnode>
        <childnode refid="10895" relation="include">
        </childnode>
        <childnode refid="10909" relation="include">
        </childnode>
        <childnode refid="10910" relation="include">
        </childnode>
        <childnode refid="10911" relation="include">
        </childnode>
      </node>
      <node id="10991">
        <label>chainparams.h</label>
        <link refid="chainparams_8h"/>
        <childnode refid="10930" relation="include">
        </childnode>
        <childnode refid="10914" relation="include">
        </childnode>
        <childnode refid="10894" relation="include">
        </childnode>
      </node>
      <node id="10896">
        <label>set</label>
      </node>
      <node id="10965">
        <label>algorithm</label>
      </node>
      <node id="10883">
        <label>/home/dev/ds-160209/src/main.cpp</label>
        <link refid="main.cpp"/>
        <childnode refid="10884" relation="include">
        </childnode>
        <childnode refid="10885" relation="include">
        </childnode>
        <childnode refid="10886" relation="include">
        </childnode>
        <childnode refid="10887" relation="include">
        </childnode>
        <childnode refid="10888" relation="include">
        </childnode>
        <childnode refid="10996" relation="include">
        </childnode>
        <childnode refid="10991" relation="include">
        </childnode>
        <childnode refid="10997" relation="include">
        </childnode>
        <childnode refid="10998" relation="include">
        </childnode>
        <childnode refid="11000" relation="include">
        </childnode>
        <childnode refid="11001" relation="include">
        </childnode>
        <childnode refid="10962" relation="include">
        </childnode>
        <childnode refid="11002" relation="include">
        </childnode>
        <childnode refid="11004" relation="include">
        </childnode>
        <childnode refid="11005" relation="include">
        </childnode>
        <childnode refid="11012" relation="include">
        </childnode>
        <childnode refid="11015" relation="include">
        </childnode>
        <childnode refid="11016" relation="include">
        </childnode>
        <childnode refid="11017" relation="include">
        </childnode>
        <childnode refid="11018" relation="include">
        </childnode>
        <childnode refid="11019" relation="include">
        </childnode>
        <childnode refid="10959" relation="include">
        </childnode>
        <childnode refid="11021" relation="include">
        </childnode>
      </node>
      <node id="10884">
        <label>boost/algorithm/string/replace.hpp</label>
      </node>
      <node id="11006">
        <label>activestormnode.h</label>
        <link refid="activestormnode_8h"/>
        <childnode refid="10954" relation="include">
        </childnode>
        <childnode refid="11007" relation="include">
        </childnode>
        <childnode refid="11008" relation="include">
        </childnode>
      </node>
      <node id="10925">
        <label>crypto/ripemd160.h</label>
        <link refid="ripemd160_8h"/>
        <childnode refid="10899" relation="include">
        </childnode>
        <childnode refid="10906" relation="include">
        </childnode>
      </node>
      <node id="10917">
        <label>util.h</label>
      </node>
      <node id="10951">
        <label>stdio.h</label>
      </node>
      <node id="10905">
        <label>cleanse.h</label>
        <link refid="cleanse_8h"/>
        <childnode refid="10906" relation="include">
        </childnode>
      </node>
      <node id="10900">
        <label>cstring</label>
      </node>
      <node id="10954">
        <label>sync.h</label>
        <link refid="sync_8h"/>
        <childnode refid="10955" relation="include">
        </childnode>
        <childnode refid="10956" relation="include">
        </childnode>
        <childnode refid="10957" relation="include">
        </childnode>
        <childnode refid="10908" relation="include">
        </childnode>
        <childnode refid="10958" relation="include">
        </childnode>
      </node>
      <node id="10952">
        <label>inttypes.h</label>
      </node>
      <node id="10968">
        <label>leveldb/iterator.h</label>
        <link refid="iterator_8h"/>
        <childnode refid="10969" relation="include">
        </childnode>
        <childnode refid="10970" relation="include">
        </childnode>
      </node>
      <node id="10994">
        <label>primitives/block.h</label>
        <link refid="primitives_2block_8h"/>
        <childnode refid="10890" relation="include">
        </childnode>
        <childnode refid="10929" relation="include">
        </childnode>
        <childnode refid="10995" relation="include">
        </childnode>
      </node>
    </incdepgraph>
    <innerclass refid="struct_c_orphan_tx" prot="public">COrphanTx</innerclass>
    <innerclass refid="struct_c_orphan_block" prot="public">COrphanBlock</innerclass>
    <innerclass refid="struct_c_importing_now" prot="public">CImportingNow</innerclass>
      <sectiondef kind="enum">
      <memberdef kind="enum" id="main_8cpp_1ae2877520fcc46d869b4f5e9768227e25" prot="public" static="no">
        <name>FlushStateMode</name>
        <enumvalue id="main_8cpp_1ae2877520fcc46d869b4f5e9768227e25ad0ad58fd3314f311426789b0bb2a2cba" prot="public">
          <name>FLUSH_STATE_IF_NEEDED</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="main_8cpp_1ae2877520fcc46d869b4f5e9768227e25a6a06c814025cd4514da2455ae3d5fa88" prot="public">
          <name>FLUSH_STATE_PERIODIC</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="main_8cpp_1ae2877520fcc46d869b4f5e9768227e25a5886980c58baf0c7f8c6ae29d210f38c" prot="public">
          <name>FLUSH_STATE_ALWAYS</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/main.cpp" line="3996" column="1" bodyfile="/home/dev/ds-160209/src/main.cpp" bodystart="3996" bodyend="4000"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="var">
      <memberdef kind="variable" id="main_8cpp_1afa4cd327d70c3f1f925935432a30b48e" prot="public" static="no" mutable="no">
        <type><ref refid="class_c_big_num" kindref="compound">CBigNum</ref></type>
        <definition>CBigNum bnProofOfStakeLimit(~uint256(0) &gt;&gt; 20)</definition>
        <argsstring>(~uint256(0) &gt;&gt; 20)</argsstring>
        <name>bnProofOfStakeLimit</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/main.cpp" line="39" column="1"/>
      </memberdef>
      <memberdef kind="variable" id="main_8cpp_1a28d3fb113f678730589d9392424da758" prot="public" static="no" mutable="no">
        <type><ref refid="sync_8h_1a37a4692b2d517f2843655ca11af7668a" kindref="member">CCriticalSection</ref></type>
        <definition>CCriticalSection cs_setpwalletRegistered</definition>
        <argsstring></argsstring>
        <name>cs_setpwalletRegistered</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/main.cpp" line="41" column="1" bodyfile="/home/dev/ds-160209/src/main.cpp" bodystart="41" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="main_8cpp_1a964d81c1c647e5625e94bb0db036c830" prot="public" static="no" mutable="no">
        <type>set&lt; <ref refid="class_c_wallet" kindref="compound">CWallet</ref> * &gt;</type>
        <definition>set&lt;CWallet*&gt; setpwalletRegistered</definition>
        <argsstring></argsstring>
        <name>setpwalletRegistered</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/main.cpp" line="42" column="1" bodyfile="/home/dev/ds-160209/src/main.cpp" bodystart="42" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="main_8cpp_1a1ed8285f0fe3c6799c53265ce72552c8" prot="public" static="no" mutable="no">
        <type><ref refid="sync_8h_1a37a4692b2d517f2843655ca11af7668a" kindref="member">CCriticalSection</ref></type>
        <definition>CCriticalSection cs_main</definition>
        <argsstring></argsstring>
        <name>cs_main</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/main.cpp" line="44" column="1" bodyfile="/home/dev/ds-160209/src/main.cpp" bodystart="44" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="main_8cpp_1a5925a10baeee7d4bdce1982bdcbd3bd0" prot="public" static="no" mutable="no">
        <type><ref refid="class_c_fee_rate" kindref="compound">CFeeRate</ref></type>
        <definition>CFeeRate minRelayTxFee</definition>
        <argsstring></argsstring>
        <name>minRelayTxFee</name>
        <initializer>= <ref refid="class_c_fee_rate" kindref="compound">CFeeRate</ref>(<ref refid="wallet_8h_1add67e95cd66a980b74a7a2f434d9cf1c" kindref="member">MIN_TX_FEE</ref>)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Fees smaller than this (in satoshis) are considered zero fee (for relaying and mining) We are ~xxx times smaller then bitcoin now (2016-01-11), set minRelayTxFee only 10 times higher so it&apos;s still 10 times lower comparing to bitcoin. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/main.cpp" line="50" column="1" bodyfile="/home/dev/ds-160209/src/main.cpp" bodystart="50" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="main_8cpp_1a52890038ef379d29a1a8f3bd20dbe088" prot="public" static="no" mutable="no">
        <type><ref refid="class_c_tx_mem_pool" kindref="compound">CTxMemPool</ref></type>
        <definition>CTxMemPool mempool(::minRelayTxFee)</definition>
        <argsstring>(::minRelayTxFee)</argsstring>
        <name>mempool</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/main.cpp" line="52" column="1"/>
      </memberdef>
      <memberdef kind="variable" id="main_8cpp_1a7ed5e264d5cdb0fdcf0fa6ae68ee4638" prot="public" static="no" mutable="no">
        <type>map&lt; <ref refid="classuint256" kindref="compound">uint256</ref>, <ref refid="class_c_block_index" kindref="compound">CBlockIndex</ref> * &gt;</type>
        <definition>map&lt;uint256, CBlockIndex*&gt; mapBlockIndex</definition>
        <argsstring></argsstring>
        <name>mapBlockIndex</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/main.cpp" line="59" column="1" bodyfile="/home/dev/ds-160209/src/main.cpp" bodystart="59" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="main_8cpp_1a76784ec097b3e97b81272c0858d623e4" prot="public" static="no" mutable="no">
        <type>set&lt; pair&lt; <ref refid="class_c_out_point" kindref="compound">COutPoint</ref>, unsigned int &gt; &gt;</type>
        <definition>set&lt;pair&lt;COutPoint, unsigned int&gt; &gt; setStakeSeen</definition>
        <argsstring></argsstring>
        <name>setStakeSeen</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/main.cpp" line="60" column="1" bodyfile="/home/dev/ds-160209/src/main.cpp" bodystart="60" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="main_8cpp_1a621f4f63be83358641eb78f48d2f49c2" prot="public" static="no" mutable="no">
        <type>unsigned int</type>
        <definition>unsigned int nStakeMinAge</definition>
        <argsstring></argsstring>
        <name>nStakeMinAge</name>
        <initializer>= 10 * 60</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/main.cpp" line="63" column="1" bodyfile="/home/dev/ds-160209/src/main.cpp" bodystart="63" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="main_8cpp_1a12388da9cd7b3a99208684bd4535f098" prot="public" static="no" mutable="no">
        <type>unsigned int</type>
        <definition>unsigned int nModifierInterval</definition>
        <argsstring></argsstring>
        <name>nModifierInterval</name>
        <initializer>= 10 * 60</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/main.cpp" line="64" column="1" bodyfile="/home/dev/ds-160209/src/main.cpp" bodystart="64" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="main_8cpp_1a6d3cd49df21f4264ed1489ea304dbcb8" prot="public" static="no" mutable="no">
        <type>int</type>
        <definition>int nStakeMinConfirmations</definition>
        <argsstring></argsstring>
        <name>nStakeMinConfirmations</name>
        <initializer>= 10</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/main.cpp" line="65" column="1" bodyfile="/home/dev/ds-160209/src/main.cpp" bodystart="65" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="main_8cpp_1adfd36b02172030cdbf7ac69c2ccb7711" prot="public" static="no" mutable="no">
        <type>int</type>
        <definition>int nCoinbaseMaturity</definition>
        <argsstring></argsstring>
        <name>nCoinbaseMaturity</name>
        <initializer>= 10</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/main.cpp" line="66" column="1" bodyfile="/home/dev/ds-160209/src/main.cpp" bodystart="66" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="main_8cpp_1a6b569217f0bbb0a69a42c8769df06a06" prot="public" static="no" mutable="no">
        <type>bool</type>
        <definition>bool fTxIndex</definition>
        <argsstring></argsstring>
        <name>fTxIndex</name>
        <initializer>= true</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/main.cpp" line="67" column="1" bodyfile="/home/dev/ds-160209/src/main.cpp" bodystart="67" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="main_8cpp_1a1e7c54b8b26730f52b5527163fc33d8f" prot="public" static="no" mutable="no">
        <type><ref refid="class_c_block_index" kindref="compound">CBlockIndex</ref> *</type>
        <definition>CBlockIndex* pindexGenesisBlock</definition>
        <argsstring></argsstring>
        <name>pindexGenesisBlock</name>
        <initializer>= NULL</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/main.cpp" line="69" column="1" bodyfile="/home/dev/ds-160209/src/main.cpp" bodystart="69" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="main_8cpp_1a843f1984796a7e44a9e23fccd6a8af34" prot="public" static="no" mutable="no">
        <type>int</type>
        <definition>int nBestHeight</definition>
        <argsstring></argsstring>
        <name>nBestHeight</name>
        <initializer>= -1</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/main.cpp" line="70" column="1" bodyfile="/home/dev/ds-160209/src/main.cpp" bodystart="70" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="main_8cpp_1a63af124faf22e03fd629e8aa21c40eae" prot="public" static="no" mutable="no">
        <type><ref refid="classuint256" kindref="compound">uint256</ref></type>
        <definition>uint256 nBestChainTrust</definition>
        <argsstring></argsstring>
        <name>nBestChainTrust</name>
        <initializer>= 0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/main.cpp" line="72" column="1" bodyfile="/home/dev/ds-160209/src/main.cpp" bodystart="72" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="main_8cpp_1a27c4c119ca2e7250221de8c17bee0999" prot="public" static="no" mutable="no">
        <type><ref refid="classuint256" kindref="compound">uint256</ref></type>
        <definition>uint256 nBestInvalidTrust</definition>
        <argsstring></argsstring>
        <name>nBestInvalidTrust</name>
        <initializer>= 0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/main.cpp" line="73" column="1" bodyfile="/home/dev/ds-160209/src/main.cpp" bodystart="73" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="main_8cpp_1ace9c3343567f488a96598abe61e1d309" prot="public" static="no" mutable="no">
        <type><ref refid="classuint256" kindref="compound">uint256</ref></type>
        <definition>uint256 hashBestChain</definition>
        <argsstring></argsstring>
        <name>hashBestChain</name>
        <initializer>= 0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/main.cpp" line="74" column="1" bodyfile="/home/dev/ds-160209/src/main.cpp" bodystart="74" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="main_8cpp_1a6454ad864029344132a0a0b59b1456ee" prot="public" static="no" mutable="no">
        <type><ref refid="class_c_block_index" kindref="compound">CBlockIndex</ref> *</type>
        <definition>CBlockIndex* pindexBest</definition>
        <argsstring></argsstring>
        <name>pindexBest</name>
        <initializer>= NULL</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/main.cpp" line="76" column="1" bodyfile="/home/dev/ds-160209/src/main.cpp" bodystart="76" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="main_8cpp_1ab319f7e88eb0d2d3b9f9f98bea0f9896" prot="public" static="no" mutable="no">
        <type><ref refid="stdint_8h_1adec1df1b8b51cb32b77e5b86fff46471" kindref="member">int64_t</ref></type>
        <definition>int64_t nTimeBestReceived</definition>
        <argsstring></argsstring>
        <name>nTimeBestReceived</name>
        <initializer>= 0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/main.cpp" line="78" column="1" bodyfile="/home/dev/ds-160209/src/main.cpp" bodystart="78" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="main_8cpp_1aaf87d0dd26c4a7c9bcc5bdd1127e8637" prot="public" static="no" mutable="no">
        <type>bool</type>
        <definition>bool fImporting</definition>
        <argsstring></argsstring>
        <name>fImporting</name>
        <initializer>= false</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/main.cpp" line="79" column="1" bodyfile="/home/dev/ds-160209/src/main.cpp" bodystart="79" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="main_8cpp_1a8e0eca589b2d4254a65f04c5d91888b2" prot="public" static="no" mutable="no">
        <type>bool</type>
        <definition>bool fReindex</definition>
        <argsstring></argsstring>
        <name>fReindex</name>
        <initializer>= false</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/main.cpp" line="80" column="1" bodyfile="/home/dev/ds-160209/src/main.cpp" bodystart="80" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="main_8cpp_1a5bdc5c4ff8a9f6c578119f45d5f11d0a" prot="public" static="no" mutable="no">
        <type>bool</type>
        <definition>bool fAddrIndex</definition>
        <argsstring></argsstring>
        <name>fAddrIndex</name>
        <initializer>= false</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/main.cpp" line="81" column="1" bodyfile="/home/dev/ds-160209/src/main.cpp" bodystart="81" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="main_8cpp_1afc20f7cf1e330e0fd10b3933b99198f0" prot="public" static="no" mutable="no">
        <type>map&lt; <ref refid="classuint256" kindref="compound">uint256</ref>, <ref refid="struct_c_orphan_block" kindref="compound">COrphanBlock</ref> * &gt;</type>
        <definition>map&lt;uint256, COrphanBlock*&gt; mapOrphanBlocks</definition>
        <argsstring></argsstring>
        <name>mapOrphanBlocks</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/main.cpp" line="89" column="1" bodyfile="/home/dev/ds-160209/src/main.cpp" bodystart="89" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="main_8cpp_1a575f2c624ccabf284fef4eea4ea1b1d1" prot="public" static="no" mutable="no">
        <type>multimap&lt; <ref refid="classuint256" kindref="compound">uint256</ref>, <ref refid="struct_c_orphan_block" kindref="compound">COrphanBlock</ref> * &gt;</type>
        <definition>multimap&lt;uint256, COrphanBlock*&gt; mapOrphanBlocksByPrev</definition>
        <argsstring></argsstring>
        <name>mapOrphanBlocksByPrev</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/main.cpp" line="90" column="1" bodyfile="/home/dev/ds-160209/src/main.cpp" bodystart="90" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="main_8cpp_1a9a09c929498a064bc56604b9817ad35f" prot="public" static="no" mutable="no">
        <type>set&lt; pair&lt; <ref refid="class_c_out_point" kindref="compound">COutPoint</ref>, unsigned int &gt; &gt;</type>
        <definition>set&lt;pair&lt;COutPoint, unsigned int&gt; &gt; setStakeSeenOrphan</definition>
        <argsstring></argsstring>
        <name>setStakeSeenOrphan</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/main.cpp" line="91" column="1" bodyfile="/home/dev/ds-160209/src/main.cpp" bodystart="91" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="main_8cpp_1a37955afb188aad4474af2032c6b24fb4" prot="public" static="no" mutable="no">
        <type>size_t</type>
        <definition>size_t nOrphanBlocksSize</definition>
        <argsstring></argsstring>
        <name>nOrphanBlocksSize</name>
        <initializer>= 0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/main.cpp" line="92" column="1" bodyfile="/home/dev/ds-160209/src/main.cpp" bodystart="92" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="main_8cpp_1ad662f0544986af5d1764cc26dc14a74d" prot="public" static="no" mutable="no">
        <type>map&lt; <ref refid="classuint256" kindref="compound">uint256</ref>, <ref refid="stdint_8h_1adec1df1b8b51cb32b77e5b86fff46471" kindref="member">int64_t</ref> &gt;</type>
        <definition>map&lt;uint256, int64_t&gt; mapRejectedBlocks</definition>
        <argsstring></argsstring>
        <name>mapRejectedBlocks</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/main.cpp" line="93" column="1" bodyfile="/home/dev/ds-160209/src/main.cpp" bodystart="93" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="main_8cpp_1abdc619262947970f81a86187a7784295" prot="public" static="no" mutable="no">
        <type>map&lt; <ref refid="classuint256" kindref="compound">uint256</ref>, <ref refid="struct_c_orphan_tx" kindref="compound">COrphanTx</ref> &gt;</type>
        <definition>map&lt;uint256, COrphanTx&gt; mapOrphanTransactions</definition>
        <argsstring></argsstring>
        <name>mapOrphanTransactions</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/main.cpp" line="95" column="1" bodyfile="/home/dev/ds-160209/src/main.cpp" bodystart="95" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="main_8cpp_1a0b9c46f971fc8724dd138ecc68d5d6c6" prot="public" static="no" mutable="no">
        <type>map&lt; <ref refid="classuint256" kindref="compound">uint256</ref>, set&lt; <ref refid="classuint256" kindref="compound">uint256</ref> &gt; &gt;</type>
        <definition>map&lt;uint256, set&lt;uint256&gt; &gt; mapOrphanTransactionsByPrev</definition>
        <argsstring></argsstring>
        <name>mapOrphanTransactionsByPrev</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/main.cpp" line="97" column="1" bodyfile="/home/dev/ds-160209/src/main.cpp" bodystart="97" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="main_8cpp_1a5ed86cbbedb72d8fcec0524f2792ada8" prot="public" static="no" mutable="no">
        <type><ref refid="class_c_script" kindref="compound">CScript</ref></type>
        <definition>CScript COINBASE_FLAGS</definition>
        <argsstring></argsstring>
        <name>COINBASE_FLAGS</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/main.cpp" line="104" column="1" bodyfile="/home/dev/ds-160209/src/main.cpp" bodystart="104" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="main_8cpp_1a1cad9567b6474e6096232b14ed6a8476" prot="public" static="no" mutable="no">
        <type>const string</type>
        <definition>const string strMessageMagic</definition>
        <argsstring></argsstring>
        <name>strMessageMagic</name>
        <initializer>= &quot;DarkSilk Signed Message:\n&quot;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/main.cpp" line="106" column="1" bodyfile="/home/dev/ds-160209/src/main.cpp" bodystart="106" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="main_8cpp_1a6a0e4a246c8fe554b594e4cabcde5fb7" prot="public" static="no" mutable="no">
        <type>std::set&lt; <ref refid="classuint256" kindref="compound">uint256</ref> &gt;</type>
        <definition>std::set&lt;uint256&gt; setValidatedTx</definition>
        <argsstring></argsstring>
        <name>setValidatedTx</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/main.cpp" line="108" column="1" bodyfile="/home/dev/ds-160209/src/main.cpp" bodystart="108" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="main_8cpp_1a1821834b8f7837b469f7f91a14c20042" prot="public" static="no" mutable="no">
        <type><ref refid="class_c_coins_view_cache" kindref="compound">CCoinsViewCache</ref> *</type>
        <definition>CCoinsViewCache* pcoinsTip</definition>
        <argsstring></argsstring>
        <name>pcoinsTip</name>
        <initializer>= NULL</initializer>
        <briefdescription>
<para>Global variable that points to the active <ref refid="class_c_coins_view" kindref="compound">CCoinsView</ref> (protected by cs_main) </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/main.cpp" line="110" column="1" bodyfile="/home/dev/ds-160209/src/main.cpp" bodystart="110" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="main_8cpp_1a0023503503c358eda0c97a576ef53fde" prot="public" static="no" mutable="no">
        <type><ref refid="class_c_block_tree_d_b" kindref="compound">CBlockTreeDB</ref> *</type>
        <definition>CBlockTreeDB* pblocktree</definition>
        <argsstring></argsstring>
        <name>pblocktree</name>
        <initializer>= NULL</initializer>
        <briefdescription>
<para>Global variable that points to the active block tree (protected by cs_main) </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/main.cpp" line="111" column="1" bodyfile="/home/dev/ds-160209/src/main.cpp" bodystart="111" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="main_8cpp_1a08b980f03b2fb15445e0ddc8bb4b3d73" prot="public" static="no" mutable="no">
        <type>unsigned int</type>
        <definition>unsigned int nCoinCacheSize</definition>
        <argsstring></argsstring>
        <name>nCoinCacheSize</name>
        <initializer>= 5000</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/main.cpp" line="113" column="1" bodyfile="/home/dev/ds-160209/src/main.cpp" bodystart="113" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="main_8cpp_1af7db2cd8ebf71b9cebc5fdddbc28f8dd" prot="public" static="no" mutable="no">
        <type>map&lt; <ref refid="classuint256" kindref="compound">uint256</ref>, <ref refid="class_c_alert" kindref="compound">CAlert</ref> &gt;</type>
        <definition>map&lt;uint256, CAlert&gt; mapAlerts</definition>
        <argsstring></argsstring>
        <name>mapAlerts</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/main.cpp" line="2324" column="1" bodyfile="/home/dev/ds-160209/src/alert.cpp" bodystart="24" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="main_8cpp_1a1d336334e6e9fb3e9e0ed1e0ea5688e9" prot="public" static="no" mutable="no">
        <type><ref refid="sync_8h_1a37a4692b2d517f2843655ca11af7668a" kindref="member">CCriticalSection</ref></type>
        <definition>CCriticalSection cs_mapAlerts</definition>
        <argsstring></argsstring>
        <name>cs_mapAlerts</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/main.cpp" line="2325" column="1" bodyfile="/home/dev/ds-160209/src/alert.cpp" bodystart="25" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="main_8cpp_1a4a2fcba1719100c7e9a0caf97f6988f4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void EraseOrphansFor</definition>
        <argsstring>(NodeId peer)</argsstring>
        <name>EraseOrphansFor</name>
        <param>
          <type><ref refid="net_8h_1a954d746a58632565552615fd0a4ee660" kindref="member">NodeId</ref></type>
          <declname>peer</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/main.cpp" line="100" column="1"/>
      </memberdef>
      <memberdef kind="function" id="main_8cpp_1ae2b074d356b5254b641f1f0b2299e845" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void EraseOrphanTx</definition>
        <argsstring>(uint256 hash)</argsstring>
        <name>EraseOrphanTx</name>
        <param>
          <type><ref refid="classuint256" kindref="compound">uint256</ref></type>
          <declname>hash</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/main.cpp" line="101" column="1" bodyfile="/home/dev/ds-160209/src/main.cpp" bodystart="531" bodyend="546"/>
      </memberdef>
      <memberdef kind="function" id="main_8cpp_1aa6b7f220759fb53f10c65654bbf61317" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void RegisterWallet</definition>
        <argsstring>(CWalletInterface *pwalletIn)</argsstring>
        <name>RegisterWallet</name>
        <param>
          <type><ref refid="class_c_wallet_interface" kindref="compound">CWalletInterface</ref> *</type>
          <declname>pwalletIn</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Register a wallet to receive updates from core </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/main.cpp" line="223" column="1" bodyfile="/home/dev/ds-160209/src/main.cpp" bodystart="223" bodyend="230"/>
      </memberdef>
      <memberdef kind="function" id="main_8cpp_1aa60561b6923955deeaad6fdab74a3aee" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void UnregisterWallet</definition>
        <argsstring>(CWalletInterface *pwalletIn)</argsstring>
        <name>UnregisterWallet</name>
        <param>
          <type><ref refid="class_c_wallet_interface" kindref="compound">CWalletInterface</ref> *</type>
          <declname>pwalletIn</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Unregister a wallet from core </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/main.cpp" line="232" column="1" bodyfile="/home/dev/ds-160209/src/main.cpp" bodystart="232" bodyend="239"/>
      </memberdef>
      <memberdef kind="function" id="main_8cpp_1ad0b02f9e3ff8997319581ce5021d4244" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void UnregisterAllWallets</definition>
        <argsstring>()</argsstring>
        <name>UnregisterAllWallets</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Unregister all wallets from core </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/main.cpp" line="241" column="1" bodyfile="/home/dev/ds-160209/src/main.cpp" bodystart="241" bodyend="248"/>
      </memberdef>
      <memberdef kind="function" id="main_8cpp_1ac79dd0809b8f21bd8d861dfcfc4a7fb3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void SyncWithWallets</definition>
        <argsstring>(const CTransaction &amp;tx, const CBlock *pblock, bool fConnect)</argsstring>
        <name>SyncWithWallets</name>
        <param>
          <type>const <ref refid="class_c_transaction" kindref="compound">CTransaction</ref> &amp;</type>
          <declname>tx</declname>
        </param>
        <param>
          <type>const <ref refid="class_c_block" kindref="compound">CBlock</ref> *</type>
          <declname>pblock</declname>
          <defval>NULL</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>fConnect</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Push an updated transaction to all registered wallets </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/main.cpp" line="250" column="1" bodyfile="/home/dev/ds-160209/src/main.cpp" bodystart="250" bodyend="252"/>
      </memberdef>
      <memberdef kind="function" id="main_8cpp_1ac15123f662a13528a4ef95ddbd952bee" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ResendWalletTransactions</definition>
        <argsstring>(bool fForce)</argsstring>
        <name>ResendWalletTransactions</name>
        <param>
          <type>bool</type>
          <declname>fForce</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Ask wallets to resend their transactions </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/main.cpp" line="254" column="1" bodyfile="/home/dev/ds-160209/src/main.cpp" bodystart="254" bodyend="256"/>
      </memberdef>
      <memberdef kind="function" id="main_8cpp_1af0793c7c14e94d2d642f4ac89067a429" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool GetNodeStateStats</definition>
        <argsstring>(NodeId nodeid, CNodeStateStats &amp;stats)</argsstring>
        <name>GetNodeStateStats</name>
        <param>
          <type><ref refid="net_8h_1a954d746a58632565552615fd0a4ee660" kindref="member">NodeId</ref></type>
          <declname>nodeid</declname>
        </param>
        <param>
          <type><ref refid="struct_c_node_state_stats" kindref="compound">CNodeStateStats</ref> &amp;</type>
          <declname>stats</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get statistics from node state </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/main.cpp" line="445" column="1" bodyfile="/home/dev/ds-160209/src/main.cpp" bodystart="445" bodyend="458"/>
      </memberdef>
      <memberdef kind="function" id="main_8cpp_1ab02615ff65f91d69f8d786ec900baa8a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void RegisterNodeSignals</definition>
        <argsstring>(CNodeSignals &amp;nodeSignals)</argsstring>
        <name>RegisterNodeSignals</name>
        <param>
          <type><ref refid="struct_c_node_signals" kindref="compound">CNodeSignals</ref> &amp;</type>
          <declname>nodeSignals</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Register with a network node to receive its signals </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/main.cpp" line="460" column="1" bodyfile="/home/dev/ds-160209/src/main.cpp" bodystart="460" bodyend="467"/>
      </memberdef>
      <memberdef kind="function" id="main_8cpp_1a3ef0cc6e9d9d6435ee2a5569244d6ebd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void UnregisterNodeSignals</definition>
        <argsstring>(CNodeSignals &amp;nodeSignals)</argsstring>
        <name>UnregisterNodeSignals</name>
        <param>
          <type><ref refid="struct_c_node_signals" kindref="compound">CNodeSignals</ref> &amp;</type>
          <declname>nodeSignals</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Unregister a network node </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/main.cpp" line="469" column="1" bodyfile="/home/dev/ds-160209/src/main.cpp" bodystart="469" bodyend="476"/>
      </memberdef>
      <memberdef kind="function" id="main_8cpp_1a183c4f45aed59599d1875a80d0cf58ca" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool AbortNode</definition>
        <argsstring>(const std::string &amp;strMessage, const std::string &amp;userMessage)</argsstring>
        <name>AbortNode</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>strMessage</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>userMessage</declname>
        </param>
        <briefdescription>
<para>Abort with a message. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/main.cpp" line="478" column="1" bodyfile="/home/dev/ds-160209/src/main.cpp" bodystart="478" bodyend="486"/>
      </memberdef>
      <memberdef kind="function" id="main_8cpp_1a13555a2da794ce558ee767ce6632c02b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int GetHeight</definition>
        <argsstring>()</argsstring>
        <name>GetHeight</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/main.cpp" line="488" column="1" bodyfile="/home/dev/ds-160209/src/main.cpp" bodystart="488" bodyend="495"/>
      </memberdef>
      <memberdef kind="function" id="main_8cpp_1aabd8ff89de652a080953f7cc6eccc979" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool AddOrphanTx</definition>
        <argsstring>(const CTransaction &amp;tx, NodeId peer)</argsstring>
        <name>AddOrphanTx</name>
        <param>
          <type>const <ref refid="class_c_transaction" kindref="compound">CTransaction</ref> &amp;</type>
          <declname>tx</declname>
        </param>
        <param>
          <type><ref refid="net_8h_1a954d746a58632565552615fd0a4ee660" kindref="member">NodeId</ref></type>
          <declname>peer</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/main.cpp" line="501" column="1" bodyfile="/home/dev/ds-160209/src/main.cpp" bodystart="501" bodyend="529"/>
      </memberdef>
      <memberdef kind="function" id="main_8cpp_1a03c1ac9fc43feb8f1d67e92f17cceb38" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>unsigned int</type>
        <definition>unsigned int LimitOrphanTxSize</definition>
        <argsstring>(unsigned int nMaxOrphans)</argsstring>
        <name>LimitOrphanTxSize</name>
        <param>
          <type>unsigned int</type>
          <declname>nMaxOrphans</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/main.cpp" line="548" column="1" bodyfile="/home/dev/ds-160209/src/main.cpp" bodystart="548" bodyend="562"/>
      </memberdef>
      <memberdef kind="function" id="main_8cpp_1acd163a09d0e4384ebe85dead57730dd7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool IsStandardTx</definition>
        <argsstring>(const CTransaction &amp;tx, string &amp;reason)</argsstring>
        <name>IsStandardTx</name>
        <param>
          <type>const <ref refid="class_c_transaction" kindref="compound">CTransaction</ref> &amp;</type>
          <declname>tx</declname>
        </param>
        <param>
          <type>string &amp;</type>
          <declname>reason</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/main.cpp" line="569" column="1" bodyfile="/home/dev/ds-160209/src/main.cpp" bodystart="569" bodyend="663"/>
      </memberdef>
      <memberdef kind="function" id="main_8cpp_1adc332cd7ac94e639bb4239618341be19" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool IsFinalTx</definition>
        <argsstring>(const CTransaction &amp;tx, int nBlockHeight, int64_t nBlockTime)</argsstring>
        <name>IsFinalTx</name>
        <param>
          <type>const <ref refid="class_c_transaction" kindref="compound">CTransaction</ref> &amp;</type>
          <declname>tx</declname>
        </param>
        <param>
          <type>int</type>
          <declname>nBlockHeight</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1adec1df1b8b51cb32b77e5b86fff46471" kindref="member">int64_t</ref></type>
          <declname>nBlockTime</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/main.cpp" line="665" column="1" bodyfile="/home/dev/ds-160209/src/main.cpp" bodystart="665" bodyend="681"/>
      </memberdef>
      <memberdef kind="function" id="main_8cpp_1a29901e539b487e09c90ff90c7560bd9d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool AreInputsStandard</definition>
        <argsstring>(const CTransaction &amp;tx, const MapPrevTx &amp;mapInputs)</argsstring>
        <name>AreInputsStandard</name>
        <param>
          <type>const <ref refid="class_c_transaction" kindref="compound">CTransaction</ref> &amp;</type>
          <declname>tx</declname>
        </param>
        <param>
          <type>const <ref refid="main_8h_1a05bae354566c88f7dca5ad13aaf8b30f" kindref="member">MapPrevTx</ref> &amp;</type>
          <declname>mapInputs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Check for standard transaction types <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">mapInputs</parametername>
</parameternamelist>
<parameterdescription>
<para>Map of previous transactions that have outputs we&apos;re spending </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>True if all inputs (scriptSigs) use only standard transaction forms </para></simplesect>
<simplesect kind="see"><para>CTransaction::FetchInputs </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/main.cpp" line="692" column="1" bodyfile="/home/dev/ds-160209/src/main.cpp" bodystart="692" bodyend="754"/>
      </memberdef>
      <memberdef kind="function" id="main_8cpp_1ad2eaf4f8542c12ea9ee1183609cc6d1a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>unsigned int</type>
        <definition>unsigned int GetLegacySigOpCount</definition>
        <argsstring>(const CTransaction &amp;tx)</argsstring>
        <name>GetLegacySigOpCount</name>
        <param>
          <type>const <ref refid="class_c_transaction" kindref="compound">CTransaction</ref> &amp;</type>
          <declname>tx</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Count ECDSA signature operations the old-fashioned (pre-0.6) way <simplesect kind="return"><para>number of sigops this transaction&apos;s outputs will produce when spent </para></simplesect>
<simplesect kind="see"><para>CTransaction::FetchInputs </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/main.cpp" line="756" column="1" bodyfile="/home/dev/ds-160209/src/main.cpp" bodystart="756" bodyend="768"/>
      </memberdef>
      <memberdef kind="function" id="main_8cpp_1a519cfd439598a8bf64fe5503aa74cfcb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>unsigned int</type>
        <definition>unsigned int GetP2SHSigOpCount</definition>
        <argsstring>(const CTransaction &amp;tx, const MapPrevTx &amp;inputs)</argsstring>
        <name>GetP2SHSigOpCount</name>
        <param>
          <type>const <ref refid="class_c_transaction" kindref="compound">CTransaction</ref> &amp;</type>
          <declname>tx</declname>
        </param>
        <param>
          <type>const <ref refid="main_8h_1a05bae354566c88f7dca5ad13aaf8b30f" kindref="member">MapPrevTx</ref> &amp;</type>
          <declname>mapInputs</declname>
          <defname>inputs</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Count ECDSA signature operations in pay-to-script-hash inputs.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">mapInputs</parametername>
</parameternamelist>
<parameterdescription>
<para>Map of previous transactions that have outputs we&apos;re spending </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>maximum number of sigops required to validate this transaction&apos;s inputs </para></simplesect>
<simplesect kind="see"><para>CTransaction::FetchInputs </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/main.cpp" line="770" column="1" bodyfile="/home/dev/ds-160209/src/main.cpp" bodystart="770" bodyend="784"/>
      </memberdef>
      <memberdef kind="function" id="main_8cpp_1a67d4c24facb2a0d89f92065581c486df" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="amount_8h_1a4eaf3a5239714d8c45b851527f7cb564" kindref="member">CAmount</ref></type>
        <definition>CAmount GetMinFee</definition>
        <argsstring>(const CTransaction &amp;tx, unsigned int nBytes, bool fAllowFree, enum GetMinFee_mode mode)</argsstring>
        <name>GetMinFee</name>
        <param>
          <type>const <ref refid="class_c_transaction" kindref="compound">CTransaction</ref> &amp;</type>
          <declname>tx</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>nBytes</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>fAllowFree</declname>
        </param>
        <param>
          <type>enum <ref refid="main_8h_1a8c24d39fc07a60d3c019618a73cc15a7" kindref="member">GetMinFee_mode</ref></type>
          <declname>mode</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/main.cpp" line="831" column="1" bodyfile="/home/dev/ds-160209/src/main.cpp" bodystart="831" bodyend="863"/>
      </memberdef>
      <memberdef kind="function" id="main_8cpp_1ad73f7fbd48c12a894b914e6a51940c64" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool AcceptToMemoryPool</definition>
        <argsstring>(CTxMemPool &amp;pool, CValidationState &amp;state, CTransaction &amp;tx, bool fLimitFree, bool *pfMissingInputs, bool ignoreFees)</argsstring>
        <name>AcceptToMemoryPool</name>
        <param>
          <type><ref refid="class_c_tx_mem_pool" kindref="compound">CTxMemPool</ref> &amp;</type>
          <declname>pool</declname>
        </param>
        <param>
          <type><ref refid="class_c_validation_state" kindref="compound">CValidationState</ref> &amp;</type>
          <declname>state</declname>
        </param>
        <param>
          <type><ref refid="class_c_transaction" kindref="compound">CTransaction</ref> &amp;</type>
          <declname>tx</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>fLimitFree</declname>
        </param>
        <param>
          <type>bool *</type>
          <declname>pfMissingInputs</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>ignoreFees</declname>
        </param>
        <briefdescription>
<para>(try to) add transaction to memory pool </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/main.cpp" line="865" column="1" bodyfile="/home/dev/ds-160209/src/main.cpp" bodystart="865" bodyend="1023"/>
      </memberdef>
      <memberdef kind="function" id="main_8cpp_1af0be4f98088716bf40c79db7734b1d01" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool AcceptableInputs</definition>
        <argsstring>(CTxMemPool &amp;pool, CValidationState &amp;state, CTransaction &amp;tx, bool fLimitFree, bool *pfMissingInputs, bool fRejectInsaneFee, bool isSSTX)</argsstring>
        <name>AcceptableInputs</name>
        <param>
          <type><ref refid="class_c_tx_mem_pool" kindref="compound">CTxMemPool</ref> &amp;</type>
          <declname>pool</declname>
        </param>
        <param>
          <type><ref refid="class_c_validation_state" kindref="compound">CValidationState</ref> &amp;</type>
          <declname>state</declname>
        </param>
        <param>
          <type><ref refid="class_c_transaction" kindref="compound">CTransaction</ref> &amp;</type>
          <declname>tx</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>fLimitFree</declname>
        </param>
        <param>
          <type>bool *</type>
          <declname>pfMissingInputs</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>fRejectInsaneFee</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>isSSTX</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/main.cpp" line="1230" column="1" bodyfile="/home/dev/ds-160209/src/main.cpp" bodystart="1230" bodyend="1375"/>
      </memberdef>
      <memberdef kind="function" id="main_8cpp_1ae137d76bbcaf8d65fab905889b504e26" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int GetInputAge</definition>
        <argsstring>(CTxIn &amp;vin)</argsstring>
        <name>GetInputAge</name>
        <param>
          <type><ref refid="class_c_tx_in" kindref="compound">CTxIn</ref> &amp;</type>
          <declname>vin</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/main.cpp" line="1487" column="1" bodyfile="/home/dev/ds-160209/src/main.cpp" bodystart="1487" bodyend="1504"/>
      </memberdef>
      <memberdef kind="function" id="main_8cpp_1a5c7b9ac7929375148311307df7e446d0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int GetInputAgeIX</definition>
        <argsstring>(uint256 nTXHash, CTxIn &amp;vin)</argsstring>
        <name>GetInputAgeIX</name>
        <param>
          <type><ref refid="classuint256" kindref="compound">uint256</ref></type>
          <declname>nTXHash</declname>
        </param>
        <param>
          <type><ref refid="class_c_tx_in" kindref="compound">CTxIn</ref> &amp;</type>
          <declname>vin</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/main.cpp" line="1506" column="1" bodyfile="/home/dev/ds-160209/src/main.cpp" bodystart="1506" bodyend="1523"/>
      </memberdef>
      <memberdef kind="function" id="main_8cpp_1afb9aef5806c13c7a81fda9854f852155" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int GetIXConfirmations</definition>
        <argsstring>(uint256 nTXHash)</argsstring>
        <name>GetIXConfirmations</name>
        <param>
          <type><ref refid="classuint256" kindref="compound">uint256</ref></type>
          <declname>nTXHash</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/main.cpp" line="1525" column="1" bodyfile="/home/dev/ds-160209/src/main.cpp" bodystart="1525" bodyend="1538"/>
      </memberdef>
      <memberdef kind="function" id="main_8cpp_1a7d2a4633e4e0e8e4cb9c881d45a496b5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool GetTransaction</definition>
        <argsstring>(const uint256 &amp;hash, CTransaction &amp;tx, uint256 &amp;hashBlock)</argsstring>
        <name>GetTransaction</name>
        <param>
          <type>const <ref refid="classuint256" kindref="compound">uint256</ref> &amp;</type>
          <declname>hash</declname>
        </param>
        <param>
          <type><ref refid="class_c_transaction" kindref="compound">CTransaction</ref> &amp;</type>
          <declname>tx</declname>
        </param>
        <param>
          <type><ref refid="classuint256" kindref="compound">uint256</ref> &amp;</type>
          <declname>hashBlock</declname>
        </param>
        <briefdescription>
<para>Return transaction in tx, and if it was found inside a block, its hash is placed in hashBlock. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/main.cpp" line="1557" column="1" bodyfile="/home/dev/ds-160209/src/main.cpp" bodystart="1557" bodyend="1597"/>
      </memberdef>
      <memberdef kind="function" id="main_8cpp_1a22512fc092ced0775ecfc7b2d378ea7f" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classuint256" kindref="compound">uint256</ref></type>
        <definition>static uint256 GetOrphanRoot</definition>
        <argsstring>(const uint256 &amp;hash)</argsstring>
        <name>GetOrphanRoot</name>
        <param>
          <type>const <ref refid="classuint256" kindref="compound">uint256</ref> &amp;</type>
          <declname>hash</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/main.cpp" line="1604" column="1" bodyfile="/home/dev/ds-160209/src/main.cpp" bodystart="1604" bodyend="1617"/>
      </memberdef>
      <memberdef kind="function" id="main_8cpp_1abdef12ddcc1e6b127c59fab552a9b81b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classuint256" kindref="compound">uint256</ref></type>
        <definition>uint256 WantedByOrphan</definition>
        <argsstring>(const COrphanBlock *pblockOrphan)</argsstring>
        <name>WantedByOrphan</name>
        <param>
          <type>const <ref refid="struct_c_orphan_block" kindref="compound">COrphanBlock</ref> *</type>
          <declname>pblockOrphan</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/main.cpp" line="1620" column="1" bodyfile="/home/dev/ds-160209/src/main.cpp" bodystart="1620" bodyend="1626"/>
      </memberdef>
      <memberdef kind="function" id="main_8cpp_1abcfc328daa14f00e1899caf0dab36ba7" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void PruneOrphanBlocks</definition>
        <argsstring>()</argsstring>
        <name>PruneOrphanBlocks</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/main.cpp" line="1629" column="1" bodyfile="/home/dev/ds-160209/src/main.cpp" bodystart="1629" bodyend="1654"/>
      </memberdef>
      <memberdef kind="function" id="main_8cpp_1a742cec8319a5bfbe61a8401d24f4d28e" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_c_big_num" kindref="compound">CBigNum</ref></type>
        <definition>static CBigNum GetProofOfStakeLimit</definition>
        <argsstring>(int nHeight)</argsstring>
        <name>GetProofOfStakeLimit</name>
        <param>
          <type>int</type>
          <declname>nHeight</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/main.cpp" line="1656" column="1" bodyfile="/home/dev/ds-160209/src/main.cpp" bodystart="1656" bodyend="1659"/>
      </memberdef>
      <memberdef kind="function" id="main_8cpp_1a54eeb686375f66683fb139de496c088d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="amount_8h_1a4eaf3a5239714d8c45b851527f7cb564" kindref="member">CAmount</ref></type>
        <definition>CAmount GetProofOfWorkReward</definition>
        <argsstring>(CAmount nFees)</argsstring>
        <name>GetProofOfWorkReward</name>
        <param>
          <type><ref refid="amount_8h_1a4eaf3a5239714d8c45b851527f7cb564" kindref="member">CAmount</ref></type>
          <declname>nFees</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/main.cpp" line="1662" column="1" bodyfile="/home/dev/ds-160209/src/main.cpp" bodystart="1662" bodyend="1675"/>
      </memberdef>
      <memberdef kind="function" id="main_8cpp_1a67a2382a391340c12c45961f3b8c66e8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="class_c_block_index" kindref="compound">CBlockIndex</ref> *</type>
        <definition>const CBlockIndex* GetLastBlockIndex</definition>
        <argsstring>(const CBlockIndex *pindex, bool fProofOfStake)</argsstring>
        <name>GetLastBlockIndex</name>
        <param>
          <type>const <ref refid="class_c_block_index" kindref="compound">CBlockIndex</ref> *</type>
          <declname>pindex</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>fProofOfStake</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/main.cpp" line="1678" column="1" bodyfile="/home/dev/ds-160209/src/main.cpp" bodystart="1678" bodyend="1683"/>
      </memberdef>
      <memberdef kind="function" id="main_8cpp_1a868a58404bd61b6a82901f428d152bae" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>unsigned int</type>
        <definition>unsigned int GetNextTargetRequired</definition>
        <argsstring>(const CBlockIndex *pindexLast, bool fProofOfStake)</argsstring>
        <name>GetNextTargetRequired</name>
        <param>
          <type>const <ref refid="class_c_block_index" kindref="compound">CBlockIndex</ref> *</type>
          <declname>pindexLast</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>fProofOfStake</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/main.cpp" line="1685" column="1" bodyfile="/home/dev/ds-160209/src/main.cpp" bodystart="1685" bodyend="1723"/>
      </memberdef>
      <memberdef kind="function" id="main_8cpp_1afe042769eafbfbf4e82dffe357798748" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="amount_8h_1a4eaf3a5239714d8c45b851527f7cb564" kindref="member">CAmount</ref></type>
        <definition>CAmount GetBlockValue</definition>
        <argsstring>(int nBits, int nHeight, const CAmount &amp;nFees)</argsstring>
        <name>GetBlockValue</name>
        <param>
          <type>int</type>
          <declname>nBits</declname>
        </param>
        <param>
          <type>int</type>
          <declname>nHeight</declname>
        </param>
        <param>
          <type>const <ref refid="amount_8h_1a4eaf3a5239714d8c45b851527f7cb564" kindref="member">CAmount</ref> &amp;</type>
          <declname>nFees</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/main.cpp" line="1725" column="1" bodyfile="/home/dev/ds-160209/src/main.cpp" bodystart="1725" bodyend="1730"/>
      </memberdef>
      <memberdef kind="function" id="main_8cpp_1ab9c19a2d094fea9bd9f285f4b33961a4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="amount_8h_1a4eaf3a5239714d8c45b851527f7cb564" kindref="member">CAmount</ref></type>
        <definition>CAmount GetStormnodePayment</definition>
        <argsstring>(int nHeight, CAmount blockValue)</argsstring>
        <name>GetStormnodePayment</name>
        <param>
          <type>int</type>
          <declname>nHeight</declname>
        </param>
        <param>
          <type><ref refid="amount_8h_1a4eaf3a5239714d8c45b851527f7cb564" kindref="member">CAmount</ref></type>
          <declname>blockValue</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/main.cpp" line="1733" column="1" bodyfile="/home/dev/ds-160209/src/main.cpp" bodystart="1733" bodyend="1738"/>
      </memberdef>
      <memberdef kind="function" id="main_8cpp_1a387fdffa0ff52dde6b7d1c2991a9bdac" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Misbehaving</definition>
        <argsstring>(NodeId pnode, int howmuch)</argsstring>
        <name>Misbehaving</name>
        <param>
          <type><ref refid="net_8h_1a954d746a58632565552615fd0a4ee660" kindref="member">NodeId</ref></type>
          <declname>pnode</declname>
        </param>
        <param>
          <type>int</type>
          <declname>howmuch</declname>
        </param>
        <briefdescription>
<para>Increase a node&apos;s misbehavior score. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/main.cpp" line="1741" column="1" bodyfile="/home/dev/ds-160209/src/main.cpp" bodystart="1741" bodyend="1764"/>
      </memberdef>
      <memberdef kind="function" id="main_8cpp_1a22e712bbf635a69ba8dd7ae004d2697b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool IsConfirmedInNPrevBlocks</definition>
        <argsstring>(const CTxIndex &amp;txindex, const CBlockIndex *pindexFrom, int nMaxDepth, int &amp;nActualDepth)</argsstring>
        <name>IsConfirmedInNPrevBlocks</name>
        <param>
          <type>const <ref refid="class_c_tx_index" kindref="compound">CTxIndex</ref> &amp;</type>
          <declname>txindex</declname>
        </param>
        <param>
          <type>const <ref refid="class_c_block_index" kindref="compound">CBlockIndex</ref> *</type>
          <declname>pindexFrom</declname>
        </param>
        <param>
          <type>int</type>
          <declname>nMaxDepth</declname>
        </param>
        <param>
          <type>int &amp;</type>
          <declname>nActualDepth</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/main.cpp" line="1766" column="1" bodyfile="/home/dev/ds-160209/src/main.cpp" bodystart="1766" bodyend="1777"/>
      </memberdef>
      <memberdef kind="function" id="main_8cpp_1af2b1f603b58c5364716253a0711f0e91" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool DisconnectBlocksAndReprocess</definition>
        <argsstring>(int blocks)</argsstring>
        <name>DisconnectBlocksAndReprocess</name>
        <param>
          <type>int</type>
          <declname>blocks</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/main.cpp" line="1779" column="1" bodyfile="/home/dev/ds-160209/src/main.cpp" bodystart="1779" bodyend="1790"/>
      </memberdef>
      <memberdef kind="function" id="main_8cpp_1aca9eb09c80679cf7c85926f83c353075" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool FindTransactionsByDestination</definition>
        <argsstring>(const CTxDestination &amp;dest, std::vector&lt; uint256 &gt; &amp;vtxhash)</argsstring>
        <name>FindTransactionsByDestination</name>
        <param>
          <type>const <ref refid="keystore_8h_1a8f46ecba0ddeb036be6b58d6ed1909cd" kindref="member">CTxDestination</ref> &amp;</type>
          <declname>dest</declname>
        </param>
        <param>
          <type>std::vector&lt; <ref refid="classuint256" kindref="compound">uint256</ref> &gt; &amp;</type>
          <declname>vtxhash</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/main.cpp" line="1792" column="1" bodyfile="/home/dev/ds-160209/src/main.cpp" bodystart="1792" bodyend="1816"/>
      </memberdef>
      <memberdef kind="function" id="main_8cpp_1a28098619373dbab927d25bca3cea8a4a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void PushGetBlocks</definition>
        <argsstring>(CNode *pnode, CBlockIndex *pindexBegin, uint256 hashEnd)</argsstring>
        <name>PushGetBlocks</name>
        <param>
          <type><ref refid="class_c_node" kindref="compound">CNode</ref> *</type>
          <declname>pnode</declname>
        </param>
        <param>
          <type><ref refid="class_c_block_index" kindref="compound">CBlockIndex</ref> *</type>
          <declname>pindexBegin</declname>
        </param>
        <param>
          <type><ref refid="classuint256" kindref="compound">uint256</ref></type>
          <declname>hashEnd</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/main.cpp" line="1865" column="1" bodyfile="/home/dev/ds-160209/src/main.cpp" bodystart="1865" bodyend="1874"/>
      </memberdef>
      <memberdef kind="function" id="main_8cpp_1aec566a813e042b1991c208989c7f846d" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>static bool IsCanonicalBlockSignature</definition>
        <argsstring>(CBlock *pblock)</argsstring>
        <name>IsCanonicalBlockSignature</name>
        <param>
          <type><ref refid="class_c_block" kindref="compound">CBlock</ref> *</type>
          <declname>pblock</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/main.cpp" line="1876" column="1" bodyfile="/home/dev/ds-160209/src/main.cpp" bodystart="1876" bodyend="1883"/>
      </memberdef>
      <memberdef kind="function" id="main_8cpp_1a7c8a7be3439bb5e1e40548a332a3cf29" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool ProcessBlock</definition>
        <argsstring>(CNode *pfrom, CBlock *pblock)</argsstring>
        <name>ProcessBlock</name>
        <param>
          <type><ref refid="class_c_node" kindref="compound">CNode</ref> *</type>
          <declname>pfrom</declname>
        </param>
        <param>
          <type><ref refid="class_c_block" kindref="compound">CBlock</ref> *</type>
          <declname>pblock</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/main.cpp" line="1885" column="1" bodyfile="/home/dev/ds-160209/src/main.cpp" bodystart="1885" bodyend="2022"/>
      </memberdef>
      <memberdef kind="function" id="main_8cpp_1a7d4a97e049394047743b48c0cd0f0791" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool CheckDiskSpace</definition>
        <argsstring>(uint64_t nAdditionalBytes)</argsstring>
        <name>CheckDiskSpace</name>
        <param>
          <type><ref refid="stdint_8h_1aaa5d1cd013383c889537491c3cfd9aad" kindref="member">uint64_t</ref></type>
          <declname>nAdditionalBytes</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/main.cpp" line="2024" column="1" bodyfile="/home/dev/ds-160209/src/main.cpp" bodystart="2024" bodyend="2039"/>
      </memberdef>
      <memberdef kind="function" id="main_8cpp_1a14223fec767a6dcd89d03fc8aec056f4" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void InvalidBlockFound</definition>
        <argsstring>(CBlockIndex *pindex, const CValidationState &amp;state)</argsstring>
        <name>InvalidBlockFound</name>
        <param>
          <type><ref refid="class_c_block_index" kindref="compound">CBlockIndex</ref> *</type>
          <declname>pindex</declname>
        </param>
        <param>
          <type>const <ref refid="class_c_validation_state" kindref="compound">CValidationState</ref> &amp;</type>
          <declname>state</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/main.cpp" line="2041" column="1" bodyfile="/home/dev/ds-160209/src/main.cpp" bodystart="2041" bodyend="2058"/>
      </memberdef>
      <memberdef kind="function" id="main_8cpp_1ac98b87e479f71b7be2b990a10c4ebc2d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void UnloadBlockIndex</definition>
        <argsstring>()</argsstring>
        <name>UnloadBlockIndex</name>
        <briefdescription>
<para>Unload database information. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/main.cpp" line="2060" column="1" bodyfile="/home/dev/ds-160209/src/main.cpp" bodystart="2060" bodyend="2066"/>
      </memberdef>
      <memberdef kind="function" id="main_8cpp_1af94b2ea9be1ac00e564bc30492e39783" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool LoadBlockIndex</definition>
        <argsstring>(bool fAllowNew)</argsstring>
        <name>LoadBlockIndex</name>
        <param>
          <type>bool</type>
          <declname>fAllowNew</declname>
        </param>
        <briefdescription>
<para>Load the block tree and coins database from disk */. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/main.cpp" line="2068" column="1" bodyfile="/home/dev/ds-160209/src/main.cpp" bodystart="2068" bodyend="2104"/>
      </memberdef>
      <memberdef kind="function" id="main_8cpp_1a92e5e1fcbd56cc44c27d39b64da8a79a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool InitBlockIndex</definition>
        <argsstring>()</argsstring>
        <name>InitBlockIndex</name>
        <briefdescription>
<para>Initialize a new block tree database + block data on disk. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/main.cpp" line="2106" column="1" bodyfile="/home/dev/ds-160209/src/main.cpp" bodystart="2106" bodyend="2144"/>
      </memberdef>
      <memberdef kind="function" id="main_8cpp_1aac88c75e65aa0dee60e4332dbcc16120" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void PrintBlockTree</definition>
        <argsstring>()</argsstring>
        <name>PrintBlockTree</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/main.cpp" line="2146" column="1" bodyfile="/home/dev/ds-160209/src/main.cpp" bodystart="2146" bodyend="2217"/>
      </memberdef>
      <memberdef kind="function" id="main_8cpp_1afbdbbb5a1b376748e5460cbcf644a9af" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool LoadExternalBlockFile</definition>
        <argsstring>(FILE *fileIn)</argsstring>
        <name>LoadExternalBlockFile</name>
        <param>
          <type>FILE *</type>
          <declname>fileIn</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/main.cpp" line="2219" column="1" bodyfile="/home/dev/ds-160209/src/main.cpp" bodystart="2219" bodyend="2279"/>
      </memberdef>
      <memberdef kind="function" id="main_8cpp_1a0189c34248cd89bbbe20d4d6045bd7c9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ThreadImport</definition>
        <argsstring>(std::vector&lt; boost::filesystem::path &gt; vImportFiles)</argsstring>
        <name>ThreadImport</name>
        <param>
          <type>std::vector&lt; boost::filesystem::path &gt;</type>
          <declname>vImportFiles</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/main.cpp" line="2294" column="1" bodyfile="/home/dev/ds-160209/src/main.cpp" bodystart="2294" bodyend="2317"/>
      </memberdef>
      <memberdef kind="function" id="main_8cpp_1a70b1d1b79f1c760e65c960713b87b732" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>string</type>
        <definition>string GetWarnings</definition>
        <argsstring>(string strFor)</argsstring>
        <name>GetWarnings</name>
        <param>
          <type>string</type>
          <declname>strFor</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/main.cpp" line="2327" column="1" bodyfile="/home/dev/ds-160209/src/main.cpp" bodystart="2327" bodyend="2368"/>
      </memberdef>
      <memberdef kind="function" id="main_8cpp_1a67fbad415bf0e6991065aff3d7222872" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>static bool AlreadyHave</definition>
        <argsstring>(CTxDB &amp;txdb, const CInv &amp;inv)</argsstring>
        <name>AlreadyHave</name>
        <param>
          <type><ref refid="class_c_tx_d_b" kindref="compound">CTxDB</ref> &amp;</type>
          <declname>txdb</declname>
        </param>
        <param>
          <type>const <ref refid="class_c_inv" kindref="compound">CInv</ref> &amp;</type>
          <declname>inv</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/main.cpp" line="2375" column="1" bodyfile="/home/dev/ds-160209/src/main.cpp" bodystart="2375" bodyend="2439"/>
      </memberdef>
      <memberdef kind="function" id="main_8cpp_1a3be415b83ecfe1f4215e0bd28c3b1eec" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void ProcessGetData</definition>
        <argsstring>(CNode *pfrom)</argsstring>
        <name>ProcessGetData</name>
        <param>
          <type><ref refid="class_c_node" kindref="compound">CNode</ref> *</type>
          <declname>pfrom</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/main.cpp" line="2441" column="1" bodyfile="/home/dev/ds-160209/src/main.cpp" bodystart="2441" bodyend="2649"/>
      </memberdef>
      <memberdef kind="function" id="main_8cpp_1adf47e0be816e7c6887a96bf57880a846" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>static bool ProcessMessage</definition>
        <argsstring>(CNode *pfrom, string strCommand, CDataStream &amp;vRecv, int64_t nTimeReceived)</argsstring>
        <name>ProcessMessage</name>
        <param>
          <type><ref refid="class_c_node" kindref="compound">CNode</ref> *</type>
          <declname>pfrom</declname>
        </param>
        <param>
          <type>string</type>
          <declname>strCommand</declname>
        </param>
        <param>
          <type><ref refid="class_c_data_stream" kindref="compound">CDataStream</ref> &amp;</type>
          <declname>vRecv</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1adec1df1b8b51cb32b77e5b86fff46471" kindref="member">int64_t</ref></type>
          <declname>nTimeReceived</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/main.cpp" line="2651" column="1" bodyfile="/home/dev/ds-160209/src/main.cpp" bodystart="2651" bodyend="3303"/>
      </memberdef>
      <memberdef kind="function" id="main_8cpp_1a196f9318f02448b85b28d612698934fd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool ProcessMessages</definition>
        <argsstring>(CNode *pfrom)</argsstring>
        <name>ProcessMessages</name>
        <param>
          <type><ref refid="class_c_node" kindref="compound">CNode</ref> *</type>
          <declname>pfrom</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/main.cpp" line="3306" column="1" bodyfile="/home/dev/ds-160209/src/main.cpp" bodystart="3306" bodyend="3423"/>
      </memberdef>
      <memberdef kind="function" id="main_8cpp_1a711a5bdb30c9c9bbdc83011b1cbbe2f3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool SendMessages</definition>
        <argsstring>(CNode *pto, bool fSendTrickle)</argsstring>
        <name>SendMessages</name>
        <param>
          <type><ref refid="class_c_node" kindref="compound">CNode</ref> *</type>
          <declname>pto</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>fSendTrickle</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/main.cpp" line="3426" column="1" bodyfile="/home/dev/ds-160209/src/main.cpp" bodystart="3426" bodyend="3631"/>
      </memberdef>
      <memberdef kind="function" id="main_8cpp_1a60aaca97e87f41ccf0f794d1ff252bff" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void FlushBlockFile</definition>
        <argsstring>(bool fFinalize=false)</argsstring>
        <name>FlushBlockFile</name>
        <param>
          <type>bool</type>
          <declname>fFinalize</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/main.cpp" line="3973" column="1" bodyfile="/home/dev/ds-160209/src/main.cpp" bodystart="3973" bodyend="3994"/>
      </memberdef>
      <memberdef kind="function" id="main_8cpp_1ac8bea30995cabddbc181f7c3b81340f0" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>filesystem::path</type>
        <definition>static filesystem::path BlockFilePath</definition>
        <argsstring>(unsigned int nFile)</argsstring>
        <name>BlockFilePath</name>
        <param>
          <type>unsigned int</type>
          <declname>nFile</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/main.cpp" line="4002" column="1" bodyfile="/home/dev/ds-160209/src/main.cpp" bodystart="4002" bodyend="4006"/>
      </memberdef>
      <memberdef kind="function" id="main_8cpp_1a2f26f074aac584c3398de1dcdac59de9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>boost::filesystem::path</type>
        <definition>boost::filesystem::path GetBlockPosFilename</definition>
        <argsstring>(const CDiskBlockPos &amp;pos, const char *prefix)</argsstring>
        <name>GetBlockPosFilename</name>
        <param>
          <type>const <ref refid="struct_c_disk_block_pos" kindref="compound">CDiskBlockPos</ref> &amp;</type>
          <declname>pos</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>prefix</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/main.cpp" line="4008" column="1" bodyfile="/home/dev/ds-160209/src/main.cpp" bodystart="4008" bodyend="4011"/>
      </memberdef>
      <memberdef kind="function" id="main_8cpp_1ab15fc61f1d9596ad0aca703ff2c74635" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>FILE *</type>
        <definition>FILE* OpenDiskFile</definition>
        <argsstring>(const CDiskBlockPos &amp;pos, const char *prefix, bool fReadOnly)</argsstring>
        <name>OpenDiskFile</name>
        <param>
          <type>const <ref refid="struct_c_disk_block_pos" kindref="compound">CDiskBlockPos</ref> &amp;</type>
          <declname>pos</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>prefix</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>fReadOnly</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/main.cpp" line="4013" column="1" bodyfile="/home/dev/ds-160209/src/main.cpp" bodystart="4013" bodyend="4034"/>
      </memberdef>
      <memberdef kind="function" id="main_8cpp_1a4728972adc7d389a00a7f7333b74b71d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>FILE *</type>
        <definition>FILE* OpenBlockFile</definition>
        <argsstring>(unsigned int nFile, unsigned int nBlockPos, const char *pszMode)</argsstring>
        <name>OpenBlockFile</name>
        <param>
          <type>unsigned int</type>
          <declname>nFile</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>nBlockPos</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>pszMode</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/main.cpp" line="4036" column="1" bodyfile="/home/dev/ds-160209/src/main.cpp" bodystart="4036" bodyend="4052"/>
      </memberdef>
      <memberdef kind="function" id="main_8cpp_1a0d81388930a4ccb6a69b9abdd1ef5097" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>FILE *</type>
        <definition>FILE* OpenBlockFile</definition>
        <argsstring>(const CDiskBlockPos &amp;pos, bool fReadOnly)</argsstring>
        <name>OpenBlockFile</name>
        <param>
          <type>const <ref refid="struct_c_disk_block_pos" kindref="compound">CDiskBlockPos</ref> &amp;</type>
          <declname>pos</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>fReadOnly</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/main.cpp" line="4054" column="1" bodyfile="/home/dev/ds-160209/src/main.cpp" bodystart="4054" bodyend="4056"/>
      </memberdef>
      <memberdef kind="function" id="main_8cpp_1af17e2878956b7c457ef8148025d4c462" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>FILE *</type>
        <definition>FILE* OpenUndoFile</definition>
        <argsstring>(const CDiskBlockPos &amp;pos, bool fReadOnly)</argsstring>
        <name>OpenUndoFile</name>
        <param>
          <type>const <ref refid="struct_c_disk_block_pos" kindref="compound">CDiskBlockPos</ref> &amp;</type>
          <declname>pos</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>fReadOnly</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/main.cpp" line="4058" column="1" bodyfile="/home/dev/ds-160209/src/main.cpp" bodystart="4058" bodyend="4060"/>
      </memberdef>
      <memberdef kind="function" id="main_8cpp_1a9a5cf7fc69badfc4f38b4cf752e57c7a" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>static bool FlushStateToDisk</definition>
        <argsstring>(CValidationState &amp;state, FlushStateMode mode)</argsstring>
        <name>FlushStateToDisk</name>
        <param>
          <type><ref refid="class_c_validation_state" kindref="compound">CValidationState</ref> &amp;</type>
          <declname>state</declname>
        </param>
        <param>
          <type><ref refid="main_8cpp_1ae2877520fcc46d869b4f5e9768227e25" kindref="member">FlushStateMode</ref></type>
          <declname>mode</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Update the on-disk chain state. The caches and indexes are flushed if either they&apos;re too large, forceWrite is set, or fast is not set and it&apos;s been a while since the last write. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/main.cpp" line="4067" column="1" bodyfile="/home/dev/ds-160209/src/main.cpp" bodystart="4067" bodyend="4118"/>
      </memberdef>
      <memberdef kind="function" id="main_8cpp_1a0d01c135cc5a05475e3dc3910c9888da" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void FlushStateToDisk</definition>
        <argsstring>()</argsstring>
        <name>FlushStateToDisk</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/main.cpp" line="4120" column="1" bodyfile="/home/dev/ds-160209/src/main.cpp" bodystart="4120" bodyend="4123"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">//<sp/>Copyright<sp/>(c)<sp/>2009-2016<sp/>Satoshi<sp/>Nakamoto</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Copyright<sp/>(c)<sp/>2009-2016<sp/>The<sp/>Bitcoin<sp/>Developers</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Copyright<sp/>(c)<sp/>2015-2016<sp/>Silk<sp/>Network</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Distributed<sp/>under<sp/>the<sp/>MIT/X11<sp/>software<sp/>license,<sp/>see<sp/>the<sp/>accompanying</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="comment">//<sp/>file<sp/>COPYING<sp/>or<sp/>http://www.opensource.org/licenses/mit-license.php.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;boost/algorithm/string/replace.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;boost/filesystem.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;boost/filesystem/fstream.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;boost/lexical_cast.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="main_8h" kindref="compound">main.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="alert_8h" kindref="compound">alert.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="chainparams_8h" kindref="compound">chainparams.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="checkpoints_8h" kindref="compound">checkpoints.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="db_8h" kindref="compound">db.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="init_8h" kindref="compound">init.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="kernel_8h" kindref="compound">kernel.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="txdb_8h" kindref="compound">txdb.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="ui__interface_8h" kindref="compound">ui_interface.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="instantx_8h" kindref="compound">instantx.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="sandstorm_8h" kindref="compound">sandstorm.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="stormnodeman_8h" kindref="compound">stormnodeman.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="stormnode-budget_8h" kindref="compound">stormnode-budget.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="stormnode-payments_8h" kindref="compound">stormnode-payments.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="stormnode-sync_8h" kindref="compound">stormnode-sync.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="spork_8h" kindref="compound">spork.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="smessage_8h" kindref="compound">smessage.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="coins_8h" kindref="compound">coins.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="txdb-leveldb_8h" kindref="compound">txdb-leveldb.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal"><ref refid="namespacestd" kindref="compound">std</ref>;</highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal"><ref refid="namespaceboost" kindref="compound">boost</ref>;</highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Global<sp/>state</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"><ref refid="class_c_big_num" kindref="compound">CBigNum</ref><sp/><ref refid="main_8cpp_1afa4cd327d70c3f1f925935432a30b48e" kindref="member">bnProofOfStakeLimit</ref>(~<ref refid="classuint256" kindref="compound">uint256</ref>(0)<sp/>&gt;&gt;<sp/>20);<sp/></highlight><highlight class="comment">//PoS<sp/>starting<sp/>difficulty<sp/>=<sp/>0.0002441</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight></codeline>
<codeline lineno="41" refid="main_8cpp_1a28d3fb113f678730589d9392424da758" refkind="member"><highlight class="normal"><ref refid="class_annotated_mixin" kindref="compound">CCriticalSection</ref><sp/><ref refid="main_8cpp_1a28d3fb113f678730589d9392424da758" kindref="member">cs_setpwalletRegistered</ref>;</highlight></codeline>
<codeline lineno="42" refid="main_8cpp_1a964d81c1c647e5625e94bb0db036c830" refkind="member"><highlight class="normal">set&lt;CWallet*&gt;<sp/><ref refid="main_8cpp_1a964d81c1c647e5625e94bb0db036c830" kindref="member">setpwalletRegistered</ref>;</highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight></codeline>
<codeline lineno="44" refid="main_8h_1a1ed8285f0fe3c6799c53265ce72552c8" refkind="member"><highlight class="normal"><ref refid="class_annotated_mixin" kindref="compound">CCriticalSection</ref><sp/><ref refid="main_8cpp_1a1ed8285f0fe3c6799c53265ce72552c8" kindref="member">cs_main</ref>;</highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight></codeline>
<codeline lineno="50" refid="main_8h_1a5925a10baeee7d4bdce1982bdcbd3bd0" refkind="member"><highlight class="normal"><ref refid="class_c_fee_rate" kindref="compound">CFeeRate</ref><sp/><ref refid="main_8cpp_1a5925a10baeee7d4bdce1982bdcbd3bd0" kindref="member">minRelayTxFee</ref><sp/>=<sp/><ref refid="class_c_fee_rate" kindref="compound">CFeeRate</ref>(<ref refid="wallet_8h_1add67e95cd66a980b74a7a2f434d9cf1c" kindref="member">MIN_TX_FEE</ref>);</highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal"><ref refid="class_c_tx_mem_pool" kindref="compound">CTxMemPool</ref><sp/><ref refid="main_8cpp_1a52890038ef379d29a1a8f3bd20dbe088" kindref="member">mempool</ref>(::minRelayTxFee);</highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight></codeline>
<codeline lineno="54" refid="struct_c_orphan_tx" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_c_orphan_tx" kindref="compound">COrphanTx</ref><sp/>{</highlight></codeline>
<codeline lineno="55" refid="struct_c_orphan_tx_1aa797568f3a1168e96d3c51601eda5fdc" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_c_transaction" kindref="compound">CTransaction</ref><sp/><ref refid="struct_c_orphan_tx_1aa797568f3a1168e96d3c51601eda5fdc" kindref="member">tx</ref>;</highlight></codeline>
<codeline lineno="56" refid="struct_c_orphan_tx_1a06fa313a474fd4e6d0ed20bda7cbe69c" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="net_8h_1a954d746a58632565552615fd0a4ee660" kindref="member">NodeId</ref><sp/><ref refid="struct_c_orphan_tx_1a06fa313a474fd4e6d0ed20bda7cbe69c" kindref="member">fromPeer</ref>;</highlight></codeline>
<codeline lineno="57"><highlight class="normal">};</highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight></codeline>
<codeline lineno="59" refid="main_8h_1a9d5aa0c4581116d898ff51357a0df059" refkind="member"><highlight class="normal">map&lt;uint256,<sp/>CBlockIndex*&gt;<sp/><ref refid="main_8cpp_1a7ed5e264d5cdb0fdcf0fa6ae68ee4638" kindref="member">mapBlockIndex</ref>;</highlight></codeline>
<codeline lineno="60" refid="main_8h_1a261df4d886c6149afe291ecfbed2ae89" refkind="member"><highlight class="normal">set&lt;pair&lt;COutPoint,<sp/>unsigned<sp/>int&gt;<sp/>&gt;<sp/><ref refid="main_8cpp_1a76784ec097b3e97b81272c0858d623e4" kindref="member">setStakeSeen</ref>;</highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight><highlight class="comment">//TODO(AA)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="63" refid="main_8h_1a621f4f63be83358641eb78f48d2f49c2" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="main_8cpp_1a621f4f63be83358641eb78f48d2f49c2" kindref="member">nStakeMinAge</ref><sp/>=<sp/>10<sp/>*<sp/>60;<sp/></highlight><highlight class="comment">//<sp/>1<sp/>day</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="64" refid="main_8cpp_1a12388da9cd7b3a99208684bd4535f098" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="main_8cpp_1a12388da9cd7b3a99208684bd4535f098" kindref="member">nModifierInterval</ref><sp/>=<sp/>10<sp/>*<sp/>60;<sp/></highlight><highlight class="comment">//<sp/>10<sp/>minutes<sp/>to<sp/>elapse<sp/>before<sp/>new<sp/>modifier<sp/>is<sp/>computed</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="65" refid="main_8h_1a6d3cd49df21f4264ed1489ea304dbcb8" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="main_8cpp_1a6d3cd49df21f4264ed1489ea304dbcb8" kindref="member">nStakeMinConfirmations</ref><sp/>=<sp/>10;<sp/></highlight><highlight class="comment">//<sp/>2790<sp/>blocks<sp/>or<sp/>~1<sp/>day<sp/>before<sp/>coins<sp/>can<sp/>be<sp/>staked</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="66" refid="main_8h_1adfd36b02172030cdbf7ac69c2ccb7711" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="main_8cpp_1adfd36b02172030cdbf7ac69c2ccb7711" kindref="member">nCoinbaseMaturity</ref><sp/>=<sp/>10;<sp/></highlight><highlight class="comment">//<sp/>100<sp/>blocks<sp/>until<sp/>coins<sp/>are<sp/>mature</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="67" refid="main_8h_1a6b569217f0bbb0a69a42c8769df06a06" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="main_8cpp_1a6b569217f0bbb0a69a42c8769df06a06" kindref="member">fTxIndex</ref><sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="68"><highlight class="normal"></highlight></codeline>
<codeline lineno="69" refid="main_8h_1a1e7c54b8b26730f52b5527163fc33d8f" refkind="member"><highlight class="normal"><ref refid="class_c_block_index" kindref="compound">CBlockIndex</ref>*<sp/><ref refid="main_8cpp_1a1e7c54b8b26730f52b5527163fc33d8f" kindref="member">pindexGenesisBlock</ref><sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="70" refid="net_8h_1a843f1984796a7e44a9e23fccd6a8af34" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="main_8cpp_1a843f1984796a7e44a9e23fccd6a8af34" kindref="member">nBestHeight</ref><sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="71"><highlight class="normal"></highlight></codeline>
<codeline lineno="72" refid="main_8h_1a63af124faf22e03fd629e8aa21c40eae" refkind="member"><highlight class="normal"><ref refid="classuint256" kindref="compound">uint256</ref><sp/><ref refid="main_8cpp_1a63af124faf22e03fd629e8aa21c40eae" kindref="member">nBestChainTrust</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="73" refid="main_8h_1a27c4c119ca2e7250221de8c17bee0999" refkind="member"><highlight class="normal"><ref refid="classuint256" kindref="compound">uint256</ref><sp/><ref refid="main_8cpp_1a27c4c119ca2e7250221de8c17bee0999" kindref="member">nBestInvalidTrust</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="74" refid="main_8h_1ace9c3343567f488a96598abe61e1d309" refkind="member"><highlight class="normal"><ref refid="classuint256" kindref="compound">uint256</ref><sp/><ref refid="main_8cpp_1ace9c3343567f488a96598abe61e1d309" kindref="member">hashBestChain</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="75"><highlight class="normal"></highlight></codeline>
<codeline lineno="76" refid="main_8h_1a6454ad864029344132a0a0b59b1456ee" refkind="member"><highlight class="normal"><ref refid="class_c_block_index" kindref="compound">CBlockIndex</ref>*<sp/><ref refid="main_8cpp_1a6454ad864029344132a0a0b59b1456ee" kindref="member">pindexBest</ref><sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="77"><highlight class="normal"></highlight></codeline>
<codeline lineno="78" refid="main_8h_1ab319f7e88eb0d2d3b9f9f98bea0f9896" refkind="member"><highlight class="normal"><ref refid="stdint_8h_1adec1df1b8b51cb32b77e5b86fff46471" kindref="member">int64_t</ref><sp/><ref refid="main_8cpp_1ab319f7e88eb0d2d3b9f9f98bea0f9896" kindref="member">nTimeBestReceived</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="79" refid="main_8h_1aaf87d0dd26c4a7c9bcc5bdd1127e8637" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="main_8cpp_1aaf87d0dd26c4a7c9bcc5bdd1127e8637" kindref="member">fImporting</ref><sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="80" refid="main_8h_1a8e0eca589b2d4254a65f04c5d91888b2" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="main_8cpp_1a8e0eca589b2d4254a65f04c5d91888b2" kindref="member">fReindex</ref><sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="81" refid="main_8cpp_1a5bdc5c4ff8a9f6c578119f45d5f11d0a" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="main_8cpp_1a5bdc5c4ff8a9f6c578119f45d5f11d0a" kindref="member">fAddrIndex</ref><sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="82"><highlight class="normal"></highlight></codeline>
<codeline lineno="83" refid="struct_c_orphan_block" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_c_orphan_block" kindref="compound">COrphanBlock</ref><sp/>{</highlight></codeline>
<codeline lineno="84" refid="struct_c_orphan_block_1ab4d0e535f5020a6c765ce3e1d58b5cb8" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classuint256" kindref="compound">uint256</ref><sp/><ref refid="struct_c_orphan_block_1ab4d0e535f5020a6c765ce3e1d58b5cb8" kindref="member">hashBlock</ref>;</highlight></codeline>
<codeline lineno="85" refid="struct_c_orphan_block_1a8c6e5d47d1da746d59feefdc0eb9f55c" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classuint256" kindref="compound">uint256</ref><sp/><ref refid="struct_c_orphan_block_1a8c6e5d47d1da746d59feefdc0eb9f55c" kindref="member">hashPrev</ref>;</highlight></codeline>
<codeline lineno="86" refid="struct_c_orphan_block_1a11bf8c661061349166e335ba0dedd7fb" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>std::pair&lt;COutPoint,<sp/>unsigned<sp/>int&gt;<sp/><ref refid="struct_c_orphan_block_1a11bf8c661061349166e335ba0dedd7fb" kindref="member">stake</ref>;</highlight></codeline>
<codeline lineno="87" refid="struct_c_orphan_block_1a6d63003bce14214976acc149cd4813e8" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>vector&lt;unsigned<sp/>char&gt;<sp/><ref refid="struct_c_orphan_block_1a6d63003bce14214976acc149cd4813e8" kindref="member">vchBlock</ref>;</highlight></codeline>
<codeline lineno="88"><highlight class="normal">};</highlight></codeline>
<codeline lineno="89" refid="main_8h_1a724dfa85b047474da511687460625e48" refkind="member"><highlight class="normal">map&lt;uint256,<sp/>COrphanBlock*&gt;<sp/><ref refid="main_8cpp_1afc20f7cf1e330e0fd10b3933b99198f0" kindref="member">mapOrphanBlocks</ref>;</highlight></codeline>
<codeline lineno="90" refid="main_8cpp_1a575f2c624ccabf284fef4eea4ea1b1d1" refkind="member"><highlight class="normal">multimap&lt;uint256,<sp/>COrphanBlock*&gt;<sp/><ref refid="main_8cpp_1a575f2c624ccabf284fef4eea4ea1b1d1" kindref="member">mapOrphanBlocksByPrev</ref>;</highlight></codeline>
<codeline lineno="91" refid="main_8cpp_1a9a09c929498a064bc56604b9817ad35f" refkind="member"><highlight class="normal">set&lt;pair&lt;COutPoint,<sp/>unsigned<sp/>int&gt;<sp/>&gt;<sp/><ref refid="main_8cpp_1a9a09c929498a064bc56604b9817ad35f" kindref="member">setStakeSeenOrphan</ref>;</highlight></codeline>
<codeline lineno="92" refid="main_8cpp_1a37955afb188aad4474af2032c6b24fb4" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="main_8cpp_1a37955afb188aad4474af2032c6b24fb4" kindref="member">nOrphanBlocksSize</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="93" refid="main_8h_1a8373143ee9b34c558cad14139d331ecc" refkind="member"><highlight class="normal">map&lt;uint256,<sp/>int64_t&gt;<sp/><ref refid="main_8cpp_1ad662f0544986af5d1764cc26dc14a74d" kindref="member">mapRejectedBlocks</ref>;</highlight></codeline>
<codeline lineno="94"><highlight class="normal"></highlight></codeline>
<codeline lineno="95" refid="main_8cpp_1abdc619262947970f81a86187a7784295" refkind="member"><highlight class="normal">map&lt;uint256,<sp/>COrphanTx&gt;<sp/><ref refid="main_8cpp_1abdc619262947970f81a86187a7784295" kindref="member">mapOrphanTransactions</ref>;</highlight></codeline>
<codeline lineno="96"><highlight class="normal"></highlight><highlight class="comment">//map&lt;uint256,<sp/>CTransaction&gt;<sp/>mapOrphanTransactions;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="97" refid="main_8cpp_1a0b9c46f971fc8724dd138ecc68d5d6c6" refkind="member"><highlight class="normal">map&lt;uint256,<sp/>set&lt;uint256&gt;<sp/>&gt;<sp/><ref refid="main_8cpp_1a0b9c46f971fc8724dd138ecc68d5d6c6" kindref="member">mapOrphanTransactionsByPrev</ref>;</highlight></codeline>
<codeline lineno="98"><highlight class="normal"></highlight></codeline>
<codeline lineno="99"><highlight class="normal"></highlight></codeline>
<codeline lineno="100"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="main_8cpp_1a4a2fcba1719100c7e9a0caf97f6988f4" kindref="member">EraseOrphansFor</ref>(<ref refid="net_8h_1a954d746a58632565552615fd0a4ee660" kindref="member">NodeId</ref><sp/>peer);</highlight></codeline>
<codeline lineno="101"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>EraseOrphanTx(<ref refid="classuint256" kindref="compound">uint256</ref><sp/><ref refid="cache_8cc_1a11ecb029164e055f28f4123ce3748862" kindref="member">hash</ref>);</highlight></codeline>
<codeline lineno="102"><highlight class="normal"></highlight></codeline>
<codeline lineno="103"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Constant<sp/>stuff<sp/>for<sp/>coinbase<sp/>transactions<sp/>we<sp/>create:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="104" refid="main_8h_1a5ed86cbbedb72d8fcec0524f2792ada8" refkind="member"><highlight class="normal"><ref refid="class_c_script" kindref="compound">CScript</ref><sp/><ref refid="main_8cpp_1a5ed86cbbedb72d8fcec0524f2792ada8" kindref="member">COINBASE_FLAGS</ref>;</highlight></codeline>
<codeline lineno="105"><highlight class="normal"></highlight></codeline>
<codeline lineno="106" refid="main_8h_1a2874c632b3b462164de12be5abcd9d43" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/><ref refid="main_8cpp_1a1cad9567b6474e6096232b14ed6a8476" kindref="member">strMessageMagic</ref><sp/>=<sp/></highlight><highlight class="stringliteral">&quot;DarkSilk<sp/>Signed<sp/>Message:\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="107"><highlight class="normal"></highlight></codeline>
<codeline lineno="108" refid="main_8cpp_1a6a0e4a246c8fe554b594e4cabcde5fb7" refkind="member"><highlight class="normal">std::set&lt;uint256&gt;<sp/><ref refid="main_8cpp_1a6a0e4a246c8fe554b594e4cabcde5fb7" kindref="member">setValidatedTx</ref>;</highlight></codeline>
<codeline lineno="109"><highlight class="normal"></highlight></codeline>
<codeline lineno="110" refid="main_8h_1a1821834b8f7837b469f7f91a14c20042" refkind="member"><highlight class="normal"><ref refid="class_c_coins_view_cache" kindref="compound">CCoinsViewCache</ref><sp/>*<ref refid="main_8cpp_1a1821834b8f7837b469f7f91a14c20042" kindref="member">pcoinsTip</ref><sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="111" refid="main_8h_1a0023503503c358eda0c97a576ef53fde" refkind="member"><highlight class="normal"><ref refid="class_c_block_tree_d_b" kindref="compound">CBlockTreeDB</ref><sp/>*<ref refid="main_8cpp_1a0023503503c358eda0c97a576ef53fde" kindref="member">pblocktree</ref><sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="112"><highlight class="normal"></highlight></codeline>
<codeline lineno="113" refid="main_8h_1a08b980f03b2fb15445e0ddc8bb4b3d73" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="main_8cpp_1a08b980f03b2fb15445e0ddc8bb4b3d73" kindref="member">nCoinCacheSize</ref><sp/>=<sp/>5000;</highlight></codeline>
<codeline lineno="114"><highlight class="normal"></highlight></codeline>
<codeline lineno="115"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Internal<sp/>stuff</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="116"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="117"><highlight class="normal"></highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">CBlockIndexWorkComparator</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>operator()(<ref refid="class_c_block_index" kindref="compound">CBlockIndex</ref><sp/>*pa,<sp/><ref refid="class_c_block_index" kindref="compound">CBlockIndex</ref><sp/>*pb)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>First<sp/>sort<sp/>by<sp/>most<sp/>total<sp/>work,<sp/>...</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(pa-&gt;<ref refid="class_c_block_index_1a8451dbcf199348b9efe4ee3625e9b0f0" kindref="member">nChainWork</ref><sp/>&gt;<sp/>pb-&gt;<ref refid="class_c_block_index_1a8451dbcf199348b9efe4ee3625e9b0f0" kindref="member">nChainWork</ref>)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(pa-&gt;<ref refid="class_c_block_index_1a8451dbcf199348b9efe4ee3625e9b0f0" kindref="member">nChainWork</ref><sp/>&lt;<sp/>pb-&gt;<ref refid="class_c_block_index_1a8451dbcf199348b9efe4ee3625e9b0f0" kindref="member">nChainWork</ref>)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="124"><highlight class="normal"></highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>...<sp/>then<sp/>by<sp/>earliest<sp/>time<sp/>received,<sp/>...</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(pa-&gt;<ref refid="class_c_block_index_1a4a679af5f7924cc594b8131371b21e54" kindref="member">nSequenceId</ref><sp/>&lt;<sp/>pb-&gt;<ref refid="class_c_block_index_1a4a679af5f7924cc594b8131371b21e54" kindref="member">nSequenceId</ref>)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(pa-&gt;<ref refid="class_c_block_index_1a4a679af5f7924cc594b8131371b21e54" kindref="member">nSequenceId</ref><sp/>&gt;<sp/>pb-&gt;<ref refid="class_c_block_index_1a4a679af5f7924cc594b8131371b21e54" kindref="member">nSequenceId</ref>)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="128"><highlight class="normal"></highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Use<sp/>pointer<sp/>address<sp/>as<sp/>tie<sp/>breaker<sp/>(should<sp/>only<sp/>happen<sp/>with<sp/>blocks</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>loaded<sp/>from<sp/>disk,<sp/>as<sp/>those<sp/>all<sp/>have<sp/>id<sp/>0).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(pa<sp/>&lt;<sp/>pb)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(pa<sp/>&gt;<sp/>pb)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="133"><highlight class="normal"></highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Identical<sp/>blocks.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="138"><highlight class="normal"></highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_c_block_index" kindref="compound">CBlockIndex</ref><sp/>*pindexBestInvalid;</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/>set&lt;CBlockIndex*,<sp/>CBlockIndexWorkComparator&gt;<sp/>setBlockIndexCandidates;</highlight></codeline>
<codeline lineno="145"><highlight class="normal"></highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nSyncStarted<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/>multimap&lt;CBlockIndex*,<sp/>CBlockIndex*&gt;<sp/>mapBlocksUnlinked;</highlight></codeline>
<codeline lineno="150"><highlight class="normal"></highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_annotated_mixin" kindref="compound">CCriticalSection</ref><sp/>cs_LastBlockFile;</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//std::vector&lt;CBlockFileInfo&gt;<sp/>vinfoBlockFile;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//int<sp/>nLastBlockFile<sp/>=<sp/>0;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="154"><highlight class="normal"></highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_annotated_mixin" kindref="compound">CCriticalSection</ref><sp/>cs_nBlockSequenceId;</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//uint32_t<sp/>nBlockSequenceId<sp/>=<sp/>1;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="162"><highlight class="normal"></highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/>map&lt;uint256,<sp/>NodeId&gt;<sp/>mapBlockSource;</highlight></codeline>
<codeline lineno="168"><highlight class="normal"></highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">QueuedBlock<sp/>{</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classuint256" kindref="compound">uint256</ref><sp/><ref refid="cache_8cc_1a11ecb029164e055f28f4123ce3748862" kindref="member">hash</ref>;</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_c_block_index" kindref="compound">CBlockIndex</ref><sp/>*pindex;<sp/><sp/></highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stdint_8h_1adec1df1b8b51cb32b77e5b86fff46471" kindref="member">int64_t</ref><sp/>nTime;<sp/><sp/></highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nValidatedQueuedBefore;<sp/><sp/></highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>fValidatedHeaders;<sp/><sp/></highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nQueuedBefore;<sp/><sp/></highlight><highlight class="comment">//<sp/>Number<sp/>of<sp/>blocks<sp/>in<sp/>flight<sp/>at<sp/>the<sp/>time<sp/>of<sp/>request.<sp/>//TODO<sp/>(Amir):<sp/>do<sp/>we<sp/>need<sp/>this?</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/><sp/>map&lt;uint256,<sp/>pair&lt;NodeId,<sp/>list&lt;QueuedBlock&gt;::iterator&gt;<sp/>&gt;<sp/>mapBlocksInFlight;</highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/><sp/><sp/>map&lt;uint256,<sp/>pair&lt;NodeId,<sp/>list&lt;uint256&gt;::iterator&gt;<sp/>&gt;<sp/>mapBlocksToDownload;</highlight></codeline>
<codeline lineno="180"><highlight class="normal"></highlight></codeline>
<codeline lineno="181"><highlight class="normal"></highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nQueuedValidatedHeaders<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="184"><highlight class="normal"></highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nPreferredDownload<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="187"><highlight class="normal"></highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><sp/><sp/>set&lt;CBlockIndex*&gt;<sp/>setDirtyBlockIndex;</highlight></codeline>
<codeline lineno="190"><highlight class="normal"></highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/><sp/>set&lt;int&gt;<sp/>setDirtyFileInfo;</highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nLastBlockFile<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;CBlockFileInfo&gt;<sp/>vinfoBlockFile;</highlight></codeline>
<codeline lineno="195"><highlight class="normal"></highlight></codeline>
<codeline lineno="196"><highlight class="normal"></highlight></codeline>
<codeline lineno="197"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>anon<sp/>namespace</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="198"><highlight class="normal"></highlight></codeline>
<codeline lineno="200"><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="201"><highlight class="normal"></highlight><highlight class="comment">//<sp/>dispatching<sp/>functions</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="202"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="203"><highlight class="normal"></highlight></codeline>
<codeline lineno="204"><highlight class="normal"></highlight><highlight class="comment">//<sp/>These<sp/>functions<sp/>dispatch<sp/>to<sp/>one<sp/>or<sp/>all<sp/>registered<sp/>wallets</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="205"><highlight class="normal"></highlight></codeline>
<codeline lineno="206"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">CMainSignals<sp/>{</highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Notifies<sp/>listeners<sp/>of<sp/>updated<sp/>transaction<sp/>data<sp/>(passing<sp/>hash,<sp/>transaction,<sp/>and<sp/>optionally<sp/>the<sp/>block<sp/>it<sp/>is<sp/>found<sp/>in.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>boost::signals2::signal&lt;void<sp/>(const<sp/>CTransaction<sp/>&amp;,<sp/>const<sp/>CBlock<sp/>*,<sp/>bool)&gt;<sp/>SyncTransaction;</highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Notifies<sp/>listeners<sp/>of<sp/>an<sp/>erased<sp/>transaction<sp/>(currently<sp/>disabled,<sp/>requires<sp/>transaction<sp/>replacement).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>boost::signals2::signal&lt;void<sp/>(const<sp/>uint256<sp/>&amp;)&gt;<sp/>EraseTransaction;</highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Notifies<sp/>listeners<sp/>of<sp/>an<sp/>updated<sp/>transaction<sp/>without<sp/>new<sp/>data<sp/>(for<sp/>now:<sp/>a<sp/>coinbase<sp/>potentially<sp/>becoming<sp/>visible).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>boost::signals2::signal&lt;void<sp/>(const<sp/>uint256<sp/>&amp;)&gt;<sp/>UpdatedTransaction;</highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Notifies<sp/>listeners<sp/>of<sp/>a<sp/>new<sp/>active<sp/>block<sp/>chain.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>boost::signals2::signal&lt;void<sp/>(const<sp/>CBlockLocator<sp/>&amp;)&gt;<sp/>SetBestChain;</highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Notifies<sp/>listeners<sp/>about<sp/>an<sp/>inventory<sp/>item<sp/>being<sp/>seen<sp/>on<sp/>the<sp/>network.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>boost::signals2::signal&lt;void<sp/>(const<sp/>uint256<sp/>&amp;)&gt;<sp/>Inventory;</highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Tells<sp/>listeners<sp/>to<sp/>broadcast<sp/>their<sp/>data.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>boost::signals2::signal&lt;void<sp/>(bool)&gt;<sp/>Broadcast;</highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/>g_signals;</highlight></codeline>
<codeline lineno="221"><highlight class="normal">}</highlight></codeline>
<codeline lineno="222"><highlight class="normal"></highlight></codeline>
<codeline lineno="223" refid="main_8h_1aa6b7f220759fb53f10c65654bbf61317" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="main_8cpp_1aa6b7f220759fb53f10c65654bbf61317" kindref="member">RegisterWallet</ref>(<ref refid="class_c_wallet_interface" kindref="compound">CWalletInterface</ref>*<sp/>pwalletIn)<sp/>{</highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/><sp/><sp/>g_signals.SyncTransaction.connect(boost::bind(&amp;<ref refid="class_c_wallet_interface_1a7bde8e284f9405dd858c9b4cbf960ae5" kindref="member">CWalletInterface::SyncTransaction</ref>,<sp/>pwalletIn,<sp/>_1,<sp/>_2,<sp/>_3));</highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/><sp/><sp/>g_signals.EraseTransaction.connect(boost::bind(&amp;<ref refid="class_c_wallet_interface_1a209e0de8725bab3274e7d79567cca630" kindref="member">CWalletInterface::EraseFromWallet</ref>,<sp/>pwalletIn,<sp/>_1));</highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/><sp/><sp/>g_signals.UpdatedTransaction.connect(boost::bind(&amp;<ref refid="class_c_wallet_interface_1a07b55d9aede02e25a5e8d8027c67954f" kindref="member">CWalletInterface::UpdatedTransaction</ref>,<sp/>pwalletIn,<sp/>_1));</highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/><sp/><sp/>g_signals.SetBestChain.connect(boost::bind(&amp;<ref refid="class_c_wallet_interface_1ac9c87a58906081f6629f3f82439dad8e" kindref="member">CWalletInterface::SetBestChain</ref>,<sp/>pwalletIn,<sp/>_1));</highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/><sp/><sp/>g_signals.Inventory.connect(boost::bind(&amp;<ref refid="class_c_wallet_interface_1a32858e2bb7bb6cb81ac391e0e2a0d4c1" kindref="member">CWalletInterface::Inventory</ref>,<sp/>pwalletIn,<sp/>_1));</highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/><sp/><sp/>g_signals.Broadcast.connect(boost::bind(&amp;<ref refid="class_c_wallet_interface_1acd71e9479057c2fdc433fc576e625edf" kindref="member">CWalletInterface::ResendWalletTransactions</ref>,<sp/>pwalletIn,<sp/>_1));</highlight></codeline>
<codeline lineno="230"><highlight class="normal">}</highlight></codeline>
<codeline lineno="231"><highlight class="normal"></highlight></codeline>
<codeline lineno="232" refid="main_8h_1aa60561b6923955deeaad6fdab74a3aee" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="main_8cpp_1aa60561b6923955deeaad6fdab74a3aee" kindref="member">UnregisterWallet</ref>(<ref refid="class_c_wallet_interface" kindref="compound">CWalletInterface</ref>*<sp/>pwalletIn)<sp/>{</highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/><sp/><sp/>g_signals.Broadcast.disconnect(boost::bind(&amp;<ref refid="class_c_wallet_interface_1acd71e9479057c2fdc433fc576e625edf" kindref="member">CWalletInterface::ResendWalletTransactions</ref>,<sp/>pwalletIn,<sp/>_1));</highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/><sp/><sp/>g_signals.Inventory.disconnect(boost::bind(&amp;<ref refid="class_c_wallet_interface_1a32858e2bb7bb6cb81ac391e0e2a0d4c1" kindref="member">CWalletInterface::Inventory</ref>,<sp/>pwalletIn,<sp/>_1));</highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/><sp/><sp/>g_signals.SetBestChain.disconnect(boost::bind(&amp;<ref refid="class_c_wallet_interface_1ac9c87a58906081f6629f3f82439dad8e" kindref="member">CWalletInterface::SetBestChain</ref>,<sp/>pwalletIn,<sp/>_1));</highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/><sp/><sp/>g_signals.UpdatedTransaction.disconnect(boost::bind(&amp;<ref refid="class_c_wallet_interface_1a07b55d9aede02e25a5e8d8027c67954f" kindref="member">CWalletInterface::UpdatedTransaction</ref>,<sp/>pwalletIn,<sp/>_1));</highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/><sp/><sp/>g_signals.EraseTransaction.disconnect(boost::bind(&amp;<ref refid="class_c_wallet_interface_1a209e0de8725bab3274e7d79567cca630" kindref="member">CWalletInterface::EraseFromWallet</ref>,<sp/>pwalletIn,<sp/>_1));</highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/><sp/><sp/>g_signals.SyncTransaction.disconnect(boost::bind(&amp;<ref refid="class_c_wallet_interface_1a7bde8e284f9405dd858c9b4cbf960ae5" kindref="member">CWalletInterface::SyncTransaction</ref>,<sp/>pwalletIn,<sp/>_1,<sp/>_2,<sp/>_3));</highlight></codeline>
<codeline lineno="239"><highlight class="normal">}</highlight></codeline>
<codeline lineno="240"><highlight class="normal"></highlight></codeline>
<codeline lineno="241" refid="main_8h_1ad0b02f9e3ff8997319581ce5021d4244" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="main_8cpp_1ad0b02f9e3ff8997319581ce5021d4244" kindref="member">UnregisterAllWallets</ref>()<sp/>{</highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/><sp/><sp/>g_signals.Broadcast.disconnect_all_slots();</highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/><sp/><sp/>g_signals.Inventory.disconnect_all_slots();</highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/><sp/><sp/>g_signals.SetBestChain.disconnect_all_slots();</highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/><sp/><sp/>g_signals.UpdatedTransaction.disconnect_all_slots();</highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/><sp/><sp/>g_signals.EraseTransaction.disconnect_all_slots();</highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/><sp/><sp/>g_signals.SyncTransaction.disconnect_all_slots();</highlight></codeline>
<codeline lineno="248"><highlight class="normal">}</highlight></codeline>
<codeline lineno="249"><highlight class="normal"></highlight></codeline>
<codeline lineno="250" refid="main_8h_1a0829b07a2144791d1d6cb18c279fb3a4" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="main_8cpp_1ac79dd0809b8f21bd8d861dfcfc4a7fb3" kindref="member">SyncWithWallets</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_c_transaction" kindref="compound">CTransaction</ref><sp/>&amp;tx,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_c_block" kindref="compound">CBlock</ref><sp/>*pblock,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>fConnect)<sp/>{</highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/><sp/><sp/>g_signals.SyncTransaction(tx,<sp/>pblock,<sp/>fConnect);</highlight></codeline>
<codeline lineno="252"><highlight class="normal">}</highlight></codeline>
<codeline lineno="253"><highlight class="normal"></highlight></codeline>
<codeline lineno="254" refid="main_8h_1aa8d5c228e24266e3dca5858adae31800" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="main_8cpp_1ac15123f662a13528a4ef95ddbd952bee" kindref="member">ResendWalletTransactions</ref>(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>fForce)<sp/>{</highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/><sp/><sp/>g_signals.Broadcast(fForce);</highlight></codeline>
<codeline lineno="256"><highlight class="normal">}</highlight></codeline>
<codeline lineno="257"><highlight class="normal"></highlight></codeline>
<codeline lineno="258"><highlight class="normal"></highlight></codeline>
<codeline lineno="260"><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="261"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Registration<sp/>of<sp/>network<sp/>node<sp/>signals.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="262"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="263"><highlight class="normal"></highlight></codeline>
<codeline lineno="264"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="265"><highlight class="normal"></highlight></codeline>
<codeline lineno="266"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">CBlockReject<sp/>{</highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>chRejectCode;</highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>strRejectReason;</highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classuint256" kindref="compound">uint256</ref><sp/>hashBlock;</highlight></codeline>
<codeline lineno="270"><highlight class="normal">};</highlight></codeline>
<codeline lineno="271"><highlight class="normal"></highlight></codeline>
<codeline lineno="278"><highlight class="keyword">struct<sp/></highlight><highlight class="normal">CNodeState<sp/>{</highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_c_service" kindref="compound">CService</ref><sp/>address;</highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>fCurrentlyConnected;</highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nMisbehavior;</highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>fShouldBan;</highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/><ref refid="testharness_8cc_1a8f8f80d37794cde9472343e4487ba3eb" kindref="member">name</ref>;</highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;CBlockReject&gt;<sp/>rejects;</highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_c_block_index" kindref="compound">CBlockIndex</ref><sp/>*pindexBestKnownBlock;</highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classuint256" kindref="compound">uint256</ref><sp/>hashLastUnknownBlock;</highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_c_block_index" kindref="compound">CBlockIndex</ref><sp/>*pindexLastCommonBlock;</highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>fSyncStarted;</highlight></codeline>
<codeline lineno="300"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="stdint_8h_1adec1df1b8b51cb32b77e5b86fff46471" kindref="member">int64_t</ref><sp/>nStallingSince;</highlight></codeline>
<codeline lineno="301"><highlight class="normal"><sp/><sp/><sp/><sp/>list&lt;QueuedBlock&gt;<sp/>vBlocksInFlight;</highlight></codeline>
<codeline lineno="302"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nBlocksInFlight;</highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>fPreferredDownload;</highlight></codeline>
<codeline lineno="305"><highlight class="normal"><sp/><sp/><sp/><sp/>list&lt;uint256&gt;<sp/>vBlocksToDownload;</highlight></codeline>
<codeline lineno="306"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nBlocksToDownload;</highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="stdint_8h_1adec1df1b8b51cb32b77e5b86fff46471" kindref="member">int64_t</ref><sp/>nLastBlockReceive;</highlight></codeline>
<codeline lineno="308"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="stdint_8h_1adec1df1b8b51cb32b77e5b86fff46471" kindref="member">int64_t</ref><sp/>nLastBlockProcess;</highlight></codeline>
<codeline lineno="309"><highlight class="normal"></highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/><sp/><sp/>CNodeState()<sp/>{</highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fCurrentlyConnected<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nMisbehavior<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fShouldBan<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="314"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pindexBestKnownBlock<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>hashLastUnknownBlock<sp/>=<sp/><ref refid="classuint256" kindref="compound">uint256</ref>(0);</highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pindexLastCommonBlock<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="317"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fSyncStarted<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="318"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nStallingSince<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nBlocksInFlight<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="320"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fPreferredDownload<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="321"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nBlocksToDownload<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="322"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nLastBlockReceive<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nLastBlockProcess<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="324"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="325"><highlight class="normal">};</highlight></codeline>
<codeline lineno="326"><highlight class="normal"></highlight></codeline>
<codeline lineno="328"><highlight class="normal">map&lt;NodeId,<sp/>CNodeState&gt;<sp/>mapNodeState;</highlight></codeline>
<codeline lineno="329"><highlight class="normal"></highlight></codeline>
<codeline lineno="330"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Requires<sp/>cs_main.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="331"><highlight class="normal">CNodeState<sp/>*State(<ref refid="net_8h_1a954d746a58632565552615fd0a4ee660" kindref="member">NodeId</ref><sp/>pnode)<sp/>{</highlight></codeline>
<codeline lineno="332"><highlight class="normal"><sp/><sp/><sp/><sp/>map&lt;NodeId,<sp/>CNodeState&gt;::iterator<sp/>it<sp/>=<sp/>mapNodeState.find(pnode);</highlight></codeline>
<codeline lineno="333"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(it<sp/>==<sp/>mapNodeState.end())</highlight></codeline>
<codeline lineno="334"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="335"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>&amp;it-&gt;second;</highlight></codeline>
<codeline lineno="336"><highlight class="normal">}</highlight></codeline>
<codeline lineno="337"><highlight class="normal"></highlight></codeline>
<codeline lineno="338"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>InitializeNode(<ref refid="net_8h_1a954d746a58632565552615fd0a4ee660" kindref="member">NodeId</ref><sp/>nodeid,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_c_node" kindref="compound">CNode</ref><sp/>*pnode)<sp/>{</highlight></codeline>
<codeline lineno="339"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="sync_8h_1a911fe23f057c2fe5aad629162d6c99d0" kindref="member">LOCK</ref>(cs_main);</highlight></codeline>
<codeline lineno="340"><highlight class="normal"><sp/><sp/><sp/><sp/>CNodeState<sp/>&amp;<ref refid="db__test_8cc_1a42432b4356adce5579ccf597f6e83e54" kindref="member">state</ref><sp/>=<sp/>mapNodeState.insert(std::make_pair(nodeid,<sp/>CNodeState())).first-&gt;second;</highlight></codeline>
<codeline lineno="341"><highlight class="normal"><sp/><sp/><sp/><sp/>state.name<sp/>=<sp/>pnode-&gt;<ref refid="class_c_node_1a3155cd313d85ec3ff691f8259a5f5345" kindref="member">addrName</ref>;</highlight></codeline>
<codeline lineno="342"><highlight class="normal"><sp/><sp/><sp/><sp/>state.address<sp/>=<sp/>pnode-&gt;<ref refid="class_c_node_1a3993ecb1de2a2135a3cf0904346a6f88" kindref="member">addr</ref>;</highlight></codeline>
<codeline lineno="343"><highlight class="normal">}</highlight></codeline>
<codeline lineno="344"><highlight class="normal"></highlight></codeline>
<codeline lineno="345"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="main_8cpp_1a4a2fcba1719100c7e9a0caf97f6988f4" kindref="member">EraseOrphansFor</ref>(<ref refid="net_8h_1a954d746a58632565552615fd0a4ee660" kindref="member">NodeId</ref><sp/>peer)</highlight></codeline>
<codeline lineno="346"><highlight class="normal">{</highlight></codeline>
<codeline lineno="347"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nErased<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="348"><highlight class="normal"><sp/><sp/><sp/><sp/>map&lt;uint256,<sp/>COrphanTx&gt;::iterator<sp/>iter<sp/>=<sp/>mapOrphanTransactions.begin();</highlight></codeline>
<codeline lineno="349"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(iter<sp/>!=<sp/>mapOrphanTransactions.end())</highlight></codeline>
<codeline lineno="350"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="351"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>map&lt;uint256,<sp/>COrphanTx&gt;::iterator<sp/>maybeErase<sp/>=<sp/>iter++;<sp/></highlight><highlight class="comment">//<sp/>increment<sp/>to<sp/>avoid<sp/>iterator<sp/>becoming<sp/>invalid</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="352"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(maybeErase-&gt;second.fromPeer<sp/>==<sp/>peer)</highlight></codeline>
<codeline lineno="353"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="354"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EraseOrphanTx(maybeErase-&gt;second.tx.GetHash());</highlight></codeline>
<codeline lineno="355"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++nErased;</highlight></codeline>
<codeline lineno="356"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="357"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="358"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(nErased<sp/>&gt;<sp/>0)<sp/>LogPrint(</highlight><highlight class="stringliteral">&quot;mempool&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Erased<sp/>%d<sp/>orphan<sp/>tx<sp/>from<sp/>peer<sp/>%d\n&quot;</highlight><highlight class="normal">,<sp/>nErased,<sp/>peer);</highlight></codeline>
<codeline lineno="359"><highlight class="normal">}</highlight></codeline>
<codeline lineno="360"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="361"><highlight class="comment"></highlight></codeline>
<codeline lineno="362"><highlight class="comment">//<sp/>Requires<sp/>cs_main.</highlight></codeline>
<codeline lineno="363"><highlight class="comment">void<sp/>MarkBlockAsInFlight(NodeId<sp/>nodeid,<sp/>const<sp/>uint256<sp/>&amp;hash)<sp/>{</highlight></codeline>
<codeline lineno="364"><highlight class="comment"></highlight></codeline>
<codeline lineno="365"><highlight class="comment">}*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="366"><highlight class="normal"></highlight></codeline>
<codeline lineno="367"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>FinalizeNode(<ref refid="net_8h_1a954d746a58632565552615fd0a4ee660" kindref="member">NodeId</ref><sp/>nodeid)<sp/>{</highlight></codeline>
<codeline lineno="368"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="sync_8h_1a911fe23f057c2fe5aad629162d6c99d0" kindref="member">LOCK</ref>(cs_main);</highlight></codeline>
<codeline lineno="369"><highlight class="normal"><sp/><sp/><sp/><sp/>CNodeState<sp/>*state<sp/>=<sp/>State(nodeid);</highlight></codeline>
<codeline lineno="370"><highlight class="normal"></highlight></codeline>
<codeline lineno="371"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(state-&gt;fSyncStarted)</highlight></codeline>
<codeline lineno="372"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nSyncStarted--;</highlight></codeline>
<codeline lineno="373"><highlight class="normal"></highlight></codeline>
<codeline lineno="374"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(state-&gt;nMisbehavior<sp/>==<sp/>0<sp/>&amp;&amp;<sp/>state-&gt;fCurrentlyConnected)<sp/>{</highlight></codeline>
<codeline lineno="375"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="net_8cpp_1ad4aabaa937cd6f4b708c47dbbdb8ea60" kindref="member">AddressCurrentlyConnected</ref>(state-&gt;address);</highlight></codeline>
<codeline lineno="376"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="377"><highlight class="normal"></highlight></codeline>
<codeline lineno="378"><highlight class="normal"><sp/><sp/><sp/><sp/>BOOST_FOREACH(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>QueuedBlock&amp;<sp/>entry,<sp/>state-&gt;vBlocksInFlight)</highlight></codeline>
<codeline lineno="379"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mapBlocksInFlight.erase(entry.<ref refid="cache_8cc_1a11ecb029164e055f28f4123ce3748862" kindref="member">hash</ref>);</highlight></codeline>
<codeline lineno="380"><highlight class="normal"></highlight></codeline>
<codeline lineno="381"><highlight class="normal"><sp/><sp/><sp/><sp/>BOOST_FOREACH(const<sp/><ref refid="classuint256" kindref="compound">uint256</ref>&amp;<sp/>hash,<sp/>state-&gt;vBlocksToDownload)</highlight></codeline>
<codeline lineno="382"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mapBlocksToDownload.erase(hash);</highlight></codeline>
<codeline lineno="383"><highlight class="normal"></highlight></codeline>
<codeline lineno="384"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="main_8cpp_1a4a2fcba1719100c7e9a0caf97f6988f4" kindref="member">EraseOrphansFor</ref>(nodeid);</highlight></codeline>
<codeline lineno="385"><highlight class="normal"><sp/><sp/><sp/><sp/>nPreferredDownload<sp/>-=<sp/>state-&gt;fPreferredDownload;</highlight></codeline>
<codeline lineno="386"><highlight class="normal"></highlight></codeline>
<codeline lineno="387"><highlight class="normal"><sp/><sp/><sp/><sp/>mapNodeState.erase(nodeid);</highlight></codeline>
<codeline lineno="388"><highlight class="normal"></highlight></codeline>
<codeline lineno="389"><highlight class="normal">}</highlight></codeline>
<codeline lineno="390"><highlight class="normal"></highlight></codeline>
<codeline lineno="391"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Requires<sp/>cs_main.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="392"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>MarkBlockAsReceived(const<sp/><ref refid="classuint256" kindref="compound">uint256</ref><sp/>&amp;hash,<sp/><ref refid="net_8h_1a954d746a58632565552615fd0a4ee660" kindref="member">NodeId</ref><sp/>nodeFrom<sp/>=<sp/>-1)<sp/>{</highlight></codeline>
<codeline lineno="393"><highlight class="normal"><sp/><sp/><sp/><sp/>map&lt;uint256,<sp/>pair&lt;NodeId,<sp/>list&lt;QueuedBlock&gt;::iterator&gt;<sp/>&gt;::iterator<sp/>itInFlight<sp/>=<sp/>mapBlocksInFlight.find(hash);</highlight></codeline>
<codeline lineno="394"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(itInFlight<sp/>!=<sp/>mapBlocksInFlight.end())<sp/>{</highlight></codeline>
<codeline lineno="395"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CNodeState<sp/>*state<sp/>=<sp/>State(itInFlight-&gt;second.first);</highlight></codeline>
<codeline lineno="396"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nQueuedValidatedHeaders<sp/>-=<sp/>itInFlight-&gt;second.second-&gt;fValidatedHeaders;</highlight></codeline>
<codeline lineno="397"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>state-&gt;vBlocksInFlight.erase(itInFlight-&gt;second.second);</highlight></codeline>
<codeline lineno="398"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>state-&gt;nBlocksInFlight--;</highlight></codeline>
<codeline lineno="399"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>state-&gt;nStallingSince<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="400"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mapBlocksInFlight.erase(itInFlight);</highlight></codeline>
<codeline lineno="401"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="402"><highlight class="normal"></highlight></codeline>
<codeline lineno="403"><highlight class="normal"><sp/><sp/><sp/><sp/>map&lt;uint256,<sp/>pair&lt;NodeId,<sp/>list&lt;uint256&gt;::iterator&gt;<sp/>&gt;::iterator<sp/>itToDownload<sp/>=<sp/>mapBlocksToDownload.find(hash);</highlight></codeline>
<codeline lineno="404"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(itToDownload<sp/>!=<sp/>mapBlocksToDownload.end())<sp/>{</highlight></codeline>
<codeline lineno="405"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CNodeState<sp/>*state<sp/>=<sp/>State(itToDownload-&gt;second.first);</highlight></codeline>
<codeline lineno="406"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>state-&gt;vBlocksToDownload.erase(itToDownload-&gt;second.second);</highlight></codeline>
<codeline lineno="407"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>state-&gt;nBlocksToDownload--;</highlight></codeline>
<codeline lineno="408"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mapBlocksToDownload.erase(itToDownload);</highlight></codeline>
<codeline lineno="409"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="410"><highlight class="normal"></highlight></codeline>
<codeline lineno="411"><highlight class="normal">}</highlight></codeline>
<codeline lineno="412"><highlight class="normal"></highlight></codeline>
<codeline lineno="413"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Requires<sp/>cs_main.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="414"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>AddBlockToQueue(<ref refid="net_8h_1a954d746a58632565552615fd0a4ee660" kindref="member">NodeId</ref><sp/>nodeid,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classuint256" kindref="compound">uint256</ref><sp/>&amp;hash)<sp/>{</highlight></codeline>
<codeline lineno="415"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mapBlocksToDownload.count(hash)<sp/>||<sp/>mapBlocksInFlight.count(hash))</highlight></codeline>
<codeline lineno="416"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="417"><highlight class="normal"></highlight></codeline>
<codeline lineno="418"><highlight class="normal"><sp/><sp/><sp/><sp/>CNodeState<sp/>*state<sp/>=<sp/>State(nodeid);</highlight></codeline>
<codeline lineno="419"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(state<sp/>==<sp/>NULL)</highlight></codeline>
<codeline lineno="420"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="421"><highlight class="normal"></highlight></codeline>
<codeline lineno="422"><highlight class="normal"><sp/><sp/><sp/><sp/>list&lt;uint256&gt;::iterator<sp/>it<sp/>=<sp/>state-&gt;vBlocksToDownload.insert(state-&gt;vBlocksToDownload.end(),<sp/><ref refid="cache_8cc_1a11ecb029164e055f28f4123ce3748862" kindref="member">hash</ref>);</highlight></codeline>
<codeline lineno="423"><highlight class="normal"><sp/><sp/><sp/><sp/>state-&gt;nBlocksToDownload++;</highlight></codeline>
<codeline lineno="424"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(state-&gt;nBlocksToDownload<sp/>&gt;<sp/>5000)</highlight></codeline>
<codeline lineno="425"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="main_8cpp_1a387fdffa0ff52dde6b7d1c2991a9bdac" kindref="member">Misbehaving</ref>(nodeid,<sp/>10);</highlight></codeline>
<codeline lineno="426"><highlight class="normal"><sp/><sp/><sp/><sp/>mapBlocksToDownload[<ref refid="cache_8cc_1a11ecb029164e055f28f4123ce3748862" kindref="member">hash</ref>]<sp/>=<sp/>std::make_pair(nodeid,<sp/>it);</highlight></codeline>
<codeline lineno="427"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="428"><highlight class="normal">}</highlight></codeline>
<codeline lineno="429"><highlight class="normal"></highlight></codeline>
<codeline lineno="430"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Requires<sp/>cs_main.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="431"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>MarkBlockAsInFlight(<ref refid="net_8h_1a954d746a58632565552615fd0a4ee660" kindref="member">NodeId</ref><sp/>nodeid,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classuint256" kindref="compound">uint256</ref>&amp;<sp/>hash,<sp/><ref refid="class_c_block_index" kindref="compound">CBlockIndex</ref><sp/>*pindex<sp/>=<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="432"><highlight class="normal"><sp/><sp/><sp/><sp/>CNodeState<sp/>*state<sp/>=<sp/>State(nodeid);</highlight></codeline>
<codeline lineno="433"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(state<sp/>!=<sp/>NULL);</highlight></codeline>
<codeline lineno="434"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Make<sp/>sure<sp/>it&apos;s<sp/>not<sp/>listed<sp/>somewhere<sp/>already.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="435"><highlight class="normal"><sp/><sp/><sp/><sp/>MarkBlockAsReceived(hash);</highlight></codeline>
<codeline lineno="436"><highlight class="normal"></highlight></codeline>
<codeline lineno="437"><highlight class="normal"><sp/><sp/><sp/><sp/>QueuedBlock<sp/>newentry<sp/>{<sp/><ref refid="cache_8cc_1a11ecb029164e055f28f4123ce3748862" kindref="member">hash</ref>,<sp/>pindex,<sp/><ref refid="util_8h_1a0c5a06b50cd805b1923552114494c029" kindref="member">GetTimeMicros</ref>(),<sp/>nQueuedValidatedHeaders,<sp/>pindex<sp/>!=<sp/>NULL};</highlight></codeline>
<codeline lineno="438"><highlight class="normal"><sp/><sp/><sp/><sp/>nQueuedValidatedHeaders<sp/>+=<sp/>newentry.fValidatedHeaders;</highlight></codeline>
<codeline lineno="439"><highlight class="normal"><sp/><sp/><sp/><sp/>list&lt;QueuedBlock&gt;::iterator<sp/>it<sp/>=<sp/>state-&gt;vBlocksInFlight.insert(state-&gt;vBlocksInFlight.end(),<sp/>newentry);</highlight></codeline>
<codeline lineno="440"><highlight class="normal"><sp/><sp/><sp/><sp/>state-&gt;nBlocksInFlight++;</highlight></codeline>
<codeline lineno="441"><highlight class="normal"><sp/><sp/><sp/><sp/>mapBlocksInFlight[<ref refid="cache_8cc_1a11ecb029164e055f28f4123ce3748862" kindref="member">hash</ref>]<sp/>=<sp/>std::make_pair(nodeid,<sp/>it);</highlight></codeline>
<codeline lineno="442"><highlight class="normal">}</highlight></codeline>
<codeline lineno="443"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>anon<sp/>namespace</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="444"><highlight class="normal"></highlight></codeline>
<codeline lineno="445" refid="main_8h_1af0793c7c14e94d2d642f4ac89067a429" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="main_8cpp_1af0793c7c14e94d2d642f4ac89067a429" kindref="member">GetNodeStateStats</ref>(<ref refid="net_8h_1a954d746a58632565552615fd0a4ee660" kindref="member">NodeId</ref><sp/>nodeid,<sp/><ref refid="struct_c_node_state_stats" kindref="compound">CNodeStateStats</ref><sp/>&amp;<ref refid="db__bench_8cc_1a5925d216740c89f43482df806fd14e8c" kindref="member">stats</ref>)<sp/>{</highlight></codeline>
<codeline lineno="446"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="sync_8h_1a911fe23f057c2fe5aad629162d6c99d0" kindref="member">LOCK</ref>(cs_main);</highlight></codeline>
<codeline lineno="447"><highlight class="normal"><sp/><sp/><sp/><sp/>CNodeState<sp/>*state<sp/>=<sp/>State(nodeid);</highlight></codeline>
<codeline lineno="448"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(state<sp/>==<sp/>NULL)</highlight></codeline>
<codeline lineno="449"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="450"><highlight class="normal"><sp/><sp/><sp/><sp/>stats.<ref refid="struct_c_node_state_stats_1a62c2243d09166c1daaad84519700da3c" kindref="member">nMisbehavior</ref><sp/>=<sp/>state-&gt;nMisbehavior;</highlight></codeline>
<codeline lineno="451"><highlight class="normal"><sp/><sp/><sp/><sp/>stats.<ref refid="struct_c_node_state_stats_1a7646deac801098e973a5bc50202f92cd" kindref="member">nSyncHeight</ref><sp/>=<sp/>state-&gt;pindexBestKnownBlock<sp/>?<sp/>state-&gt;pindexBestKnownBlock-&gt;nHeight<sp/>:<sp/>-1;</highlight></codeline>
<codeline lineno="452"><highlight class="normal"><sp/><sp/><sp/><sp/>stats.<ref refid="struct_c_node_state_stats_1a67c910a57285a63bbf0bb88ea7a9ca05" kindref="member">nCommonHeight</ref><sp/>=<sp/>state-&gt;pindexLastCommonBlock<sp/>?<sp/>state-&gt;pindexLastCommonBlock-&gt;nHeight<sp/>:<sp/>-1;</highlight></codeline>
<codeline lineno="453"><highlight class="normal"><sp/><sp/><sp/><sp/>BOOST_FOREACH(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>QueuedBlock&amp;<sp/>queue,<sp/>state-&gt;vBlocksInFlight)<sp/>{</highlight></codeline>
<codeline lineno="454"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(queue.pindex)</highlight></codeline>
<codeline lineno="455"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stats.<ref refid="struct_c_node_state_stats_1a4b03fd8ecaa9268f7eca836e5e79c35a" kindref="member">vHeightInFlight</ref>.push_back(queue.pindex-&gt;nHeight);</highlight></codeline>
<codeline lineno="456"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="457"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="458"><highlight class="normal">}</highlight></codeline>
<codeline lineno="459"><highlight class="normal"></highlight></codeline>
<codeline lineno="460" refid="main_8h_1ab02615ff65f91d69f8d786ec900baa8a" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="main_8cpp_1ab02615ff65f91d69f8d786ec900baa8a" kindref="member">RegisterNodeSignals</ref>(<ref refid="struct_c_node_signals" kindref="compound">CNodeSignals</ref>&amp;<sp/>nodeSignals)</highlight></codeline>
<codeline lineno="461"><highlight class="normal">{</highlight></codeline>
<codeline lineno="462"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//nodeSignals.GetHeight.connect(&amp;GetHeight);<sp/>//TODO<sp/>(AA):<sp/>implement<sp/>GetHeight</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="463"><highlight class="normal"><sp/><sp/><sp/><sp/>nodeSignals.<ref refid="struct_c_node_signals_1a9d5d5e496f424ee3331b3dcb0a0c558b" kindref="member">ProcessMessages</ref>.connect(&amp;<ref refid="main_8cpp_1a196f9318f02448b85b28d612698934fd" kindref="member">ProcessMessages</ref>);</highlight></codeline>
<codeline lineno="464"><highlight class="normal"><sp/><sp/><sp/><sp/>nodeSignals.<ref refid="struct_c_node_signals_1a72f761e2001b2cd5355b20e1168bf903" kindref="member">SendMessages</ref>.connect(&amp;<ref refid="main_8cpp_1a711a5bdb30c9c9bbdc83011b1cbbe2f3" kindref="member">SendMessages</ref>);</highlight></codeline>
<codeline lineno="465"><highlight class="normal"><sp/><sp/><sp/><sp/>nodeSignals.<ref refid="struct_c_node_signals_1a137e1854c9fea8a56e5f30be76da8b86" kindref="member">InitializeNode</ref>.connect(&amp;InitializeNode);</highlight></codeline>
<codeline lineno="466"><highlight class="normal"><sp/><sp/><sp/><sp/>nodeSignals.<ref refid="struct_c_node_signals_1a4fb2ed0335cbfa8daf5f43a0b42ec481" kindref="member">FinalizeNode</ref>.connect(&amp;FinalizeNode);</highlight></codeline>
<codeline lineno="467"><highlight class="normal">}</highlight></codeline>
<codeline lineno="468"><highlight class="normal"></highlight></codeline>
<codeline lineno="469" refid="main_8h_1a3ef0cc6e9d9d6435ee2a5569244d6ebd" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="main_8cpp_1a3ef0cc6e9d9d6435ee2a5569244d6ebd" kindref="member">UnregisterNodeSignals</ref>(<ref refid="struct_c_node_signals" kindref="compound">CNodeSignals</ref>&amp;<sp/>nodeSignals)</highlight></codeline>
<codeline lineno="470"><highlight class="normal">{</highlight></codeline>
<codeline lineno="471"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//nodeSignals.GetHeight.disconnect(&amp;GetHeight);<sp/>//TODO<sp/>(AA):<sp/>implement<sp/>GetHeight</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="472"><highlight class="normal"><sp/><sp/><sp/><sp/>nodeSignals.<ref refid="struct_c_node_signals_1a9d5d5e496f424ee3331b3dcb0a0c558b" kindref="member">ProcessMessages</ref>.disconnect(&amp;<ref refid="main_8cpp_1a196f9318f02448b85b28d612698934fd" kindref="member">ProcessMessages</ref>);</highlight></codeline>
<codeline lineno="473"><highlight class="normal"><sp/><sp/><sp/><sp/>nodeSignals.<ref refid="struct_c_node_signals_1a72f761e2001b2cd5355b20e1168bf903" kindref="member">SendMessages</ref>.disconnect(&amp;<ref refid="main_8cpp_1a711a5bdb30c9c9bbdc83011b1cbbe2f3" kindref="member">SendMessages</ref>);</highlight></codeline>
<codeline lineno="474"><highlight class="normal"><sp/><sp/><sp/><sp/>nodeSignals.<ref refid="struct_c_node_signals_1a137e1854c9fea8a56e5f30be76da8b86" kindref="member">InitializeNode</ref>.disconnect(&amp;InitializeNode);</highlight></codeline>
<codeline lineno="475"><highlight class="normal"><sp/><sp/><sp/><sp/>nodeSignals.<ref refid="struct_c_node_signals_1a4fb2ed0335cbfa8daf5f43a0b42ec481" kindref="member">FinalizeNode</ref>.disconnect(&amp;FinalizeNode);</highlight></codeline>
<codeline lineno="476"><highlight class="normal">}</highlight></codeline>
<codeline lineno="477"><highlight class="normal"></highlight></codeline>
<codeline lineno="478" refid="main_8h_1af573b79d097a9ffe6503869f838ccf42" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="main_8cpp_1a183c4f45aed59599d1875a80d0cf58ca" kindref="member">AbortNode</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;strMessage,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;userMessage)<sp/>{</highlight></codeline>
<codeline lineno="479"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="util_8cpp_1a396fd0b4e52260e1ddf379fa6e09d887" kindref="member">strMiscWarning</ref><sp/>=<sp/>strMessage;</highlight></codeline>
<codeline lineno="480"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="util_8h_1afc02c0a4258fedfb316be612bb659ba8" kindref="member">LogPrintf</ref>(</highlight><highlight class="stringliteral">&quot;***<sp/>%s\n&quot;</highlight><highlight class="normal">,<sp/>strMessage);</highlight></codeline>
<codeline lineno="481"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="init_8cpp_1a4fe31b510fc1c2b95321cedb9f89e8de" kindref="member">uiInterface</ref>.<ref refid="class_c_client_u_i_interface_1ab3f23c730300df11cf9ff369fbae0635" kindref="member">ThreadSafeMessageBox</ref>(</highlight></codeline>
<codeline lineno="482"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>userMessage.empty()<sp/>?<sp/><ref refid="ui__interface_8h_1aad133bb6103b53cebf03fd01e2f11ba1" kindref="member">_</ref>(</highlight><highlight class="stringliteral">&quot;Error:<sp/>A<sp/>fatal<sp/>internal<sp/>error<sp/>occured,<sp/>see<sp/>debug.log<sp/>for<sp/>details&quot;</highlight><highlight class="normal">)<sp/>:<sp/>userMessage,</highlight></codeline>
<codeline lineno="483"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">,<sp/><ref refid="class_c_client_u_i_interface_1a568cf07ecac3fac224d63b42a32e8bc1a0551e67c07eb6a81edf6e43fed89759f" kindref="member">CClientUIInterface::MSG_ERROR</ref>);</highlight></codeline>
<codeline lineno="484"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="init_8cpp_1ac7140c7327b1e6a8d46470b1cd0e8e1b" kindref="member">StartShutdown</ref>();</highlight></codeline>
<codeline lineno="485"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="486"><highlight class="normal">}</highlight></codeline>
<codeline lineno="487"><highlight class="normal"></highlight></codeline>
<codeline lineno="488" refid="main_8cpp_1a13555a2da794ce558ee767ce6632c02b" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="main_8cpp_1a13555a2da794ce558ee767ce6632c02b" kindref="member">GetHeight</ref>()</highlight></codeline>
<codeline lineno="489"><highlight class="normal">{</highlight></codeline>
<codeline lineno="490"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(</highlight><highlight class="keyword">true</highlight><highlight class="normal">){</highlight></codeline>
<codeline lineno="491"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="sync_8h_1aca08e7299069c2d60b8aa726fc550612" kindref="member">TRY_LOCK</ref>(cs_main,<sp/>lockMain);</highlight></codeline>
<codeline lineno="492"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!lockMain)<sp/>{<sp/><ref refid="util_8h_1ac635182d3e845eda4af4fa5ab31609da" kindref="member">MilliSleep</ref>(50);<sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;<sp/>}</highlight></codeline>
<codeline lineno="493"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="main_8cpp_1a843f1984796a7e44a9e23fccd6a8af34" kindref="member">nBestHeight</ref>;</highlight></codeline>
<codeline lineno="494"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="495"><highlight class="normal">}</highlight></codeline>
<codeline lineno="496"><highlight class="normal"></highlight></codeline>
<codeline lineno="498"><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="499"><highlight class="normal"></highlight><highlight class="comment">//<sp/>mapOrphanTransactions</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="500"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="501" refid="main_8cpp_1aabd8ff89de652a080953f7cc6eccc979" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="main_8cpp_1aabd8ff89de652a080953f7cc6eccc979" kindref="member">AddOrphanTx</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_c_transaction" kindref="compound">CTransaction</ref>&amp;<sp/>tx,<sp/><ref refid="net_8h_1a954d746a58632565552615fd0a4ee660" kindref="member">NodeId</ref><sp/>peer)</highlight></codeline>
<codeline lineno="502"><highlight class="normal">{</highlight></codeline>
<codeline lineno="503"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classuint256" kindref="compound">uint256</ref><sp/>hash<sp/>=<sp/>tx.<ref refid="class_c_transaction_1a3f8666d2a275c40da14bd5eaf47dc004" kindref="member">GetHash</ref>();</highlight></codeline>
<codeline lineno="504"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mapOrphanTransactions.count(hash))</highlight></codeline>
<codeline lineno="505"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="506"><highlight class="normal"></highlight></codeline>
<codeline lineno="507"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Ignore<sp/>big<sp/>transactions,<sp/>to<sp/>avoid<sp/>a</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="508"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>send-big-orphans<sp/>memory<sp/>exhaustion<sp/>attack.<sp/>If<sp/>a<sp/>peer<sp/>has<sp/>a<sp/>legitimate</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="509"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>large<sp/>transaction<sp/>with<sp/>a<sp/>missing<sp/>parent<sp/>then<sp/>we<sp/>assume</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="510"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>it<sp/>will<sp/>rebroadcast<sp/>it<sp/>later,<sp/>after<sp/>the<sp/>parent<sp/>transaction(s)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="511"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>have<sp/>been<sp/>mined<sp/>or<sp/>received.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="512"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>10,000<sp/>orphans,<sp/>each<sp/>of<sp/>which<sp/>is<sp/>at<sp/>most<sp/>5,000<sp/>bytes<sp/>big<sp/>is</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="513"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>at<sp/>most<sp/>500<sp/>megabytes<sp/>of<sp/>orphans:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="514"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>sz<sp/>=<sp/>tx.GetSerializeSize(<ref refid="serialize_8h_1a6b7b47dd702d9e331586d485013fd1eaa652754eeaf79fba4fcf4c18597a6961c" kindref="member">SER_NETWORK</ref>,<sp/><ref refid="class_c_transaction_1aa728c112d5cdd174ee156a67107f1cf4" kindref="member">CTransaction::CURRENT_VERSION</ref>);</highlight></codeline>
<codeline lineno="515"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(sz<sp/>&gt;<sp/>5000)</highlight></codeline>
<codeline lineno="516"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="517"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>LogPrint(</highlight><highlight class="stringliteral">&quot;mempool&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;ignoring<sp/>large<sp/>orphan<sp/>tx<sp/>(size:<sp/>%u,<sp/>hash:<sp/>%s)\n&quot;</highlight><highlight class="normal">,<sp/>sz,<sp/>hash.<ref refid="classbase__uint_1ac3080a72402cadf28dbc9f9b69cc60be" kindref="member">ToString</ref>());</highlight></codeline>
<codeline lineno="518"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="519"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="520"><highlight class="normal"></highlight></codeline>
<codeline lineno="521"><highlight class="normal"><sp/><sp/><sp/><sp/>mapOrphanTransactions[<ref refid="cache_8cc_1a11ecb029164e055f28f4123ce3748862" kindref="member">hash</ref>].tx<sp/>=<sp/>tx;</highlight></codeline>
<codeline lineno="522"><highlight class="normal"><sp/><sp/><sp/><sp/>mapOrphanTransactions[<ref refid="cache_8cc_1a11ecb029164e055f28f4123ce3748862" kindref="member">hash</ref>].fromPeer<sp/>=<sp/>peer;</highlight></codeline>
<codeline lineno="523"><highlight class="normal"><sp/><sp/><sp/><sp/>BOOST_FOREACH(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_c_tx_in" kindref="compound">CTxIn</ref>&amp;<sp/>txin,<sp/>tx.<ref refid="class_c_transaction_1a53fa787e4ea57374b4fa2a28e9a957b2" kindref="member">vin</ref>)</highlight></codeline>
<codeline lineno="524"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mapOrphanTransactionsByPrev[txin.<ref refid="class_c_tx_in_1aed9312051a25380cbd7f123408ab7c20" kindref="member">prevout</ref>.<ref refid="class_c_out_point_1af131c7194a660558b0ff158f4efa7a28" kindref="member">hash</ref>].insert(hash);</highlight></codeline>
<codeline lineno="525"><highlight class="normal"></highlight></codeline>
<codeline lineno="526"><highlight class="normal"><sp/><sp/><sp/><sp/>LogPrint(</highlight><highlight class="stringliteral">&quot;mempool&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;stored<sp/>orphan<sp/>tx<sp/>%s<sp/>(mapsz<sp/>%u<sp/>prevsz<sp/>%u)\n&quot;</highlight><highlight class="normal">,<sp/>hash.<ref refid="classbase__uint_1ac3080a72402cadf28dbc9f9b69cc60be" kindref="member">ToString</ref>(),</highlight></codeline>
<codeline lineno="527"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mapOrphanTransactions.size(),<sp/>mapOrphanTransactionsByPrev.size());</highlight></codeline>
<codeline lineno="528"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="529"><highlight class="normal">}</highlight></codeline>
<codeline lineno="530"><highlight class="normal"></highlight></codeline>
<codeline lineno="531"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>EraseOrphanTx(<ref refid="classuint256" kindref="compound">uint256</ref><sp/>hash)</highlight></codeline>
<codeline lineno="532"><highlight class="normal">{</highlight></codeline>
<codeline lineno="533"><highlight class="normal"><sp/><sp/><sp/><sp/>map&lt;uint256,<sp/>COrphanTx&gt;::iterator<sp/>it<sp/>=<sp/>mapOrphanTransactions.find(hash);</highlight></codeline>
<codeline lineno="534"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(it<sp/>==<sp/>mapOrphanTransactions.end())</highlight></codeline>
<codeline lineno="535"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="536"><highlight class="normal"><sp/><sp/><sp/><sp/>BOOST_FOREACH(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_c_tx_in" kindref="compound">CTxIn</ref>&amp;<sp/>txin,<sp/>it-&gt;second.tx.vin)</highlight></codeline>
<codeline lineno="537"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="538"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>map&lt;uint256,<sp/>set&lt;uint256&gt;<sp/>&gt;::iterator<sp/>itPrev<sp/>=<sp/>mapOrphanTransactionsByPrev.find(txin.<ref refid="class_c_tx_in_1aed9312051a25380cbd7f123408ab7c20" kindref="member">prevout</ref>.<ref refid="class_c_out_point_1af131c7194a660558b0ff158f4efa7a28" kindref="member">hash</ref>);</highlight></codeline>
<codeline lineno="539"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(itPrev<sp/>==<sp/>mapOrphanTransactionsByPrev.end())</highlight></codeline>
<codeline lineno="540"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="541"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>itPrev-&gt;second.erase(hash);</highlight></codeline>
<codeline lineno="542"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(itPrev-&gt;second.empty())</highlight></codeline>
<codeline lineno="543"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mapOrphanTransactionsByPrev.erase(itPrev);</highlight></codeline>
<codeline lineno="544"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="545"><highlight class="normal"><sp/><sp/><sp/><sp/>mapOrphanTransactions.erase(it);</highlight></codeline>
<codeline lineno="546"><highlight class="normal">}</highlight></codeline>
<codeline lineno="547"><highlight class="normal"></highlight></codeline>
<codeline lineno="548" refid="main_8cpp_1a03c1ac9fc43feb8f1d67e92f17cceb38" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="main_8cpp_1a03c1ac9fc43feb8f1d67e92f17cceb38" kindref="member">LimitOrphanTxSize</ref>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nMaxOrphans)</highlight></codeline>
<codeline lineno="549"><highlight class="normal">{</highlight></codeline>
<codeline lineno="550"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nEvicted<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="551"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(mapOrphanTransactions.size()<sp/>&gt;<sp/>nMaxOrphans)</highlight></codeline>
<codeline lineno="552"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="553"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Evict<sp/>a<sp/>random<sp/>orphan:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="554"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classuint256" kindref="compound">uint256</ref><sp/>randomhash<sp/>=<sp/><ref refid="util_8cpp_1af3aedae75efabb170337a497457f7ecf" kindref="member">GetRandHash</ref>();</highlight></codeline>
<codeline lineno="555"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>map&lt;uint256,<sp/>COrphanTx&gt;::iterator<sp/>it<sp/>=<sp/>mapOrphanTransactions.lower_bound(randomhash);</highlight></codeline>
<codeline lineno="556"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(it<sp/>==<sp/>mapOrphanTransactions.end())</highlight></codeline>
<codeline lineno="557"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>it<sp/>=<sp/>mapOrphanTransactions.begin();</highlight></codeline>
<codeline lineno="558"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EraseOrphanTx(it-&gt;first);</highlight></codeline>
<codeline lineno="559"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++nEvicted;</highlight></codeline>
<codeline lineno="560"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="561"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>nEvicted;</highlight></codeline>
<codeline lineno="562"><highlight class="normal">}</highlight></codeline>
<codeline lineno="563"><highlight class="normal"></highlight></codeline>
<codeline lineno="565"><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="566"><highlight class="normal"></highlight><highlight class="comment">//<sp/>CTransaction<sp/>and<sp/>CTxIndex</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="567"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="568"><highlight class="normal"></highlight></codeline>
<codeline lineno="569" refid="main_8cpp_1acd163a09d0e4384ebe85dead57730dd7" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="main_8cpp_1acd163a09d0e4384ebe85dead57730dd7" kindref="member">IsStandardTx</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_c_transaction" kindref="compound">CTransaction</ref>&amp;<sp/>tx,<sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal">&amp;<sp/>reason)</highlight></codeline>
<codeline lineno="570"><highlight class="normal">{</highlight></codeline>
<codeline lineno="571"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(tx.<ref refid="class_c_transaction_1a6c29bdd822859c7b21b7b6c22dca6825" kindref="member">nVersion</ref><sp/>&gt;<sp/><ref refid="class_c_transaction_1aa728c112d5cdd174ee156a67107f1cf4" kindref="member">CTransaction::CURRENT_VERSION</ref><sp/>||<sp/>tx.<ref refid="class_c_transaction_1a6c29bdd822859c7b21b7b6c22dca6825" kindref="member">nVersion</ref><sp/>&lt;<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="572"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>reason<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;version&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="573"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="574"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="575"><highlight class="normal"></highlight></codeline>
<codeline lineno="576"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Treat<sp/>non-final<sp/>transactions<sp/>as<sp/>non-standard<sp/>to<sp/>prevent<sp/>a<sp/>specific<sp/>type</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="577"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>of<sp/>double-spend<sp/>attack,<sp/>as<sp/>well<sp/>as<sp/>DoS<sp/>attacks.<sp/>(if<sp/>the<sp/>transaction</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="578"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>can&apos;t<sp/>be<sp/>mined,<sp/>the<sp/>attacker<sp/>isn&apos;t<sp/>expending<sp/>resources<sp/>broadcasting<sp/>it)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="579"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Basically<sp/>we<sp/>don&apos;t<sp/>want<sp/>to<sp/>propagate<sp/>transactions<sp/>that<sp/>can&apos;t<sp/>be<sp/>included<sp/>in</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="580"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>next<sp/>block.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="581"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="582"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>However,<sp/>IsFinalTx()<sp/>is<sp/>confusing...<sp/>Without<sp/>arguments,<sp/>it<sp/>uses</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="583"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>nBestHeight<sp/>to<sp/>evaluate<sp/>nLockTime;<sp/>when<sp/>a<sp/>block<sp/>is<sp/>accepted,<sp/>nBestHeight</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="584"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>is<sp/>set<sp/>to<sp/>the<sp/>value<sp/>of<sp/>nHeight<sp/>in<sp/>the<sp/>block.<sp/>However,<sp/>when<sp/>IsFinalTx()</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="585"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>is<sp/>called<sp/>within<sp/>CBlock::AcceptBlock(),<sp/>the<sp/>height<sp/>of<sp/>the<sp/>block<sp/>*being*</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="586"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>evaluated<sp/>is<sp/>what<sp/>is<sp/>used.<sp/>Thus<sp/>if<sp/>we<sp/>want<sp/>to<sp/>know<sp/>if<sp/>a<sp/>transaction<sp/>can</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="587"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>be<sp/>part<sp/>of<sp/>the<sp/>*next*<sp/>block,<sp/>we<sp/>need<sp/>to<sp/>call<sp/>IsFinalTx()<sp/>with<sp/>one<sp/>more</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="588"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>than<sp/>nBestHeight.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="589"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="590"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Timestamps<sp/>on<sp/>the<sp/>other<sp/>hand<sp/>don&apos;t<sp/>get<sp/>any<sp/>special<sp/>treatment,<sp/>because<sp/>we</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="591"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>can&apos;t<sp/>know<sp/>what<sp/>timestamp<sp/>the<sp/>next<sp/>block<sp/>will<sp/>have,<sp/>and<sp/>there<sp/>aren&apos;t</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="592"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>timestamp<sp/>applications<sp/>where<sp/>it<sp/>matters.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="593"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="main_8cpp_1adc332cd7ac94e639bb4239618341be19" kindref="member">IsFinalTx</ref>(tx,<sp/>nBestHeight<sp/>+<sp/>1))<sp/>{</highlight></codeline>
<codeline lineno="594"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>reason<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;non-final&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="595"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="596"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="597"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>nTime<sp/>has<sp/>different<sp/>purpose<sp/>from<sp/>nLockTime<sp/>but<sp/>can<sp/>be<sp/>used<sp/>in<sp/>similar<sp/>attacks</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="598"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(tx.<ref refid="class_c_transaction_1a8ccb4b6020669bc562095e3417715e41" kindref="member">nTime</ref><sp/>&gt;<sp/><ref refid="primitives_2block_8h_1a92e30c263b07cab75b295dafda535302" kindref="member">FutureDrift</ref>(<ref refid="timedata_8cpp_1a09f81b9c7650f898cf3cf305b87547e6" kindref="member">GetAdjustedTime</ref>(),<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">))<sp/>{</highlight></codeline>
<codeline lineno="599"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>reason<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;time-too-new&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="600"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="601"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="602"><highlight class="normal"></highlight></codeline>
<codeline lineno="603"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Extremely<sp/>large<sp/>transactions<sp/>with<sp/>lots<sp/>of<sp/>inputs<sp/>can<sp/>cost<sp/>the<sp/>network</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="604"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>almost<sp/>as<sp/>much<sp/>to<sp/>process<sp/>as<sp/>they<sp/>cost<sp/>the<sp/>sender<sp/>in<sp/>fees,<sp/>because</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="605"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>computing<sp/>signature<sp/>hashes<sp/>is<sp/>O(ninputs*txsize).<sp/>Limiting<sp/>transactions</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="606"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>to<sp/>MAX_STANDARD_TX_SIZE<sp/>mitigates<sp/>CPU<sp/>exhaustion<sp/>attacks.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="607"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>sz<sp/>=<sp/>tx.GetSerializeSize(<ref refid="serialize_8h_1a6b7b47dd702d9e331586d485013fd1eaa652754eeaf79fba4fcf4c18597a6961c" kindref="member">SER_NETWORK</ref>,<sp/><ref refid="class_c_transaction_1aa728c112d5cdd174ee156a67107f1cf4" kindref="member">CTransaction::CURRENT_VERSION</ref>);</highlight></codeline>
<codeline lineno="608"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(sz<sp/>&gt;=<sp/>MAX_STANDARD_TX_SIZE)<sp/>{</highlight></codeline>
<codeline lineno="609"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>reason<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;tx-size&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="610"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="611"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="612"><highlight class="normal"></highlight></codeline>
<codeline lineno="613"><highlight class="normal"><sp/><sp/><sp/><sp/>BOOST_FOREACH(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_c_tx_in" kindref="compound">CTxIn</ref>&amp;<sp/>txin,<sp/>tx.<ref refid="class_c_transaction_1a53fa787e4ea57374b4fa2a28e9a957b2" kindref="member">vin</ref>)</highlight></codeline>
<codeline lineno="614"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="615"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Biggest<sp/>&apos;standard&apos;<sp/>txin<sp/>is<sp/>a<sp/>15-of-15<sp/>P2SH<sp/>multisig<sp/>with<sp/>compressed</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="616"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>keys.<sp/>(remember<sp/>the<sp/>520<sp/>byte<sp/>limit<sp/>on<sp/>redeemScript<sp/>size)<sp/>That<sp/>works</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="617"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>out<sp/>to<sp/>a<sp/>(15*(33+1))+3=513<sp/>byte<sp/>redeemScript,<sp/>513+1+15*(73+1)+3=1627</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="618"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>bytes<sp/>of<sp/>scriptSig,<sp/>which<sp/>we<sp/>round<sp/>off<sp/>to<sp/>1650<sp/>bytes<sp/>for<sp/>some<sp/>minor</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="619"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>future-proofing.<sp/>That&apos;s<sp/>also<sp/>enough<sp/>to<sp/>spend<sp/>a<sp/>20-of-20</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="620"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>CHECKMULTISIG<sp/>scriptPubKey,<sp/>though<sp/>such<sp/>a<sp/>scriptPubKey<sp/>is<sp/>not</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="621"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>considered<sp/>standard)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="622"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(txin.<ref refid="class_c_tx_in_1aba540fd902366210a6ad6cd9a18fe763" kindref="member">scriptSig</ref>.size()<sp/>&gt;<sp/>1650)<sp/>{</highlight></codeline>
<codeline lineno="623"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>reason<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;scriptsig-size&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="624"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="625"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="626"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!txin.<ref refid="class_c_tx_in_1aba540fd902366210a6ad6cd9a18fe763" kindref="member">scriptSig</ref>.<ref refid="class_c_script_1a0a29e513d962967c4351828780ab4d9f" kindref="member">IsPushOnly</ref>())<sp/>{</highlight></codeline>
<codeline lineno="627"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>reason<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;scriptsig-not-pushonly&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="628"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="629"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="630"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!txin.<ref refid="class_c_tx_in_1aba540fd902366210a6ad6cd9a18fe763" kindref="member">scriptSig</ref>.<ref refid="class_c_script_1afb9f817abc9674ab0278b0eb32d10c39" kindref="member">HasCanonicalPushes</ref>())<sp/>{</highlight></codeline>
<codeline lineno="631"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>reason<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;scriptsig-non-canonical-push&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="632"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="633"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="634"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="635"><highlight class="normal"></highlight></codeline>
<codeline lineno="636"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nDataOut<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="637"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="script_8h_1a750f89f617f934820d5371be790e09ad" kindref="member">txnouttype</ref><sp/>whichType;</highlight></codeline>
<codeline lineno="638"><highlight class="normal"><sp/><sp/><sp/><sp/>BOOST_FOREACH(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_c_tx_out" kindref="compound">CTxOut</ref>&amp;<sp/>txout,<sp/>tx.<ref refid="class_c_transaction_1ae42c0032a464c3054c508017c7d040ef" kindref="member">vout</ref>)<sp/>{</highlight></codeline>
<codeline lineno="639"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!::<ref refid="script_8cpp_1abb2b48ecfd43dcb01e25d9d4c333a340" kindref="member">IsStandard</ref>(txout.<ref refid="class_c_tx_out_1a25bf3f2f4befb22a6a0be45784fe57e2" kindref="member">scriptPubKey</ref>,<sp/>whichType))<sp/>{</highlight></codeline>
<codeline lineno="640"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>reason<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;scriptpubkey&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="641"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="642"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="643"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(whichType<sp/>==<sp/><ref refid="script_8h_1a750f89f617f934820d5371be790e09adacac155120bd826d44af0b2dc0fd2915a" kindref="member">TX_NULL_DATA</ref>)</highlight></codeline>
<codeline lineno="644"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nDataOut++;</highlight></codeline>
<codeline lineno="645"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(txout.<ref refid="class_c_tx_out_1ab278ecef3817a972cb6bc5360d13f197" kindref="member">nValue</ref><sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="646"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>reason<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;dust&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="647"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="648"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="649"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!txout.<ref refid="class_c_tx_out_1a25bf3f2f4befb22a6a0be45784fe57e2" kindref="member">scriptPubKey</ref>.<ref refid="class_c_script_1afb9f817abc9674ab0278b0eb32d10c39" kindref="member">HasCanonicalPushes</ref>())<sp/>{</highlight></codeline>
<codeline lineno="650"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>reason<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;scriptpubkey-non-canonical-push&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="651"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="652"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="653"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="654"><highlight class="normal"></highlight></codeline>
<codeline lineno="655"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>not<sp/>more<sp/>than<sp/>one<sp/>data<sp/>txout<sp/>per<sp/>non-data<sp/>txout<sp/>is<sp/>permitted</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="656"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>only<sp/>one<sp/>data<sp/>txout<sp/>is<sp/>permitted<sp/>too</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="657"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(nDataOut<sp/>&gt;<sp/>1<sp/>&amp;&amp;<sp/>nDataOut<sp/>&gt;<sp/>tx.<ref refid="class_c_transaction_1ae42c0032a464c3054c508017c7d040ef" kindref="member">vout</ref>.size()/2)<sp/>{</highlight></codeline>
<codeline lineno="658"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>reason<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;multi-op-return&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="659"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="660"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="661"><highlight class="normal"></highlight></codeline>
<codeline lineno="662"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="663"><highlight class="normal">}</highlight></codeline>
<codeline lineno="664"><highlight class="normal"></highlight></codeline>
<codeline lineno="665" refid="main_8h_1aa7ca31ac11bff224c6b0ac27fccce7b5" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="main_8cpp_1adc332cd7ac94e639bb4239618341be19" kindref="member">IsFinalTx</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_c_transaction" kindref="compound">CTransaction</ref><sp/>&amp;tx,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nBlockHeight,<sp/><ref refid="stdint_8h_1adec1df1b8b51cb32b77e5b86fff46471" kindref="member">int64_t</ref><sp/>nBlockTime)</highlight></codeline>
<codeline lineno="666"><highlight class="normal">{</highlight></codeline>
<codeline lineno="667"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="sync_8h_1acd61d0cb3b49f367728193720014aed0" kindref="member">AssertLockHeld</ref>(cs_main);</highlight></codeline>
<codeline lineno="668"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Time<sp/>based<sp/>nLockTime<sp/>implemented<sp/>in<sp/>0.1.6</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="669"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(tx.<ref refid="class_c_transaction_1ab01e4e451d2f3f84b01380979c8fdacc" kindref="member">nLockTime</ref><sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="670"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="671"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(nBlockHeight<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="672"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nBlockHeight<sp/>=<sp/><ref refid="main_8cpp_1a843f1984796a7e44a9e23fccd6a8af34" kindref="member">nBestHeight</ref>;</highlight></codeline>
<codeline lineno="673"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(nBlockTime<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="674"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nBlockTime<sp/>=<sp/><ref refid="timedata_8cpp_1a09f81b9c7650f898cf3cf305b87547e6" kindref="member">GetAdjustedTime</ref>();</highlight></codeline>
<codeline lineno="675"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((<ref refid="stdint_8h_1adec1df1b8b51cb32b77e5b86fff46471" kindref="member">int64_t</ref>)tx.<ref refid="class_c_transaction_1ab01e4e451d2f3f84b01380979c8fdacc" kindref="member">nLockTime</ref><sp/>&lt;<sp/>((<ref refid="stdint_8h_1adec1df1b8b51cb32b77e5b86fff46471" kindref="member">int64_t</ref>)tx.<ref refid="class_c_transaction_1ab01e4e451d2f3f84b01380979c8fdacc" kindref="member">nLockTime</ref><sp/>&lt;<sp/>LOCKTIME_THRESHOLD<sp/>?<sp/>(<ref refid="stdint_8h_1adec1df1b8b51cb32b77e5b86fff46471" kindref="member">int64_t</ref>)nBlockHeight<sp/>:<sp/>nBlockTime))</highlight></codeline>
<codeline lineno="676"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="677"><highlight class="normal"><sp/><sp/><sp/><sp/>BOOST_FOREACH(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_c_tx_in" kindref="compound">CTxIn</ref>&amp;<sp/>txin,<sp/>tx.<ref refid="class_c_transaction_1a53fa787e4ea57374b4fa2a28e9a957b2" kindref="member">vin</ref>)</highlight></codeline>
<codeline lineno="678"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!txin.<ref refid="class_c_tx_in_1aa8110f711e2cdecff45c294ba2ee0a26" kindref="member">IsFinal</ref>())</highlight></codeline>
<codeline lineno="679"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="680"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="681"><highlight class="normal">}</highlight></codeline>
<codeline lineno="682"><highlight class="normal"></highlight></codeline>
<codeline lineno="683"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="684"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Check<sp/>transaction<sp/>inputs<sp/>to<sp/>mitigate<sp/>two</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="685"><highlight class="normal"></highlight><highlight class="comment">//<sp/>potential<sp/>denial-of-service<sp/>attacks:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="686"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="687"><highlight class="normal"></highlight><highlight class="comment">//<sp/>1.<sp/>scriptSigs<sp/>with<sp/>extra<sp/>data<sp/>stuffed<sp/>into<sp/>them,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="688"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>not<sp/>consumed<sp/>by<sp/>scriptPubKey<sp/>(or<sp/>P2SH<sp/>script)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="689"><highlight class="normal"></highlight><highlight class="comment">//<sp/>2.<sp/>P2SH<sp/>scripts<sp/>with<sp/>a<sp/>crazy<sp/>number<sp/>of<sp/>expensive</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="690"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>CHECKSIG/CHECKMULTISIG<sp/>operations</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="691"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="692" refid="main_8h_1a29901e539b487e09c90ff90c7560bd9d" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="main_8cpp_1a29901e539b487e09c90ff90c7560bd9d" kindref="member">AreInputsStandard</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_c_transaction" kindref="compound">CTransaction</ref>&amp;<sp/>tx,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="main_8h_1a05bae354566c88f7dca5ad13aaf8b30f" kindref="member">MapPrevTx</ref>&amp;<sp/>mapInputs)</highlight></codeline>
<codeline lineno="693"><highlight class="normal">{</highlight></codeline>
<codeline lineno="694"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(tx.<ref refid="class_c_transaction_1a274384ecbb50d71355cd287b7a6bca51" kindref="member">IsCoinBase</ref>())</highlight></codeline>
<codeline lineno="695"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;<sp/></highlight><highlight class="comment">//<sp/>Coinbases<sp/>don&apos;t<sp/>use<sp/>vin<sp/>normally</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="696"><highlight class="normal"></highlight></codeline>
<codeline lineno="697"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>tx.<ref refid="class_c_transaction_1a53fa787e4ea57374b4fa2a28e9a957b2" kindref="member">vin</ref>.size();<sp/>i++)</highlight></codeline>
<codeline lineno="698"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="699"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_c_transaction_po_s" kindref="compound">CTransactionPoS</ref><sp/>txPoS;</highlight></codeline>
<codeline lineno="700"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_c_tx_out" kindref="compound">CTxOut</ref>&amp;<sp/><ref refid="cache_8cc_1aabbd2f01bb8ec4a7a0128bce5f8cdb1b" kindref="member">prev</ref><sp/>=<sp/>txPoS.<ref refid="class_c_transaction_po_s_1aa49ca4acc89b51cbef362200175051b4" kindref="member">GetOutputFor</ref>(tx.<ref refid="class_c_transaction_1a53fa787e4ea57374b4fa2a28e9a957b2" kindref="member">vin</ref>[i],<sp/>mapInputs);</highlight></codeline>
<codeline lineno="701"><highlight class="normal"></highlight></codeline>
<codeline lineno="702"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vector&lt;vector&lt;unsigned<sp/>char&gt;<sp/>&gt;<sp/>vSolutions;</highlight></codeline>
<codeline lineno="703"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="script_8h_1a750f89f617f934820d5371be790e09ad" kindref="member">txnouttype</ref><sp/>whichType;</highlight></codeline>
<codeline lineno="704"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>get<sp/>the<sp/>scriptPubKey<sp/>corresponding<sp/>to<sp/>this<sp/>input:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="705"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_c_script" kindref="compound">CScript</ref>&amp;<sp/>prevScript<sp/>=<sp/>prev.<ref refid="class_c_tx_out_1a25bf3f2f4befb22a6a0be45784fe57e2" kindref="member">scriptPubKey</ref>;</highlight></codeline>
<codeline lineno="706"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="script_8cpp_1a6ee6be50bff44464e905680c6fcee6dc" kindref="member">Solver</ref>(prevScript,<sp/>whichType,<sp/>vSolutions))</highlight></codeline>
<codeline lineno="707"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="708"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nArgsExpected<sp/>=<sp/><ref refid="script_8cpp_1ab4cc63204abc3a5d815fedbfbfe0e5c2" kindref="member">ScriptSigArgsExpected</ref>(whichType,<sp/>vSolutions);</highlight></codeline>
<codeline lineno="709"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(nArgsExpected<sp/>&lt;<sp/>0)</highlight></codeline>
<codeline lineno="710"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="711"><highlight class="normal"></highlight></codeline>
<codeline lineno="712"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Transactions<sp/>with<sp/>extra<sp/>stuff<sp/>in<sp/>their<sp/>scriptSigs<sp/>are</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="713"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>non-standard.<sp/>Note<sp/>that<sp/>this<sp/>EvalScript()<sp/>call<sp/>will</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="714"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>be<sp/>quick,<sp/>because<sp/>if<sp/>there<sp/>are<sp/>any<sp/>operations</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="715"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>beside<sp/>&quot;push<sp/>data&quot;<sp/>in<sp/>the<sp/>scriptSig</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="716"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>IsStandard()<sp/>will<sp/>have<sp/>already<sp/>returned<sp/>false</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="717"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>and<sp/>this<sp/>method<sp/>isn&apos;t<sp/>called.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="718"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vector&lt;vector&lt;unsigned<sp/>char&gt;<sp/>&gt;<sp/>stack;</highlight></codeline>
<codeline lineno="719"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="script_8cpp_1a06faacc17cea79366513c22361475a5a" kindref="member">EvalScript</ref>(stack,<sp/>tx.<ref refid="class_c_transaction_1a53fa787e4ea57374b4fa2a28e9a957b2" kindref="member">vin</ref>[i].scriptSig,<sp/>tx,<sp/>i,<sp/><ref refid="script_8h_1a80155586fa275b28773c9b203f52cabaac14772d5583e6e6a1146e4ec51ae3fb0" kindref="member">SCRIPT_VERIFY_NONE</ref>,<sp/>0))</highlight></codeline>
<codeline lineno="720"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="721"><highlight class="normal"></highlight></codeline>
<codeline lineno="722"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(whichType<sp/>==<sp/><ref refid="script_8h_1a750f89f617f934820d5371be790e09adad3ca9da00b2a0e6f522a5942963936d7" kindref="member">TX_SCRIPTHASH</ref>)</highlight></codeline>
<codeline lineno="723"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="724"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(stack.empty())</highlight></codeline>
<codeline lineno="725"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="726"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_c_script" kindref="compound">CScript</ref><sp/>subscript(stack.back().begin(),<sp/>stack.back().end());</highlight></codeline>
<codeline lineno="727"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vector&lt;vector&lt;unsigned<sp/>char&gt;<sp/>&gt;<sp/>vSolutions2;</highlight></codeline>
<codeline lineno="728"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="script_8h_1a750f89f617f934820d5371be790e09ad" kindref="member">txnouttype</ref><sp/>whichType2;</highlight></codeline>
<codeline lineno="729"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="script_8cpp_1a6ee6be50bff44464e905680c6fcee6dc" kindref="member">Solver</ref>(subscript,<sp/>whichType2,<sp/>vSolutions2))</highlight></codeline>
<codeline lineno="730"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="731"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>tmpExpected<sp/>=<sp/><ref refid="script_8cpp_1ab4cc63204abc3a5d815fedbfbfe0e5c2" kindref="member">ScriptSigArgsExpected</ref>(whichType2,<sp/>vSolutions2);</highlight></codeline>
<codeline lineno="732"><highlight class="normal"></highlight></codeline>
<codeline lineno="733"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(whichType2<sp/>==<sp/><ref refid="script_8h_1a750f89f617f934820d5371be790e09adad3ca9da00b2a0e6f522a5942963936d7" kindref="member">TX_SCRIPTHASH</ref>)</highlight></codeline>
<codeline lineno="734"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="735"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(tmpExpected<sp/>&lt;<sp/>0)</highlight></codeline>
<codeline lineno="736"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="737"><highlight class="normal"></highlight></codeline>
<codeline lineno="738"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nArgsExpected<sp/>+=<sp/>tmpExpected;</highlight></codeline>
<codeline lineno="739"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="740"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="741"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="742"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Any<sp/>other<sp/>Script<sp/>with<sp/>less<sp/>than<sp/>15<sp/>sigops<sp/>OK:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="743"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>sigops<sp/>=<sp/>subscript.GetSigOpCount(</highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="744"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>...<sp/>extra<sp/>data<sp/>left<sp/>on<sp/>the<sp/>stack<sp/>after<sp/>execution<sp/>is<sp/>OK,<sp/>too:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="745"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(sigops<sp/>&lt;=<sp/>MAX_P2SH_SIGOPS);</highlight></codeline>
<codeline lineno="746"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="747"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="748"><highlight class="normal"></highlight></codeline>
<codeline lineno="749"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(stack.size()<sp/>!=<sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>int)nArgsExpected)</highlight></codeline>
<codeline lineno="750"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="751"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="752"><highlight class="normal"></highlight></codeline>
<codeline lineno="753"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="754"><highlight class="normal">}</highlight></codeline>
<codeline lineno="755"><highlight class="normal"></highlight></codeline>
<codeline lineno="756" refid="main_8h_1ad2eaf4f8542c12ea9ee1183609cc6d1a" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="main_8cpp_1ad2eaf4f8542c12ea9ee1183609cc6d1a" kindref="member">GetLegacySigOpCount</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_c_transaction" kindref="compound">CTransaction</ref>&amp;<sp/>tx)</highlight></codeline>
<codeline lineno="757"><highlight class="normal">{</highlight></codeline>
<codeline lineno="758"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nSigOps<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="759"><highlight class="normal"><sp/><sp/><sp/><sp/>BOOST_FOREACH(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_c_tx_in" kindref="compound">CTxIn</ref>&amp;<sp/>txin,<sp/>tx.<ref refid="class_c_transaction_1a53fa787e4ea57374b4fa2a28e9a957b2" kindref="member">vin</ref>)</highlight></codeline>
<codeline lineno="760"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="761"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nSigOps<sp/>+=<sp/>txin.<ref refid="class_c_tx_in_1aba540fd902366210a6ad6cd9a18fe763" kindref="member">scriptSig</ref>.<ref refid="class_c_script_1ad4a8173c235111e93a8171b1f8d00ce8" kindref="member">GetSigOpCount</ref>(</highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="762"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="763"><highlight class="normal"><sp/><sp/><sp/><sp/>BOOST_FOREACH(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_c_tx_out" kindref="compound">CTxOut</ref>&amp;<sp/>txout,<sp/>tx.<ref refid="class_c_transaction_1ae42c0032a464c3054c508017c7d040ef" kindref="member">vout</ref>)</highlight></codeline>
<codeline lineno="764"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="765"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nSigOps<sp/>+=<sp/>txout.<ref refid="class_c_tx_out_1a25bf3f2f4befb22a6a0be45784fe57e2" kindref="member">scriptPubKey</ref>.<ref refid="class_c_script_1ad4a8173c235111e93a8171b1f8d00ce8" kindref="member">GetSigOpCount</ref>(</highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="766"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="767"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>nSigOps;</highlight></codeline>
<codeline lineno="768"><highlight class="normal">}</highlight></codeline>
<codeline lineno="769"><highlight class="normal"></highlight></codeline>
<codeline lineno="770" refid="main_8h_1acc0a05d60127f0cfcf778348670067e0" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="main_8cpp_1a519cfd439598a8bf64fe5503aa74cfcb" kindref="member">GetP2SHSigOpCount</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_c_transaction" kindref="compound">CTransaction</ref>&amp;<sp/>tx,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="main_8h_1a05bae354566c88f7dca5ad13aaf8b30f" kindref="member">MapPrevTx</ref>&amp;<sp/>inputs)</highlight></codeline>
<codeline lineno="771"><highlight class="normal">{</highlight></codeline>
<codeline lineno="772"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(tx.<ref refid="class_c_transaction_1a274384ecbb50d71355cd287b7a6bca51" kindref="member">IsCoinBase</ref>())</highlight></codeline>
<codeline lineno="773"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="774"><highlight class="normal"></highlight></codeline>
<codeline lineno="775"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nSigOps<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="776"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>tx.<ref refid="class_c_transaction_1a53fa787e4ea57374b4fa2a28e9a957b2" kindref="member">vin</ref>.size();<sp/>i++)</highlight></codeline>
<codeline lineno="777"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="778"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_c_transaction_po_s" kindref="compound">CTransactionPoS</ref><sp/>txPoS;</highlight></codeline>
<codeline lineno="779"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_c_tx_out" kindref="compound">CTxOut</ref>&amp;<sp/>prevout<sp/>=<sp/>txPoS.<ref refid="class_c_transaction_po_s_1aa49ca4acc89b51cbef362200175051b4" kindref="member">GetOutputFor</ref>(tx.<ref refid="class_c_transaction_1a53fa787e4ea57374b4fa2a28e9a957b2" kindref="member">vin</ref>[i],<sp/>inputs);</highlight></codeline>
<codeline lineno="780"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(prevout.<ref refid="class_c_tx_out_1a25bf3f2f4befb22a6a0be45784fe57e2" kindref="member">scriptPubKey</ref>.<ref refid="class_c_script_1acba6d6d35776de4ce3a632446f44805f" kindref="member">IsPayToScriptHash</ref>())</highlight></codeline>
<codeline lineno="781"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nSigOps<sp/>+=<sp/>prevout.<ref refid="class_c_tx_out_1a25bf3f2f4befb22a6a0be45784fe57e2" kindref="member">scriptPubKey</ref>.<ref refid="class_c_script_1ad4a8173c235111e93a8171b1f8d00ce8" kindref="member">GetSigOpCount</ref>(tx.<ref refid="class_c_transaction_1a53fa787e4ea57374b4fa2a28e9a957b2" kindref="member">vin</ref>[i].scriptSig);</highlight></codeline>
<codeline lineno="782"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="783"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>nSigOps;</highlight></codeline>
<codeline lineno="784"><highlight class="normal">}</highlight></codeline>
<codeline lineno="785"><highlight class="normal"></highlight></codeline>
<codeline lineno="786" refid="class_c_merkle_tx_1a7286c83e09ddaebc6bba39ee38a5a012" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="class_c_merkle_tx_1a7286c83e09ddaebc6bba39ee38a5a012" kindref="member">CMerkleTx::SetMerkleBranch</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_c_block" kindref="compound">CBlock</ref>*<sp/>pblock)</highlight></codeline>
<codeline lineno="787"><highlight class="normal">{</highlight></codeline>
<codeline lineno="788"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="sync_8h_1acd61d0cb3b49f367728193720014aed0" kindref="member">AssertLockHeld</ref>(cs_main);</highlight></codeline>
<codeline lineno="789"><highlight class="normal"></highlight></codeline>
<codeline lineno="790"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_c_block" kindref="compound">CBlock</ref><sp/>blockTmp;</highlight></codeline>
<codeline lineno="791"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(pblock<sp/>==<sp/>NULL)</highlight></codeline>
<codeline lineno="792"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="793"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Load<sp/>the<sp/>block<sp/>this<sp/>tx<sp/>is<sp/>in</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="794"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_c_tx_index" kindref="compound">CTxIndex</ref><sp/>txindex;</highlight></codeline>
<codeline lineno="795"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="class_c_tx_d_b" kindref="compound">CTxDB</ref>(</highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal">).ReadTxIndex(GetHash(),<sp/>txindex))</highlight></codeline>
<codeline lineno="796"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="797"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!blockTmp.<ref refid="class_c_block_1a77a1b1e9902e1e557d762f5a5f325cd8" kindref="member">ReadFromDisk</ref>(txindex.<ref refid="class_c_tx_index_1ac68a69ed4335b3f50b954c71ec0a9c32" kindref="member">pos</ref>.<ref refid="class_c_disk_tx_pos_1a07198e7b96d4c60ece4d895abbd46104" kindref="member">nFile</ref>,<sp/>txindex.<ref refid="class_c_tx_index_1ac68a69ed4335b3f50b954c71ec0a9c32" kindref="member">pos</ref>.<ref refid="class_c_disk_tx_pos_1ae9b3c262149c035be43010cbf7d1423b" kindref="member">nBlockPos</ref>))</highlight></codeline>
<codeline lineno="798"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="799"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pblock<sp/>=<sp/>&amp;blockTmp;</highlight></codeline>
<codeline lineno="800"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="801"><highlight class="normal"></highlight></codeline>
<codeline lineno="802"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Update<sp/>the<sp/>tx&apos;s<sp/>hashBlock</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="803"><highlight class="normal"><sp/><sp/><sp/><sp/>hashBlock<sp/>=<sp/>pblock-&gt;<ref refid="class_c_block_header_1ae1165e54882d364b030fb33673d64dbd" kindref="member">GetHash</ref>();</highlight></codeline>
<codeline lineno="804"><highlight class="normal"></highlight></codeline>
<codeline lineno="805"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Locate<sp/>the<sp/>transaction</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="806"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(nIndex<sp/>=<sp/>0;<sp/>nIndex<sp/>&lt;<sp/>(int)pblock-&gt;<ref refid="class_c_block_1a9b6508d662722775f3029b980b382b66" kindref="member">vtx</ref>.size();<sp/>nIndex++)</highlight></codeline>
<codeline lineno="807"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(pblock-&gt;<ref refid="class_c_block_1a9b6508d662722775f3029b980b382b66" kindref="member">vtx</ref>[nIndex]<sp/>==<sp/>*(<ref refid="class_c_transaction" kindref="compound">CTransaction</ref>*)</highlight><highlight class="keyword">this</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="808"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="809"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(nIndex<sp/>==<sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)pblock-&gt;<ref refid="class_c_block_1a9b6508d662722775f3029b980b382b66" kindref="member">vtx</ref>.size())</highlight></codeline>
<codeline lineno="810"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="811"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vMerkleBranch.clear();</highlight></codeline>
<codeline lineno="812"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nIndex<sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="813"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="util_8h_1afc02c0a4258fedfb316be612bb659ba8" kindref="member">LogPrintf</ref>(</highlight><highlight class="stringliteral">&quot;ERROR:<sp/>SetMerkleBranch()<sp/>:<sp/>couldn&apos;t<sp/>find<sp/>tx<sp/>in<sp/>block\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="814"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="815"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="816"><highlight class="normal"></highlight></codeline>
<codeline lineno="817"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Fill<sp/>in<sp/>merkle<sp/>branch</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="818"><highlight class="normal"><sp/><sp/><sp/><sp/>vMerkleBranch<sp/>=<sp/>pblock-&gt;<ref refid="class_c_block_1ad857691c46c20eee278c083f7513d0f6" kindref="member">GetMerkleBranch</ref>(nIndex);</highlight></codeline>
<codeline lineno="819"><highlight class="normal"></highlight></codeline>
<codeline lineno="820"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Is<sp/>the<sp/>tx<sp/>in<sp/>a<sp/>block<sp/>that&apos;s<sp/>in<sp/>the<sp/>main<sp/>chain</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="821"><highlight class="normal"><sp/><sp/><sp/><sp/>map&lt;uint256,<sp/>CBlockIndex*&gt;::iterator<sp/>mi<sp/>=<sp/>mapBlockIndex.find(hashBlock);</highlight></codeline>
<codeline lineno="822"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mi<sp/>==<sp/>mapBlockIndex.end())</highlight></codeline>
<codeline lineno="823"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="824"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_c_block_index" kindref="compound">CBlockIndex</ref>*<sp/>pindex<sp/>=<sp/>(*mi).second;</highlight></codeline>
<codeline lineno="825"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!pindex<sp/>||<sp/>!pindex-&gt;<ref refid="class_c_block_index_1ae75f87263a196d250cc2bf10d70aa510" kindref="member">IsInMainChain</ref>())</highlight></codeline>
<codeline lineno="826"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="827"><highlight class="normal"></highlight></codeline>
<codeline lineno="828"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>nBestHeight<sp/>-<sp/>pindex-&gt;<ref refid="class_c_block_index_1aebfc8d6b95852546760e742553d7bfd5" kindref="member">nHeight</ref><sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="829"><highlight class="normal">}</highlight></codeline>
<codeline lineno="830"><highlight class="normal"></highlight></codeline>
<codeline lineno="831" refid="main_8h_1a67d4c24facb2a0d89f92065581c486df" refkind="member"><highlight class="normal"><ref refid="amount_8h_1a4eaf3a5239714d8c45b851527f7cb564" kindref="member">CAmount</ref><sp/><ref refid="main_8cpp_1a67d4c24facb2a0d89f92065581c486df" kindref="member">GetMinFee</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_c_transaction" kindref="compound">CTransaction</ref>&amp;<sp/>tx,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nBytes,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>fAllowFree,<sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/><ref refid="main_8h_1a8c24d39fc07a60d3c019618a73cc15a7" kindref="member">GetMinFee_mode</ref><sp/>mode)</highlight></codeline>
<codeline lineno="832"><highlight class="normal">{</highlight></codeline>
<codeline lineno="833"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Base<sp/>fee<sp/>is<sp/>either<sp/>MIN_TX_FEE<sp/>or<sp/>MIN_RELAY_TX_FEE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="834"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="amount_8h_1a4eaf3a5239714d8c45b851527f7cb564" kindref="member">CAmount</ref><sp/>nBaseFee<sp/>=<sp/>(mode<sp/>==<sp/><ref refid="main_8h_1a8c24d39fc07a60d3c019618a73cc15a7a79d7494c7b44dac59ff3143ac440e2f5" kindref="member">GMF_RELAY</ref>)<sp/>?<sp/><ref refid="wallet_8h_1aaf857d36fa12074d08ab75d2e5e2c6de" kindref="member">MIN_RELAY_TX_FEE</ref><sp/>:<sp/><ref refid="wallet_8h_1add67e95cd66a980b74a7a2f434d9cf1c" kindref="member">MIN_TX_FEE</ref>;</highlight></codeline>
<codeline lineno="835"><highlight class="normal"></highlight></codeline>
<codeline lineno="836"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="amount_8h_1a4eaf3a5239714d8c45b851527f7cb564" kindref="member">CAmount</ref><sp/>nMinFee<sp/>=<sp/>(1<sp/>+<sp/>(<ref refid="amount_8h_1a4eaf3a5239714d8c45b851527f7cb564" kindref="member">CAmount</ref>)nBytes<sp/>/<sp/>1000)<sp/>*<sp/>nBaseFee;</highlight></codeline>
<codeline lineno="837"><highlight class="normal"></highlight></codeline>
<codeline lineno="838"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fAllowFree)</highlight></codeline>
<codeline lineno="839"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="840"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>There<sp/>is<sp/>a<sp/>free<sp/>transaction<sp/>area<sp/>in<sp/>blocks<sp/>created<sp/>by<sp/>most<sp/>miners,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="841"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>*<sp/>If<sp/>we<sp/>are<sp/>relaying<sp/>we<sp/>allow<sp/>transactions<sp/>up<sp/>to<sp/>DEFAULT_BLOCK_PRIORITY_SIZE<sp/>-<sp/>1000</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="842"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/>to<sp/>be<sp/>considered<sp/>to<sp/>fall<sp/>into<sp/>this<sp/>category.<sp/>We<sp/>don&apos;t<sp/>want<sp/>to<sp/>encourage<sp/>sending</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="843"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/>multiple<sp/>transactions<sp/>instead<sp/>of<sp/>one<sp/>big<sp/>transaction<sp/>to<sp/>avoid<sp/>fees.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="844"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>*<sp/>If<sp/>we<sp/>are<sp/>creating<sp/>a<sp/>transaction<sp/>we<sp/>allow<sp/>transactions<sp/>up<sp/>to<sp/>1,000<sp/>bytes</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="845"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/>to<sp/>be<sp/>considered<sp/>safe<sp/>and<sp/>assume<sp/>they<sp/>can<sp/>likely<sp/>make<sp/>it<sp/>into<sp/>this<sp/>section.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="846"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(nBytes<sp/>&lt;<sp/>(mode<sp/>==<sp/><ref refid="main_8h_1a8c24d39fc07a60d3c019618a73cc15a7a146093898dd622fd76ca7ded2b6933ef" kindref="member">GMF_SEND</ref><sp/>?<sp/>1000<sp/>:<sp/>(DEFAULT_BLOCK_PRIORITY_SIZE<sp/>-<sp/>1000)))</highlight></codeline>
<codeline lineno="847"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nMinFee<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="848"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="849"><highlight class="normal"></highlight></codeline>
<codeline lineno="850"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>This<sp/>code<sp/>can<sp/>be<sp/>removed<sp/>after<sp/>enough<sp/>miners<sp/>have<sp/>upgraded<sp/>to<sp/>version<sp/>0.9.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="851"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Until<sp/>then,<sp/>be<sp/>safe<sp/>when<sp/>sending<sp/>and<sp/>require<sp/>a<sp/>fee<sp/>if<sp/>any<sp/>output</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="852"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>is<sp/>less<sp/>than<sp/>CENT:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="853"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(nMinFee<sp/>&lt;<sp/>nBaseFee<sp/>&amp;&amp;<sp/>mode<sp/>==<sp/><ref refid="main_8h_1a8c24d39fc07a60d3c019618a73cc15a7a146093898dd622fd76ca7ded2b6933ef" kindref="member">GMF_SEND</ref>)</highlight></codeline>
<codeline lineno="854"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="855"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>BOOST_FOREACH(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_c_tx_out" kindref="compound">CTxOut</ref>&amp;<sp/>txout,<sp/>tx.<ref refid="class_c_transaction_1ae42c0032a464c3054c508017c7d040ef" kindref="member">vout</ref>)</highlight></codeline>
<codeline lineno="856"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(txout.<ref refid="class_c_tx_out_1ab278ecef3817a972cb6bc5360d13f197" kindref="member">nValue</ref><sp/>&lt;<sp/>CENT)</highlight></codeline>
<codeline lineno="857"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nMinFee<sp/>=<sp/>nBaseFee;</highlight></codeline>
<codeline lineno="858"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="859"><highlight class="normal"></highlight></codeline>
<codeline lineno="860"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="amount_8h_1a12db56a9a1c931941f0943ecbb278aae" kindref="member">MoneyRange</ref>(nMinFee))</highlight></codeline>
<codeline lineno="861"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nMinFee<sp/>=<sp/>MAX_MONEY;</highlight></codeline>
<codeline lineno="862"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>nMinFee;</highlight></codeline>
<codeline lineno="863"><highlight class="normal">}</highlight></codeline>
<codeline lineno="864"><highlight class="normal"></highlight></codeline>
<codeline lineno="865" refid="main_8h_1a8189e51a581977f4de34ed4e0159bf63" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="main_8cpp_1ad73f7fbd48c12a894b914e6a51940c64" kindref="member">AcceptToMemoryPool</ref>(<ref refid="class_c_tx_mem_pool" kindref="compound">CTxMemPool</ref>&amp;<sp/>pool,<sp/><ref refid="class_c_validation_state" kindref="compound">CValidationState</ref><sp/>&amp;state,<sp/><ref refid="class_c_transaction" kindref="compound">CTransaction</ref><sp/>&amp;tx,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>fLimitFree,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal">*<sp/>pfMissingInputs,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>ignoreFees)</highlight></codeline>
<codeline lineno="866"><highlight class="normal">{</highlight></codeline>
<codeline lineno="867"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="sync_8h_1acd61d0cb3b49f367728193720014aed0" kindref="member">AssertLockHeld</ref>(cs_main);</highlight></codeline>
<codeline lineno="868"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(pfMissingInputs)</highlight></codeline>
<codeline lineno="869"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*pfMissingInputs<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="870"><highlight class="normal"></highlight></codeline>
<codeline lineno="871"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!tx.<ref refid="class_c_transaction_1afa2875bea30d31900a30baf7fd56b96b" kindref="member">CheckTransaction</ref>(state))</highlight></codeline>
<codeline lineno="872"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>error(</highlight><highlight class="stringliteral">&quot;AcceptToMemoryPool<sp/>:<sp/>CheckTransaction<sp/>failed&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="873"><highlight class="normal"></highlight></codeline>
<codeline lineno="874"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Coinbase<sp/>is<sp/>only<sp/>valid<sp/>in<sp/>a<sp/>block,<sp/>not<sp/>as<sp/>a<sp/>loose<sp/>transaction</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="875"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(tx.<ref refid="class_c_transaction_1a274384ecbb50d71355cd287b7a6bca51" kindref="member">IsCoinBase</ref>())</highlight></codeline>
<codeline lineno="876"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>tx.<ref refid="class_c_transaction_1a52eaee52d8827b7265f9dcd308b2a812" kindref="member">DoS</ref>(100,<sp/>error(</highlight><highlight class="stringliteral">&quot;AcceptToMemoryPool<sp/>:<sp/>coinbase<sp/>as<sp/>individual<sp/>tx&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="877"><highlight class="normal"></highlight></codeline>
<codeline lineno="878"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>ppcoin:<sp/>coinstake<sp/>is<sp/>also<sp/>only<sp/>valid<sp/>in<sp/>a<sp/>block,<sp/>not<sp/>as<sp/>a<sp/>loose<sp/>transaction</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="879"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(tx.<ref refid="class_c_transaction_1a8d924e18ddcf4c31bc7483b3a157113d" kindref="member">IsCoinStake</ref>())</highlight></codeline>
<codeline lineno="880"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>tx.<ref refid="class_c_transaction_1a52eaee52d8827b7265f9dcd308b2a812" kindref="member">DoS</ref>(100,<sp/>error(</highlight><highlight class="stringliteral">&quot;AcceptToMemoryPool<sp/>:<sp/>coinstake<sp/>as<sp/>individual<sp/>tx&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="881"><highlight class="normal"></highlight></codeline>
<codeline lineno="882"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Rather<sp/>not<sp/>work<sp/>on<sp/>nonstandard<sp/>transactions<sp/>(unless<sp/>-testnet)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="883"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>reason;</highlight></codeline>
<codeline lineno="884"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="chainparams_8h_1abc8c1af875107f5eac0f327bd3b8363d" kindref="member">TestNet</ref>()<sp/>&amp;&amp;<sp/>!<ref refid="main_8cpp_1acd163a09d0e4384ebe85dead57730dd7" kindref="member">IsStandardTx</ref>(tx,<sp/>reason))</highlight></codeline>
<codeline lineno="885"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>error(</highlight><highlight class="stringliteral">&quot;AcceptToMemoryPool<sp/>:<sp/>nonstandard<sp/>transaction:<sp/>%s&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="886"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>reason);</highlight></codeline>
<codeline lineno="887"><highlight class="normal"></highlight></codeline>
<codeline lineno="888"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>is<sp/>it<sp/>already<sp/>in<sp/>the<sp/>memory<sp/>pool?</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="889"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classuint256" kindref="compound">uint256</ref><sp/>hash<sp/>=<sp/>tx.<ref refid="class_c_transaction_1a3f8666d2a275c40da14bd5eaf47dc004" kindref="member">GetHash</ref>();</highlight></codeline>
<codeline lineno="890"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(pool.<ref refid="class_c_tx_mem_pool_1a93b2aa8c01fa291d183a82a9e0beeb35" kindref="member">exists</ref>(hash))</highlight></codeline>
<codeline lineno="891"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="892"><highlight class="normal"></highlight></codeline>
<codeline lineno="893"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>-----------<sp/>instantX<sp/>transaction<sp/>scanning<sp/>-----------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="894"><highlight class="normal"></highlight></codeline>
<codeline lineno="895"><highlight class="normal"><sp/><sp/><sp/><sp/>BOOST_FOREACH(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_c_tx_in" kindref="compound">CTxIn</ref>&amp;<sp/>in,<sp/>tx.<ref refid="class_c_transaction_1a53fa787e4ea57374b4fa2a28e9a957b2" kindref="member">vin</ref>){</highlight></codeline>
<codeline lineno="896"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="instantx_8cpp_1add05f27cf823b63d3c4ac615cae0f85c" kindref="member">mapLockedInputs</ref>.count(in.<ref refid="class_c_tx_in_1aed9312051a25380cbd7f123408ab7c20" kindref="member">prevout</ref>)){</highlight></codeline>
<codeline lineno="897"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="instantx_8cpp_1add05f27cf823b63d3c4ac615cae0f85c" kindref="member">mapLockedInputs</ref>[in.<ref refid="class_c_tx_in_1aed9312051a25380cbd7f123408ab7c20" kindref="member">prevout</ref>]<sp/>!=<sp/>tx.<ref refid="class_c_transaction_1a3f8666d2a275c40da14bd5eaf47dc004" kindref="member">GetHash</ref>()){</highlight></codeline>
<codeline lineno="898"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>tx.<ref refid="class_c_transaction_1a52eaee52d8827b7265f9dcd308b2a812" kindref="member">DoS</ref>(0,<sp/>error(</highlight><highlight class="stringliteral">&quot;AcceptToMemoryPool<sp/>:<sp/>conflicts<sp/>with<sp/>existing<sp/>transaction<sp/>lock:<sp/>%s&quot;</highlight><highlight class="normal">,<sp/>reason));</highlight></codeline>
<codeline lineno="899"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="900"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="901"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="902"><highlight class="normal"></highlight></codeline>
<codeline lineno="903"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Check<sp/>for<sp/>conflicts<sp/>with<sp/>in-memory<sp/>transactions</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="904"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="905"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="sync_8h_1a911fe23f057c2fe5aad629162d6c99d0" kindref="member">LOCK</ref>(pool.<ref refid="class_c_tx_mem_pool_1ac7ee8c06837c7d2688e2d7e3d071bdbb" kindref="member">cs</ref>);<sp/></highlight><highlight class="comment">//<sp/>protect<sp/>pool.mapNextTx</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="906"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>tx.<ref refid="class_c_transaction_1a53fa787e4ea57374b4fa2a28e9a957b2" kindref="member">vin</ref>.size();<sp/>i++)</highlight></codeline>
<codeline lineno="907"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="908"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_c_out_point" kindref="compound">COutPoint</ref><sp/>outpoint<sp/>=<sp/>tx.<ref refid="class_c_transaction_1a53fa787e4ea57374b4fa2a28e9a957b2" kindref="member">vin</ref>[i].prevout;</highlight></codeline>
<codeline lineno="909"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(pool.<ref refid="class_c_tx_mem_pool_1aae6f1162f0b2e42b369971f32a9f71e8" kindref="member">mapNextTx</ref>.count(outpoint))</highlight></codeline>
<codeline lineno="910"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="911"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Disable<sp/>replacement<sp/>feature<sp/>for<sp/>now</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="912"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="913"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="914"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="915"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="916"><highlight class="normal"></highlight></codeline>
<codeline lineno="917"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="918"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_c_tx_d_b" kindref="compound">CTxDB</ref><sp/><ref refid="txdb-leveldb_8cpp_1a72eff8ae1d84de13daf97a61b8c02bc6" kindref="member">txdb</ref>(</highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="919"><highlight class="normal"></highlight></codeline>
<codeline lineno="920"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>do<sp/>all<sp/>inputs<sp/>exist?</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="921"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Note<sp/>that<sp/>this<sp/>does<sp/>not<sp/>check<sp/>for<sp/>the<sp/>presence<sp/>of<sp/>actual<sp/>outputs<sp/>(see<sp/>the<sp/>next<sp/>check<sp/>for<sp/>that),</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="922"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>only<sp/>helps<sp/>filling<sp/>in<sp/>pfMissingInputs<sp/>(to<sp/>determine<sp/>missing<sp/>vs<sp/>spent).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="923"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>BOOST_FOREACH(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_c_tx_in" kindref="compound">CTxIn</ref><sp/>txin,<sp/>tx.<ref refid="class_c_transaction_1a53fa787e4ea57374b4fa2a28e9a957b2" kindref="member">vin</ref>)<sp/>{</highlight></codeline>
<codeline lineno="924"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!txdb.<ref refid="class_c_tx_d_b_1a09b87317101ed16b6ad99794279f4c2d" kindref="member">ContainsTx</ref>(txin.<ref refid="class_c_tx_in_1aed9312051a25380cbd7f123408ab7c20" kindref="member">prevout</ref>.<ref refid="class_c_out_point_1af131c7194a660558b0ff158f4efa7a28" kindref="member">hash</ref>))<sp/>{</highlight></codeline>
<codeline lineno="925"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(pfMissingInputs)</highlight></codeline>
<codeline lineno="926"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*pfMissingInputs<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="927"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="928"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="929"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="930"><highlight class="normal"></highlight></codeline>
<codeline lineno="931"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="main_8h_1a05bae354566c88f7dca5ad13aaf8b30f" kindref="member">MapPrevTx</ref><sp/>mapInputs;</highlight></codeline>
<codeline lineno="932"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>map&lt;uint256,<sp/>CTxIndex&gt;<sp/>mapUnused;</highlight></codeline>
<codeline lineno="933"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>fInvalid<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="934"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_c_transaction_po_s" kindref="compound">CTransactionPoS</ref><sp/>txPoS;</highlight></codeline>
<codeline lineno="935"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!txPoS.<ref refid="class_c_transaction_po_s_1a20a028e06f505f03a0d30a7f186d9489" kindref="member">FetchInputs</ref>(tx,<sp/>txdb,<sp/>mapUnused,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/>mapInputs,<sp/>fInvalid))</highlight></codeline>
<codeline lineno="936"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="937"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fInvalid)</highlight></codeline>
<codeline lineno="938"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>error(</highlight><highlight class="stringliteral">&quot;AcceptToMemoryPool<sp/>:<sp/>FetchInputs<sp/>found<sp/>invalid<sp/>tx<sp/>%s&quot;</highlight><highlight class="normal">,<sp/>hash.<ref refid="classbase__uint_1ac3080a72402cadf28dbc9f9b69cc60be" kindref="member">ToString</ref>());</highlight></codeline>
<codeline lineno="939"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="940"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="941"><highlight class="normal"></highlight></codeline>
<codeline lineno="942"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Check<sp/>for<sp/>non-standard<sp/>pay-to-script-hash<sp/>in<sp/>inputs</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="943"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="chainparams_8h_1abc8c1af875107f5eac0f327bd3b8363d" kindref="member">TestNet</ref>()<sp/>&amp;&amp;<sp/>!<ref refid="main_8cpp_1a29901e539b487e09c90ff90c7560bd9d" kindref="member">AreInputsStandard</ref>(tx,<sp/>mapInputs))</highlight></codeline>
<codeline lineno="944"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>error(</highlight><highlight class="stringliteral">&quot;AcceptToMemoryPool<sp/>:<sp/>nonstandard<sp/>transaction<sp/>input&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="945"><highlight class="normal"></highlight></codeline>
<codeline lineno="946"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Check<sp/>that<sp/>the<sp/>transaction<sp/>doesn&apos;t<sp/>have<sp/>an<sp/>excessive<sp/>number<sp/>of</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="947"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>sigops,<sp/>making<sp/>it<sp/>impossible<sp/>to<sp/>mine.<sp/>Since<sp/>the<sp/>coinbase<sp/>transaction</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="948"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>itself<sp/>can<sp/>contain<sp/>sigops<sp/>MAX_TX_SIGOPS<sp/>is<sp/>less<sp/>than</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="949"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>MAX_BLOCK_SIGOPS;<sp/>we<sp/>still<sp/>consider<sp/>this<sp/>an<sp/>invalid<sp/>rather<sp/>than</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="950"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>merely<sp/>non-standard<sp/>transaction.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="951"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nSigOps<sp/>=<sp/><ref refid="main_8cpp_1ad2eaf4f8542c12ea9ee1183609cc6d1a" kindref="member">GetLegacySigOpCount</ref>(tx);</highlight></codeline>
<codeline lineno="952"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nSigOps<sp/>+=<sp/><ref refid="main_8cpp_1a519cfd439598a8bf64fe5503aa74cfcb" kindref="member">GetP2SHSigOpCount</ref>(tx,<sp/>mapInputs);</highlight></codeline>
<codeline lineno="953"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(nSigOps<sp/>&gt;<sp/>MAX_TX_SIGOPS)</highlight></codeline>
<codeline lineno="954"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>tx.<ref refid="class_c_transaction_1a52eaee52d8827b7265f9dcd308b2a812" kindref="member">DoS</ref>(0,</highlight></codeline>
<codeline lineno="955"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>error(</highlight><highlight class="stringliteral">&quot;AcceptToMemoryPool<sp/>:<sp/>too<sp/>many<sp/>sigops<sp/>%s,<sp/>%d<sp/>&gt;<sp/>%d&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="956"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>hash.<ref refid="classbase__uint_1ac3080a72402cadf28dbc9f9b69cc60be" kindref="member">ToString</ref>(),<sp/>nSigOps,<sp/>MAX_TX_SIGOPS));</highlight></codeline>
<codeline lineno="957"><highlight class="normal"></highlight></codeline>
<codeline lineno="958"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="amount_8h_1a4eaf3a5239714d8c45b851527f7cb564" kindref="member">CAmount</ref><sp/>nFees<sp/>=<sp/>txPoS.<ref refid="class_c_transaction_po_s_1ac2c734d9f302dda6e8681ce6d0f7843e" kindref="member">GetValueIn</ref>(tx,<sp/>mapInputs)<sp/>-<sp/>txPoS.<ref refid="class_c_transaction_po_s_1ad85303c69a61f41eb8874f07c15faa10" kindref="member">GetValueOut</ref>(tx);</highlight></codeline>
<codeline lineno="959"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nSize<sp/>=<sp/><ref refid="serialize_8h_1a48239e478ae730373d1984fe304ca025" kindref="member">::GetSerializeSize</ref>(tx,<sp/><ref refid="serialize_8h_1a6b7b47dd702d9e331586d485013fd1eaa652754eeaf79fba4fcf4c18597a6961c" kindref="member">SER_NETWORK</ref>,<sp/>PROTOCOL_VERSION);</highlight></codeline>
<codeline lineno="960"><highlight class="normal"></highlight></codeline>
<codeline lineno="961"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!ignoreFees){</highlight></codeline>
<codeline lineno="962"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="amount_8h_1a4eaf3a5239714d8c45b851527f7cb564" kindref="member">CAmount</ref><sp/>txMinFee<sp/>=<sp/><ref refid="main_8cpp_1a67d4c24facb2a0d89f92065581c486df" kindref="member">GetMinFee</ref>(tx,<sp/>nSize,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">,<sp/><ref refid="main_8h_1a8c24d39fc07a60d3c019618a73cc15a7a79d7494c7b44dac59ff3143ac440e2f5" kindref="member">GMF_RELAY</ref>);</highlight></codeline>
<codeline lineno="963"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fLimitFree<sp/>&amp;&amp;<sp/>nFees<sp/>&lt;<sp/>txMinFee)</highlight></codeline>
<codeline lineno="964"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>error(</highlight><highlight class="stringliteral">&quot;AcceptToMemoryPool<sp/>:<sp/>not<sp/>enough<sp/>fees<sp/>%s,<sp/>%d<sp/>&lt;<sp/>%d&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="965"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>hash.<ref refid="classbase__uint_1ac3080a72402cadf28dbc9f9b69cc60be" kindref="member">ToString</ref>(),</highlight></codeline>
<codeline lineno="966"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nFees,<sp/>txMinFee);</highlight></codeline>
<codeline lineno="967"><highlight class="normal"></highlight></codeline>
<codeline lineno="968"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Continuously<sp/>rate-limit<sp/>free<sp/>transactions</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="969"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>This<sp/>mitigates<sp/>&apos;penny-flooding&apos;<sp/>--<sp/>sending<sp/>thousands<sp/>of<sp/>free<sp/>transactions<sp/>just<sp/>to</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="970"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>be<sp/>annoying<sp/>or<sp/>make<sp/>others&apos;<sp/>transactions<sp/>take<sp/>longer<sp/>to<sp/>confirm.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="971"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fLimitFree<sp/>&amp;&amp;<sp/>nFees<sp/>&lt;<sp/><ref refid="wallet_8h_1aaf857d36fa12074d08ab75d2e5e2c6de" kindref="member">MIN_RELAY_TX_FEE</ref>)</highlight></codeline>
<codeline lineno="972"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="973"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="class_annotated_mixin" kindref="compound">CCriticalSection</ref><sp/>csFreeLimiter;</highlight></codeline>
<codeline lineno="974"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>dFreeCount;</highlight></codeline>
<codeline lineno="975"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="stdint_8h_1adec1df1b8b51cb32b77e5b86fff46471" kindref="member">int64_t</ref><sp/>nLastTime;</highlight></codeline>
<codeline lineno="976"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stdint_8h_1adec1df1b8b51cb32b77e5b86fff46471" kindref="member">int64_t</ref><sp/>nNow<sp/>=<sp/><ref refid="util_8cpp_1a46fac5fba8ba905b5f9acb364f5d8c6f" kindref="member">GetTime</ref>();</highlight></codeline>
<codeline lineno="977"><highlight class="normal"></highlight></codeline>
<codeline lineno="978"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="sync_8h_1a911fe23f057c2fe5aad629162d6c99d0" kindref="member">LOCK</ref>(csFreeLimiter);</highlight></codeline>
<codeline lineno="979"><highlight class="normal"></highlight></codeline>
<codeline lineno="980"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Use<sp/>an<sp/>exponentially<sp/>decaying<sp/>~10-minute<sp/>window:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="981"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dFreeCount<sp/>*=<sp/>pow(1.0<sp/>-<sp/>1.0/600.0,<sp/>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">)(nNow<sp/>-<sp/>nLastTime));</highlight></codeline>
<codeline lineno="982"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nLastTime<sp/>=<sp/>nNow;</highlight></codeline>
<codeline lineno="983"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>-limitfreerelay<sp/>unit<sp/>is<sp/>thousand-bytes-per-minute</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="984"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>At<sp/>default<sp/>rate<sp/>it<sp/>would<sp/>take<sp/>over<sp/>a<sp/>month<sp/>to<sp/>fill<sp/>1GB</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="985"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(dFreeCount<sp/>&gt;<sp/><ref refid="util_8cpp_1a24f685720bf40370e5bd2a192ad50cd8" kindref="member">GetArg</ref>(</highlight><highlight class="stringliteral">&quot;-limitfreerelay&quot;</highlight><highlight class="normal">,<sp/>15)*10*1000)</highlight></codeline>
<codeline lineno="986"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>error(</highlight><highlight class="stringliteral">&quot;AcceptableInputs<sp/>:<sp/>free<sp/>transaction<sp/>rejected<sp/>by<sp/>rate<sp/>limiter&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="987"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>LogPrint(</highlight><highlight class="stringliteral">&quot;mempool&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Rate<sp/>limit<sp/>dFreeCount:<sp/>%g<sp/>=&gt;<sp/>%g\n&quot;</highlight><highlight class="normal">,<sp/>dFreeCount,<sp/>dFreeCount+nSize);</highlight></codeline>
<codeline lineno="988"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dFreeCount<sp/>+=<sp/>nSize;</highlight></codeline>
<codeline lineno="989"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="990"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="991"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Check<sp/>against<sp/>previous<sp/>transactions</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="992"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>This<sp/>is<sp/>done<sp/>last<sp/>to<sp/>help<sp/>prevent<sp/>CPU<sp/>exhaustion<sp/>denial-of-service<sp/>attacks.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="993"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!txPoS.<ref refid="class_c_transaction_po_s_1a19de7fad0cc156ebd4e5a3858db7619f" kindref="member">ConnectInputs</ref>(tx,<sp/>txdb,<sp/>mapInputs,<sp/>mapUnused,<sp/><ref refid="class_c_disk_tx_pos" kindref="compound">CDiskTxPos</ref>(1,1,1),<sp/>pindexBest,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/>STANDARD_SCRIPT_VERIFY_FLAGS))</highlight></codeline>
<codeline lineno="994"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="995"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>error(</highlight><highlight class="stringliteral">&quot;AcceptToMemoryPool<sp/>:<sp/>ConnectInputs<sp/>failed<sp/>%s&quot;</highlight><highlight class="normal">,<sp/>hash.<ref refid="classbase__uint_1ac3080a72402cadf28dbc9f9b69cc60be" kindref="member">ToString</ref>());</highlight></codeline>
<codeline lineno="996"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="997"><highlight class="normal"></highlight></codeline>
<codeline lineno="998"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Check<sp/>again<sp/>against<sp/>just<sp/>the<sp/>consensus-critical<sp/>mandatory<sp/>script</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="999"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>verification<sp/>flags,<sp/>in<sp/>case<sp/>of<sp/>bugs<sp/>in<sp/>the<sp/>standard<sp/>flags<sp/>that<sp/>cause</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1000"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>transactions<sp/>to<sp/>pass<sp/>as<sp/>valid<sp/>when<sp/>they&apos;re<sp/>actually<sp/>invalid.<sp/>For</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1001"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>instance<sp/>the<sp/>STRICTENC<sp/>flag<sp/>was<sp/>incorrectly<sp/>allowing<sp/>certain</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1002"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>CHECKSIG<sp/>NOT<sp/>scripts<sp/>to<sp/>pass,<sp/>even<sp/>though<sp/>they<sp/>were<sp/>invalid.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1003"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1004"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>There<sp/>is<sp/>a<sp/>similar<sp/>check<sp/>in<sp/>CreateNewBlock()<sp/>to<sp/>prevent<sp/>creating</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1005"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>invalid<sp/>blocks,<sp/>however<sp/>allowing<sp/>such<sp/>transactions<sp/>into<sp/>the<sp/>mempool</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1006"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>can<sp/>be<sp/>exploited<sp/>as<sp/>a<sp/>DoS<sp/>attack.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1007"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!txPoS.<ref refid="class_c_transaction_po_s_1a19de7fad0cc156ebd4e5a3858db7619f" kindref="member">ConnectInputs</ref>(tx,<sp/>txdb,<sp/>mapInputs,<sp/>mapUnused,<sp/><ref refid="class_c_disk_tx_pos" kindref="compound">CDiskTxPos</ref>(1,1,1),<sp/>pindexBest,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/>MANDATORY_SCRIPT_VERIFY_FLAGS))</highlight></codeline>
<codeline lineno="1008"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1009"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>error(</highlight><highlight class="stringliteral">&quot;AcceptToMemoryPool:<sp/>:<sp/>BUG!<sp/>PLEASE<sp/>REPORT<sp/>THIS!<sp/>ConnectInputs<sp/>failed<sp/>against<sp/>MANDATORY<sp/>but<sp/>not<sp/>STANDARD<sp/>flags<sp/>%s&quot;</highlight><highlight class="normal">,<sp/>hash.<ref refid="classbase__uint_1ac3080a72402cadf28dbc9f9b69cc60be" kindref="member">ToString</ref>());</highlight></codeline>
<codeline lineno="1010"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1011"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1012"><highlight class="normal"></highlight></codeline>
<codeline lineno="1013"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Store<sp/>transaction<sp/>in<sp/>memory</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1014"><highlight class="normal"><sp/><sp/><sp/><sp/>pool.<ref refid="class_c_tx_mem_pool_1a1203ac5cf3bdb88af4922705afad555d" kindref="member">addUnchecked</ref>(hash,<sp/>tx);</highlight></codeline>
<codeline lineno="1015"><highlight class="normal"><sp/><sp/><sp/><sp/>setValidatedTx.insert(hash);</highlight></codeline>
<codeline lineno="1016"><highlight class="normal"></highlight></codeline>
<codeline lineno="1017"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="main_8cpp_1ac79dd0809b8f21bd8d861dfcfc4a7fb3" kindref="member">SyncWithWallets</ref>(tx,<sp/>NULL);</highlight></codeline>
<codeline lineno="1018"><highlight class="normal"></highlight></codeline>
<codeline lineno="1019"><highlight class="normal"><sp/><sp/><sp/><sp/>LogPrint(</highlight><highlight class="stringliteral">&quot;mempool&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;AcceptToMemoryPool<sp/>:<sp/>accepted<sp/>%s<sp/>(poolsz<sp/>%u)\n&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="1020"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>hash.<ref refid="classbase__uint_1ac3080a72402cadf28dbc9f9b69cc60be" kindref="member">ToString</ref>(),</highlight></codeline>
<codeline lineno="1021"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pool.<ref refid="class_c_tx_mem_pool_1a340d4a897e521b7021e6b22cce951beb" kindref="member">mapTx</ref>.size());</highlight></codeline>
<codeline lineno="1022"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1023"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1024"><highlight class="normal"></highlight></codeline>
<codeline lineno="1025"><highlight class="normal"></highlight><highlight class="comment">/*bool<sp/>AcceptToMemoryPoolNew(CTxMemPool&amp;<sp/>pool,<sp/>CTransaction<sp/>&amp;tx,<sp/>bool<sp/>fLimitFree,<sp/><sp/>bool*<sp/>pfMissingInputs,<sp/>bool<sp/>fRejectInsaneFee,<sp/>bool<sp/>ignoreFees)</highlight></codeline>
<codeline lineno="1026"><highlight class="comment">{</highlight></codeline>
<codeline lineno="1027"><highlight class="comment"><sp/><sp/><sp/><sp/>AssertLockHeld(cs_main);</highlight></codeline>
<codeline lineno="1028"><highlight class="comment"><sp/><sp/><sp/><sp/>if<sp/>(pfMissingInputs)</highlight></codeline>
<codeline lineno="1029"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*pfMissingInputs<sp/>=<sp/>false;</highlight></codeline>
<codeline lineno="1030"><highlight class="comment"></highlight></codeline>
<codeline lineno="1031"><highlight class="comment"><sp/><sp/><sp/><sp/>if<sp/>(!tx.CheckTransaction())</highlight></codeline>
<codeline lineno="1032"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>error(&quot;AcceptToMemoryPool<sp/>:<sp/>CheckTransaction<sp/>failed&quot;);</highlight></codeline>
<codeline lineno="1033"><highlight class="comment"></highlight></codeline>
<codeline lineno="1034"><highlight class="comment"><sp/><sp/><sp/><sp/>//<sp/>Coinbase<sp/>is<sp/>only<sp/>valid<sp/>in<sp/>a<sp/>block,<sp/>not<sp/>as<sp/>a<sp/>loose<sp/>transaction</highlight></codeline>
<codeline lineno="1035"><highlight class="comment"><sp/><sp/><sp/><sp/>if<sp/>(tx.IsCoinBase())</highlight></codeline>
<codeline lineno="1036"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>tx.DoS(100,<sp/>error(&quot;AcceptToMemoryPool<sp/>:<sp/>coinbase<sp/>as<sp/>individual<sp/>tx&quot;));</highlight></codeline>
<codeline lineno="1037"><highlight class="comment"></highlight></codeline>
<codeline lineno="1038"><highlight class="comment"><sp/><sp/><sp/><sp/>//<sp/>ppcoin:<sp/>coinstake<sp/>is<sp/>also<sp/>only<sp/>valid<sp/>in<sp/>a<sp/>block,<sp/>not<sp/>as<sp/>a<sp/>loose<sp/>transaction</highlight></codeline>
<codeline lineno="1039"><highlight class="comment"><sp/><sp/><sp/><sp/>if<sp/>(tx.IsCoinStake())</highlight></codeline>
<codeline lineno="1040"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>tx.DoS(100,<sp/>error(&quot;AcceptToMemoryPool<sp/>:<sp/>coinstake<sp/>as<sp/>individual<sp/>tx&quot;));<sp/>//TODO<sp/>(Amir):<sp/>BUG<sp/>FIX:<sp/>Why<sp/>is<sp/>the<sp/>wallet<sp/>getting<sp/>throwing<sp/>error?<sp/>primitives<sp/>issues...</highlight></codeline>
<codeline lineno="1041"><highlight class="comment"></highlight></codeline>
<codeline lineno="1042"><highlight class="comment"><sp/><sp/><sp/><sp/>//<sp/>Rather<sp/>not<sp/>work<sp/>on<sp/>nonstandard<sp/>transactions<sp/>(unless<sp/>-testnet)</highlight></codeline>
<codeline lineno="1043"><highlight class="comment"><sp/><sp/><sp/><sp/>string<sp/>reason;</highlight></codeline>
<codeline lineno="1044"><highlight class="comment"><sp/><sp/><sp/><sp/>if<sp/>(!TestNet()<sp/>&amp;&amp;<sp/>!IsStandardTx(tx,<sp/>reason))</highlight></codeline>
<codeline lineno="1045"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>error(&quot;AcceptToMemoryPool<sp/>:<sp/>nonstandard<sp/>transaction:<sp/>%s&quot;,<sp/>reason);</highlight></codeline>
<codeline lineno="1046"><highlight class="comment"></highlight></codeline>
<codeline lineno="1047"><highlight class="comment"><sp/><sp/><sp/><sp/>//<sp/>is<sp/>it<sp/>already<sp/>in<sp/>the<sp/>memory<sp/>pool?</highlight></codeline>
<codeline lineno="1048"><highlight class="comment"><sp/><sp/><sp/><sp/>uint256<sp/>hash<sp/>=<sp/>tx.GetHash();</highlight></codeline>
<codeline lineno="1049"><highlight class="comment"><sp/><sp/><sp/><sp/>if<sp/>(pool.exists(hash))</highlight></codeline>
<codeline lineno="1050"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>false;</highlight></codeline>
<codeline lineno="1051"><highlight class="comment"></highlight></codeline>
<codeline lineno="1052"><highlight class="comment"><sp/><sp/><sp/><sp/>//<sp/>-----------<sp/>instantX<sp/>transaction<sp/>scanning<sp/>-----------</highlight></codeline>
<codeline lineno="1053"><highlight class="comment"></highlight></codeline>
<codeline lineno="1054"><highlight class="comment"><sp/><sp/><sp/><sp/>BOOST_FOREACH(const<sp/>CTxIn&amp;<sp/>in,<sp/>tx.vin){</highlight></codeline>
<codeline lineno="1055"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if(mapLockedInputs.count(in.prevout)){</highlight></codeline>
<codeline lineno="1056"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if(mapLockedInputs[in.prevout]<sp/>!=<sp/>tx.GetHash()){</highlight></codeline>
<codeline lineno="1057"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>error(&quot;AcceptableInputs<sp/>:<sp/>conflicts<sp/>with<sp/>existing<sp/>transaction<sp/>lock:<sp/>%s&quot;,<sp/>reason),</highlight></codeline>
<codeline lineno="1058"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>REJECT_INVALID,<sp/>&quot;tx-lock-conflict&quot;;</highlight></codeline>
<codeline lineno="1059"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1060"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1061"><highlight class="comment"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1062"><highlight class="comment"></highlight></codeline>
<codeline lineno="1063"><highlight class="comment"><sp/><sp/><sp/><sp/>//<sp/>Check<sp/>for<sp/>conflicts<sp/>with<sp/>in-memory<sp/>transactions</highlight></codeline>
<codeline lineno="1064"><highlight class="comment"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1065"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>LOCK(pool.cs);<sp/>//<sp/>protect<sp/>pool.mapNextTx</highlight></codeline>
<codeline lineno="1066"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>for<sp/>(unsigned<sp/>int<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>tx.vin.size();<sp/>i++)</highlight></codeline>
<codeline lineno="1067"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1068"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>COutPoint<sp/>outpoint<sp/>=<sp/>tx.vin[i].prevout;</highlight></codeline>
<codeline lineno="1069"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(pool.mapNextTx.count(outpoint))</highlight></codeline>
<codeline lineno="1070"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1071"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>Disable<sp/>replacement<sp/>feature<sp/>for<sp/>now</highlight></codeline>
<codeline lineno="1072"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>false;</highlight></codeline>
<codeline lineno="1073"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1074"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1075"><highlight class="comment"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1076"><highlight class="comment"></highlight></codeline>
<codeline lineno="1077"><highlight class="comment"><sp/><sp/><sp/><sp/>MapPrevTx<sp/>mapInputs;</highlight></codeline>
<codeline lineno="1078"><highlight class="comment"><sp/><sp/><sp/><sp/>map&lt;uint256,<sp/>CTxIndex&gt;<sp/>mapUnused;</highlight></codeline>
<codeline lineno="1079"><highlight class="comment"><sp/><sp/><sp/><sp/>bool<sp/>fInvalid<sp/>=<sp/>false;</highlight></codeline>
<codeline lineno="1080"><highlight class="comment"><sp/><sp/><sp/><sp/>CTransactionPoS<sp/>txPoS;</highlight></codeline>
<codeline lineno="1081"><highlight class="comment"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1082"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CCoinsView<sp/>dummy;</highlight></codeline>
<codeline lineno="1083"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CCoinsViewCache<sp/>view(&amp;dummy);</highlight></codeline>
<codeline lineno="1084"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CTxDB<sp/>txdb(&quot;r&quot;);</highlight></codeline>
<codeline lineno="1085"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CAmount<sp/>nValueIn<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1086"><highlight class="comment"></highlight></codeline>
<codeline lineno="1087"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1088"><highlight class="comment"></highlight></codeline>
<codeline lineno="1089"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>LOCK(pool.cs);</highlight></codeline>
<codeline lineno="1090"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CCoinsViewMemPool<sp/>viewMemPool(pcoinsTip,<sp/>pool);</highlight></codeline>
<codeline lineno="1091"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>view.SetBackend(viewMemPool);</highlight></codeline>
<codeline lineno="1092"><highlight class="comment"></highlight></codeline>
<codeline lineno="1093"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>do<sp/>we<sp/>already<sp/>have<sp/>it?</highlight></codeline>
<codeline lineno="1094"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(view.HaveCoins(hash))</highlight></codeline>
<codeline lineno="1095"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>false;</highlight></codeline>
<codeline lineno="1096"><highlight class="comment"></highlight></codeline>
<codeline lineno="1097"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>do<sp/>all<sp/>inputs<sp/>exist?</highlight></codeline>
<codeline lineno="1098"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>Note<sp/>that<sp/>this<sp/>does<sp/>not<sp/>check<sp/>for<sp/>the<sp/>presence<sp/>of<sp/>actual<sp/>outputs<sp/>(see<sp/>the<sp/>next<sp/>check<sp/>for<sp/>that),</highlight></codeline>
<codeline lineno="1099"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>only<sp/>helps<sp/>filling<sp/>in<sp/>pfMissingInputs<sp/>(to<sp/>determine<sp/>missing<sp/>vs<sp/>spent).</highlight></codeline>
<codeline lineno="1100"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//TODO<sp/>(Amir):<sp/>Put<sp/>this<sp/>check<sp/>back???</highlight></codeline>
<codeline lineno="1101"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>BOOST_FOREACH(const<sp/>CTxIn<sp/>txin,<sp/>tx.vin)<sp/>{</highlight></codeline>
<codeline lineno="1102"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(!view.HaveCoins(txin.prevout.hash))<sp/>{</highlight></codeline>
<codeline lineno="1103"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(pfMissingInputs)</highlight></codeline>
<codeline lineno="1104"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*pfMissingInputs<sp/>=<sp/>true;</highlight></codeline>
<codeline lineno="1105"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>false;</highlight></codeline>
<codeline lineno="1106"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1107"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1108"><highlight class="comment"></highlight></codeline>
<codeline lineno="1109"><highlight class="comment"></highlight></codeline>
<codeline lineno="1110"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(!txPoS.FetchInputs(tx,<sp/>txdb,<sp/>mapUnused,<sp/>false,<sp/>false,<sp/>mapInputs,<sp/>fInvalid))</highlight></codeline>
<codeline lineno="1111"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1112"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(fInvalid)</highlight></codeline>
<codeline lineno="1113"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>error(&quot;AcceptToMemoryPool<sp/>:<sp/>FetchInputs<sp/>found<sp/>invalid<sp/>tx<sp/>%s&quot;,<sp/>hash.ToString());</highlight></codeline>
<codeline lineno="1114"><highlight class="comment"></highlight></codeline>
<codeline lineno="1115"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>false;</highlight></codeline>
<codeline lineno="1116"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1117"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>are<sp/>the<sp/>actual<sp/>inputs<sp/>available?</highlight></codeline>
<codeline lineno="1118"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(!view.HaveInputs(tx))</highlight></codeline>
<codeline lineno="1119"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>(error(&quot;AcceptableInputs<sp/>:<sp/>inputs<sp/>already<sp/>spent&quot;),<sp/>REJECT_DUPLICATE,<sp/>&quot;bad-txns-inputs-spent&quot;);</highlight></codeline>
<codeline lineno="1120"><highlight class="comment"></highlight></codeline>
<codeline lineno="1121"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>Bring<sp/>the<sp/>best<sp/>block<sp/>into<sp/>scope</highlight></codeline>
<codeline lineno="1122"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>view.GetBestBlock();</highlight></codeline>
<codeline lineno="1123"><highlight class="comment"></highlight></codeline>
<codeline lineno="1124"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nValueIn<sp/>=<sp/>view.GetValueIn(tx);</highlight></codeline>
<codeline lineno="1125"><highlight class="comment"></highlight></codeline>
<codeline lineno="1126"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>we<sp/>have<sp/>all<sp/>inputs<sp/>cached<sp/>now,<sp/>so<sp/>switch<sp/>back<sp/>to<sp/>dummy,<sp/>so<sp/>we<sp/>don&apos;t<sp/>need<sp/>to<sp/>keep<sp/>lock<sp/>on<sp/>mempool</highlight></codeline>
<codeline lineno="1127"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>view.SetBackend(dummy);</highlight></codeline>
<codeline lineno="1128"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1129"><highlight class="comment"></highlight></codeline>
<codeline lineno="1130"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>Check<sp/>for<sp/>non-standard<sp/>pay-to-script-hash<sp/>in<sp/>inputs</highlight></codeline>
<codeline lineno="1131"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>for<sp/>any<sp/>real<sp/>tx<sp/>this<sp/>will<sp/>be<sp/>checked<sp/>on<sp/>AcceptToMemoryPool<sp/>anyway</highlight></codeline>
<codeline lineno="1132"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(Params().RequireStandard()<sp/>&amp;&amp;<sp/>!AreInputsStandard(tx,<sp/>view))</highlight></codeline>
<codeline lineno="1133"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>error(&quot;AcceptableInputs:<sp/>:<sp/>nonstandard<sp/>transaction<sp/>input&quot;);</highlight></codeline>
<codeline lineno="1134"><highlight class="comment"></highlight></codeline>
<codeline lineno="1135"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>Check<sp/>that<sp/>the<sp/>transaction<sp/>doesn&apos;t<sp/>have<sp/>an<sp/>excessive<sp/>number<sp/>of</highlight></codeline>
<codeline lineno="1136"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>sigops,<sp/>making<sp/>it<sp/>impossible<sp/>to<sp/>mine.<sp/>Since<sp/>the<sp/>coinbase<sp/>transaction</highlight></codeline>
<codeline lineno="1137"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>itself<sp/>can<sp/>contain<sp/>sigops<sp/>MAX_TX_SIGOPS<sp/>is<sp/>less<sp/>than</highlight></codeline>
<codeline lineno="1138"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>MAX_BLOCK_SIGOPS;<sp/>we<sp/>still<sp/>consider<sp/>this<sp/>an<sp/>invalid<sp/>rather<sp/>than</highlight></codeline>
<codeline lineno="1139"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>merely<sp/>non-standard<sp/>transaction.</highlight></codeline>
<codeline lineno="1140"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MapPrevTx<sp/>mapInputs;</highlight></codeline>
<codeline lineno="1141"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>unsigned<sp/>int<sp/>nSigOps<sp/>=<sp/>GetLegacySigOpCount(tx);</highlight></codeline>
<codeline lineno="1142"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nSigOps<sp/>+=<sp/>GetP2SHSigOpCount(tx,<sp/>mapInputs);</highlight></codeline>
<codeline lineno="1143"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(nSigOps<sp/>&gt;<sp/>MAX_TX_SIGOPS)</highlight></codeline>
<codeline lineno="1144"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>error(&quot;AcceptableInputs<sp/>:<sp/>too<sp/>many<sp/>sigops<sp/>%s,<sp/>%d<sp/>&gt;<sp/>%d&quot;,</highlight></codeline>
<codeline lineno="1145"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>hash.ToString(),<sp/>nSigOps,<sp/>MAX_TX_SIGOPS,</highlight></codeline>
<codeline lineno="1146"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>REJECT_NONSTANDARD,<sp/>&quot;bad-txns-too-many-sigops&quot;);</highlight></codeline>
<codeline lineno="1147"><highlight class="comment"></highlight></codeline>
<codeline lineno="1148"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CAmount<sp/>nValueOut<sp/>=<sp/>tx.GetValueOut();</highlight></codeline>
<codeline lineno="1149"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CAmount<sp/>nFees<sp/>=<sp/>nValueIn-nValueOut;</highlight></codeline>
<codeline lineno="1150"><highlight class="comment"></highlight></codeline>
<codeline lineno="1151"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>unsigned<sp/>int<sp/>nSize<sp/>=<sp/>::GetSerializeSize(tx,<sp/>SER_NETWORK,<sp/>PROTOCOL_VERSION);</highlight></codeline>
<codeline lineno="1152"><highlight class="comment"></highlight></codeline>
<codeline lineno="1153"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>Don&apos;t<sp/>accept<sp/>it<sp/>if<sp/>it<sp/>can&apos;t<sp/>get<sp/>into<sp/>a<sp/>block</highlight></codeline>
<codeline lineno="1154"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>but<sp/>prioritise<sp/>sstx<sp/>and<sp/>don&apos;t<sp/>check<sp/>fees<sp/>for<sp/>it</highlight></codeline>
<codeline lineno="1155"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if(mapSandstormBroadcastTxes.count(hash))<sp/>{</highlight></codeline>
<codeline lineno="1156"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>Normally<sp/>we<sp/>would<sp/>PrioritiseTransaction<sp/>But<sp/>currently<sp/>it<sp/>is<sp/>unimplemented</highlight></codeline>
<codeline lineno="1157"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//mempool.PrioritiseTransaction(hash,<sp/>hash.ToString(),<sp/>10000,<sp/>0.1<sp/>*<sp/>COIN);<sp/><sp/>//TODO<sp/>(Amir):<sp/>Put<sp/>this<sp/>line<sp/>back.<sp/>needs<sp/>PrioritiseTransaction</highlight></codeline>
<codeline lineno="1158"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/>else<sp/>if(!ignoreFees){</highlight></codeline>
<codeline lineno="1159"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int64_t<sp/>txMinFee<sp/>=<sp/>GetMinFee(tx,<sp/>nSize,<sp/>true,<sp/>GMF_RELAY);</highlight></codeline>
<codeline lineno="1160"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(fLimitFree<sp/>&amp;&amp;<sp/>nFees<sp/>&lt;<sp/>txMinFee)</highlight></codeline>
<codeline lineno="1161"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>error(&quot;AcceptToMemoryPool<sp/>:<sp/>not<sp/>enough<sp/>fees<sp/>%s,<sp/>%d<sp/>&lt;<sp/>%d&quot;,</highlight></codeline>
<codeline lineno="1162"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>hash.ToString(),</highlight></codeline>
<codeline lineno="1163"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nFees,<sp/>txMinFee);</highlight></codeline>
<codeline lineno="1164"><highlight class="comment"></highlight></codeline>
<codeline lineno="1165"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>Continuously<sp/>rate-limit<sp/>free<sp/>transactions</highlight></codeline>
<codeline lineno="1166"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>This<sp/>mitigates<sp/>&apos;penny-flooding&apos;<sp/>--<sp/>sending<sp/>thousands<sp/>of<sp/>free<sp/>transactions<sp/>just<sp/>to</highlight></codeline>
<codeline lineno="1167"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>be<sp/>annoying<sp/>or<sp/>make<sp/>others&apos;<sp/>transactions<sp/>take<sp/>longer<sp/>to<sp/>confirm.</highlight></codeline>
<codeline lineno="1168"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(fLimitFree<sp/>&amp;&amp;<sp/>nFees<sp/>&lt;<sp/>MIN_RELAY_TX_FEE)</highlight></codeline>
<codeline lineno="1169"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1170"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>static<sp/>CCriticalSection<sp/>csFreeLimiter;</highlight></codeline>
<codeline lineno="1171"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>static<sp/>double<sp/>dFreeCount;</highlight></codeline>
<codeline lineno="1172"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>static<sp/>int64_t<sp/>nLastTime;</highlight></codeline>
<codeline lineno="1173"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int64_t<sp/>nNow<sp/>=<sp/>GetTime();</highlight></codeline>
<codeline lineno="1174"><highlight class="comment"></highlight></codeline>
<codeline lineno="1175"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>LOCK(csFreeLimiter);</highlight></codeline>
<codeline lineno="1176"><highlight class="comment"></highlight></codeline>
<codeline lineno="1177"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>Use<sp/>an<sp/>exponentially<sp/>decaying<sp/>~10-minute<sp/>window:</highlight></codeline>
<codeline lineno="1178"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dFreeCount<sp/>*=<sp/>pow(1.0<sp/>-<sp/>1.0/600.0,<sp/>(double)(nNow<sp/>-<sp/>nLastTime));</highlight></codeline>
<codeline lineno="1179"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nLastTime<sp/>=<sp/>nNow;</highlight></codeline>
<codeline lineno="1180"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>-limitfreerelay<sp/>unit<sp/>is<sp/>thousand-bytes-per-minute</highlight></codeline>
<codeline lineno="1181"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>At<sp/>default<sp/>rate<sp/>it<sp/>would<sp/>take<sp/>over<sp/>a<sp/>month<sp/>to<sp/>fill<sp/>1GB</highlight></codeline>
<codeline lineno="1182"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(dFreeCount<sp/>&gt;<sp/>GetArg(&quot;-limitfreerelay&quot;,<sp/>15)*10*1000)</highlight></codeline>
<codeline lineno="1183"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>error(&quot;AcceptableInputs<sp/>:<sp/>free<sp/>transaction<sp/>rejected<sp/>by<sp/>rate<sp/>limiter&quot;);</highlight></codeline>
<codeline lineno="1184"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>LogPrint(&quot;mempool&quot;,<sp/>&quot;Rate<sp/>limit<sp/>dFreeCount:<sp/>%g<sp/>=&gt;<sp/>%g\n&quot;,<sp/>dFreeCount,<sp/>dFreeCount+nSize);</highlight></codeline>
<codeline lineno="1185"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dFreeCount<sp/>+=<sp/>nSize;</highlight></codeline>
<codeline lineno="1186"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1187"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1188"><highlight class="comment"></highlight></codeline>
<codeline lineno="1189"><highlight class="comment"></highlight></codeline>
<codeline lineno="1190"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(fRejectInsaneFee<sp/>&amp;&amp;<sp/>nFees<sp/>&gt;<sp/>MIN_RELAY_TX_FEE<sp/>*<sp/>10000)</highlight></codeline>
<codeline lineno="1191"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>error(&quot;AcceptableInputs:<sp/>:<sp/>insane<sp/>fees<sp/>%s,<sp/>%d<sp/>&gt;<sp/>%d&quot;,</highlight></codeline>
<codeline lineno="1192"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>hash.ToString(),</highlight></codeline>
<codeline lineno="1193"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nFees,<sp/>MIN_RELAY_TX_FEE<sp/>*<sp/>10000);</highlight></codeline>
<codeline lineno="1194"><highlight class="comment"></highlight></codeline>
<codeline lineno="1195"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>Check<sp/>against<sp/>previous<sp/>transactions</highlight></codeline>
<codeline lineno="1196"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>This<sp/>is<sp/>done<sp/>last<sp/>to<sp/>help<sp/>prevent<sp/>CPU<sp/>exhaustion<sp/>denial-of-service<sp/>attacks.</highlight></codeline>
<codeline lineno="1197"><highlight class="comment"></highlight></codeline>
<codeline lineno="1198"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(!txPoS.ConnectInputs(tx,<sp/>txdb,<sp/>mapInputs,<sp/>mapUnused,<sp/>CDiskTxPos(1,1,1),<sp/>pindexBest,<sp/>false,<sp/>false,<sp/>STANDARD_SCRIPT_VERIFY_FLAGS))</highlight></codeline>
<codeline lineno="1199"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1200"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>error(&quot;AcceptToMemoryPool<sp/>:<sp/>ConnectInputs<sp/>failed<sp/>%s&quot;,<sp/>hash.ToString());</highlight></codeline>
<codeline lineno="1201"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1202"><highlight class="comment"></highlight></codeline>
<codeline lineno="1203"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>Check<sp/>again<sp/>against<sp/>just<sp/>the<sp/>consensus-critical<sp/>mandatory<sp/>script</highlight></codeline>
<codeline lineno="1204"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>verification<sp/>flags,<sp/>in<sp/>case<sp/>of<sp/>bugs<sp/>in<sp/>the<sp/>standard<sp/>flags<sp/>that<sp/>cause</highlight></codeline>
<codeline lineno="1205"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>transactions<sp/>to<sp/>pass<sp/>as<sp/>valid<sp/>when<sp/>they&apos;re<sp/>actually<sp/>invalid.<sp/>For</highlight></codeline>
<codeline lineno="1206"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>instance<sp/>the<sp/>STRICTENC<sp/>flag<sp/>was<sp/>incorrectly<sp/>allowing<sp/>certain</highlight></codeline>
<codeline lineno="1207"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>CHECKSIG<sp/>NOT<sp/>scripts<sp/>to<sp/>pass,<sp/>even<sp/>though<sp/>they<sp/>were<sp/>invalid.</highlight></codeline>
<codeline lineno="1208"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//</highlight></codeline>
<codeline lineno="1209"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>There<sp/>is<sp/>a<sp/>similar<sp/>check<sp/>in<sp/>CreateNewBlock()<sp/>to<sp/>prevent<sp/>creating</highlight></codeline>
<codeline lineno="1210"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>invalid<sp/>blocks,<sp/>however<sp/>allowing<sp/>such<sp/>transactions<sp/>into<sp/>the<sp/>mempool</highlight></codeline>
<codeline lineno="1211"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>can<sp/>be<sp/>exploited<sp/>as<sp/>a<sp/>DoS<sp/>attack.</highlight></codeline>
<codeline lineno="1212"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(!txPoS.ConnectInputs(tx,<sp/>txdb,<sp/>mapInputs,<sp/>mapUnused,<sp/>CDiskTxPos(1,1,1),<sp/>pindexBest,<sp/>false,<sp/>false,<sp/>MANDATORY_SCRIPT_VERIFY_FLAGS))</highlight></codeline>
<codeline lineno="1213"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1214"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>error(&quot;AcceptToMemoryPool:<sp/>:<sp/>BUG!<sp/>PLEASE<sp/>REPORT<sp/>THIS!<sp/>ConnectInputs<sp/>failed<sp/>against<sp/>MANDATORY<sp/>but<sp/>not<sp/>STANDARD<sp/>flags<sp/>%s&quot;,<sp/>hash.ToString());</highlight></codeline>
<codeline lineno="1215"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1216"><highlight class="comment"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1217"><highlight class="comment"></highlight></codeline>
<codeline lineno="1218"><highlight class="comment"><sp/><sp/><sp/><sp/>//<sp/>Store<sp/>transaction<sp/>in<sp/>memory</highlight></codeline>
<codeline lineno="1219"><highlight class="comment"><sp/><sp/><sp/><sp/>pool.addUnchecked(hash,<sp/>tx);</highlight></codeline>
<codeline lineno="1220"><highlight class="comment"><sp/><sp/><sp/><sp/>setValidatedTx.insert(hash);</highlight></codeline>
<codeline lineno="1221"><highlight class="comment"></highlight></codeline>
<codeline lineno="1222"><highlight class="comment"><sp/><sp/><sp/><sp/>SyncWithWallets(tx,<sp/>NULL);</highlight></codeline>
<codeline lineno="1223"><highlight class="comment"></highlight></codeline>
<codeline lineno="1224"><highlight class="comment"><sp/><sp/><sp/><sp/>LogPrint(&quot;mempool&quot;,<sp/>&quot;AcceptToMemoryPool<sp/>:<sp/>accepted<sp/>%s<sp/>(poolsz<sp/>%u)\n&quot;,</highlight></codeline>
<codeline lineno="1225"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>hash.ToString(),</highlight></codeline>
<codeline lineno="1226"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pool.mapTx.size());</highlight></codeline>
<codeline lineno="1227"><highlight class="comment"><sp/><sp/><sp/><sp/>return<sp/>true;</highlight></codeline>
<codeline lineno="1228"><highlight class="comment">}*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1229"><highlight class="normal"></highlight></codeline>
<codeline lineno="1230" refid="main_8h_1a4d2373d0ce79227c95358116aae667f3" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="main_8cpp_1af0be4f98088716bf40c79db7734b1d01" kindref="member">AcceptableInputs</ref>(<ref refid="class_c_tx_mem_pool" kindref="compound">CTxMemPool</ref>&amp;<sp/>pool,<sp/><ref refid="class_c_validation_state" kindref="compound">CValidationState</ref><sp/>&amp;state,<sp/><ref refid="class_c_transaction" kindref="compound">CTransaction</ref><sp/>&amp;tx,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>fLimitFree,</highlight></codeline>
<codeline lineno="1231"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal">*<sp/>pfMissingInputs,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>fRejectInsaneFee,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>isSSTX)</highlight></codeline>
<codeline lineno="1232"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1233"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="sync_8h_1acd61d0cb3b49f367728193720014aed0" kindref="member">AssertLockHeld</ref>(cs_main);</highlight></codeline>
<codeline lineno="1234"><highlight class="normal"></highlight></codeline>
<codeline lineno="1235"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!tx.<ref refid="class_c_transaction_1afa2875bea30d31900a30baf7fd56b96b" kindref="member">CheckTransaction</ref>(state))</highlight></codeline>
<codeline lineno="1236"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>error(</highlight><highlight class="stringliteral">&quot;AcceptableInputs<sp/>:<sp/>CheckTransaction<sp/>failed&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1237"><highlight class="normal"></highlight></codeline>
<codeline lineno="1238"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Coinbase<sp/>is<sp/>only<sp/>valid<sp/>in<sp/>a<sp/>block,<sp/>not<sp/>as<sp/>a<sp/>loose<sp/>transaction</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1239"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(tx.<ref refid="class_c_transaction_1a274384ecbb50d71355cd287b7a6bca51" kindref="member">IsCoinBase</ref>())</highlight></codeline>
<codeline lineno="1240"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>tx.<ref refid="class_c_transaction_1a52eaee52d8827b7265f9dcd308b2a812" kindref="member">DoS</ref>(100,<sp/>error(</highlight><highlight class="stringliteral">&quot;AcceptableInputs<sp/>:<sp/>coinbase<sp/>as<sp/>individual<sp/>tx&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="1241"><highlight class="normal"></highlight></codeline>
<codeline lineno="1242"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>ppcoin:<sp/>coinstake<sp/>is<sp/>also<sp/>only<sp/>valid<sp/>in<sp/>a<sp/>block,<sp/>not<sp/>as<sp/>a<sp/>loose<sp/>transaction</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1243"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(tx.<ref refid="class_c_transaction_1a8d924e18ddcf4c31bc7483b3a157113d" kindref="member">IsCoinStake</ref>())</highlight></codeline>
<codeline lineno="1244"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>tx.<ref refid="class_c_transaction_1a52eaee52d8827b7265f9dcd308b2a812" kindref="member">DoS</ref>(100,<sp/>error(</highlight><highlight class="stringliteral">&quot;AcceptableInputs<sp/>:<sp/>coinstake<sp/>as<sp/>individual<sp/>tx&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="1245"><highlight class="normal"></highlight></codeline>
<codeline lineno="1246"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Rather<sp/>not<sp/>work<sp/>on<sp/>nonstandard<sp/>transactions<sp/>(unless<sp/>-testnet)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1247"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>reason;</highlight></codeline>
<codeline lineno="1248"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//if<sp/>(!TestNet()<sp/>&amp;&amp;<sp/>!IsStandardTx(tx,<sp/>reason))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1249"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>return<sp/>error(&quot;AcceptableInputs<sp/>:<sp/>nonstandard<sp/>transaction:<sp/>%s&quot;,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1250"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>reason);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1251"><highlight class="normal"></highlight></codeline>
<codeline lineno="1252"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>is<sp/>it<sp/>already<sp/>in<sp/>the<sp/>memory<sp/>pool?</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1253"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classuint256" kindref="compound">uint256</ref><sp/>hash<sp/>=<sp/>tx.<ref refid="class_c_transaction_1a3f8666d2a275c40da14bd5eaf47dc004" kindref="member">GetHash</ref>();</highlight></codeline>
<codeline lineno="1254"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(pool.<ref refid="class_c_tx_mem_pool_1a93b2aa8c01fa291d183a82a9e0beeb35" kindref="member">exists</ref>(hash))</highlight></codeline>
<codeline lineno="1255"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1256"><highlight class="normal"></highlight></codeline>
<codeline lineno="1257"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>-----------<sp/>InstantX<sp/>transaction<sp/>scanning<sp/>-----------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1258"><highlight class="normal"></highlight></codeline>
<codeline lineno="1259"><highlight class="normal"><sp/><sp/><sp/><sp/>BOOST_FOREACH(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_c_tx_in" kindref="compound">CTxIn</ref>&amp;<sp/>in,<sp/>tx.<ref refid="class_c_transaction_1a53fa787e4ea57374b4fa2a28e9a957b2" kindref="member">vin</ref>){</highlight></codeline>
<codeline lineno="1260"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="instantx_8cpp_1add05f27cf823b63d3c4ac615cae0f85c" kindref="member">mapLockedInputs</ref>.count(in.<ref refid="class_c_tx_in_1aed9312051a25380cbd7f123408ab7c20" kindref="member">prevout</ref>)){</highlight></codeline>
<codeline lineno="1261"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="instantx_8cpp_1add05f27cf823b63d3c4ac615cae0f85c" kindref="member">mapLockedInputs</ref>[in.<ref refid="class_c_tx_in_1aed9312051a25380cbd7f123408ab7c20" kindref="member">prevout</ref>]<sp/>!=<sp/>tx.<ref refid="class_c_transaction_1a3f8666d2a275c40da14bd5eaf47dc004" kindref="member">GetHash</ref>()){</highlight></codeline>
<codeline lineno="1262"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>state.<ref refid="class_c_validation_state_1a3c6786d00da8d1c5df25b4c3876409e8" kindref="member">DoS</ref>(0,</highlight></codeline>
<codeline lineno="1263"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>error(</highlight><highlight class="stringliteral">&quot;AcceptableInputs<sp/>:<sp/>conflicts<sp/>with<sp/>existing<sp/>transaction<sp/>lock:<sp/>%s&quot;</highlight><highlight class="normal">,<sp/>reason),</highlight></codeline>
<codeline lineno="1264"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>REJECT_INVALID,<sp/></highlight><highlight class="stringliteral">&quot;tx-lock-conflict&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1265"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1266"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1267"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1268"><highlight class="normal"></highlight></codeline>
<codeline lineno="1269"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Check<sp/>for<sp/>conflicts<sp/>with<sp/>in-memory<sp/>transactions</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1270"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1271"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="sync_8h_1a911fe23f057c2fe5aad629162d6c99d0" kindref="member">LOCK</ref>(pool.<ref refid="class_c_tx_mem_pool_1ac7ee8c06837c7d2688e2d7e3d071bdbb" kindref="member">cs</ref>);<sp/></highlight><highlight class="comment">//<sp/>protect<sp/>pool.mapNextTx</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1272"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>tx.<ref refid="class_c_transaction_1a53fa787e4ea57374b4fa2a28e9a957b2" kindref="member">vin</ref>.size();<sp/>i++)</highlight></codeline>
<codeline lineno="1273"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1274"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_c_out_point" kindref="compound">COutPoint</ref><sp/>outpoint<sp/>=<sp/>tx.<ref refid="class_c_transaction_1a53fa787e4ea57374b4fa2a28e9a957b2" kindref="member">vin</ref>[i].prevout;</highlight></codeline>
<codeline lineno="1275"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(pool.<ref refid="class_c_tx_mem_pool_1aae6f1162f0b2e42b369971f32a9f71e8" kindref="member">mapNextTx</ref>.count(outpoint))</highlight></codeline>
<codeline lineno="1276"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1277"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Disable<sp/>replacement<sp/>feature<sp/>for<sp/>now</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1278"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1279"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1280"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1281"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1282"><highlight class="normal"></highlight></codeline>
<codeline lineno="1283"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1284"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_c_tx_d_b" kindref="compound">CTxDB</ref><sp/><ref refid="txdb-leveldb_8cpp_1a72eff8ae1d84de13daf97a61b8c02bc6" kindref="member">txdb</ref>(</highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1285"><highlight class="normal"></highlight></codeline>
<codeline lineno="1286"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>do<sp/>we<sp/>already<sp/>have<sp/>it?</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1287"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(txdb.<ref refid="class_c_tx_d_b_1a09b87317101ed16b6ad99794279f4c2d" kindref="member">ContainsTx</ref>(hash))</highlight></codeline>
<codeline lineno="1288"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1289"><highlight class="normal"></highlight></codeline>
<codeline lineno="1290"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="main_8h_1a05bae354566c88f7dca5ad13aaf8b30f" kindref="member">MapPrevTx</ref><sp/>mapInputs;</highlight></codeline>
<codeline lineno="1291"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>map&lt;uint256,<sp/>CTxIndex&gt;<sp/>mapUnused;</highlight></codeline>
<codeline lineno="1292"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>fInvalid<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1293"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_c_transaction_po_s" kindref="compound">CTransactionPoS</ref><sp/>txPoS;</highlight></codeline>
<codeline lineno="1294"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!txPoS.<ref refid="class_c_transaction_po_s_1a20a028e06f505f03a0d30a7f186d9489" kindref="member">FetchInputs</ref>(tx,<sp/>txdb,<sp/>mapUnused,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/>mapInputs,<sp/>fInvalid))</highlight></codeline>
<codeline lineno="1295"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1296"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fInvalid)</highlight></codeline>
<codeline lineno="1297"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>error(</highlight><highlight class="stringliteral">&quot;AcceptableInputs<sp/>:<sp/>FetchInputs<sp/>found<sp/>invalid<sp/>tx<sp/>%s&quot;</highlight><highlight class="normal">,<sp/>hash.<ref refid="classbase__uint_1ac3080a72402cadf28dbc9f9b69cc60be" kindref="member">ToString</ref>());</highlight></codeline>
<codeline lineno="1298"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1299"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1300"><highlight class="normal"></highlight></codeline>
<codeline lineno="1301"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Check<sp/>for<sp/>non-standard<sp/>pay-to-script-hash<sp/>in<sp/>inputs</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1302"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//if<sp/>(!TestNet()<sp/>&amp;&amp;<sp/>!AreInputsStandard(tx,<sp/>mapInputs))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1303"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/>return<sp/>error(&quot;AcceptToMemoryPool<sp/>:<sp/>nonstandard<sp/>transaction<sp/>input&quot;);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1304"><highlight class="normal"></highlight></codeline>
<codeline lineno="1305"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Check<sp/>that<sp/>the<sp/>transaction<sp/>doesn&apos;t<sp/>have<sp/>an<sp/>excessive<sp/>number<sp/>of</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1306"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>sigops,<sp/>making<sp/>it<sp/>impossible<sp/>to<sp/>mine.<sp/>Since<sp/>the<sp/>coinbase<sp/>transaction</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1307"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>itself<sp/>can<sp/>contain<sp/>sigops<sp/>MAX_TX_SIGOPS<sp/>is<sp/>less<sp/>than</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1308"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>MAX_BLOCK_SIGOPS;<sp/>we<sp/>still<sp/>consider<sp/>this<sp/>an<sp/>invalid<sp/>rather<sp/>than</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1309"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>merely<sp/>non-standard<sp/>transaction.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1310"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nSigOps<sp/>=<sp/><ref refid="main_8cpp_1ad2eaf4f8542c12ea9ee1183609cc6d1a" kindref="member">GetLegacySigOpCount</ref>(tx);</highlight></codeline>
<codeline lineno="1311"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nSigOps<sp/>+=<sp/><ref refid="main_8cpp_1a519cfd439598a8bf64fe5503aa74cfcb" kindref="member">GetP2SHSigOpCount</ref>(tx,<sp/>mapInputs);</highlight></codeline>
<codeline lineno="1312"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(nSigOps<sp/>&gt;<sp/>MAX_TX_SIGOPS)</highlight></codeline>
<codeline lineno="1313"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>tx.<ref refid="class_c_transaction_1a52eaee52d8827b7265f9dcd308b2a812" kindref="member">DoS</ref>(0,</highlight></codeline>
<codeline lineno="1314"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>error(</highlight><highlight class="stringliteral">&quot;AcceptableInputs<sp/>:<sp/>too<sp/>many<sp/>sigops<sp/>%s,<sp/>%d<sp/>&gt;<sp/>%d&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="1315"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>hash.<ref refid="classbase__uint_1ac3080a72402cadf28dbc9f9b69cc60be" kindref="member">ToString</ref>(),<sp/>nSigOps,<sp/>MAX_TX_SIGOPS));</highlight></codeline>
<codeline lineno="1316"><highlight class="normal"></highlight></codeline>
<codeline lineno="1317"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="amount_8h_1a4eaf3a5239714d8c45b851527f7cb564" kindref="member">CAmount</ref><sp/>nFees<sp/>=<sp/>txPoS.<ref refid="class_c_transaction_po_s_1ac2c734d9f302dda6e8681ce6d0f7843e" kindref="member">GetValueIn</ref>(tx,<sp/>mapInputs)-txPoS.<ref refid="class_c_transaction_po_s_1ad85303c69a61f41eb8874f07c15faa10" kindref="member">GetValueOut</ref>(tx);</highlight></codeline>
<codeline lineno="1318"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nSize<sp/>=<sp/><ref refid="serialize_8h_1a48239e478ae730373d1984fe304ca025" kindref="member">::GetSerializeSize</ref>(tx,<sp/><ref refid="serialize_8h_1a6b7b47dd702d9e331586d485013fd1eaa652754eeaf79fba4fcf4c18597a6961c" kindref="member">SER_NETWORK</ref>,<sp/>PROTOCOL_VERSION);</highlight></codeline>
<codeline lineno="1319"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="amount_8h_1a4eaf3a5239714d8c45b851527f7cb564" kindref="member">CAmount</ref><sp/>txMinFee<sp/>=<sp/><ref refid="main_8cpp_1a67d4c24facb2a0d89f92065581c486df" kindref="member">GetMinFee</ref>(tx,<sp/>nSize,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">,<sp/><ref refid="main_8h_1a8c24d39fc07a60d3c019618a73cc15a7a79d7494c7b44dac59ff3143ac440e2f5" kindref="member">GMF_RELAY</ref>);</highlight></codeline>
<codeline lineno="1320"><highlight class="normal"></highlight></codeline>
<codeline lineno="1321"><highlight class="normal"></highlight></codeline>
<codeline lineno="1322"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Don&apos;t<sp/>accept<sp/>it<sp/>if<sp/>it<sp/>can&apos;t<sp/>get<sp/>into<sp/>a<sp/>block</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1323"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(isSSTX)<sp/>{</highlight></codeline>
<codeline lineno="1324"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Normally<sp/>we<sp/>would<sp/>PrioritiseTransaction<sp/>But<sp/>currently<sp/>it<sp/>is<sp/>unimplemented</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1325"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>mempool.PrioritiseTransaction(hash,<sp/>hash.ToString(),<sp/>1000,<sp/>0.1*COIN);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1326"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{<sp/></highlight><highlight class="comment">//<sp/>same<sp/>as<sp/>!ignoreFees<sp/>for<sp/>AcceptToMemoryPool</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1327"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fLimitFree<sp/>&amp;&amp;<sp/>nFees<sp/>&lt;<sp/>txMinFee)</highlight></codeline>
<codeline lineno="1328"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>error(</highlight><highlight class="stringliteral">&quot;AcceptableInputs<sp/>:<sp/>not<sp/>enough<sp/>fees<sp/>%s,<sp/>%d<sp/>&lt;<sp/>%d&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="1329"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>hash.<ref refid="classbase__uint_1ac3080a72402cadf28dbc9f9b69cc60be" kindref="member">ToString</ref>(),</highlight></codeline>
<codeline lineno="1330"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nFees,<sp/>txMinFee);</highlight></codeline>
<codeline lineno="1331"><highlight class="normal"></highlight></codeline>
<codeline lineno="1332"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Continuously<sp/>rate-limit<sp/>free<sp/>transactions</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1333"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>This<sp/>mitigates<sp/>&apos;penny-flooding&apos;<sp/>--<sp/>sending<sp/>thousands<sp/>of<sp/>free<sp/>transactions<sp/>just<sp/>to</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1334"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>be<sp/>annoying<sp/>or<sp/>make<sp/>others&apos;<sp/>transactions<sp/>take<sp/>longer<sp/>to<sp/>confirm.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1335"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fLimitFree<sp/>&amp;&amp;<sp/>nFees<sp/>&lt;<sp/><ref refid="wallet_8h_1aaf857d36fa12074d08ab75d2e5e2c6de" kindref="member">MIN_RELAY_TX_FEE</ref>)</highlight></codeline>
<codeline lineno="1336"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1337"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="class_annotated_mixin" kindref="compound">CCriticalSection</ref><sp/>csFreeLimiter;</highlight></codeline>
<codeline lineno="1338"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>dFreeCount;</highlight></codeline>
<codeline lineno="1339"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="stdint_8h_1adec1df1b8b51cb32b77e5b86fff46471" kindref="member">int64_t</ref><sp/>nLastTime;</highlight></codeline>
<codeline lineno="1340"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stdint_8h_1adec1df1b8b51cb32b77e5b86fff46471" kindref="member">int64_t</ref><sp/>nNow<sp/>=<sp/><ref refid="util_8cpp_1a46fac5fba8ba905b5f9acb364f5d8c6f" kindref="member">GetTime</ref>();</highlight></codeline>
<codeline lineno="1341"><highlight class="normal"></highlight></codeline>
<codeline lineno="1342"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="sync_8h_1a911fe23f057c2fe5aad629162d6c99d0" kindref="member">LOCK</ref>(csFreeLimiter);</highlight></codeline>
<codeline lineno="1343"><highlight class="normal"></highlight></codeline>
<codeline lineno="1344"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Use<sp/>an<sp/>exponentially<sp/>decaying<sp/>~10-minute<sp/>window:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1345"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dFreeCount<sp/>*=<sp/>pow(1.0<sp/>-<sp/>1.0/600.0,<sp/>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">)(nNow<sp/>-<sp/>nLastTime));</highlight></codeline>
<codeline lineno="1346"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nLastTime<sp/>=<sp/>nNow;</highlight></codeline>
<codeline lineno="1347"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>-limitfreerelay<sp/>unit<sp/>is<sp/>thousand-bytes-per-minute</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1348"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>At<sp/>default<sp/>rate<sp/>it<sp/>would<sp/>take<sp/>over<sp/>a<sp/>month<sp/>to<sp/>fill<sp/>1GB</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1349"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(dFreeCount<sp/>&gt;<sp/><ref refid="util_8cpp_1a24f685720bf40370e5bd2a192ad50cd8" kindref="member">GetArg</ref>(</highlight><highlight class="stringliteral">&quot;-limitfreerelay&quot;</highlight><highlight class="normal">,<sp/>15)*10*1000)</highlight></codeline>
<codeline lineno="1350"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>error(</highlight><highlight class="stringliteral">&quot;AcceptableInputs<sp/>:<sp/>free<sp/>transaction<sp/>rejected<sp/>by<sp/>rate<sp/>limiter&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1351"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>LogPrint(</highlight><highlight class="stringliteral">&quot;mempool&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Rate<sp/>limit<sp/>dFreeCount:<sp/>%g<sp/>=&gt;<sp/>%g\n&quot;</highlight><highlight class="normal">,<sp/>dFreeCount,<sp/>dFreeCount+nSize);</highlight></codeline>
<codeline lineno="1352"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dFreeCount<sp/>+=<sp/>nSize;</highlight></codeline>
<codeline lineno="1353"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1354"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1355"><highlight class="normal"></highlight></codeline>
<codeline lineno="1356"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fRejectInsaneFee<sp/>&amp;&amp;<sp/>nFees<sp/>&gt;<sp/>txMinFee<sp/>*<sp/>10000)</highlight></codeline>
<codeline lineno="1357"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>error(</highlight><highlight class="stringliteral">&quot;AcceptableInputs:<sp/>:<sp/>insane<sp/>fees<sp/>%s,<sp/>%d<sp/>&gt;<sp/>%d&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="1358"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>hash.<ref refid="classbase__uint_1ac3080a72402cadf28dbc9f9b69cc60be" kindref="member">ToString</ref>(),</highlight></codeline>
<codeline lineno="1359"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nFees,<sp/><ref refid="wallet_8h_1aaf857d36fa12074d08ab75d2e5e2c6de" kindref="member">MIN_RELAY_TX_FEE</ref><sp/>*<sp/>10000);</highlight></codeline>
<codeline lineno="1360"><highlight class="normal"></highlight></codeline>
<codeline lineno="1361"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Check<sp/>against<sp/>previous<sp/>transactions</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1362"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>This<sp/>is<sp/>done<sp/>last<sp/>to<sp/>help<sp/>prevent<sp/>CPU<sp/>exhaustion<sp/>denial-of-service<sp/>attacks.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1363"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!txPoS.<ref refid="class_c_transaction_po_s_1a19de7fad0cc156ebd4e5a3858db7619f" kindref="member">ConnectInputs</ref>(tx,<sp/>txdb,<sp/>mapInputs,<sp/>mapUnused,<sp/><ref refid="class_c_disk_tx_pos" kindref="compound">CDiskTxPos</ref>(1,1,1),<sp/>pindexBest,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/>STANDARD_SCRIPT_VERIFY_FLAGS,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">))</highlight></codeline>
<codeline lineno="1364"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1365"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>error(</highlight><highlight class="stringliteral">&quot;AcceptableInputs<sp/>:<sp/>ConnectInputs<sp/>failed<sp/>%s&quot;</highlight><highlight class="normal">,<sp/>hash.<ref refid="classbase__uint_1ac3080a72402cadf28dbc9f9b69cc60be" kindref="member">ToString</ref>());</highlight></codeline>
<codeline lineno="1366"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1367"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1368"><highlight class="normal"></highlight></codeline>
<codeline lineno="1369"><highlight class="normal"></highlight></codeline>
<codeline lineno="1370"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*LogPrint(&quot;mempool&quot;,<sp/>&quot;AcceptableInputs<sp/>:<sp/>accepted<sp/>%s<sp/>(poolsz<sp/>%u)\n&quot;,</highlight></codeline>
<codeline lineno="1371"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>hash.ToString(),</highlight></codeline>
<codeline lineno="1372"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pool.mapTx.size());</highlight></codeline>
<codeline lineno="1373"><highlight class="comment"><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1374"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1375"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1376"><highlight class="normal"></highlight></codeline>
<codeline lineno="1377"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>CMerkleTx::GetDepthInMainChainINTERNAL(<ref refid="class_c_block_index" kindref="compound">CBlockIndex</ref>*<sp/>&amp;pindexRet)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="1378"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1379"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(hashBlock<sp/>==<sp/>0<sp/>||<sp/>nIndex<sp/>==<sp/>-1)</highlight></codeline>
<codeline lineno="1380"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="1381"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="sync_8h_1acd61d0cb3b49f367728193720014aed0" kindref="member">AssertLockHeld</ref>(cs_main);</highlight></codeline>
<codeline lineno="1382"><highlight class="normal"></highlight></codeline>
<codeline lineno="1383"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Find<sp/>the<sp/>block<sp/>it<sp/>claims<sp/>to<sp/>be<sp/>in</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1384"><highlight class="normal"><sp/><sp/><sp/><sp/>map&lt;uint256,<sp/>CBlockIndex*&gt;::iterator<sp/>mi<sp/>=<sp/>mapBlockIndex.find(hashBlock);</highlight></codeline>
<codeline lineno="1385"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mi<sp/>==<sp/>mapBlockIndex.end())</highlight></codeline>
<codeline lineno="1386"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="1387"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_c_block_index" kindref="compound">CBlockIndex</ref>*<sp/>pindex<sp/>=<sp/>(*mi).second;</highlight></codeline>
<codeline lineno="1388"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!pindex<sp/>||<sp/>!pindex-&gt;<ref refid="class_c_block_index_1ae75f87263a196d250cc2bf10d70aa510" kindref="member">IsInMainChain</ref>())</highlight></codeline>
<codeline lineno="1389"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="1390"><highlight class="normal"></highlight></codeline>
<codeline lineno="1391"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Make<sp/>sure<sp/>the<sp/>merkle<sp/>branch<sp/>connects<sp/>to<sp/>this<sp/>block</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1392"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!fMerkleVerified)</highlight></codeline>
<codeline lineno="1393"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1394"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="class_c_block_1ab0d596c51fb317e3cb6f444015a652a5" kindref="member">CBlock::CheckMerkleBranch</ref>(GetHash(),<sp/>vMerkleBranch,<sp/>nIndex)<sp/>!=<sp/>pindex-&gt;<ref refid="class_c_block_index_1a0601b6b2bd6eaedfbc283c00d045a21c" kindref="member">hashMerkleRoot</ref>)</highlight></codeline>
<codeline lineno="1395"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="1396"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fMerkleVerified<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1397"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1398"><highlight class="normal"></highlight></codeline>
<codeline lineno="1399"><highlight class="normal"><sp/><sp/><sp/><sp/>pindexRet<sp/>=<sp/>pindex;</highlight></codeline>
<codeline lineno="1400"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>pindexBest-&gt;<ref refid="class_c_block_index_1aebfc8d6b95852546760e742553d7bfd5" kindref="member">nHeight</ref><sp/>-<sp/>pindex-&gt;<ref refid="class_c_block_index_1aebfc8d6b95852546760e742553d7bfd5" kindref="member">nHeight</ref><sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="1401"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1402"><highlight class="normal"></highlight></codeline>
<codeline lineno="1403" refid="class_c_merkle_tx_1a6782c78aec9fd63e637dbf0668c8506e" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="class_c_merkle_tx_1a6782c78aec9fd63e637dbf0668c8506e" kindref="member">CMerkleTx::GetTransactionLockSignatures</ref>()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="1404"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1405"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!<ref refid="spork_8cpp_1a3305663176e21e81c80dc951a7f8ea5e" kindref="member">IsSporkActive</ref>(SPORK_2_INSTANTX))<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-3;</highlight></codeline>
<codeline lineno="1406"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!<ref refid="util_8cpp_1acb212e467afc6516452e15829eeb58d5" kindref="member">fEnableInstantX</ref>)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="1407"><highlight class="normal"></highlight></codeline>
<codeline lineno="1408"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//compile<sp/>consessus<sp/>vote</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1409"><highlight class="normal"><sp/><sp/><sp/><sp/>std::map&lt;uint256,<sp/>CTransactionLock&gt;::iterator<sp/>i<sp/>=<sp/><ref refid="instantx_8cpp_1a1ba3263228b7c76bab6188bf659ea249" kindref="member">mapTxLocks</ref>.find(GetHash());</highlight></codeline>
<codeline lineno="1410"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(i<sp/>!=<sp/><ref refid="instantx_8cpp_1a1ba3263228b7c76bab6188bf659ea249" kindref="member">mapTxLocks</ref>.end()){</highlight></codeline>
<codeline lineno="1411"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(*i).second.CountSignatures();</highlight></codeline>
<codeline lineno="1412"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1413"><highlight class="normal"></highlight></codeline>
<codeline lineno="1414"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="1415"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1416"><highlight class="normal"></highlight></codeline>
<codeline lineno="1417" refid="class_c_merkle_tx_1a31b0765b267cab5f76b308d1fe5d9375" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="class_c_merkle_tx_1a31b0765b267cab5f76b308d1fe5d9375" kindref="member">CMerkleTx::IsTransactionLockTimedOut</ref>()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="1418"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1419"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!<ref refid="util_8cpp_1acb212e467afc6516452e15829eeb58d5" kindref="member">fEnableInstantX</ref>)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="1420"><highlight class="normal"></highlight></codeline>
<codeline lineno="1421"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//compile<sp/>consessus<sp/>vote</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1422"><highlight class="normal"><sp/><sp/><sp/><sp/>std::map&lt;uint256,<sp/>CTransactionLock&gt;::iterator<sp/>i<sp/>=<sp/><ref refid="instantx_8cpp_1a1ba3263228b7c76bab6188bf659ea249" kindref="member">mapTxLocks</ref>.find(GetHash());</highlight></codeline>
<codeline lineno="1423"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(i<sp/>!=<sp/><ref refid="instantx_8cpp_1a1ba3263228b7c76bab6188bf659ea249" kindref="member">mapTxLocks</ref>.end()){</highlight></codeline>
<codeline lineno="1424"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="util_8cpp_1a46fac5fba8ba905b5f9acb364f5d8c6f" kindref="member">GetTime</ref>()<sp/>&gt;<sp/>(*i).second.nTimeout;</highlight></codeline>
<codeline lineno="1425"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1426"><highlight class="normal"></highlight></codeline>
<codeline lineno="1427"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1428"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1429"><highlight class="normal"></highlight></codeline>
<codeline lineno="1430" refid="class_c_merkle_tx_1a4208943ef656d3787c02ef9973d63f4a" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="class_c_merkle_tx_1a4208943ef656d3787c02ef9973d63f4a" kindref="member">CMerkleTx::GetDepthInMainChain</ref>(<ref refid="class_c_block_index" kindref="compound">CBlockIndex</ref>*<sp/>&amp;pindexRet,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>enableIX)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="1431"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1432"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="sync_8h_1acd61d0cb3b49f367728193720014aed0" kindref="member">AssertLockHeld</ref>(cs_main);</highlight></codeline>
<codeline lineno="1433"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nResult<sp/>=<sp/>GetDepthInMainChainINTERNAL(pindexRet);</highlight></codeline>
<codeline lineno="1434"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(nResult<sp/>==<sp/>0<sp/>&amp;&amp;<sp/>!<ref refid="main_8cpp_1a52890038ef379d29a1a8f3bd20dbe088" kindref="member">mempool</ref>.<ref refid="class_c_tx_mem_pool_1a93b2aa8c01fa291d183a82a9e0beeb35" kindref="member">exists</ref>(GetHash()))</highlight></codeline>
<codeline lineno="1435"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;<sp/></highlight><highlight class="comment">//<sp/>Not<sp/>in<sp/>chain,<sp/>not<sp/>in<sp/>mempool</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1436"><highlight class="normal"></highlight></codeline>
<codeline lineno="1437"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(enableIX){</highlight></codeline>
<codeline lineno="1438"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(nResult<sp/>&lt;<sp/>6){</highlight></codeline>
<codeline lineno="1439"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>signatures<sp/>=<sp/>GetTransactionLockSignatures();</highlight></codeline>
<codeline lineno="1440"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(signatures<sp/>&gt;=<sp/><ref refid="instantx_8h_1a9e15d55227c00c556fcb73d04f82283c" kindref="member">INSTANTX_SIGNATURES_REQUIRED</ref>){</highlight></codeline>
<codeline lineno="1441"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="util_8cpp_1aaebdfd83d8252d435dfa61f10e7b86e6" kindref="member">nInstantXDepth</ref>+nResult;</highlight></codeline>
<codeline lineno="1442"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1443"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1444"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1445"><highlight class="normal"></highlight></codeline>
<codeline lineno="1446"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>nResult;</highlight></codeline>
<codeline lineno="1447"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1448"><highlight class="normal"></highlight></codeline>
<codeline lineno="1449" refid="class_c_merkle_tx_1a8bd25cf06de6a443d0925ec8ba66c949" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="class_c_merkle_tx_1a8bd25cf06de6a443d0925ec8ba66c949" kindref="member">CMerkleTx::GetBlocksToMaturity</ref>()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="1450"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1451"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!(IsCoinBase()<sp/>||<sp/>IsCoinStake()))</highlight></codeline>
<codeline lineno="1452"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="1453"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>max(0,<sp/>nCoinbaseMaturity<sp/>-<sp/>GetDepthInMainChain());</highlight></codeline>
<codeline lineno="1454"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1455"><highlight class="normal"></highlight></codeline>
<codeline lineno="1456" refid="class_c_merkle_tx_1a61126e811a53b941b3efdf5a4e83db90" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="class_c_merkle_tx_1a61126e811a53b941b3efdf5a4e83db90" kindref="member">CMerkleTx::AcceptToMemoryPool</ref>(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>fLimitFree,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>fRejectInsaneFee,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>ignoreFees)</highlight></codeline>
<codeline lineno="1457"><highlight class="normal">{<sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1458"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_c_validation_state" kindref="compound">CValidationState</ref><sp/><ref refid="db__test_8cc_1a42432b4356adce5579ccf597f6e83e54" kindref="member">state</ref>;</highlight></codeline>
<codeline lineno="1459"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="main_8cpp_1ad73f7fbd48c12a894b914e6a51940c64" kindref="member">return ::AcceptToMemoryPool</ref>(<ref refid="main_8cpp_1a52890038ef379d29a1a8f3bd20dbe088" kindref="member">mempool</ref>,<sp/>state,<sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">,<sp/>fLimitFree,<sp/>NULL,<sp/>ignoreFees);</highlight></codeline>
<codeline lineno="1460"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1461"><highlight class="normal"></highlight></codeline>
<codeline lineno="1462" refid="class_c_wallet_tx_1af6d1a5a731bb69e1d94de84eb6fd15a5" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="class_c_wallet_tx_1aae2016163fb0bd7f0e1464d381ab8293" kindref="member">CWalletTx::AcceptWalletTransaction</ref>(<ref refid="class_c_tx_d_b" kindref="compound">CTxDB</ref>&amp;<sp/><ref refid="txdb-leveldb_8cpp_1a72eff8ae1d84de13daf97a61b8c02bc6" kindref="member">txdb</ref>)</highlight></codeline>
<codeline lineno="1463"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1464"><highlight class="normal"></highlight></codeline>
<codeline lineno="1465"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1466"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Add<sp/>previous<sp/>supporting<sp/>transactions<sp/>first</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1467"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>BOOST_FOREACH(<ref refid="class_c_merkle_tx" kindref="compound">CMerkleTx</ref>&amp;<sp/>tx,<sp/>vtxPrev)</highlight></codeline>
<codeline lineno="1468"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1469"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!(tx.<ref refid="class_c_transaction_1a274384ecbb50d71355cd287b7a6bca51" kindref="member">IsCoinBase</ref>()<sp/>||<sp/>tx.<ref refid="class_c_transaction_1a8d924e18ddcf4c31bc7483b3a157113d" kindref="member">IsCoinStake</ref>()))</highlight></codeline>
<codeline lineno="1470"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1471"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classuint256" kindref="compound">uint256</ref><sp/>hash<sp/>=<sp/>tx.<ref refid="class_c_transaction_1a3f8666d2a275c40da14bd5eaf47dc004" kindref="member">GetHash</ref>();</highlight></codeline>
<codeline lineno="1472"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="main_8cpp_1a52890038ef379d29a1a8f3bd20dbe088" kindref="member">mempool</ref>.<ref refid="class_c_tx_mem_pool_1a93b2aa8c01fa291d183a82a9e0beeb35" kindref="member">exists</ref>(hash)<sp/>&amp;&amp;<sp/>!txdb.<ref refid="class_c_tx_d_b_1a09b87317101ed16b6ad99794279f4c2d" kindref="member">ContainsTx</ref>(hash))</highlight></codeline>
<codeline lineno="1473"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tx.<ref refid="class_c_merkle_tx_1a61126e811a53b941b3efdf5a4e83db90" kindref="member">AcceptToMemoryPool</ref>(</highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1474"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1475"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1476"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="main_8cpp_1ad73f7fbd48c12a894b914e6a51940c64" kindref="member">AcceptToMemoryPool</ref>(</highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1477"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1478"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1479"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1480"><highlight class="normal"></highlight></codeline>
<codeline lineno="1481" refid="class_c_wallet_tx_1aae2016163fb0bd7f0e1464d381ab8293" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="class_c_wallet_tx_1aae2016163fb0bd7f0e1464d381ab8293" kindref="member">CWalletTx::AcceptWalletTransaction</ref>()</highlight></codeline>
<codeline lineno="1482"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1483"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_c_tx_d_b" kindref="compound">CTxDB</ref><sp/><ref refid="txdb-leveldb_8cpp_1a72eff8ae1d84de13daf97a61b8c02bc6" kindref="member">txdb</ref>(</highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1484"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>AcceptWalletTransaction(txdb);</highlight></codeline>
<codeline lineno="1485"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1486"><highlight class="normal"></highlight></codeline>
<codeline lineno="1487" refid="main_8h_1ae137d76bbcaf8d65fab905889b504e26" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="main_8cpp_1ae137d76bbcaf8d65fab905889b504e26" kindref="member">GetInputAge</ref>(<ref refid="class_c_tx_in" kindref="compound">CTxIn</ref>&amp;<sp/>vin)</highlight></codeline>
<codeline lineno="1488"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1489"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classuint256" kindref="compound">uint256</ref>&amp;<sp/>prevHash<sp/>=<sp/>vin.<ref refid="class_c_tx_in_1aed9312051a25380cbd7f123408ab7c20" kindref="member">prevout</ref>.<ref refid="class_c_out_point_1af131c7194a660558b0ff158f4efa7a28" kindref="member">hash</ref>;</highlight></codeline>
<codeline lineno="1490"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_c_transaction" kindref="compound">CTransaction</ref><sp/>tx;</highlight></codeline>
<codeline lineno="1491"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classuint256" kindref="compound">uint256</ref><sp/>hashBlock;</highlight></codeline>
<codeline lineno="1492"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>fFound<sp/>=<sp/><ref refid="main_8cpp_1a7d2a4633e4e0e8e4cb9c881d45a496b5" kindref="member">GetTransaction</ref>(prevHash,<sp/>tx,<sp/>hashBlock);</highlight></codeline>
<codeline lineno="1493"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(fFound)</highlight></codeline>
<codeline lineno="1494"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1495"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(mapBlockIndex.find(hashBlock)<sp/>!=<sp/>mapBlockIndex.end())</highlight></codeline>
<codeline lineno="1496"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1497"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>pindexBest-&gt;<ref refid="class_c_block_index_1aebfc8d6b95852546760e742553d7bfd5" kindref="member">nHeight</ref><sp/>-<sp/>mapBlockIndex[hashBlock]-&gt;nHeight;</highlight></codeline>
<codeline lineno="1498"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1499"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1500"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="1501"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1502"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1503"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="1504"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1505"><highlight class="normal"></highlight></codeline>
<codeline lineno="1506" refid="main_8h_1a5c7b9ac7929375148311307df7e446d0" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="main_8cpp_1a5c7b9ac7929375148311307df7e446d0" kindref="member">GetInputAgeIX</ref>(<ref refid="classuint256" kindref="compound">uint256</ref><sp/>nTXHash,<sp/><ref refid="class_c_tx_in" kindref="compound">CTxIn</ref>&amp;<sp/>vin)</highlight></codeline>
<codeline lineno="1507"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1508"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>sigs<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1509"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nResult<sp/>=<sp/><ref refid="main_8cpp_1ae137d76bbcaf8d65fab905889b504e26" kindref="member">GetInputAge</ref>(vin);</highlight></codeline>
<codeline lineno="1510"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(nResult<sp/>&lt;<sp/>0)<sp/>nResult<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1511"><highlight class="normal"></highlight></codeline>
<codeline lineno="1512"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(nResult<sp/>&lt;<sp/>6){</highlight></codeline>
<codeline lineno="1513"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::map&lt;uint256,<sp/>CTransactionLock&gt;::iterator<sp/>i<sp/>=<sp/><ref refid="instantx_8cpp_1a1ba3263228b7c76bab6188bf659ea249" kindref="member">mapTxLocks</ref>.find(nTXHash);</highlight></codeline>
<codeline lineno="1514"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(i<sp/>!=<sp/><ref refid="instantx_8cpp_1a1ba3263228b7c76bab6188bf659ea249" kindref="member">mapTxLocks</ref>.end()){</highlight></codeline>
<codeline lineno="1515"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sigs<sp/>=<sp/>(*i).second.CountSignatures();</highlight></codeline>
<codeline lineno="1516"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1517"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(sigs<sp/>&gt;=<sp/><ref refid="instantx_8h_1a9e15d55227c00c556fcb73d04f82283c" kindref="member">INSTANTX_SIGNATURES_REQUIRED</ref>){</highlight></codeline>
<codeline lineno="1518"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="util_8cpp_1aaebdfd83d8252d435dfa61f10e7b86e6" kindref="member">nInstantXDepth</ref>+nResult;</highlight></codeline>
<codeline lineno="1519"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1520"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1521"><highlight class="normal"></highlight></codeline>
<codeline lineno="1522"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="1523"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1524"><highlight class="normal"></highlight></codeline>
<codeline lineno="1525" refid="main_8h_1afb9aef5806c13c7a81fda9854f852155" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="main_8cpp_1afb9aef5806c13c7a81fda9854f852155" kindref="member">GetIXConfirmations</ref>(<ref refid="classuint256" kindref="compound">uint256</ref><sp/>nTXHash)</highlight></codeline>
<codeline lineno="1526"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1527"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>sigs<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1528"><highlight class="normal"></highlight></codeline>
<codeline lineno="1529"><highlight class="normal"><sp/><sp/><sp/><sp/>std::map&lt;uint256,<sp/>CTransactionLock&gt;::iterator<sp/>i<sp/>=<sp/><ref refid="instantx_8cpp_1a1ba3263228b7c76bab6188bf659ea249" kindref="member">mapTxLocks</ref>.find(nTXHash);</highlight></codeline>
<codeline lineno="1530"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(i<sp/>!=<sp/><ref refid="instantx_8cpp_1a1ba3263228b7c76bab6188bf659ea249" kindref="member">mapTxLocks</ref>.end()){</highlight></codeline>
<codeline lineno="1531"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sigs<sp/>=<sp/>(*i).second.CountSignatures();</highlight></codeline>
<codeline lineno="1532"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1533"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(sigs<sp/>&gt;=<sp/><ref refid="instantx_8h_1a9e15d55227c00c556fcb73d04f82283c" kindref="member">INSTANTX_SIGNATURES_REQUIRED</ref>){</highlight></codeline>
<codeline lineno="1534"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="util_8cpp_1aaebdfd83d8252d435dfa61f10e7b86e6" kindref="member">nInstantXDepth</ref>;</highlight></codeline>
<codeline lineno="1535"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1536"><highlight class="normal"></highlight></codeline>
<codeline lineno="1537"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="1538"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1539"><highlight class="normal"></highlight></codeline>
<codeline lineno="1540" refid="class_c_tx_index_1ab6119cf086e8e4b2c690f36c15479220" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="class_c_tx_index_1ab6119cf086e8e4b2c690f36c15479220" kindref="member">CTxIndex::GetDepthInMainChain</ref>()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="1541"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1542"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Read<sp/>block<sp/>header</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1543"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_c_block" kindref="compound">CBlock</ref><sp/><ref refid="core_8h_1ace80c27428e237fe24f54ae915a36133" kindref="member">block</ref>;</highlight></codeline>
<codeline lineno="1544"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!block.<ref refid="class_c_block_1a77a1b1e9902e1e557d762f5a5f325cd8" kindref="member">ReadFromDisk</ref>(pos.nFile,<sp/>pos.nBlockPos,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">))</highlight></codeline>
<codeline lineno="1545"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="1546"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Find<sp/>the<sp/>block<sp/>in<sp/>the<sp/>index</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1547"><highlight class="normal"><sp/><sp/><sp/><sp/>map&lt;uint256,<sp/>CBlockIndex*&gt;::iterator<sp/>mi<sp/>=<sp/>mapBlockIndex.find(block.<ref refid="class_c_block_header_1ae1165e54882d364b030fb33673d64dbd" kindref="member">GetHash</ref>());</highlight></codeline>
<codeline lineno="1548"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mi<sp/>==<sp/>mapBlockIndex.end())</highlight></codeline>
<codeline lineno="1549"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="1550"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_c_block_index" kindref="compound">CBlockIndex</ref>*<sp/>pindex<sp/>=<sp/>(*mi).second;</highlight></codeline>
<codeline lineno="1551"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!pindex<sp/>||<sp/>!pindex-&gt;<ref refid="class_c_block_index_1ae75f87263a196d250cc2bf10d70aa510" kindref="member">IsInMainChain</ref>())</highlight></codeline>
<codeline lineno="1552"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="1553"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1<sp/>+<sp/>nBestHeight<sp/>-<sp/>pindex-&gt;<ref refid="class_c_block_index_1aebfc8d6b95852546760e742553d7bfd5" kindref="member">nHeight</ref>;</highlight></codeline>
<codeline lineno="1554"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1555"><highlight class="normal"></highlight></codeline>
<codeline lineno="1557" refid="main_8h_1a7d2a4633e4e0e8e4cb9c881d45a496b5" refkind="member"><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="main_8cpp_1a7d2a4633e4e0e8e4cb9c881d45a496b5" kindref="member">GetTransaction</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classuint256" kindref="compound">uint256</ref><sp/>&amp;hash,<sp/><ref refid="class_c_transaction" kindref="compound">CTransaction</ref><sp/>&amp;tx,<sp/><ref refid="classuint256" kindref="compound">uint256</ref><sp/>&amp;hashBlock)</highlight></codeline>
<codeline lineno="1558"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1559"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1560"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="sync_8h_1a911fe23f057c2fe5aad629162d6c99d0" kindref="member">LOCK</ref>(cs_main);</highlight></codeline>
<codeline lineno="1561"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1562"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="main_8cpp_1a52890038ef379d29a1a8f3bd20dbe088" kindref="member">mempool</ref>.<ref refid="class_c_tx_mem_pool_1a8c19232d17e668c6690721b0f5088960" kindref="member">lookup</ref>(hash,<sp/>tx))</highlight></codeline>
<codeline lineno="1563"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1564"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1565"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1566"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1567"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_c_tx_d_b" kindref="compound">CTxDB</ref><sp/><ref refid="txdb-leveldb_8cpp_1a72eff8ae1d84de13daf97a61b8c02bc6" kindref="member">txdb</ref>(</highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1568"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_c_tx_index" kindref="compound">CTxIndex</ref><sp/>txindex;</highlight></codeline>
<codeline lineno="1569"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_c_transaction_po_s" kindref="compound">CTransactionPoS</ref><sp/>txPoS;</highlight></codeline>
<codeline lineno="1570"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(txPoS.<ref refid="class_c_transaction_po_s_1a7c71229336405cae52bd3e9a547f1266" kindref="member">ReadFromDisk</ref>(tx,<sp/>txdb,<sp/>hash,<sp/>txindex))</highlight></codeline>
<codeline lineno="1571"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1572"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_c_block" kindref="compound">CBlock</ref><sp/><ref refid="core_8h_1ace80c27428e237fe24f54ae915a36133" kindref="member">block</ref>;</highlight></codeline>
<codeline lineno="1573"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(block.<ref refid="class_c_block_1a77a1b1e9902e1e557d762f5a5f325cd8" kindref="member">ReadFromDisk</ref>(txindex.<ref refid="class_c_tx_index_1ac68a69ed4335b3f50b954c71ec0a9c32" kindref="member">pos</ref>.<ref refid="class_c_disk_tx_pos_1a07198e7b96d4c60ece4d895abbd46104" kindref="member">nFile</ref>,<sp/>txindex.<ref refid="class_c_tx_index_1ac68a69ed4335b3f50b954c71ec0a9c32" kindref="member">pos</ref>.<ref refid="class_c_disk_tx_pos_1ae9b3c262149c035be43010cbf7d1423b" kindref="member">nBlockPos</ref>,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">))</highlight></codeline>
<codeline lineno="1574"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>hashBlock<sp/>=<sp/>block.<ref refid="class_c_block_header_1ae1165e54882d364b030fb33673d64dbd" kindref="member">GetHash</ref>();</highlight></codeline>
<codeline lineno="1575"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1576"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1577"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>look<sp/>for<sp/>transaction<sp/>in<sp/>disconnected<sp/>blocks<sp/>to<sp/>find<sp/>orphaned<sp/>CoinBase<sp/>and<sp/>CoinStake<sp/>transactions</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1578"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>BOOST_FOREACH(<ref refid="util_8h_1aa3052ab82a2ba880ea3e30b3357c8820" kindref="member">PAIRTYPE</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classuint256" kindref="compound">uint256</ref>,<sp/><ref refid="class_c_block_index" kindref="compound">CBlockIndex</ref>*)&amp;<sp/>item,<sp/>mapBlockIndex)</highlight></codeline>
<codeline lineno="1579"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1580"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_c_block_index" kindref="compound">CBlockIndex</ref>*<sp/>pindex<sp/>=<sp/>item.second;</highlight></codeline>
<codeline lineno="1581"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(pindex<sp/>==<sp/>pindexBest<sp/>||<sp/>pindex-&gt;<ref refid="class_c_block_index_1a2f0acd342accaab731d887584b444590" kindref="member">pnext</ref><sp/>!=<sp/>0)</highlight></codeline>
<codeline lineno="1582"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1583"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_c_block" kindref="compound">CBlock</ref><sp/><ref refid="core_8h_1ace80c27428e237fe24f54ae915a36133" kindref="member">block</ref>;</highlight></codeline>
<codeline lineno="1584"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!block.<ref refid="class_c_block_1a77a1b1e9902e1e557d762f5a5f325cd8" kindref="member">ReadFromDisk</ref>(pindex))</highlight></codeline>
<codeline lineno="1585"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1586"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>BOOST_FOREACH(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_c_transaction" kindref="compound">CTransaction</ref>&amp;<sp/>txOrphan,<sp/>block.<ref refid="class_c_block_1a9b6508d662722775f3029b980b382b66" kindref="member">vtx</ref>)</highlight></codeline>
<codeline lineno="1587"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1588"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(txOrphan.<ref refid="class_c_transaction_1a3f8666d2a275c40da14bd5eaf47dc004" kindref="member">GetHash</ref>()<sp/>==<sp/><ref refid="cache_8cc_1a11ecb029164e055f28f4123ce3748862" kindref="member">hash</ref>)</highlight></codeline>
<codeline lineno="1589"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1590"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tx<sp/>=<sp/>txOrphan;</highlight></codeline>
<codeline lineno="1591"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1592"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1593"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1594"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1595"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1596"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1597"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1598"><highlight class="normal"></highlight></codeline>
<codeline lineno="1600"><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1601"><highlight class="normal"></highlight><highlight class="comment">//<sp/>CBlock<sp/>and<sp/>CBlockIndex</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1602"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1603"><highlight class="normal"></highlight></codeline>
<codeline lineno="1604"><highlight class="normal"><ref refid="classuint256" kindref="compound">uint256</ref><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>GetOrphanRoot(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classuint256" kindref="compound">uint256</ref>&amp;<sp/>hash)</highlight></codeline>
<codeline lineno="1605"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1606"><highlight class="normal"><sp/><sp/><sp/><sp/>map&lt;uint256,<sp/>COrphanBlock*&gt;::iterator<sp/>it<sp/>=<sp/>mapOrphanBlocks.find(hash);</highlight></codeline>
<codeline lineno="1607"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(it<sp/>==<sp/>mapOrphanBlocks.end())</highlight></codeline>
<codeline lineno="1608"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>hash;</highlight></codeline>
<codeline lineno="1609"><highlight class="normal"></highlight></codeline>
<codeline lineno="1610"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Work<sp/>back<sp/>to<sp/>the<sp/>first<sp/>block<sp/>in<sp/>the<sp/>orphan<sp/>chain</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1611"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">do</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1612"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>map&lt;uint256,<sp/>COrphanBlock*&gt;::iterator<sp/>it2<sp/>=<sp/>mapOrphanBlocks.find(it-&gt;second-&gt;hashPrev);</highlight></codeline>
<codeline lineno="1613"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(it2<sp/>==<sp/>mapOrphanBlocks.end())</highlight></codeline>
<codeline lineno="1614"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>it-&gt;first;</highlight></codeline>
<codeline lineno="1615"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>it<sp/>=<sp/>it2;</highlight></codeline>
<codeline lineno="1616"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(</highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1617"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1618"><highlight class="normal"></highlight></codeline>
<codeline lineno="1619"><highlight class="normal"></highlight><highlight class="comment">//<sp/>ppcoin:<sp/>find<sp/>block<sp/>wanted<sp/>by<sp/>given<sp/>orphan<sp/>block</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1620" refid="main_8h_1abdef12ddcc1e6b127c59fab552a9b81b" refkind="member"><highlight class="normal"><ref refid="classuint256" kindref="compound">uint256</ref><sp/><ref refid="main_8cpp_1abdef12ddcc1e6b127c59fab552a9b81b" kindref="member">WantedByOrphan</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_c_orphan_block" kindref="compound">COrphanBlock</ref>*<sp/>pblockOrphan)</highlight></codeline>
<codeline lineno="1621"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1622"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Work<sp/>back<sp/>to<sp/>the<sp/>first<sp/>block<sp/>in<sp/>the<sp/>orphan<sp/>chain</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1623"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(mapOrphanBlocks.count(pblockOrphan-&gt;<ref refid="struct_c_orphan_block_1a8c6e5d47d1da746d59feefdc0eb9f55c" kindref="member">hashPrev</ref>))</highlight></codeline>
<codeline lineno="1624"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pblockOrphan<sp/>=<sp/>mapOrphanBlocks[pblockOrphan-&gt;<ref refid="struct_c_orphan_block_1a8c6e5d47d1da746d59feefdc0eb9f55c" kindref="member">hashPrev</ref>];</highlight></codeline>
<codeline lineno="1625"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>pblockOrphan-&gt;<ref refid="struct_c_orphan_block_1a8c6e5d47d1da746d59feefdc0eb9f55c" kindref="member">hashPrev</ref>;</highlight></codeline>
<codeline lineno="1626"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1627"><highlight class="normal"></highlight></codeline>
<codeline lineno="1628"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Remove<sp/>a<sp/>random<sp/>orphan<sp/>block<sp/>(which<sp/>does<sp/>not<sp/>have<sp/>any<sp/>dependent<sp/>orphans).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1629"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>PruneOrphanBlocks()</highlight></codeline>
<codeline lineno="1630"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1631"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>nMaxOrphanBlocksSize<sp/>=<sp/><ref refid="util_8cpp_1a24f685720bf40370e5bd2a192ad50cd8" kindref="member">GetArg</ref>(</highlight><highlight class="stringliteral">&quot;-maxorphanblocksmib&quot;</highlight><highlight class="normal">,<sp/>DEFAULT_MAX_ORPHAN_BLOCKS)<sp/>*<sp/>((size_t)<sp/>1<sp/>&lt;&lt;<sp/>20);</highlight></codeline>
<codeline lineno="1632"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(nOrphanBlocksSize<sp/>&gt;<sp/>nMaxOrphanBlocksSize)</highlight></codeline>
<codeline lineno="1633"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1634"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Pick<sp/>a<sp/>random<sp/>orphan<sp/>block.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1635"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>pos<sp/>=<sp/>insecure_rand()<sp/>%<sp/>mapOrphanBlocksByPrev.size();</highlight></codeline>
<codeline lineno="1636"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::multimap&lt;uint256,<sp/>COrphanBlock*&gt;::iterator<sp/>it<sp/>=<sp/>mapOrphanBlocksByPrev.begin();</highlight></codeline>
<codeline lineno="1637"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(pos--)<sp/>it++;</highlight></codeline>
<codeline lineno="1638"><highlight class="normal"></highlight></codeline>
<codeline lineno="1639"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>As<sp/>long<sp/>as<sp/>this<sp/>block<sp/>has<sp/>other<sp/>orphans<sp/>depending<sp/>on<sp/>it,<sp/>move<sp/>to<sp/>one<sp/>of<sp/>those<sp/>successors.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1640"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">do</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1641"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::multimap&lt;uint256,<sp/>COrphanBlock*&gt;::iterator<sp/>it2<sp/>=<sp/>mapOrphanBlocksByPrev.find(it-&gt;second-&gt;hashBlock);</highlight></codeline>
<codeline lineno="1642"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(it2<sp/>==<sp/>mapOrphanBlocksByPrev.end())</highlight></codeline>
<codeline lineno="1643"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1644"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>it<sp/>=<sp/>it2;</highlight></codeline>
<codeline lineno="1645"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(1);</highlight></codeline>
<codeline lineno="1646"><highlight class="normal"></highlight></codeline>
<codeline lineno="1647"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>setStakeSeenOrphan.erase(it-&gt;second-&gt;stake);</highlight></codeline>
<codeline lineno="1648"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classuint256" kindref="compound">uint256</ref><sp/>hash<sp/>=<sp/>it-&gt;second-&gt;hashBlock;</highlight></codeline>
<codeline lineno="1649"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nOrphanBlocksSize<sp/>-=<sp/>it-&gt;second-&gt;vchBlock.<ref refid="classbase__uint_1ae0e221686cd63384569a8db5cc06d4c9" kindref="member">size</ref>();</highlight></codeline>
<codeline lineno="1650"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>it-&gt;second;</highlight></codeline>
<codeline lineno="1651"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mapOrphanBlocksByPrev.erase(it);</highlight></codeline>
<codeline lineno="1652"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mapOrphanBlocks.erase(hash);</highlight></codeline>
<codeline lineno="1653"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1654"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1655"><highlight class="normal"></highlight></codeline>
<codeline lineno="1656"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="class_c_big_num" kindref="compound">CBigNum</ref><sp/>GetProofOfStakeLimit(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nHeight)</highlight></codeline>
<codeline lineno="1657"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1658"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="main_8cpp_1afa4cd327d70c3f1f925935432a30b48e" kindref="member">bnProofOfStakeLimit</ref>;</highlight></codeline>
<codeline lineno="1659"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1660"><highlight class="normal"></highlight></codeline>
<codeline lineno="1661"><highlight class="normal"></highlight><highlight class="comment">//<sp/>miner&apos;s<sp/>coin<sp/>base<sp/>reward</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1662" refid="main_8h_1a54eeb686375f66683fb139de496c088d" refkind="member"><highlight class="normal"><ref refid="amount_8h_1a4eaf3a5239714d8c45b851527f7cb564" kindref="member">CAmount</ref><sp/><ref refid="main_8cpp_1a54eeb686375f66683fb139de496c088d" kindref="member">GetProofOfWorkReward</ref>(<ref refid="amount_8h_1a4eaf3a5239714d8c45b851527f7cb564" kindref="member">CAmount</ref><sp/>nFees)</highlight></codeline>
<codeline lineno="1663"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1664"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(pindexBest-&gt;<ref refid="class_c_block_index_1aebfc8d6b95852546760e742553d7bfd5" kindref="member">nHeight</ref><sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="1665"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="amount_8h_1a4eaf3a5239714d8c45b851527f7cb564" kindref="member">CAmount</ref><sp/>nSubsidy<sp/>=<sp/>4000000<sp/>*<sp/>COIN;<sp/></highlight><highlight class="comment">//<sp/>4,000,000<sp/>DarkSilk<sp/>for<sp/>4<sp/>Phase<sp/>Crowdfunding</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1666"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>LogPrint(</highlight><highlight class="stringliteral">&quot;creation&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;GetProofOfWorkReward()<sp/>:<sp/>create=%s<sp/>nSubsidy=%d\n&quot;</highlight><highlight class="normal">,<sp/><ref refid="util_8cpp_1a72fc7ee9c182de0580a9909c5895fe24" kindref="member">FormatMoney</ref>(nSubsidy),<sp/>nSubsidy);</highlight></codeline>
<codeline lineno="1667"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>nSubsidy<sp/>+<sp/>nFees;</highlight></codeline>
<codeline lineno="1668"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1669"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1670"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1671"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="amount_8h_1a4eaf3a5239714d8c45b851527f7cb564" kindref="member">CAmount</ref><sp/>nSubsidy<sp/>=<sp/>1<sp/>*<sp/>COIN;</highlight></codeline>
<codeline lineno="1672"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>LogPrint(</highlight><highlight class="stringliteral">&quot;creation&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;GetProofOfWorkReward()<sp/>:<sp/>create=%s<sp/>nSubsidy=%d\n&quot;</highlight><highlight class="normal">,<sp/><ref refid="util_8cpp_1a72fc7ee9c182de0580a9909c5895fe24" kindref="member">FormatMoney</ref>(nSubsidy),<sp/>nSubsidy);</highlight></codeline>
<codeline lineno="1673"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>nSubsidy<sp/>+<sp/>nFees;</highlight></codeline>
<codeline lineno="1674"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1675"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1676"><highlight class="normal"></highlight></codeline>
<codeline lineno="1677"><highlight class="normal"></highlight><highlight class="comment">//<sp/>ppcoin:<sp/>find<sp/>last<sp/>block<sp/>index<sp/>up<sp/>to<sp/>pindex</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1678" refid="main_8h_1a67a2382a391340c12c45961f3b8c66e8" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_c_block_index" kindref="compound">CBlockIndex</ref>*<sp/><ref refid="main_8cpp_1a67a2382a391340c12c45961f3b8c66e8" kindref="member">GetLastBlockIndex</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_c_block_index" kindref="compound">CBlockIndex</ref>*<sp/>pindex,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>fProofOfStake)</highlight></codeline>
<codeline lineno="1679"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1680"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(pindex<sp/>&amp;&amp;<sp/>pindex-&gt;<ref refid="class_c_block_index_1a1ef11137155df1dd5c81491630cece39" kindref="member">pprev</ref><sp/>&amp;&amp;<sp/>(pindex-&gt;<ref refid="class_c_block_index_1ace1a0acbedc0403489e4d9168876fb23" kindref="member">IsProofOfStake</ref>()<sp/>!=<sp/>fProofOfStake))</highlight></codeline>
<codeline lineno="1681"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pindex<sp/>=<sp/>pindex-&gt;<ref refid="class_c_block_index_1a1ef11137155df1dd5c81491630cece39" kindref="member">pprev</ref>;</highlight></codeline>
<codeline lineno="1682"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>pindex;</highlight></codeline>
<codeline lineno="1683"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1684"><highlight class="normal"></highlight></codeline>
<codeline lineno="1685" refid="main_8h_1a868a58404bd61b6a82901f428d152bae" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="main_8cpp_1a868a58404bd61b6a82901f428d152bae" kindref="member">GetNextTargetRequired</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_c_block_index" kindref="compound">CBlockIndex</ref>*<sp/>pindexLast,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>fProofOfStake)</highlight></codeline>
<codeline lineno="1686"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1687"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_c_big_num" kindref="compound">CBigNum</ref><sp/>bnTargetLimit<sp/>=<sp/>fProofOfStake<sp/>?<sp/>GetProofOfStakeLimit(pindexLast-&gt;<ref refid="class_c_block_index_1aebfc8d6b95852546760e742553d7bfd5" kindref="member">nHeight</ref>)<sp/>:<sp/><ref refid="chainparams_8cpp_1ace5c5b706d71a324a417dd2db394fd4a" kindref="member">Params</ref>().<ref refid="class_c_chain_params_1ad44a223db9e6e744d56007e0700a90b3" kindref="member">ProofOfWorkLimit</ref>();</highlight></codeline>
<codeline lineno="1688"><highlight class="normal"></highlight></codeline>
<codeline lineno="1689"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(pindexLast<sp/>==<sp/>NULL)</highlight></codeline>
<codeline lineno="1690"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>bnTargetLimit.<ref refid="class_c_big_num_1a26b88c1b29f347219907979ff2028bdc" kindref="member">GetCompact</ref>();<sp/></highlight><highlight class="comment">//<sp/>genesis<sp/>block</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1691"><highlight class="normal"></highlight></codeline>
<codeline lineno="1692"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_c_block_index" kindref="compound">CBlockIndex</ref>*<sp/>pindexPrev<sp/>=<sp/><ref refid="main_8cpp_1a67a2382a391340c12c45961f3b8c66e8" kindref="member">GetLastBlockIndex</ref>(pindexLast,<sp/>fProofOfStake);</highlight></codeline>
<codeline lineno="1693"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(pindexPrev-&gt;<ref refid="class_c_block_index_1a1ef11137155df1dd5c81491630cece39" kindref="member">pprev</ref><sp/>==<sp/>NULL)</highlight></codeline>
<codeline lineno="1694"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>bnTargetLimit.<ref refid="class_c_big_num_1a26b88c1b29f347219907979ff2028bdc" kindref="member">GetCompact</ref>();<sp/></highlight><highlight class="comment">//<sp/>first<sp/>block</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1695"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_c_block_index" kindref="compound">CBlockIndex</ref>*<sp/>pindexPrevPrev<sp/>=<sp/><ref refid="main_8cpp_1a67a2382a391340c12c45961f3b8c66e8" kindref="member">GetLastBlockIndex</ref>(pindexPrev-&gt;<ref refid="class_c_block_index_1a1ef11137155df1dd5c81491630cece39" kindref="member">pprev</ref>,<sp/>fProofOfStake);</highlight></codeline>
<codeline lineno="1696"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(pindexPrevPrev-&gt;<ref refid="class_c_block_index_1a1ef11137155df1dd5c81491630cece39" kindref="member">pprev</ref><sp/>==<sp/>NULL)</highlight></codeline>
<codeline lineno="1697"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>bnTargetLimit.<ref refid="class_c_big_num_1a26b88c1b29f347219907979ff2028bdc" kindref="member">GetCompact</ref>();<sp/></highlight><highlight class="comment">//<sp/>second<sp/>block</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1698"><highlight class="normal"></highlight></codeline>
<codeline lineno="1699"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="stdint_8h_1adec1df1b8b51cb32b77e5b86fff46471" kindref="member">int64_t</ref><sp/>nTargetSpacing<sp/>=<sp/>fProofOfStake<sp/>?<sp/>POS_TARGET_SPACING<sp/>:<sp/>POW_TARGET_SPACING;</highlight></codeline>
<codeline lineno="1700"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="stdint_8h_1adec1df1b8b51cb32b77e5b86fff46471" kindref="member">int64_t</ref><sp/>nActualSpacing<sp/>=<sp/>pindexPrev-&gt;<ref refid="class_c_block_index_1ab63b774ae798f5f9e54b400ac8b5ef4b" kindref="member">GetBlockTime</ref>()<sp/>-<sp/>pindexPrevPrev-&gt;<ref refid="class_c_block_index_1ab63b774ae798f5f9e54b400ac8b5ef4b" kindref="member">GetBlockTime</ref>();</highlight></codeline>
<codeline lineno="1701"><highlight class="normal"></highlight></codeline>
<codeline lineno="1702"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(nActualSpacing<sp/>&lt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="1703"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nActualSpacing<sp/>=<sp/>nTargetSpacing;</highlight></codeline>
<codeline lineno="1704"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1705"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fProofOfStake<sp/>&amp;&amp;<sp/>nActualSpacing<sp/>&gt;<sp/>nTargetSpacing<sp/>*<sp/>10)<sp/>{</highlight></codeline>
<codeline lineno="1706"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nActualSpacing<sp/>=<sp/>nTargetSpacing<sp/>*<sp/>10;</highlight></codeline>
<codeline lineno="1707"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1708"><highlight class="normal"></highlight></codeline>
<codeline lineno="1709"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>target<sp/>change<sp/>every<sp/>block</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1710"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>retarget<sp/>with<sp/>exponential<sp/>moving<sp/>toward<sp/>target<sp/>spacing</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1711"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Includes<sp/>fix<sp/>for<sp/>wrong<sp/>retargeting<sp/>difficulty<sp/>by<sp/>Mammix2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1712"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_c_big_num" kindref="compound">CBigNum</ref><sp/>bnNew;</highlight></codeline>
<codeline lineno="1713"><highlight class="normal"><sp/><sp/><sp/><sp/>bnNew.<ref refid="class_c_big_num_1a27e3ca82a40ae0c34ac4c059e4d0d66c" kindref="member">SetCompact</ref>(pindexPrev-&gt;<ref refid="class_c_block_index_1a3324894e6af612d1bd76f89378435713" kindref="member">nBits</ref>);</highlight></codeline>
<codeline lineno="1714"><highlight class="normal"></highlight></codeline>
<codeline lineno="1715"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="stdint_8h_1adec1df1b8b51cb32b77e5b86fff46471" kindref="member">int64_t</ref><sp/>nInterval<sp/>=<sp/>fProofOfStake<sp/>?<sp/>10<sp/>:<sp/>10;</highlight></codeline>
<codeline lineno="1716"><highlight class="normal"><sp/><sp/><sp/><sp/>bnNew<sp/>*=<sp/>((nInterval<sp/>-<sp/>1)<sp/>*<sp/>nTargetSpacing<sp/>+<sp/>nActualSpacing<sp/>+<sp/>nActualSpacing);</highlight></codeline>
<codeline lineno="1717"><highlight class="normal"><sp/><sp/><sp/><sp/>bnNew<sp/>/=<sp/>((nInterval<sp/>+<sp/>1)<sp/>*<sp/>nTargetSpacing);</highlight></codeline>
<codeline lineno="1718"><highlight class="normal"></highlight></codeline>
<codeline lineno="1719"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(bnNew<sp/>&lt;=<sp/>0<sp/>||<sp/>bnNew<sp/>&gt;<sp/>bnTargetLimit)</highlight></codeline>
<codeline lineno="1720"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bnNew<sp/>=<sp/>bnTargetLimit;</highlight></codeline>
<codeline lineno="1721"><highlight class="normal"></highlight></codeline>
<codeline lineno="1722"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>bnNew.<ref refid="class_c_big_num_1a26b88c1b29f347219907979ff2028bdc" kindref="member">GetCompact</ref>();</highlight></codeline>
<codeline lineno="1723"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1724"><highlight class="normal"></highlight></codeline>
<codeline lineno="1725" refid="main_8h_1afe042769eafbfbf4e82dffe357798748" refkind="member"><highlight class="normal"><ref refid="amount_8h_1a4eaf3a5239714d8c45b851527f7cb564" kindref="member">CAmount</ref><sp/><ref refid="main_8cpp_1afe042769eafbfbf4e82dffe357798748" kindref="member">GetBlockValue</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nBits,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nHeight,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="amount_8h_1a4eaf3a5239714d8c45b851527f7cb564" kindref="member">CAmount</ref>&amp;<sp/>nFees)</highlight></codeline>
<codeline lineno="1726"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1727"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="amount_8h_1a4eaf3a5239714d8c45b851527f7cb564" kindref="member">CAmount</ref><sp/>nSubsidy<sp/>=<sp/>STATIC_POS_REWARD;</highlight></codeline>
<codeline lineno="1728"><highlight class="normal"></highlight></codeline>
<codeline lineno="1729"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>nSubsidy<sp/>+<sp/>nFees;</highlight></codeline>
<codeline lineno="1730"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1731"><highlight class="normal"></highlight></codeline>
<codeline lineno="1732"><highlight class="normal"></highlight></codeline>
<codeline lineno="1733" refid="main_8h_1ab9c19a2d094fea9bd9f285f4b33961a4" refkind="member"><highlight class="normal"><ref refid="amount_8h_1a4eaf3a5239714d8c45b851527f7cb564" kindref="member">CAmount</ref><sp/><ref refid="main_8cpp_1ab9c19a2d094fea9bd9f285f4b33961a4" kindref="member">GetStormnodePayment</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nHeight,<sp/><ref refid="amount_8h_1a4eaf3a5239714d8c45b851527f7cb564" kindref="member">CAmount</ref><sp/>blockValue)</highlight></codeline>
<codeline lineno="1734"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1735"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="amount_8h_1a4eaf3a5239714d8c45b851527f7cb564" kindref="member">CAmount</ref><sp/>ret<sp/>=<sp/>blockValue<sp/>*<sp/>2/4;<sp/></highlight><highlight class="comment">//50%</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1736"><highlight class="normal"></highlight></codeline>
<codeline lineno="1737"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ret;</highlight></codeline>
<codeline lineno="1738"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1739"><highlight class="normal"></highlight></codeline>
<codeline lineno="1740"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Requires<sp/>cs_main.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1741" refid="main_8h_1a4b04650c6aa3e5b02921ba992658d647" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="main_8cpp_1a387fdffa0ff52dde6b7d1c2991a9bdac" kindref="member">Misbehaving</ref>(<ref refid="net_8h_1a954d746a58632565552615fd0a4ee660" kindref="member">NodeId</ref><sp/>pnode,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>howmuch)</highlight></codeline>
<codeline lineno="1742"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1743"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(howmuch<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="1744"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1745"><highlight class="normal"></highlight></codeline>
<codeline lineno="1746"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="sync_8h_1a911fe23f057c2fe5aad629162d6c99d0" kindref="member">LOCK</ref>(<ref refid="net_8cpp_1a8282e3a7948351ac96516573cd31f9d0" kindref="member">cs_vNodes</ref>);</highlight></codeline>
<codeline lineno="1747"><highlight class="normal"><sp/><sp/><sp/><sp/>BOOST_FOREACH(<ref refid="class_c_node" kindref="compound">CNode</ref>*<sp/>pn,<sp/><ref refid="net_8cpp_1aa5a11f8873e230cea77bc7e91ee51918" kindref="member">vNodes</ref>)</highlight></codeline>
<codeline lineno="1748"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1749"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(pn-&gt;<ref refid="class_c_node_1ac0f1a22fa938e84138536308e2001340" kindref="member">GetId</ref>()<sp/>==<sp/>pnode)</highlight></codeline>
<codeline lineno="1750"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1751"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pn-&gt;<ref refid="class_c_node_1a442ac1857129bccaea4642d23d94ee58" kindref="member">nMisbehavior</ref><sp/>+=<sp/>howmuch;</highlight></codeline>
<codeline lineno="1752"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>banscore<sp/>=<sp/><ref refid="util_8cpp_1a24f685720bf40370e5bd2a192ad50cd8" kindref="member">GetArg</ref>(</highlight><highlight class="stringliteral">&quot;-banscore&quot;</highlight><highlight class="normal">,<sp/>100);</highlight></codeline>
<codeline lineno="1753"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(pn-&gt;<ref refid="class_c_node_1a442ac1857129bccaea4642d23d94ee58" kindref="member">nMisbehavior</ref><sp/>&gt;=<sp/>banscore<sp/>&amp;&amp;<sp/>pn-&gt;<ref refid="class_c_node_1a442ac1857129bccaea4642d23d94ee58" kindref="member">nMisbehavior</ref><sp/>-<sp/>howmuch<sp/>&lt;<sp/>banscore)</highlight></codeline>
<codeline lineno="1754"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1755"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="util_8h_1afc02c0a4258fedfb316be612bb659ba8" kindref="member">LogPrintf</ref>(</highlight><highlight class="stringliteral">&quot;Misbehaving:<sp/>%s<sp/>(%d<sp/>-&gt;<sp/>%d)<sp/>BAN<sp/>THRESHOLD<sp/>EXCEEDED\n&quot;</highlight><highlight class="normal">,<sp/>pn-&gt;<ref refid="class_c_node_1a3155cd313d85ec3ff691f8259a5f5345" kindref="member">addrName</ref>,<sp/>pn-&gt;<ref refid="class_c_node_1a442ac1857129bccaea4642d23d94ee58" kindref="member">nMisbehavior</ref>-howmuch,<sp/>pn-&gt;<ref refid="class_c_node_1a442ac1857129bccaea4642d23d94ee58" kindref="member">nMisbehavior</ref>);</highlight></codeline>
<codeline lineno="1756"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//pn-&gt;fShouldBan<sp/>=<sp/>true;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1757"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1758"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1759"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="util_8h_1afc02c0a4258fedfb316be612bb659ba8" kindref="member">LogPrintf</ref>(</highlight><highlight class="stringliteral">&quot;Misbehaving:<sp/>%s<sp/>(%d<sp/>-&gt;<sp/>%d)\n&quot;</highlight><highlight class="normal">,<sp/>pn-&gt;<ref refid="class_c_node_1a3155cd313d85ec3ff691f8259a5f5345" kindref="member">addrName</ref>,<sp/>pn-&gt;<ref refid="class_c_node_1a442ac1857129bccaea4642d23d94ee58" kindref="member">nMisbehavior</ref>-howmuch,<sp/>pn-&gt;<ref refid="class_c_node_1a442ac1857129bccaea4642d23d94ee58" kindref="member">nMisbehavior</ref>);</highlight></codeline>
<codeline lineno="1760"><highlight class="normal"></highlight></codeline>
<codeline lineno="1761"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1762"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1763"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1764"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1765"><highlight class="normal"></highlight></codeline>
<codeline lineno="1766" refid="main_8h_1a22e712bbf635a69ba8dd7ae004d2697b" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="main_8cpp_1a22e712bbf635a69ba8dd7ae004d2697b" kindref="member">IsConfirmedInNPrevBlocks</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_c_tx_index" kindref="compound">CTxIndex</ref>&amp;<sp/>txindex,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_c_block_index" kindref="compound">CBlockIndex</ref>*<sp/>pindexFrom,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nMaxDepth,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">&amp;<sp/>nActualDepth)</highlight></codeline>
<codeline lineno="1767"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1768"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_c_block_index" kindref="compound">CBlockIndex</ref>*<sp/>pindex<sp/>=<sp/>pindexFrom;<sp/>pindex<sp/>&amp;&amp;<sp/>pindexFrom-&gt;<ref refid="class_c_block_index_1aebfc8d6b95852546760e742553d7bfd5" kindref="member">nHeight</ref><sp/>-<sp/>pindex-&gt;<ref refid="class_c_block_index_1aebfc8d6b95852546760e742553d7bfd5" kindref="member">nHeight</ref><sp/>&lt;<sp/>nMaxDepth;<sp/>pindex<sp/>=<sp/>pindex-&gt;<ref refid="class_c_block_index_1a1ef11137155df1dd5c81491630cece39" kindref="member">pprev</ref>)</highlight></codeline>
<codeline lineno="1769"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1770"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(pindex-&gt;<ref refid="class_c_block_index_1af8de5426e2da2c78e1e7729a89a7670a" kindref="member">nBlockPos</ref><sp/>==<sp/>txindex.<ref refid="class_c_tx_index_1ac68a69ed4335b3f50b954c71ec0a9c32" kindref="member">pos</ref>.<ref refid="class_c_disk_tx_pos_1ae9b3c262149c035be43010cbf7d1423b" kindref="member">nBlockPos</ref><sp/>&amp;&amp;<sp/>pindex-&gt;<ref refid="class_c_block_index_1a3bf9ecd8938c42be6a4b14d3c7ef5c21" kindref="member">nFile</ref><sp/>==<sp/>txindex.<ref refid="class_c_tx_index_1ac68a69ed4335b3f50b954c71ec0a9c32" kindref="member">pos</ref>.<ref refid="class_c_disk_tx_pos_1a07198e7b96d4c60ece4d895abbd46104" kindref="member">nFile</ref>)</highlight></codeline>
<codeline lineno="1771"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1772"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nActualDepth<sp/>=<sp/>pindexFrom-&gt;<ref refid="class_c_block_index_1aebfc8d6b95852546760e742553d7bfd5" kindref="member">nHeight</ref><sp/>-<sp/>pindex-&gt;<ref refid="class_c_block_index_1aebfc8d6b95852546760e742553d7bfd5" kindref="member">nHeight</ref>;</highlight></codeline>
<codeline lineno="1773"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1774"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1775"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1776"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1777"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1778"><highlight class="normal"></highlight></codeline>
<codeline lineno="1779" refid="main_8h_1af2b1f603b58c5364716253a0711f0e91" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="main_8cpp_1af2b1f603b58c5364716253a0711f0e91" kindref="member">DisconnectBlocksAndReprocess</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>blocks)</highlight></codeline>
<codeline lineno="1780"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1781"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//TODO<sp/>(Amir):<sp/>put<sp/>back.<sp/><sp/>needs<sp/>CChain<sp/>chainActive<sp/>implemented.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1782"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//LOCK(cs_main);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1783"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//CValidationState<sp/>state;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1784"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//LogPrintf(&quot;DisconnectBlocksAndReprocess:<sp/>Got<sp/>command<sp/>to<sp/>replay<sp/>%d<sp/>blocks\n&quot;,<sp/>blocks);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1785"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//for(int<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;=<sp/>blocks;<sp/>i++)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1786"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>DisconnectTip(state);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1787"><highlight class="normal"></highlight></codeline>
<codeline lineno="1788"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="util_8h_1afc02c0a4258fedfb316be612bb659ba8" kindref="member">LogPrintf</ref>(</highlight><highlight class="stringliteral">&quot;DisconnectBlocksAndReprocess<sp/>for<sp/>%u<sp/>not<sp/>implemented!<sp/><sp/>\n&quot;</highlight><highlight class="normal">,<sp/>blocks);</highlight></codeline>
<codeline lineno="1789"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1790"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1791"><highlight class="normal"></highlight></codeline>
<codeline lineno="1792" refid="main_8h_1aca9eb09c80679cf7c85926f83c353075" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="main_8cpp_1aca9eb09c80679cf7c85926f83c353075" kindref="member">FindTransactionsByDestination</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="keystore_8h_1a8f46ecba0ddeb036be6b58d6ed1909cd" kindref="member">CTxDestination</ref><sp/>&amp;dest,<sp/>std::vector&lt;uint256&gt;<sp/>&amp;vtxhash)<sp/>{</highlight></codeline>
<codeline lineno="1793"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classuint160" kindref="compound">uint160</ref><sp/>addrid<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1794"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_c_key_i_d" kindref="compound">CKeyID</ref><sp/>*pkeyid<sp/>=<sp/>boost::get&lt;CKeyID&gt;(&amp;dest);</highlight></codeline>
<codeline lineno="1795"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(pkeyid)</highlight></codeline>
<codeline lineno="1796"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>addrid<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal"><ref refid="classuint160" kindref="compound">uint160</ref></highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(*pkeyid);</highlight></codeline>
<codeline lineno="1797"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!addrid)<sp/>{</highlight></codeline>
<codeline lineno="1798"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_c_script_i_d" kindref="compound">CScriptID</ref><sp/>*pscriptid<sp/>=<sp/>boost::get&lt;CScriptID&gt;(&amp;dest);</highlight></codeline>
<codeline lineno="1799"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(pscriptid)</highlight></codeline>
<codeline lineno="1800"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>addrid<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal"><ref refid="classuint160" kindref="compound">uint160</ref></highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(*pscriptid);</highlight></codeline>
<codeline lineno="1801"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1802"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!addrid)</highlight></codeline>
<codeline lineno="1803"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1804"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="util_8h_1afc02c0a4258fedfb316be612bb659ba8" kindref="member">LogPrintf</ref>(</highlight><highlight class="stringliteral">&quot;FindTransactionsByDestination():<sp/>Couldn&apos;t<sp/>parse<sp/>dest<sp/>into<sp/>addrid\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1805"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1806"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1807"><highlight class="normal"></highlight></codeline>
<codeline lineno="1808"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="sync_8h_1a911fe23f057c2fe5aad629162d6c99d0" kindref="member">LOCK</ref>(cs_main);</highlight></codeline>
<codeline lineno="1809"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_c_tx_d_b" kindref="compound">CTxDB</ref><sp/><ref refid="txdb-leveldb_8cpp_1a72eff8ae1d84de13daf97a61b8c02bc6" kindref="member">txdb</ref>(</highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1810"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!txdb.<ref refid="class_c_tx_d_b_1af1a1c0835bf9eb9a59e9d197678b0a4d" kindref="member">ReadAddrIndex</ref>(addrid,<sp/>vtxhash))</highlight></codeline>
<codeline lineno="1811"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1812"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="util_8h_1afc02c0a4258fedfb316be612bb659ba8" kindref="member">LogPrintf</ref>(</highlight><highlight class="stringliteral">&quot;FindTransactionsByDestination():<sp/>txdb.ReadAddrIndex<sp/>failed\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1813"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1814"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1815"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1816"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1817"><highlight class="normal"></highlight></codeline>
<codeline lineno="1818"><highlight class="normal"></highlight><highlight class="comment">//<sp/>ppcoin:<sp/>total<sp/>coin<sp/>age<sp/>spent<sp/>in<sp/>transaction,<sp/>in<sp/>the<sp/>unit<sp/>of<sp/>coin-days.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1819"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Only<sp/>those<sp/>coins<sp/>meeting<sp/>minimum<sp/>age<sp/>requirement<sp/>counts.<sp/>As<sp/>those</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1820"><highlight class="normal"></highlight><highlight class="comment">//<sp/>transactions<sp/>not<sp/>in<sp/>main<sp/>chain<sp/>are<sp/>not<sp/>currently<sp/>indexed<sp/>so<sp/>we</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1821"><highlight class="normal"></highlight><highlight class="comment">//<sp/>might<sp/>not<sp/>find<sp/>out<sp/>about<sp/>their<sp/>coin<sp/>age.<sp/>Older<sp/>transactions<sp/>are</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1822"><highlight class="normal"></highlight><highlight class="comment">//<sp/>guaranteed<sp/>to<sp/>be<sp/>in<sp/>main<sp/>chain<sp/>by<sp/>sync-checkpoint.<sp/>This<sp/>rule<sp/>is</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1823"><highlight class="normal"></highlight><highlight class="comment">//<sp/>introduced<sp/>to<sp/>help<sp/>nodes<sp/>establish<sp/>a<sp/>consistent<sp/>view<sp/>of<sp/>the<sp/>coin</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1824"><highlight class="normal"></highlight><highlight class="comment">//<sp/>age<sp/>(trust<sp/>score)<sp/>of<sp/>competing<sp/>branches.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1825"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="1826"><highlight class="comment">bool<sp/>CTransaction::GetCoinAge(CTxDB&amp;<sp/>txdb,<sp/>const<sp/>CBlockIndex*<sp/>pindexPrev,<sp/>uint64_t&amp;<sp/>nCoinAge)<sp/>const</highlight></codeline>
<codeline lineno="1827"><highlight class="comment">{</highlight></codeline>
<codeline lineno="1828"><highlight class="comment"><sp/><sp/><sp/><sp/>CBigNum<sp/>bnCentSecond<sp/>=<sp/>0;<sp/><sp/>//<sp/>coin<sp/>age<sp/>in<sp/>the<sp/>unit<sp/>of<sp/>cent-seconds</highlight></codeline>
<codeline lineno="1829"><highlight class="comment"><sp/><sp/><sp/><sp/>nCoinAge<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1830"><highlight class="comment"></highlight></codeline>
<codeline lineno="1831"><highlight class="comment"><sp/><sp/><sp/><sp/>if<sp/>(IsCoinBase())</highlight></codeline>
<codeline lineno="1832"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>true;</highlight></codeline>
<codeline lineno="1833"><highlight class="comment"></highlight></codeline>
<codeline lineno="1834"><highlight class="comment"><sp/><sp/><sp/><sp/>BOOST_FOREACH(const<sp/>CTxIn&amp;<sp/>txin,<sp/>vin)</highlight></codeline>
<codeline lineno="1835"><highlight class="comment"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1836"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>First<sp/>try<sp/>finding<sp/>the<sp/>previous<sp/>transaction<sp/>in<sp/>database</highlight></codeline>
<codeline lineno="1837"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CTransaction<sp/>txPrev;</highlight></codeline>
<codeline lineno="1838"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CTxIndex<sp/>txindex;</highlight></codeline>
<codeline lineno="1839"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(!txPrev.ReadFromDisk(txdb,<sp/>txin.prevout,<sp/>txindex))</highlight></codeline>
<codeline lineno="1840"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>continue;<sp/><sp/>//<sp/>previous<sp/>transaction<sp/>not<sp/>in<sp/>main<sp/>chain</highlight></codeline>
<codeline lineno="1841"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(nTime<sp/>&lt;<sp/>txPrev.nTime)</highlight></codeline>
<codeline lineno="1842"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>false;<sp/><sp/>//<sp/>Transaction<sp/>timestamp<sp/>violation</highlight></codeline>
<codeline lineno="1843"><highlight class="comment"></highlight></codeline>
<codeline lineno="1844"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>nSpendDepth;</highlight></codeline>
<codeline lineno="1845"><highlight class="comment"></highlight></codeline>
<codeline lineno="1846"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(IsConfirmedInNPrevBlocks(txindex,<sp/>pindexPrev,<sp/>nStakeMinConfirmations<sp/>-<sp/>1,<sp/>nSpendDepth))</highlight></codeline>
<codeline lineno="1847"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1848"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>LogPrint(&quot;coinage&quot;,<sp/>&quot;coin<sp/>age<sp/>skip<sp/>nSpendDepth=%d\n&quot;,<sp/>nSpendDepth<sp/>+<sp/>1);</highlight></codeline>
<codeline lineno="1849"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>continue;<sp/>//<sp/>only<sp/>count<sp/>coins<sp/>meeting<sp/>min<sp/>confirmations<sp/>requirement</highlight></codeline>
<codeline lineno="1850"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1851"><highlight class="comment"></highlight></codeline>
<codeline lineno="1852"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int64_t<sp/>nValueIn<sp/>=<sp/>txPrev.vout[txin.prevout.n].nValue;</highlight></codeline>
<codeline lineno="1853"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bnCentSecond<sp/>+=<sp/>CBigNum(nValueIn)<sp/>*<sp/>(nTime-txPrev.nTime)<sp/>/<sp/>CENT;</highlight></codeline>
<codeline lineno="1854"><highlight class="comment"></highlight></codeline>
<codeline lineno="1855"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>LogPrint(&quot;coinage&quot;,<sp/>&quot;coin<sp/>age<sp/>nValueIn=%d<sp/>nTimeDiff=%d<sp/>bnCentSecond=%s\n&quot;,<sp/>nValueIn,<sp/>nTime<sp/>-<sp/>txPrev.nTime,<sp/>bnCentSecond.ToString());</highlight></codeline>
<codeline lineno="1856"><highlight class="comment"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1857"><highlight class="comment"></highlight></codeline>
<codeline lineno="1858"><highlight class="comment"><sp/><sp/><sp/><sp/>CBigNum<sp/>bnCoinDay<sp/>=<sp/>bnCentSecond<sp/>*<sp/>CENT<sp/>/<sp/>COIN<sp/>/<sp/>(24<sp/>*<sp/>60<sp/>*<sp/>60);</highlight></codeline>
<codeline lineno="1859"><highlight class="comment"><sp/><sp/><sp/><sp/>LogPrint(&quot;coinage&quot;,<sp/>&quot;coin<sp/>age<sp/>bnCoinDay=%s\n&quot;,<sp/>bnCoinDay.ToString());</highlight></codeline>
<codeline lineno="1860"><highlight class="comment"><sp/><sp/><sp/><sp/>nCoinAge<sp/>=<sp/>bnCoinDay.getuint64();</highlight></codeline>
<codeline lineno="1861"><highlight class="comment"><sp/><sp/><sp/><sp/>return<sp/>true;</highlight></codeline>
<codeline lineno="1862"><highlight class="comment">}</highlight></codeline>
<codeline lineno="1863"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1864"><highlight class="normal"></highlight></codeline>
<codeline lineno="1865" refid="main_8h_1a28098619373dbab927d25bca3cea8a4a" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="main_8cpp_1a28098619373dbab927d25bca3cea8a4a" kindref="member">PushGetBlocks</ref>(<ref refid="class_c_node" kindref="compound">CNode</ref>*<sp/>pnode,<sp/><ref refid="class_c_block_index" kindref="compound">CBlockIndex</ref>*<sp/>pindexBegin,<sp/><ref refid="classuint256" kindref="compound">uint256</ref><sp/>hashEnd)</highlight></codeline>
<codeline lineno="1866"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1867"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Filter<sp/>out<sp/>duplicate<sp/>requests</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1868"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(pindexBegin<sp/>==<sp/>pnode-&gt;<ref refid="class_c_node_1ac655c80f7fbef266417985776043785b" kindref="member">pindexLastGetBlocksBegin</ref><sp/>&amp;&amp;<sp/>hashEnd<sp/>==<sp/>pnode-&gt;<ref refid="class_c_node_1a00f1eb04110387df966dd9c3ff3c53fb" kindref="member">hashLastGetBlocksEnd</ref>)</highlight></codeline>
<codeline lineno="1869"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1870"><highlight class="normal"><sp/><sp/><sp/><sp/>pnode-&gt;<ref refid="class_c_node_1ac655c80f7fbef266417985776043785b" kindref="member">pindexLastGetBlocksBegin</ref><sp/>=<sp/>pindexBegin;</highlight></codeline>
<codeline lineno="1871"><highlight class="normal"><sp/><sp/><sp/><sp/>pnode-&gt;<ref refid="class_c_node_1a00f1eb04110387df966dd9c3ff3c53fb" kindref="member">hashLastGetBlocksEnd</ref><sp/>=<sp/>hashEnd;</highlight></codeline>
<codeline lineno="1872"><highlight class="normal"></highlight></codeline>
<codeline lineno="1873"><highlight class="normal"><sp/><sp/><sp/><sp/>pnode-&gt;<ref refid="class_c_node_1a204fda3d33404cb37698c085b1583ab2" kindref="member">PushMessage</ref>(</highlight><highlight class="stringliteral">&quot;getblocks&quot;</highlight><highlight class="normal">,<sp/><ref refid="class_c_block_locator" kindref="compound">CBlockLocator</ref>(pindexBegin),<sp/>hashEnd);</highlight></codeline>
<codeline lineno="1874"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1875"><highlight class="normal"></highlight></codeline>
<codeline lineno="1876"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>IsCanonicalBlockSignature(<ref refid="class_c_block" kindref="compound">CBlock</ref>*<sp/>pblock)</highlight></codeline>
<codeline lineno="1877"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1878"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(pblock-&gt;<ref refid="class_c_block_1ac6aa1feb7deecb9fffef3978d2745903" kindref="member">IsProofOfWork</ref>())<sp/>{</highlight></codeline>
<codeline lineno="1879"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>pblock-&gt;<ref refid="class_c_block_1a78f882e24c4416f42039cbc6a67faf6e" kindref="member">vchBlockSig</ref>.empty();</highlight></codeline>
<codeline lineno="1880"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1881"><highlight class="normal"></highlight></codeline>
<codeline lineno="1882"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="script_8cpp_1a085cff21cf73b4aa50c6fc5a0082ad85" kindref="member">IsDERSignature</ref>(pblock-&gt;<ref refid="class_c_block_1a78f882e24c4416f42039cbc6a67faf6e" kindref="member">vchBlockSig</ref>,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1883"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1884"><highlight class="normal"></highlight></codeline>
<codeline lineno="1885" refid="main_8h_1a7c8a7be3439bb5e1e40548a332a3cf29" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="main_8cpp_1a7c8a7be3439bb5e1e40548a332a3cf29" kindref="member">ProcessBlock</ref>(<ref refid="class_c_node" kindref="compound">CNode</ref>*<sp/>pfrom,<sp/><ref refid="class_c_block" kindref="compound">CBlock</ref>*<sp/>pblock)</highlight></codeline>
<codeline lineno="1886"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1887"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="sync_8h_1acd61d0cb3b49f367728193720014aed0" kindref="member">AssertLockHeld</ref>(cs_main);</highlight></codeline>
<codeline lineno="1888"><highlight class="normal"></highlight></codeline>
<codeline lineno="1889"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Check<sp/>for<sp/>duplicate</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1890"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classuint256" kindref="compound">uint256</ref><sp/>hash<sp/>=<sp/>pblock-&gt;<ref refid="class_c_block_header_1ae1165e54882d364b030fb33673d64dbd" kindref="member">GetHash</ref>();</highlight></codeline>
<codeline lineno="1891"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mapBlockIndex.count(hash))</highlight></codeline>
<codeline lineno="1892"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>error(</highlight><highlight class="stringliteral">&quot;ProcessBlock()<sp/>:<sp/>already<sp/>have<sp/>block<sp/>%d<sp/>%s&quot;</highlight><highlight class="normal">,<sp/>mapBlockIndex[hash]-&gt;nHeight,<sp/>hash.<ref refid="classbase__uint_1ac3080a72402cadf28dbc9f9b69cc60be" kindref="member">ToString</ref>());</highlight></codeline>
<codeline lineno="1893"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mapOrphanBlocks.count(hash))</highlight></codeline>
<codeline lineno="1894"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>error(</highlight><highlight class="stringliteral">&quot;ProcessBlock()<sp/>:<sp/>already<sp/>have<sp/>block<sp/>(orphan)<sp/>%s&quot;</highlight><highlight class="normal">,<sp/>hash.<ref refid="classbase__uint_1ac3080a72402cadf28dbc9f9b69cc60be" kindref="member">ToString</ref>());</highlight></codeline>
<codeline lineno="1895"><highlight class="normal"></highlight></codeline>
<codeline lineno="1896"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>ppcoin:<sp/>check<sp/>proof-of-stake</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1897"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Limited<sp/>duplicity<sp/>on<sp/>stake:<sp/>prevents<sp/>block<sp/>flood<sp/>attack</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1898"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Duplicate<sp/>stake<sp/>allowed<sp/>only<sp/>when<sp/>there<sp/>is<sp/>orphan<sp/>child<sp/>block</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1899"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!fReindex<sp/>&amp;&amp;<sp/>!fImporting<sp/>&amp;&amp;<sp/>pblock-&gt;<ref refid="class_c_block_1a42d001a1eff1d09a76b61a6ff089da35" kindref="member">IsProofOfStake</ref>()<sp/>&amp;&amp;<sp/>setStakeSeen.count(pblock-&gt;<ref refid="class_c_block_1aee66480cbb9bc01b5f1d27e6ab71f512" kindref="member">GetProofOfStake</ref>())<sp/>&amp;&amp;<sp/>!mapOrphanBlocksByPrev.count(hash))</highlight></codeline>
<codeline lineno="1900"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>error(</highlight><highlight class="stringliteral">&quot;ProcessBlock()<sp/>:<sp/>duplicate<sp/>proof-of-stake<sp/>(%s,<sp/>%d)<sp/>for<sp/>block<sp/>%s&quot;</highlight><highlight class="normal">,<sp/>pblock-&gt;<ref refid="class_c_block_1aee66480cbb9bc01b5f1d27e6ab71f512" kindref="member">GetProofOfStake</ref>().first.ToString(),<sp/>pblock-&gt;<ref refid="class_c_block_1aee66480cbb9bc01b5f1d27e6ab71f512" kindref="member">GetProofOfStake</ref>().second,<sp/>hash.<ref refid="classbase__uint_1ac3080a72402cadf28dbc9f9b69cc60be" kindref="member">ToString</ref>());</highlight></codeline>
<codeline lineno="1901"><highlight class="normal"></highlight></codeline>
<codeline lineno="1902"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(pblock-&gt;<ref refid="class_c_block_header_1ad9b904df502d648309342e5e5b0949a6" kindref="member">hashPrevBlock</ref><sp/>!=<sp/>hashBestChain)</highlight></codeline>
<codeline lineno="1903"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1904"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Extra<sp/>checks<sp/>to<sp/>prevent<sp/>&quot;fill<sp/>up<sp/>memory<sp/>by<sp/>spamming<sp/>with<sp/>bogus<sp/>blocks&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1905"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_c_block_index" kindref="compound">CBlockIndex</ref>*<sp/>pcheckpoint<sp/>=<sp/><ref refid="namespace_checkpoints_1aa1915d9b1ed1c988b8477c3cc7ed1416" kindref="member">Checkpoints::AutoSelectSyncCheckpoint</ref>();</highlight></codeline>
<codeline lineno="1906"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stdint_8h_1adec1df1b8b51cb32b77e5b86fff46471" kindref="member">int64_t</ref><sp/>deltaTime<sp/>=<sp/>pblock-&gt;<ref refid="class_c_block_header_1a2972ebc9d970b4b12434876263c4c2b5" kindref="member">GetBlockTime</ref>()<sp/>-<sp/>pcheckpoint-&gt;<ref refid="class_c_block_index_1a4b687a226e9e166b0f91c1b616b543a6" kindref="member">nTime</ref>;</highlight></codeline>
<codeline lineno="1907"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(deltaTime<sp/>&lt;<sp/>0)</highlight></codeline>
<codeline lineno="1908"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1909"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(pfrom)</highlight></codeline>
<codeline lineno="1910"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pfrom-&gt;<ref refid="class_c_node_1a1923dffc7124eeedcc4bb58c2cd75754" kindref="member">Misbehaving</ref>(1);</highlight></codeline>
<codeline lineno="1911"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>error(</highlight><highlight class="stringliteral">&quot;ProcessBlock()<sp/>:<sp/>block<sp/>with<sp/>timestamp<sp/>before<sp/>last<sp/>checkpoint&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1912"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1913"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1914"><highlight class="normal"></highlight></codeline>
<codeline lineno="1915"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!IsCanonicalBlockSignature(pblock))<sp/>{</highlight></codeline>
<codeline lineno="1916"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(pfrom<sp/>&amp;&amp;<sp/>pfrom-&gt;<ref refid="class_c_node_1a99173eb3cef17e699ba21a5249ac33d2" kindref="member">nVersion</ref><sp/>&gt;=<sp/>CANONICAL_BLOCK_SIG_VERSION)<sp/>{</highlight></codeline>
<codeline lineno="1917"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pfrom-&gt;<ref refid="class_c_node_1a1923dffc7124eeedcc4bb58c2cd75754" kindref="member">Misbehaving</ref>(100);</highlight></codeline>
<codeline lineno="1918"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1919"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>error(</highlight><highlight class="stringliteral">&quot;ProcessBlock():<sp/>bad<sp/>block<sp/>signature<sp/>encoding&quot;</highlight><highlight class="normal">);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1920"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1921"><highlight class="normal"></highlight></codeline>
<codeline lineno="1922"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Preliminary<sp/>checks</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1923"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_c_validation_state" kindref="compound">CValidationState</ref><sp/><ref refid="db__test_8cc_1a42432b4356adce5579ccf597f6e83e54" kindref="member">state</ref>;</highlight></codeline>
<codeline lineno="1924"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!pblock-&gt;<ref refid="class_c_block_1aa735790178f95defd59f984dd51bc0f2" kindref="member">CheckBlock</ref>(state))</highlight></codeline>
<codeline lineno="1925"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>error(</highlight><highlight class="stringliteral">&quot;ProcessBlock()<sp/>:<sp/>CheckBlock<sp/>FAILED&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1926"><highlight class="normal"></highlight></codeline>
<codeline lineno="1927"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>we<sp/>don&apos;t<sp/>already<sp/>have<sp/>its<sp/>previous<sp/>block,<sp/>shunt<sp/>it<sp/>off<sp/>to<sp/>holding<sp/>area<sp/>until<sp/>we<sp/>get<sp/>it</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1928"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!mapBlockIndex.count(pblock-&gt;<ref refid="class_c_block_header_1ad9b904df502d648309342e5e5b0949a6" kindref="member">hashPrevBlock</ref>))</highlight></codeline>
<codeline lineno="1929"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1930"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="util_8h_1afc02c0a4258fedfb316be612bb659ba8" kindref="member">LogPrintf</ref>(</highlight><highlight class="stringliteral">&quot;ProcessBlock:<sp/>ORPHAN<sp/>BLOCK<sp/>%lu,<sp/>prev=%s\n&quot;</highlight><highlight class="normal">,<sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal">)mapOrphanBlocks.size(),<sp/>pblock-&gt;<ref refid="class_c_block_header_1ad9b904df502d648309342e5e5b0949a6" kindref="member">hashPrevBlock</ref>.<ref refid="classbase__uint_1ac3080a72402cadf28dbc9f9b69cc60be" kindref="member">ToString</ref>());</highlight></codeline>
<codeline lineno="1931"><highlight class="normal"></highlight></codeline>
<codeline lineno="1932"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Accept<sp/>orphans<sp/>as<sp/>long<sp/>as<sp/>there<sp/>is<sp/>a<sp/>node<sp/>to<sp/>request<sp/>its<sp/>parents<sp/>from</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1933"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(pfrom)<sp/>{</highlight></codeline>
<codeline lineno="1934"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>ppcoin:<sp/>check<sp/>proof-of-stake</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1935"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(pblock-&gt;<ref refid="class_c_block_1a42d001a1eff1d09a76b61a6ff089da35" kindref="member">IsProofOfStake</ref>())</highlight></codeline>
<codeline lineno="1936"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1937"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Limited<sp/>duplicity<sp/>on<sp/>stake:<sp/>prevents<sp/>block<sp/>flood<sp/>attack</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1938"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Duplicate<sp/>stake<sp/>allowed<sp/>only<sp/>when<sp/>there<sp/>is<sp/>orphan<sp/>child<sp/>block</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1939"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(setStakeSeenOrphan.count(pblock-&gt;<ref refid="class_c_block_1aee66480cbb9bc01b5f1d27e6ab71f512" kindref="member">GetProofOfStake</ref>())<sp/>&amp;&amp;<sp/>!mapOrphanBlocksByPrev.count(hash))</highlight></codeline>
<codeline lineno="1940"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>error(</highlight><highlight class="stringliteral">&quot;ProcessBlock()<sp/>:<sp/>duplicate<sp/>proof-of-stake<sp/>(%s,<sp/>%d)<sp/>for<sp/>orphan<sp/>block<sp/>%s&quot;</highlight><highlight class="normal">,<sp/>pblock-&gt;<ref refid="class_c_block_1aee66480cbb9bc01b5f1d27e6ab71f512" kindref="member">GetProofOfStake</ref>().first.ToString(),<sp/>pblock-&gt;<ref refid="class_c_block_1aee66480cbb9bc01b5f1d27e6ab71f512" kindref="member">GetProofOfStake</ref>().second,<sp/>hash.<ref refid="classbase__uint_1ac3080a72402cadf28dbc9f9b69cc60be" kindref="member">ToString</ref>());</highlight></codeline>
<codeline lineno="1941"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1942"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PruneOrphanBlocks();</highlight></codeline>
<codeline lineno="1943"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_c_orphan_block" kindref="compound">COrphanBlock</ref>*<sp/>pblock2<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="struct_c_orphan_block" kindref="compound">COrphanBlock</ref>();</highlight></codeline>
<codeline lineno="1944"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1945"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_c_data_stream" kindref="compound">CDataStream</ref><sp/>ss(<ref refid="serialize_8h_1a6b7b47dd702d9e331586d485013fd1eaa34949680c53028d35a449bf88b3c329d" kindref="member">SER_DISK</ref>,<sp/>CLIENT_VERSION);</highlight></codeline>
<codeline lineno="1946"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ss<sp/>&lt;&lt;<sp/>*pblock;</highlight></codeline>
<codeline lineno="1947"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pblock2-&gt;<ref refid="struct_c_orphan_block_1a6d63003bce14214976acc149cd4813e8" kindref="member">vchBlock</ref><sp/>=<sp/>std::vector&lt;unsigned<sp/>char&gt;(ss.<ref refid="class_c_data_stream_1a5b9e70188c662f4e9496066472af213e" kindref="member">begin</ref>(),<sp/>ss.<ref refid="class_c_data_stream_1a1c22182691412ed9e0a30b719d388f31" kindref="member">end</ref>());</highlight></codeline>
<codeline lineno="1948"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1949"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pblock2-&gt;<ref refid="struct_c_orphan_block_1ab4d0e535f5020a6c765ce3e1d58b5cb8" kindref="member">hashBlock</ref><sp/>=<sp/><ref refid="cache_8cc_1a11ecb029164e055f28f4123ce3748862" kindref="member">hash</ref>;</highlight></codeline>
<codeline lineno="1950"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pblock2-&gt;<ref refid="struct_c_orphan_block_1a8c6e5d47d1da746d59feefdc0eb9f55c" kindref="member">hashPrev</ref><sp/>=<sp/>pblock-&gt;<ref refid="class_c_block_header_1ad9b904df502d648309342e5e5b0949a6" kindref="member">hashPrevBlock</ref>;</highlight></codeline>
<codeline lineno="1951"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pblock2-&gt;<ref refid="struct_c_orphan_block_1a11bf8c661061349166e335ba0dedd7fb" kindref="member">stake</ref><sp/>=<sp/>pblock-&gt;<ref refid="class_c_block_1aee66480cbb9bc01b5f1d27e6ab71f512" kindref="member">GetProofOfStake</ref>();</highlight></codeline>
<codeline lineno="1952"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nOrphanBlocksSize<sp/>+=<sp/>pblock2-&gt;<ref refid="struct_c_orphan_block_1a6d63003bce14214976acc149cd4813e8" kindref="member">vchBlock</ref>.size();</highlight></codeline>
<codeline lineno="1953"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mapOrphanBlocks.insert(make_pair(hash,<sp/>pblock2));</highlight></codeline>
<codeline lineno="1954"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mapOrphanBlocksByPrev.insert(make_pair(pblock2-&gt;<ref refid="struct_c_orphan_block_1a8c6e5d47d1da746d59feefdc0eb9f55c" kindref="member">hashPrev</ref>,<sp/>pblock2));</highlight></codeline>
<codeline lineno="1955"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(pblock-&gt;<ref refid="class_c_block_1a42d001a1eff1d09a76b61a6ff089da35" kindref="member">IsProofOfStake</ref>())</highlight></codeline>
<codeline lineno="1956"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>setStakeSeenOrphan.insert(pblock-&gt;<ref refid="class_c_block_1aee66480cbb9bc01b5f1d27e6ab71f512" kindref="member">GetProofOfStake</ref>());</highlight></codeline>
<codeline lineno="1957"><highlight class="normal"></highlight></codeline>
<codeline lineno="1958"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Ask<sp/>this<sp/>guy<sp/>to<sp/>fill<sp/>in<sp/>what<sp/>we&apos;re<sp/>missing</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1959"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="main_8cpp_1a28098619373dbab927d25bca3cea8a4a" kindref="member">PushGetBlocks</ref>(pfrom,<sp/>pindexBest,<sp/>GetOrphanRoot(hash));</highlight></codeline>
<codeline lineno="1960"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>ppcoin:<sp/>getblocks<sp/>may<sp/>not<sp/>obtain<sp/>the<sp/>ancestor<sp/>block<sp/>rejected</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1961"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>earlier<sp/>by<sp/>duplicate-stake<sp/>check<sp/>so<sp/>we<sp/>ask<sp/>for<sp/>it<sp/>again<sp/>directly</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1962"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="chain_8cpp_1a5edcd96316574fd4a7f3ae0922a5cfd6" kindref="member">IsInitialBlockDownload</ref>())</highlight></codeline>
<codeline lineno="1963"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pfrom-&gt;<ref refid="class_c_node_1ae0def1498409407d1612833a7d38c875" kindref="member">AskFor</ref>(<ref refid="class_c_inv" kindref="compound">CInv</ref>(<ref refid="protocol_8h_1ac36f475ca5b446f4fde4c9b90bec77c8a4cae15fd207d555331995cd5c57689c1" kindref="member">MSG_BLOCK</ref>,<sp/><ref refid="main_8cpp_1abdef12ddcc1e6b127c59fab552a9b81b" kindref="member">WantedByOrphan</ref>(pblock2)));</highlight></codeline>
<codeline lineno="1964"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1965"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1966"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1967"><highlight class="normal"></highlight></codeline>
<codeline lineno="1968"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Store<sp/>to<sp/>disk</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1969"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!pblock-&gt;<ref refid="class_c_block_1a3f990a713116bd15c1f221c88b012ccf" kindref="member">AcceptBlock</ref>())</highlight></codeline>
<codeline lineno="1970"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>error(</highlight><highlight class="stringliteral">&quot;ProcessBlock()<sp/>:<sp/>AcceptBlock<sp/>FAILED&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1971"><highlight class="normal"></highlight></codeline>
<codeline lineno="1972"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Recursively<sp/>process<sp/>any<sp/>orphan<sp/>blocks<sp/>that<sp/>depended<sp/>on<sp/>this<sp/>one</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1973"><highlight class="normal"><sp/><sp/><sp/><sp/>vector&lt;uint256&gt;<sp/>vWorkQueue;</highlight></codeline>
<codeline lineno="1974"><highlight class="normal"><sp/><sp/><sp/><sp/>vWorkQueue.push_back(hash);</highlight></codeline>
<codeline lineno="1975"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>vWorkQueue.size();<sp/>i++)</highlight></codeline>
<codeline lineno="1976"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1977"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classuint256" kindref="compound">uint256</ref><sp/>hashPrev<sp/>=<sp/>vWorkQueue[i];</highlight></codeline>
<codeline lineno="1978"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(multimap&lt;uint256,<sp/>COrphanBlock*&gt;::iterator<sp/>mi<sp/>=<sp/>mapOrphanBlocksByPrev.lower_bound(hashPrev);</highlight></codeline>
<codeline lineno="1979"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mi<sp/>!=<sp/>mapOrphanBlocksByPrev.upper_bound(hashPrev);</highlight></codeline>
<codeline lineno="1980"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++mi)</highlight></codeline>
<codeline lineno="1981"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1982"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_c_block" kindref="compound">CBlock</ref><sp/><ref refid="core_8h_1ace80c27428e237fe24f54ae915a36133" kindref="member">block</ref>;</highlight></codeline>
<codeline lineno="1983"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1984"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_c_data_stream" kindref="compound">CDataStream</ref><sp/>ss(mi-&gt;second-&gt;vchBlock,<sp/><ref refid="serialize_8h_1a6b7b47dd702d9e331586d485013fd1eaa34949680c53028d35a449bf88b3c329d" kindref="member">SER_DISK</ref>,<sp/>CLIENT_VERSION);</highlight></codeline>
<codeline lineno="1985"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ss<sp/>&gt;&gt;<sp/><ref refid="core_8h_1ace80c27428e237fe24f54ae915a36133" kindref="member">block</ref>;</highlight></codeline>
<codeline lineno="1986"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1987"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>block.<ref refid="class_c_block_1a930d742dbdcd7c78159d3f93431d2d3e" kindref="member">BuildMerkleTree</ref>();</highlight></codeline>
<codeline lineno="1988"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(block.<ref refid="class_c_block_1a3f990a713116bd15c1f221c88b012ccf" kindref="member">AcceptBlock</ref>())</highlight></codeline>
<codeline lineno="1989"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vWorkQueue.push_back(mi-&gt;second-&gt;hashBlock);</highlight></codeline>
<codeline lineno="1990"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mapOrphanBlocks.erase(mi-&gt;second-&gt;hashBlock);</highlight></codeline>
<codeline lineno="1991"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>setStakeSeenOrphan.erase(block.<ref refid="class_c_block_1aee66480cbb9bc01b5f1d27e6ab71f512" kindref="member">GetProofOfStake</ref>());</highlight></codeline>
<codeline lineno="1992"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nOrphanBlocksSize<sp/>-=<sp/>mi-&gt;second-&gt;vchBlock.<ref refid="classbase__uint_1ae0e221686cd63384569a8db5cc06d4c9" kindref="member">size</ref>();</highlight></codeline>
<codeline lineno="1993"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>mi-&gt;second;</highlight></codeline>
<codeline lineno="1994"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1995"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mapOrphanBlocksByPrev.erase(hashPrev);</highlight></codeline>
<codeline lineno="1996"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1997"><highlight class="normal"></highlight></codeline>
<codeline lineno="1998"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//TODO<sp/>(Amir):<sp/>Do<sp/>we<sp/>need<sp/>this<sp/>code?</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1999"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*if(!fLiteMode<sp/>&amp;&amp;<sp/>!IsInitialBlockDownload()){</highlight></codeline>
<codeline lineno="2000"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(!fImporting<sp/>&amp;&amp;<sp/>!fReindex<sp/>&amp;&amp;<sp/>pindexBest-&gt;nHeight<sp/>&gt;<sp/>Checkpoints::GetTotalBlocksEstimate()){</highlight></codeline>
<codeline lineno="2001"><highlight class="comment"></highlight></codeline>
<codeline lineno="2002"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CScript<sp/>payee;</highlight></codeline>
<codeline lineno="2003"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if(stormnodePayments.GetBlockPayee(pindexBest-&gt;nHeight+1,<sp/>payee)){</highlight></codeline>
<codeline lineno="2004"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//UPDATE<sp/>STORMNODE<sp/>LAST<sp/>PAID<sp/>TIME</highlight></codeline>
<codeline lineno="2005"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CStormnode*<sp/>psn<sp/>=<sp/>snodeman.Find(payee);</highlight></codeline>
<codeline lineno="2006"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if(psn<sp/>!=<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="2007"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>psn-&gt;nLastPaid<sp/>=<sp/>GetAdjustedTime();</highlight></codeline>
<codeline lineno="2008"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2009"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>LogPrintf(&quot;ProcessBlock()<sp/>:<sp/>Update<sp/>Stormnode<sp/>Last<sp/>Paid<sp/>Time<sp/>-<sp/>%d\n&quot;,<sp/>pindexBest-&gt;nHeight);</highlight></codeline>
<codeline lineno="2010"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2011"><highlight class="comment"></highlight></codeline>
<codeline lineno="2012"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sandStormPool.CheckTimeout();</highlight></codeline>
<codeline lineno="2013"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sandStormPool.NewBlock();</highlight></codeline>
<codeline lineno="2014"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stormnodePayments.ProcessBlock(GetHeight()+10);</highlight></codeline>
<codeline lineno="2015"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>budget.NewBlock();</highlight></codeline>
<codeline lineno="2016"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2017"><highlight class="comment"><sp/><sp/><sp/><sp/>}*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2018"><highlight class="normal"></highlight></codeline>
<codeline lineno="2019"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="util_8h_1afc02c0a4258fedfb316be612bb659ba8" kindref="member">LogPrintf</ref>(</highlight><highlight class="stringliteral">&quot;ProcessBlock:<sp/>ACCEPTED\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2020"><highlight class="normal"></highlight></codeline>
<codeline lineno="2021"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2022"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2023"><highlight class="normal"></highlight></codeline>
<codeline lineno="2024" refid="main_8h_1a6df609da0bad1550cbb2cdc781ad2904" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="main_8cpp_1a7d4a97e049394047743b48c0cd0f0791" kindref="member">CheckDiskSpace</ref>(<ref refid="stdint_8h_1aaa5d1cd013383c889537491c3cfd9aad" kindref="member">uint64_t</ref><sp/>nAdditionalBytes)</highlight></codeline>
<codeline lineno="2025"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2026"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="stdint_8h_1aaa5d1cd013383c889537491c3cfd9aad" kindref="member">uint64_t</ref><sp/>nFreeBytesAvailable<sp/>=<sp/>filesystem::space(<ref refid="util_8cpp_1ab83866a054745d4b30a3948a1b44beba" kindref="member">GetDataDir</ref>()).available;</highlight></codeline>
<codeline lineno="2027"><highlight class="normal"></highlight></codeline>
<codeline lineno="2028"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Check<sp/>for<sp/>nMinDiskSpace<sp/>bytes<sp/>(currently<sp/>50MB)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2029"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(nFreeBytesAvailable<sp/>&lt;<sp/>nMinDiskSpace<sp/>+<sp/>nAdditionalBytes)</highlight></codeline>
<codeline lineno="2030"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2031"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>strMessage<sp/>=<sp/><ref refid="ui__interface_8h_1aad133bb6103b53cebf03fd01e2f11ba1" kindref="member">_</ref>(</highlight><highlight class="stringliteral">&quot;Error:<sp/>Disk<sp/>space<sp/>is<sp/>low!&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2032"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="util_8cpp_1a396fd0b4e52260e1ddf379fa6e09d887" kindref="member">strMiscWarning</ref><sp/>=<sp/>strMessage;</highlight></codeline>
<codeline lineno="2033"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="util_8h_1afc02c0a4258fedfb316be612bb659ba8" kindref="member">LogPrintf</ref>(</highlight><highlight class="stringliteral">&quot;***<sp/>%s\n&quot;</highlight><highlight class="normal">,<sp/>strMessage);</highlight></codeline>
<codeline lineno="2034"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="init_8cpp_1a4fe31b510fc1c2b95321cedb9f89e8de" kindref="member">uiInterface</ref>.<ref refid="class_c_client_u_i_interface_1ab3f23c730300df11cf9ff369fbae0635" kindref="member">ThreadSafeMessageBox</ref>(strMessage,<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">,<sp/><ref refid="class_c_client_u_i_interface_1a568cf07ecac3fac224d63b42a32e8bc1a0551e67c07eb6a81edf6e43fed89759f" kindref="member">CClientUIInterface::MSG_ERROR</ref>);</highlight></codeline>
<codeline lineno="2035"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="init_8cpp_1ac7140c7327b1e6a8d46470b1cd0e8e1b" kindref="member">StartShutdown</ref>();</highlight></codeline>
<codeline lineno="2036"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2037"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2038"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2039"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2040"><highlight class="normal"></highlight></codeline>
<codeline lineno="2041"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>InvalidBlockFound(<ref refid="class_c_block_index" kindref="compound">CBlockIndex</ref><sp/>*pindex,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_c_validation_state" kindref="compound">CValidationState</ref><sp/>&amp;state)<sp/>{</highlight></codeline>
<codeline lineno="2042"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nDoS<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2043"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(state.<ref refid="class_c_validation_state_1aba47277dbc39192208515fd8cc685879" kindref="member">IsInvalid</ref>(nDoS))<sp/>{</highlight></codeline>
<codeline lineno="2044"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::map&lt;uint256,<sp/>NodeId&gt;::iterator<sp/>it<sp/>=<sp/>mapBlockSource.find(pindex-&gt;<ref refid="class_c_block_index_1ab843ef9b8b0a0193ec3a5c24738e484f" kindref="member">GetBlockHash</ref>());</highlight></codeline>
<codeline lineno="2045"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(it<sp/>!=<sp/>mapBlockSource.end()<sp/>&amp;&amp;<sp/>State(it-&gt;second))<sp/>{</highlight></codeline>
<codeline lineno="2046"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CBlockReject<sp/>reject<sp/>=<sp/>{state.<ref refid="class_c_validation_state_1a8bbd27130d1810d60735e1df5e4ea69b" kindref="member">GetRejectCode</ref>(),<sp/>state.<ref refid="class_c_validation_state_1a2e7ea577adfdf90aaff44ad0fa16adde" kindref="member">GetRejectReason</ref>().substr(0,<sp/>MAX_REJECT_MESSAGE_LENGTH),<sp/>pindex-&gt;<ref refid="class_c_block_index_1ab843ef9b8b0a0193ec3a5c24738e484f" kindref="member">GetBlockHash</ref>()};</highlight></codeline>
<codeline lineno="2047"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>State(it-&gt;second)-&gt;rejects.push_back(reject);</highlight></codeline>
<codeline lineno="2048"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(nDoS<sp/>&gt;<sp/>0)</highlight></codeline>
<codeline lineno="2049"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="main_8cpp_1a387fdffa0ff52dde6b7d1c2991a9bdac" kindref="member">Misbehaving</ref>(it-&gt;second,<sp/>nDoS);</highlight></codeline>
<codeline lineno="2050"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2051"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2052"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!state.<ref refid="class_c_validation_state_1a5b09f68e838c43ef20af29e725920a01" kindref="member">CorruptionPossible</ref>())<sp/>{</highlight></codeline>
<codeline lineno="2053"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pindex-&gt;<ref refid="class_c_block_index_1ac5a336b45ca70e3ed2fc090bf2ee3011" kindref="member">nStatus</ref><sp/>|=<sp/><ref refid="chain_8h_1a43adb063ba9e8b0f1143146d9c7929d9ab3f668fe41faf909922945b37b25ec2d" kindref="member">BLOCK_FAILED_VALID</ref>;</highlight></codeline>
<codeline lineno="2054"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>setDirtyBlockIndex.insert(pindex);</highlight></codeline>
<codeline lineno="2055"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>setBlockIndexCandidates.erase(pindex);</highlight></codeline>
<codeline lineno="2056"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="chain_8cpp_1ae282007adebd031cdbfecdd0ad1feeb8" kindref="member">InvalidChainFound</ref>(pindex);</highlight></codeline>
<codeline lineno="2057"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2058"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2059"><highlight class="normal"></highlight></codeline>
<codeline lineno="2060" refid="main_8h_1ac98b87e479f71b7be2b990a10c4ebc2d" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="main_8cpp_1ac98b87e479f71b7be2b990a10c4ebc2d" kindref="member">UnloadBlockIndex</ref>()</highlight></codeline>
<codeline lineno="2061"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2062"><highlight class="normal"><sp/><sp/><sp/><sp/>mapBlockIndex.clear();</highlight></codeline>
<codeline lineno="2063"><highlight class="normal"><sp/><sp/><sp/><sp/>setBlockIndexCandidates.clear();</highlight></codeline>
<codeline lineno="2064"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//chainActive.SetTip(NULL);//TODO<sp/>(Amir):<sp/>Implement<sp/>these<sp/>after<sp/>chainActive</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2065"><highlight class="normal"><sp/><sp/><sp/><sp/>pindexBestInvalid<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="2066"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2067"><highlight class="normal"></highlight></codeline>
<codeline lineno="2068" refid="main_8h_1a367f303d34b8a5501ac4d77bebab578c" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="main_8cpp_1af94b2ea9be1ac00e564bc30492e39783" kindref="member">LoadBlockIndex</ref>(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>fAllowNew)</highlight></codeline>
<codeline lineno="2069"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2070"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="sync_8h_1a911fe23f057c2fe5aad629162d6c99d0" kindref="member">LOCK</ref>(cs_main);</highlight></codeline>
<codeline lineno="2071"><highlight class="normal"></highlight></codeline>
<codeline lineno="2072"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="chainparams_8h_1abc8c1af875107f5eac0f327bd3b8363d" kindref="member">TestNet</ref>())</highlight></codeline>
<codeline lineno="2073"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2074"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nStakeMinConfirmations<sp/>=<sp/>10;</highlight></codeline>
<codeline lineno="2075"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nCoinbaseMaturity<sp/>=<sp/>10;<sp/></highlight><highlight class="comment">//<sp/>test<sp/>maturity<sp/>is<sp/>10<sp/>blocks</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2076"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2077"><highlight class="normal"></highlight></codeline>
<codeline lineno="2078"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2079"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Load<sp/>block<sp/>index</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2080"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2081"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_c_tx_d_b" kindref="compound">CTxDB</ref><sp/><ref refid="txdb-leveldb_8cpp_1a72eff8ae1d84de13daf97a61b8c02bc6" kindref="member">txdb</ref>(</highlight><highlight class="stringliteral">&quot;cr+&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2082"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!txdb.<ref refid="class_c_tx_d_b_1abcb9df0821d996f811f6604b452a26a0" kindref="member">LoadBlockIndex</ref>())</highlight></codeline>
<codeline lineno="2083"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2084"><highlight class="normal"></highlight></codeline>
<codeline lineno="2085"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2086"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Init<sp/>with<sp/>genesis<sp/>block</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2087"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2088"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mapBlockIndex.empty())</highlight></codeline>
<codeline lineno="2089"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2090"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!fAllowNew)</highlight></codeline>
<codeline lineno="2091"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2092"><highlight class="normal"></highlight></codeline>
<codeline lineno="2093"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_c_block" kindref="compound">CBlock</ref><sp/>&amp;<ref refid="structblock__" kindref="compound">block</ref><sp/>=<sp/></highlight><highlight class="keyword">const_cast&lt;</highlight><highlight class="normal"><ref refid="class_c_block" kindref="compound">CBlock</ref>&amp;</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(<ref refid="chainparams_8cpp_1ace5c5b706d71a324a417dd2db394fd4a" kindref="member">Params</ref>().<ref refid="class_c_chain_params_1abee677792d8f64e9dc766738ca0fbb55" kindref="member">GenesisBlock</ref>());</highlight></codeline>
<codeline lineno="2094"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Start<sp/>new<sp/>block<sp/>file</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2095"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nFile;</highlight></codeline>
<codeline lineno="2096"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nBlockPos;</highlight></codeline>
<codeline lineno="2097"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!block.<ref refid="class_c_block_1a606df2cab7dc67e5dd11b157d288cf2b" kindref="member">WriteToDisk</ref>(nFile,<sp/>nBlockPos))</highlight></codeline>
<codeline lineno="2098"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>error(</highlight><highlight class="stringliteral">&quot;LoadBlockIndex()<sp/>:<sp/>writing<sp/>genesis<sp/>block<sp/>to<sp/>disk<sp/>failed&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2099"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!block.<ref refid="class_c_block_1afab527f890c5575db3b1a2b17f47bf5a" kindref="member">AddToBlockIndex</ref>(nFile,<sp/>nBlockPos,<sp/><ref refid="chainparams_8cpp_1ace5c5b706d71a324a417dd2db394fd4a" kindref="member">Params</ref>().HashGenesisBlock()))</highlight></codeline>
<codeline lineno="2100"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>error(</highlight><highlight class="stringliteral">&quot;LoadBlockIndex()<sp/>:<sp/>genesis<sp/>block<sp/>not<sp/>accepted&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2101"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2102"><highlight class="normal"></highlight></codeline>
<codeline lineno="2103"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2104"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2105"><highlight class="normal"></highlight></codeline>
<codeline lineno="2106" refid="main_8h_1a92e5e1fcbd56cc44c27d39b64da8a79a" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="main_8cpp_1a92e5e1fcbd56cc44c27d39b64da8a79a" kindref="member">InitBlockIndex</ref>()<sp/>{</highlight></codeline>
<codeline lineno="2107"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//TODO<sp/>(Amir):<sp/>Implement<sp/>this<sp/>after<sp/>chainActive</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2108"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2109"><highlight class="comment"><sp/><sp/><sp/><sp/>LOCK(cs_main);</highlight></codeline>
<codeline lineno="2110"><highlight class="comment"><sp/><sp/><sp/><sp/>//<sp/>Check<sp/>whether<sp/>we&apos;re<sp/>already<sp/>initialized</highlight></codeline>
<codeline lineno="2111"><highlight class="comment"><sp/><sp/><sp/><sp/>if<sp/>(chainActive.Genesis()<sp/>!=<sp/>NULL)</highlight></codeline>
<codeline lineno="2112"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>true;</highlight></codeline>
<codeline lineno="2113"><highlight class="comment"></highlight></codeline>
<codeline lineno="2114"><highlight class="comment"><sp/><sp/><sp/><sp/>//<sp/>Use<sp/>the<sp/>provided<sp/>setting<sp/>for<sp/>-txindex<sp/>in<sp/>the<sp/>new<sp/>database</highlight></codeline>
<codeline lineno="2115"><highlight class="comment"><sp/><sp/><sp/><sp/>fTxIndex<sp/>=<sp/>GetBoolArg(&quot;-txindex&quot;,<sp/>true);</highlight></codeline>
<codeline lineno="2116"><highlight class="comment"><sp/><sp/><sp/><sp/>pblocktree-&gt;WriteFlag(&quot;txindex&quot;,<sp/>fTxIndex);</highlight></codeline>
<codeline lineno="2117"><highlight class="comment"><sp/><sp/><sp/><sp/>LogPrintf(&quot;Initializing<sp/>databases...\n&quot;);</highlight></codeline>
<codeline lineno="2118"><highlight class="comment"></highlight></codeline>
<codeline lineno="2119"><highlight class="comment"><sp/><sp/><sp/><sp/>//<sp/>Only<sp/>add<sp/>the<sp/>genesis<sp/>block<sp/>if<sp/>not<sp/>reindexing<sp/>(in<sp/>which<sp/>case<sp/>we<sp/>reuse<sp/>the<sp/>one<sp/>already<sp/>on<sp/>disk)</highlight></codeline>
<codeline lineno="2120"><highlight class="comment"><sp/><sp/><sp/><sp/>if<sp/>(!fReindex)<sp/>{</highlight></codeline>
<codeline lineno="2121"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>try<sp/>{</highlight></codeline>
<codeline lineno="2122"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CBlock<sp/>&amp;block<sp/>=<sp/>const_cast&lt;CBlock&amp;&gt;(Params().GenesisBlock());</highlight></codeline>
<codeline lineno="2123"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>Start<sp/>new<sp/>block<sp/>file</highlight></codeline>
<codeline lineno="2124"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>unsigned<sp/>int<sp/>nBlockSize<sp/>=<sp/>::GetSerializeSize(block,<sp/>SER_DISK,<sp/>CLIENT_VERSION);</highlight></codeline>
<codeline lineno="2125"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CDiskBlockPos<sp/>blockPos;</highlight></codeline>
<codeline lineno="2126"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CValidationState<sp/>state;</highlight></codeline>
<codeline lineno="2127"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(!FindBlockPos(state,<sp/>blockPos,<sp/>nBlockSize+8,<sp/>0,<sp/>block.GetBlockTime()))</highlight></codeline>
<codeline lineno="2128"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>error(&quot;LoadBlockIndex()<sp/>:<sp/>FindBlockPos<sp/>failed&quot;);</highlight></codeline>
<codeline lineno="2129"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(!WriteBlockToDisk(block,<sp/>blockPos))</highlight></codeline>
<codeline lineno="2130"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>error(&quot;LoadBlockIndex()<sp/>:<sp/>writing<sp/>genesis<sp/>block<sp/>to<sp/>disk<sp/>failed&quot;);</highlight></codeline>
<codeline lineno="2131"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CBlockIndex<sp/>*pindex<sp/>=<sp/>AddToBlockIndex(block);</highlight></codeline>
<codeline lineno="2132"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(!ReceivedBlockTransactions(block,<sp/>state,<sp/>pindex,<sp/>blockPos))</highlight></codeline>
<codeline lineno="2133"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>error(&quot;LoadBlockIndex()<sp/>:<sp/>genesis<sp/>block<sp/>not<sp/>accepted&quot;);</highlight></codeline>
<codeline lineno="2134"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(!ActivateBestChain(state,<sp/>&amp;block))</highlight></codeline>
<codeline lineno="2135"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>error(&quot;LoadBlockIndex()<sp/>:<sp/>genesis<sp/>block<sp/>cannot<sp/>be<sp/>activated&quot;);</highlight></codeline>
<codeline lineno="2136"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>Force<sp/>a<sp/>chainstate<sp/>write<sp/>so<sp/>that<sp/>when<sp/>we<sp/>VerifyDB<sp/>in<sp/>a<sp/>moment,<sp/>it<sp/>doesnt<sp/>check<sp/>stale<sp/>data</highlight></codeline>
<codeline lineno="2137"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>FlushStateToDisk(state,<sp/>FLUSH_STATE_ALWAYS);</highlight></codeline>
<codeline lineno="2138"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/>catch(std::runtime_error<sp/>&amp;e)<sp/>{</highlight></codeline>
<codeline lineno="2139"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>error(&quot;LoadBlockIndex()<sp/>:<sp/>failed<sp/>to<sp/>initialize<sp/>block<sp/>database:<sp/>%s&quot;,<sp/>e.what());</highlight></codeline>
<codeline lineno="2140"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2141"><highlight class="comment"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2142"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2143"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2144"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2145"><highlight class="normal"></highlight></codeline>
<codeline lineno="2146" refid="main_8h_1aac88c75e65aa0dee60e4332dbcc16120" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="main_8cpp_1aac88c75e65aa0dee60e4332dbcc16120" kindref="member">PrintBlockTree</ref>()</highlight></codeline>
<codeline lineno="2147"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2148"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="sync_8h_1acd61d0cb3b49f367728193720014aed0" kindref="member">AssertLockHeld</ref>(cs_main);</highlight></codeline>
<codeline lineno="2149"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>pre-compute<sp/>tree<sp/>structure</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2150"><highlight class="normal"><sp/><sp/><sp/><sp/>map&lt;CBlockIndex*,<sp/>vector&lt;CBlockIndex*&gt;<sp/>&gt;<sp/>mapNext;</highlight></codeline>
<codeline lineno="2151"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(map&lt;uint256,<sp/>CBlockIndex*&gt;::iterator<sp/>mi<sp/>=<sp/>mapBlockIndex.begin();<sp/>mi<sp/>!=<sp/>mapBlockIndex.end();<sp/>++mi)</highlight></codeline>
<codeline lineno="2152"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2153"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_c_block_index" kindref="compound">CBlockIndex</ref>*<sp/>pindex<sp/>=<sp/>(*mi).second;</highlight></codeline>
<codeline lineno="2154"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mapNext[pindex-&gt;<ref refid="class_c_block_index_1a1ef11137155df1dd5c81491630cece39" kindref="member">pprev</ref>].push_back(pindex);</highlight></codeline>
<codeline lineno="2155"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>test</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2156"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//while<sp/>(rand()<sp/>%<sp/>3<sp/>==<sp/>0)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2157"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>mapNext[pindex-&gt;pprev].push_back(pindex);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2158"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2159"><highlight class="normal"></highlight></codeline>
<codeline lineno="2160"><highlight class="normal"><sp/><sp/><sp/><sp/>vector&lt;pair&lt;int,<sp/>CBlockIndex*&gt;<sp/>&gt;<sp/>vStack;</highlight></codeline>
<codeline lineno="2161"><highlight class="normal"><sp/><sp/><sp/><sp/>vStack.push_back(make_pair(0,<sp/>pindexGenesisBlock));</highlight></codeline>
<codeline lineno="2162"><highlight class="normal"></highlight></codeline>
<codeline lineno="2163"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nPrevCol<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2164"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(!vStack.empty())</highlight></codeline>
<codeline lineno="2165"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2166"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nCol<sp/>=<sp/>vStack.back().first;</highlight></codeline>
<codeline lineno="2167"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_c_block_index" kindref="compound">CBlockIndex</ref>*<sp/>pindex<sp/>=<sp/>vStack.back().second;</highlight></codeline>
<codeline lineno="2168"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vStack.pop_back();</highlight></codeline>
<codeline lineno="2169"><highlight class="normal"></highlight></codeline>
<codeline lineno="2170"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>print<sp/>split<sp/>or<sp/>gap</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2171"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(nCol<sp/>&gt;<sp/>nPrevCol)</highlight></codeline>
<codeline lineno="2172"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2173"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>nCol-1;<sp/>i++)</highlight></codeline>
<codeline lineno="2174"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="util_8h_1afc02c0a4258fedfb316be612bb659ba8" kindref="member">LogPrintf</ref>(</highlight><highlight class="stringliteral">&quot;|<sp/>&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2175"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="util_8h_1afc02c0a4258fedfb316be612bb659ba8" kindref="member">LogPrintf</ref>(</highlight><highlight class="stringliteral">&quot;|\\\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2176"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2177"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(nCol<sp/>&lt;<sp/>nPrevCol)</highlight></codeline>
<codeline lineno="2178"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2179"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>nCol;<sp/>i++)</highlight></codeline>
<codeline lineno="2180"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="util_8h_1afc02c0a4258fedfb316be612bb659ba8" kindref="member">LogPrintf</ref>(</highlight><highlight class="stringliteral">&quot;|<sp/>&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2181"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="util_8h_1afc02c0a4258fedfb316be612bb659ba8" kindref="member">LogPrintf</ref>(</highlight><highlight class="stringliteral">&quot;|\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2182"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2183"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nPrevCol<sp/>=<sp/>nCol;</highlight></codeline>
<codeline lineno="2184"><highlight class="normal"></highlight></codeline>
<codeline lineno="2185"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>print<sp/>columns</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2186"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>nCol;<sp/>i++)</highlight></codeline>
<codeline lineno="2187"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="util_8h_1afc02c0a4258fedfb316be612bb659ba8" kindref="member">LogPrintf</ref>(</highlight><highlight class="stringliteral">&quot;|<sp/>&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2188"><highlight class="normal"></highlight></codeline>
<codeline lineno="2189"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>print<sp/>item</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2190"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_c_block" kindref="compound">CBlock</ref><sp/><ref refid="core_8h_1ace80c27428e237fe24f54ae915a36133" kindref="member">block</ref>;</highlight></codeline>
<codeline lineno="2191"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>block.<ref refid="class_c_block_1a77a1b1e9902e1e557d762f5a5f325cd8" kindref="member">ReadFromDisk</ref>(pindex);</highlight></codeline>
<codeline lineno="2192"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="util_8h_1afc02c0a4258fedfb316be612bb659ba8" kindref="member">LogPrintf</ref>(</highlight><highlight class="stringliteral">&quot;%d<sp/>(%u,%u)<sp/>%s<sp/><sp/>%08x<sp/><sp/>%s<sp/><sp/>mint<sp/>%7s<sp/><sp/>tx<sp/>%u&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="2193"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pindex-&gt;<ref refid="class_c_block_index_1aebfc8d6b95852546760e742553d7bfd5" kindref="member">nHeight</ref>,</highlight></codeline>
<codeline lineno="2194"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pindex-&gt;<ref refid="class_c_block_index_1a3bf9ecd8938c42be6a4b14d3c7ef5c21" kindref="member">nFile</ref>,</highlight></codeline>
<codeline lineno="2195"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pindex-&gt;<ref refid="class_c_block_index_1af8de5426e2da2c78e1e7729a89a7670a" kindref="member">nBlockPos</ref>,</highlight></codeline>
<codeline lineno="2196"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>block.<ref refid="class_c_block_header_1ae1165e54882d364b030fb33673d64dbd" kindref="member">GetHash</ref>().<ref refid="classbase__uint_1ac3080a72402cadf28dbc9f9b69cc60be" kindref="member">ToString</ref>(),</highlight></codeline>
<codeline lineno="2197"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>block.<ref refid="class_c_block_header_1a88d501b1da4d34d7dc80c65bd4837670" kindref="member">nBits</ref>,</highlight></codeline>
<codeline lineno="2198"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="util_8cpp_1a749bc6776c8ec72d7c5e4dea56aee415" kindref="member">DateTimeStrFormat</ref>(</highlight><highlight class="stringliteral">&quot;%x<sp/>%H:%M:%S&quot;</highlight><highlight class="normal">,<sp/>block.<ref refid="class_c_block_header_1a2972ebc9d970b4b12434876263c4c2b5" kindref="member">GetBlockTime</ref>()),</highlight></codeline>
<codeline lineno="2199"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="util_8cpp_1a72fc7ee9c182de0580a9909c5895fe24" kindref="member">FormatMoney</ref>(pindex-&gt;<ref refid="class_c_block_index_1a6559fddea3401548ae144e870d150359" kindref="member">nMint</ref>),</highlight></codeline>
<codeline lineno="2200"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>block.<ref refid="class_c_block_1a9b6508d662722775f3029b980b382b66" kindref="member">vtx</ref>.size());</highlight></codeline>
<codeline lineno="2201"><highlight class="normal"></highlight></codeline>
<codeline lineno="2202"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>put<sp/>the<sp/>main<sp/>time-chain<sp/>first</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2203"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vector&lt;CBlockIndex*&gt;&amp;<sp/>vNext<sp/>=<sp/>mapNext[pindex];</highlight></codeline>
<codeline lineno="2204"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>vNext.size();<sp/>i++)</highlight></codeline>
<codeline lineno="2205"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2206"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(vNext[i]-&gt;pnext)</highlight></codeline>
<codeline lineno="2207"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2208"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>swap(vNext[0],<sp/>vNext[i]);</highlight></codeline>
<codeline lineno="2209"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2210"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2211"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2212"><highlight class="normal"></highlight></codeline>
<codeline lineno="2213"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>iterate<sp/>children</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2214"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>vNext.size();<sp/>i++)</highlight></codeline>
<codeline lineno="2215"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vStack.push_back(make_pair(nCol+i,<sp/>vNext[i]));</highlight></codeline>
<codeline lineno="2216"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2217"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2218"><highlight class="normal"></highlight></codeline>
<codeline lineno="2219" refid="main_8cpp_1afbdbbb5a1b376748e5460cbcf644a9af" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="main_8cpp_1afbdbbb5a1b376748e5460cbcf644a9af" kindref="member">LoadExternalBlockFile</ref>(FILE*<sp/>fileIn)</highlight></codeline>
<codeline lineno="2220"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2221"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="stdint_8h_1adec1df1b8b51cb32b77e5b86fff46471" kindref="member">int64_t</ref><sp/>nStart<sp/>=<sp/><ref refid="util_8h_1a139d0fe6387b9e230a9b8bb12d9b43b9" kindref="member">GetTimeMillis</ref>();</highlight></codeline>
<codeline lineno="2222"><highlight class="normal"></highlight></codeline>
<codeline lineno="2223"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nLoaded<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2224"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2225"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">try</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="2226"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_c_auto_file" kindref="compound">CAutoFile</ref><sp/>blkdat(fileIn,<sp/><ref refid="serialize_8h_1a6b7b47dd702d9e331586d485013fd1eaa34949680c53028d35a449bf88b3c329d" kindref="member">SER_DISK</ref>,<sp/>CLIENT_VERSION);</highlight></codeline>
<codeline lineno="2227"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nPos<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2228"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(nPos<sp/>!=<sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)-1<sp/>&amp;&amp;<sp/>blkdat.<ref refid="class_c_auto_file_1afec38aaa4cc8a86766b7be4bcd0e1c4d" kindref="member">good</ref>())</highlight></codeline>
<codeline lineno="2229"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2230"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>boost::this_thread::interruption_point();</highlight></codeline>
<codeline lineno="2231"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>pchData[65536];</highlight></codeline>
<codeline lineno="2232"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">do</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="2233"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fseek(blkdat,<sp/>nPos,<sp/>SEEK_SET);</highlight></codeline>
<codeline lineno="2234"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nRead<sp/>=<sp/>fread(pchData,<sp/>1,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(pchData),<sp/>blkdat);</highlight></codeline>
<codeline lineno="2235"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(nRead<sp/>&lt;=<sp/>8)</highlight></codeline>
<codeline lineno="2236"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2237"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nPos<sp/>=<sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>int)-1;</highlight></codeline>
<codeline lineno="2238"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2239"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2240"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>nFind<sp/>=<sp/>memchr(pchData,<sp/><ref refid="chainparams_8cpp_1ace5c5b706d71a324a417dd2db394fd4a" kindref="member">Params</ref>().MessageStart()[0],<sp/>nRead+1-<ref refid="chainparams_8h_1a6bcadada595cc3da13e6a04be1715917" kindref="member">MESSAGE_START_SIZE</ref>);</highlight></codeline>
<codeline lineno="2241"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(nFind)</highlight></codeline>
<codeline lineno="2242"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2243"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(memcmp(nFind,<sp/><ref refid="chainparams_8cpp_1ace5c5b706d71a324a417dd2db394fd4a" kindref="member">Params</ref>().MessageStart(),<sp/><ref refid="chainparams_8h_1a6bcadada595cc3da13e6a04be1715917" kindref="member">MESSAGE_START_SIZE</ref>)==0)</highlight></codeline>
<codeline lineno="2244"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2245"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nPos<sp/>+=<sp/>((</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*)nFind<sp/>-<sp/>pchData)<sp/>+<sp/><ref refid="chainparams_8h_1a6bcadada595cc3da13e6a04be1715917" kindref="member">MESSAGE_START_SIZE</ref>;</highlight></codeline>
<codeline lineno="2246"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2247"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2248"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nPos<sp/>+=<sp/>((</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*)nFind<sp/>-<sp/>pchData)<sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="2249"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2250"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2251"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nPos<sp/>+=<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(pchData)<sp/>-<sp/><ref refid="chainparams_8h_1a6bcadada595cc3da13e6a04be1715917" kindref="member">MESSAGE_START_SIZE</ref><sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="2252"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>boost::this_thread::interruption_point();</highlight></codeline>
<codeline lineno="2253"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(</highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2254"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(nPos<sp/>==<sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)-1)</highlight></codeline>
<codeline lineno="2255"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2256"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fseek(blkdat,<sp/>nPos,<sp/>SEEK_SET);</highlight></codeline>
<codeline lineno="2257"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nSize;</highlight></codeline>
<codeline lineno="2258"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>blkdat<sp/>&gt;&gt;<sp/>nSize;</highlight></codeline>
<codeline lineno="2259"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(nSize<sp/>&gt;<sp/>0<sp/>&amp;&amp;<sp/>nSize<sp/>&lt;=<sp/>MAX_BLOCK_SIZE)</highlight></codeline>
<codeline lineno="2260"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2261"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_c_block" kindref="compound">CBlock</ref><sp/><ref refid="core_8h_1ace80c27428e237fe24f54ae915a36133" kindref="member">block</ref>;</highlight></codeline>
<codeline lineno="2262"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>blkdat<sp/>&gt;&gt;<sp/><ref refid="core_8h_1ace80c27428e237fe24f54ae915a36133" kindref="member">block</ref>;</highlight></codeline>
<codeline lineno="2263"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="sync_8h_1a911fe23f057c2fe5aad629162d6c99d0" kindref="member">LOCK</ref>(cs_main);</highlight></codeline>
<codeline lineno="2264"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="main_8cpp_1a7c8a7be3439bb5e1e40548a332a3cf29" kindref="member">ProcessBlock</ref>(NULL,&amp;block))</highlight></codeline>
<codeline lineno="2265"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2266"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nLoaded++;</highlight></codeline>
<codeline lineno="2267"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nPos<sp/>+=<sp/>4<sp/>+<sp/>nSize;</highlight></codeline>
<codeline lineno="2268"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2269"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2270"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2271"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2272"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">catch</highlight><highlight class="normal"><sp/>(std::exception<sp/>&amp;e)<sp/>{</highlight></codeline>
<codeline lineno="2273"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="util_8h_1afc02c0a4258fedfb316be612bb659ba8" kindref="member">LogPrintf</ref>(</highlight><highlight class="stringliteral">&quot;%s()<sp/>:<sp/>Deserialize<sp/>or<sp/>I/O<sp/>error<sp/>caught<sp/>during<sp/>load\n&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="2274"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__PRETTY_FUNCTION__);</highlight></codeline>
<codeline lineno="2275"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2276"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2277"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="util_8h_1afc02c0a4258fedfb316be612bb659ba8" kindref="member">LogPrintf</ref>(</highlight><highlight class="stringliteral">&quot;Loaded<sp/>%i<sp/>blocks<sp/>from<sp/>external<sp/>file<sp/>in<sp/>%dms\n&quot;</highlight><highlight class="normal">,<sp/>nLoaded,<sp/><ref refid="util_8h_1a139d0fe6387b9e230a9b8bb12d9b43b9" kindref="member">GetTimeMillis</ref>()<sp/>-<sp/>nStart);</highlight></codeline>
<codeline lineno="2278"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>nLoaded<sp/>&gt;<sp/>0;</highlight></codeline>
<codeline lineno="2279"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2280"><highlight class="normal"></highlight></codeline>
<codeline lineno="2281" refid="struct_c_importing_now" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_c_importing_now" kindref="compound">CImportingNow</ref></highlight></codeline>
<codeline lineno="2282"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2283" refid="struct_c_importing_now_1a435755fb20c95b11feaa407210f1630a" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_c_importing_now_1a435755fb20c95b11feaa407210f1630a" kindref="member">CImportingNow</ref>()<sp/>{</highlight></codeline>
<codeline lineno="2284"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assert(fImporting<sp/>==<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2285"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fImporting<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2286"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2287"><highlight class="normal"></highlight></codeline>
<codeline lineno="2288" refid="struct_c_importing_now_1a0e449b23ac612ff3ff491d989fd08a18" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_c_importing_now_1a0e449b23ac612ff3ff491d989fd08a18" kindref="member">~CImportingNow</ref>()<sp/>{</highlight></codeline>
<codeline lineno="2289"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assert(fImporting<sp/>==<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2290"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fImporting<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2291"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2292"><highlight class="normal">};</highlight></codeline>
<codeline lineno="2293"><highlight class="normal"></highlight></codeline>
<codeline lineno="2294" refid="main_8h_1a0189c34248cd89bbbe20d4d6045bd7c9" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="main_8cpp_1a0189c34248cd89bbbe20d4d6045bd7c9" kindref="member">ThreadImport</ref>(std::vector&lt;boost::filesystem::path&gt;<sp/>vImportFiles)</highlight></codeline>
<codeline lineno="2295"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2296"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="util_8cpp_1a85fc1244e0bd3c91ee7a1c05ed10ebbb" kindref="member">RenameThread</ref>(</highlight><highlight class="stringliteral">&quot;darksilk-loadblk&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2297"><highlight class="normal"></highlight></codeline>
<codeline lineno="2298"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_c_importing_now" kindref="compound">CImportingNow</ref><sp/>imp;</highlight></codeline>
<codeline lineno="2299"><highlight class="normal"></highlight></codeline>
<codeline lineno="2300"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>-loadblock=</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2301"><highlight class="normal"><sp/><sp/><sp/><sp/>BOOST_FOREACH(boost::filesystem::path<sp/>&amp;path,<sp/>vImportFiles)<sp/>{</highlight></codeline>
<codeline lineno="2302"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FILE<sp/>*file<sp/>=<sp/>fopen(path.string().c_str(),<sp/></highlight><highlight class="stringliteral">&quot;rb&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2303"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(file)</highlight></codeline>
<codeline lineno="2304"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="main_8cpp_1afbdbbb5a1b376748e5460cbcf644a9af" kindref="member">LoadExternalBlockFile</ref>(file);</highlight></codeline>
<codeline lineno="2305"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2306"><highlight class="normal"></highlight></codeline>
<codeline lineno="2307"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>hardcoded<sp/>$DATADIR/bootstrap.dat</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2308"><highlight class="normal"><sp/><sp/><sp/><sp/>filesystem::path<sp/>pathBootstrap<sp/>=<sp/><ref refid="util_8cpp_1ab83866a054745d4b30a3948a1b44beba" kindref="member">GetDataDir</ref>()<sp/>/<sp/></highlight><highlight class="stringliteral">&quot;bootstrap.dat&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2309"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(filesystem::exists(pathBootstrap))<sp/>{</highlight></codeline>
<codeline lineno="2310"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FILE<sp/>*file<sp/>=<sp/>fopen(pathBootstrap.string().c_str(),<sp/></highlight><highlight class="stringliteral">&quot;rb&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2311"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(file)<sp/>{</highlight></codeline>
<codeline lineno="2312"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>filesystem::path<sp/>pathBootstrapOld<sp/>=<sp/><ref refid="util_8cpp_1ab83866a054745d4b30a3948a1b44beba" kindref="member">GetDataDir</ref>()<sp/>/<sp/></highlight><highlight class="stringliteral">&quot;bootstrap.dat.old&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2313"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="main_8cpp_1afbdbbb5a1b376748e5460cbcf644a9af" kindref="member">LoadExternalBlockFile</ref>(file);</highlight></codeline>
<codeline lineno="2314"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="util_8cpp_1ad8f8509a84cc6f53344a5ac76369c327" kindref="member">RenameOver</ref>(pathBootstrap,<sp/>pathBootstrapOld);</highlight></codeline>
<codeline lineno="2315"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2316"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2317"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2318"><highlight class="normal"></highlight></codeline>
<codeline lineno="2320"><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2321"><highlight class="normal"></highlight><highlight class="comment">//<sp/>CAlert</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2322"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2323"><highlight class="normal"></highlight></codeline>
<codeline lineno="2324"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/>map&lt;uint256,<sp/>CAlert&gt;<sp/><ref refid="main_8cpp_1af7db2cd8ebf71b9cebc5fdddbc28f8dd" kindref="member">mapAlerts</ref>;</highlight></codeline>
<codeline lineno="2325"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/><ref refid="class_annotated_mixin" kindref="compound">CCriticalSection</ref><sp/><ref refid="main_8cpp_1a1d336334e6e9fb3e9e0ed1e0ea5688e9" kindref="member">cs_mapAlerts</ref>;</highlight></codeline>
<codeline lineno="2326"><highlight class="normal"></highlight></codeline>
<codeline lineno="2327" refid="main_8cpp_1a70b1d1b79f1c760e65c960713b87b732" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/><ref refid="main_8cpp_1a70b1d1b79f1c760e65c960713b87b732" kindref="member">GetWarnings</ref>(</highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>strFor)</highlight></codeline>
<codeline lineno="2328"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2329"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nPriority<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2330"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>strStatusBar;</highlight></codeline>
<codeline lineno="2331"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>strRPC;</highlight></codeline>
<codeline lineno="2332"><highlight class="normal"></highlight></codeline>
<codeline lineno="2333"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="util_8cpp_1a64d956f1dda7f9a80ab5d594532b906d" kindref="member">GetBoolArg</ref>(</highlight><highlight class="stringliteral">&quot;-testsafemode&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">))</highlight></codeline>
<codeline lineno="2334"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>strRPC<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;test&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2335"><highlight class="normal"></highlight></codeline>
<codeline lineno="2336"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="clientversion_8h_1a025f9205720e2c4c155eefb01fd150ba" kindref="member">CLIENT_VERSION_IS_RELEASE</ref>)</highlight></codeline>
<codeline lineno="2337"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>strStatusBar<sp/>=<sp/><ref refid="ui__interface_8h_1aad133bb6103b53cebf03fd01e2f11ba1" kindref="member">_</ref>(</highlight><highlight class="stringliteral">&quot;This<sp/>is<sp/>a<sp/>pre-release<sp/>test<sp/>build<sp/>-<sp/>use<sp/>at<sp/>your<sp/>own<sp/>risk<sp/>-<sp/>do<sp/>not<sp/>use<sp/>for<sp/>mining<sp/>or<sp/>merchant<sp/>applications&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2338"><highlight class="normal"></highlight></codeline>
<codeline lineno="2339"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Misc<sp/>warnings<sp/>like<sp/>out<sp/>of<sp/>disk<sp/>space<sp/>and<sp/>clock<sp/>is<sp/>wrong</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2340"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="util_8cpp_1a396fd0b4e52260e1ddf379fa6e09d887" kindref="member">strMiscWarning</ref><sp/>!=<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="2341"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2342"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nPriority<sp/>=<sp/>1000;</highlight></codeline>
<codeline lineno="2343"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>strStatusBar<sp/>=<sp/><ref refid="util_8cpp_1a396fd0b4e52260e1ddf379fa6e09d887" kindref="member">strMiscWarning</ref>;</highlight></codeline>
<codeline lineno="2344"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2345"><highlight class="normal"></highlight></codeline>
<codeline lineno="2346"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Alerts</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2347"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2348"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="sync_8h_1a911fe23f057c2fe5aad629162d6c99d0" kindref="member">LOCK</ref>(cs_mapAlerts);</highlight></codeline>
<codeline lineno="2349"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>BOOST_FOREACH(<ref refid="util_8h_1aa3052ab82a2ba880ea3e30b3357c8820" kindref="member">PAIRTYPE</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classuint256" kindref="compound">uint256</ref>,<sp/><ref refid="class_c_alert" kindref="compound">CAlert</ref>)&amp;<sp/>item,<sp/>mapAlerts)</highlight></codeline>
<codeline lineno="2350"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2351"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_c_alert" kindref="compound">CAlert</ref>&amp;<sp/>alert<sp/>=<sp/>item.second;</highlight></codeline>
<codeline lineno="2352"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(alert.<ref refid="class_c_alert_1a0a7fab6a971781904afb3e4a0ee29e12" kindref="member">AppliesToMe</ref>()<sp/>&amp;&amp;<sp/>alert.<ref refid="class_c_unsigned_alert_1acf7253ae21d58a8633faab0635f5f5f5" kindref="member">nPriority</ref><sp/>&gt;<sp/>nPriority)</highlight></codeline>
<codeline lineno="2353"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2354"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nPriority<sp/>=<sp/>alert.<ref refid="class_c_unsigned_alert_1acf7253ae21d58a8633faab0635f5f5f5" kindref="member">nPriority</ref>;</highlight></codeline>
<codeline lineno="2355"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>strStatusBar<sp/>=<sp/>alert.<ref refid="class_c_unsigned_alert_1a97cfbf9a49b770bb84e49389ac1489c2" kindref="member">strStatusBar</ref>;</highlight></codeline>
<codeline lineno="2356"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(nPriority<sp/>&gt;<sp/>1000)</highlight></codeline>
<codeline lineno="2357"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>strRPC<sp/>=<sp/>strStatusBar;</highlight></codeline>
<codeline lineno="2358"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2359"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2360"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2361"><highlight class="normal"></highlight></codeline>
<codeline lineno="2362"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(strFor<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;statusbar&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="2363"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>strStatusBar;</highlight></codeline>
<codeline lineno="2364"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(strFor<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;rpc&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="2365"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>strRPC;</highlight></codeline>
<codeline lineno="2366"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(!</highlight><highlight class="stringliteral">&quot;GetWarnings()<sp/>:<sp/>invalid<sp/>parameter&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2367"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;error&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2368"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2369"><highlight class="normal"></highlight></codeline>
<codeline lineno="2371"><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2372"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Messages</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2373"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2374"><highlight class="normal"></highlight></codeline>
<codeline lineno="2375"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>AlreadyHave(<ref refid="class_c_tx_d_b" kindref="compound">CTxDB</ref>&amp;<sp/><ref refid="txdb-leveldb_8cpp_1a72eff8ae1d84de13daf97a61b8c02bc6" kindref="member">txdb</ref>,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_c_inv" kindref="compound">CInv</ref>&amp;<sp/>inv)</highlight></codeline>
<codeline lineno="2376"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2377"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(inv.<ref refid="class_c_inv_1a2da8a26c6b8824011e3144459d278c75" kindref="member">type</ref>)</highlight></codeline>
<codeline lineno="2378"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2379"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="protocol_8h_1ac36f475ca5b446f4fde4c9b90bec77c8a0494732fc92c975f58783e224585c473" kindref="member">MSG_TX</ref>:</highlight></codeline>
<codeline lineno="2380"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2381"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>txInMap<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2382"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>txInMap<sp/>=<sp/><ref refid="main_8cpp_1a52890038ef379d29a1a8f3bd20dbe088" kindref="member">mempool</ref>.<ref refid="class_c_tx_mem_pool_1a93b2aa8c01fa291d183a82a9e0beeb35" kindref="member">exists</ref>(inv.<ref refid="class_c_inv_1abfa04c38e9c0def9a2b09a9c43929744" kindref="member">hash</ref>);</highlight></codeline>
<codeline lineno="2383"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>txInMap<sp/>||</highlight></codeline>
<codeline lineno="2384"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mapOrphanTransactions.count(inv.<ref refid="class_c_inv_1abfa04c38e9c0def9a2b09a9c43929744" kindref="member">hash</ref>)<sp/>||</highlight></codeline>
<codeline lineno="2385"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>txdb.<ref refid="class_c_tx_d_b_1a09b87317101ed16b6ad99794279f4c2d" kindref="member">ContainsTx</ref>(inv.<ref refid="class_c_inv_1abfa04c38e9c0def9a2b09a9c43929744" kindref="member">hash</ref>);</highlight></codeline>
<codeline lineno="2386"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2387"><highlight class="normal"></highlight></codeline>
<codeline lineno="2388"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="protocol_8h_1ac36f475ca5b446f4fde4c9b90bec77c8a4cae15fd207d555331995cd5c57689c1" kindref="member">MSG_BLOCK</ref>:</highlight></codeline>
<codeline lineno="2389"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>mapBlockIndex.count(inv.<ref refid="class_c_inv_1abfa04c38e9c0def9a2b09a9c43929744" kindref="member">hash</ref>)<sp/>||</highlight></codeline>
<codeline lineno="2390"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mapOrphanBlocks.count(inv.<ref refid="class_c_inv_1abfa04c38e9c0def9a2b09a9c43929744" kindref="member">hash</ref>);</highlight></codeline>
<codeline lineno="2391"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="protocol_8h_1ac36f475ca5b446f4fde4c9b90bec77c8a802e4d970385efb01469f48db2cf1e06" kindref="member">MSG_TXLOCK_REQUEST</ref>:</highlight></codeline>
<codeline lineno="2392"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="instantx_8cpp_1acc1c1f8ae02ec2b4c621b64291033927" kindref="member">mapTxLockReq</ref>.count(inv.<ref refid="class_c_inv_1abfa04c38e9c0def9a2b09a9c43929744" kindref="member">hash</ref>)<sp/>||</highlight></codeline>
<codeline lineno="2393"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="instantx_8cpp_1a264a77cc84daf11ad7745da7e4b63266" kindref="member">mapTxLockReqRejected</ref>.count(inv.<ref refid="class_c_inv_1abfa04c38e9c0def9a2b09a9c43929744" kindref="member">hash</ref>);</highlight></codeline>
<codeline lineno="2394"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="protocol_8h_1ac36f475ca5b446f4fde4c9b90bec77c8a9d087eae96b6c836c7eb63693b8b7483" kindref="member">MSG_TXLOCK_VOTE</ref>:</highlight></codeline>
<codeline lineno="2395"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="instantx_8cpp_1ae3472b834d4943b93811c2051c2d6d19" kindref="member">mapTxLockVote</ref>.count(inv.<ref refid="class_c_inv_1abfa04c38e9c0def9a2b09a9c43929744" kindref="member">hash</ref>);</highlight></codeline>
<codeline lineno="2396"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="protocol_8h_1ac36f475ca5b446f4fde4c9b90bec77c8abacdb1618207a44c1301ae59acf7f5d8" kindref="member">MSG_SPORK</ref>:</highlight></codeline>
<codeline lineno="2397"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="spork_8cpp_1af58b736428e7bc0e4a7fc590f2da8d2e" kindref="member">mapSporks</ref>.count(inv.<ref refid="class_c_inv_1abfa04c38e9c0def9a2b09a9c43929744" kindref="member">hash</ref>);</highlight></codeline>
<codeline lineno="2398"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="protocol_8h_1ac36f475ca5b446f4fde4c9b90bec77c8ad6098a517061632608c4e08e6f2b98a3" kindref="member">MSG_STORMNODE_WINNER</ref>:</highlight></codeline>
<codeline lineno="2399"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="stormnode-payments_8cpp_1a1d528b1b067a2f669dfd90c513a97116" kindref="member">stormnodePayments</ref>.<ref refid="class_c_stormnode_payments_1a2227618f68b1655073c17d4b2ffe1c56" kindref="member">mapStormnodePayeeVotes</ref>.count(inv.<ref refid="class_c_inv_1abfa04c38e9c0def9a2b09a9c43929744" kindref="member">hash</ref>))<sp/>{</highlight></codeline>
<codeline lineno="2400"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stormnode-sync_8cpp_1a4233fda53cfb60fd6ba208d981ac3fe7" kindref="member">stormnodeSync</ref>.<ref refid="class_c_stormnode_sync_1a686a36163137e9079365e7fd0ede826c" kindref="member">AddedStormnodeWinner</ref>(inv.<ref refid="class_c_inv_1abfa04c38e9c0def9a2b09a9c43929744" kindref="member">hash</ref>);</highlight></codeline>
<codeline lineno="2401"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2402"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2403"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2404"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="protocol_8h_1ac36f475ca5b446f4fde4c9b90bec77c8a0a62cfc215f661f4fa91bb326caaa6ab" kindref="member">MSG_BUDGET_VOTE</ref>:</highlight></codeline>
<codeline lineno="2405"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="stormnode-budget_8cpp_1ad9842d355854ad5602728a96cf684706" kindref="member">budget</ref>.<ref refid="class_c_budget_manager_1af729951208566289252458a01ed9fc7a" kindref="member">mapSeenStormnodeBudgetVotes</ref>.count(inv.<ref refid="class_c_inv_1abfa04c38e9c0def9a2b09a9c43929744" kindref="member">hash</ref>))<sp/>{</highlight></codeline>
<codeline lineno="2406"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stormnode-sync_8cpp_1a4233fda53cfb60fd6ba208d981ac3fe7" kindref="member">stormnodeSync</ref>.<ref refid="class_c_stormnode_sync_1af200f11664c64e5256ad77bd0465b634" kindref="member">AddedBudgetItem</ref>(inv.<ref refid="class_c_inv_1abfa04c38e9c0def9a2b09a9c43929744" kindref="member">hash</ref>);</highlight></codeline>
<codeline lineno="2407"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2408"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2409"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2410"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="protocol_8h_1ac36f475ca5b446f4fde4c9b90bec77c8a20193d1745405323aea6a11346dde763" kindref="member">MSG_BUDGET_PROPOSAL</ref>:</highlight></codeline>
<codeline lineno="2411"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="stormnode-budget_8cpp_1ad9842d355854ad5602728a96cf684706" kindref="member">budget</ref>.<ref refid="class_c_budget_manager_1a5336c99bc4c72c185de0391165a67159" kindref="member">mapSeenStormnodeBudgetProposals</ref>.count(inv.<ref refid="class_c_inv_1abfa04c38e9c0def9a2b09a9c43929744" kindref="member">hash</ref>))<sp/>{</highlight></codeline>
<codeline lineno="2412"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stormnode-sync_8cpp_1a4233fda53cfb60fd6ba208d981ac3fe7" kindref="member">stormnodeSync</ref>.<ref refid="class_c_stormnode_sync_1af200f11664c64e5256ad77bd0465b634" kindref="member">AddedBudgetItem</ref>(inv.<ref refid="class_c_inv_1abfa04c38e9c0def9a2b09a9c43929744" kindref="member">hash</ref>);</highlight></codeline>
<codeline lineno="2413"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2414"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2415"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2416"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="protocol_8h_1ac36f475ca5b446f4fde4c9b90bec77c8a94c78af7040bfb89864d74fcf75bec88" kindref="member">MSG_BUDGET_FINALIZED_VOTE</ref>:</highlight></codeline>
<codeline lineno="2417"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="stormnode-budget_8cpp_1ad9842d355854ad5602728a96cf684706" kindref="member">budget</ref>.<ref refid="class_c_budget_manager_1aecbf6ad23e6f6044672d5619d3e7c40d" kindref="member">mapSeenFinalizedBudgetVotes</ref>.count(inv.<ref refid="class_c_inv_1abfa04c38e9c0def9a2b09a9c43929744" kindref="member">hash</ref>))<sp/>{</highlight></codeline>
<codeline lineno="2418"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stormnode-sync_8cpp_1a4233fda53cfb60fd6ba208d981ac3fe7" kindref="member">stormnodeSync</ref>.<ref refid="class_c_stormnode_sync_1af200f11664c64e5256ad77bd0465b634" kindref="member">AddedBudgetItem</ref>(inv.<ref refid="class_c_inv_1abfa04c38e9c0def9a2b09a9c43929744" kindref="member">hash</ref>);</highlight></codeline>
<codeline lineno="2419"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2420"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2421"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2422"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="protocol_8h_1ac36f475ca5b446f4fde4c9b90bec77c8ac017cd4bf4df999290168e35bbec641d" kindref="member">MSG_BUDGET_FINALIZED</ref>:</highlight></codeline>
<codeline lineno="2423"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="stormnode-budget_8cpp_1ad9842d355854ad5602728a96cf684706" kindref="member">budget</ref>.<ref refid="class_c_budget_manager_1a289e14968fc776b8c0570b03ea8c8ecd" kindref="member">mapSeenFinalizedBudgets</ref>.count(inv.<ref refid="class_c_inv_1abfa04c38e9c0def9a2b09a9c43929744" kindref="member">hash</ref>))<sp/>{</highlight></codeline>
<codeline lineno="2424"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stormnode-sync_8cpp_1a4233fda53cfb60fd6ba208d981ac3fe7" kindref="member">stormnodeSync</ref>.<ref refid="class_c_stormnode_sync_1af200f11664c64e5256ad77bd0465b634" kindref="member">AddedBudgetItem</ref>(inv.<ref refid="class_c_inv_1abfa04c38e9c0def9a2b09a9c43929744" kindref="member">hash</ref>);</highlight></codeline>
<codeline lineno="2425"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2426"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2427"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2428"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="protocol_8h_1ac36f475ca5b446f4fde4c9b90bec77c8ab71287146f20951917e47c06023ae400" kindref="member">MSG_STORMNODE_ANNOUNCE</ref>:</highlight></codeline>
<codeline lineno="2429"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="stormnodeman_8cpp_1a1e28814877e5fb4ed8113e3621ca13ff" kindref="member">snodeman</ref>.<ref refid="class_c_stormnode_man_1a320b85dcbbc8f01a412c96b23bca5424" kindref="member">mapSeenStormnodeBroadcast</ref>.count(inv.<ref refid="class_c_inv_1abfa04c38e9c0def9a2b09a9c43929744" kindref="member">hash</ref>))<sp/>{</highlight></codeline>
<codeline lineno="2430"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stormnode-sync_8cpp_1a4233fda53cfb60fd6ba208d981ac3fe7" kindref="member">stormnodeSync</ref>.<ref refid="class_c_stormnode_sync_1ad9e9ad7392c3fa1ec0af4b178b3c62c0" kindref="member">AddedStormnodeList</ref>(inv.<ref refid="class_c_inv_1abfa04c38e9c0def9a2b09a9c43929744" kindref="member">hash</ref>);</highlight></codeline>
<codeline lineno="2431"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2432"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2433"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2434"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="protocol_8h_1ac36f475ca5b446f4fde4c9b90bec77c8a7db86e0cc80a2f0ab7ddcaeccd68bdd4" kindref="member">MSG_STORMNODE_PING</ref>:</highlight></codeline>
<codeline lineno="2435"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="stormnodeman_8cpp_1a1e28814877e5fb4ed8113e3621ca13ff" kindref="member">snodeman</ref>.<ref refid="class_c_stormnode_man_1a9d4e8bbd492630f16b61eec58b722a86" kindref="member">mapSeenStormnodePing</ref>.count(inv.<ref refid="class_c_inv_1abfa04c38e9c0def9a2b09a9c43929744" kindref="member">hash</ref>);</highlight></codeline>
<codeline lineno="2436"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2437"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Don&apos;t<sp/>know<sp/>what<sp/>it<sp/>is,<sp/>just<sp/>say<sp/>we<sp/>already<sp/>got<sp/>one</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2438"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2439"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2440"><highlight class="normal"></highlight></codeline>
<codeline lineno="2441"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>ProcessGetData(<ref refid="class_c_node" kindref="compound">CNode</ref>*<sp/>pfrom)</highlight></codeline>
<codeline lineno="2442"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2443"><highlight class="normal"><sp/><sp/><sp/><sp/>std::deque&lt;CInv&gt;::iterator<sp/>it<sp/>=<sp/>pfrom-&gt;<ref refid="class_c_node_1a9649c1f27ff0d8f0ba89eb1ea5bee139" kindref="member">vRecvGetData</ref>.begin();</highlight></codeline>
<codeline lineno="2444"><highlight class="normal"></highlight></codeline>
<codeline lineno="2445"><highlight class="normal"><sp/><sp/><sp/><sp/>vector&lt;CInv&gt;<sp/>vNotFound;</highlight></codeline>
<codeline lineno="2446"><highlight class="normal"></highlight></codeline>
<codeline lineno="2447"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="sync_8h_1a911fe23f057c2fe5aad629162d6c99d0" kindref="member">LOCK</ref>(cs_main);</highlight></codeline>
<codeline lineno="2448"><highlight class="normal"></highlight></codeline>
<codeline lineno="2449"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(it<sp/>!=<sp/>pfrom-&gt;<ref refid="class_c_node_1a9649c1f27ff0d8f0ba89eb1ea5bee139" kindref="member">vRecvGetData</ref>.end())<sp/>{</highlight></codeline>
<codeline lineno="2450"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Don&apos;t<sp/>bother<sp/>if<sp/>send<sp/>buffer<sp/>is<sp/>too<sp/>full<sp/>to<sp/>respond<sp/>anyway</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2451"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(pfrom-&gt;<ref refid="class_c_node_1a3c99b7e2b0e53feb58f6859453456f74" kindref="member">nSendSize</ref><sp/>&gt;=<sp/><ref refid="net_8h_1a13f289d6233bd32b78a38793f76bdccb" kindref="member">SendBufferSize</ref>())</highlight></codeline>
<codeline lineno="2452"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2453"><highlight class="normal"></highlight></codeline>
<codeline lineno="2454"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_c_inv" kindref="compound">CInv</ref><sp/>&amp;inv<sp/>=<sp/>*it;</highlight></codeline>
<codeline lineno="2455"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2456"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>boost::this_thread::interruption_point();</highlight></codeline>
<codeline lineno="2457"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>it++;</highlight></codeline>
<codeline lineno="2458"><highlight class="normal"></highlight></codeline>
<codeline lineno="2459"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(inv.<ref refid="class_c_inv_1a2da8a26c6b8824011e3144459d278c75" kindref="member">type</ref><sp/>==<sp/><ref refid="protocol_8h_1ac36f475ca5b446f4fde4c9b90bec77c8a4cae15fd207d555331995cd5c57689c1" kindref="member">MSG_BLOCK</ref><sp/>||<sp/>inv.<ref refid="class_c_inv_1a2da8a26c6b8824011e3144459d278c75" kindref="member">type</ref><sp/>==<sp/><ref refid="protocol_8h_1ac36f475ca5b446f4fde4c9b90bec77c8a11f393e43f75b471170b96ce59a07d33" kindref="member">MSG_FILTERED_BLOCK</ref>)</highlight></codeline>
<codeline lineno="2460"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2461"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Send<sp/>block<sp/>from<sp/>disk</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2462"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>map&lt;uint256,<sp/>CBlockIndex*&gt;::iterator<sp/>mi<sp/>=<sp/>mapBlockIndex.find(inv.<ref refid="class_c_inv_1abfa04c38e9c0def9a2b09a9c43929744" kindref="member">hash</ref>);</highlight></codeline>
<codeline lineno="2463"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mi<sp/>!=<sp/>mapBlockIndex.end())</highlight></codeline>
<codeline lineno="2464"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2465"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_c_block" kindref="compound">CBlock</ref><sp/><ref refid="core_8h_1ace80c27428e237fe24f54ae915a36133" kindref="member">block</ref>;</highlight></codeline>
<codeline lineno="2466"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>block.<ref refid="class_c_block_1a77a1b1e9902e1e557d762f5a5f325cd8" kindref="member">ReadFromDisk</ref>((*mi).second);</highlight></codeline>
<codeline lineno="2467"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pfrom-&gt;<ref refid="class_c_node_1a204fda3d33404cb37698c085b1583ab2" kindref="member">PushMessage</ref>(</highlight><highlight class="stringliteral">&quot;block&quot;</highlight><highlight class="normal">,<sp/>block);</highlight></codeline>
<codeline lineno="2468"><highlight class="normal"></highlight></codeline>
<codeline lineno="2469"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Trigger<sp/>them<sp/>to<sp/>send<sp/>a<sp/>getblocks<sp/>request<sp/>for<sp/>the<sp/>next<sp/>batch<sp/>of<sp/>inventory</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2470"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(inv.<ref refid="class_c_inv_1abfa04c38e9c0def9a2b09a9c43929744" kindref="member">hash</ref><sp/>==<sp/>pfrom-&gt;<ref refid="class_c_node_1a1a1c0d94de0197c5c4abf5a8d13364f3" kindref="member">hashContinue</ref>)</highlight></codeline>
<codeline lineno="2471"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2472"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Bypass<sp/>PushInventory,<sp/>this<sp/>must<sp/>send<sp/>even<sp/>if<sp/>redundant,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2473"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>and<sp/>we<sp/>want<sp/>it<sp/>right<sp/>after<sp/>the<sp/>last<sp/>block<sp/>so<sp/>they<sp/>don&apos;t</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2474"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>wait<sp/>for<sp/>other<sp/>stuff<sp/>first.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2475"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vector&lt;CInv&gt;<sp/>vInv;</highlight></codeline>
<codeline lineno="2476"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vInv.push_back(<ref refid="class_c_inv" kindref="compound">CInv</ref>(<ref refid="protocol_8h_1ac36f475ca5b446f4fde4c9b90bec77c8a4cae15fd207d555331995cd5c57689c1" kindref="member">MSG_BLOCK</ref>,<sp/>hashBestChain));</highlight></codeline>
<codeline lineno="2477"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pfrom-&gt;<ref refid="class_c_node_1a204fda3d33404cb37698c085b1583ab2" kindref="member">PushMessage</ref>(</highlight><highlight class="stringliteral">&quot;inv&quot;</highlight><highlight class="normal">,<sp/>vInv);</highlight></codeline>
<codeline lineno="2478"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pfrom-&gt;<ref refid="class_c_node_1a1a1c0d94de0197c5c4abf5a8d13364f3" kindref="member">hashContinue</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2479"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2480"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2481"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2482"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(inv.<ref refid="class_c_inv_1a9259d1e8d828c6b6ea729d36d16cd84f" kindref="member">IsKnownType</ref>())</highlight></codeline>
<codeline lineno="2483"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2484"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="util_8cpp_1a2ba7badc843121dde40a6f109d224a42" kindref="member">fDebug</ref>)<sp/><ref refid="util_8h_1afc02c0a4258fedfb316be612bb659ba8" kindref="member">LogPrintf</ref>(</highlight><highlight class="stringliteral">&quot;ProcessGetData<sp/>--<sp/>Starting<sp/>\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2485"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Send<sp/>stream<sp/>from<sp/>relay<sp/>memory</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2486"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>pushed<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2487"><highlight class="normal"></highlight></codeline>
<codeline lineno="2488"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2489"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2490"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>LOCK(cs_mapRelay);</highlight></codeline>
<codeline lineno="2491"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>map&lt;CInv,<sp/>CDataStream&gt;::iterator<sp/>mi<sp/>=<sp/>mapRelay.find(inv);</highlight></codeline>
<codeline lineno="2492"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(mi<sp/>!=<sp/>mapRelay.end())<sp/>{</highlight></codeline>
<codeline lineno="2493"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pfrom-&gt;PushMessage(inv.GetCommand(),<sp/>(*mi).second);</highlight></codeline>
<codeline lineno="2494"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pushed<sp/>=<sp/>true;</highlight></codeline>
<codeline lineno="2495"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2496"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2497"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2498"><highlight class="normal"></highlight></codeline>
<codeline lineno="2499"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!pushed<sp/>&amp;&amp;<sp/>inv.<ref refid="class_c_inv_1a2da8a26c6b8824011e3144459d278c75" kindref="member">type</ref><sp/>==<sp/><ref refid="protocol_8h_1ac36f475ca5b446f4fde4c9b90bec77c8a0494732fc92c975f58783e224585c473" kindref="member">MSG_TX</ref>)<sp/>{</highlight></codeline>
<codeline lineno="2500"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>txHash<sp/>=<sp/>inv.<ref refid="class_c_inv_1abfa04c38e9c0def9a2b09a9c43929744" kindref="member">hash</ref>.<ref refid="classbase__uint_1ac3080a72402cadf28dbc9f9b69cc60be" kindref="member">ToString</ref>().c_str();</highlight></codeline>
<codeline lineno="2501"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="util_8cpp_1a2ba7badc843121dde40a6f109d224a42" kindref="member">fDebug</ref>)<sp/><ref refid="util_8h_1afc02c0a4258fedfb316be612bb659ba8" kindref="member">LogPrintf</ref>(</highlight><highlight class="stringliteral">&quot;ProcessGetData<sp/>--<sp/>txHash<sp/>%d<sp/>\n&quot;</highlight><highlight class="normal">,<sp/>txHash);</highlight></codeline>
<codeline lineno="2502"><highlight class="normal"></highlight></codeline>
<codeline lineno="2503"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="sandstorm_8cpp_1ad2c083d07766489aaa2a282af5545eb5" kindref="member">mapSandstormBroadcastTxes</ref>.count(inv.<ref refid="class_c_inv_1abfa04c38e9c0def9a2b09a9c43929744" kindref="member">hash</ref>)){</highlight></codeline>
<codeline lineno="2504"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_c_data_stream" kindref="compound">CDataStream</ref><sp/>ss(<ref refid="serialize_8h_1a6b7b47dd702d9e331586d485013fd1eaa652754eeaf79fba4fcf4c18597a6961c" kindref="member">SER_NETWORK</ref>,<sp/>PROTOCOL_VERSION);</highlight></codeline>
<codeline lineno="2505"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ss.reserve(1000);</highlight></codeline>
<codeline lineno="2506"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ss<sp/>&lt;&lt;</highlight></codeline>
<codeline lineno="2507"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="sandstorm_8cpp_1ad2c083d07766489aaa2a282af5545eb5" kindref="member">mapSandstormBroadcastTxes</ref>[inv.<ref refid="class_c_inv_1abfa04c38e9c0def9a2b09a9c43929744" kindref="member">hash</ref>].tx<sp/>&lt;&lt;</highlight></codeline>
<codeline lineno="2508"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="sandstorm_8cpp_1ad2c083d07766489aaa2a282af5545eb5" kindref="member">mapSandstormBroadcastTxes</ref>[inv.<ref refid="class_c_inv_1abfa04c38e9c0def9a2b09a9c43929744" kindref="member">hash</ref>].vin<sp/>&lt;&lt;</highlight></codeline>
<codeline lineno="2509"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="sandstorm_8cpp_1ad2c083d07766489aaa2a282af5545eb5" kindref="member">mapSandstormBroadcastTxes</ref>[inv.<ref refid="class_c_inv_1abfa04c38e9c0def9a2b09a9c43929744" kindref="member">hash</ref>].vchSig<sp/>&lt;&lt;</highlight></codeline>
<codeline lineno="2510"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="sandstorm_8cpp_1ad2c083d07766489aaa2a282af5545eb5" kindref="member">mapSandstormBroadcastTxes</ref>[inv.<ref refid="class_c_inv_1abfa04c38e9c0def9a2b09a9c43929744" kindref="member">hash</ref>].sigTime;</highlight></codeline>
<codeline lineno="2511"><highlight class="normal"></highlight></codeline>
<codeline lineno="2512"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pfrom-&gt;<ref refid="class_c_node_1a204fda3d33404cb37698c085b1583ab2" kindref="member">PushMessage</ref>(</highlight><highlight class="stringliteral">&quot;sstx&quot;</highlight><highlight class="normal">,<sp/>ss);</highlight></codeline>
<codeline lineno="2513"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pushed<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2514"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="2515"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_c_transaction" kindref="compound">CTransaction</ref><sp/>tx;</highlight></codeline>
<codeline lineno="2516"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="main_8cpp_1a52890038ef379d29a1a8f3bd20dbe088" kindref="member">mempool</ref>.<ref refid="class_c_tx_mem_pool_1a8c19232d17e668c6690721b0f5088960" kindref="member">lookup</ref>(inv.<ref refid="class_c_inv_1abfa04c38e9c0def9a2b09a9c43929744" kindref="member">hash</ref>,<sp/>tx))<sp/>{</highlight></codeline>
<codeline lineno="2517"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_c_data_stream" kindref="compound">CDataStream</ref><sp/>ss(<ref refid="serialize_8h_1a6b7b47dd702d9e331586d485013fd1eaa652754eeaf79fba4fcf4c18597a6961c" kindref="member">SER_NETWORK</ref>,<sp/>PROTOCOL_VERSION);</highlight></codeline>
<codeline lineno="2518"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ss.reserve(1000);</highlight></codeline>
<codeline lineno="2519"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ss<sp/>&lt;&lt;<sp/>tx;</highlight></codeline>
<codeline lineno="2520"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pfrom-&gt;<ref refid="class_c_node_1a204fda3d33404cb37698c085b1583ab2" kindref="member">PushMessage</ref>(</highlight><highlight class="stringliteral">&quot;tx&quot;</highlight><highlight class="normal">,<sp/>ss);</highlight></codeline>
<codeline lineno="2521"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pushed<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2522"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2523"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2524"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2525"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!pushed<sp/>&amp;&amp;<sp/>inv.<ref refid="class_c_inv_1a2da8a26c6b8824011e3144459d278c75" kindref="member">type</ref><sp/>==<sp/><ref refid="protocol_8h_1ac36f475ca5b446f4fde4c9b90bec77c8a9d087eae96b6c836c7eb63693b8b7483" kindref="member">MSG_TXLOCK_VOTE</ref>)<sp/>{</highlight></codeline>
<codeline lineno="2526"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="instantx_8cpp_1ae3472b834d4943b93811c2051c2d6d19" kindref="member">mapTxLockVote</ref>.count(inv.<ref refid="class_c_inv_1abfa04c38e9c0def9a2b09a9c43929744" kindref="member">hash</ref>)){</highlight></codeline>
<codeline lineno="2527"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_c_data_stream" kindref="compound">CDataStream</ref><sp/>ss(<ref refid="serialize_8h_1a6b7b47dd702d9e331586d485013fd1eaa652754eeaf79fba4fcf4c18597a6961c" kindref="member">SER_NETWORK</ref>,<sp/>PROTOCOL_VERSION);</highlight></codeline>
<codeline lineno="2528"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ss.reserve(1000);</highlight></codeline>
<codeline lineno="2529"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ss<sp/>&lt;&lt;<sp/><ref refid="instantx_8cpp_1ae3472b834d4943b93811c2051c2d6d19" kindref="member">mapTxLockVote</ref>[inv.<ref refid="class_c_inv_1abfa04c38e9c0def9a2b09a9c43929744" kindref="member">hash</ref>];</highlight></codeline>
<codeline lineno="2530"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pfrom-&gt;<ref refid="class_c_node_1a204fda3d33404cb37698c085b1583ab2" kindref="member">PushMessage</ref>(</highlight><highlight class="stringliteral">&quot;txlvote&quot;</highlight><highlight class="normal">,<sp/>ss);</highlight></codeline>
<codeline lineno="2531"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pushed<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2532"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2533"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2534"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!pushed<sp/>&amp;&amp;<sp/>inv.<ref refid="class_c_inv_1a2da8a26c6b8824011e3144459d278c75" kindref="member">type</ref><sp/>==<sp/><ref refid="protocol_8h_1ac36f475ca5b446f4fde4c9b90bec77c8a802e4d970385efb01469f48db2cf1e06" kindref="member">MSG_TXLOCK_REQUEST</ref>)<sp/>{</highlight></codeline>
<codeline lineno="2535"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="instantx_8cpp_1acc1c1f8ae02ec2b4c621b64291033927" kindref="member">mapTxLockReq</ref>.count(inv.<ref refid="class_c_inv_1abfa04c38e9c0def9a2b09a9c43929744" kindref="member">hash</ref>)){</highlight></codeline>
<codeline lineno="2536"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_c_data_stream" kindref="compound">CDataStream</ref><sp/>ss(<ref refid="serialize_8h_1a6b7b47dd702d9e331586d485013fd1eaa652754eeaf79fba4fcf4c18597a6961c" kindref="member">SER_NETWORK</ref>,<sp/>PROTOCOL_VERSION);</highlight></codeline>
<codeline lineno="2537"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ss.reserve(1000);</highlight></codeline>
<codeline lineno="2538"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ss<sp/>&lt;&lt;<sp/><ref refid="instantx_8cpp_1acc1c1f8ae02ec2b4c621b64291033927" kindref="member">mapTxLockReq</ref>[inv.<ref refid="class_c_inv_1abfa04c38e9c0def9a2b09a9c43929744" kindref="member">hash</ref>];</highlight></codeline>
<codeline lineno="2539"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pfrom-&gt;<ref refid="class_c_node_1a204fda3d33404cb37698c085b1583ab2" kindref="member">PushMessage</ref>(</highlight><highlight class="stringliteral">&quot;txlreq&quot;</highlight><highlight class="normal">,<sp/>ss);</highlight></codeline>
<codeline lineno="2540"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pushed<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2541"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2542"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2543"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!pushed<sp/>&amp;&amp;<sp/>inv.<ref refid="class_c_inv_1a2da8a26c6b8824011e3144459d278c75" kindref="member">type</ref><sp/>==<sp/><ref refid="protocol_8h_1ac36f475ca5b446f4fde4c9b90bec77c8abacdb1618207a44c1301ae59acf7f5d8" kindref="member">MSG_SPORK</ref>)<sp/>{</highlight></codeline>
<codeline lineno="2544"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="spork_8cpp_1af58b736428e7bc0e4a7fc590f2da8d2e" kindref="member">mapSporks</ref>.count(inv.<ref refid="class_c_inv_1abfa04c38e9c0def9a2b09a9c43929744" kindref="member">hash</ref>)){</highlight></codeline>
<codeline lineno="2545"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_c_data_stream" kindref="compound">CDataStream</ref><sp/>ss(<ref refid="serialize_8h_1a6b7b47dd702d9e331586d485013fd1eaa652754eeaf79fba4fcf4c18597a6961c" kindref="member">SER_NETWORK</ref>,<sp/>PROTOCOL_VERSION);</highlight></codeline>
<codeline lineno="2546"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ss.reserve(1000);</highlight></codeline>
<codeline lineno="2547"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ss<sp/>&lt;&lt;<sp/><ref refid="spork_8cpp_1af58b736428e7bc0e4a7fc590f2da8d2e" kindref="member">mapSporks</ref>[inv.<ref refid="class_c_inv_1abfa04c38e9c0def9a2b09a9c43929744" kindref="member">hash</ref>];</highlight></codeline>
<codeline lineno="2548"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pfrom-&gt;<ref refid="class_c_node_1a204fda3d33404cb37698c085b1583ab2" kindref="member">PushMessage</ref>(</highlight><highlight class="stringliteral">&quot;spork&quot;</highlight><highlight class="normal">,<sp/>ss);</highlight></codeline>
<codeline lineno="2549"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pushed<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2550"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2551"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2552"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!pushed<sp/>&amp;&amp;<sp/>inv.<ref refid="class_c_inv_1a2da8a26c6b8824011e3144459d278c75" kindref="member">type</ref><sp/>==<sp/><ref refid="protocol_8h_1ac36f475ca5b446f4fde4c9b90bec77c8ad6098a517061632608c4e08e6f2b98a3" kindref="member">MSG_STORMNODE_WINNER</ref>)<sp/>{</highlight></codeline>
<codeline lineno="2553"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="stormnode-payments_8cpp_1a1d528b1b067a2f669dfd90c513a97116" kindref="member">stormnodePayments</ref>.<ref refid="class_c_stormnode_payments_1a2227618f68b1655073c17d4b2ffe1c56" kindref="member">mapStormnodePayeeVotes</ref>.count(inv.<ref refid="class_c_inv_1abfa04c38e9c0def9a2b09a9c43929744" kindref="member">hash</ref>)){</highlight></codeline>
<codeline lineno="2554"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_c_data_stream" kindref="compound">CDataStream</ref><sp/>ss(<ref refid="serialize_8h_1a6b7b47dd702d9e331586d485013fd1eaa652754eeaf79fba4fcf4c18597a6961c" kindref="member">SER_NETWORK</ref>,<sp/>PROTOCOL_VERSION);</highlight></codeline>
<codeline lineno="2555"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ss.reserve(1000);</highlight></codeline>
<codeline lineno="2556"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ss<sp/>&lt;&lt;<sp/><ref refid="stormnode-payments_8cpp_1a1d528b1b067a2f669dfd90c513a97116" kindref="member">stormnodePayments</ref>.<ref refid="class_c_stormnode_payments_1a2227618f68b1655073c17d4b2ffe1c56" kindref="member">mapStormnodePayeeVotes</ref>[inv.<ref refid="class_c_inv_1abfa04c38e9c0def9a2b09a9c43929744" kindref="member">hash</ref>];</highlight></codeline>
<codeline lineno="2557"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pfrom-&gt;<ref refid="class_c_node_1a204fda3d33404cb37698c085b1583ab2" kindref="member">PushMessage</ref>(</highlight><highlight class="stringliteral">&quot;snw&quot;</highlight><highlight class="normal">,<sp/>ss);</highlight></codeline>
<codeline lineno="2558"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pushed<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2559"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2560"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2561"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!pushed<sp/>&amp;&amp;<sp/>inv.<ref refid="class_c_inv_1a2da8a26c6b8824011e3144459d278c75" kindref="member">type</ref><sp/>==<sp/><ref refid="protocol_8h_1ac36f475ca5b446f4fde4c9b90bec77c8a0a62cfc215f661f4fa91bb326caaa6ab" kindref="member">MSG_BUDGET_VOTE</ref>)<sp/>{</highlight></codeline>
<codeline lineno="2562"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="stormnode-budget_8cpp_1ad9842d355854ad5602728a96cf684706" kindref="member">budget</ref>.<ref refid="class_c_budget_manager_1af729951208566289252458a01ed9fc7a" kindref="member">mapSeenStormnodeBudgetVotes</ref>.count(inv.<ref refid="class_c_inv_1abfa04c38e9c0def9a2b09a9c43929744" kindref="member">hash</ref>)){</highlight></codeline>
<codeline lineno="2563"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_c_data_stream" kindref="compound">CDataStream</ref><sp/>ss(<ref refid="serialize_8h_1a6b7b47dd702d9e331586d485013fd1eaa652754eeaf79fba4fcf4c18597a6961c" kindref="member">SER_NETWORK</ref>,<sp/>PROTOCOL_VERSION);</highlight></codeline>
<codeline lineno="2564"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ss.reserve(1000);</highlight></codeline>
<codeline lineno="2565"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ss<sp/>&lt;&lt;<sp/><ref refid="stormnode-budget_8cpp_1ad9842d355854ad5602728a96cf684706" kindref="member">budget</ref>.<ref refid="class_c_budget_manager_1af729951208566289252458a01ed9fc7a" kindref="member">mapSeenStormnodeBudgetVotes</ref>[inv.<ref refid="class_c_inv_1abfa04c38e9c0def9a2b09a9c43929744" kindref="member">hash</ref>];</highlight></codeline>
<codeline lineno="2566"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pfrom-&gt;<ref refid="class_c_node_1a204fda3d33404cb37698c085b1583ab2" kindref="member">PushMessage</ref>(</highlight><highlight class="stringliteral">&quot;svote&quot;</highlight><highlight class="normal">,<sp/>ss);</highlight></codeline>
<codeline lineno="2567"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pushed<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2568"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2569"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2570"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!pushed<sp/>&amp;&amp;<sp/>inv.<ref refid="class_c_inv_1a2da8a26c6b8824011e3144459d278c75" kindref="member">type</ref><sp/>==<sp/><ref refid="protocol_8h_1ac36f475ca5b446f4fde4c9b90bec77c8a20193d1745405323aea6a11346dde763" kindref="member">MSG_BUDGET_PROPOSAL</ref>)<sp/>{</highlight></codeline>
<codeline lineno="2571"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="stormnode-budget_8cpp_1ad9842d355854ad5602728a96cf684706" kindref="member">budget</ref>.<ref refid="class_c_budget_manager_1a5336c99bc4c72c185de0391165a67159" kindref="member">mapSeenStormnodeBudgetProposals</ref>.count(inv.<ref refid="class_c_inv_1abfa04c38e9c0def9a2b09a9c43929744" kindref="member">hash</ref>)){</highlight></codeline>
<codeline lineno="2572"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_c_data_stream" kindref="compound">CDataStream</ref><sp/>ss(<ref refid="serialize_8h_1a6b7b47dd702d9e331586d485013fd1eaa652754eeaf79fba4fcf4c18597a6961c" kindref="member">SER_NETWORK</ref>,<sp/>PROTOCOL_VERSION);</highlight></codeline>
<codeline lineno="2573"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ss.reserve(1000);</highlight></codeline>
<codeline lineno="2574"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ss<sp/>&lt;&lt;<sp/><ref refid="stormnode-budget_8cpp_1ad9842d355854ad5602728a96cf684706" kindref="member">budget</ref>.<ref refid="class_c_budget_manager_1a5336c99bc4c72c185de0391165a67159" kindref="member">mapSeenStormnodeBudgetProposals</ref>[inv.<ref refid="class_c_inv_1abfa04c38e9c0def9a2b09a9c43929744" kindref="member">hash</ref>];</highlight></codeline>
<codeline lineno="2575"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pfrom-&gt;<ref refid="class_c_node_1a204fda3d33404cb37698c085b1583ab2" kindref="member">PushMessage</ref>(</highlight><highlight class="stringliteral">&quot;sprop&quot;</highlight><highlight class="normal">,<sp/>ss);</highlight></codeline>
<codeline lineno="2576"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pushed<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2577"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2578"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2579"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="2580"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!pushed<sp/>&amp;&amp;<sp/>inv.<ref refid="class_c_inv_1a2da8a26c6b8824011e3144459d278c75" kindref="member">type</ref><sp/>==<sp/><ref refid="protocol_8h_1ac36f475ca5b446f4fde4c9b90bec77c8a94c78af7040bfb89864d74fcf75bec88" kindref="member">MSG_BUDGET_FINALIZED_VOTE</ref>)<sp/>{</highlight></codeline>
<codeline lineno="2581"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="stormnode-budget_8cpp_1ad9842d355854ad5602728a96cf684706" kindref="member">budget</ref>.<ref refid="class_c_budget_manager_1aecbf6ad23e6f6044672d5619d3e7c40d" kindref="member">mapSeenFinalizedBudgetVotes</ref>.count(inv.<ref refid="class_c_inv_1abfa04c38e9c0def9a2b09a9c43929744" kindref="member">hash</ref>)){</highlight></codeline>
<codeline lineno="2582"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_c_data_stream" kindref="compound">CDataStream</ref><sp/>ss(<ref refid="serialize_8h_1a6b7b47dd702d9e331586d485013fd1eaa652754eeaf79fba4fcf4c18597a6961c" kindref="member">SER_NETWORK</ref>,<sp/>PROTOCOL_VERSION);</highlight></codeline>
<codeline lineno="2583"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ss.reserve(1000);</highlight></codeline>
<codeline lineno="2584"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ss<sp/>&lt;&lt;<sp/><ref refid="stormnode-budget_8cpp_1ad9842d355854ad5602728a96cf684706" kindref="member">budget</ref>.<ref refid="class_c_budget_manager_1aecbf6ad23e6f6044672d5619d3e7c40d" kindref="member">mapSeenFinalizedBudgetVotes</ref>[inv.<ref refid="class_c_inv_1abfa04c38e9c0def9a2b09a9c43929744" kindref="member">hash</ref>];</highlight></codeline>
<codeline lineno="2585"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pfrom-&gt;<ref refid="class_c_node_1a204fda3d33404cb37698c085b1583ab2" kindref="member">PushMessage</ref>(</highlight><highlight class="stringliteral">&quot;fbvote&quot;</highlight><highlight class="normal">,<sp/>ss);</highlight></codeline>
<codeline lineno="2586"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pushed<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2587"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2588"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2589"><highlight class="normal"></highlight></codeline>
<codeline lineno="2590"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!pushed<sp/>&amp;&amp;<sp/>inv.<ref refid="class_c_inv_1a2da8a26c6b8824011e3144459d278c75" kindref="member">type</ref><sp/>==<sp/><ref refid="protocol_8h_1ac36f475ca5b446f4fde4c9b90bec77c8ac017cd4bf4df999290168e35bbec641d" kindref="member">MSG_BUDGET_FINALIZED</ref>)<sp/>{</highlight></codeline>
<codeline lineno="2591"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="stormnode-budget_8cpp_1ad9842d355854ad5602728a96cf684706" kindref="member">budget</ref>.<ref refid="class_c_budget_manager_1a289e14968fc776b8c0570b03ea8c8ecd" kindref="member">mapSeenFinalizedBudgets</ref>.count(inv.<ref refid="class_c_inv_1abfa04c38e9c0def9a2b09a9c43929744" kindref="member">hash</ref>)){</highlight></codeline>
<codeline lineno="2592"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_c_data_stream" kindref="compound">CDataStream</ref><sp/>ss(<ref refid="serialize_8h_1a6b7b47dd702d9e331586d485013fd1eaa652754eeaf79fba4fcf4c18597a6961c" kindref="member">SER_NETWORK</ref>,<sp/>PROTOCOL_VERSION);</highlight></codeline>
<codeline lineno="2593"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ss.reserve(1000);</highlight></codeline>
<codeline lineno="2594"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ss<sp/>&lt;&lt;<sp/><ref refid="stormnode-budget_8cpp_1ad9842d355854ad5602728a96cf684706" kindref="member">budget</ref>.<ref refid="class_c_budget_manager_1a289e14968fc776b8c0570b03ea8c8ecd" kindref="member">mapSeenFinalizedBudgets</ref>[inv.<ref refid="class_c_inv_1abfa04c38e9c0def9a2b09a9c43929744" kindref="member">hash</ref>];</highlight></codeline>
<codeline lineno="2595"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pfrom-&gt;<ref refid="class_c_node_1a204fda3d33404cb37698c085b1583ab2" kindref="member">PushMessage</ref>(</highlight><highlight class="stringliteral">&quot;fbs&quot;</highlight><highlight class="normal">,<sp/>ss);</highlight></codeline>
<codeline lineno="2596"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pushed<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2597"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2598"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2599"><highlight class="normal"></highlight></codeline>
<codeline lineno="2600"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!pushed<sp/>&amp;&amp;<sp/>inv.<ref refid="class_c_inv_1a2da8a26c6b8824011e3144459d278c75" kindref="member">type</ref><sp/>==<sp/><ref refid="protocol_8h_1ac36f475ca5b446f4fde4c9b90bec77c8ab71287146f20951917e47c06023ae400" kindref="member">MSG_STORMNODE_ANNOUNCE</ref>)<sp/>{</highlight></codeline>
<codeline lineno="2601"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="stormnodeman_8cpp_1a1e28814877e5fb4ed8113e3621ca13ff" kindref="member">snodeman</ref>.<ref refid="class_c_stormnode_man_1a320b85dcbbc8f01a412c96b23bca5424" kindref="member">mapSeenStormnodeBroadcast</ref>.count(inv.<ref refid="class_c_inv_1abfa04c38e9c0def9a2b09a9c43929744" kindref="member">hash</ref>)){</highlight></codeline>
<codeline lineno="2602"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>fRequested<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;<sp/></highlight><highlight class="comment">//<sp/>Requested<sp/>full<sp/>stormnode<sp/>list</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2603"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_c_data_stream" kindref="compound">CDataStream</ref><sp/>ss(<ref refid="serialize_8h_1a6b7b47dd702d9e331586d485013fd1eaa652754eeaf79fba4fcf4c18597a6961c" kindref="member">SER_NETWORK</ref>,<sp/>PROTOCOL_VERSION);</highlight></codeline>
<codeline lineno="2604"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ss.reserve(1000);</highlight></codeline>
<codeline lineno="2605"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ss<sp/>&lt;&lt;<sp/><ref refid="stormnodeman_8cpp_1a1e28814877e5fb4ed8113e3621ca13ff" kindref="member">snodeman</ref>.<ref refid="class_c_stormnode_man_1a320b85dcbbc8f01a412c96b23bca5424" kindref="member">mapSeenStormnodeBroadcast</ref>[inv.<ref refid="class_c_inv_1abfa04c38e9c0def9a2b09a9c43929744" kindref="member">hash</ref>];</highlight></codeline>
<codeline lineno="2606"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ss<sp/>&lt;&lt;<sp/>fRequested;</highlight></codeline>
<codeline lineno="2607"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pfrom-&gt;<ref refid="class_c_node_1a204fda3d33404cb37698c085b1583ab2" kindref="member">PushMessage</ref>(</highlight><highlight class="stringliteral">&quot;snb&quot;</highlight><highlight class="normal">,<sp/>ss);</highlight></codeline>
<codeline lineno="2608"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pushed<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2609"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2610"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2611"><highlight class="normal"></highlight></codeline>
<codeline lineno="2612"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!pushed<sp/>&amp;&amp;<sp/>inv.<ref refid="class_c_inv_1a2da8a26c6b8824011e3144459d278c75" kindref="member">type</ref><sp/>==<sp/><ref refid="protocol_8h_1ac36f475ca5b446f4fde4c9b90bec77c8a7db86e0cc80a2f0ab7ddcaeccd68bdd4" kindref="member">MSG_STORMNODE_PING</ref>)<sp/>{</highlight></codeline>
<codeline lineno="2613"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="stormnodeman_8cpp_1a1e28814877e5fb4ed8113e3621ca13ff" kindref="member">snodeman</ref>.<ref refid="class_c_stormnode_man_1a9d4e8bbd492630f16b61eec58b722a86" kindref="member">mapSeenStormnodePing</ref>.count(inv.<ref refid="class_c_inv_1abfa04c38e9c0def9a2b09a9c43929744" kindref="member">hash</ref>)){</highlight></codeline>
<codeline lineno="2614"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>fRequested<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;<sp/></highlight><highlight class="comment">//<sp/>Requested<sp/>full<sp/>stormnode<sp/>list</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2615"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_c_data_stream" kindref="compound">CDataStream</ref><sp/>ss(<ref refid="serialize_8h_1a6b7b47dd702d9e331586d485013fd1eaa652754eeaf79fba4fcf4c18597a6961c" kindref="member">SER_NETWORK</ref>,<sp/>PROTOCOL_VERSION);</highlight></codeline>
<codeline lineno="2616"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ss.reserve(1000);</highlight></codeline>
<codeline lineno="2617"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ss<sp/>&lt;&lt;<sp/><ref refid="stormnodeman_8cpp_1a1e28814877e5fb4ed8113e3621ca13ff" kindref="member">snodeman</ref>.<ref refid="class_c_stormnode_man_1a9d4e8bbd492630f16b61eec58b722a86" kindref="member">mapSeenStormnodePing</ref>[inv.<ref refid="class_c_inv_1abfa04c38e9c0def9a2b09a9c43929744" kindref="member">hash</ref>];</highlight></codeline>
<codeline lineno="2618"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ss<sp/>&lt;&lt;<sp/>fRequested;</highlight></codeline>
<codeline lineno="2619"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pfrom-&gt;<ref refid="class_c_node_1a204fda3d33404cb37698c085b1583ab2" kindref="member">PushMessage</ref>(</highlight><highlight class="stringliteral">&quot;snp&quot;</highlight><highlight class="normal">,<sp/>ss);</highlight></codeline>
<codeline lineno="2620"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pushed<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2621"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2622"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2623"><highlight class="normal"></highlight></codeline>
<codeline lineno="2624"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!pushed)<sp/>{</highlight></codeline>
<codeline lineno="2625"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vNotFound.push_back(inv);</highlight></codeline>
<codeline lineno="2626"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2627"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2628"><highlight class="normal"></highlight></codeline>
<codeline lineno="2629"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Track<sp/>requests<sp/>for<sp/>our<sp/>stuff.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2630"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>g_signals.Inventory(inv.<ref refid="class_c_inv_1abfa04c38e9c0def9a2b09a9c43929744" kindref="member">hash</ref>);</highlight></codeline>
<codeline lineno="2631"><highlight class="normal"></highlight></codeline>
<codeline lineno="2632"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(inv.<ref refid="class_c_inv_1a2da8a26c6b8824011e3144459d278c75" kindref="member">type</ref><sp/>==<sp/><ref refid="protocol_8h_1ac36f475ca5b446f4fde4c9b90bec77c8a4cae15fd207d555331995cd5c57689c1" kindref="member">MSG_BLOCK</ref><sp/>||<sp/>inv.<ref refid="class_c_inv_1a2da8a26c6b8824011e3144459d278c75" kindref="member">type</ref><sp/>==<sp/><ref refid="protocol_8h_1ac36f475ca5b446f4fde4c9b90bec77c8a11f393e43f75b471170b96ce59a07d33" kindref="member">MSG_FILTERED_BLOCK</ref><sp/>)</highlight></codeline>
<codeline lineno="2633"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2634"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2635"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2636"><highlight class="normal"></highlight></codeline>
<codeline lineno="2637"><highlight class="normal"><sp/><sp/><sp/><sp/>pfrom-&gt;<ref refid="class_c_node_1a9649c1f27ff0d8f0ba89eb1ea5bee139" kindref="member">vRecvGetData</ref>.erase(pfrom-&gt;<ref refid="class_c_node_1a9649c1f27ff0d8f0ba89eb1ea5bee139" kindref="member">vRecvGetData</ref>.begin(),<sp/>it);</highlight></codeline>
<codeline lineno="2638"><highlight class="normal"></highlight></codeline>
<codeline lineno="2639"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!vNotFound.empty())<sp/>{</highlight></codeline>
<codeline lineno="2640"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Let<sp/>the<sp/>peer<sp/>know<sp/>that<sp/>we<sp/>didn&apos;t<sp/>find<sp/>what<sp/>it<sp/>asked<sp/>for,<sp/>so<sp/>it<sp/>doesn&apos;t</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2641"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>have<sp/>to<sp/>wait<sp/>around<sp/>forever.<sp/>Currently<sp/>only<sp/>SPV<sp/>clients<sp/>actually<sp/>care</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2642"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>about<sp/>this<sp/>message:<sp/>it&apos;s<sp/>needed<sp/>when<sp/>they<sp/>are<sp/>recursively<sp/>walking<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2643"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>dependencies<sp/>of<sp/>relevant<sp/>unconfirmed<sp/>transactions.<sp/>SPV<sp/>clients<sp/>want<sp/>to</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2644"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>do<sp/>that<sp/>because<sp/>they<sp/>want<sp/>to<sp/>know<sp/>about<sp/>(and<sp/>store<sp/>and<sp/>rebroadcast<sp/>and</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2645"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>risk<sp/>analyze)<sp/>the<sp/>dependencies<sp/>of<sp/>transactions<sp/>relevant<sp/>to<sp/>them,<sp/>without</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2646"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>having<sp/>to<sp/>download<sp/>the<sp/>entire<sp/>memory<sp/>pool.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2647"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pfrom-&gt;<ref refid="class_c_node_1a204fda3d33404cb37698c085b1583ab2" kindref="member">PushMessage</ref>(</highlight><highlight class="stringliteral">&quot;notfound&quot;</highlight><highlight class="normal">,<sp/>vNotFound);</highlight></codeline>
<codeline lineno="2648"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2649"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2650"><highlight class="normal"></highlight></codeline>
<codeline lineno="2651"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>ProcessMessage(<ref refid="class_c_node" kindref="compound">CNode</ref>*<sp/>pfrom,<sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>strCommand,<sp/><ref refid="class_c_data_stream" kindref="compound">CDataStream</ref>&amp;<sp/>vRecv,<sp/><ref refid="stdint_8h_1adec1df1b8b51cb32b77e5b86fff46471" kindref="member">int64_t</ref><sp/>nTimeReceived)</highlight></codeline>
<codeline lineno="2652"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2653"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="util_8cpp_1a786af12a87491f8dc24351d93b9833b6" kindref="member">RandAddSeedPerfmon</ref>();</highlight></codeline>
<codeline lineno="2654"><highlight class="normal"><sp/><sp/><sp/><sp/>LogPrint(</highlight><highlight class="stringliteral">&quot;net&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;received:<sp/>%s<sp/>(%u<sp/>bytes)\n&quot;</highlight><highlight class="normal">,<sp/>strCommand,<sp/>vRecv.<ref refid="class_c_data_stream_1ac6567f6d600d644d9855b52bb59049cd" kindref="member">size</ref>());</highlight></codeline>
<codeline lineno="2655"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="util_8cpp_1a0502b74b88db99500ee21dcb446311e5" kindref="member">mapArgs</ref>.count(</highlight><highlight class="stringliteral">&quot;-dropmessagestest&quot;</highlight><highlight class="normal">)<sp/>&amp;&amp;<sp/><ref refid="util_8cpp_1a27d9149d522b1fa87d84e5e9ca902aef" kindref="member">GetRand</ref>(<ref refid="util_8h_1aa5ce96ec36f4413f820cec9c1831c070" kindref="member">atoi</ref>(<ref refid="util_8cpp_1a0502b74b88db99500ee21dcb446311e5" kindref="member">mapArgs</ref>[</highlight><highlight class="stringliteral">&quot;-dropmessagestest&quot;</highlight><highlight class="normal">]))<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="2656"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2657"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="util_8h_1afc02c0a4258fedfb316be612bb659ba8" kindref="member">LogPrintf</ref>(</highlight><highlight class="stringliteral">&quot;dropmessagestest<sp/>DROPPING<sp/>RECV<sp/>MESSAGE\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2658"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2659"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2660"><highlight class="normal"></highlight></codeline>
<codeline lineno="2661"><highlight class="normal"><sp/><sp/><sp/><sp/>State(pfrom-&gt;<ref refid="class_c_node_1ac0f1a22fa938e84138536308e2001340" kindref="member">GetId</ref>())-&gt;nLastBlockProcess<sp/>=<sp/><ref refid="util_8h_1a0c5a06b50cd805b1923552114494c029" kindref="member">GetTimeMicros</ref>();</highlight></codeline>
<codeline lineno="2662"><highlight class="normal"></highlight></codeline>
<codeline lineno="2663"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(strCommand<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;version&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="2664"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2665"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Each<sp/>connection<sp/>can<sp/>only<sp/>send<sp/>one<sp/>version<sp/>message</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2666"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(pfrom-&gt;<ref refid="class_c_node_1a99173eb3cef17e699ba21a5249ac33d2" kindref="member">nVersion</ref><sp/>!=<sp/>0)</highlight></codeline>
<codeline lineno="2667"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2668"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pfrom-&gt;<ref refid="class_c_node_1a1923dffc7124eeedcc4bb58c2cd75754" kindref="member">Misbehaving</ref>(1);</highlight></codeline>
<codeline lineno="2669"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2670"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2671"><highlight class="normal"></highlight></codeline>
<codeline lineno="2672"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stdint_8h_1adec1df1b8b51cb32b77e5b86fff46471" kindref="member">int64_t</ref><sp/>nTime;</highlight></codeline>
<codeline lineno="2673"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_c_address" kindref="compound">CAddress</ref><sp/>addrMe;</highlight></codeline>
<codeline lineno="2674"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_c_address" kindref="compound">CAddress</ref><sp/>addrFrom;</highlight></codeline>
<codeline lineno="2675"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stdint_8h_1aaa5d1cd013383c889537491c3cfd9aad" kindref="member">uint64_t</ref><sp/>nNonce<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="2676"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vRecv<sp/>&gt;&gt;<sp/>pfrom-&gt;<ref refid="class_c_node_1a99173eb3cef17e699ba21a5249ac33d2" kindref="member">nVersion</ref><sp/>&gt;&gt;<sp/>pfrom-&gt;<ref refid="class_c_node_1a8259db81211f6837585c6f82f89414ff" kindref="member">nServices</ref><sp/>&gt;&gt;<sp/>nTime<sp/>&gt;&gt;<sp/>addrMe;</highlight></codeline>
<codeline lineno="2677"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(pfrom-&gt;<ref refid="class_c_node_1a99173eb3cef17e699ba21a5249ac33d2" kindref="member">nVersion</ref><sp/>&lt;<sp/>MIN_PEER_PROTO_VERSION)</highlight></codeline>
<codeline lineno="2678"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2679"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>disconnect<sp/>from<sp/>peers<sp/>older<sp/>than<sp/>this<sp/>proto<sp/>version</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2680"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="util_8h_1afc02c0a4258fedfb316be612bb659ba8" kindref="member">LogPrintf</ref>(</highlight><highlight class="stringliteral">&quot;partner<sp/>%s<sp/>using<sp/>obsolete<sp/>version<sp/>%i;<sp/>disconnecting\n&quot;</highlight><highlight class="normal">,<sp/>pfrom-&gt;<ref refid="class_c_node_1a3993ecb1de2a2135a3cf0904346a6f88" kindref="member">addr</ref>.<ref refid="class_c_service_1a336f9848fe9364e260c76499be0351a5" kindref="member">ToString</ref>(),<sp/>pfrom-&gt;<ref refid="class_c_node_1a99173eb3cef17e699ba21a5249ac33d2" kindref="member">nVersion</ref>);</highlight></codeline>
<codeline lineno="2681"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pfrom-&gt;<ref refid="class_c_node_1af2f7ea958313974e8a948292f060922e" kindref="member">fDisconnect</ref><sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2682"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2683"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2684"><highlight class="normal"></highlight></codeline>
<codeline lineno="2685"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(pfrom-&gt;<ref refid="class_c_node_1a99173eb3cef17e699ba21a5249ac33d2" kindref="member">nVersion</ref><sp/>==<sp/>10300)</highlight></codeline>
<codeline lineno="2686"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pfrom-&gt;<ref refid="class_c_node_1a99173eb3cef17e699ba21a5249ac33d2" kindref="member">nVersion</ref><sp/>=<sp/>300;</highlight></codeline>
<codeline lineno="2687"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!vRecv.<ref refid="class_c_data_stream_1a6e50e788d33080ac804e4d8ba7150279" kindref="member">empty</ref>())</highlight></codeline>
<codeline lineno="2688"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vRecv<sp/>&gt;&gt;<sp/>addrFrom<sp/>&gt;&gt;<sp/>nNonce;</highlight></codeline>
<codeline lineno="2689"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!vRecv.<ref refid="class_c_data_stream_1a6e50e788d33080ac804e4d8ba7150279" kindref="member">empty</ref>())<sp/>{</highlight></codeline>
<codeline lineno="2690"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vRecv<sp/>&gt;&gt;<sp/><ref refid="serialize_8h_1a78e63691a056ce2368984400605e4f6e" kindref="member">LIMITED_STRING</ref>(pfrom-&gt;<ref refid="class_c_node_1afb24fb33019af5c4085412fe3898cf01" kindref="member">strSubVer</ref>,<sp/>256);</highlight></codeline>
<codeline lineno="2691"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>sSubVersion<sp/>=<sp/><ref refid="util_8cpp_1ae204f01eeaadc5a85015a51f369a8356" kindref="member">SanitizeString</ref>(pfrom-&gt;<ref refid="class_c_node_1afb24fb33019af5c4085412fe3898cf01" kindref="member">strSubVer</ref>).replace(0,1,</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2692"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sSubVersion.replace(sSubVersion.length()-1,<sp/>1,<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2693"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pfrom-&gt;<ref refid="class_c_node_1a05f0401427c5ffebd1ca404848e83ff7" kindref="member">cleanSubVer</ref><sp/>=<sp/>sSubVersion;</highlight></codeline>
<codeline lineno="2694"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2695"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!vRecv.<ref refid="class_c_data_stream_1a6e50e788d33080ac804e4d8ba7150279" kindref="member">empty</ref>())</highlight></codeline>
<codeline lineno="2696"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vRecv<sp/>&gt;&gt;<sp/>pfrom-&gt;<ref refid="class_c_node_1a597b41bd64e2ac9391b7211e65aeb52a" kindref="member">nStartingHeight</ref>;</highlight></codeline>
<codeline lineno="2697"><highlight class="normal"></highlight></codeline>
<codeline lineno="2698"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Disconnect<sp/>if<sp/>we<sp/>connected<sp/>to<sp/>ourself</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2699"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(nNonce<sp/>==<sp/><ref refid="net_8cpp_1a8c1a78575c0e397b5af7e6b4cc4493f2" kindref="member">nLocalHostNonce</ref><sp/>&amp;&amp;<sp/>nNonce<sp/>&gt;<sp/>1)</highlight></codeline>
<codeline lineno="2700"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2701"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="util_8h_1afc02c0a4258fedfb316be612bb659ba8" kindref="member">LogPrintf</ref>(</highlight><highlight class="stringliteral">&quot;connected<sp/>to<sp/>self<sp/>at<sp/>%s,<sp/>disconnecting\n&quot;</highlight><highlight class="normal">,<sp/>pfrom-&gt;<ref refid="class_c_node_1a3993ecb1de2a2135a3cf0904346a6f88" kindref="member">addr</ref>.<ref refid="class_c_service_1a336f9848fe9364e260c76499be0351a5" kindref="member">ToString</ref>());</highlight></codeline>
<codeline lineno="2702"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pfrom-&gt;<ref refid="class_c_node_1af2f7ea958313974e8a948292f060922e" kindref="member">fDisconnect</ref><sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2703"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2704"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2705"><highlight class="normal"></highlight></codeline>
<codeline lineno="2706"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pfrom-&gt;<ref refid="class_c_node_1a1b6517682efa0709f44780a95384c4ec" kindref="member">addrLocal</ref><sp/>=<sp/>addrMe;</highlight></codeline>
<codeline lineno="2707"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(pfrom-&gt;<ref refid="class_c_node_1a64b2550ec558b6106ebc122d450ad35b" kindref="member">fInbound</ref><sp/>&amp;&amp;<sp/>addrMe.IsRoutable())</highlight></codeline>
<codeline lineno="2708"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2709"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="net_8cpp_1af7487aacfc9d708b3db40c255ec070a8" kindref="member">SeenLocal</ref>(addrMe);</highlight></codeline>
<codeline lineno="2710"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2711"><highlight class="normal"></highlight></codeline>
<codeline lineno="2712"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Be<sp/>shy<sp/>and<sp/>don&apos;t<sp/>send<sp/>version<sp/>until<sp/>we<sp/>hear</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2713"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(pfrom-&gt;<ref refid="class_c_node_1a64b2550ec558b6106ebc122d450ad35b" kindref="member">fInbound</ref>)</highlight></codeline>
<codeline lineno="2714"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pfrom-&gt;<ref refid="class_c_node_1a4dbfe4f6c1fd162aaa905e4bd201d536" kindref="member">PushVersion</ref>();</highlight></codeline>
<codeline lineno="2715"><highlight class="normal"></highlight></codeline>
<codeline lineno="2716"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pfrom-&gt;<ref refid="class_c_node_1a721e2470c2c961b7599768a14be68781" kindref="member">fClient</ref><sp/>=<sp/>!(pfrom-&gt;<ref refid="class_c_node_1a8259db81211f6837585c6f82f89414ff" kindref="member">nServices</ref><sp/>&amp;<sp/><ref refid="protocol_8h_1abc5c98fcc1211af2b80116dd6e0a035da9d1154f0e7e56f183a5c8373abe2e86c" kindref="member">NODE_NETWORK</ref>);</highlight></codeline>
<codeline lineno="2717"><highlight class="normal"></highlight></codeline>
<codeline lineno="2718"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Change<sp/>version</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2719"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pfrom-&gt;<ref refid="class_c_node_1a204fda3d33404cb37698c085b1583ab2" kindref="member">PushMessage</ref>(</highlight><highlight class="stringliteral">&quot;verack&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2720"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pfrom-&gt;<ref refid="class_c_node_1a6174b5a3d8d8f6a2daf02be3cf04dc63" kindref="member">ssSend</ref>.<ref refid="class_c_data_stream_1a267d1315f3f9e9bcf9e7168beaa240c4" kindref="member">SetVersion</ref>(min(pfrom-&gt;<ref refid="class_c_node_1a99173eb3cef17e699ba21a5249ac33d2" kindref="member">nVersion</ref>,<sp/>PROTOCOL_VERSION));</highlight></codeline>
<codeline lineno="2721"><highlight class="normal"></highlight></codeline>
<codeline lineno="2722"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!pfrom-&gt;<ref refid="class_c_node_1a64b2550ec558b6106ebc122d450ad35b" kindref="member">fInbound</ref>)</highlight></codeline>
<codeline lineno="2723"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2724"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Advertise<sp/>our<sp/>address</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2725"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="util_8cpp_1a53f30a9fc322fa65a5c4e3732e4ad410" kindref="member">fNoListen</ref><sp/>&amp;&amp;<sp/>!<ref refid="chain_8cpp_1a5edcd96316574fd4a7f3ae0922a5cfd6" kindref="member">IsInitialBlockDownload</ref>())</highlight></codeline>
<codeline lineno="2726"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2727"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_c_address" kindref="compound">CAddress</ref><sp/>addr<sp/>=<sp/><ref refid="net_8cpp_1a66f5f0bc1dad5cfe429157d5637a93dc" kindref="member">GetLocalAddress</ref>(&amp;pfrom-&gt;<ref refid="class_c_node_1a3993ecb1de2a2135a3cf0904346a6f88" kindref="member">addr</ref>);</highlight></codeline>
<codeline lineno="2728"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(addr.<ref refid="class_c_net_addr_1a35131b2792434d1c9a860c583b610ab6" kindref="member">IsRoutable</ref>())</highlight></codeline>
<codeline lineno="2729"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2730"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pfrom-&gt;<ref refid="class_c_node_1a06950a5ce265a1d4df1aad7f28e6fde8" kindref="member">PushAddress</ref>(addr);</highlight></codeline>
<codeline lineno="2731"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="net_8cpp_1a058b75c6fcc94a0643184c237ad6de93" kindref="member">IsPeerAddrLocalGood</ref>(pfrom))<sp/>{</highlight></codeline>
<codeline lineno="2732"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>addr.<ref refid="class_c_net_addr_1a1c6087345e5ca07a151451cd6deb974f" kindref="member">SetIP</ref>(pfrom-&gt;<ref refid="class_c_node_1a1b6517682efa0709f44780a95384c4ec" kindref="member">addrLocal</ref>);</highlight></codeline>
<codeline lineno="2733"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pfrom-&gt;<ref refid="class_c_node_1a06950a5ce265a1d4df1aad7f28e6fde8" kindref="member">PushAddress</ref>(addr);</highlight></codeline>
<codeline lineno="2734"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2735"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2736"><highlight class="normal"></highlight></codeline>
<codeline lineno="2737"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Get<sp/>recent<sp/>addresses</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2738"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(pfrom-&gt;<ref refid="class_c_node_1a2bb91c9968a9f855c05b1121100a8797" kindref="member">fOneShot</ref><sp/>||<sp/>pfrom-&gt;<ref refid="class_c_node_1a99173eb3cef17e699ba21a5249ac33d2" kindref="member">nVersion</ref><sp/>&gt;=<sp/>CADDR_TIME_VERSION<sp/>||<sp/><ref refid="net_8cpp_1ac575e3335fd15a19b567026491f8f01a" kindref="member">addrman</ref>.<ref refid="class_c_addr_man_1a15b8e72f55344b6fbd1bc1bda3cdc5bc" kindref="member">size</ref>()<sp/>&lt;<sp/>1000)</highlight></codeline>
<codeline lineno="2739"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2740"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pfrom-&gt;<ref refid="class_c_node_1a204fda3d33404cb37698c085b1583ab2" kindref="member">PushMessage</ref>(</highlight><highlight class="stringliteral">&quot;getaddr&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2741"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pfrom-&gt;<ref refid="class_c_node_1a3da9c559959e182aff8439cd004ff624" kindref="member">fGetAddr</ref><sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2742"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2743"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="net_8cpp_1ac575e3335fd15a19b567026491f8f01a" kindref="member">addrman</ref>.<ref refid="class_c_addr_man_1a993e80e74701d7bc6bb49880c387b847" kindref="member">Good</ref>(pfrom-&gt;<ref refid="class_c_node_1a3993ecb1de2a2135a3cf0904346a6f88" kindref="member">addr</ref>);</highlight></codeline>
<codeline lineno="2744"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="2745"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(((<ref refid="class_c_net_addr" kindref="compound">CNetAddr</ref>)pfrom-&gt;<ref refid="class_c_node_1a3993ecb1de2a2135a3cf0904346a6f88" kindref="member">addr</ref>)<sp/>==<sp/>(<ref refid="class_c_net_addr" kindref="compound">CNetAddr</ref>)addrFrom)</highlight></codeline>
<codeline lineno="2746"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2747"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="net_8cpp_1ac575e3335fd15a19b567026491f8f01a" kindref="member">addrman</ref>.<ref refid="class_c_addr_man_1a03fcc7109b5f014760dc50a81f68c5ec" kindref="member">Add</ref>(addrFrom,<sp/>addrFrom);</highlight></codeline>
<codeline lineno="2748"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="net_8cpp_1ac575e3335fd15a19b567026491f8f01a" kindref="member">addrman</ref>.<ref refid="class_c_addr_man_1a993e80e74701d7bc6bb49880c387b847" kindref="member">Good</ref>(addrFrom);</highlight></codeline>
<codeline lineno="2749"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2750"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2751"><highlight class="normal"></highlight></codeline>
<codeline lineno="2752"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Relay<sp/>alerts</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2753"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2754"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="sync_8h_1a911fe23f057c2fe5aad629162d6c99d0" kindref="member">LOCK</ref>(cs_mapAlerts);</highlight></codeline>
<codeline lineno="2755"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>BOOST_FOREACH(<ref refid="util_8h_1aa3052ab82a2ba880ea3e30b3357c8820" kindref="member">PAIRTYPE</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classuint256" kindref="compound">uint256</ref>,<sp/><ref refid="class_c_alert" kindref="compound">CAlert</ref>)&amp;<sp/>item,<sp/>mapAlerts)</highlight></codeline>
<codeline lineno="2756"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>item.second.RelayTo(pfrom);</highlight></codeline>
<codeline lineno="2757"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2758"><highlight class="normal"></highlight></codeline>
<codeline lineno="2759"><highlight class="normal"></highlight></codeline>
<codeline lineno="2760"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pfrom-&gt;fSuccessfullyConnected<sp/>=<sp/>true;</highlight></codeline>
<codeline lineno="2761"><highlight class="normal"></highlight></codeline>
<codeline lineno="2762"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="util_8h_1afc02c0a4258fedfb316be612bb659ba8" kindref="member">LogPrintf</ref>(&quot;receive<sp/><ref refid="db__impl_8cc_1afc25f30ab1a6d04798c360a2ce70b87d" kindref="member">version</ref><sp/>message:<sp/><ref refid="db__impl_8cc_1afc25f30ab1a6d04798c360a2ce70b87d" kindref="member">version</ref><sp/>%d,<sp/>blocks=%d,<sp/>us=%s,<sp/>them=%s,<sp/>peer=%s\n&quot;,<sp/>pfrom-&gt;nVersion,<sp/>pfrom-&gt;nStartingHeight,<sp/>addrMe.ToString(),<sp/>addrFrom.ToString(),<sp/>pfrom-&gt;addr.ToString());</highlight></codeline>
<codeline lineno="2763"><highlight class="normal"></highlight></codeline>
<codeline lineno="2764"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stdint_8h_1adec1df1b8b51cb32b77e5b86fff46471" kindref="member">int64_t</ref><sp/>nTimeOffset<sp/>=<sp/>nTime<sp/>-<sp/><ref refid="util_8cpp_1a46fac5fba8ba905b5f9acb364f5d8c6f" kindref="member">GetTime</ref>();</highlight></codeline>
<codeline lineno="2765"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pfrom-&gt;nTimeOffset<sp/>=<sp/>nTimeOffset;</highlight></codeline>
<codeline lineno="2766"><highlight class="normal"></highlight></codeline>
<codeline lineno="2767"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(<ref refid="util_8cpp_1a64d956f1dda7f9a80ab5d594532b906d" kindref="member">GetBoolArg</ref>(&quot;-synctime&quot;,<sp/>true))</highlight></codeline>
<codeline lineno="2768"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="timedata_8cpp_1ac2624434f4891e8d74f9b13ec91f95d2" kindref="member">AddTimeData</ref>(pfrom-&gt;addr,<sp/>nTimeOffset);</highlight></codeline>
<codeline lineno="2769"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2770"><highlight class="normal"></highlight></codeline>
<codeline lineno="2771"><highlight class="normal"></highlight></codeline>
<codeline lineno="2772"><highlight class="normal"><sp/><sp/><sp/><sp/>else<sp/>if<sp/>(pfrom-&gt;nVersion<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="2773"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2774"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Must<sp/>have<sp/>a<sp/>version<sp/>message<sp/>before<sp/>anything<sp/>else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2775"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pfrom-&gt;Misbehaving(1);</highlight></codeline>
<codeline lineno="2776"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2777"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2778"><highlight class="normal"></highlight></codeline>
<codeline lineno="2779"><highlight class="normal"></highlight></codeline>
<codeline lineno="2780"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(strCommand<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;verack&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="2781"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2782"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pfrom-&gt;SetRecvVersion(min(pfrom-&gt;nVersion,<sp/>PROTOCOL_VERSION));</highlight></codeline>
<codeline lineno="2783"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2784"><highlight class="normal"></highlight></codeline>
<codeline lineno="2785"><highlight class="normal"></highlight></codeline>
<codeline lineno="2786"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(strCommand<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;addr&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="2787"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2788"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vector&lt;CAddress&gt;<sp/>vAddr;</highlight></codeline>
<codeline lineno="2789"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vRecv<sp/>&gt;&gt;<sp/>vAddr;</highlight></codeline>
<codeline lineno="2790"><highlight class="normal"></highlight></codeline>
<codeline lineno="2791"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Don&apos;t<sp/>want<sp/>addr<sp/>from<sp/>older<sp/>versions<sp/>unless<sp/>seeding</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2792"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(pfrom-&gt;nVersion<sp/>&lt;<sp/>CADDR_TIME_VERSION<sp/>&amp;&amp;<sp/><ref refid="net_8cpp_1ac575e3335fd15a19b567026491f8f01a" kindref="member">addrman</ref>.<ref refid="class_c_addr_man_1a15b8e72f55344b6fbd1bc1bda3cdc5bc" kindref="member">size</ref>()<sp/>&gt;<sp/>1000)</highlight></codeline>
<codeline lineno="2793"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2794"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(vAddr.size()<sp/>&gt;<sp/>1000)</highlight></codeline>
<codeline lineno="2795"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2796"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pfrom-&gt;Misbehaving(20);</highlight></codeline>
<codeline lineno="2797"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>error(</highlight><highlight class="stringliteral">&quot;message<sp/>addr<sp/>size()<sp/>=<sp/>%u&quot;</highlight><highlight class="normal">,<sp/>vAddr.size());</highlight></codeline>
<codeline lineno="2798"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2799"><highlight class="normal"></highlight></codeline>
<codeline lineno="2800"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Store<sp/>the<sp/>new<sp/>addresses</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2801"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vector&lt;CAddress&gt;<sp/>vAddrOk;</highlight></codeline>
<codeline lineno="2802"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stdint_8h_1adec1df1b8b51cb32b77e5b86fff46471" kindref="member">int64_t</ref><sp/>nNow<sp/>=<sp/><ref refid="timedata_8cpp_1a09f81b9c7650f898cf3cf305b87547e6" kindref="member">GetAdjustedTime</ref>();</highlight></codeline>
<codeline lineno="2803"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stdint_8h_1adec1df1b8b51cb32b77e5b86fff46471" kindref="member">int64_t</ref><sp/>nSince<sp/>=<sp/>nNow<sp/>-<sp/>10<sp/>*<sp/>60;</highlight></codeline>
<codeline lineno="2804"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>BOOST_FOREACH(<ref refid="class_c_address" kindref="compound">CAddress</ref>&amp;<sp/>addr,<sp/>vAddr)</highlight></codeline>
<codeline lineno="2805"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2806"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>boost::this_thread::interruption_point();</highlight></codeline>
<codeline lineno="2807"><highlight class="normal"></highlight></codeline>
<codeline lineno="2808"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(addr.<ref refid="class_c_address_1ac1c44aac968b11f90ce529b133ae4e9b" kindref="member">nTime</ref><sp/>&lt;=<sp/>100000000<sp/>||<sp/>addr.<ref refid="class_c_address_1ac1c44aac968b11f90ce529b133ae4e9b" kindref="member">nTime</ref><sp/>&gt;<sp/>nNow<sp/>+<sp/>10<sp/>*<sp/>60)</highlight></codeline>
<codeline lineno="2809"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>addr.<ref refid="class_c_address_1ac1c44aac968b11f90ce529b133ae4e9b" kindref="member">nTime</ref><sp/>=<sp/>nNow<sp/>-<sp/>5<sp/>*<sp/>24<sp/>*<sp/>60<sp/>*<sp/>60;</highlight></codeline>
<codeline lineno="2810"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pfrom-&gt;AddAddressKnown(addr);</highlight></codeline>
<codeline lineno="2811"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>fReachable<sp/>=<sp/><ref refid="net_8cpp_1af6de8e47b01a96206402ddef734114f2" kindref="member">IsReachable</ref>(addr);</highlight></codeline>
<codeline lineno="2812"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(addr.<ref refid="class_c_address_1ac1c44aac968b11f90ce529b133ae4e9b" kindref="member">nTime</ref><sp/>&gt;<sp/>nSince<sp/>&amp;&amp;<sp/>!pfrom-&gt;fGetAddr<sp/>&amp;&amp;<sp/>vAddr.size()<sp/>&lt;=<sp/>10<sp/>&amp;&amp;<sp/>addr.<ref refid="class_c_net_addr_1a35131b2792434d1c9a860c583b610ab6" kindref="member">IsRoutable</ref>())</highlight></codeline>
<codeline lineno="2813"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2814"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Relay<sp/>to<sp/>a<sp/>limited<sp/>number<sp/>of<sp/>other<sp/>nodes</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2815"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2816"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="sync_8h_1a911fe23f057c2fe5aad629162d6c99d0" kindref="member">LOCK</ref>(<ref refid="net_8cpp_1a8282e3a7948351ac96516573cd31f9d0" kindref="member">cs_vNodes</ref>);</highlight></codeline>
<codeline lineno="2817"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Use<sp/>deterministic<sp/>randomness<sp/>to<sp/>send<sp/>to<sp/>the<sp/>same<sp/>nodes<sp/>for<sp/>24<sp/>hours</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2818"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>at<sp/>a<sp/>time<sp/>so<sp/>the<sp/>setAddrKnowns<sp/>of<sp/>the<sp/>chosen<sp/>nodes<sp/>prevent<sp/>repeats</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2819"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="classuint256" kindref="compound">uint256</ref><sp/>hashSalt;</highlight></codeline>
<codeline lineno="2820"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(hashSalt<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="2821"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>hashSalt<sp/>=<sp/><ref refid="util_8cpp_1af3aedae75efabb170337a497457f7ecf" kindref="member">GetRandHash</ref>();</highlight></codeline>
<codeline lineno="2822"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stdint_8h_1aaa5d1cd013383c889537491c3cfd9aad" kindref="member">uint64_t</ref><sp/>hashAddr<sp/>=<sp/>addr.<ref refid="class_c_net_addr_1a4c94fea8695ef97adf5b2a18e1074308" kindref="member">GetHash</ref>();</highlight></codeline>
<codeline lineno="2823"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classuint256" kindref="compound">uint256</ref><sp/>hashRand<sp/>=<sp/>hashSalt<sp/>^<sp/>(hashAddr&lt;&lt;32)<sp/>^<sp/>((<ref refid="util_8cpp_1a46fac5fba8ba905b5f9acb364f5d8c6f" kindref="member">GetTime</ref>()+hashAddr)/(24*60*60));</highlight></codeline>
<codeline lineno="2824"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>hashRand<sp/>=<sp/><ref refid="hash_8h_1ab3f6c437460137530d86e09c2c102e99" kindref="member">Hash</ref>(<ref refid="util_8h_1a5f5e63e2c340bc52049e38c09b37e6e1" kindref="member">BEGIN</ref>(hashRand),<sp/><ref refid="util_8h_1ac32457d3f041434e57a2924847796fda" kindref="member">END</ref>(hashRand));</highlight></codeline>
<codeline lineno="2825"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>multimap&lt;uint256,<sp/>CNode*&gt;<sp/>mapMix;</highlight></codeline>
<codeline lineno="2826"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>BOOST_FOREACH(<ref refid="class_c_node" kindref="compound">CNode</ref>*<sp/>pnode,<sp/><ref refid="net_8cpp_1aa5a11f8873e230cea77bc7e91ee51918" kindref="member">vNodes</ref>)</highlight></codeline>
<codeline lineno="2827"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2828"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(pnode-&gt;<ref refid="class_c_node_1a99173eb3cef17e699ba21a5249ac33d2" kindref="member">nVersion</ref><sp/>&lt;<sp/>CADDR_TIME_VERSION)</highlight></codeline>
<codeline lineno="2829"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2830"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nPointer;</highlight></codeline>
<codeline lineno="2831"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>memcpy(&amp;nPointer,<sp/>&amp;pnode,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(nPointer));</highlight></codeline>
<codeline lineno="2832"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classuint256" kindref="compound">uint256</ref><sp/>hashKey<sp/>=<sp/>hashRand<sp/>^<sp/>nPointer;</highlight></codeline>
<codeline lineno="2833"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>hashKey<sp/>=<sp/><ref refid="hash_8h_1ab3f6c437460137530d86e09c2c102e99" kindref="member">Hash</ref>(<ref refid="util_8h_1a5f5e63e2c340bc52049e38c09b37e6e1" kindref="member">BEGIN</ref>(hashKey),<sp/><ref refid="util_8h_1ac32457d3f041434e57a2924847796fda" kindref="member">END</ref>(hashKey));</highlight></codeline>
<codeline lineno="2834"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mapMix.insert(make_pair(hashKey,<sp/>pnode));</highlight></codeline>
<codeline lineno="2835"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2836"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nRelayNodes<sp/>=<sp/>fReachable<sp/>?<sp/>2<sp/>:<sp/>1;<sp/></highlight><highlight class="comment">//<sp/>limited<sp/>relaying<sp/>of<sp/>addresses<sp/>outside<sp/>our<sp/>network(s)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2837"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(multimap&lt;uint256,<sp/>CNode*&gt;::iterator<sp/>mi<sp/>=<sp/>mapMix.begin();<sp/>mi<sp/>!=<sp/>mapMix.end()<sp/>&amp;&amp;<sp/>nRelayNodes--<sp/>&gt;<sp/>0;<sp/>++mi)</highlight></codeline>
<codeline lineno="2838"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((*mi).second)-&gt;PushAddress(addr);</highlight></codeline>
<codeline lineno="2839"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2840"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2841"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Do<sp/>not<sp/>store<sp/>addresses<sp/>outside<sp/>our<sp/>network</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2842"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fReachable)</highlight></codeline>
<codeline lineno="2843"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vAddrOk.push_back(addr);</highlight></codeline>
<codeline lineno="2844"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2845"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="net_8cpp_1ac575e3335fd15a19b567026491f8f01a" kindref="member">addrman</ref>.<ref refid="class_c_addr_man_1a03fcc7109b5f014760dc50a81f68c5ec" kindref="member">Add</ref>(vAddrOk,<sp/>pfrom-&gt;addr,<sp/>2<sp/>*<sp/>60<sp/>*<sp/>60);</highlight></codeline>
<codeline lineno="2846"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(vAddr.size()<sp/>&lt;<sp/>1000)</highlight></codeline>
<codeline lineno="2847"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pfrom-&gt;fGetAddr<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2848"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(pfrom-&gt;fOneShot)</highlight></codeline>
<codeline lineno="2849"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pfrom-&gt;fDisconnect<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2850"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2851"><highlight class="normal"></highlight></codeline>
<codeline lineno="2852"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(strCommand<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;inv&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="2853"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2854"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vector&lt;CInv&gt;<sp/>vInv;</highlight></codeline>
<codeline lineno="2855"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vRecv<sp/>&gt;&gt;<sp/>vInv;</highlight></codeline>
<codeline lineno="2856"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(vInv.size()<sp/>&gt;<sp/>MAX_INV_SZ)</highlight></codeline>
<codeline lineno="2857"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2858"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pfrom-&gt;Misbehaving(20);</highlight></codeline>
<codeline lineno="2859"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>error(</highlight><highlight class="stringliteral">&quot;message<sp/>inv<sp/>size()<sp/>=<sp/>%u&quot;</highlight><highlight class="normal">,<sp/>vInv.size());</highlight></codeline>
<codeline lineno="2860"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2861"><highlight class="normal"></highlight></codeline>
<codeline lineno="2862"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="sync_8h_1a911fe23f057c2fe5aad629162d6c99d0" kindref="member">LOCK</ref>(cs_main);</highlight></codeline>
<codeline lineno="2863"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_c_tx_d_b" kindref="compound">CTxDB</ref><sp/><ref refid="txdb-leveldb_8cpp_1a72eff8ae1d84de13daf97a61b8c02bc6" kindref="member">txdb</ref>(</highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2864"><highlight class="normal"></highlight></codeline>
<codeline lineno="2865"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nInv<sp/>=<sp/>0;<sp/>nInv<sp/>&lt;<sp/>vInv.size();<sp/>nInv++)</highlight></codeline>
<codeline lineno="2866"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2867"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_c_inv" kindref="compound">CInv</ref><sp/>&amp;inv<sp/>=<sp/>vInv[nInv];</highlight></codeline>
<codeline lineno="2868"><highlight class="normal"></highlight></codeline>
<codeline lineno="2869"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>boost::this_thread::interruption_point();</highlight></codeline>
<codeline lineno="2870"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pfrom-&gt;AddInventoryKnown(inv);</highlight></codeline>
<codeline lineno="2871"><highlight class="normal"></highlight></codeline>
<codeline lineno="2872"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>fAlreadyHave<sp/>=<sp/>AlreadyHave(txdb,<sp/>inv);</highlight></codeline>
<codeline lineno="2873"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>LogPrint(</highlight><highlight class="stringliteral">&quot;net&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>got<sp/>inventory:<sp/>%s<sp/><sp/>%s\n&quot;</highlight><highlight class="normal">,<sp/>inv.<ref refid="class_c_inv_1a87a826a842d549c2747ced0c1a90bc18" kindref="member">ToString</ref>(),<sp/>fAlreadyHave<sp/>?<sp/></highlight><highlight class="stringliteral">&quot;have&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;new&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2874"><highlight class="normal"></highlight></codeline>
<codeline lineno="2875"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!fAlreadyHave)<sp/>{</highlight></codeline>
<codeline lineno="2876"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!fImporting<sp/>&amp;&amp;<sp/>!fReindex)<sp/>{</highlight></codeline>
<codeline lineno="2877"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(inv.<ref refid="class_c_inv_1a2da8a26c6b8824011e3144459d278c75" kindref="member">type</ref><sp/>==<sp/><ref refid="protocol_8h_1ac36f475ca5b446f4fde4c9b90bec77c8a4cae15fd207d555331995cd5c57689c1" kindref="member">MSG_BLOCK</ref>)</highlight></codeline>
<codeline lineno="2878"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>AddBlockToQueue(pfrom-&gt;GetId(),<sp/>inv.<ref refid="class_c_inv_1abfa04c38e9c0def9a2b09a9c43929744" kindref="member">hash</ref>);</highlight></codeline>
<codeline lineno="2879"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2880"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pfrom-&gt;AskFor(inv);</highlight></codeline>
<codeline lineno="2881"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2882"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(inv.<ref refid="class_c_inv_1a2da8a26c6b8824011e3144459d278c75" kindref="member">type</ref><sp/>==<sp/><ref refid="protocol_8h_1ac36f475ca5b446f4fde4c9b90bec77c8a4cae15fd207d555331995cd5c57689c1" kindref="member">MSG_BLOCK</ref><sp/>&amp;&amp;<sp/>mapOrphanBlocks.count(inv.<ref refid="class_c_inv_1abfa04c38e9c0def9a2b09a9c43929744" kindref="member">hash</ref>))<sp/>{</highlight></codeline>
<codeline lineno="2883"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="main_8cpp_1a28098619373dbab927d25bca3cea8a4a" kindref="member">PushGetBlocks</ref>(pfrom,<sp/>pindexBest,<sp/>GetOrphanRoot(inv.<ref refid="class_c_inv_1abfa04c38e9c0def9a2b09a9c43929744" kindref="member">hash</ref>));</highlight></codeline>
<codeline lineno="2884"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>In<sp/>case<sp/>we<sp/>are<sp/>on<sp/>a<sp/>very<sp/>long<sp/>side-chain,<sp/>it<sp/>is<sp/>possible<sp/>that<sp/>we<sp/>already<sp/>have</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2885"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>last<sp/>block<sp/>in<sp/>an<sp/>inv<sp/>bundle<sp/>sent<sp/>in<sp/>response<sp/>to<sp/>getblocks.<sp/>Try<sp/>to<sp/>detect</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2886"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>this<sp/>situation<sp/>and<sp/>push<sp/>another<sp/>getblocks<sp/>to<sp/>continue.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2887"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="util_8cpp_1a2ba7badc843121dde40a6f109d224a42" kindref="member">fDebug</ref>)</highlight></codeline>
<codeline lineno="2888"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="util_8h_1afc02c0a4258fedfb316be612bb659ba8" kindref="member">LogPrintf</ref>(</highlight><highlight class="stringliteral">&quot;force<sp/>request:<sp/>%s\n&quot;</highlight><highlight class="normal">,<sp/>inv.<ref refid="class_c_inv_1a87a826a842d549c2747ced0c1a90bc18" kindref="member">ToString</ref>());</highlight></codeline>
<codeline lineno="2889"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2890"><highlight class="normal"></highlight></codeline>
<codeline lineno="2891"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Track<sp/>requests<sp/>for<sp/>our<sp/>stuff</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2892"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>g_signals.Inventory(inv.<ref refid="class_c_inv_1abfa04c38e9c0def9a2b09a9c43929744" kindref="member">hash</ref>);</highlight></codeline>
<codeline lineno="2893"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2894"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2895"><highlight class="normal"></highlight></codeline>
<codeline lineno="2896"><highlight class="normal"></highlight></codeline>
<codeline lineno="2897"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(strCommand<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;getdata&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="2898"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2899"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vector&lt;CInv&gt;<sp/>vInv;</highlight></codeline>
<codeline lineno="2900"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vRecv<sp/>&gt;&gt;<sp/>vInv;</highlight></codeline>
<codeline lineno="2901"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(vInv.size()<sp/>&gt;<sp/>MAX_INV_SZ)</highlight></codeline>
<codeline lineno="2902"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2903"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pfrom-&gt;Misbehaving(20);</highlight></codeline>
<codeline lineno="2904"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>error(</highlight><highlight class="stringliteral">&quot;message<sp/>getdata<sp/>size()<sp/>=<sp/>%u&quot;</highlight><highlight class="normal">,<sp/>vInv.size());</highlight></codeline>
<codeline lineno="2905"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2906"><highlight class="normal"></highlight></codeline>
<codeline lineno="2907"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="util_8cpp_1a2ba7badc843121dde40a6f109d224a42" kindref="member">fDebug</ref><sp/>||<sp/>(vInv.size()<sp/>!=<sp/>1))</highlight></codeline>
<codeline lineno="2908"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>LogPrint(</highlight><highlight class="stringliteral">&quot;net&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;received<sp/>getdata<sp/>(%u<sp/>invsz)\n&quot;</highlight><highlight class="normal">,<sp/>vInv.size());</highlight></codeline>
<codeline lineno="2909"><highlight class="normal"></highlight></codeline>
<codeline lineno="2910"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((<ref refid="util_8cpp_1a2ba7badc843121dde40a6f109d224a42" kindref="member">fDebug</ref><sp/>&amp;&amp;<sp/>vInv.size()<sp/>&gt;<sp/>0)<sp/>||<sp/>(vInv.size()<sp/>==<sp/>1))</highlight></codeline>
<codeline lineno="2911"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>LogPrint(</highlight><highlight class="stringliteral">&quot;net&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;received<sp/>getdata<sp/>for:<sp/>%s\n&quot;</highlight><highlight class="normal">,<sp/>vInv[0].ToString());</highlight></codeline>
<codeline lineno="2912"><highlight class="normal"></highlight></codeline>
<codeline lineno="2913"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pfrom-&gt;vRecvGetData.insert(pfrom-&gt;vRecvGetData.end(),<sp/>vInv.begin(),<sp/>vInv.end());</highlight></codeline>
<codeline lineno="2914"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ProcessGetData(pfrom);</highlight></codeline>
<codeline lineno="2915"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2916"><highlight class="normal"></highlight></codeline>
<codeline lineno="2917"><highlight class="normal"></highlight></codeline>
<codeline lineno="2918"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(strCommand<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;getblocks&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="2919"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2920"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_c_block_locator" kindref="compound">CBlockLocator</ref><sp/>locator;</highlight></codeline>
<codeline lineno="2921"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classuint256" kindref="compound">uint256</ref><sp/>hashStop;</highlight></codeline>
<codeline lineno="2922"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vRecv<sp/>&gt;&gt;<sp/>locator<sp/>&gt;&gt;<sp/>hashStop;</highlight></codeline>
<codeline lineno="2923"><highlight class="normal"></highlight></codeline>
<codeline lineno="2924"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="sync_8h_1a911fe23f057c2fe5aad629162d6c99d0" kindref="member">LOCK</ref>(cs_main);</highlight></codeline>
<codeline lineno="2925"><highlight class="normal"></highlight></codeline>
<codeline lineno="2926"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Find<sp/>the<sp/>last<sp/>block<sp/>the<sp/>caller<sp/>has<sp/>in<sp/>the<sp/>main<sp/>chain</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2927"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_c_block_index" kindref="compound">CBlockIndex</ref>*<sp/>pindex<sp/>=<sp/>locator.<ref refid="class_c_block_locator_1a9109609622705fe47ec42ecc71c59d48" kindref="member">GetBlockIndex</ref>();</highlight></codeline>
<codeline lineno="2928"><highlight class="normal"></highlight></codeline>
<codeline lineno="2929"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Send<sp/>the<sp/>rest<sp/>of<sp/>the<sp/>chain</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2930"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(pindex)</highlight></codeline>
<codeline lineno="2931"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pindex<sp/>=<sp/>pindex-&gt;<ref refid="class_c_block_index_1a2f0acd342accaab731d887584b444590" kindref="member">pnext</ref>;</highlight></codeline>
<codeline lineno="2932"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nLimit<sp/>=<sp/>5000;</highlight></codeline>
<codeline lineno="2933"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>LogPrint(</highlight><highlight class="stringliteral">&quot;net&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;getblocks<sp/>%d<sp/>to<sp/>%s<sp/>limit<sp/>%d\n&quot;</highlight><highlight class="normal">,<sp/>(pindex<sp/>?<sp/>pindex-&gt;<ref refid="class_c_block_index_1aebfc8d6b95852546760e742553d7bfd5" kindref="member">nHeight</ref><sp/>:<sp/>-1),<sp/>hashStop.ToString(),<sp/>nLimit);</highlight></codeline>
<codeline lineno="2934"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(;<sp/>pindex;<sp/>pindex<sp/>=<sp/>pindex-&gt;<ref refid="class_c_block_index_1a2f0acd342accaab731d887584b444590" kindref="member">pnext</ref>)</highlight></codeline>
<codeline lineno="2935"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2936"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(pindex-&gt;<ref refid="class_c_block_index_1ab843ef9b8b0a0193ec3a5c24738e484f" kindref="member">GetBlockHash</ref>()<sp/>==<sp/>hashStop)</highlight></codeline>
<codeline lineno="2937"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2938"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>LogPrint(</highlight><highlight class="stringliteral">&quot;net&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>getblocks<sp/>stopping<sp/>at<sp/>%d<sp/>%s\n&quot;</highlight><highlight class="normal">,<sp/>pindex-&gt;<ref refid="class_c_block_index_1aebfc8d6b95852546760e742553d7bfd5" kindref="member">nHeight</ref>,<sp/>pindex-&gt;<ref refid="class_c_block_index_1ab843ef9b8b0a0193ec3a5c24738e484f" kindref="member">GetBlockHash</ref>().<ref refid="classbase__uint_1ac3080a72402cadf28dbc9f9b69cc60be" kindref="member">ToString</ref>());</highlight></codeline>
<codeline lineno="2939"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2940"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2941"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pfrom-&gt;PushInventory(<ref refid="class_c_inv" kindref="compound">CInv</ref>(<ref refid="protocol_8h_1ac36f475ca5b446f4fde4c9b90bec77c8a4cae15fd207d555331995cd5c57689c1" kindref="member">MSG_BLOCK</ref>,<sp/>pindex-&gt;<ref refid="class_c_block_index_1ab843ef9b8b0a0193ec3a5c24738e484f" kindref="member">GetBlockHash</ref>()));</highlight></codeline>
<codeline lineno="2942"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(--nLimit<sp/>&lt;=<sp/>0)</highlight></codeline>
<codeline lineno="2943"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2944"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>When<sp/>this<sp/>block<sp/>is<sp/>requested,<sp/>we&apos;ll<sp/>send<sp/>an<sp/>inv<sp/>that&apos;ll<sp/>make<sp/>them</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2945"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>getblocks<sp/>the<sp/>next<sp/>batch<sp/>of<sp/>inventory.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2946"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>LogPrint(</highlight><highlight class="stringliteral">&quot;net&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>getblocks<sp/>stopping<sp/>at<sp/>limit<sp/>%d<sp/>%s\n&quot;</highlight><highlight class="normal">,<sp/>pindex-&gt;<ref refid="class_c_block_index_1aebfc8d6b95852546760e742553d7bfd5" kindref="member">nHeight</ref>,<sp/>pindex-&gt;<ref refid="class_c_block_index_1ab843ef9b8b0a0193ec3a5c24738e484f" kindref="member">GetBlockHash</ref>().<ref refid="classbase__uint_1ac3080a72402cadf28dbc9f9b69cc60be" kindref="member">ToString</ref>());</highlight></codeline>
<codeline lineno="2947"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pfrom-&gt;hashContinue<sp/>=<sp/>pindex-&gt;<ref refid="class_c_block_index_1ab843ef9b8b0a0193ec3a5c24738e484f" kindref="member">GetBlockHash</ref>();</highlight></codeline>
<codeline lineno="2948"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2949"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2950"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2951"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2952"><highlight class="normal"></highlight></codeline>
<codeline lineno="2953"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(strCommand<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;getheaders&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="2954"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2955"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_c_block_locator" kindref="compound">CBlockLocator</ref><sp/>locator;</highlight></codeline>
<codeline lineno="2956"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classuint256" kindref="compound">uint256</ref><sp/>hashStop;</highlight></codeline>
<codeline lineno="2957"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vRecv<sp/>&gt;&gt;<sp/>locator<sp/>&gt;&gt;<sp/>hashStop;</highlight></codeline>
<codeline lineno="2958"><highlight class="normal"></highlight></codeline>
<codeline lineno="2959"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="sync_8h_1a911fe23f057c2fe5aad629162d6c99d0" kindref="member">LOCK</ref>(cs_main);</highlight></codeline>
<codeline lineno="2960"><highlight class="normal"></highlight></codeline>
<codeline lineno="2961"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_c_block_index" kindref="compound">CBlockIndex</ref>*<sp/>pindex<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="2962"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(locator.<ref refid="class_c_block_locator_1aa34a6e267a83b4e5b514275f6392ca22" kindref="member">IsNull</ref>())</highlight></codeline>
<codeline lineno="2963"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2964"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>locator<sp/>is<sp/>null,<sp/>return<sp/>the<sp/>hashStop<sp/>block</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2965"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>map&lt;uint256,<sp/>CBlockIndex*&gt;::iterator<sp/>mi<sp/>=<sp/>mapBlockIndex.find(hashStop);</highlight></codeline>
<codeline lineno="2966"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mi<sp/>==<sp/>mapBlockIndex.end())</highlight></codeline>
<codeline lineno="2967"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2968"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pindex<sp/>=<sp/>(*mi).second;</highlight></codeline>
<codeline lineno="2969"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2970"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2971"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2972"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Find<sp/>the<sp/>last<sp/>block<sp/>the<sp/>caller<sp/>has<sp/>in<sp/>the<sp/>main<sp/>chain</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2973"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pindex<sp/>=<sp/>locator.<ref refid="class_c_block_locator_1a9109609622705fe47ec42ecc71c59d48" kindref="member">GetBlockIndex</ref>();</highlight></codeline>
<codeline lineno="2974"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(pindex)</highlight></codeline>
<codeline lineno="2975"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pindex<sp/>=<sp/>pindex-&gt;<ref refid="class_c_block_index_1a2f0acd342accaab731d887584b444590" kindref="member">pnext</ref>;</highlight></codeline>
<codeline lineno="2976"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2977"><highlight class="normal"></highlight></codeline>
<codeline lineno="2978"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vector&lt;CBlock&gt;<sp/>vHeaders;</highlight></codeline>
<codeline lineno="2979"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nLimit<sp/>=<sp/>2000;</highlight></codeline>
<codeline lineno="2980"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>LogPrint(</highlight><highlight class="stringliteral">&quot;net&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;getheaders<sp/>%d<sp/>to<sp/>%s\n&quot;</highlight><highlight class="normal">,<sp/>(pindex<sp/>?<sp/>pindex-&gt;<ref refid="class_c_block_index_1aebfc8d6b95852546760e742553d7bfd5" kindref="member">nHeight</ref><sp/>:<sp/>-1),<sp/>hashStop.ToString());</highlight></codeline>
<codeline lineno="2981"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(;<sp/>pindex;<sp/>pindex<sp/>=<sp/>pindex-&gt;<ref refid="class_c_block_index_1a2f0acd342accaab731d887584b444590" kindref="member">pnext</ref>)</highlight></codeline>
<codeline lineno="2982"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2983"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vHeaders.push_back(pindex-&gt;<ref refid="class_c_block_index_1a34041486523d190d9ede5d83461fdc00" kindref="member">GetBlockHeader</ref>());</highlight></codeline>
<codeline lineno="2984"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(--nLimit<sp/>&lt;=<sp/>0<sp/>||<sp/>pindex-&gt;<ref refid="stormnode_8cpp_1a32f5cbabfc2bd53c2f2daedf122a83cb" kindref="member">GetBlockHash</ref>()<sp/>==<sp/>hashStop)</highlight></codeline>
<codeline lineno="2985"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2986"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2987"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pfrom-&gt;PushMessage(</highlight><highlight class="stringliteral">&quot;headers&quot;</highlight><highlight class="normal">,<sp/>vHeaders);</highlight></codeline>
<codeline lineno="2988"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2989"><highlight class="normal"></highlight></codeline>
<codeline lineno="2990"><highlight class="normal"></highlight></codeline>
<codeline lineno="2991"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(strCommand<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;tx&quot;</highlight><highlight class="normal">||<sp/>strCommand<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;sstx&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="2992"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2993"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vector&lt;uint256&gt;<sp/>vWorkQueue;</highlight></codeline>
<codeline lineno="2994"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vector&lt;uint256&gt;<sp/>vEraseQueue;</highlight></codeline>
<codeline lineno="2995"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_c_transaction" kindref="compound">CTransaction</ref><sp/>tx;</highlight></codeline>
<codeline lineno="2996"><highlight class="normal"></highlight></codeline>
<codeline lineno="2997"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//stormnode<sp/>signed<sp/>transaction</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2998"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>allowFree<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2999"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_c_tx_in" kindref="compound">CTxIn</ref><sp/>vin;</highlight></codeline>
<codeline lineno="3000"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vector&lt;unsigned<sp/>char&gt;<sp/>vchSig;</highlight></codeline>
<codeline lineno="3001"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stdint_8h_1adec1df1b8b51cb32b77e5b86fff46471" kindref="member">int64_t</ref><sp/>sigTime;</highlight></codeline>
<codeline lineno="3002"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_c_inv" kindref="compound">CInv</ref><sp/>inv;</highlight></codeline>
<codeline lineno="3003"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_c_tx_d_b" kindref="compound">CTxDB</ref><sp/><ref refid="txdb-leveldb_8cpp_1a72eff8ae1d84de13daf97a61b8c02bc6" kindref="member">txdb</ref>(</highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3004"><highlight class="normal"></highlight></codeline>
<codeline lineno="3005"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(strCommand<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;tx&quot;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="3006"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_c_inv" kindref="compound">CInv</ref><sp/>inv(<ref refid="protocol_8h_1ac36f475ca5b446f4fde4c9b90bec77c8a0494732fc92c975f58783e224585c473" kindref="member">MSG_TX</ref>,<sp/>tx.<ref refid="class_c_transaction_1a3f8666d2a275c40da14bd5eaf47dc004" kindref="member">GetHash</ref>());</highlight></codeline>
<codeline lineno="3007"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Check<sp/>for<sp/>recently<sp/>rejected<sp/>(and<sp/>do<sp/>other<sp/>quick<sp/>existence<sp/>checks)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3008"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(AlreadyHave(txdb,<sp/>inv))</highlight></codeline>
<codeline lineno="3009"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3010"><highlight class="normal"></highlight></codeline>
<codeline lineno="3011"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vRecv<sp/>&gt;&gt;<sp/>tx;</highlight></codeline>
<codeline lineno="3012"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(strCommand<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;sstx&quot;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="3013"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_c_inv" kindref="compound">CInv</ref><sp/>inv(<ref refid="protocol_8h_1ac36f475ca5b446f4fde4c9b90bec77c8a44afcf030b5844ad73210599d00026fc" kindref="member">MSG_SSTX</ref>,<sp/>tx.<ref refid="class_c_transaction_1a3f8666d2a275c40da14bd5eaf47dc004" kindref="member">GetHash</ref>());</highlight></codeline>
<codeline lineno="3014"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Check<sp/>for<sp/>recently<sp/>rejected<sp/>(and<sp/>do<sp/>other<sp/>quick<sp/>existence<sp/>checks)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3015"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(AlreadyHave(txdb,<sp/>inv))</highlight></codeline>
<codeline lineno="3016"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3017"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//these<sp/>allow<sp/>sasternodes<sp/>to<sp/>publish<sp/>a<sp/>limited<sp/>amount<sp/>of<sp/>free<sp/>transactions</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3018"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vRecv<sp/>&gt;&gt;<sp/>tx<sp/>&gt;&gt;<sp/>vin<sp/>&gt;&gt;<sp/>vchSig<sp/>&gt;&gt;<sp/>sigTime;</highlight></codeline>
<codeline lineno="3019"><highlight class="normal"></highlight></codeline>
<codeline lineno="3020"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_c_stormnode" kindref="compound">CStormnode</ref>*<sp/>psn<sp/>=<sp/><ref refid="stormnodeman_8cpp_1a1e28814877e5fb4ed8113e3621ca13ff" kindref="member">snodeman</ref>.<ref refid="class_c_stormnode_man_1a346025e5a78a04ddfa80252ea1433c72" kindref="member">Find</ref>(vin);</highlight></codeline>
<codeline lineno="3021"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(psn<sp/>!=<sp/>NULL)</highlight></codeline>
<codeline lineno="3022"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3023"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!psn-&gt;<ref refid="class_c_stormnode_1a1d256b346d4bee1e4d7a68db4c5e659f" kindref="member">allowFreeTx</ref>){</highlight></codeline>
<codeline lineno="3024"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//multiple<sp/>peers<sp/>can<sp/>send<sp/>us<sp/>a<sp/>valid<sp/>stormnode<sp/>transaction</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3025"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="util_8cpp_1a2ba7badc843121dde40a6f109d224a42" kindref="member">fDebug</ref>)<sp/><ref refid="util_8h_1afc02c0a4258fedfb316be612bb659ba8" kindref="member">LogPrintf</ref>(</highlight><highlight class="stringliteral">&quot;sstx:<sp/>Stormnode<sp/>sending<sp/>too<sp/>many<sp/>transactions<sp/>%s\n&quot;</highlight><highlight class="normal">,<sp/>tx.<ref refid="class_c_transaction_1a3f8666d2a275c40da14bd5eaf47dc004" kindref="member">GetHash</ref>().<ref refid="classbase__uint_1ac3080a72402cadf28dbc9f9b69cc60be" kindref="member">ToString</ref>().c_str());</highlight></codeline>
<codeline lineno="3026"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3027"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3028"><highlight class="normal"></highlight></codeline>
<codeline lineno="3029"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>strMessage<sp/>=<sp/>tx.<ref refid="class_c_transaction_1a3f8666d2a275c40da14bd5eaf47dc004" kindref="member">GetHash</ref>().<ref refid="classbase__uint_1ac3080a72402cadf28dbc9f9b69cc60be" kindref="member">ToString</ref>()<sp/>+<sp/>boost::lexical_cast&lt;std::string&gt;(sigTime);</highlight></codeline>
<codeline lineno="3030"><highlight class="normal"></highlight></codeline>
<codeline lineno="3031"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>errorMessage<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3032"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!<ref refid="sandstorm_8cpp_1af6ac9f9a52a47b030c3d4a38d13af2b1" kindref="member">sandStormSigner</ref>.<ref refid="class_c_sand_storm_signer_1a8d2fb7c16fcfb1be633101dd5436d3ae" kindref="member">VerifyMessage</ref>(psn-&gt;<ref refid="class_c_stormnode_1a43efb713c0d8e8f01b9ea593e025856b" kindref="member">pubkey2</ref>,<sp/>vchSig,<sp/>strMessage,<sp/>errorMessage)){</highlight></codeline>
<codeline lineno="3033"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="util_8h_1afc02c0a4258fedfb316be612bb659ba8" kindref="member">LogPrintf</ref>(</highlight><highlight class="stringliteral">&quot;sstx:<sp/>Got<sp/>bad<sp/>stormnode<sp/>address<sp/>signature<sp/>%s<sp/>\n&quot;</highlight><highlight class="normal">,<sp/>vin.<ref refid="class_c_tx_in_1aeac9b3abd4b2d81e9ec4401d1383778d" kindref="member">ToString</ref>().c_str());</highlight></codeline>
<codeline lineno="3034"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//pfrom-&gt;Misbehaving(20);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3035"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3036"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3037"><highlight class="normal"></highlight></codeline>
<codeline lineno="3038"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="util_8h_1afc02c0a4258fedfb316be612bb659ba8" kindref="member">LogPrintf</ref>(</highlight><highlight class="stringliteral">&quot;sstx:<sp/>Got<sp/>Stormnode<sp/>transaction<sp/>%s\n&quot;</highlight><highlight class="normal">,<sp/>tx.<ref refid="class_c_transaction_1a3f8666d2a275c40da14bd5eaf47dc004" kindref="member">GetHash</ref>().<ref refid="classbase__uint_1ac3080a72402cadf28dbc9f9b69cc60be" kindref="member">ToString</ref>().c_str());</highlight></codeline>
<codeline lineno="3039"><highlight class="normal"></highlight></codeline>
<codeline lineno="3040"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>allowFree<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3041"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>psn-&gt;<ref refid="class_c_stormnode_1a1d256b346d4bee1e4d7a68db4c5e659f" kindref="member">allowFreeTx</ref><sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3042"><highlight class="normal"></highlight></codeline>
<codeline lineno="3043"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!<ref refid="sandstorm_8cpp_1ad2c083d07766489aaa2a282af5545eb5" kindref="member">mapSandstormBroadcastTxes</ref>.count(tx.<ref refid="class_c_transaction_1a3f8666d2a275c40da14bd5eaf47dc004" kindref="member">GetHash</ref>())){</highlight></codeline>
<codeline lineno="3044"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_c_sandstorm_broadcast_tx" kindref="compound">CSandstormBroadcastTx</ref><sp/>sstx;</highlight></codeline>
<codeline lineno="3045"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sstx.<ref refid="class_c_sandstorm_broadcast_tx_1ace6eee4d92b7fd4d98f8703d54d9b601" kindref="member">tx</ref><sp/>=<sp/>tx;</highlight></codeline>
<codeline lineno="3046"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sstx.<ref refid="class_c_sandstorm_broadcast_tx_1a7aa70aaddcdcc0a56c84f2a6e43e96bd" kindref="member">vin</ref><sp/>=<sp/>vin;</highlight></codeline>
<codeline lineno="3047"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sstx.<ref refid="class_c_sandstorm_broadcast_tx_1ad75aca79f3783c7f1e3f6a58f5ddc737" kindref="member">vchSig</ref><sp/>=<sp/>vchSig;</highlight></codeline>
<codeline lineno="3048"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sstx.<ref refid="class_c_sandstorm_broadcast_tx_1af0add2ec08b732bff4cae62031a53061" kindref="member">sigTime</ref><sp/>=<sp/>sigTime;</highlight></codeline>
<codeline lineno="3049"><highlight class="normal"></highlight></codeline>
<codeline lineno="3050"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="sandstorm_8cpp_1ad2c083d07766489aaa2a282af5545eb5" kindref="member">mapSandstormBroadcastTxes</ref>.insert(make_pair(tx.<ref refid="class_c_transaction_1a3f8666d2a275c40da14bd5eaf47dc004" kindref="member">GetHash</ref>(),<sp/>sstx));</highlight></codeline>
<codeline lineno="3051"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3052"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3053"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3054"><highlight class="normal"></highlight></codeline>
<codeline lineno="3055"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pfrom-&gt;AddInventoryKnown(inv);</highlight></codeline>
<codeline lineno="3056"><highlight class="normal"></highlight></codeline>
<codeline lineno="3057"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="sync_8h_1a911fe23f057c2fe5aad629162d6c99d0" kindref="member">LOCK</ref>(cs_main);</highlight></codeline>
<codeline lineno="3058"><highlight class="normal"></highlight></codeline>
<codeline lineno="3059"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>fMissingInputs<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3060"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_c_validation_state" kindref="compound">CValidationState</ref><sp/><ref refid="db__test_8cc_1a42432b4356adce5579ccf597f6e83e54" kindref="member">state</ref>;</highlight></codeline>
<codeline lineno="3061"><highlight class="normal"></highlight></codeline>
<codeline lineno="3062"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="net_8cpp_1a1791b4ef08160ee954e7a711a0587172" kindref="member">mapAlreadyAskedFor</ref>.erase(inv);<sp/></highlight></codeline>
<codeline lineno="3063"><highlight class="normal"></highlight></codeline>
<codeline lineno="3064"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="main_8cpp_1ad73f7fbd48c12a894b914e6a51940c64" kindref="member">AcceptToMemoryPool</ref>(<ref refid="main_8cpp_1a52890038ef379d29a1a8f3bd20dbe088" kindref="member">mempool</ref>,<sp/>state,<sp/>tx,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">,<sp/>&amp;fMissingInputs,<sp/>allowFree))</highlight></codeline>
<codeline lineno="3065"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3066"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="net_8cpp_1abe329205a15b55df86608f5f1964bdb1" kindref="member">RelayTransaction</ref>(tx,<sp/>inv.<ref refid="class_c_inv_1abfa04c38e9c0def9a2b09a9c43929744" kindref="member">hash</ref>);</highlight></codeline>
<codeline lineno="3067"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vWorkQueue.push_back(inv.<ref refid="class_c_inv_1abfa04c38e9c0def9a2b09a9c43929744" kindref="member">hash</ref>);</highlight></codeline>
<codeline lineno="3068"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vEraseQueue.push_back(inv.<ref refid="class_c_inv_1abfa04c38e9c0def9a2b09a9c43929744" kindref="member">hash</ref>);</highlight></codeline>
<codeline lineno="3069"><highlight class="normal"></highlight></codeline>
<codeline lineno="3070"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Recursively<sp/>process<sp/>any<sp/>orphan<sp/>transactions<sp/>that<sp/>depended<sp/>on<sp/>this<sp/>one</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3071"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>vWorkQueue.size();<sp/>i++)</highlight></codeline>
<codeline lineno="3072"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3073"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>map&lt;uint256,<sp/>set&lt;uint256&gt;<sp/>&gt;::iterator<sp/>itByPrev<sp/>=<sp/>mapOrphanTransactionsByPrev.find(vWorkQueue[i]);</highlight></codeline>
<codeline lineno="3074"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(itByPrev<sp/>==<sp/>mapOrphanTransactionsByPrev.end())</highlight></codeline>
<codeline lineno="3075"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3076"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(set&lt;uint256&gt;::iterator<sp/>mi<sp/>=<sp/>itByPrev-&gt;second.begin();</highlight></codeline>
<codeline lineno="3077"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mi<sp/>!=<sp/>itByPrev-&gt;second.end();</highlight></codeline>
<codeline lineno="3078"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++mi)</highlight></codeline>
<codeline lineno="3079"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3080"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classuint256" kindref="compound">uint256</ref>&amp;<sp/>orphanTxHash<sp/>=<sp/>*mi;</highlight></codeline>
<codeline lineno="3081"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_c_orphan_tx" kindref="compound">COrphanTx</ref>&amp;<sp/>orphanTx<sp/>=<sp/>mapOrphanTransactions[orphanTxHash];</highlight></codeline>
<codeline lineno="3082"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>fMissingInputs2<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3083"><highlight class="normal"></highlight></codeline>
<codeline lineno="3084"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="main_8cpp_1ad73f7fbd48c12a894b914e6a51940c64" kindref="member">AcceptToMemoryPool</ref>(<ref refid="main_8cpp_1a52890038ef379d29a1a8f3bd20dbe088" kindref="member">mempool</ref>,<sp/>state,<sp/>orphanTx.<ref refid="struct_c_orphan_tx_1aa797568f3a1168e96d3c51601eda5fdc" kindref="member">tx</ref>,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">,<sp/>&amp;fMissingInputs2))</highlight></codeline>
<codeline lineno="3085"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3086"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>LogPrint(</highlight><highlight class="stringliteral">&quot;mempool&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/>accepted<sp/>orphan<sp/>tx<sp/>%s\n&quot;</highlight><highlight class="normal">,<sp/>orphanTxHash.<ref refid="classbase__uint_1ac3080a72402cadf28dbc9f9b69cc60be" kindref="member">ToString</ref>());</highlight></codeline>
<codeline lineno="3087"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="net_8cpp_1abe329205a15b55df86608f5f1964bdb1" kindref="member">RelayTransaction</ref>(orphanTx.<ref refid="struct_c_orphan_tx_1aa797568f3a1168e96d3c51601eda5fdc" kindref="member">tx</ref>,<sp/>orphanTxHash);</highlight></codeline>
<codeline lineno="3088"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vWorkQueue.push_back(orphanTxHash);</highlight></codeline>
<codeline lineno="3089"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vEraseQueue.push_back(orphanTxHash);</highlight></codeline>
<codeline lineno="3090"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3091"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!fMissingInputs2)</highlight></codeline>
<codeline lineno="3092"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3093"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>invalid<sp/>or<sp/>too-little-fee<sp/>orphan</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3094"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vEraseQueue.push_back(orphanTxHash);</highlight></codeline>
<codeline lineno="3095"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>LogPrint(</highlight><highlight class="stringliteral">&quot;mempool&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/>removed<sp/>orphan<sp/>tx<sp/>%s\n&quot;</highlight><highlight class="normal">,<sp/>orphanTxHash.<ref refid="classbase__uint_1ac3080a72402cadf28dbc9f9b69cc60be" kindref="member">ToString</ref>());</highlight></codeline>
<codeline lineno="3096"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3097"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3098"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3099"><highlight class="normal"></highlight></codeline>
<codeline lineno="3100"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>BOOST_FOREACH(<ref refid="classuint256" kindref="compound">uint256</ref><sp/>hash,<sp/>vEraseQueue)</highlight></codeline>
<codeline lineno="3101"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EraseOrphanTx(hash);</highlight></codeline>
<codeline lineno="3102"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3103"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>else<sp/>if<sp/>(fMissingInputs)</highlight></codeline>
<codeline lineno="3104"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3105"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="main_8cpp_1aabd8ff89de652a080953f7cc6eccc979" kindref="member">AddOrphanTx</ref>(tx,<sp/>pfrom-&gt;GetId());</highlight></codeline>
<codeline lineno="3106"><highlight class="normal"></highlight></codeline>
<codeline lineno="3107"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>DoS<sp/>prevention:<sp/>do<sp/>not<sp/>allow<sp/>mapOrphanTransactions<sp/>to<sp/>grow<sp/>unbounded</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3108"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nEvicted<sp/>=<sp/><ref refid="main_8cpp_1a03c1ac9fc43feb8f1d67e92f17cceb38" kindref="member">LimitOrphanTxSize</ref>(MAX_ORPHAN_TRANSACTIONS);</highlight></codeline>
<codeline lineno="3109"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(nEvicted<sp/>&gt;<sp/>0)</highlight></codeline>
<codeline lineno="3110"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>LogPrint(</highlight><highlight class="stringliteral">&quot;mempool&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;mapOrphan<sp/>overflow,<sp/>removed<sp/>%u<sp/>tx\n&quot;</highlight><highlight class="normal">,<sp/>nEvicted);</highlight></codeline>
<codeline lineno="3111"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3112"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(tx.<ref refid="class_c_transaction_1a2a1fd6929add85d3df299249da78d015" kindref="member">nDoS</ref>)<sp/>pfrom-&gt;Misbehaving(tx.<ref refid="class_c_transaction_1a2a1fd6929add85d3df299249da78d015" kindref="member">nDoS</ref>);</highlight></codeline>
<codeline lineno="3113"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3114"><highlight class="normal"></highlight></codeline>
<codeline lineno="3115"><highlight class="normal"></highlight></codeline>
<codeline lineno="3116"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(strCommand<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;block&quot;</highlight><highlight class="normal"><sp/>&amp;&amp;<sp/>!fImporting<sp/>&amp;&amp;<sp/>!fReindex)<sp/></highlight><highlight class="comment">//<sp/>Ignore<sp/>blocks<sp/>received<sp/>while<sp/>importing</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3117"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3118"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_c_block" kindref="compound">CBlock</ref><sp/><ref refid="core_8h_1ace80c27428e237fe24f54ae915a36133" kindref="member">block</ref>;</highlight></codeline>
<codeline lineno="3119"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vRecv<sp/>&gt;&gt;<sp/><ref refid="core_8h_1ace80c27428e237fe24f54ae915a36133" kindref="member">block</ref>;</highlight></codeline>
<codeline lineno="3120"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classuint256" kindref="compound">uint256</ref><sp/>hashBlock<sp/>=<sp/>block.<ref refid="classuint256_1a2ed8bd4e54421a37430768374a7e91b3" kindref="member">GetHash</ref>();</highlight></codeline>
<codeline lineno="3121"><highlight class="normal"></highlight></codeline>
<codeline lineno="3122"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>LogPrint(</highlight><highlight class="stringliteral">&quot;net&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;received<sp/>block<sp/>%s\n&quot;</highlight><highlight class="normal">,<sp/>hashBlock.<ref refid="classbase__uint_1ac3080a72402cadf28dbc9f9b69cc60be" kindref="member">ToString</ref>());</highlight></codeline>
<codeline lineno="3123"><highlight class="normal"></highlight></codeline>
<codeline lineno="3124"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_c_inv" kindref="compound">CInv</ref><sp/>inv(<ref refid="protocol_8h_1ac36f475ca5b446f4fde4c9b90bec77c8a4cae15fd207d555331995cd5c57689c1" kindref="member">MSG_BLOCK</ref>,<sp/>hashBlock);</highlight></codeline>
<codeline lineno="3125"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pfrom-&gt;AddInventoryKnown(inv);</highlight></codeline>
<codeline lineno="3126"><highlight class="normal"></highlight></codeline>
<codeline lineno="3127"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="sync_8h_1a911fe23f057c2fe5aad629162d6c99d0" kindref="member">LOCK</ref>(cs_main);</highlight></codeline>
<codeline lineno="3128"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Remember<sp/>who<sp/>we<sp/>got<sp/>this<sp/>block<sp/>from.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3129"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mapBlockSource[inv.<ref refid="class_c_inv_1abfa04c38e9c0def9a2b09a9c43929744" kindref="member">hash</ref>]<sp/>=<sp/>pfrom-&gt;GetId();</highlight></codeline>
<codeline lineno="3130"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MarkBlockAsReceived(inv.<ref refid="class_c_inv_1abfa04c38e9c0def9a2b09a9c43929744" kindref="member">hash</ref>,<sp/>pfrom-&gt;GetId());</highlight></codeline>
<codeline lineno="3131"><highlight class="normal"></highlight></codeline>
<codeline lineno="3132"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="main_8cpp_1a7c8a7be3439bb5e1e40548a332a3cf29" kindref="member">ProcessBlock</ref>(pfrom,<sp/>&amp;block))</highlight><highlight class="comment">//TODO<sp/>(Amir):<sp/>Change<sp/>ProcessBlock?</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3133"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="net_8cpp_1a1791b4ef08160ee954e7a711a0587172" kindref="member">mapAlreadyAskedFor</ref>.erase(inv);<sp/></highlight><highlight class="comment">//TODO<sp/>(Amir):<sp/>Not<sp/>needed?</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3134"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(block.nDoS)<sp/>pfrom-&gt;Misbehaving(block.nDoS);</highlight></codeline>
<codeline lineno="3135"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="smessage_8cpp_1a6a38441245ee84417e8fb4a77860dc09" kindref="member">fSecMsgEnabled</ref>)</highlight></codeline>
<codeline lineno="3136"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="smessage_8cpp_1a9bd026d2eb7c6dee89c539e99ecac49f" kindref="member">SecureMsgScanBlock</ref>(block);</highlight></codeline>
<codeline lineno="3137"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3138"><highlight class="normal"></highlight></codeline>
<codeline lineno="3139"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>This<sp/>asymmetric<sp/>behavior<sp/>for<sp/>inbound<sp/>and<sp/>outbound<sp/>connections<sp/>was<sp/>introduced</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3140"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>to<sp/>prevent<sp/>a<sp/>fingerprinting<sp/>attack:<sp/>an<sp/>attacker<sp/>can<sp/>send<sp/>specific<sp/>fake<sp/>addresses</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3141"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>to<sp/>users&apos;<sp/>AddrMan<sp/>and<sp/>later<sp/>request<sp/>them<sp/>by<sp/>sending<sp/>getaddr<sp/>messages.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3142"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Making<sp/>users<sp/>(which<sp/>are<sp/>behind<sp/>NAT<sp/>and<sp/>can<sp/>only<sp/>make<sp/>outgoing<sp/>connections)<sp/>ignore</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3143"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>getaddr<sp/>message<sp/>mitigates<sp/>the<sp/>attack.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3144"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((strCommand<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;getaddr&quot;</highlight><highlight class="normal">)<sp/>&amp;&amp;<sp/>(pfrom-&gt;fInbound))</highlight></codeline>
<codeline lineno="3145"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3146"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Don&apos;t<sp/>return<sp/>addresses<sp/>older<sp/>than<sp/>nCutOff<sp/>timestamp</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3147"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stdint_8h_1adec1df1b8b51cb32b77e5b86fff46471" kindref="member">int64_t</ref><sp/>nCutOff<sp/>=<sp/><ref refid="util_8cpp_1a46fac5fba8ba905b5f9acb364f5d8c6f" kindref="member">GetTime</ref>()<sp/>-<sp/>(<ref refid="init_8cpp_1afdd10e8c0a44aad0b719c365fa3bb458" kindref="member">nNodeLifespan</ref><sp/>*<sp/>24<sp/>*<sp/>60<sp/>*<sp/>60);</highlight></codeline>
<codeline lineno="3148"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pfrom-&gt;vAddrToSend.clear();</highlight></codeline>
<codeline lineno="3149"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vector&lt;CAddress&gt;<sp/>vAddr<sp/>=<sp/><ref refid="net_8cpp_1ac575e3335fd15a19b567026491f8f01a" kindref="member">addrman</ref>.<ref refid="class_c_addr_man_1a69cc6138e696cf88de60925d26023bf2" kindref="member">GetAddr</ref>();</highlight></codeline>
<codeline lineno="3150"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>BOOST_FOREACH(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_c_address" kindref="compound">CAddress</ref><sp/>&amp;addr,<sp/>vAddr)</highlight></codeline>
<codeline lineno="3151"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if(addr.nTime<sp/>&gt;<sp/>nCutOff)</highlight></codeline>
<codeline lineno="3152"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pfrom-&gt;PushAddress(addr);</highlight></codeline>
<codeline lineno="3153"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3154"><highlight class="normal"></highlight></codeline>
<codeline lineno="3155"><highlight class="normal"></highlight></codeline>
<codeline lineno="3156"><highlight class="normal"><sp/><sp/><sp/><sp/>else<sp/>if<sp/>(strCommand<sp/>==<sp/>&quot;<ref refid="main_8cpp_1a52890038ef379d29a1a8f3bd20dbe088" kindref="member">mempool</ref>&quot;)</highlight></codeline>
<codeline lineno="3157"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3158"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="sync_8h_1a911fe23f057c2fe5aad629162d6c99d0" kindref="member">LOCK</ref>(cs_main);</highlight></codeline>
<codeline lineno="3159"><highlight class="normal"></highlight></codeline>
<codeline lineno="3160"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;uint256&gt;<sp/>vtxid;</highlight></codeline>
<codeline lineno="3161"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mempool.queryHashes(vtxid);</highlight></codeline>
<codeline lineno="3162"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vector&lt;CInv&gt;<sp/>vInv;</highlight></codeline>
<codeline lineno="3163"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>vtxid.size();<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="3164"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_c_inv" kindref="compound">CInv</ref><sp/>inv(<ref refid="protocol_8h_1ac36f475ca5b446f4fde4c9b90bec77c8a0494732fc92c975f58783e224585c473" kindref="member">MSG_TX</ref>,<sp/>vtxid[i]);</highlight></codeline>
<codeline lineno="3165"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vInv.push_back(inv);</highlight></codeline>
<codeline lineno="3166"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(i<sp/>==<sp/>(MAX_INV_SZ<sp/>-<sp/>1))</highlight></codeline>
<codeline lineno="3167"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3168"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3169"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(vInv.size()<sp/>&gt;<sp/>0)</highlight></codeline>
<codeline lineno="3170"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pfrom-&gt;PushMessage(</highlight><highlight class="stringliteral">&quot;inv&quot;</highlight><highlight class="normal">,<sp/>vInv);</highlight></codeline>
<codeline lineno="3171"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3172"><highlight class="normal"></highlight></codeline>
<codeline lineno="3173"><highlight class="normal"></highlight></codeline>
<codeline lineno="3174"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(strCommand<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;ping&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="3175"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3176"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stdint_8h_1aaa5d1cd013383c889537491c3cfd9aad" kindref="member">uint64_t</ref><sp/>nonce<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="3177"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vRecv<sp/>&gt;&gt;<sp/>nonce;</highlight></codeline>
<codeline lineno="3178"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Echo<sp/>the<sp/>message<sp/>back<sp/>with<sp/>the<sp/>nonce.<sp/>This<sp/>allows<sp/>for<sp/>two<sp/>useful<sp/>features:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3179"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3180"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>1)<sp/>A<sp/>remote<sp/>node<sp/>can<sp/>quickly<sp/>check<sp/>if<sp/>the<sp/>connection<sp/>is<sp/>operational</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3181"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>2)<sp/>Remote<sp/>nodes<sp/>can<sp/>measure<sp/>the<sp/>latency<sp/>of<sp/>the<sp/>network<sp/>thread.<sp/>If<sp/>this<sp/>node</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3182"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>is<sp/>overloaded<sp/>it<sp/>won&apos;t<sp/>respond<sp/>to<sp/>pings<sp/>quickly<sp/>and<sp/>the<sp/>remote<sp/>node<sp/>can</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3183"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>avoid<sp/>sending<sp/>us<sp/>more<sp/>work,<sp/>like<sp/>chain<sp/>download<sp/>requests.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3184"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3185"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>nonce<sp/>stops<sp/>the<sp/>remote<sp/>getting<sp/>confused<sp/>between<sp/>different<sp/>pings:<sp/>without</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3186"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>it,<sp/>if<sp/>the<sp/>remote<sp/>node<sp/>sends<sp/>a<sp/>ping<sp/>once<sp/>per<sp/>second<sp/>and<sp/>this<sp/>node<sp/>takes<sp/>5</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3187"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>seconds<sp/>to<sp/>respond<sp/>to<sp/>each,<sp/>the<sp/>5th<sp/>ping<sp/>the<sp/>remote<sp/>sends<sp/>would<sp/>appear<sp/>to</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3188"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>return<sp/>very<sp/>quickly.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3189"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pfrom-&gt;PushMessage(</highlight><highlight class="stringliteral">&quot;pong&quot;</highlight><highlight class="normal">,<sp/>nonce);</highlight></codeline>
<codeline lineno="3190"><highlight class="normal"></highlight></codeline>
<codeline lineno="3191"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3192"><highlight class="normal"></highlight></codeline>
<codeline lineno="3193"><highlight class="normal"></highlight></codeline>
<codeline lineno="3194"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(strCommand<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;pong&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="3195"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3196"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stdint_8h_1adec1df1b8b51cb32b77e5b86fff46471" kindref="member">int64_t</ref><sp/>pingUsecEnd<sp/>=<sp/>nTimeReceived;</highlight></codeline>
<codeline lineno="3197"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stdint_8h_1aaa5d1cd013383c889537491c3cfd9aad" kindref="member">uint64_t</ref><sp/>nonce<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="3198"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>nAvail<sp/>=<sp/>vRecv.<ref refid="class_c_data_stream_1a0483fe7bccf16aa88bf7272f18a0a7b0" kindref="member">in_avail</ref>();</highlight></codeline>
<codeline lineno="3199"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>bPingFinished<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3200"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>sProblem;</highlight></codeline>
<codeline lineno="3201"><highlight class="normal"></highlight></codeline>
<codeline lineno="3202"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(nAvail<sp/>&gt;=<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(nonce))<sp/>{</highlight></codeline>
<codeline lineno="3203"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vRecv<sp/>&gt;&gt;<sp/>nonce;</highlight></codeline>
<codeline lineno="3204"><highlight class="normal"></highlight></codeline>
<codeline lineno="3205"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Only<sp/>process<sp/>pong<sp/>message<sp/>if<sp/>there<sp/>is<sp/>an<sp/>outstanding<sp/>ping<sp/>(old<sp/>ping<sp/>without<sp/>nonce<sp/>should<sp/>never<sp/>pong)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3206"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(pfrom-&gt;nPingNonceSent<sp/>!=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="3207"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(nonce<sp/>==<sp/>pfrom-&gt;nPingNonceSent)<sp/>{</highlight></codeline>
<codeline lineno="3208"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Matching<sp/>pong<sp/>received,<sp/>this<sp/>ping<sp/>is<sp/>no<sp/>longer<sp/>outstanding</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3209"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bPingFinished<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3210"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stdint_8h_1adec1df1b8b51cb32b77e5b86fff46471" kindref="member">int64_t</ref><sp/>pingUsecTime<sp/>=<sp/>pingUsecEnd<sp/>-<sp/>pfrom-&gt;nPingUsecStart;</highlight></codeline>
<codeline lineno="3211"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(pingUsecTime<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="3212"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Successful<sp/>ping<sp/>time<sp/>measurement,<sp/>replace<sp/>previous</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3213"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pfrom-&gt;nPingUsecTime<sp/>=<sp/>pingUsecTime;</highlight></codeline>
<codeline lineno="3214"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="3215"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>This<sp/>should<sp/>never<sp/>happen</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3216"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sProblem<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;Timing<sp/>mishap&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3217"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3218"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="3219"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Nonce<sp/>mismatches<sp/>are<sp/>normal<sp/>when<sp/>pings<sp/>are<sp/>overlapping</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3220"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sProblem<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;Nonce<sp/>mismatch&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3221"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(nonce<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="3222"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>This<sp/>is<sp/>most<sp/>likely<sp/>a<sp/>bug<sp/>in<sp/>another<sp/>implementation<sp/>somewhere,<sp/>cancel<sp/>this<sp/>ping</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3223"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bPingFinished<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3224"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sProblem<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;Nonce<sp/>zero&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3225"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3226"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3227"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="3228"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sProblem<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;Unsolicited<sp/>pong<sp/>without<sp/>ping&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3229"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3230"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="3231"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>This<sp/>is<sp/>most<sp/>likely<sp/>a<sp/>bug<sp/>in<sp/>another<sp/>implementation<sp/>somewhere,<sp/>cancel<sp/>this<sp/>ping</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3232"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bPingFinished<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3233"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sProblem<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;Short<sp/>payload&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3234"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3235"><highlight class="normal"></highlight></codeline>
<codeline lineno="3236"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!(sProblem.empty()))<sp/>{</highlight></codeline>
<codeline lineno="3237"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>LogPrint(</highlight><highlight class="stringliteral">&quot;net&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;pong<sp/>%s<sp/>%s:<sp/>%s,<sp/>%x<sp/>expected,<sp/>%x<sp/>received,<sp/>%zu<sp/>bytes\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3238"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>,<sp/>pfrom-&gt;addr.ToString()</highlight></codeline>
<codeline lineno="3239"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>,<sp/>pfrom-&gt;strSubVer</highlight></codeline>
<codeline lineno="3240"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>,<sp/>sProblem</highlight></codeline>
<codeline lineno="3241"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>,<sp/>pfrom-&gt;nPingNonceSent</highlight></codeline>
<codeline lineno="3242"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>,<sp/>nonce</highlight></codeline>
<codeline lineno="3243"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>,<sp/>nAvail);</highlight></codeline>
<codeline lineno="3244"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3245"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(bPingFinished)<sp/>{</highlight></codeline>
<codeline lineno="3246"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pfrom-&gt;nPingNonceSent<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="3247"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3248"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3249"><highlight class="normal"></highlight></codeline>
<codeline lineno="3250"><highlight class="normal"></highlight></codeline>
<codeline lineno="3251"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(strCommand<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;alert&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="3252"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3253"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_c_alert" kindref="compound">CAlert</ref><sp/>alert;</highlight></codeline>
<codeline lineno="3254"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vRecv<sp/>&gt;&gt;<sp/>alert;</highlight></codeline>
<codeline lineno="3255"><highlight class="normal"></highlight></codeline>
<codeline lineno="3256"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classuint256" kindref="compound">uint256</ref><sp/>alertHash<sp/>=<sp/>alert.<ref refid="classuint256_1a2ed8bd4e54421a37430768374a7e91b3" kindref="member">GetHash</ref>();</highlight></codeline>
<codeline lineno="3257"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(pfrom-&gt;setKnown.count(alertHash)<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="3258"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3259"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(alert.ProcessAlert())</highlight></codeline>
<codeline lineno="3260"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3261"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Relay</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3262"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pfrom-&gt;setKnown.insert(alertHash);</highlight></codeline>
<codeline lineno="3263"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3264"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="sync_8h_1a911fe23f057c2fe5aad629162d6c99d0" kindref="member">LOCK</ref>(<ref refid="net_8cpp_1a8282e3a7948351ac96516573cd31f9d0" kindref="member">cs_vNodes</ref>);</highlight></codeline>
<codeline lineno="3265"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>BOOST_FOREACH(<ref refid="class_c_node" kindref="compound">CNode</ref>*<sp/>pnode,<sp/><ref refid="net_8cpp_1aa5a11f8873e230cea77bc7e91ee51918" kindref="member">vNodes</ref>)</highlight></codeline>
<codeline lineno="3266"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>alert.RelayTo(pnode);</highlight></codeline>
<codeline lineno="3267"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3268"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3269"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>else<sp/>{</highlight></codeline>
<codeline lineno="3270"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Small<sp/>DoS<sp/>penalty<sp/>so<sp/>peers<sp/>that<sp/>send<sp/>us<sp/>lots<sp/>of</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3271"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>duplicate/expired/invalid-signature/whatever<sp/>alerts</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3272"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>eventually<sp/>get<sp/>banned.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3273"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>This<sp/>isn&apos;t<sp/>a<sp/>Misbehaving(100)<sp/>(immediate<sp/>ban)<sp/>because<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3274"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>peer<sp/>might<sp/>be<sp/>an<sp/>older<sp/>or<sp/>different<sp/>implementation<sp/>with</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3275"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>a<sp/>different<sp/>signature<sp/>key,<sp/>etc.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3276"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pfrom-&gt;Misbehaving(10);</highlight></codeline>
<codeline lineno="3277"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3278"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3279"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3280"><highlight class="normal"></highlight></codeline>
<codeline lineno="3281"><highlight class="normal"></highlight></codeline>
<codeline lineno="3282"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3283"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3284"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="sandstorm_8cpp_1addaca1e09682bd47278ce6208b48fd75" kindref="member">sandStormPool</ref>.<ref refid="class_c_sandstorm_pool_1acf0b5b0e5703c88b7d3c9cb121ec6533" kindref="member">ProcessMessageSandstorm</ref>(pfrom,<sp/>strCommand,<sp/>vRecv);</highlight></codeline>
<codeline lineno="3285"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stormnodeman_8cpp_1a1e28814877e5fb4ed8113e3621ca13ff" kindref="member">snodeman</ref>.<ref refid="class_c_stormnode_man_1ae30d0b9b493e23c3d14ec48c77be7b6f" kindref="member">ProcessMessage</ref>(pfrom,<sp/>strCommand,<sp/>vRecv);</highlight></codeline>
<codeline lineno="3286"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stormnode-budget_8cpp_1ad9842d355854ad5602728a96cf684706" kindref="member">budget</ref>.<ref refid="class_c_budget_manager_1a3fc235d528e37ec1c66789f3bfed1878" kindref="member">ProcessMessage</ref>(pfrom,<sp/>strCommand,<sp/>vRecv);</highlight></codeline>
<codeline lineno="3287"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stormnode-payments_8cpp_1a1d528b1b067a2f669dfd90c513a97116" kindref="member">stormnodePayments</ref>.<ref refid="class_c_stormnode_payments_1a8dc55316a297daad51a03d4cf7b37d06" kindref="member">ProcessMessageStormnodePayments</ref>(pfrom,<sp/>strCommand,<sp/>vRecv);</highlight></codeline>
<codeline lineno="3288"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="instantx_8cpp_1aa516cb499ead2691d8ab216a499db5d0" kindref="member">ProcessMessageInstantX</ref>(pfrom,<sp/>strCommand,<sp/>vRecv);</highlight></codeline>
<codeline lineno="3289"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="spork_8cpp_1a3f9c24c1f4c012152fb4422ca981610a" kindref="member">ProcessSpork</ref>(pfrom,<sp/>strCommand,<sp/>vRecv);</highlight></codeline>
<codeline lineno="3290"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="smessage_8cpp_1a6a38441245ee84417e8fb4a77860dc09" kindref="member">fSecMsgEnabled</ref>)</highlight></codeline>
<codeline lineno="3291"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="smessage_8cpp_1a10fcf201b1c7066a376692b50988cdbf" kindref="member">SecureMsgReceiveData</ref>(pfrom,<sp/>strCommand,<sp/>vRecv);</highlight></codeline>
<codeline lineno="3292"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Ignore<sp/>unknown<sp/>commands<sp/>for<sp/>extensibility</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3293"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3294"><highlight class="normal"></highlight></codeline>
<codeline lineno="3295"><highlight class="normal"></highlight></codeline>
<codeline lineno="3296"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Update<sp/>the<sp/>last<sp/>seen<sp/>time<sp/>for<sp/>this<sp/>node&apos;s<sp/>address</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3297"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(pfrom-&gt;fNetworkNode)</highlight></codeline>
<codeline lineno="3298"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(strCommand<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;version&quot;</highlight><highlight class="normal"><sp/>||<sp/>strCommand<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;addr&quot;</highlight><highlight class="normal"><sp/>||<sp/>strCommand<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;inv&quot;</highlight><highlight class="normal"><sp/>||<sp/>strCommand<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;getdata&quot;</highlight><highlight class="normal"><sp/>||<sp/>strCommand<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;ping&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="3299"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="net_8cpp_1ad4aabaa937cd6f4b708c47dbbdb8ea60" kindref="member">AddressCurrentlyConnected</ref>(pfrom-&gt;addr);</highlight></codeline>
<codeline lineno="3300"><highlight class="normal"></highlight></codeline>
<codeline lineno="3301"><highlight class="normal"></highlight></codeline>
<codeline lineno="3302"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3303"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3304"><highlight class="normal"></highlight></codeline>
<codeline lineno="3305"><highlight class="normal"></highlight><highlight class="comment">//<sp/>requires<sp/>LOCK(cs_vRecvMsg)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3306" refid="main_8h_1a196f9318f02448b85b28d612698934fd" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="main_8cpp_1a196f9318f02448b85b28d612698934fd" kindref="member">ProcessMessages</ref>(<ref refid="class_c_node" kindref="compound">CNode</ref>*<sp/>pfrom)</highlight></codeline>
<codeline lineno="3307"><highlight class="normal">{</highlight></codeline>
<codeline lineno="3308"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//if<sp/>(fDebug)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3309"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>LogPrintf(&quot;ProcessMessages(%zu<sp/>messages)\n&quot;,<sp/>pfrom-&gt;vRecvMsg.size());</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3310"><highlight class="normal"></highlight></codeline>
<codeline lineno="3311"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3312"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Message<sp/>format</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3313"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/>(4)<sp/>message<sp/>start</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3314"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/>(12)<sp/>command</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3315"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/>(4)<sp/>size</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3316"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/>(4)<sp/>checksum</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3317"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/>(x)<sp/>data</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3318"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3319"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>fOk<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3320"><highlight class="normal"></highlight></codeline>
<codeline lineno="3321"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!pfrom-&gt;<ref refid="class_c_node_1a9649c1f27ff0d8f0ba89eb1ea5bee139" kindref="member">vRecvGetData</ref>.empty())</highlight></codeline>
<codeline lineno="3322"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ProcessGetData(pfrom);</highlight></codeline>
<codeline lineno="3323"><highlight class="normal"></highlight></codeline>
<codeline lineno="3324"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>this<sp/>maintains<sp/>the<sp/>order<sp/>of<sp/>responses</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3325"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!pfrom-&gt;<ref refid="class_c_node_1a9649c1f27ff0d8f0ba89eb1ea5bee139" kindref="member">vRecvGetData</ref>.empty())<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>fOk;</highlight></codeline>
<codeline lineno="3326"><highlight class="normal"></highlight></codeline>
<codeline lineno="3327"><highlight class="normal"><sp/><sp/><sp/><sp/>std::deque&lt;CNetMessage&gt;::iterator<sp/>it<sp/>=<sp/>pfrom-&gt;<ref refid="class_c_node_1a015361812daa5b6ebb9a5692ddf67a54" kindref="member">vRecvMsg</ref>.begin();</highlight></codeline>
<codeline lineno="3328"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(!pfrom-&gt;<ref refid="class_c_node_1af2f7ea958313974e8a948292f060922e" kindref="member">fDisconnect</ref><sp/>&amp;&amp;<sp/>it<sp/>!=<sp/>pfrom-&gt;<ref refid="class_c_node_1a015361812daa5b6ebb9a5692ddf67a54" kindref="member">vRecvMsg</ref>.end())<sp/>{</highlight></codeline>
<codeline lineno="3329"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Don&apos;t<sp/>bother<sp/>if<sp/>send<sp/>buffer<sp/>is<sp/>too<sp/>full<sp/>to<sp/>respond<sp/>anyway</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3330"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(pfrom-&gt;<ref refid="class_c_node_1a3c99b7e2b0e53feb58f6859453456f74" kindref="member">nSendSize</ref><sp/>&gt;=<sp/><ref refid="net_8h_1a13f289d6233bd32b78a38793f76bdccb" kindref="member">SendBufferSize</ref>())</highlight></codeline>
<codeline lineno="3331"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3332"><highlight class="normal"></highlight></codeline>
<codeline lineno="3333"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>get<sp/>next<sp/>message</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3334"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_c_net_message" kindref="compound">CNetMessage</ref>&amp;<sp/>msg<sp/>=<sp/>*it;</highlight></codeline>
<codeline lineno="3335"><highlight class="normal"></highlight></codeline>
<codeline lineno="3336"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//if<sp/>(fDebug)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3337"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>LogPrintf(&quot;ProcessMessages(message<sp/>%u<sp/>msgsz,<sp/>%zu<sp/>bytes,<sp/>complete:%s)\n&quot;,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3338"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>msg.hdr.nMessageSize,<sp/>msg.vRecv.size(),</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3339"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>msg.complete()<sp/>?<sp/>&quot;Y&quot;<sp/>:<sp/>&quot;N&quot;);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3340"><highlight class="normal"></highlight></codeline>
<codeline lineno="3341"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>end,<sp/>if<sp/>an<sp/>incomplete<sp/>message<sp/>is<sp/>found</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3342"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!msg.<ref refid="class_c_net_message_1a440150fa0e6a84699780048baca55da8" kindref="member">complete</ref>())</highlight></codeline>
<codeline lineno="3343"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3344"><highlight class="normal"></highlight></codeline>
<codeline lineno="3345"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>at<sp/>this<sp/>point,<sp/>any<sp/>failure<sp/>means<sp/>we<sp/>can<sp/>delete<sp/>the<sp/>current<sp/>message</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3346"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>it++;</highlight></codeline>
<codeline lineno="3347"><highlight class="normal"></highlight></codeline>
<codeline lineno="3348"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Scan<sp/>for<sp/>message<sp/>start</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3349"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(memcmp(msg.<ref refid="class_c_net_message_1ae7215dca62862a3688f7eeb94646c377" kindref="member">hdr</ref>.<ref refid="class_c_message_header_1a4284bf1d2fd792af89e1c93b7e6e274e" kindref="member">pchMessageStart</ref>,<sp/><ref refid="chainparams_8cpp_1ace5c5b706d71a324a417dd2db394fd4a" kindref="member">Params</ref>().MessageStart(),<sp/><ref refid="chainparams_8h_1a6bcadada595cc3da13e6a04be1715917" kindref="member">MESSAGE_START_SIZE</ref>)<sp/>!=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="3350"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="util_8h_1afc02c0a4258fedfb316be612bb659ba8" kindref="member">LogPrintf</ref>(</highlight><highlight class="stringliteral">&quot;\n\nPROCESSMESSAGE:<sp/>INVALID<sp/>MESSAGESTART\n\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3351"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fOk<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3352"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3353"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3354"><highlight class="normal"></highlight></codeline>
<codeline lineno="3355"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Read<sp/>header</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3356"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_c_message_header" kindref="compound">CMessageHeader</ref>&amp;<sp/>hdr<sp/>=<sp/>msg.<ref refid="class_c_net_message_1ae7215dca62862a3688f7eeb94646c377" kindref="member">hdr</ref>;</highlight></codeline>
<codeline lineno="3357"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!hdr.<ref refid="class_c_message_header_1a21f5760d034d4a040b00d6c34e927be0" kindref="member">IsValid</ref>())</highlight></codeline>
<codeline lineno="3358"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3359"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="util_8h_1afc02c0a4258fedfb316be612bb659ba8" kindref="member">LogPrintf</ref>(</highlight><highlight class="stringliteral">&quot;\n\nPROCESSMESSAGE:<sp/>ERRORS<sp/>IN<sp/>HEADER<sp/>%s\n\n\n&quot;</highlight><highlight class="normal">,<sp/>hdr.<ref refid="class_c_message_header_1a71f022e98bff1acd65be4b75ce4cc038" kindref="member">GetCommand</ref>());</highlight></codeline>
<codeline lineno="3360"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3361"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3362"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>strCommand<sp/>=<sp/>hdr.<ref refid="class_c_message_header_1a71f022e98bff1acd65be4b75ce4cc038" kindref="member">GetCommand</ref>();</highlight></codeline>
<codeline lineno="3363"><highlight class="normal"></highlight></codeline>
<codeline lineno="3364"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Message<sp/>size</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3365"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nMessageSize<sp/>=<sp/>hdr.<ref refid="class_c_message_header_1a67ccb9f1f23af69e309a8d6c8bfff751" kindref="member">nMessageSize</ref>;</highlight></codeline>
<codeline lineno="3366"><highlight class="normal"></highlight></codeline>
<codeline lineno="3367"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Checksum</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3368"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_c_data_stream" kindref="compound">CDataStream</ref>&amp;<sp/>vRecv<sp/>=<sp/>msg.<ref refid="class_c_net_message_1a1a25c16099d01362e1663390a2e06d1a" kindref="member">vRecv</ref>;</highlight></codeline>
<codeline lineno="3369"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classuint256" kindref="compound">uint256</ref><sp/>hash<sp/>=<sp/><ref refid="hash_8h_1ab3f6c437460137530d86e09c2c102e99" kindref="member">Hash</ref>(vRecv.<ref refid="class_c_data_stream_1a5b9e70188c662f4e9496066472af213e" kindref="member">begin</ref>(),<sp/>vRecv.<ref refid="class_c_data_stream_1a5b9e70188c662f4e9496066472af213e" kindref="member">begin</ref>()<sp/>+<sp/>nMessageSize);</highlight></codeline>
<codeline lineno="3370"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nChecksum<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="3371"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>memcpy(&amp;nChecksum,<sp/>&amp;hash,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(nChecksum));</highlight></codeline>
<codeline lineno="3372"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(nChecksum<sp/>!=<sp/>hdr.<ref refid="class_c_message_header_1ab9c6bec3694e2c110b4f358af9e55984" kindref="member">nChecksum</ref>)</highlight></codeline>
<codeline lineno="3373"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3374"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="util_8h_1afc02c0a4258fedfb316be612bb659ba8" kindref="member">LogPrintf</ref>(</highlight><highlight class="stringliteral">&quot;ProcessMessages(%s,<sp/>%u<sp/>bytes)<sp/>:<sp/>CHECKSUM<sp/>ERROR<sp/>nChecksum=%08x<sp/>hdr.nChecksum=%08x\n&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="3375"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>strCommand,<sp/>nMessageSize,<sp/>nChecksum,<sp/>hdr.<ref refid="class_c_message_header_1ab9c6bec3694e2c110b4f358af9e55984" kindref="member">nChecksum</ref>);</highlight></codeline>
<codeline lineno="3376"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3377"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3378"><highlight class="normal"></highlight></codeline>
<codeline lineno="3379"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Process<sp/>message</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3380"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>fRet<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3381"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">try</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3382"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3383"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fRet<sp/>=<sp/>ProcessMessage(pfrom,<sp/>strCommand,<sp/>vRecv,<sp/>msg.<ref refid="class_c_net_message_1a99d5bbca862ac4b7a88b71a7b679decc" kindref="member">nTime</ref>);</highlight></codeline>
<codeline lineno="3384"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>boost::this_thread::interruption_point();</highlight></codeline>
<codeline lineno="3385"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3386"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">catch</highlight><highlight class="normal"><sp/>(std::ios_base::failure&amp;<sp/>e)</highlight></codeline>
<codeline lineno="3387"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3388"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(strstr(e.what(),<sp/></highlight><highlight class="stringliteral">&quot;end<sp/>of<sp/>data&quot;</highlight><highlight class="normal">))</highlight></codeline>
<codeline lineno="3389"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3390"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Allow<sp/>exceptions<sp/>from<sp/>under-length<sp/>message<sp/>on<sp/>vRecv</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3391"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="util_8h_1afc02c0a4258fedfb316be612bb659ba8" kindref="member">LogPrintf</ref>(</highlight><highlight class="stringliteral">&quot;ProcessMessages(%s,<sp/>%u<sp/>bytes)<sp/>:<sp/>Exception<sp/>&apos;%s&apos;<sp/>caught,<sp/>normally<sp/>caused<sp/>by<sp/>a<sp/>message<sp/>being<sp/>shorter<sp/>than<sp/>its<sp/>stated<sp/>length\n&quot;</highlight><highlight class="normal">,<sp/>strCommand,<sp/>nMessageSize,<sp/>e.what());</highlight></codeline>
<codeline lineno="3392"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3393"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(strstr(e.what(),<sp/></highlight><highlight class="stringliteral">&quot;size<sp/>too<sp/>large&quot;</highlight><highlight class="normal">))</highlight></codeline>
<codeline lineno="3394"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3395"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Allow<sp/>exceptions<sp/>from<sp/>over-long<sp/>size</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3396"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="util_8h_1afc02c0a4258fedfb316be612bb659ba8" kindref="member">LogPrintf</ref>(</highlight><highlight class="stringliteral">&quot;ProcessMessages(%s,<sp/>%u<sp/>bytes)<sp/>:<sp/>Exception<sp/>&apos;%s&apos;<sp/>caught\n&quot;</highlight><highlight class="normal">,<sp/>strCommand,<sp/>nMessageSize,<sp/>e.what());</highlight></codeline>
<codeline lineno="3397"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3398"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3399"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3400"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="util_8cpp_1a477231880f761159de1567ad6fb98fac" kindref="member">PrintExceptionContinue</ref>(&amp;e,<sp/></highlight><highlight class="stringliteral">&quot;ProcessMessages()&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3401"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3402"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3403"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">catch</highlight><highlight class="normal"><sp/>(boost::thread_interrupted)<sp/>{</highlight></codeline>
<codeline lineno="3404"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3405"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3406"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">catch</highlight><highlight class="normal"><sp/>(std::exception&amp;<sp/>e)<sp/>{</highlight></codeline>
<codeline lineno="3407"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="util_8cpp_1a477231880f761159de1567ad6fb98fac" kindref="member">PrintExceptionContinue</ref>(&amp;e,<sp/></highlight><highlight class="stringliteral">&quot;ProcessMessages()&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3408"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">catch</highlight><highlight class="normal"><sp/>(...)<sp/>{</highlight></codeline>
<codeline lineno="3409"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="util_8cpp_1a477231880f761159de1567ad6fb98fac" kindref="member">PrintExceptionContinue</ref>(NULL,<sp/></highlight><highlight class="stringliteral">&quot;ProcessMessages()&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3410"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3411"><highlight class="normal"></highlight></codeline>
<codeline lineno="3412"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!fRet)</highlight></codeline>
<codeline lineno="3413"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="util_8h_1afc02c0a4258fedfb316be612bb659ba8" kindref="member">LogPrintf</ref>(</highlight><highlight class="stringliteral">&quot;ProcessMessage(%s,<sp/>%u<sp/>bytes)<sp/>FAILED\n&quot;</highlight><highlight class="normal">,<sp/>strCommand,<sp/>nMessageSize);</highlight></codeline>
<codeline lineno="3414"><highlight class="normal"></highlight></codeline>
<codeline lineno="3415"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3416"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3417"><highlight class="normal"></highlight></codeline>
<codeline lineno="3418"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>In<sp/>case<sp/>the<sp/>connection<sp/>got<sp/>shut<sp/>down,<sp/>its<sp/>receive<sp/>buffer<sp/>was<sp/>wiped</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3419"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!pfrom-&gt;<ref refid="class_c_node_1af2f7ea958313974e8a948292f060922e" kindref="member">fDisconnect</ref>)</highlight></codeline>
<codeline lineno="3420"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pfrom-&gt;<ref refid="class_c_node_1a015361812daa5b6ebb9a5692ddf67a54" kindref="member">vRecvMsg</ref>.erase(pfrom-&gt;<ref refid="class_c_node_1a015361812daa5b6ebb9a5692ddf67a54" kindref="member">vRecvMsg</ref>.begin(),<sp/>it);</highlight></codeline>
<codeline lineno="3421"><highlight class="normal"></highlight></codeline>
<codeline lineno="3422"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>fOk;</highlight></codeline>
<codeline lineno="3423"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3424"><highlight class="normal"></highlight></codeline>
<codeline lineno="3425"><highlight class="normal"></highlight></codeline>
<codeline lineno="3426" refid="main_8h_1a711a5bdb30c9c9bbdc83011b1cbbe2f3" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="main_8cpp_1a711a5bdb30c9c9bbdc83011b1cbbe2f3" kindref="member">SendMessages</ref>(<ref refid="class_c_node" kindref="compound">CNode</ref>*<sp/>pto,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>fSendTrickle)</highlight></codeline>
<codeline lineno="3427"><highlight class="normal">{</highlight></codeline>
<codeline lineno="3428"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="sync_8h_1aca08e7299069c2d60b8aa726fc550612" kindref="member">TRY_LOCK</ref>(cs_main,<sp/>lockMain);</highlight></codeline>
<codeline lineno="3429"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(lockMain)<sp/>{</highlight></codeline>
<codeline lineno="3430"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Don&apos;t<sp/>send<sp/>anything<sp/>until<sp/>we<sp/>get<sp/>their<sp/>version<sp/>message</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3431"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(pto-&gt;<ref refid="class_c_node_1a99173eb3cef17e699ba21a5249ac33d2" kindref="member">nVersion</ref><sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="3432"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3433"><highlight class="normal"></highlight></codeline>
<codeline lineno="3434"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3435"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Message:<sp/>ping</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3436"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3437"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>pingSend<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3438"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(pto-&gt;<ref refid="class_c_node_1aa1e9c1dc1d5cf806b9be0af155c0bf90" kindref="member">fPingQueued</ref>)<sp/>{</highlight></codeline>
<codeline lineno="3439"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>RPC<sp/>ping<sp/>request<sp/>by<sp/>user</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3440"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pingSend<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3441"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3442"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(pto-&gt;<ref refid="class_c_node_1a9a077fbd09ddee1d81f027bc01a4ec68" kindref="member">nPingNonceSent</ref><sp/>==<sp/>0<sp/>&amp;&amp;<sp/>pto-&gt;<ref refid="class_c_node_1a8352aa332af726ff117fb890c4dd3869" kindref="member">nPingUsecStart</ref><sp/>+<sp/>PING_INTERVAL<sp/>*<sp/>1000000<sp/>&lt;<sp/><ref refid="util_8h_1a0c5a06b50cd805b1923552114494c029" kindref="member">GetTimeMicros</ref>())<sp/>{</highlight></codeline>
<codeline lineno="3443"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Ping<sp/>automatically<sp/>sent<sp/>as<sp/>a<sp/>latency<sp/>probe<sp/>&amp;<sp/>keepalive.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3444"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pingSend<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3445"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3446"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(pingSend)<sp/>{</highlight></codeline>
<codeline lineno="3447"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stdint_8h_1aaa5d1cd013383c889537491c3cfd9aad" kindref="member">uint64_t</ref><sp/>nonce<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="3448"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(nonce<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="3449"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="util_8cpp_1acf52c2aa8213c7b15e26594a2264ed8a" kindref="member">GetRandBytes</ref>((</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*)&amp;nonce,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(nonce));</highlight></codeline>
<codeline lineno="3450"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3451"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pto-&gt;<ref refid="class_c_node_1aa1e9c1dc1d5cf806b9be0af155c0bf90" kindref="member">fPingQueued</ref><sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3452"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pto-&gt;<ref refid="class_c_node_1a8352aa332af726ff117fb890c4dd3869" kindref="member">nPingUsecStart</ref><sp/>=<sp/><ref refid="util_8h_1a0c5a06b50cd805b1923552114494c029" kindref="member">GetTimeMicros</ref>();</highlight></codeline>
<codeline lineno="3453"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pto-&gt;<ref refid="class_c_node_1a9a077fbd09ddee1d81f027bc01a4ec68" kindref="member">nPingNonceSent</ref><sp/>=<sp/>nonce;</highlight></codeline>
<codeline lineno="3454"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pto-&gt;<ref refid="class_c_node_1a204fda3d33404cb37698c085b1583ab2" kindref="member">PushMessage</ref>(</highlight><highlight class="stringliteral">&quot;ping&quot;</highlight><highlight class="normal">,<sp/>nonce);</highlight></codeline>
<codeline lineno="3455"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3456"><highlight class="normal"></highlight></codeline>
<codeline lineno="3457"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="sync_8h_1aca08e7299069c2d60b8aa726fc550612" kindref="member">TRY_LOCK</ref>(cs_main,<sp/>lockMain);<sp/></highlight><highlight class="comment">//<sp/>Acquire<sp/>cs_main<sp/>for<sp/>IsInitialBlockDownload()<sp/>and<sp/>CNodeState()</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3458"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!lockMain)</highlight></codeline>
<codeline lineno="3459"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3460"><highlight class="normal"></highlight></codeline>
<codeline lineno="3461"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Start<sp/>block<sp/>sync</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3462"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(pto-&gt;<ref refid="class_c_node_1a4009c240ccb6d085ae57e8cf4d4c2cb6" kindref="member">fStartSync</ref><sp/>&amp;&amp;<sp/>!fImporting<sp/>&amp;&amp;<sp/>!fReindex)<sp/>{</highlight></codeline>
<codeline lineno="3463"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pto-&gt;<ref refid="class_c_node_1a4009c240ccb6d085ae57e8cf4d4c2cb6" kindref="member">fStartSync</ref><sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3464"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="main_8cpp_1a28098619373dbab927d25bca3cea8a4a" kindref="member">PushGetBlocks</ref>(pto,<sp/>pindexBest,<sp/><ref refid="classuint256" kindref="compound">uint256</ref>(0));</highlight></codeline>
<codeline lineno="3465"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3466"><highlight class="normal"></highlight></codeline>
<codeline lineno="3467"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Resend<sp/>wallet<sp/>transactions<sp/>that<sp/>haven&apos;t<sp/>gotten<sp/>in<sp/>a<sp/>block<sp/>yet</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3468"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Except<sp/>during<sp/>reindex,<sp/>importing<sp/>and<sp/>IBD,<sp/>when<sp/>old<sp/>wallet</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3469"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>transactions<sp/>become<sp/>unconfirmed<sp/>and<sp/>spams<sp/>other<sp/>nodes.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3470"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!fReindex<sp/>&amp;&amp;<sp/>!fImporting<sp/>&amp;&amp;<sp/>!<ref refid="chain_8cpp_1a5edcd96316574fd4a7f3ae0922a5cfd6" kindref="member">IsInitialBlockDownload</ref>())</highlight></codeline>
<codeline lineno="3471"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3472"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="main_8cpp_1ac15123f662a13528a4ef95ddbd952bee" kindref="member">ResendWalletTransactions</ref>();</highlight></codeline>
<codeline lineno="3473"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3474"><highlight class="normal"></highlight></codeline>
<codeline lineno="3475"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Address<sp/>refresh<sp/>broadcast</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3476"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="stdint_8h_1adec1df1b8b51cb32b77e5b86fff46471" kindref="member">int64_t</ref><sp/>nLastRebroadcast;</highlight></codeline>
<codeline lineno="3477"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="chain_8cpp_1a5edcd96316574fd4a7f3ae0922a5cfd6" kindref="member">IsInitialBlockDownload</ref>()<sp/>&amp;&amp;<sp/>(<ref refid="util_8cpp_1a46fac5fba8ba905b5f9acb364f5d8c6f" kindref="member">GetTime</ref>()<sp/>-<sp/>nLastRebroadcast<sp/>&gt;<sp/>24<sp/>*<sp/>60<sp/>*<sp/>60))</highlight></codeline>
<codeline lineno="3478"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3479"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3480"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="sync_8h_1a911fe23f057c2fe5aad629162d6c99d0" kindref="member">LOCK</ref>(<ref refid="net_8cpp_1a8282e3a7948351ac96516573cd31f9d0" kindref="member">cs_vNodes</ref>);</highlight></codeline>
<codeline lineno="3481"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>BOOST_FOREACH(<ref refid="class_c_node" kindref="compound">CNode</ref>*<sp/>pnode,<sp/><ref refid="net_8cpp_1aa5a11f8873e230cea77bc7e91ee51918" kindref="member">vNodes</ref>)</highlight></codeline>
<codeline lineno="3482"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3483"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Periodically<sp/>clear<sp/>setAddrKnown<sp/>to<sp/>allow<sp/>refresh<sp/>broadcasts</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3484"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(nLastRebroadcast)</highlight></codeline>
<codeline lineno="3485"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pnode-&gt;<ref refid="class_c_node_1ac21266ce880bd36b98ba7cfcc447a30f" kindref="member">setAddrKnown</ref>.<ref refid="classmruset_1ac7a85b54646e9d9d1962ce7f30b2a1fc" kindref="member">clear</ref>();</highlight></codeline>
<codeline lineno="3486"><highlight class="normal"></highlight></codeline>
<codeline lineno="3487"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Rebroadcast<sp/>our<sp/>address</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3488"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="util_8cpp_1a53f30a9fc322fa65a5c4e3732e4ad410" kindref="member">fNoListen</ref>)</highlight></codeline>
<codeline lineno="3489"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3490"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_c_address" kindref="compound">CAddress</ref><sp/>addr<sp/>=<sp/><ref refid="net_8cpp_1a66f5f0bc1dad5cfe429157d5637a93dc" kindref="member">GetLocalAddress</ref>(&amp;pnode-&gt;<ref refid="class_c_node_1a3993ecb1de2a2135a3cf0904346a6f88" kindref="member">addr</ref>);</highlight></codeline>
<codeline lineno="3491"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(addr.<ref refid="class_c_net_addr_1a35131b2792434d1c9a860c583b610ab6" kindref="member">IsRoutable</ref>())</highlight></codeline>
<codeline lineno="3492"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pnode-&gt;<ref refid="class_c_node_1a06950a5ce265a1d4df1aad7f28e6fde8" kindref="member">PushAddress</ref>(addr);</highlight></codeline>
<codeline lineno="3493"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3494"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3495"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3496"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nLastRebroadcast<sp/>=<sp/><ref refid="util_8cpp_1a46fac5fba8ba905b5f9acb364f5d8c6f" kindref="member">GetTime</ref>();</highlight></codeline>
<codeline lineno="3497"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3498"><highlight class="normal"></highlight></codeline>
<codeline lineno="3499"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3500"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Message:<sp/>addr</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3501"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3502"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fSendTrickle)</highlight></codeline>
<codeline lineno="3503"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3504"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vector&lt;CAddress&gt;<sp/>vAddr;</highlight></codeline>
<codeline lineno="3505"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vAddr.reserve(pto-&gt;<ref refid="class_c_node_1a9b2d9b9182ff111c79f704594c4aa2e1" kindref="member">vAddrToSend</ref>.size());</highlight></codeline>
<codeline lineno="3506"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>BOOST_FOREACH(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_c_address" kindref="compound">CAddress</ref>&amp;<sp/>addr,<sp/>pto-&gt;<ref refid="class_c_node_1a9b2d9b9182ff111c79f704594c4aa2e1" kindref="member">vAddrToSend</ref>)</highlight></codeline>
<codeline lineno="3507"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3508"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>returns<sp/>true<sp/>if<sp/>wasn&apos;t<sp/>already<sp/>contained<sp/>in<sp/>the<sp/>set</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3509"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(pto-&gt;<ref refid="class_c_node_1ac21266ce880bd36b98ba7cfcc447a30f" kindref="member">setAddrKnown</ref>.<ref refid="classmruset_1af2e0dfe9d8b029bde78457797cdc42a9" kindref="member">insert</ref>(addr).second)</highlight></codeline>
<codeline lineno="3510"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3511"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vAddr.push_back(addr);</highlight></codeline>
<codeline lineno="3512"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>receiver<sp/>rejects<sp/>addr<sp/>messages<sp/>larger<sp/>than<sp/>1000</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3513"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(vAddr.size()<sp/>&gt;=<sp/>1000)</highlight></codeline>
<codeline lineno="3514"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3515"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pto-&gt;<ref refid="class_c_node_1a204fda3d33404cb37698c085b1583ab2" kindref="member">PushMessage</ref>(</highlight><highlight class="stringliteral">&quot;addr&quot;</highlight><highlight class="normal">,<sp/>vAddr);</highlight></codeline>
<codeline lineno="3516"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vAddr.clear();</highlight></codeline>
<codeline lineno="3517"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3518"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3519"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3520"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pto-&gt;<ref refid="class_c_node_1a9b2d9b9182ff111c79f704594c4aa2e1" kindref="member">vAddrToSend</ref>.clear();</highlight></codeline>
<codeline lineno="3521"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!vAddr.empty())</highlight></codeline>
<codeline lineno="3522"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pto-&gt;<ref refid="class_c_node_1a204fda3d33404cb37698c085b1583ab2" kindref="member">PushMessage</ref>(</highlight><highlight class="stringliteral">&quot;addr&quot;</highlight><highlight class="normal">,<sp/>vAddr);</highlight></codeline>
<codeline lineno="3523"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3524"><highlight class="normal"></highlight></codeline>
<codeline lineno="3525"><highlight class="normal"></highlight></codeline>
<codeline lineno="3526"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3527"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Message:<sp/>inventory</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3528"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3529"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vector&lt;CInv&gt;<sp/>vInv;</highlight></codeline>
<codeline lineno="3530"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vector&lt;CInv&gt;<sp/>vInvWait;</highlight></codeline>
<codeline lineno="3531"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3532"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="sync_8h_1a911fe23f057c2fe5aad629162d6c99d0" kindref="member">LOCK</ref>(pto-&gt;<ref refid="class_c_node_1a1e8b0784cc82f33edc2dc4e2834d1ff0" kindref="member">cs_inventory</ref>);</highlight></codeline>
<codeline lineno="3533"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vInv.reserve(pto-&gt;<ref refid="class_c_node_1abcd24c9478bc1ab5ba6de6b369080cec" kindref="member">vInventoryToSend</ref>.size());</highlight></codeline>
<codeline lineno="3534"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vInvWait.reserve(pto-&gt;<ref refid="class_c_node_1abcd24c9478bc1ab5ba6de6b369080cec" kindref="member">vInventoryToSend</ref>.size());</highlight></codeline>
<codeline lineno="3535"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>BOOST_FOREACH(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_c_inv" kindref="compound">CInv</ref>&amp;<sp/>inv,<sp/>pto-&gt;<ref refid="class_c_node_1abcd24c9478bc1ab5ba6de6b369080cec" kindref="member">vInventoryToSend</ref>)</highlight></codeline>
<codeline lineno="3536"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3537"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(pto-&gt;<ref refid="class_c_node_1ae15aa9a971040800c26bc87b1250220f" kindref="member">setInventoryKnown</ref>.<ref refid="classmruset_1abf122b956abffbf3ce190c80d215660c" kindref="member">count</ref>(inv))</highlight></codeline>
<codeline lineno="3538"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3539"><highlight class="normal"></highlight></codeline>
<codeline lineno="3540"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>trickle<sp/>out<sp/>tx<sp/>inv<sp/>to<sp/>protect<sp/>privacy</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3541"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(inv.<ref refid="class_c_inv_1a2da8a26c6b8824011e3144459d278c75" kindref="member">type</ref><sp/>==<sp/><ref refid="protocol_8h_1ac36f475ca5b446f4fde4c9b90bec77c8a0494732fc92c975f58783e224585c473" kindref="member">MSG_TX</ref><sp/>&amp;&amp;<sp/>!fSendTrickle)</highlight></codeline>
<codeline lineno="3542"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3543"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>1/4<sp/>of<sp/>tx<sp/>invs<sp/>blast<sp/>to<sp/>all<sp/>immediately</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3544"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="classuint256" kindref="compound">uint256</ref><sp/>hashSalt;</highlight></codeline>
<codeline lineno="3545"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(hashSalt<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="3546"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>hashSalt<sp/>=<sp/><ref refid="util_8cpp_1af3aedae75efabb170337a497457f7ecf" kindref="member">GetRandHash</ref>();</highlight></codeline>
<codeline lineno="3547"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classuint256" kindref="compound">uint256</ref><sp/>hashRand<sp/>=<sp/>inv.<ref refid="class_c_inv_1abfa04c38e9c0def9a2b09a9c43929744" kindref="member">hash</ref><sp/>^<sp/>hashSalt;</highlight></codeline>
<codeline lineno="3548"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>hashRand<sp/>=<sp/><ref refid="hash_8h_1ab3f6c437460137530d86e09c2c102e99" kindref="member">Hash</ref>(<ref refid="util_8h_1a5f5e63e2c340bc52049e38c09b37e6e1" kindref="member">BEGIN</ref>(hashRand),<sp/><ref refid="util_8h_1ac32457d3f041434e57a2924847796fda" kindref="member">END</ref>(hashRand));</highlight></codeline>
<codeline lineno="3549"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>fTrickleWait<sp/>=<sp/>((hashRand<sp/>&amp;<sp/>3)<sp/>!=<sp/>0);</highlight></codeline>
<codeline lineno="3550"><highlight class="normal"></highlight></codeline>
<codeline lineno="3551"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fTrickleWait)</highlight></codeline>
<codeline lineno="3552"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3553"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vInvWait.push_back(inv);</highlight></codeline>
<codeline lineno="3554"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3555"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3556"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3557"><highlight class="normal"></highlight></codeline>
<codeline lineno="3558"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>returns<sp/>true<sp/>if<sp/>wasn&apos;t<sp/>already<sp/>contained<sp/>in<sp/>the<sp/>set</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3559"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(pto-&gt;<ref refid="class_c_node_1ae15aa9a971040800c26bc87b1250220f" kindref="member">setInventoryKnown</ref>.<ref refid="classmruset_1af2e0dfe9d8b029bde78457797cdc42a9" kindref="member">insert</ref>(inv).second)</highlight></codeline>
<codeline lineno="3560"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3561"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vInv.push_back(inv);</highlight></codeline>
<codeline lineno="3562"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(vInv.size()<sp/>&gt;=<sp/>1000)</highlight></codeline>
<codeline lineno="3563"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3564"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pto-&gt;<ref refid="class_c_node_1a204fda3d33404cb37698c085b1583ab2" kindref="member">PushMessage</ref>(</highlight><highlight class="stringliteral">&quot;inv&quot;</highlight><highlight class="normal">,<sp/>vInv);</highlight></codeline>
<codeline lineno="3565"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vInv.clear();</highlight></codeline>
<codeline lineno="3566"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3567"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3568"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3569"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pto-&gt;<ref refid="class_c_node_1abcd24c9478bc1ab5ba6de6b369080cec" kindref="member">vInventoryToSend</ref><sp/>=<sp/>vInvWait;</highlight></codeline>
<codeline lineno="3570"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3571"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!vInv.empty())</highlight></codeline>
<codeline lineno="3572"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pto-&gt;<ref refid="class_c_node_1a204fda3d33404cb37698c085b1583ab2" kindref="member">PushMessage</ref>(</highlight><highlight class="stringliteral">&quot;inv&quot;</highlight><highlight class="normal">,<sp/>vInv);</highlight></codeline>
<codeline lineno="3573"><highlight class="normal"></highlight></codeline>
<codeline lineno="3574"><highlight class="normal"></highlight></codeline>
<codeline lineno="3575"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Detect<sp/>stalled<sp/>peers.<sp/>Require<sp/>that<sp/>blocks<sp/>are<sp/>in<sp/>flight,<sp/>we<sp/>haven&apos;t</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3576"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>received<sp/>a<sp/>(requested)<sp/>block<sp/>in<sp/>one<sp/>minute,<sp/>and<sp/>that<sp/>all<sp/>blocks<sp/>are</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3577"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>in<sp/>flight<sp/>for<sp/>over<sp/>two<sp/>minutes,<sp/>since<sp/>we<sp/>first<sp/>had<sp/>a<sp/>chance<sp/>to</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3578"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>process<sp/>an<sp/>incoming<sp/>block.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3579"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CNodeState<sp/>&amp;state<sp/>=<sp/>*State(pto-&gt;<ref refid="class_c_node_1ac0f1a22fa938e84138536308e2001340" kindref="member">GetId</ref>());</highlight></codeline>
<codeline lineno="3580"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stdint_8h_1adec1df1b8b51cb32b77e5b86fff46471" kindref="member">int64_t</ref><sp/>nNow<sp/>=<sp/><ref refid="util_8h_1a0c5a06b50cd805b1923552114494c029" kindref="member">GetTimeMicros</ref>();</highlight></codeline>
<codeline lineno="3581"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!pto-&gt;<ref refid="class_c_node_1af2f7ea958313974e8a948292f060922e" kindref="member">fDisconnect</ref><sp/>&amp;&amp;<sp/>state.nBlocksInFlight<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="3582"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>state.nLastBlockReceive<sp/>&lt;<sp/>state.nLastBlockProcess<sp/>-<sp/>BLOCK_DOWNLOAD_TIMEOUT*1000000<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="3583"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>state.vBlocksInFlight.front().nTime<sp/>&lt;<sp/>state.nLastBlockProcess<sp/>-<sp/>2*BLOCK_DOWNLOAD_TIMEOUT*1000000)<sp/>{</highlight></codeline>
<codeline lineno="3584"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="util_8h_1afc02c0a4258fedfb316be612bb659ba8" kindref="member">LogPrintf</ref>(</highlight><highlight class="stringliteral">&quot;Peer<sp/>%s<sp/>is<sp/>stalling<sp/>block<sp/>download,<sp/>disconnecting\n&quot;</highlight><highlight class="normal">,<sp/>state.name.c_str());</highlight></codeline>
<codeline lineno="3585"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pto-&gt;<ref refid="class_c_node_1af2f7ea958313974e8a948292f060922e" kindref="member">fDisconnect</ref><sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3586"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3587"><highlight class="normal"></highlight></codeline>
<codeline lineno="3588"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3589"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Message:<sp/>getdata<sp/>(blocks)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3590"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3591"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vector&lt;CInv&gt;<sp/>vGetData;</highlight></codeline>
<codeline lineno="3592"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(!pto-&gt;<ref refid="class_c_node_1af2f7ea958313974e8a948292f060922e" kindref="member">fDisconnect</ref><sp/>&amp;&amp;<sp/>state.nBlocksToDownload<sp/>&amp;&amp;<sp/>state.nBlocksInFlight<sp/>&lt;<sp/>MAX_BLOCKS_IN_TRANSIT_PER_PEER)<sp/>{</highlight></codeline>
<codeline lineno="3593"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classuint256" kindref="compound">uint256</ref><sp/>hash<sp/>=<sp/>state.vBlocksToDownload.front();</highlight></codeline>
<codeline lineno="3594"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vGetData.push_back(<ref refid="class_c_inv" kindref="compound">CInv</ref>(<ref refid="protocol_8h_1ac36f475ca5b446f4fde4c9b90bec77c8a4cae15fd207d555331995cd5c57689c1" kindref="member">MSG_BLOCK</ref>,<sp/>hash));</highlight></codeline>
<codeline lineno="3595"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MarkBlockAsInFlight(pto-&gt;<ref refid="class_c_node_1ac0f1a22fa938e84138536308e2001340" kindref="member">GetId</ref>(),<sp/><ref refid="cache_8cc_1a11ecb029164e055f28f4123ce3748862" kindref="member">hash</ref>);</highlight></codeline>
<codeline lineno="3596"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>LogPrint(</highlight><highlight class="stringliteral">&quot;net&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Requesting<sp/>block<sp/>%s<sp/>from<sp/>%s\n&quot;</highlight><highlight class="normal">,<sp/>hash.<ref refid="classbase__uint_1ac3080a72402cadf28dbc9f9b69cc60be" kindref="member">ToString</ref>().c_str(),<sp/>state.name.c_str());</highlight></codeline>
<codeline lineno="3597"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(vGetData.size()<sp/>&gt;=<sp/>1000)</highlight></codeline>
<codeline lineno="3598"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3599"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pto-&gt;<ref refid="class_c_node_1a204fda3d33404cb37698c085b1583ab2" kindref="member">PushMessage</ref>(</highlight><highlight class="stringliteral">&quot;getdata&quot;</highlight><highlight class="normal">,<sp/>vGetData);</highlight></codeline>
<codeline lineno="3600"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vGetData.clear();</highlight></codeline>
<codeline lineno="3601"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3602"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3603"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3604"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Message:<sp/>getdata<sp/>(non-blocks)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3605"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3606"><highlight class="normal"></highlight></codeline>
<codeline lineno="3607"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_c_tx_d_b" kindref="compound">CTxDB</ref><sp/><ref refid="txdb-leveldb_8cpp_1a72eff8ae1d84de13daf97a61b8c02bc6" kindref="member">txdb</ref>(</highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3608"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(!pto-&gt;<ref refid="class_c_node_1a7593dfbd76c34a81169e3fb2aa0e0cf7" kindref="member">mapAskFor</ref>.empty()<sp/>&amp;&amp;<sp/>(*pto-&gt;<ref refid="class_c_node_1a7593dfbd76c34a81169e3fb2aa0e0cf7" kindref="member">mapAskFor</ref>.begin()).first<sp/>&lt;=<sp/>nNow)</highlight></codeline>
<codeline lineno="3609"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3610"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_c_inv" kindref="compound">CInv</ref>&amp;<sp/>inv<sp/>=<sp/>(*pto-&gt;<ref refid="class_c_node_1a7593dfbd76c34a81169e3fb2aa0e0cf7" kindref="member">mapAskFor</ref>.begin()).second;</highlight></codeline>
<codeline lineno="3611"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!AlreadyHave(txdb,<sp/>inv))</highlight></codeline>
<codeline lineno="3612"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3613"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="util_8cpp_1a2ba7badc843121dde40a6f109d224a42" kindref="member">fDebug</ref>)</highlight></codeline>
<codeline lineno="3614"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>LogPrint(</highlight><highlight class="stringliteral">&quot;net&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;sending<sp/>getdata:<sp/>%s\n&quot;</highlight><highlight class="normal">,<sp/>inv.<ref refid="class_c_inv_1a87a826a842d549c2747ced0c1a90bc18" kindref="member">ToString</ref>());</highlight></codeline>
<codeline lineno="3615"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vGetData.push_back(inv);</highlight></codeline>
<codeline lineno="3616"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(vGetData.size()<sp/>&gt;=<sp/>1000)</highlight></codeline>
<codeline lineno="3617"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3618"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pto-&gt;<ref refid="class_c_node_1a204fda3d33404cb37698c085b1583ab2" kindref="member">PushMessage</ref>(</highlight><highlight class="stringliteral">&quot;getdata&quot;</highlight><highlight class="normal">,<sp/>vGetData);</highlight></codeline>
<codeline lineno="3619"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vGetData.clear();</highlight></codeline>
<codeline lineno="3620"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3621"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="net_8cpp_1a1791b4ef08160ee954e7a711a0587172" kindref="member">mapAlreadyAskedFor</ref>[inv]<sp/>=<sp/>nNow;</highlight></codeline>
<codeline lineno="3622"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3623"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pto-&gt;<ref refid="class_c_node_1a7593dfbd76c34a81169e3fb2aa0e0cf7" kindref="member">mapAskFor</ref>.erase(pto-&gt;<ref refid="class_c_node_1a7593dfbd76c34a81169e3fb2aa0e0cf7" kindref="member">mapAskFor</ref>.begin());</highlight></codeline>
<codeline lineno="3624"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3625"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!vGetData.empty())</highlight></codeline>
<codeline lineno="3626"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pto-&gt;<ref refid="class_c_node_1a204fda3d33404cb37698c085b1583ab2" kindref="member">PushMessage</ref>(</highlight><highlight class="stringliteral">&quot;getdata&quot;</highlight><highlight class="normal">,<sp/>vGetData);</highlight></codeline>
<codeline lineno="3627"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="smessage_8cpp_1a6a38441245ee84417e8fb4a77860dc09" kindref="member">fSecMsgEnabled</ref>)</highlight></codeline>
<codeline lineno="3628"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="smessage_8cpp_1abb934a23a076a4af443e2fb0610d7833" kindref="member">SecureMsgSendData</ref>(pto,<sp/>fSendTrickle);<sp/></highlight><highlight class="comment">//<sp/>should<sp/>be<sp/>in<sp/>cs_main?</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3629"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3630"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3631"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3633"><highlight class="comment">//CTransactionPoS</highlight></codeline>
<codeline lineno="3635" refid="class_c_transaction_po_s_1ad85303c69a61f41eb8874f07c15faa10" refkind="member"><highlight class="comment"></highlight><highlight class="normal"><ref refid="amount_8h_1a4eaf3a5239714d8c45b851527f7cb564" kindref="member">CAmount</ref><sp/><ref refid="class_c_transaction_po_s_1ad85303c69a61f41eb8874f07c15faa10" kindref="member">CTransactionPoS::GetValueOut</ref>(<ref refid="class_c_transaction" kindref="compound">CTransaction</ref>&amp;<sp/>tx)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="3636"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="3637"><highlight class="normal"><sp/><sp/><sp/><sp/>set&lt;COutPoint&gt;<sp/>vInOutPoints;</highlight></codeline>
<codeline lineno="3638"><highlight class="normal"></highlight></codeline>
<codeline lineno="3639"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="amount_8h_1a4eaf3a5239714d8c45b851527f7cb564" kindref="member">CAmount</ref><sp/>nValueOut<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="3640"><highlight class="normal"><sp/><sp/><sp/><sp/>BOOST_FOREACH(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_c_tx_out" kindref="compound">CTxOut</ref>&amp;<sp/>txout,<sp/>tx.<ref refid="class_c_transaction_1ae42c0032a464c3054c508017c7d040ef" kindref="member">vout</ref>)</highlight></codeline>
<codeline lineno="3641"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3642"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nValueOut<sp/>+=<sp/>txout.<ref refid="class_c_tx_out_1ab278ecef3817a972cb6bc5360d13f197" kindref="member">nValue</ref>;</highlight></codeline>
<codeline lineno="3643"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="amount_8h_1a12db56a9a1c931941f0943ecbb278aae" kindref="member">MoneyRange</ref>(txout.<ref refid="class_c_tx_out_1ab278ecef3817a972cb6bc5360d13f197" kindref="member">nValue</ref>)<sp/>||<sp/>!<ref refid="amount_8h_1a12db56a9a1c931941f0943ecbb278aae" kindref="member">MoneyRange</ref>(nValueOut))</highlight></codeline>
<codeline lineno="3644"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::runtime_error(</highlight><highlight class="stringliteral">&quot;CTransaction::GetValueOut()<sp/>:<sp/>value<sp/>out<sp/>of<sp/>range&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3645"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3646"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>nValueOut;</highlight></codeline>
<codeline lineno="3647"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3648"><highlight class="normal"></highlight></codeline>
<codeline lineno="3649" refid="class_c_transaction_po_s_1a7c71229336405cae52bd3e9a547f1266" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="class_c_transaction_po_s_1a7c71229336405cae52bd3e9a547f1266" kindref="member">CTransactionPoS::ReadFromDisk</ref>(<ref refid="class_c_transaction" kindref="compound">CTransaction</ref>&amp;<sp/>tx,<sp/><ref refid="class_c_disk_tx_pos" kindref="compound">CDiskTxPos</ref><sp/>pos,<sp/>FILE**<sp/>pfileRet)</highlight></codeline>
<codeline lineno="3650"><highlight class="normal">{</highlight></codeline>
<codeline lineno="3651"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_c_auto_file" kindref="compound">CAutoFile</ref><sp/>filein<sp/>=<sp/><ref refid="class_c_auto_file" kindref="compound">CAutoFile</ref>(<ref refid="main_8cpp_1a4728972adc7d389a00a7f7333b74b71d" kindref="member">OpenBlockFile</ref>(pos.<ref refid="class_c_disk_tx_pos_1a07198e7b96d4c60ece4d895abbd46104" kindref="member">nFile</ref>,<sp/>0,<sp/>pfileRet<sp/>?<sp/></highlight><highlight class="stringliteral">&quot;rb+&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;rb&quot;</highlight><highlight class="normal">),<sp/><ref refid="serialize_8h_1a6b7b47dd702d9e331586d485013fd1eaa34949680c53028d35a449bf88b3c329d" kindref="member">SER_DISK</ref>,<sp/>CLIENT_VERSION);</highlight></codeline>
<codeline lineno="3652"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!filein)</highlight></codeline>
<codeline lineno="3653"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>error(</highlight><highlight class="stringliteral">&quot;CTransactionPoS::ReadFromDisk()<sp/>:<sp/>OpenBlockFile<sp/>failed&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3654"><highlight class="normal"></highlight></codeline>
<codeline lineno="3655"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Read<sp/>transaction</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3656"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fseek(filein,<sp/>pos.<ref refid="class_c_disk_tx_pos_1ad86f9cef782e44a0e5bfe1fae9ed6593" kindref="member">nTxPos</ref>,<sp/>SEEK_SET)<sp/>!=<sp/>0)</highlight></codeline>
<codeline lineno="3657"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>error(</highlight><highlight class="stringliteral">&quot;CTransactionPoS::ReadFromDisk()<sp/>:<sp/>fseek<sp/>failed&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3658"><highlight class="normal"></highlight></codeline>
<codeline lineno="3659"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">try</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="3660"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>filein<sp/>&gt;&gt;<sp/>tx;</highlight></codeline>
<codeline lineno="3661"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3662"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">catch</highlight><highlight class="normal"><sp/>(std::exception<sp/>&amp;e)<sp/>{</highlight></codeline>
<codeline lineno="3663"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>error(</highlight><highlight class="stringliteral">&quot;%s()<sp/>:<sp/>deserialize<sp/>or<sp/>I/O<sp/>error&quot;</highlight><highlight class="normal">,<sp/>__PRETTY_FUNCTION__);</highlight></codeline>
<codeline lineno="3664"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3665"><highlight class="normal"></highlight></codeline>
<codeline lineno="3666"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Return<sp/>file<sp/>pointer</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3667"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(pfileRet)</highlight></codeline>
<codeline lineno="3668"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3669"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fseek(filein,<sp/>pos.<ref refid="class_c_disk_tx_pos_1ad86f9cef782e44a0e5bfe1fae9ed6593" kindref="member">nTxPos</ref>,<sp/>SEEK_SET)<sp/>!=<sp/>0)</highlight></codeline>
<codeline lineno="3670"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>error(</highlight><highlight class="stringliteral">&quot;CTransactionPoS::ReadFromDisk()<sp/>:<sp/>second<sp/>fseek<sp/>failed&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3671"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*pfileRet<sp/>=<sp/>filein.<ref refid="class_c_auto_file_1a25b51d94dc85c4140da0b15494ac9f8a" kindref="member">release</ref>();</highlight></codeline>
<codeline lineno="3672"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3673"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3674"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3675"><highlight class="normal"></highlight></codeline>
<codeline lineno="3676" refid="class_c_transaction_po_s_1a12c8edc9dfa71e3ac64647624731a8bb" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="class_c_transaction_po_s_1a7c71229336405cae52bd3e9a547f1266" kindref="member">CTransactionPoS::ReadFromDisk</ref>(<ref refid="class_c_transaction" kindref="compound">CTransaction</ref>&amp;<sp/>tx,<sp/><ref refid="class_c_tx_d_b" kindref="compound">CTxDB</ref>&amp;<sp/>txdb,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classuint256" kindref="compound">uint256</ref>&amp;<sp/>hash,<sp/><ref refid="class_c_tx_index" kindref="compound">CTxIndex</ref>&amp;<sp/>txindexRet)</highlight></codeline>
<codeline lineno="3677"><highlight class="normal">{</highlight></codeline>
<codeline lineno="3678"><highlight class="normal"><sp/><sp/><sp/><sp/>tx.<ref refid="class_c_transaction_1a1aa7a38971e9c045b12a3efab67647e9" kindref="member">SetNull</ref>();</highlight></codeline>
<codeline lineno="3679"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!txdb.<ref refid="class_c_tx_d_b_1a8a138e5dcc3ef98991abaa16eaa8ddeb" kindref="member">ReadTxIndex</ref>(hash,<sp/>txindexRet))</highlight></codeline>
<codeline lineno="3680"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3681"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_c_transaction_po_s" kindref="compound">CTransactionPoS</ref><sp/>txPoS;</highlight></codeline>
<codeline lineno="3682"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!txPoS.<ref refid="class_c_transaction_po_s_1a7c71229336405cae52bd3e9a547f1266" kindref="member">ReadFromDisk</ref>(tx,<sp/>txindexRet.<ref refid="class_c_tx_index_1ac68a69ed4335b3f50b954c71ec0a9c32" kindref="member">pos</ref>))</highlight></codeline>
<codeline lineno="3683"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3684"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3685"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3686"><highlight class="normal"></highlight></codeline>
<codeline lineno="3687" refid="class_c_transaction_po_s_1a6a215e1797da3d0a2876a6a01613c495" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="class_c_transaction_po_s_1a7c71229336405cae52bd3e9a547f1266" kindref="member">CTransactionPoS::ReadFromDisk</ref>(<ref refid="class_c_transaction" kindref="compound">CTransaction</ref>&amp;<sp/>tx,<sp/><ref refid="class_c_tx_d_b" kindref="compound">CTxDB</ref>&amp;<sp/>txdb,<sp/><ref refid="class_c_out_point" kindref="compound">COutPoint</ref><sp/>prevout,<sp/><ref refid="class_c_tx_index" kindref="compound">CTxIndex</ref>&amp;<sp/>txindexRet)</highlight></codeline>
<codeline lineno="3688"><highlight class="normal">{</highlight></codeline>
<codeline lineno="3689"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!ReadFromDisk(tx,<sp/>txdb,<sp/>prevout.<ref refid="class_c_out_point_1af131c7194a660558b0ff158f4efa7a28" kindref="member">hash</ref>,<sp/>txindexRet))</highlight></codeline>
<codeline lineno="3690"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3691"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(prevout.<ref refid="class_c_out_point_1a9fbc648ca0d11421ad66e897185a9b58" kindref="member">n</ref><sp/>&gt;=<sp/>tx.<ref refid="class_c_transaction_1ae42c0032a464c3054c508017c7d040ef" kindref="member">vout</ref>.size())</highlight></codeline>
<codeline lineno="3692"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3693"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tx.<ref refid="class_c_transaction_1a1aa7a38971e9c045b12a3efab67647e9" kindref="member">SetNull</ref>();</highlight></codeline>
<codeline lineno="3694"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3695"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3696"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3697"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3698"><highlight class="normal"></highlight></codeline>
<codeline lineno="3699" refid="class_c_transaction_po_s_1acf6f4a4a0a30ff2e61c764bd08711dc1" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="class_c_transaction_po_s_1a7c71229336405cae52bd3e9a547f1266" kindref="member">CTransactionPoS::ReadFromDisk</ref>(<ref refid="class_c_transaction" kindref="compound">CTransaction</ref>&amp;<sp/>tx,<sp/><ref refid="class_c_tx_d_b" kindref="compound">CTxDB</ref>&amp;<sp/>txdb,<sp/><ref refid="class_c_out_point" kindref="compound">COutPoint</ref><sp/>prevout)</highlight></codeline>
<codeline lineno="3700"><highlight class="normal">{</highlight></codeline>
<codeline lineno="3701"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_c_tx_index" kindref="compound">CTxIndex</ref><sp/>txindex;</highlight></codeline>
<codeline lineno="3702"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ReadFromDisk(tx,<sp/>txdb,<sp/>prevout,<sp/>txindex);</highlight></codeline>
<codeline lineno="3703"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3704"><highlight class="normal"></highlight></codeline>
<codeline lineno="3705" refid="class_c_transaction_po_s_1ab4e33a10a11c3f46b25687a63b6d5f27" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="class_c_transaction_po_s_1a7c71229336405cae52bd3e9a547f1266" kindref="member">CTransactionPoS::ReadFromDisk</ref>(<ref refid="class_c_transaction" kindref="compound">CTransaction</ref>&amp;<sp/>tx,<sp/><ref refid="class_c_out_point" kindref="compound">COutPoint</ref><sp/>prevout)</highlight></codeline>
<codeline lineno="3706"><highlight class="normal">{</highlight></codeline>
<codeline lineno="3707"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_c_tx_d_b" kindref="compound">CTxDB</ref><sp/><ref refid="txdb-leveldb_8cpp_1a72eff8ae1d84de13daf97a61b8c02bc6" kindref="member">txdb</ref>(</highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3708"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_c_tx_index" kindref="compound">CTxIndex</ref><sp/>txindex;</highlight></codeline>
<codeline lineno="3709"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ReadFromDisk(tx,<sp/>txdb,<sp/>prevout,<sp/>txindex);</highlight></codeline>
<codeline lineno="3710"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3711"><highlight class="normal"></highlight></codeline>
<codeline lineno="3712" refid="class_c_transaction_po_s_1a7bdd6909103ec8da895172cf7dfe6a0a" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="class_c_transaction_po_s_1a7bdd6909103ec8da895172cf7dfe6a0a" kindref="member">CTransactionPoS::DisconnectInputs</ref>(<ref refid="class_c_transaction" kindref="compound">CTransaction</ref>&amp;<sp/>tx,<sp/><ref refid="class_c_tx_d_b" kindref="compound">CTxDB</ref>&amp;<sp/>txdb)</highlight></codeline>
<codeline lineno="3713"><highlight class="normal">{</highlight></codeline>
<codeline lineno="3714"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Relinquish<sp/>previous<sp/>transactions&apos;<sp/>spent<sp/>pointers</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3715"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!tx.<ref refid="class_c_transaction_1a274384ecbb50d71355cd287b7a6bca51" kindref="member">IsCoinBase</ref>())</highlight></codeline>
<codeline lineno="3716"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3717"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>BOOST_FOREACH(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_c_tx_in" kindref="compound">CTxIn</ref>&amp;<sp/>txin,<sp/>tx.<ref refid="class_c_transaction_1a53fa787e4ea57374b4fa2a28e9a957b2" kindref="member">vin</ref>)</highlight></codeline>
<codeline lineno="3718"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3719"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_c_out_point" kindref="compound">COutPoint</ref><sp/>prevout<sp/>=<sp/>txin.<ref refid="class_c_tx_in_1aed9312051a25380cbd7f123408ab7c20" kindref="member">prevout</ref>;</highlight></codeline>
<codeline lineno="3720"><highlight class="normal"></highlight></codeline>
<codeline lineno="3721"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Get<sp/>prev<sp/>txindex<sp/>from<sp/>disk</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3722"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_c_tx_index" kindref="compound">CTxIndex</ref><sp/>txindex;</highlight></codeline>
<codeline lineno="3723"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!txdb.<ref refid="class_c_tx_d_b_1a8a138e5dcc3ef98991abaa16eaa8ddeb" kindref="member">ReadTxIndex</ref>(prevout.<ref refid="class_c_out_point_1af131c7194a660558b0ff158f4efa7a28" kindref="member">hash</ref>,<sp/>txindex))</highlight></codeline>
<codeline lineno="3724"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>error(</highlight><highlight class="stringliteral">&quot;DisconnectInputs()<sp/>:<sp/>ReadTxIndex<sp/>failed&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3725"><highlight class="normal"></highlight></codeline>
<codeline lineno="3726"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(prevout.<ref refid="class_c_out_point_1a9fbc648ca0d11421ad66e897185a9b58" kindref="member">n</ref><sp/>&gt;=<sp/>txindex.<ref refid="class_c_tx_index_1a88317d56c02acd1faec4863bcb293d2c" kindref="member">vSpent</ref>.size())</highlight></codeline>
<codeline lineno="3727"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>error(</highlight><highlight class="stringliteral">&quot;DisconnectInputs()<sp/>:<sp/>prevout.n<sp/>out<sp/>of<sp/>range&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3728"><highlight class="normal"></highlight></codeline>
<codeline lineno="3729"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Mark<sp/>outpoint<sp/>as<sp/>not<sp/>spent</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3730"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>txindex.<ref refid="class_c_tx_index_1a88317d56c02acd1faec4863bcb293d2c" kindref="member">vSpent</ref>[prevout.<ref refid="class_c_out_point_1a9fbc648ca0d11421ad66e897185a9b58" kindref="member">n</ref>].SetNull();</highlight></codeline>
<codeline lineno="3731"><highlight class="normal"></highlight></codeline>
<codeline lineno="3732"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Write<sp/>back</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3733"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!txdb.<ref refid="class_c_tx_d_b_1a62fb371022854dc8cb247bed36302df2" kindref="member">UpdateTxIndex</ref>(prevout.<ref refid="class_c_out_point_1af131c7194a660558b0ff158f4efa7a28" kindref="member">hash</ref>,<sp/>txindex))</highlight></codeline>
<codeline lineno="3734"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>error(</highlight><highlight class="stringliteral">&quot;DisconnectInputs()<sp/>:<sp/>UpdateTxIndex<sp/>failed&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3735"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3736"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3737"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Remove<sp/>transaction<sp/>from<sp/>index</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3738"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>This<sp/>can<sp/>fail<sp/>if<sp/>a<sp/>duplicate<sp/>of<sp/>this<sp/>transaction<sp/>was<sp/>in<sp/>a<sp/>chain<sp/>that<sp/>got</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3739"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>reorganized<sp/>away.<sp/>This<sp/>is<sp/>only<sp/>possible<sp/>if<sp/>this<sp/>transaction<sp/>was<sp/>completely</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3740"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>spent,<sp/>so<sp/>erasing<sp/>it<sp/>would<sp/>be<sp/>a<sp/>no-op<sp/>anyway.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3741"><highlight class="normal"><sp/><sp/><sp/><sp/>txdb.<ref refid="class_c_tx_d_b_1a5e0f0ed39529758a90953a2a08fc9412" kindref="member">EraseTxIndex</ref>(tx);</highlight></codeline>
<codeline lineno="3742"><highlight class="normal"></highlight></codeline>
<codeline lineno="3743"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3744"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3745"><highlight class="normal"></highlight></codeline>
<codeline lineno="3746"><highlight class="normal"></highlight></codeline>
<codeline lineno="3747" refid="class_c_transaction_po_s_1a20a028e06f505f03a0d30a7f186d9489" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="class_c_transaction_po_s_1a20a028e06f505f03a0d30a7f186d9489" kindref="member">CTransactionPoS::FetchInputs</ref>(<ref refid="class_c_transaction" kindref="compound">CTransaction</ref>&amp;<sp/>tx,<sp/><ref refid="class_c_tx_d_b" kindref="compound">CTxDB</ref>&amp;<sp/>txdb,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>map&lt;uint256,<sp/>CTxIndex&gt;&amp;<sp/>mapTestPool,</highlight></codeline>
<codeline lineno="3748"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>fBlock,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>fMiner,<sp/><ref refid="main_8h_1a05bae354566c88f7dca5ad13aaf8b30f" kindref="member">MapPrevTx</ref>&amp;<sp/>inputsRet,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal">&amp;<sp/>fInvalid)</highlight></codeline>
<codeline lineno="3749"><highlight class="normal">{</highlight></codeline>
<codeline lineno="3750"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>FetchInputs<sp/>can<sp/>return<sp/>false<sp/>either<sp/>because<sp/>we<sp/>just<sp/>haven&apos;t<sp/>seen<sp/>some<sp/>inputs</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3751"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>(in<sp/>which<sp/>case<sp/>the<sp/>transaction<sp/>should<sp/>be<sp/>stored<sp/>as<sp/>an<sp/>orphan)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3752"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>or<sp/>because<sp/>the<sp/>transaction<sp/>is<sp/>malformed<sp/>(in<sp/>which<sp/>case<sp/>the<sp/>transaction<sp/>should</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3753"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>be<sp/>dropped).<sp/><sp/>If<sp/>tx<sp/>is<sp/>definitely<sp/>invalid,<sp/>fInvalid<sp/>will<sp/>be<sp/>set<sp/>to<sp/>true.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3754"><highlight class="normal"><sp/><sp/><sp/><sp/>fInvalid<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3755"><highlight class="normal"></highlight></codeline>
<codeline lineno="3756"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(tx.<ref refid="class_c_transaction_1a274384ecbb50d71355cd287b7a6bca51" kindref="member">IsCoinBase</ref>())</highlight></codeline>
<codeline lineno="3757"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;<sp/></highlight><highlight class="comment">//<sp/>Coinbase<sp/>transactions<sp/>have<sp/>no<sp/>inputs<sp/>to<sp/>fetch.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3758"><highlight class="normal"></highlight></codeline>
<codeline lineno="3759"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>tx.<ref refid="class_c_transaction_1a53fa787e4ea57374b4fa2a28e9a957b2" kindref="member">vin</ref>.size();<sp/>i++)</highlight></codeline>
<codeline lineno="3760"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3761"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_c_out_point" kindref="compound">COutPoint</ref><sp/>prevout<sp/>=<sp/>tx.<ref refid="class_c_transaction_1a53fa787e4ea57374b4fa2a28e9a957b2" kindref="member">vin</ref>[i].prevout;</highlight></codeline>
<codeline lineno="3762"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(inputsRet.count(prevout.<ref refid="class_c_out_point_1af131c7194a660558b0ff158f4efa7a28" kindref="member">hash</ref>))</highlight></codeline>
<codeline lineno="3763"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;<sp/></highlight><highlight class="comment">//<sp/>Got<sp/>it<sp/>already</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3764"><highlight class="normal"></highlight></codeline>
<codeline lineno="3765"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Read<sp/>txindex</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3766"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_c_tx_index" kindref="compound">CTxIndex</ref>&amp;<sp/>txindex<sp/>=<sp/>inputsRet[prevout.<ref refid="class_c_out_point_1af131c7194a660558b0ff158f4efa7a28" kindref="member">hash</ref>].first;</highlight></codeline>
<codeline lineno="3767"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>fFound<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3768"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((fBlock<sp/>||<sp/>fMiner)<sp/>&amp;&amp;<sp/>mapTestPool.count(prevout.<ref refid="class_c_out_point_1af131c7194a660558b0ff158f4efa7a28" kindref="member">hash</ref>))</highlight></codeline>
<codeline lineno="3769"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3770"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Get<sp/>txindex<sp/>from<sp/>current<sp/>proposed<sp/>changes</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3771"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>txindex<sp/>=<sp/>mapTestPool.find(prevout.<ref refid="class_c_out_point_1af131c7194a660558b0ff158f4efa7a28" kindref="member">hash</ref>)-&gt;second;</highlight></codeline>
<codeline lineno="3772"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3773"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3774"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3775"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Read<sp/>txindex<sp/>from<sp/>txdb</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3776"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fFound<sp/>=<sp/>txdb.<ref refid="class_c_tx_d_b_1a8a138e5dcc3ef98991abaa16eaa8ddeb" kindref="member">ReadTxIndex</ref>(prevout.<ref refid="class_c_out_point_1af131c7194a660558b0ff158f4efa7a28" kindref="member">hash</ref>,<sp/>txindex);</highlight></codeline>
<codeline lineno="3777"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3778"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!fFound<sp/>&amp;&amp;<sp/>(fBlock<sp/>||<sp/>fMiner))</highlight></codeline>
<codeline lineno="3779"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>fMiner<sp/>?<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal"><sp/>:<sp/>error(</highlight><highlight class="stringliteral">&quot;FetchInputs()<sp/>:<sp/>%s<sp/>prev<sp/>tx<sp/>%s<sp/>index<sp/>entry<sp/>not<sp/>found&quot;</highlight><highlight class="normal">,<sp/>tx.<ref refid="class_c_transaction_1a3f8666d2a275c40da14bd5eaf47dc004" kindref="member">GetHash</ref>().<ref refid="classbase__uint_1ac3080a72402cadf28dbc9f9b69cc60be" kindref="member">ToString</ref>(),<sp/><sp/>prevout.<ref refid="class_c_out_point_1af131c7194a660558b0ff158f4efa7a28" kindref="member">hash</ref>.<ref refid="classbase__uint_1ac3080a72402cadf28dbc9f9b69cc60be" kindref="member">ToString</ref>());</highlight></codeline>
<codeline lineno="3780"><highlight class="normal"></highlight></codeline>
<codeline lineno="3781"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Read<sp/>txPrev</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3782"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_c_transaction" kindref="compound">CTransaction</ref>&amp;<sp/>txPrev<sp/>=<sp/>inputsRet[prevout.<ref refid="class_c_out_point_1af131c7194a660558b0ff158f4efa7a28" kindref="member">hash</ref>].second;</highlight></codeline>
<codeline lineno="3783"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!fFound<sp/>||<sp/>txindex.<ref refid="class_c_tx_index_1ac68a69ed4335b3f50b954c71ec0a9c32" kindref="member">pos</ref><sp/>==<sp/><ref refid="class_c_disk_tx_pos" kindref="compound">CDiskTxPos</ref>(1,1,1))</highlight></codeline>
<codeline lineno="3784"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3785"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Get<sp/>prev<sp/>tx<sp/>from<sp/>single<sp/>transactions<sp/>in<sp/>memory</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3786"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!mempool.lookup(prevout.<ref refid="class_c_out_point_1af131c7194a660558b0ff158f4efa7a28" kindref="member">hash</ref>,<sp/>txPrev))</highlight></codeline>
<codeline lineno="3787"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>error(</highlight><highlight class="stringliteral">&quot;FetchInputs()<sp/>:<sp/>%s<sp/>mempool<sp/>Tx<sp/>prev<sp/>not<sp/>found<sp/>%s&quot;</highlight><highlight class="normal">,<sp/>tx.<ref refid="class_c_transaction_1a3f8666d2a275c40da14bd5eaf47dc004" kindref="member">GetHash</ref>().<ref refid="classbase__uint_1ac3080a72402cadf28dbc9f9b69cc60be" kindref="member">ToString</ref>(),<sp/><sp/>prevout.<ref refid="class_c_out_point_1af131c7194a660558b0ff158f4efa7a28" kindref="member">hash</ref>.<ref refid="classbase__uint_1ac3080a72402cadf28dbc9f9b69cc60be" kindref="member">ToString</ref>());</highlight></codeline>
<codeline lineno="3788"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!fFound)</highlight></codeline>
<codeline lineno="3789"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>txindex.<ref refid="class_c_tx_index_1a88317d56c02acd1faec4863bcb293d2c" kindref="member">vSpent</ref>.resize(txPrev.vout.size());</highlight></codeline>
<codeline lineno="3790"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3791"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3792"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3793"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_c_transaction_po_s" kindref="compound">CTransactionPoS</ref><sp/>txPoS;</highlight></codeline>
<codeline lineno="3794"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Get<sp/>prev<sp/>tx<sp/>from<sp/>disk</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3795"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!txPoS.<ref refid="class_c_transaction_po_s_1a7c71229336405cae52bd3e9a547f1266" kindref="member">ReadFromDisk</ref>(txPrev,<sp/>txindex.<ref refid="class_c_tx_index_1ac68a69ed4335b3f50b954c71ec0a9c32" kindref="member">pos</ref>))</highlight></codeline>
<codeline lineno="3796"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>error(</highlight><highlight class="stringliteral">&quot;FetchInputs()<sp/>:<sp/>%s<sp/>ReadFromDisk<sp/>prev<sp/>tx<sp/>%s<sp/>failed&quot;</highlight><highlight class="normal">,<sp/>tx.<ref refid="class_c_transaction_1a3f8666d2a275c40da14bd5eaf47dc004" kindref="member">GetHash</ref>().<ref refid="classbase__uint_1ac3080a72402cadf28dbc9f9b69cc60be" kindref="member">ToString</ref>(),<sp/><sp/>prevout.<ref refid="class_c_out_point_1af131c7194a660558b0ff158f4efa7a28" kindref="member">hash</ref>.<ref refid="classbase__uint_1ac3080a72402cadf28dbc9f9b69cc60be" kindref="member">ToString</ref>());</highlight></codeline>
<codeline lineno="3797"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3798"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3799"><highlight class="normal"></highlight></codeline>
<codeline lineno="3800"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Make<sp/>sure<sp/>all<sp/>prevout.n<sp/>indexes<sp/>are<sp/>valid:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3801"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>tx.<ref refid="class_c_transaction_1a53fa787e4ea57374b4fa2a28e9a957b2" kindref="member">vin</ref>.size();<sp/>i++)</highlight></codeline>
<codeline lineno="3802"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3803"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_c_out_point" kindref="compound">COutPoint</ref><sp/>prevout<sp/>=<sp/>tx.<ref refid="class_c_transaction_1a53fa787e4ea57374b4fa2a28e9a957b2" kindref="member">vin</ref>[i].prevout;</highlight></codeline>
<codeline lineno="3804"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assert(inputsRet.count(prevout.<ref refid="class_c_out_point_1af131c7194a660558b0ff158f4efa7a28" kindref="member">hash</ref>)<sp/>!=<sp/>0);</highlight></codeline>
<codeline lineno="3805"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_c_tx_index" kindref="compound">CTxIndex</ref>&amp;<sp/>txindex<sp/>=<sp/>inputsRet[prevout.<ref refid="class_c_out_point_1af131c7194a660558b0ff158f4efa7a28" kindref="member">hash</ref>].first;</highlight></codeline>
<codeline lineno="3806"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_c_transaction" kindref="compound">CTransaction</ref>&amp;<sp/>txPrev<sp/>=<sp/>inputsRet[prevout.<ref refid="class_c_out_point_1af131c7194a660558b0ff158f4efa7a28" kindref="member">hash</ref>].second;</highlight></codeline>
<codeline lineno="3807"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(prevout.<ref refid="class_c_out_point_1a9fbc648ca0d11421ad66e897185a9b58" kindref="member">n</ref><sp/>&gt;=<sp/>txPrev.<ref refid="class_c_transaction_1ae42c0032a464c3054c508017c7d040ef" kindref="member">vout</ref>.size()<sp/>||<sp/>prevout.<ref refid="class_c_out_point_1a9fbc648ca0d11421ad66e897185a9b58" kindref="member">n</ref><sp/>&gt;=<sp/>txindex.vSpent.size())</highlight></codeline>
<codeline lineno="3808"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3809"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Revisit<sp/>this<sp/>if/when<sp/>transaction<sp/>replacement<sp/>is<sp/>implemented<sp/>and<sp/>allows</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3810"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>adding<sp/>inputs:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3811"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fInvalid<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3812"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>tx.<ref refid="class_c_transaction_1a52eaee52d8827b7265f9dcd308b2a812" kindref="member">DoS</ref>(100,<sp/>error(</highlight><highlight class="stringliteral">&quot;FetchInputs()<sp/>:<sp/>%s<sp/>prevout.n<sp/>out<sp/>of<sp/>range<sp/>%d<sp/>%u<sp/>%u<sp/>prev<sp/>tx<sp/>%s\n%s&quot;</highlight><highlight class="normal">,<sp/>tx.<ref refid="class_c_transaction_1a3f8666d2a275c40da14bd5eaf47dc004" kindref="member">GetHash</ref>().<ref refid="classbase__uint_1ac3080a72402cadf28dbc9f9b69cc60be" kindref="member">ToString</ref>(),<sp/>prevout.<ref refid="class_c_out_point_1a9fbc648ca0d11421ad66e897185a9b58" kindref="member">n</ref>,<sp/>txPrev.<ref refid="class_c_transaction_1ae42c0032a464c3054c508017c7d040ef" kindref="member">vout</ref>.size(),<sp/>txindex.vSpent.size(),<sp/>prevout.<ref refid="class_c_out_point_1af131c7194a660558b0ff158f4efa7a28" kindref="member">hash</ref>.<ref refid="classbase__uint_1ac3080a72402cadf28dbc9f9b69cc60be" kindref="member">ToString</ref>(),<sp/>txPrev.<ref refid="class_c_transaction_1ae5fde44ffb46045dd48bd9cfff9492b6" kindref="member">ToString</ref>()));</highlight></codeline>
<codeline lineno="3813"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3814"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3815"><highlight class="normal"></highlight></codeline>
<codeline lineno="3816"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3817"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3818"><highlight class="normal"></highlight></codeline>
<codeline lineno="3819" refid="class_c_transaction_po_s_1aa49ca4acc89b51cbef362200175051b4" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_c_tx_out" kindref="compound">CTxOut</ref>&amp;<sp/><ref refid="class_c_transaction_po_s_1aa49ca4acc89b51cbef362200175051b4" kindref="member">CTransactionPoS::GetOutputFor</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_c_tx_in" kindref="compound">CTxIn</ref>&amp;<sp/>input,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="main_8h_1a05bae354566c88f7dca5ad13aaf8b30f" kindref="member">MapPrevTx</ref>&amp;<sp/>inputs)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="3820"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="3821"><highlight class="normal"><sp/><sp/><sp/><sp/>MapPrevTx::const_iterator<sp/>mi<sp/>=<sp/>inputs.find(input.<ref refid="class_c_tx_in_1aed9312051a25380cbd7f123408ab7c20" kindref="member">prevout</ref>.<ref refid="class_c_out_point_1af131c7194a660558b0ff158f4efa7a28" kindref="member">hash</ref>);</highlight></codeline>
<codeline lineno="3822"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mi<sp/>==<sp/>inputs.end())</highlight></codeline>
<codeline lineno="3823"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::runtime_error(</highlight><highlight class="stringliteral">&quot;CTransactionPoS::GetOutputFor()<sp/>:<sp/>prevout.hash<sp/>not<sp/>found&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3824"><highlight class="normal"></highlight></codeline>
<codeline lineno="3825"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_c_transaction" kindref="compound">CTransaction</ref>&amp;<sp/>txPrev<sp/>=<sp/>(mi-&gt;second).second;</highlight></codeline>
<codeline lineno="3826"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(input.<ref refid="class_c_tx_in_1aed9312051a25380cbd7f123408ab7c20" kindref="member">prevout</ref>.<ref refid="class_c_out_point_1a9fbc648ca0d11421ad66e897185a9b58" kindref="member">n</ref><sp/>&gt;=<sp/>txPrev.<ref refid="class_c_transaction_1ae42c0032a464c3054c508017c7d040ef" kindref="member">vout</ref>.size())</highlight></codeline>
<codeline lineno="3827"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::runtime_error(</highlight><highlight class="stringliteral">&quot;CTransactionPoS::GetOutputFor()<sp/>:<sp/>prevout.n<sp/>out<sp/>of<sp/>range&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="3828"><highlight class="normal"></highlight></codeline>
<codeline lineno="3829"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>txPrev.<ref refid="class_c_transaction_1ae42c0032a464c3054c508017c7d040ef" kindref="member">vout</ref>[input.<ref refid="class_c_tx_in_1aed9312051a25380cbd7f123408ab7c20" kindref="member">prevout</ref>.<ref refid="class_c_out_point_1a9fbc648ca0d11421ad66e897185a9b58" kindref="member">n</ref>];</highlight></codeline>
<codeline lineno="3830"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3831"><highlight class="normal"></highlight></codeline>
<codeline lineno="3832" refid="class_c_transaction_po_s_1ac2c734d9f302dda6e8681ce6d0f7843e" refkind="member"><highlight class="normal"><ref refid="amount_8h_1a4eaf3a5239714d8c45b851527f7cb564" kindref="member">CAmount</ref><sp/><ref refid="class_c_transaction_po_s_1ac2c734d9f302dda6e8681ce6d0f7843e" kindref="member">CTransactionPoS::GetValueIn</ref>(<ref refid="class_c_transaction" kindref="compound">CTransaction</ref>&amp;<sp/>tx,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="main_8h_1a05bae354566c88f7dca5ad13aaf8b30f" kindref="member">MapPrevTx</ref>&amp;<sp/>inputs)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="3833"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="3834"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(tx.<ref refid="class_c_transaction_1a274384ecbb50d71355cd287b7a6bca51" kindref="member">IsCoinBase</ref>())</highlight></codeline>
<codeline lineno="3835"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="3836"><highlight class="normal"></highlight></codeline>
<codeline lineno="3837"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="amount_8h_1a4eaf3a5239714d8c45b851527f7cb564" kindref="member">CAmount</ref><sp/>nResult<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="3838"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>tx.<ref refid="class_c_transaction_1a53fa787e4ea57374b4fa2a28e9a957b2" kindref="member">vin</ref>.size();<sp/>i++)</highlight></codeline>
<codeline lineno="3839"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3840"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nResult<sp/>+=<sp/>GetOutputFor(tx.<ref refid="class_c_transaction_1a53fa787e4ea57374b4fa2a28e9a957b2" kindref="member">vin</ref>[i],<sp/>inputs).nValue;</highlight></codeline>
<codeline lineno="3841"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3842"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>nResult;</highlight></codeline>
<codeline lineno="3843"><highlight class="normal"></highlight></codeline>
<codeline lineno="3844"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3845"><highlight class="normal"></highlight></codeline>
<codeline lineno="3846" refid="class_c_transaction_po_s_1a19de7fad0cc156ebd4e5a3858db7619f" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="class_c_transaction_po_s_1a19de7fad0cc156ebd4e5a3858db7619f" kindref="member">CTransactionPoS::ConnectInputs</ref>(<ref refid="class_c_transaction" kindref="compound">CTransaction</ref>&amp;<sp/>tx,<sp/><ref refid="class_c_tx_d_b" kindref="compound">CTxDB</ref>&amp;<sp/>txdb,<sp/><ref refid="main_8h_1a05bae354566c88f7dca5ad13aaf8b30f" kindref="member">MapPrevTx</ref><sp/>inputs,<sp/>map&lt;uint256,<sp/>CTxIndex&gt;&amp;<sp/>mapTestPool,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_c_disk_tx_pos" kindref="compound">CDiskTxPos</ref>&amp;<sp/>posThisTx,</highlight></codeline>
<codeline lineno="3847"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_c_block_index" kindref="compound">CBlockIndex</ref>*<sp/>pindexBlock,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>fBlock,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>fMiner,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>flags,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>fValidateSig)</highlight></codeline>
<codeline lineno="3848"><highlight class="normal">{</highlight></codeline>
<codeline lineno="3849"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Take<sp/>over<sp/>previous<sp/>transactions&apos;<sp/>spent<sp/>pointers</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3850"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>fBlock<sp/>is<sp/>true<sp/>when<sp/>this<sp/>is<sp/>called<sp/>from<sp/>AcceptBlock<sp/>when<sp/>a<sp/>new<sp/>best-block<sp/>is<sp/>added<sp/>to<sp/>the<sp/>blockchain</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3851"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>fMiner<sp/>is<sp/>true<sp/>when<sp/>called<sp/>from<sp/>the<sp/>internal<sp/>darksilk<sp/>miner</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3852"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>...<sp/>both<sp/>are<sp/>false<sp/>when<sp/>called<sp/>from<sp/>CTransactionPoS::AcceptToMemoryPool</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3853"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!tx.<ref refid="class_c_transaction_1a274384ecbb50d71355cd287b7a6bca51" kindref="member">IsCoinBase</ref>())</highlight></codeline>
<codeline lineno="3854"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3855"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="amount_8h_1a4eaf3a5239714d8c45b851527f7cb564" kindref="member">CAmount</ref><sp/>nValueIn<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="3856"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="amount_8h_1a4eaf3a5239714d8c45b851527f7cb564" kindref="member">CAmount</ref><sp/>nFees<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="3857"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>tx.<ref refid="class_c_transaction_1a53fa787e4ea57374b4fa2a28e9a957b2" kindref="member">vin</ref>.size();<sp/>i++)</highlight></codeline>
<codeline lineno="3858"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3859"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_c_out_point" kindref="compound">COutPoint</ref><sp/>prevout<sp/>=<sp/>tx.<ref refid="class_c_transaction_1a53fa787e4ea57374b4fa2a28e9a957b2" kindref="member">vin</ref>[i].prevout;</highlight></codeline>
<codeline lineno="3860"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assert(inputs.count(prevout.<ref refid="class_c_out_point_1af131c7194a660558b0ff158f4efa7a28" kindref="member">hash</ref>)<sp/>&gt;<sp/>0);</highlight></codeline>
<codeline lineno="3861"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_c_tx_index" kindref="compound">CTxIndex</ref>&amp;<sp/>txindex<sp/>=<sp/>inputs[prevout.<ref refid="class_c_out_point_1af131c7194a660558b0ff158f4efa7a28" kindref="member">hash</ref>].first;</highlight></codeline>
<codeline lineno="3862"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_c_transaction" kindref="compound">CTransaction</ref>&amp;<sp/>txPrev<sp/>=<sp/>inputs[prevout.<ref refid="class_c_out_point_1af131c7194a660558b0ff158f4efa7a28" kindref="member">hash</ref>].second;</highlight></codeline>
<codeline lineno="3863"><highlight class="normal"></highlight></codeline>
<codeline lineno="3864"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(prevout.<ref refid="class_c_out_point_1a9fbc648ca0d11421ad66e897185a9b58" kindref="member">n</ref><sp/>&gt;=<sp/>txPrev.<ref refid="class_c_transaction_1ae42c0032a464c3054c508017c7d040ef" kindref="member">vout</ref>.size()<sp/>||<sp/>prevout.<ref refid="class_c_out_point_1a9fbc648ca0d11421ad66e897185a9b58" kindref="member">n</ref><sp/>&gt;=<sp/>txindex.vSpent.size())</highlight></codeline>
<codeline lineno="3865"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>tx.<ref refid="class_c_transaction_1a52eaee52d8827b7265f9dcd308b2a812" kindref="member">DoS</ref>(100,<sp/>error(</highlight><highlight class="stringliteral">&quot;ConnectInputs()<sp/>:<sp/>%s<sp/>prevout.n<sp/>out<sp/>of<sp/>range<sp/>%d<sp/>%u<sp/>%u<sp/>prev<sp/>tx<sp/>%s\n%s&quot;</highlight><highlight class="normal">,<sp/>tx.<ref refid="class_c_transaction_1a3f8666d2a275c40da14bd5eaf47dc004" kindref="member">GetHash</ref>().<ref refid="classbase__uint_1ac3080a72402cadf28dbc9f9b69cc60be" kindref="member">ToString</ref>(),<sp/>prevout.<ref refid="class_c_out_point_1a9fbc648ca0d11421ad66e897185a9b58" kindref="member">n</ref>,<sp/>txPrev.<ref refid="class_c_transaction_1ae42c0032a464c3054c508017c7d040ef" kindref="member">vout</ref>.size(),<sp/>txindex.vSpent.size(),<sp/>prevout.<ref refid="class_c_out_point_1af131c7194a660558b0ff158f4efa7a28" kindref="member">hash</ref>.<ref refid="classbase__uint_1ac3080a72402cadf28dbc9f9b69cc60be" kindref="member">ToString</ref>(),<sp/>txPrev.<ref refid="class_c_transaction_1ae5fde44ffb46045dd48bd9cfff9492b6" kindref="member">ToString</ref>()));</highlight></codeline>
<codeline lineno="3866"><highlight class="normal"></highlight></codeline>
<codeline lineno="3867"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>prev<sp/>is<sp/>coinbase<sp/>or<sp/>coinstake,<sp/>check<sp/>that<sp/>it&apos;s<sp/>matured</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3868"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(txPrev.<ref refid="class_c_transaction_1a274384ecbb50d71355cd287b7a6bca51" kindref="member">IsCoinBase</ref>()<sp/>||<sp/>txPrev.<ref refid="class_c_transaction_1a8d924e18ddcf4c31bc7483b3a157113d" kindref="member">IsCoinStake</ref>())</highlight></codeline>
<codeline lineno="3869"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3870"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nSpendDepth;</highlight></codeline>
<codeline lineno="3871"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="main_8cpp_1a22e712bbf635a69ba8dd7ae004d2697b" kindref="member">IsConfirmedInNPrevBlocks</ref>(txindex,<sp/>pindexBlock,<sp/>nCoinbaseMaturity,<sp/>nSpendDepth))</highlight></codeline>
<codeline lineno="3872"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>error(</highlight><highlight class="stringliteral">&quot;ConnectInputs()<sp/>:<sp/>tried<sp/>to<sp/>spend<sp/>%s<sp/>at<sp/>depth<sp/>%d&quot;</highlight><highlight class="normal">,<sp/>txPrev.<ref refid="class_c_transaction_1a274384ecbb50d71355cd287b7a6bca51" kindref="member">IsCoinBase</ref>()<sp/>?<sp/></highlight><highlight class="stringliteral">&quot;coinbase&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;coinstake&quot;</highlight><highlight class="normal">,<sp/>nSpendDepth);</highlight></codeline>
<codeline lineno="3873"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3874"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>ppcoin:<sp/>check<sp/>transaction<sp/>timestamp</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3875"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(txPrev.<ref refid="class_c_transaction_1a8ccb4b6020669bc562095e3417715e41" kindref="member">nTime</ref><sp/>&gt;<sp/>tx.<ref refid="class_c_transaction_1a8ccb4b6020669bc562095e3417715e41" kindref="member">nTime</ref>)</highlight></codeline>
<codeline lineno="3876"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>tx.<ref refid="class_c_transaction_1a52eaee52d8827b7265f9dcd308b2a812" kindref="member">DoS</ref>(100,<sp/>error(</highlight><highlight class="stringliteral">&quot;ConnectInputs()<sp/>:<sp/>transaction<sp/>timestamp<sp/>earlier<sp/>than<sp/>input<sp/>transaction&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="3877"><highlight class="normal"></highlight></codeline>
<codeline lineno="3878"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(txPrev.<ref refid="class_c_transaction_1ae42c0032a464c3054c508017c7d040ef" kindref="member">vout</ref>[prevout.<ref refid="class_c_out_point_1a9fbc648ca0d11421ad66e897185a9b58" kindref="member">n</ref>].IsEmpty())</highlight></codeline>
<codeline lineno="3879"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>tx.<ref refid="class_c_transaction_1a52eaee52d8827b7265f9dcd308b2a812" kindref="member">DoS</ref>(1,<sp/>error(</highlight><highlight class="stringliteral">&quot;ConnectInputs()<sp/>:<sp/>special<sp/>marker<sp/>is<sp/>not<sp/>spendable&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="3880"><highlight class="normal"></highlight></codeline>
<codeline lineno="3881"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Check<sp/>for<sp/>negative<sp/>or<sp/>overflow<sp/>input<sp/>values</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3882"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nValueIn<sp/>+=<sp/>txPrev.<ref refid="class_c_transaction_1ae42c0032a464c3054c508017c7d040ef" kindref="member">vout</ref>[prevout.<ref refid="class_c_out_point_1a9fbc648ca0d11421ad66e897185a9b58" kindref="member">n</ref>].nValue;</highlight></codeline>
<codeline lineno="3883"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="amount_8h_1a12db56a9a1c931941f0943ecbb278aae" kindref="member">MoneyRange</ref>(txPrev.<ref refid="class_c_transaction_1ae42c0032a464c3054c508017c7d040ef" kindref="member">vout</ref>[prevout.<ref refid="class_c_out_point_1a9fbc648ca0d11421ad66e897185a9b58" kindref="member">n</ref>].nValue)<sp/>||<sp/>!<ref refid="amount_8h_1a12db56a9a1c931941f0943ecbb278aae" kindref="member">MoneyRange</ref>(nValueIn))</highlight></codeline>
<codeline lineno="3884"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>tx.<ref refid="class_c_transaction_1a52eaee52d8827b7265f9dcd308b2a812" kindref="member">DoS</ref>(100,<sp/>error(</highlight><highlight class="stringliteral">&quot;ConnectInputs()<sp/>:<sp/>txin<sp/>values<sp/>out<sp/>of<sp/>range&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="3885"><highlight class="normal"></highlight></codeline>
<codeline lineno="3886"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3887"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>first<sp/>loop<sp/>above<sp/>does<sp/>all<sp/>the<sp/>inexpensive<sp/>checks.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3888"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Only<sp/>if<sp/>ALL<sp/>inputs<sp/>pass<sp/>do<sp/>we<sp/>perform<sp/>expensive<sp/>ECDSA<sp/>signature<sp/>checks.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3889"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Helps<sp/>prevent<sp/>CPU<sp/>exhaustion<sp/>attacks.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3890"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>tx.<ref refid="class_c_transaction_1a53fa787e4ea57374b4fa2a28e9a957b2" kindref="member">vin</ref>.size();<sp/>i++)</highlight></codeline>
<codeline lineno="3891"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3892"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_c_out_point" kindref="compound">COutPoint</ref><sp/>prevout<sp/>=<sp/>tx.<ref refid="class_c_transaction_1a53fa787e4ea57374b4fa2a28e9a957b2" kindref="member">vin</ref>[i].prevout;</highlight></codeline>
<codeline lineno="3893"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assert(inputs.count(prevout.<ref refid="class_c_out_point_1af131c7194a660558b0ff158f4efa7a28" kindref="member">hash</ref>)<sp/>&gt;<sp/>0);</highlight></codeline>
<codeline lineno="3894"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_c_tx_index" kindref="compound">CTxIndex</ref>&amp;<sp/>txindex<sp/>=<sp/>inputs[prevout.<ref refid="class_c_out_point_1af131c7194a660558b0ff158f4efa7a28" kindref="member">hash</ref>].first;</highlight></codeline>
<codeline lineno="3895"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_c_transaction" kindref="compound">CTransaction</ref>&amp;<sp/>txPrev<sp/>=<sp/>inputs[prevout.<ref refid="class_c_out_point_1af131c7194a660558b0ff158f4efa7a28" kindref="member">hash</ref>].second;</highlight></codeline>
<codeline lineno="3896"><highlight class="normal"></highlight></codeline>
<codeline lineno="3897"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Check<sp/>for<sp/>conflicts<sp/>(double-spend)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3898"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>This<sp/>doesn&apos;t<sp/>trigger<sp/>the<sp/>DoS<sp/>code<sp/>on<sp/>purpose;<sp/>if<sp/>it<sp/>did,<sp/>it<sp/>would<sp/>make<sp/>it<sp/>easier</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3899"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>for<sp/>an<sp/>attacker<sp/>to<sp/>attempt<sp/>to<sp/>split<sp/>the<sp/>network.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3900"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!txindex.vSpent[prevout.<ref refid="class_c_out_point_1a9fbc648ca0d11421ad66e897185a9b58" kindref="member">n</ref>].IsNull())</highlight></codeline>
<codeline lineno="3901"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>fMiner<sp/>?<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal"><sp/>:<sp/>error(</highlight><highlight class="stringliteral">&quot;ConnectInputs()<sp/>:<sp/>%s<sp/>prev<sp/>tx<sp/>already<sp/>used<sp/>at<sp/>%s&quot;</highlight><highlight class="normal">,<sp/>tx.<ref refid="class_c_transaction_1a3f8666d2a275c40da14bd5eaf47dc004" kindref="member">GetHash</ref>().<ref refid="classbase__uint_1ac3080a72402cadf28dbc9f9b69cc60be" kindref="member">ToString</ref>(),<sp/>txindex.vSpent[prevout.<ref refid="class_c_out_point_1a9fbc648ca0d11421ad66e897185a9b58" kindref="member">n</ref>].ToString());</highlight></codeline>
<codeline lineno="3902"><highlight class="normal"></highlight></codeline>
<codeline lineno="3903"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(fValidateSig)</highlight></codeline>
<codeline lineno="3904"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3905"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Skip<sp/>ECDSA<sp/>signature<sp/>verification<sp/>when<sp/>connecting<sp/>blocks<sp/>(fBlock=true)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3906"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>before<sp/>the<sp/>last<sp/>blockchain<sp/>checkpoint.<sp/>This<sp/>is<sp/>safe<sp/>because<sp/>block<sp/>merkle<sp/>hashes<sp/>are</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3907"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>still<sp/>computed<sp/>and<sp/>checked,<sp/>and<sp/>any<sp/>change<sp/>will<sp/>be<sp/>caught<sp/>at<sp/>the<sp/>next<sp/>checkpoint.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3908"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!(fBlock<sp/>&amp;&amp;<sp/>(nBestHeight<sp/>&lt;<sp/><ref refid="namespace_checkpoints_1ac4dc0a0ba00009be52fee3eef694c2c0" kindref="member">Checkpoints::GetTotalBlocksEstimate</ref>())))</highlight></codeline>
<codeline lineno="3909"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3910"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Verify<sp/>signature</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3911"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="script_8cpp_1a3bebacccf5ed6d80e80889b65830f893" kindref="member">VerifySignature</ref>(txPrev,<sp/>tx,<sp/>i,<sp/>flags,<sp/>0))</highlight></codeline>
<codeline lineno="3912"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3913"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(flags<sp/>&amp;<sp/>STANDARD_NOT_MANDATORY_VERIFY_FLAGS)<sp/>{</highlight></codeline>
<codeline lineno="3914"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Check<sp/>whether<sp/>the<sp/>failure<sp/>was<sp/>caused<sp/>by<sp/>a</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3915"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>non-mandatory<sp/>script<sp/>verification<sp/>check,<sp/>such<sp/>as</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3916"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>non-null<sp/>dummy<sp/>arguments;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3917"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>if<sp/>so,<sp/>don&apos;t<sp/>trigger<sp/>DoS<sp/>protection<sp/>to</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3918"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>avoid<sp/>splitting<sp/>the<sp/>network<sp/>between<sp/>upgraded<sp/>and</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3919"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>non-upgraded<sp/>nodes.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3920"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="script_8cpp_1a3bebacccf5ed6d80e80889b65830f893" kindref="member">VerifySignature</ref>(txPrev,<sp/>tx,<sp/>i,<sp/>flags<sp/>&amp;<sp/>~STANDARD_NOT_MANDATORY_VERIFY_FLAGS,<sp/>0))</highlight></codeline>
<codeline lineno="3921"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>error(</highlight><highlight class="stringliteral">&quot;ConnectInputs()<sp/>:<sp/>%s<sp/>non-mandatory<sp/>VerifySignature<sp/>failed&quot;</highlight><highlight class="normal">,<sp/>tx.<ref refid="class_c_transaction_1a3f8666d2a275c40da14bd5eaf47dc004" kindref="member">GetHash</ref>().<ref refid="classbase__uint_1ac3080a72402cadf28dbc9f9b69cc60be" kindref="member">ToString</ref>());</highlight></codeline>
<codeline lineno="3922"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3923"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Failures<sp/>of<sp/>other<sp/>flags<sp/>indicate<sp/>a<sp/>transaction<sp/>that<sp/>is</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3924"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>invalid<sp/>in<sp/>new<sp/>blocks,<sp/>e.g.<sp/>a<sp/>invalid<sp/>P2SH.<sp/>We<sp/>DoS<sp/>ban</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3925"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>such<sp/>nodes<sp/>as<sp/>they<sp/>are<sp/>not<sp/>following<sp/>the<sp/>protocol.<sp/>That</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3926"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>said<sp/>during<sp/>an<sp/>upgrade<sp/>careful<sp/>thought<sp/>should<sp/>be<sp/>taken</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3927"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>as<sp/>to<sp/>the<sp/>correct<sp/>behavior<sp/>-<sp/>we<sp/>may<sp/>want<sp/>to<sp/>continue</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3928"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>peering<sp/>with<sp/>non-upgraded<sp/>nodes<sp/>even<sp/>after<sp/>a<sp/>soft-fork</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3929"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>super-majority<sp/>vote<sp/>has<sp/>passed.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3930"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>tx.<ref refid="class_c_transaction_1a52eaee52d8827b7265f9dcd308b2a812" kindref="member">DoS</ref>(100,error(</highlight><highlight class="stringliteral">&quot;ConnectInputs()<sp/>:<sp/>%s<sp/>VerifySignature<sp/>failed&quot;</highlight><highlight class="normal">,<sp/>tx.<ref refid="class_c_transaction_1a3f8666d2a275c40da14bd5eaf47dc004" kindref="member">GetHash</ref>().<ref refid="classbase__uint_1ac3080a72402cadf28dbc9f9b69cc60be" kindref="member">ToString</ref>()));</highlight></codeline>
<codeline lineno="3931"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3932"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3933"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3934"><highlight class="normal"></highlight></codeline>
<codeline lineno="3935"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Mark<sp/>outpoints<sp/>as<sp/>spent</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3936"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>txindex.vSpent[prevout.<ref refid="class_c_out_point_1a9fbc648ca0d11421ad66e897185a9b58" kindref="member">n</ref>]<sp/>=<sp/>posThisTx;</highlight></codeline>
<codeline lineno="3937"><highlight class="normal"></highlight></codeline>
<codeline lineno="3938"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Write<sp/>back</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3939"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fBlock<sp/>||<sp/>fMiner)</highlight></codeline>
<codeline lineno="3940"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3941"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mapTestPool[prevout.<ref refid="class_c_out_point_1af131c7194a660558b0ff158f4efa7a28" kindref="member">hash</ref>]<sp/>=<sp/>txindex;</highlight></codeline>
<codeline lineno="3942"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3943"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3944"><highlight class="normal"></highlight></codeline>
<codeline lineno="3945"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!tx.<ref refid="class_c_transaction_1a8d924e18ddcf4c31bc7483b3a157113d" kindref="member">IsCoinStake</ref>())</highlight></codeline>
<codeline lineno="3946"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3947"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_c_transaction_po_s" kindref="compound">CTransactionPoS</ref><sp/>txPoS;</highlight></codeline>
<codeline lineno="3948"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="amount_8h_1a4eaf3a5239714d8c45b851527f7cb564" kindref="member">CAmount</ref><sp/>iValOut<sp/>=<sp/>txPoS.<ref refid="class_c_transaction_po_s_1ad85303c69a61f41eb8874f07c15faa10" kindref="member">GetValueOut</ref>(tx);</highlight></codeline>
<codeline lineno="3949"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//int64_t<sp/>iDiff<sp/>=<sp/>iValOut<sp/>-<sp/>nValueIn;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3950"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(nValueIn<sp/>&lt;<sp/>iValOut)<sp/></highlight><highlight class="comment">//TODO<sp/>(Amir):<sp/>Tx<sp/>sending<sp/>error<sp/>here...</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3951"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>tx.<ref refid="class_c_transaction_1a52eaee52d8827b7265f9dcd308b2a812" kindref="member">DoS</ref>(100,<sp/>error(</highlight><highlight class="stringliteral">&quot;ConnectInputs()<sp/>:<sp/>%s<sp/>value<sp/>in<sp/>&lt;<sp/>value<sp/>out&quot;</highlight><highlight class="normal">,<sp/>tx.<ref refid="class_c_transaction_1a3f8666d2a275c40da14bd5eaf47dc004" kindref="member">GetHash</ref>().<ref refid="classbase__uint_1ac3080a72402cadf28dbc9f9b69cc60be" kindref="member">ToString</ref>()));</highlight></codeline>
<codeline lineno="3952"><highlight class="normal"></highlight></codeline>
<codeline lineno="3953"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Tally<sp/>transaction<sp/>fees</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3954"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="amount_8h_1a4eaf3a5239714d8c45b851527f7cb564" kindref="member">CAmount</ref><sp/>nTxFee<sp/>=<sp/>nValueIn<sp/>-<sp/>iValOut;</highlight></codeline>
<codeline lineno="3955"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(nTxFee<sp/>&lt;<sp/>0)</highlight></codeline>
<codeline lineno="3956"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>tx.<ref refid="class_c_transaction_1a52eaee52d8827b7265f9dcd308b2a812" kindref="member">DoS</ref>(100,<sp/>error(</highlight><highlight class="stringliteral">&quot;ConnectInputs()<sp/>:<sp/>%s<sp/>nTxFee<sp/>&lt;<sp/>0&quot;</highlight><highlight class="normal">,<sp/>tx.<ref refid="class_c_transaction_1a3f8666d2a275c40da14bd5eaf47dc004" kindref="member">GetHash</ref>().<ref refid="classbase__uint_1ac3080a72402cadf28dbc9f9b69cc60be" kindref="member">ToString</ref>()));</highlight></codeline>
<codeline lineno="3957"><highlight class="normal"></highlight></codeline>
<codeline lineno="3958"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>enforce<sp/>transaction<sp/>fees<sp/>for<sp/>every<sp/>block</highlight></codeline>
<codeline lineno="3959"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int64_t<sp/>nRequiredFee<sp/>=<sp/>GetMinFee(*tx);</highlight></codeline>
<codeline lineno="3960"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(nTxFee<sp/>&lt;<sp/>nRequiredFee)</highlight></codeline>
<codeline lineno="3961"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>fBlock?<sp/>DoS(100,<sp/>error(&quot;ConnectInputs()<sp/>:<sp/>%s<sp/>not<sp/>paying<sp/>required<sp/>fee=%s,<sp/>paid=%s&quot;,<sp/>tx.GetHash().ToString(),<sp/>FormatMoney(nRequiredFee),<sp/>FormatMoney(nTxFee)))<sp/>:<sp/>false;</highlight></codeline>
<codeline lineno="3962"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3963"><highlight class="normal"></highlight></codeline>
<codeline lineno="3964"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nFees<sp/>+=<sp/>nTxFee;</highlight></codeline>
<codeline lineno="3965"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="amount_8h_1a12db56a9a1c931941f0943ecbb278aae" kindref="member">MoneyRange</ref>(nFees))</highlight></codeline>
<codeline lineno="3966"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>tx.<ref refid="class_c_transaction_1a52eaee52d8827b7265f9dcd308b2a812" kindref="member">DoS</ref>(100,<sp/>error(</highlight><highlight class="stringliteral">&quot;ConnectInputs()<sp/>:<sp/>nFees<sp/>out<sp/>of<sp/>range&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="3967"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3968"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3969"><highlight class="normal"></highlight></codeline>
<codeline lineno="3970"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="3971"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3972"><highlight class="normal"></highlight></codeline>
<codeline lineno="3973"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>FlushBlockFile(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>fFinalize<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="3974"><highlight class="normal">{</highlight></codeline>
<codeline lineno="3975"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="sync_8h_1a911fe23f057c2fe5aad629162d6c99d0" kindref="member">LOCK</ref>(cs_LastBlockFile);</highlight></codeline>
<codeline lineno="3976"><highlight class="normal"></highlight></codeline>
<codeline lineno="3977"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_c_disk_block_pos" kindref="compound">CDiskBlockPos</ref><sp/>posOld(nLastBlockFile,<sp/>0);</highlight></codeline>
<codeline lineno="3978"><highlight class="normal"></highlight></codeline>
<codeline lineno="3979"><highlight class="normal"><sp/><sp/><sp/><sp/>FILE<sp/>*fileOld<sp/>=<sp/><ref refid="main_8cpp_1a4728972adc7d389a00a7f7333b74b71d" kindref="member">OpenBlockFile</ref>(posOld);</highlight></codeline>
<codeline lineno="3980"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fileOld)<sp/>{</highlight></codeline>
<codeline lineno="3981"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fFinalize)</highlight></codeline>
<codeline lineno="3982"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="util_8cpp_1acb8d6b822bc1bfa609bf43bbac1a0d44" kindref="member">TruncateFile</ref>(fileOld,<sp/>vinfoBlockFile[nLastBlockFile].nSize);</highlight></codeline>
<codeline lineno="3983"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="util_8cpp_1a7572b77c2a5191de8d40d4050322ab84" kindref="member">FileCommit</ref>(fileOld);</highlight></codeline>
<codeline lineno="3984"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fclose(fileOld);</highlight></codeline>
<codeline lineno="3985"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3986"><highlight class="normal"></highlight></codeline>
<codeline lineno="3987"><highlight class="normal"><sp/><sp/><sp/><sp/>fileOld<sp/>=<sp/><ref refid="main_8cpp_1af17e2878956b7c457ef8148025d4c462" kindref="member">OpenUndoFile</ref>(posOld);</highlight></codeline>
<codeline lineno="3988"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fileOld)<sp/>{</highlight></codeline>
<codeline lineno="3989"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fFinalize)</highlight></codeline>
<codeline lineno="3990"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="util_8cpp_1acb8d6b822bc1bfa609bf43bbac1a0d44" kindref="member">TruncateFile</ref>(fileOld,<sp/>vinfoBlockFile[nLastBlockFile].nUndoSize);</highlight></codeline>
<codeline lineno="3991"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="util_8cpp_1a7572b77c2a5191de8d40d4050322ab84" kindref="member">FileCommit</ref>(fileOld);</highlight></codeline>
<codeline lineno="3992"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fclose(fileOld);</highlight></codeline>
<codeline lineno="3993"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3994"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3995"><highlight class="normal"></highlight></codeline>
<codeline lineno="3996" refid="main_8cpp_1ae2877520fcc46d869b4f5e9768227e25" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/><ref refid="main_8cpp_1ae2877520fcc46d869b4f5e9768227e25" kindref="member">FlushStateMode</ref><sp/>{</highlight></codeline>
<codeline lineno="3997" refid="main_8cpp_1ae2877520fcc46d869b4f5e9768227e25ad0ad58fd3314f311426789b0bb2a2cba" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="main_8cpp_1ae2877520fcc46d869b4f5e9768227e25ad0ad58fd3314f311426789b0bb2a2cba" kindref="member">FLUSH_STATE_IF_NEEDED</ref>,</highlight></codeline>
<codeline lineno="3998" refid="main_8cpp_1ae2877520fcc46d869b4f5e9768227e25a6a06c814025cd4514da2455ae3d5fa88" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="main_8cpp_1ae2877520fcc46d869b4f5e9768227e25a6a06c814025cd4514da2455ae3d5fa88" kindref="member">FLUSH_STATE_PERIODIC</ref>,</highlight></codeline>
<codeline lineno="3999" refid="main_8cpp_1ae2877520fcc46d869b4f5e9768227e25a5886980c58baf0c7f8c6ae29d210f38c" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="main_8cpp_1ae2877520fcc46d869b4f5e9768227e25a5886980c58baf0c7f8c6ae29d210f38c" kindref="member">FLUSH_STATE_ALWAYS</ref></highlight></codeline>
<codeline lineno="4000"><highlight class="normal">};</highlight></codeline>
<codeline lineno="4001"><highlight class="normal"></highlight></codeline>
<codeline lineno="4002"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>filesystem::path<sp/>BlockFilePath(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nFile)</highlight></codeline>
<codeline lineno="4003"><highlight class="normal">{</highlight></codeline>
<codeline lineno="4004"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>strBlockFn<sp/>=<sp/><ref refid="tinyformat_8h_1a56c674871a61baaad36ad52238c08857" kindref="member">strprintf</ref>(</highlight><highlight class="stringliteral">&quot;blk%04u.dat&quot;</highlight><highlight class="normal">,<sp/>nFile);</highlight></codeline>
<codeline lineno="4005"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="util_8cpp_1ab83866a054745d4b30a3948a1b44beba" kindref="member">GetDataDir</ref>()<sp/>/<sp/>strBlockFn;</highlight></codeline>
<codeline lineno="4006"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4007"><highlight class="normal"></highlight></codeline>
<codeline lineno="4008" refid="main_8h_1a2f26f074aac584c3398de1dcdac59de9" refkind="member"><highlight class="normal">boost::filesystem::path<sp/><ref refid="main_8cpp_1a2f26f074aac584c3398de1dcdac59de9" kindref="member">GetBlockPosFilename</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_c_disk_block_pos" kindref="compound">CDiskBlockPos</ref><sp/>&amp;pos,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*prefix)</highlight></codeline>
<codeline lineno="4009"><highlight class="normal">{</highlight></codeline>
<codeline lineno="4010"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="util_8cpp_1ab83866a054745d4b30a3948a1b44beba" kindref="member">GetDataDir</ref>()<sp/>/<sp/></highlight><highlight class="stringliteral">&quot;blocks&quot;</highlight><highlight class="normal"><sp/>/<sp/><ref refid="tinyformat_8h_1a56c674871a61baaad36ad52238c08857" kindref="member">strprintf</ref>(</highlight><highlight class="stringliteral">&quot;%s%05u.dat&quot;</highlight><highlight class="normal">,<sp/>prefix,<sp/>pos.<ref refid="struct_c_disk_block_pos_1a09f30dab5c02fbdea8a17f9bcee5aac8" kindref="member">nFile</ref>);</highlight></codeline>
<codeline lineno="4011"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4012"><highlight class="normal"></highlight></codeline>
<codeline lineno="4013" refid="main_8h_1aadc60201fa05120c42011c2ca853ad15" refkind="member"><highlight class="normal">FILE*<sp/><ref refid="main_8cpp_1ab15fc61f1d9596ad0aca703ff2c74635" kindref="member">OpenDiskFile</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_c_disk_block_pos" kindref="compound">CDiskBlockPos</ref><sp/>&amp;pos,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*prefix,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>fReadOnly)</highlight></codeline>
<codeline lineno="4014"><highlight class="normal">{</highlight></codeline>
<codeline lineno="4015"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(pos.<ref refid="struct_c_disk_block_pos_1a924f2805b274345afce890b27a0934d9" kindref="member">IsNull</ref>())</highlight></codeline>
<codeline lineno="4016"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="4017"><highlight class="normal"><sp/><sp/><sp/><sp/>boost::filesystem::path<sp/>path<sp/>=<sp/><ref refid="main_8cpp_1a2f26f074aac584c3398de1dcdac59de9" kindref="member">GetBlockPosFilename</ref>(pos,<sp/>prefix);</highlight></codeline>
<codeline lineno="4018"><highlight class="normal"><sp/><sp/><sp/><sp/>boost::filesystem::create_directories(path.parent_path());</highlight></codeline>
<codeline lineno="4019"><highlight class="normal"><sp/><sp/><sp/><sp/>FILE*<sp/>file<sp/>=<sp/>fopen(path.string().c_str(),<sp/></highlight><highlight class="stringliteral">&quot;rb+&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="4020"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!file<sp/>&amp;&amp;<sp/>!fReadOnly)</highlight></codeline>
<codeline lineno="4021"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>file<sp/>=<sp/>fopen(path.string().c_str(),<sp/></highlight><highlight class="stringliteral">&quot;wb+&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="4022"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!file)<sp/>{</highlight></codeline>
<codeline lineno="4023"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="util_8h_1afc02c0a4258fedfb316be612bb659ba8" kindref="member">LogPrintf</ref>(</highlight><highlight class="stringliteral">&quot;Unable<sp/>to<sp/>open<sp/>file<sp/>%s\n&quot;</highlight><highlight class="normal">,<sp/>path.string());</highlight></codeline>
<codeline lineno="4024"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="4025"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4026"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(pos.<ref refid="struct_c_disk_block_pos_1a9b4b5e149b655ac5c22d05883b5bca0e" kindref="member">nPos</ref>)<sp/>{</highlight></codeline>
<codeline lineno="4027"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fseek(file,<sp/>pos.<ref refid="struct_c_disk_block_pos_1a9b4b5e149b655ac5c22d05883b5bca0e" kindref="member">nPos</ref>,<sp/>SEEK_SET))<sp/>{</highlight></codeline>
<codeline lineno="4028"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="util_8h_1afc02c0a4258fedfb316be612bb659ba8" kindref="member">LogPrintf</ref>(</highlight><highlight class="stringliteral">&quot;Unable<sp/>to<sp/>seek<sp/>to<sp/>position<sp/>%u<sp/>of<sp/>%s\n&quot;</highlight><highlight class="normal">,<sp/>pos.<ref refid="struct_c_disk_block_pos_1a9b4b5e149b655ac5c22d05883b5bca0e" kindref="member">nPos</ref>,<sp/>path.string());</highlight></codeline>
<codeline lineno="4029"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fclose(file);</highlight></codeline>
<codeline lineno="4030"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="4031"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4032"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4033"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>file;</highlight></codeline>
<codeline lineno="4034"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4035"><highlight class="normal"></highlight></codeline>
<codeline lineno="4036" refid="main_8h_1a4728972adc7d389a00a7f7333b74b71d" refkind="member"><highlight class="normal">FILE*<sp/><ref refid="main_8cpp_1a4728972adc7d389a00a7f7333b74b71d" kindref="member">OpenBlockFile</ref>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nFile,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nBlockPos,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>pszMode)</highlight></codeline>
<codeline lineno="4037"><highlight class="normal">{</highlight></codeline>
<codeline lineno="4038"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((nFile<sp/>&lt;<sp/>1)<sp/>||<sp/>(nFile<sp/>==<sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)<sp/>-1))</highlight></codeline>
<codeline lineno="4039"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="4040"><highlight class="normal"><sp/><sp/><sp/><sp/>FILE*<sp/>file<sp/>=<sp/>fopen(BlockFilePath(nFile).</highlight><highlight class="keywordtype">string</highlight><highlight class="normal">().c_str(),<sp/>pszMode);</highlight></codeline>
<codeline lineno="4041"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!file)</highlight></codeline>
<codeline lineno="4042"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="4043"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(nBlockPos<sp/>!=<sp/>0<sp/>&amp;&amp;<sp/>!strchr(pszMode,<sp/></highlight><highlight class="charliteral">&apos;a&apos;</highlight><highlight class="normal">)<sp/>&amp;&amp;<sp/>!strchr(pszMode,<sp/></highlight><highlight class="charliteral">&apos;w&apos;</highlight><highlight class="normal">))</highlight></codeline>
<codeline lineno="4044"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="4045"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fseek(file,<sp/>nBlockPos,<sp/>SEEK_SET)<sp/>!=<sp/>0)</highlight></codeline>
<codeline lineno="4046"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="4047"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fclose(file);</highlight></codeline>
<codeline lineno="4048"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="4049"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4050"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4051"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>file;</highlight></codeline>
<codeline lineno="4052"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4053"><highlight class="normal"></highlight></codeline>
<codeline lineno="4054" refid="main_8h_1a531eb79ff695289ac9a4f8daf292273c" refkind="member"><highlight class="normal">FILE*<sp/><ref refid="main_8cpp_1a4728972adc7d389a00a7f7333b74b71d" kindref="member">OpenBlockFile</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_c_disk_block_pos" kindref="compound">CDiskBlockPos</ref><sp/>&amp;pos,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>fReadOnly)<sp/>{</highlight></codeline>
<codeline lineno="4055"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="main_8cpp_1ab15fc61f1d9596ad0aca703ff2c74635" kindref="member">OpenDiskFile</ref>(pos,<sp/></highlight><highlight class="stringliteral">&quot;blk&quot;</highlight><highlight class="normal">,<sp/>fReadOnly);</highlight></codeline>
<codeline lineno="4056"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4057"><highlight class="normal"></highlight></codeline>
<codeline lineno="4058" refid="main_8h_1addac9f89d64c9e26d36d1481da35877e" refkind="member"><highlight class="normal">FILE*<sp/><ref refid="main_8cpp_1af17e2878956b7c457ef8148025d4c462" kindref="member">OpenUndoFile</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_c_disk_block_pos" kindref="compound">CDiskBlockPos</ref><sp/>&amp;pos,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>fReadOnly)<sp/>{</highlight></codeline>
<codeline lineno="4059"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="main_8cpp_1ab15fc61f1d9596ad0aca703ff2c74635" kindref="member">OpenDiskFile</ref>(pos,<sp/></highlight><highlight class="stringliteral">&quot;rev&quot;</highlight><highlight class="normal">,<sp/>fReadOnly);</highlight></codeline>
<codeline lineno="4060"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4061"><highlight class="normal"></highlight></codeline>
<codeline lineno="4067"><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="main_8cpp_1a0d01c135cc5a05475e3dc3910c9888da" kindref="member">FlushStateToDisk</ref>(<ref refid="class_c_validation_state" kindref="compound">CValidationState</ref><sp/>&amp;state,<sp/><ref refid="main_8cpp_1ae2877520fcc46d869b4f5e9768227e25" kindref="member">FlushStateMode</ref><sp/>mode)<sp/>{</highlight></codeline>
<codeline lineno="4068"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="sync_8h_1a911fe23f057c2fe5aad629162d6c99d0" kindref="member">LOCK</ref>(cs_main);</highlight></codeline>
<codeline lineno="4069"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="stdint_8h_1adec1df1b8b51cb32b77e5b86fff46471" kindref="member">int64_t</ref><sp/>nLastWrite<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="4070"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">try</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="4071"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((mode<sp/>==<sp/><ref refid="main_8cpp_1ae2877520fcc46d869b4f5e9768227e25a5886980c58baf0c7f8c6ae29d210f38c" kindref="member">FLUSH_STATE_ALWAYS</ref>)<sp/>||</highlight></codeline>
<codeline lineno="4072"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((mode<sp/>==<sp/><ref refid="main_8cpp_1ae2877520fcc46d869b4f5e9768227e25a6a06c814025cd4514da2455ae3d5fa88" kindref="member">FLUSH_STATE_PERIODIC</ref><sp/>||<sp/>mode<sp/>==<sp/><ref refid="main_8cpp_1ae2877520fcc46d869b4f5e9768227e25ad0ad58fd3314f311426789b0bb2a2cba" kindref="member">FLUSH_STATE_IF_NEEDED</ref>)<sp/>&amp;&amp;<sp/>pcoinsTip-&gt;<ref refid="class_c_coins_view_cache_1a5e8c37ab1b772d00b57e2b40256a4646" kindref="member">GetCacheSize</ref>()<sp/>&gt;<sp/><ref refid="main_8cpp_1a08b980f03b2fb15445e0ddc8bb4b3d73" kindref="member">nCoinCacheSize</ref>)<sp/>||</highlight></codeline>
<codeline lineno="4073"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(mode<sp/>==<sp/><ref refid="main_8cpp_1ae2877520fcc46d869b4f5e9768227e25a6a06c814025cd4514da2455ae3d5fa88" kindref="member">FLUSH_STATE_PERIODIC</ref><sp/>&amp;&amp;<sp/><ref refid="util_8h_1a0c5a06b50cd805b1923552114494c029" kindref="member">GetTimeMicros</ref>()<sp/>&gt;<sp/>nLastWrite<sp/>+<sp/>DATABASE_WRITE_INTERVAL<sp/>*<sp/>1000000))<sp/>{</highlight></codeline>
<codeline lineno="4074"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Typical<sp/>CCoins<sp/>structures<sp/>on<sp/>disk<sp/>are<sp/>around<sp/>100<sp/>bytes<sp/>in<sp/>size.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4075"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Pushing<sp/>a<sp/>new<sp/>one<sp/>to<sp/>the<sp/>database<sp/>can<sp/>cause<sp/>it<sp/>to<sp/>be<sp/>written</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4076"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>twice<sp/>(once<sp/>in<sp/>the<sp/>log,<sp/>and<sp/>once<sp/>in<sp/>the<sp/>tables).<sp/>This<sp/>is<sp/>already</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4077"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>an<sp/>overestimation,<sp/>as<sp/>most<sp/>will<sp/>delete<sp/>an<sp/>existing<sp/>entry<sp/>or</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4078"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>overwrite<sp/>one.<sp/>Still,<sp/>use<sp/>a<sp/>conservative<sp/>safety<sp/>factor<sp/>of<sp/>2.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4079"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="main_8cpp_1a7d4a97e049394047743b48c0cd0f0791" kindref="member">CheckDiskSpace</ref>(100<sp/>*<sp/>2<sp/>*<sp/>2<sp/>*<sp/>pcoinsTip-&gt;<ref refid="class_c_coins_view_cache_1a5e8c37ab1b772d00b57e2b40256a4646" kindref="member">GetCacheSize</ref>()))</highlight></codeline>
<codeline lineno="4080"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>state.<ref refid="class_c_validation_state_1abf67ad56f62df5679d47c289684c554c" kindref="member">Error</ref>(</highlight><highlight class="stringliteral">&quot;out<sp/>of<sp/>disk<sp/>space&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="4081"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>First<sp/>make<sp/>sure<sp/>all<sp/>block<sp/>and<sp/>undo<sp/>data<sp/>is<sp/>flushed<sp/>to<sp/>disk.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4082"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FlushBlockFile();</highlight></codeline>
<codeline lineno="4083"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Then<sp/>update<sp/>all<sp/>block<sp/>file<sp/>information<sp/>(which<sp/>may<sp/>refer<sp/>to<sp/>block<sp/>and<sp/>undo<sp/>files).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4084"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>fileschanged<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4085"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(set&lt;int&gt;::iterator<sp/>it<sp/>=<sp/>setDirtyFileInfo.begin();<sp/>it<sp/>!=<sp/>setDirtyFileInfo.end();<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="4086"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!pblocktree-&gt;<ref refid="class_c_block_tree_d_b_1ae248032ee1f1303dea54a0b36ad84755" kindref="member">WriteBlockFileInfo</ref>(*it,<sp/>vinfoBlockFile[*it]))<sp/>{</highlight></codeline>
<codeline lineno="4087"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>state.<ref refid="class_c_validation_state_1a6788cb521cf538ac80413a1c6c3da5e8" kindref="member">Abort</ref>(</highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>write<sp/>to<sp/>block<sp/>index&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="4088"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4089"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fileschanged<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4090"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>setDirtyFileInfo.erase(it++);</highlight></codeline>
<codeline lineno="4091"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4092"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fileschanged<sp/>&amp;&amp;<sp/>!pblocktree-&gt;<ref refid="class_c_block_tree_d_b_1ae1f4ea54edf05a056d2da00ea90a9394" kindref="member">WriteLastBlockFile</ref>(nLastBlockFile))<sp/>{</highlight></codeline>
<codeline lineno="4093"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>state.<ref refid="class_c_validation_state_1a6788cb521cf538ac80413a1c6c3da5e8" kindref="member">Abort</ref>(</highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>write<sp/>to<sp/>block<sp/>index&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="4094"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4095"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(set&lt;CBlockIndex*&gt;::iterator<sp/>it<sp/>=<sp/>setDirtyBlockIndex.begin();<sp/>it<sp/>!=<sp/>setDirtyBlockIndex.end();<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="4096"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!pblocktree-&gt;<ref refid="class_c_block_tree_d_b_1a608a04a08445d95e477cb66889c679d0" kindref="member">WriteBlockIndex</ref>(<ref refid="class_c_disk_block_index" kindref="compound">CDiskBlockIndex</ref>(*it)))<sp/>{</highlight></codeline>
<codeline lineno="4097"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>state.<ref refid="class_c_validation_state_1a6788cb521cf538ac80413a1c6c3da5e8" kindref="member">Abort</ref>(</highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>write<sp/>to<sp/>block<sp/>index&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="4098"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4099"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>setDirtyBlockIndex.erase(it++);</highlight></codeline>
<codeline lineno="4100"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4101"><highlight class="normal"></highlight></codeline>
<codeline lineno="4102"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pblocktree-&gt;<ref refid="class_c_level_d_b_wrapper_1abd05e914893cd610e8444871f829d8c9" kindref="member">Sync</ref>();</highlight></codeline>
<codeline lineno="4103"><highlight class="normal"></highlight></codeline>
<codeline lineno="4104"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Finally<sp/>flush<sp/>the<sp/>chainstate<sp/>(which<sp/>may<sp/>refer<sp/>to<sp/>block<sp/>index<sp/>entries).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4105"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!pcoinsTip-&gt;<ref refid="class_c_coins_view_cache_1ac9888d4feaa46666d03871cd7cd1c01d" kindref="member">Flush</ref>())</highlight></codeline>
<codeline lineno="4106"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>state.<ref refid="class_c_validation_state_1a6788cb521cf538ac80413a1c6c3da5e8" kindref="member">Abort</ref>(</highlight><highlight class="stringliteral">&quot;Failed<sp/>to<sp/>write<sp/>to<sp/>coin<sp/>database&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="4107"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Update<sp/>best<sp/>block<sp/>in<sp/>wallet<sp/>(so<sp/>we<sp/>can<sp/>detect<sp/>restored<sp/>wallets).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4108"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//TODO<sp/>(Amir):<sp/>put<sp/>back<sp/>when<sp/>chainActive<sp/>is<sp/>implemented.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4109"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//if<sp/>(mode<sp/>!=<sp/>FLUSH_STATE_IF_NEEDED)<sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4110"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>g_signals.SetBestChain(chainActive.GetLocator());</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4111"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4112"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nLastWrite<sp/>=<sp/><ref refid="util_8h_1a0c5a06b50cd805b1923552114494c029" kindref="member">GetTimeMicros</ref>();</highlight></codeline>
<codeline lineno="4113"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4114"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">catch</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::runtime_error&amp;<sp/>e)<sp/>{</highlight></codeline>
<codeline lineno="4115"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>state.<ref refid="class_c_validation_state_1a6788cb521cf538ac80413a1c6c3da5e8" kindref="member">Abort</ref>(std::string(</highlight><highlight class="stringliteral">&quot;System<sp/>error<sp/>while<sp/>flushing:<sp/>&quot;</highlight><highlight class="normal">)<sp/>+<sp/>e.what());</highlight></codeline>
<codeline lineno="4116"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4117"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4118"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4119"><highlight class="normal"></highlight></codeline>
<codeline lineno="4120" refid="main_8h_1a0d01c135cc5a05475e3dc3910c9888da" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="main_8cpp_1a0d01c135cc5a05475e3dc3910c9888da" kindref="member">FlushStateToDisk</ref>()<sp/>{</highlight></codeline>
<codeline lineno="4121"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_c_validation_state" kindref="compound">CValidationState</ref><sp/><ref refid="db__test_8cc_1a42432b4356adce5579ccf597f6e83e54" kindref="member">state</ref>;</highlight></codeline>
<codeline lineno="4122"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="main_8cpp_1a0d01c135cc5a05475e3dc3910c9888da" kindref="member">FlushStateToDisk</ref>(state,<sp/><ref refid="main_8cpp_1ae2877520fcc46d869b4f5e9768227e25a5886980c58baf0c7f8c6ae29d210f38c" kindref="member">FLUSH_STATE_ALWAYS</ref>);</highlight></codeline>
<codeline lineno="4123"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4124"><highlight class="normal"></highlight></codeline>
<codeline lineno="4125" refid="class_c_block_1a6e308b2d75d1cfc4a75eda36feb60ca1" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="class_c_block_1a6e308b2d75d1cfc4a75eda36feb60ca1" kindref="member">CBlock::SetBestChain</ref>(<ref refid="class_c_tx_d_b" kindref="compound">CTxDB</ref>&amp;<sp/>txdb,<sp/><ref refid="class_c_block_index" kindref="compound">CBlockIndex</ref>*<sp/>pindexNew)</highlight></codeline>
<codeline lineno="4126"><highlight class="normal">{</highlight></codeline>
<codeline lineno="4127"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classuint256" kindref="compound">uint256</ref><sp/>hash<sp/>=<sp/>GetHash();</highlight></codeline>
<codeline lineno="4128"><highlight class="normal"></highlight></codeline>
<codeline lineno="4129"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!txdb.<ref refid="class_c_tx_d_b_1af3c27c5cb8f922b5c03840feda844016" kindref="member">TxnBegin</ref>())</highlight></codeline>
<codeline lineno="4130"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>error(</highlight><highlight class="stringliteral">&quot;SetBestChain()<sp/>:<sp/>TxnBegin<sp/>failed&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="4131"><highlight class="normal"></highlight></codeline>
<codeline lineno="4132"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(pindexGenesisBlock<sp/>==<sp/>NULL<sp/>&amp;&amp;<sp/>hash<sp/>==<sp/><ref refid="chainparams_8cpp_1ace5c5b706d71a324a417dd2db394fd4a" kindref="member">Params</ref>().<ref refid="class_c_chain_params_1a40411665bb7ca75a8758d33594901e91" kindref="member">HashGenesisBlock</ref>())</highlight></codeline>
<codeline lineno="4133"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="4134"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>txdb.<ref refid="class_c_tx_d_b_1a2cf58de69c1c07e500a1f8d0b0709476" kindref="member">WriteHashBestChain</ref>(hash);</highlight></codeline>
<codeline lineno="4135"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!txdb.<ref refid="class_c_tx_d_b_1aff04f078df2fc3640d559ce62fc9a6a2" kindref="member">TxnCommit</ref>())</highlight></codeline>
<codeline lineno="4136"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>error(</highlight><highlight class="stringliteral">&quot;SetBestChain()<sp/>:<sp/>TxnCommit<sp/>failed&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="4137"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pindexGenesisBlock<sp/>=<sp/>pindexNew;</highlight></codeline>
<codeline lineno="4138"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4139"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(hashPrevBlock<sp/>==<sp/>hashBestChain)</highlight></codeline>
<codeline lineno="4140"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="4141"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!SetBestChainInner(txdb,<sp/>pindexNew))</highlight></codeline>
<codeline lineno="4142"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>error(</highlight><highlight class="stringliteral">&quot;SetBestChain()<sp/>:<sp/>SetBestChainInner<sp/>failed&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="4143"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4144"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4145"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="4146"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>first<sp/>block<sp/>in<sp/>the<sp/>new<sp/>chain<sp/>that<sp/>will<sp/>cause<sp/>it<sp/>to<sp/>become<sp/>the<sp/>new<sp/>best<sp/>chain</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4147"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_c_block_index" kindref="compound">CBlockIndex</ref><sp/>*pindexIntermediate<sp/>=<sp/>pindexNew;</highlight></codeline>
<codeline lineno="4148"><highlight class="normal"></highlight></codeline>
<codeline lineno="4149"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>list<sp/>of<sp/>blocks<sp/>that<sp/>need<sp/>to<sp/>be<sp/>connected<sp/>afterwards</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4150"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;CBlockIndex*&gt;<sp/>vpindexSecondary;</highlight></codeline>
<codeline lineno="4151"><highlight class="normal"></highlight></codeline>
<codeline lineno="4152"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Reorganize<sp/>is<sp/>costly<sp/>in<sp/>terms<sp/>of<sp/>db<sp/>load,<sp/>as<sp/>it<sp/>works<sp/>in<sp/>a<sp/>single<sp/>db<sp/>transaction.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4153"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Try<sp/>to<sp/>limit<sp/>how<sp/>much<sp/>needs<sp/>to<sp/>be<sp/>done<sp/>inside</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4154"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(pindexIntermediate-&gt;<ref refid="class_c_block_index_1a1ef11137155df1dd5c81491630cece39" kindref="member">pprev</ref><sp/>&amp;&amp;<sp/>pindexIntermediate-&gt;<ref refid="class_c_block_index_1a1ef11137155df1dd5c81491630cece39" kindref="member">pprev</ref>-&gt;<ref refid="class_c_block_index_1aa11268e5a01c5a7d33fb313fb0494015" kindref="member">nChainTrust</ref><sp/>&gt;<sp/>pindexBest-&gt;<ref refid="class_c_block_index_1aa11268e5a01c5a7d33fb313fb0494015" kindref="member">nChainTrust</ref>)</highlight></codeline>
<codeline lineno="4155"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="4156"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vpindexSecondary.push_back(pindexIntermediate);</highlight></codeline>
<codeline lineno="4157"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pindexIntermediate<sp/>=<sp/>pindexIntermediate-&gt;<ref refid="class_c_block_index_1a1ef11137155df1dd5c81491630cece39" kindref="member">pprev</ref>;</highlight></codeline>
<codeline lineno="4158"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4159"><highlight class="normal"></highlight></codeline>
<codeline lineno="4160"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!vpindexSecondary.empty())</highlight></codeline>
<codeline lineno="4161"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="util_8h_1afc02c0a4258fedfb316be612bb659ba8" kindref="member">LogPrintf</ref>(</highlight><highlight class="stringliteral">&quot;Postponing<sp/>%u<sp/>reconnects\n&quot;</highlight><highlight class="normal">,<sp/>vpindexSecondary.size());</highlight></codeline>
<codeline lineno="4162"><highlight class="normal"></highlight></codeline>
<codeline lineno="4163"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Switch<sp/>to<sp/>new<sp/>best<sp/>branch</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4164"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="chain_8cpp_1a674b674771a7750436800c08fc75437b" kindref="member">Reorganize</ref>(txdb,<sp/>pindexIntermediate))</highlight></codeline>
<codeline lineno="4165"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="4166"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>txdb.<ref refid="class_c_tx_d_b_1ac984bce763c97af6fd90f3056367b521" kindref="member">TxnAbort</ref>();</highlight></codeline>
<codeline lineno="4167"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="chain_8cpp_1ae282007adebd031cdbfecdd0ad1feeb8" kindref="member">InvalidChainFound</ref>(pindexNew);</highlight></codeline>
<codeline lineno="4168"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>error(</highlight><highlight class="stringliteral">&quot;SetBestChain()<sp/>:<sp/>Reorganize<sp/>failed&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="4169"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4170"><highlight class="normal"></highlight></codeline>
<codeline lineno="4171"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Connect<sp/>further<sp/>blocks</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4172"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>BOOST_REVERSE_FOREACH(<ref refid="class_c_block_index" kindref="compound">CBlockIndex</ref><sp/>*pindex,<sp/>vpindexSecondary)</highlight></codeline>
<codeline lineno="4173"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="4174"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_c_block" kindref="compound">CBlock</ref><sp/><ref refid="core_8h_1ace80c27428e237fe24f54ae915a36133" kindref="member">block</ref>;</highlight></codeline>
<codeline lineno="4175"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!block.<ref refid="class_c_block_1a77a1b1e9902e1e557d762f5a5f325cd8" kindref="member">ReadFromDisk</ref>(pindex))</highlight></codeline>
<codeline lineno="4176"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="4177"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="util_8h_1afc02c0a4258fedfb316be612bb659ba8" kindref="member">LogPrintf</ref>(</highlight><highlight class="stringliteral">&quot;SetBestChain()<sp/>:<sp/>ReadFromDisk<sp/>failed\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="4178"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4179"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4180"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!txdb.<ref refid="class_c_tx_d_b_1af3c27c5cb8f922b5c03840feda844016" kindref="member">TxnBegin</ref>())<sp/>{</highlight></codeline>
<codeline lineno="4181"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="util_8h_1afc02c0a4258fedfb316be612bb659ba8" kindref="member">LogPrintf</ref>(</highlight><highlight class="stringliteral">&quot;SetBestChain()<sp/>:<sp/>TxnBegin<sp/>2<sp/>failed\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="4182"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4183"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4184"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>errors<sp/>now<sp/>are<sp/>not<sp/>fatal,<sp/>we<sp/>still<sp/>did<sp/>a<sp/>reorganisation<sp/>to<sp/>a<sp/>new<sp/>chain<sp/>in<sp/>a<sp/>valid<sp/>way</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4185"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!block.SetBestChainInner(txdb,<sp/>pindex))</highlight></codeline>
<codeline lineno="4186"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4187"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4188"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4189"><highlight class="normal"></highlight></codeline>
<codeline lineno="4190"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Update<sp/>best<sp/>block<sp/>in<sp/>wallet<sp/>(so<sp/>we<sp/>can<sp/>detect<sp/>restored<sp/>wallets)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4191"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>fIsInitialDownload<sp/>=<sp/><ref refid="chain_8cpp_1a5edcd96316574fd4a7f3ae0922a5cfd6" kindref="member">IsInitialBlockDownload</ref>();</highlight></codeline>
<codeline lineno="4192"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((pindexNew-&gt;<ref refid="class_c_block_index_1aebfc8d6b95852546760e742553d7bfd5" kindref="member">nHeight</ref><sp/>%<sp/>20160)<sp/>==<sp/>0<sp/>||<sp/>(!fIsInitialDownload<sp/>&amp;&amp;<sp/>(pindexNew-&gt;<ref refid="class_c_block_index_1aebfc8d6b95852546760e742553d7bfd5" kindref="member">nHeight</ref><sp/>%<sp/>144)<sp/>==<sp/>0))</highlight></codeline>
<codeline lineno="4193"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="4194"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_c_block_locator" kindref="compound">CBlockLocator</ref><sp/>locator(pindexNew);</highlight></codeline>
<codeline lineno="4195"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>g_signals.SetBestChain(locator);</highlight></codeline>
<codeline lineno="4196"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4197"><highlight class="normal"></highlight></codeline>
<codeline lineno="4198"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>New<sp/>best<sp/>block</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4199"><highlight class="normal"><sp/><sp/><sp/><sp/>hashBestChain<sp/>=<sp/><ref refid="cache_8cc_1a11ecb029164e055f28f4123ce3748862" kindref="member">hash</ref>;</highlight></codeline>
<codeline lineno="4200"><highlight class="normal"><sp/><sp/><sp/><sp/>pindexBest<sp/>=<sp/>pindexNew;</highlight></codeline>
<codeline lineno="4201"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="chain_8h_1a5f1b54ddbc71601bb0c66ef701e02663" kindref="member">pblockindexFBBHLast</ref><sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="4202"><highlight class="normal"><sp/><sp/><sp/><sp/>nBestHeight<sp/>=<sp/>pindexBest-&gt;<ref refid="class_c_block_index_1aebfc8d6b95852546760e742553d7bfd5" kindref="member">nHeight</ref>;</highlight></codeline>
<codeline lineno="4203"><highlight class="normal"><sp/><sp/><sp/><sp/>nBestChainTrust<sp/>=<sp/>pindexNew-&gt;<ref refid="class_c_block_index_1aa11268e5a01c5a7d33fb313fb0494015" kindref="member">nChainTrust</ref>;</highlight></codeline>
<codeline lineno="4204"><highlight class="normal"><sp/><sp/><sp/><sp/>nTimeBestReceived<sp/>=<sp/><ref refid="util_8cpp_1a46fac5fba8ba905b5f9acb364f5d8c6f" kindref="member">GetTime</ref>();</highlight></codeline>
<codeline lineno="4205"><highlight class="normal"><sp/><sp/><sp/><sp/>mempool.AddTransactionsUpdated(1);</highlight></codeline>
<codeline lineno="4206"><highlight class="normal"></highlight></codeline>
<codeline lineno="4207"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classuint256" kindref="compound">uint256</ref><sp/>nBestBlockTrust<sp/>=<sp/>pindexBest-&gt;<ref refid="class_c_block_index_1aebfc8d6b95852546760e742553d7bfd5" kindref="member">nHeight</ref><sp/>!=<sp/>0<sp/>?<sp/>(pindexBest-&gt;<ref refid="class_c_block_index_1aa11268e5a01c5a7d33fb313fb0494015" kindref="member">nChainTrust</ref><sp/>-<sp/>pindexBest-&gt;<ref refid="class_c_block_index_1a1ef11137155df1dd5c81491630cece39" kindref="member">pprev</ref>-&gt;<ref refid="class_c_block_index_1aa11268e5a01c5a7d33fb313fb0494015" kindref="member">nChainTrust</ref>)<sp/>:<sp/>pindexBest-&gt;<ref refid="class_c_block_index_1aa11268e5a01c5a7d33fb313fb0494015" kindref="member">nChainTrust</ref>;</highlight></codeline>
<codeline lineno="4208"><highlight class="normal"></highlight></codeline>
<codeline lineno="4209"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="util_8h_1afc02c0a4258fedfb316be612bb659ba8" kindref="member">LogPrintf</ref>(</highlight><highlight class="stringliteral">&quot;SetBestChain:<sp/>new<sp/>best=%s<sp/><sp/>height=%d<sp/><sp/>trust=%s<sp/><sp/>blocktrust=%d<sp/><sp/>date=%s\n&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="4210"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>hashBestChain.<ref refid="classbase__uint_1ac3080a72402cadf28dbc9f9b69cc60be" kindref="member">ToString</ref>(),<sp/><ref refid="main_8cpp_1a843f1984796a7e44a9e23fccd6a8af34" kindref="member">nBestHeight</ref>,</highlight></codeline>
<codeline lineno="4211"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_c_big_num" kindref="compound">CBigNum</ref>(nBestChainTrust).<ref refid="class_c_big_num_1adca0fa61568497152375328deef6c895" kindref="member">ToString</ref>(),</highlight></codeline>
<codeline lineno="4212"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>nBestBlockTrust.<ref refid="classbase__uint_1a0cb831d93f1580c1355b9665c21629f2" kindref="member">Get64</ref>(),</highlight></codeline>
<codeline lineno="4213"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="util_8cpp_1a749bc6776c8ec72d7c5e4dea56aee415" kindref="member">DateTimeStrFormat</ref>(</highlight><highlight class="stringliteral">&quot;%x<sp/>%H:%M:%S&quot;</highlight><highlight class="normal">,<sp/>pindexBest-&gt;<ref refid="class_c_block_index_1ab63b774ae798f5f9e54b400ac8b5ef4b" kindref="member">GetBlockTime</ref>()));</highlight></codeline>
<codeline lineno="4214"><highlight class="normal"></highlight></codeline>
<codeline lineno="4215"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Check<sp/>the<sp/>version<sp/>of<sp/>the<sp/>last<sp/>100<sp/>blocks<sp/>to<sp/>see<sp/>if<sp/>we<sp/>need<sp/>to<sp/>upgrade:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4216"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!fIsInitialDownload)</highlight></codeline>
<codeline lineno="4217"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="4218"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nUpgraded<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="4219"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_c_block_index" kindref="compound">CBlockIndex</ref>*<sp/>pindex<sp/>=<sp/><ref refid="main_8cpp_1a6454ad864029344132a0a0b59b1456ee" kindref="member">pindexBest</ref>;</highlight></codeline>
<codeline lineno="4220"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>100<sp/>&amp;&amp;<sp/>pindex<sp/>!=<sp/>NULL;<sp/>i++)</highlight></codeline>
<codeline lineno="4221"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="4222"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(pindex-&gt;<ref refid="class_c_block_index_1a45126301a0a6e26010527a7bbfc1ef58" kindref="member">nVersion</ref><sp/>&gt;<sp/><ref refid="class_c_block_header_1a1da5740e22d124df509383a1ff96eb7c" kindref="member">CBlock::CURRENT_VERSION</ref>)</highlight></codeline>
<codeline lineno="4223"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++nUpgraded;</highlight></codeline>
<codeline lineno="4224"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pindex<sp/>=<sp/>pindex-&gt;<ref refid="class_c_block_index_1a1ef11137155df1dd5c81491630cece39" kindref="member">pprev</ref>;</highlight></codeline>
<codeline lineno="4225"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4226"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(nUpgraded<sp/>&gt;<sp/>0)</highlight></codeline>
<codeline lineno="4227"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="util_8h_1afc02c0a4258fedfb316be612bb659ba8" kindref="member">LogPrintf</ref>(</highlight><highlight class="stringliteral">&quot;SetBestChain:<sp/>%d<sp/>of<sp/>last<sp/>100<sp/>blocks<sp/>above<sp/>version<sp/>%d\n&quot;</highlight><highlight class="normal">,<sp/>nUpgraded,<sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)<ref refid="class_c_block_header_1a1da5740e22d124df509383a1ff96eb7c" kindref="member">CBlock::CURRENT_VERSION</ref>);</highlight></codeline>
<codeline lineno="4228"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(nUpgraded<sp/>&gt;<sp/>100/2)</highlight></codeline>
<codeline lineno="4229"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>strMiscWarning<sp/>is<sp/>read<sp/>by<sp/>GetWarnings(),<sp/>called<sp/>by<sp/>Qt<sp/>and<sp/>the<sp/>JSON-RPC<sp/>code<sp/>to<sp/>warn<sp/>the<sp/>user:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4230"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="util_8cpp_1a396fd0b4e52260e1ddf379fa6e09d887" kindref="member">strMiscWarning</ref><sp/>=<sp/><ref refid="ui__interface_8h_1aad133bb6103b53cebf03fd01e2f11ba1" kindref="member">_</ref>(</highlight><highlight class="stringliteral">&quot;Warning:<sp/>This<sp/>version<sp/>is<sp/>obsolete,<sp/>upgrade<sp/>required!&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="4231"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4232"><highlight class="normal"></highlight></codeline>
<codeline lineno="4233"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>strCmd<sp/>=<sp/><ref refid="util_8cpp_1a24f685720bf40370e5bd2a192ad50cd8" kindref="member">GetArg</ref>(</highlight><highlight class="stringliteral">&quot;-blocknotify&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="4234"><highlight class="normal"></highlight></codeline>
<codeline lineno="4235"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!fIsInitialDownload<sp/>&amp;&amp;<sp/>!strCmd.empty())</highlight></codeline>
<codeline lineno="4236"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="4237"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>boost::replace_all(strCmd,<sp/></highlight><highlight class="stringliteral">&quot;%s&quot;</highlight><highlight class="normal">,<sp/>hashBestChain.<ref refid="classbase__uint_1ac9929c28600796a9acf75881bb750576" kindref="member">GetHex</ref>());</highlight></codeline>
<codeline lineno="4238"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>boost::thread<sp/>t(<ref refid="util_8cpp_1adf94c00a5ac719c92a2f1bb2f8b2167f" kindref="member">runCommand</ref>,<sp/>strCmd);<sp/></highlight><highlight class="comment">//<sp/>thread<sp/>runs<sp/>free</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4239"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4240"><highlight class="normal"></highlight></codeline>
<codeline lineno="4241"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4242"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4243"><highlight class="normal"></highlight></codeline>
<codeline lineno="4244" refid="class_c_block_1afab527f890c5575db3b1a2b17f47bf5a" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="class_c_block_1afab527f890c5575db3b1a2b17f47bf5a" kindref="member">CBlock::AddToBlockIndex</ref>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nFile,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nBlockPos,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classuint256" kindref="compound">uint256</ref>&amp;<sp/>hashProof)</highlight></codeline>
<codeline lineno="4245"><highlight class="normal">{</highlight></codeline>
<codeline lineno="4246"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="sync_8h_1acd61d0cb3b49f367728193720014aed0" kindref="member">AssertLockHeld</ref>(cs_main);</highlight></codeline>
<codeline lineno="4247"><highlight class="normal"></highlight></codeline>
<codeline lineno="4248"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Check<sp/>for<sp/>duplicate</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4249"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classuint256" kindref="compound">uint256</ref><sp/>hash<sp/>=<sp/>GetHash();</highlight></codeline>
<codeline lineno="4250"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mapBlockIndex.count(hash))</highlight></codeline>
<codeline lineno="4251"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>error(</highlight><highlight class="stringliteral">&quot;AddToBlockIndex()<sp/>:<sp/>%s<sp/>already<sp/>exists&quot;</highlight><highlight class="normal">,<sp/>hash.<ref refid="classbase__uint_1ac3080a72402cadf28dbc9f9b69cc60be" kindref="member">ToString</ref>());</highlight></codeline>
<codeline lineno="4252"><highlight class="normal"></highlight></codeline>
<codeline lineno="4253"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Construct<sp/>new<sp/>block<sp/>index<sp/>object</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4254"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_c_block_index" kindref="compound">CBlockIndex</ref>*<sp/>pindexNew<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_c_block_index" kindref="compound">CBlockIndex</ref>(nFile,<sp/>nBlockPos,<sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="4255"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!pindexNew)</highlight></codeline>
<codeline lineno="4256"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>error(</highlight><highlight class="stringliteral">&quot;AddToBlockIndex()<sp/>:<sp/>new<sp/>CBlockIndex<sp/>failed&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="4257"><highlight class="normal"><sp/><sp/><sp/><sp/>pindexNew-&gt;<ref refid="class_c_block_index_1afac8099e03ffda463c7153ca82d37b66" kindref="member">phashBlock</ref><sp/>=<sp/>&amp;<ref refid="cache_8cc_1a11ecb029164e055f28f4123ce3748862" kindref="member">hash</ref>;</highlight></codeline>
<codeline lineno="4258"><highlight class="normal"><sp/><sp/><sp/><sp/>map&lt;uint256,<sp/>CBlockIndex*&gt;::iterator<sp/>miPrev<sp/>=<sp/>mapBlockIndex.find(hashPrevBlock);</highlight></codeline>
<codeline lineno="4259"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(miPrev<sp/>!=<sp/>mapBlockIndex.end())</highlight></codeline>
<codeline lineno="4260"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="4261"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pindexNew-&gt;<ref refid="class_c_block_index_1a1ef11137155df1dd5c81491630cece39" kindref="member">pprev</ref><sp/>=<sp/>(*miPrev).second;</highlight></codeline>
<codeline lineno="4262"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pindexNew-&gt;<ref refid="class_c_block_index_1aebfc8d6b95852546760e742553d7bfd5" kindref="member">nHeight</ref><sp/>=<sp/>pindexNew-&gt;<ref refid="class_c_block_index_1a1ef11137155df1dd5c81491630cece39" kindref="member">pprev</ref>-&gt;<ref refid="class_c_block_index_1aebfc8d6b95852546760e742553d7bfd5" kindref="member">nHeight</ref><sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="4263"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4264"><highlight class="normal"></highlight></codeline>
<codeline lineno="4265"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>ppcoin:<sp/>compute<sp/>chain<sp/>trust<sp/>score</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4266"><highlight class="normal"><sp/><sp/><sp/><sp/>pindexNew-&gt;<ref refid="class_c_block_index_1aa11268e5a01c5a7d33fb313fb0494015" kindref="member">nChainTrust</ref><sp/>=<sp/>(pindexNew-&gt;<ref refid="class_c_block_index_1a1ef11137155df1dd5c81491630cece39" kindref="member">pprev</ref><sp/>?<sp/>pindexNew-&gt;<ref refid="class_c_block_index_1a1ef11137155df1dd5c81491630cece39" kindref="member">pprev</ref>-&gt;<ref refid="class_c_block_index_1aa11268e5a01c5a7d33fb313fb0494015" kindref="member">nChainTrust</ref><sp/>:<sp/>0)<sp/>+<sp/>pindexNew-&gt;<ref refid="class_c_block_index_1ab8cb2abace4e5b6dd405e85f66f17f9a" kindref="member">GetBlockTrust</ref>();</highlight></codeline>
<codeline lineno="4267"><highlight class="normal"></highlight></codeline>
<codeline lineno="4268"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>ppcoin:<sp/>compute<sp/>stake<sp/>entropy<sp/>bit<sp/>for<sp/>stake<sp/>modifier</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4269"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!pindexNew-&gt;<ref refid="class_c_block_index_1a7a161878ce10e36cf7c12004f31357cf" kindref="member">SetStakeEntropyBit</ref>(GetStakeEntropyBit()))</highlight></codeline>
<codeline lineno="4270"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>error(</highlight><highlight class="stringliteral">&quot;AddToBlockIndex()<sp/>:<sp/>SetStakeEntropyBit()<sp/>failed&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="4271"><highlight class="normal"></highlight></codeline>
<codeline lineno="4272"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Record<sp/>proof<sp/>hash<sp/>value</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4273"><highlight class="normal"><sp/><sp/><sp/><sp/>pindexNew-&gt;<ref refid="class_c_block_index_1a553e6fc301e8130118d7ec68dce91ee9" kindref="member">hashProof</ref><sp/>=<sp/>hashProof;</highlight></codeline>
<codeline lineno="4274"><highlight class="normal"></highlight></codeline>
<codeline lineno="4275"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>ppcoin:<sp/>compute<sp/>stake<sp/>modifier</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4276"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="stdint_8h_1aaa5d1cd013383c889537491c3cfd9aad" kindref="member">uint64_t</ref><sp/>nStakeModifier<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="4277"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>fGeneratedStakeModifier<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4278"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="kernel_8cpp_1aa58b095aa0abb6f956cc68169124099a" kindref="member">ComputeNextStakeModifier</ref>(pindexNew-&gt;<ref refid="class_c_block_index_1a1ef11137155df1dd5c81491630cece39" kindref="member">pprev</ref>,<sp/>nStakeModifier,<sp/>fGeneratedStakeModifier))</highlight></codeline>
<codeline lineno="4279"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>error(</highlight><highlight class="stringliteral">&quot;AddToBlockIndex()<sp/>:<sp/>ComputeNextStakeModifier()<sp/>failed&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="4280"><highlight class="normal"><sp/><sp/><sp/><sp/>pindexNew-&gt;<ref refid="class_c_block_index_1acc51fc41aa2b57c4f700aa09cdde92f8" kindref="member">SetStakeModifier</ref>(nStakeModifier,<sp/>fGeneratedStakeModifier);</highlight></codeline>
<codeline lineno="4281"><highlight class="normal"><sp/><sp/><sp/><sp/>pindexNew-&gt;<ref refid="class_c_block_index_1aa8c9b5c3316413a332d5dea243c2c2c9" kindref="member">bnStakeModifierV2</ref><sp/>=<sp/><ref refid="kernel_8cpp_1ae7cea47493b7e179fe492df175c9cfdc" kindref="member">ComputeStakeModifierV2</ref>(pindexNew-&gt;<ref refid="class_c_block_index_1a1ef11137155df1dd5c81491630cece39" kindref="member">pprev</ref>,<sp/>IsProofOfWork()<sp/>?<sp/>hash<sp/>:<sp/>vtx[1].vin[0].prevout.hash);</highlight></codeline>
<codeline lineno="4282"><highlight class="normal"></highlight></codeline>
<codeline lineno="4283"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Add<sp/>to<sp/>mapBlockIndex</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4284"><highlight class="normal"><sp/><sp/><sp/><sp/>map&lt;uint256,<sp/>CBlockIndex*&gt;::iterator<sp/>mi<sp/>=<sp/>mapBlockIndex.insert(make_pair(hash,<sp/>pindexNew)).first;</highlight></codeline>
<codeline lineno="4285"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(pindexNew-&gt;<ref refid="class_c_block_index_1ace1a0acbedc0403489e4d9168876fb23" kindref="member">IsProofOfStake</ref>())</highlight></codeline>
<codeline lineno="4286"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>setStakeSeen.insert(make_pair(pindexNew-&gt;<ref refid="class_c_block_index_1ac2c040d5e3db73a5ceb87ee4095a405f" kindref="member">prevoutStake</ref>,<sp/>pindexNew-&gt;<ref refid="class_c_block_index_1ae6870336a5bf237680502fa067262af8" kindref="member">nStakeTime</ref>));</highlight></codeline>
<codeline lineno="4287"><highlight class="normal"><sp/><sp/><sp/><sp/>pindexNew-&gt;<ref refid="class_c_block_index_1afac8099e03ffda463c7153ca82d37b66" kindref="member">phashBlock</ref><sp/>=<sp/>&amp;((*mi).first);</highlight></codeline>
<codeline lineno="4288"><highlight class="normal"></highlight></codeline>
<codeline lineno="4289"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Write<sp/>to<sp/>disk<sp/>block<sp/>index</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4290"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_c_tx_d_b" kindref="compound">CTxDB</ref><sp/><ref refid="txdb-leveldb_8cpp_1a72eff8ae1d84de13daf97a61b8c02bc6" kindref="member">txdb</ref>;</highlight></codeline>
<codeline lineno="4291"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!txdb.<ref refid="class_c_tx_d_b_1af3c27c5cb8f922b5c03840feda844016" kindref="member">TxnBegin</ref>())</highlight></codeline>
<codeline lineno="4292"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4293"><highlight class="normal"><sp/><sp/><sp/><sp/>txdb.<ref refid="class_c_tx_d_b_1a56f170187a609bd747c29b3a4adddd8e" kindref="member">WriteBlockIndex</ref>(<ref refid="class_c_disk_block_index" kindref="compound">CDiskBlockIndex</ref>(pindexNew));</highlight></codeline>
<codeline lineno="4294"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!txdb.<ref refid="class_c_tx_d_b_1aff04f078df2fc3640d559ce62fc9a6a2" kindref="member">TxnCommit</ref>())</highlight></codeline>
<codeline lineno="4295"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4296"><highlight class="normal"></highlight></codeline>
<codeline lineno="4297"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>New<sp/>best</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4298"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(pindexNew-&gt;<ref refid="class_c_block_index_1aa11268e5a01c5a7d33fb313fb0494015" kindref="member">nChainTrust</ref><sp/>&gt;<sp/>nBestChainTrust)</highlight></codeline>
<codeline lineno="4299"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!SetBestChain(txdb,<sp/>pindexNew))</highlight></codeline>
<codeline lineno="4300"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4301"><highlight class="normal"></highlight></codeline>
<codeline lineno="4302"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(pindexNew<sp/>==<sp/>pindexBest)</highlight></codeline>
<codeline lineno="4303"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="4304"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Notify<sp/>UI<sp/>to<sp/>display<sp/>prev<sp/>block&apos;s<sp/>coinbase<sp/>if<sp/>it<sp/>was<sp/>ours</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4305"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="classuint256" kindref="compound">uint256</ref><sp/>hashPrevBestCoinBase;</highlight></codeline>
<codeline lineno="4306"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>g_signals.UpdatedTransaction(hashPrevBestCoinBase);</highlight></codeline>
<codeline lineno="4307"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>hashPrevBestCoinBase<sp/>=<sp/>vtx[0].<ref refid="classuint256_1a2ed8bd4e54421a37430768374a7e91b3" kindref="member">GetHash</ref>();</highlight></codeline>
<codeline lineno="4308"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4309"><highlight class="normal"></highlight></codeline>
<codeline lineno="4310"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4311"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4312"><highlight class="normal"></highlight></codeline>
<codeline lineno="4313" refid="class_c_verify_d_b_1ab33a26982ba391fc71614f8eee9dbaa0" refkind="member"><highlight class="normal"><ref refid="class_c_verify_d_b_1ab33a26982ba391fc71614f8eee9dbaa0" kindref="member">CVerifyDB::CVerifyDB</ref>()</highlight></codeline>
<codeline lineno="4314"><highlight class="normal">{</highlight></codeline>
<codeline lineno="4315"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//TODO<sp/>(Amir):<sp/>Implement<sp/>after<sp/>chainActive</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4316"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//uiInterface.ShowProgress(_(&quot;Verifying<sp/>blocks...&quot;),<sp/>0);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4317"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4318"><highlight class="normal"></highlight></codeline>
<codeline lineno="4319" refid="class_c_verify_d_b_1a4a04d4554f763b8803082fae81513f40" refkind="member"><highlight class="normal"><ref refid="class_c_verify_d_b_1a4a04d4554f763b8803082fae81513f40" kindref="member">CVerifyDB::~CVerifyDB</ref>()</highlight></codeline>
<codeline lineno="4320"><highlight class="normal">{</highlight></codeline>
<codeline lineno="4321"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//TODO<sp/>(Amir):<sp/>Implement<sp/>after<sp/>chainActive</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4322"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//uiInterface.ShowProgress(&quot;&quot;,<sp/>100);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4323"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4324"><highlight class="normal"></highlight></codeline>
<codeline lineno="4325" refid="class_c_verify_d_b_1a5d3e3ade35a14ddce2404e18e4b1df50" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="class_c_verify_d_b_1a5d3e3ade35a14ddce2404e18e4b1df50" kindref="member">CVerifyDB::VerifyDB</ref>(<ref refid="class_c_coins_view" kindref="compound">CCoinsView</ref><sp/>*coinsview,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nCheckLevel,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nCheckDepth)</highlight></codeline>
<codeline lineno="4326"><highlight class="normal">{</highlight></codeline>
<codeline lineno="4327"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//TODO<sp/>(Amir):<sp/>Implement<sp/>after<sp/>chainActive</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4328"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="4329"><highlight class="comment"><sp/><sp/><sp/><sp/>LOCK(cs_main);</highlight></codeline>
<codeline lineno="4330"><highlight class="comment"><sp/><sp/><sp/><sp/>if<sp/>(chainActive.Tip()<sp/>==<sp/>NULL<sp/>||<sp/>chainActive.Tip()-&gt;pprev<sp/>==<sp/>NULL)</highlight></codeline>
<codeline lineno="4331"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>true;</highlight></codeline>
<codeline lineno="4332"><highlight class="comment"></highlight></codeline>
<codeline lineno="4333"><highlight class="comment"><sp/><sp/><sp/><sp/>//<sp/>Verify<sp/>blocks<sp/>in<sp/>the<sp/>best<sp/>chain</highlight></codeline>
<codeline lineno="4334"><highlight class="comment"><sp/><sp/><sp/><sp/>if<sp/>(nCheckDepth<sp/>&lt;=<sp/>0)</highlight></codeline>
<codeline lineno="4335"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nCheckDepth<sp/>=<sp/>1000000000;<sp/>//<sp/>suffices<sp/>until<sp/>the<sp/>year<sp/>19000</highlight></codeline>
<codeline lineno="4336"><highlight class="comment"><sp/><sp/><sp/><sp/>if<sp/>(nCheckDepth<sp/>&gt;<sp/>chainActive.Height())</highlight></codeline>
<codeline lineno="4337"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nCheckDepth<sp/>=<sp/>chainActive.Height();</highlight></codeline>
<codeline lineno="4338"><highlight class="comment"><sp/><sp/><sp/><sp/>nCheckLevel<sp/>=<sp/>std::max(0,<sp/>std::min(4,<sp/>nCheckLevel));</highlight></codeline>
<codeline lineno="4339"><highlight class="comment"><sp/><sp/><sp/><sp/>LogPrintf(&quot;Verifying<sp/>last<sp/>%i<sp/>blocks<sp/>at<sp/>level<sp/>%i\n&quot;,<sp/>nCheckDepth,<sp/>nCheckLevel);</highlight></codeline>
<codeline lineno="4340"><highlight class="comment"><sp/><sp/><sp/><sp/>CCoinsViewCache<sp/>coins(coinsview);</highlight></codeline>
<codeline lineno="4341"><highlight class="comment"><sp/><sp/><sp/><sp/>CBlockIndex*<sp/>pindexState<sp/>=<sp/>chainActive.Tip();</highlight></codeline>
<codeline lineno="4342"><highlight class="comment"><sp/><sp/><sp/><sp/>CBlockIndex*<sp/>pindexFailure<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="4343"><highlight class="comment"><sp/><sp/><sp/><sp/>int<sp/>nGoodTransactions<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="4344"><highlight class="comment"><sp/><sp/><sp/><sp/>CValidationState<sp/>state;</highlight></codeline>
<codeline lineno="4345"><highlight class="comment"><sp/><sp/><sp/><sp/>for<sp/>(CBlockIndex*<sp/>pindex<sp/>=<sp/>chainActive.Tip();<sp/>pindex<sp/>&amp;&amp;<sp/>pindex-&gt;pprev;<sp/>pindex<sp/>=<sp/>pindex-&gt;pprev)</highlight></codeline>
<codeline lineno="4346"><highlight class="comment"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="4347"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>boost::this_thread::interruption_point();</highlight></codeline>
<codeline lineno="4348"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uiInterface.ShowProgress(_(&quot;Verifying<sp/>blocks...&quot;),<sp/>std::max(1,<sp/>std::min(99,<sp/>(int)(((double)(chainActive.Height()<sp/>-<sp/>pindex-&gt;nHeight))<sp/>/<sp/>(double)nCheckDepth<sp/>*<sp/>(nCheckLevel<sp/>&gt;=<sp/>4<sp/>?<sp/>50<sp/>:<sp/>100)))));</highlight></codeline>
<codeline lineno="4349"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(pindex-&gt;nHeight<sp/>&lt;<sp/>chainActive.Height()-nCheckDepth)</highlight></codeline>
<codeline lineno="4350"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>break;</highlight></codeline>
<codeline lineno="4351"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CBlock<sp/>block;</highlight></codeline>
<codeline lineno="4352"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>check<sp/>level<sp/>0:<sp/>read<sp/>from<sp/>disk</highlight></codeline>
<codeline lineno="4353"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(!ReadBlockFromDisk(block,<sp/>pindex))</highlight></codeline>
<codeline lineno="4354"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>error(&quot;VerifyDB()<sp/>:<sp/>***<sp/>ReadBlockFromDisk<sp/>failed<sp/>at<sp/>%d,<sp/>hash=%s&quot;,<sp/>pindex-&gt;nHeight,<sp/>pindex-&gt;GetBlockHash().ToString());</highlight></codeline>
<codeline lineno="4355"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>check<sp/>level<sp/>1:<sp/>verify<sp/>block<sp/>validity</highlight></codeline>
<codeline lineno="4356"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(nCheckLevel<sp/>&gt;=<sp/>1<sp/>&amp;&amp;<sp/>!CheckBlock(block,<sp/>state))</highlight></codeline>
<codeline lineno="4357"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>error(&quot;VerifyDB()<sp/>:<sp/>***<sp/>found<sp/>bad<sp/>block<sp/>at<sp/>%d,<sp/>hash=%s\n&quot;,<sp/>pindex-&gt;nHeight,<sp/>pindex-&gt;GetBlockHash().ToString());</highlight></codeline>
<codeline lineno="4358"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>check<sp/>level<sp/>2:<sp/>verify<sp/>undo<sp/>validity</highlight></codeline>
<codeline lineno="4359"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(nCheckLevel<sp/>&gt;=<sp/>2<sp/>&amp;&amp;<sp/>pindex)<sp/>{</highlight></codeline>
<codeline lineno="4360"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CBlockUndo<sp/>undo;</highlight></codeline>
<codeline lineno="4361"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CDiskBlockPos<sp/>pos<sp/>=<sp/>pindex-&gt;GetUndoPos();</highlight></codeline>
<codeline lineno="4362"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(!pos.IsNull())<sp/>{</highlight></codeline>
<codeline lineno="4363"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(!undo.ReadFromDisk(pos,<sp/>pindex-&gt;pprev-&gt;GetBlockHash()))</highlight></codeline>
<codeline lineno="4364"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>error(&quot;VerifyDB()<sp/>:<sp/>***<sp/>found<sp/>bad<sp/>undo<sp/>data<sp/>at<sp/>%d,<sp/>hash=%s\n&quot;,<sp/>pindex-&gt;nHeight,<sp/>pindex-&gt;GetBlockHash().ToString());</highlight></codeline>
<codeline lineno="4365"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4366"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4367"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>check<sp/>level<sp/>3:<sp/>check<sp/>for<sp/>inconsistencies<sp/>during<sp/>memory-only<sp/>disconnect<sp/>of<sp/>tip<sp/>blocks</highlight></codeline>
<codeline lineno="4368"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(nCheckLevel<sp/>&gt;=<sp/>3<sp/>&amp;&amp;<sp/>pindex<sp/>==<sp/>pindexState<sp/>&amp;&amp;<sp/>(coins.GetCacheSize()<sp/>+<sp/>pcoinsTip-&gt;GetCacheSize())<sp/>&lt;=<sp/>nCoinCacheSize)<sp/>{</highlight></codeline>
<codeline lineno="4369"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bool<sp/>fClean<sp/>=<sp/>true;</highlight></codeline>
<codeline lineno="4370"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(!DisconnectBlock(block,<sp/>state,<sp/>pindex,<sp/>coins,<sp/>&amp;fClean))</highlight></codeline>
<codeline lineno="4371"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>error(&quot;VerifyDB()<sp/>:<sp/>***<sp/>irrecoverable<sp/>inconsistency<sp/>in<sp/>block<sp/>data<sp/>at<sp/>%d,<sp/>hash=%s&quot;,<sp/>pindex-&gt;nHeight,<sp/>pindex-&gt;GetBlockHash().ToString());</highlight></codeline>
<codeline lineno="4372"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pindexState<sp/>=<sp/>pindex-&gt;pprev;</highlight></codeline>
<codeline lineno="4373"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(!fClean)<sp/>{</highlight></codeline>
<codeline lineno="4374"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nGoodTransactions<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="4375"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pindexFailure<sp/>=<sp/>pindex;</highlight></codeline>
<codeline lineno="4376"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/>else</highlight></codeline>
<codeline lineno="4377"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nGoodTransactions<sp/>+=<sp/>block.vtx.size();</highlight></codeline>
<codeline lineno="4378"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4379"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(ShutdownRequested())</highlight></codeline>
<codeline lineno="4380"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>true;</highlight></codeline>
<codeline lineno="4381"><highlight class="comment"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4382"><highlight class="comment"><sp/><sp/><sp/><sp/>if<sp/>(pindexFailure)</highlight></codeline>
<codeline lineno="4383"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>error(&quot;VerifyDB()<sp/>:<sp/>***<sp/>coin<sp/>database<sp/>inconsistencies<sp/>found<sp/>(last<sp/>%i<sp/>blocks,<sp/>%i<sp/>good<sp/>transactions<sp/>before<sp/>that)\n&quot;,<sp/>chainActive.Height()<sp/>-<sp/>pindexFailure-&gt;nHeight<sp/>+<sp/>1,<sp/>nGoodTransactions);</highlight></codeline>
<codeline lineno="4384"><highlight class="comment"></highlight></codeline>
<codeline lineno="4385"><highlight class="comment"><sp/><sp/><sp/><sp/>//<sp/>check<sp/>level<sp/>4:<sp/>try<sp/>reconnecting<sp/>blocks</highlight></codeline>
<codeline lineno="4386"><highlight class="comment"><sp/><sp/><sp/><sp/>if<sp/>(nCheckLevel<sp/>&gt;=<sp/>4)<sp/>{</highlight></codeline>
<codeline lineno="4387"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CBlockIndex<sp/>*pindex<sp/>=<sp/>pindexState;</highlight></codeline>
<codeline lineno="4388"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>while<sp/>(pindex<sp/>!=<sp/>chainActive.Tip())<sp/>{</highlight></codeline>
<codeline lineno="4389"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>boost::this_thread::interruption_point();</highlight></codeline>
<codeline lineno="4390"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uiInterface.ShowProgress(_(&quot;Verifying<sp/>blocks...&quot;),<sp/>std::max(1,<sp/>std::min(99,<sp/>100<sp/>-<sp/>(int)(((double)(chainActive.Height()<sp/>-<sp/>pindex-&gt;nHeight))<sp/>/<sp/>(double)nCheckDepth<sp/>*<sp/>50))));</highlight></codeline>
<codeline lineno="4391"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pindex<sp/>=<sp/>chainActive.Next(pindex);</highlight></codeline>
<codeline lineno="4392"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CBlock<sp/>block;</highlight></codeline>
<codeline lineno="4393"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(!ReadBlockFromDisk(block,<sp/>pindex))</highlight></codeline>
<codeline lineno="4394"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>error(&quot;VerifyDB()<sp/>:<sp/>***<sp/>ReadBlockFromDisk<sp/>failed<sp/>at<sp/>%d,<sp/>hash=%s&quot;,<sp/>pindex-&gt;nHeight,<sp/>pindex-&gt;GetBlockHash().ToString());</highlight></codeline>
<codeline lineno="4395"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(!ConnectBlock(block,<sp/>state,<sp/>pindex,<sp/>coins))</highlight></codeline>
<codeline lineno="4396"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>error(&quot;VerifyDB()<sp/>:<sp/>***<sp/>found<sp/>unconnectable<sp/>block<sp/>at<sp/>%d,<sp/>hash=%s&quot;,<sp/>pindex-&gt;nHeight,<sp/>pindex-&gt;GetBlockHash().ToString());</highlight></codeline>
<codeline lineno="4397"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4398"><highlight class="comment"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4399"><highlight class="comment"></highlight></codeline>
<codeline lineno="4400"><highlight class="comment"><sp/><sp/><sp/><sp/>LogPrintf(&quot;No<sp/>coin<sp/>database<sp/>inconsistencies<sp/>in<sp/>last<sp/>%i<sp/>blocks<sp/>(%i<sp/>transactions)\n&quot;,<sp/>chainActive.Height()<sp/>-<sp/>pindexState-&gt;nHeight,<sp/>nGoodTransactions);</highlight></codeline>
<codeline lineno="4401"><highlight class="comment"><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4402"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="util_8h_1afc02c0a4258fedfb316be612bb659ba8" kindref="member">LogPrintf</ref>(</highlight><highlight class="stringliteral">&quot;VerifyDB<sp/>not<sp/>implemented!<sp/>\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="4403"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4404"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="/home/dev/ds-160209/src/main.cpp"/>
  </compounddef>
</doxygen>
