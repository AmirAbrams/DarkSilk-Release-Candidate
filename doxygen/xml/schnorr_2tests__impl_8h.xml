<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.9.1">
  <compounddef id="schnorr_2tests__impl_8h" kind="file" language="C++">
    <compoundname>tests_impl.h</compoundname>
    <includes refid="secp256k1__schnorr_8h" local="yes">include/secp256k1_schnorr.h</includes>
    <incdepgraph>
      <node id="22546">
        <label>include/secp256k1_schnorr.h</label>
        <link refid="secp256k1__schnorr_8h"/>
        <childnode refid="22547" relation="include">
        </childnode>
      </node>
      <node id="22547">
        <label>secp256k1.h</label>
        <link refid="secp256k1_8h"/>
        <childnode refid="22548" relation="include">
        </childnode>
      </node>
      <node id="22548">
        <label>stddef.h</label>
      </node>
      <node id="22545">
        <label>/home/dev/ds-160209/src/secp256k1/src/modules/schnorr/tests_impl.h</label>
        <link refid="schnorr/tests_impl.h"/>
        <childnode refid="22546" relation="include">
        </childnode>
      </node>
    </incdepgraph>
      <sectiondef kind="func">
      <memberdef kind="function" id="schnorr_2tests__impl_8h_1a0fadfae101d2df588a044f55eafcc0e6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test_schnorr_end_to_end</definition>
        <argsstring>(void)</argsstring>
        <name>test_schnorr_end_to_end</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/secp256k1/src/modules/schnorr/tests_impl.h" line="12" column="1" bodyfile="/home/dev/ds-160209/src/secp256k1/src/modules/schnorr/tests_impl.h" bodystart="12" bodyend="40"/>
      </memberdef>
      <memberdef kind="function" id="schnorr_2tests__impl_8h_1a31efca2980eb021090e8b4df3d274d3b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test_schnorr_hash</definition>
        <argsstring>(unsigned char *h32, const unsigned char *r32, const unsigned char *msg32)</argsstring>
        <name>test_schnorr_hash</name>
        <param>
          <type>unsigned char *</type>
          <declname>h32</declname>
        </param>
        <param>
          <type>const unsigned char *</type>
          <declname>r32</declname>
        </param>
        <param>
          <type>const unsigned char *</type>
          <declname>msg32</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Horribly broken hash function. Do not use for anything but tests. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/secp256k1/src/modules/schnorr/tests_impl.h" line="43" column="1" bodyfile="/home/dev/ds-160209/src/secp256k1/src/modules/schnorr/tests_impl.h" bodystart="43" bodyend="48"/>
      </memberdef>
      <memberdef kind="function" id="schnorr_2tests__impl_8h_1ac01f457db870f54e7034a59bcf51f5fb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test_schnorr_sign_verify</definition>
        <argsstring>(void)</argsstring>
        <name>test_schnorr_sign_verify</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/secp256k1/src/modules/schnorr/tests_impl.h" line="50" column="1" bodyfile="/home/dev/ds-160209/src/secp256k1/src/modules/schnorr/tests_impl.h" bodystart="50" bodyend="83"/>
      </memberdef>
      <memberdef kind="function" id="schnorr_2tests__impl_8h_1a7c79e0204a103b99844bdf1b2ac4cb57" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test_schnorr_threshold</definition>
        <argsstring>(void)</argsstring>
        <name>test_schnorr_threshold</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/secp256k1/src/modules/schnorr/tests_impl.h" line="85" column="1" bodyfile="/home/dev/ds-160209/src/secp256k1/src/modules/schnorr/tests_impl.h" bodystart="85" bodyend="144"/>
      </memberdef>
      <memberdef kind="function" id="schnorr_2tests__impl_8h_1afe1ab7f4400ea6152deaeea5959aa0bc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test_schnorr_recovery</definition>
        <argsstring>(void)</argsstring>
        <name>test_schnorr_recovery</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/secp256k1/src/modules/schnorr/tests_impl.h" line="146" column="1" bodyfile="/home/dev/ds-160209/src/secp256k1/src/modules/schnorr/tests_impl.h" bodystart="146" bodyend="157"/>
      </memberdef>
      <memberdef kind="function" id="schnorr_2tests__impl_8h_1a6b31cc8facecda629cf588196a4c936b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void run_schnorr_tests</definition>
        <argsstring>(void)</argsstring>
        <name>run_schnorr_tests</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/secp256k1/src/modules/schnorr/tests_impl.h" line="159" column="1" bodyfile="/home/dev/ds-160209/src/secp256k1/src/modules/schnorr/tests_impl.h" bodystart="159" bodyend="173"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/**********************************************************************</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/>*<sp/>Copyright<sp/>(c)<sp/>2014-2015<sp/>Pieter<sp/>Wuille<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*<sp/>Distributed<sp/>under<sp/>the<sp/>MIT<sp/>software<sp/>license,<sp/>see<sp/>the<sp/>accompanying<sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*<sp/>file<sp/>COPYING<sp/>or<sp/>http://www.opensource.org/licenses/mit-license.php.*</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/>**********************************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>SECP256K1_MODULE_SCHNORR_TESTS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SECP256K1_MODULE_SCHNORR_TESTS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="secp256k1__schnorr_8h" kindref="compound">include/secp256k1_schnorr.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight></codeline>
<codeline lineno="12" refid="schnorr_2tests__impl_8h_1a0fadfae101d2df588a044f55eafcc0e6" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="schnorr_2tests__impl_8h_1a0fadfae101d2df588a044f55eafcc0e6" kindref="member">test_schnorr_end_to_end</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="13"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>privkey[32];</highlight></codeline>
<codeline lineno="14"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>message[32];</highlight></codeline>
<codeline lineno="15"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>schnorr_signature[64];</highlight></codeline>
<codeline lineno="16"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structsecp256k1__pubkey" kindref="compound">secp256k1_pubkey</ref><sp/>pubkey,<sp/>recpubkey;</highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Generate<sp/>a<sp/>random<sp/>key<sp/>and<sp/>message.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="20"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structsecp256k1__scalar" kindref="compound">secp256k1_scalar</ref><sp/>key;</highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="tests_8c_1a51e09e6745e0afdb0d596ee0f4b3c3f7" kindref="member">random_scalar_order_test</ref>(&amp;key);</highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>secp256k1_scalar_get_b32(privkey,<sp/>&amp;key);</highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>secp256k1_rand256_test(message);</highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Construct<sp/>and<sp/>verify<sp/>corresponding<sp/>public<sp/>key.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="secp256k1_2src_2util_8h_1aba1590ff86288c886c47dc8a27b30467" kindref="member">CHECK</ref>(<ref refid="secp256k1_8h_1a366f922fc0c787351e82ff8e3a95f652" kindref="member">secp256k1_ec_seckey_verify</ref>(ctx,<sp/>privkey)<sp/>==<sp/>1);</highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="secp256k1_2src_2util_8h_1aba1590ff86288c886c47dc8a27b30467" kindref="member">CHECK</ref>(<ref refid="secp256k1_8h_1a7438071aa8a6dc4697abe4f4659f2161" kindref="member">secp256k1_ec_pubkey_create</ref>(ctx,<sp/>&amp;pubkey,<sp/>privkey)<sp/>==<sp/>1);</highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Schnorr<sp/>sign.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="secp256k1_2src_2util_8h_1aba1590ff86288c886c47dc8a27b30467" kindref="member">CHECK</ref>(<ref refid="secp256k1__schnorr_8h_1ab7e18ffba471cded051c249f5f8cab48" kindref="member">secp256k1_schnorr_sign</ref>(ctx,<sp/>schnorr_signature,<sp/>message,<sp/>privkey,<sp/>NULL,<sp/>NULL)<sp/>==<sp/>1);</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="secp256k1_2src_2util_8h_1aba1590ff86288c886c47dc8a27b30467" kindref="member">CHECK</ref>(<ref refid="secp256k1__schnorr_8h_1ab9bcde80df113d29823401a460ea9bcc" kindref="member">secp256k1_schnorr_verify</ref>(ctx,<sp/>schnorr_signature,<sp/>message,<sp/>&amp;pubkey)<sp/>==<sp/>1);</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="secp256k1_2src_2util_8h_1aba1590ff86288c886c47dc8a27b30467" kindref="member">CHECK</ref>(<ref refid="secp256k1__schnorr_8h_1aa15ce0fb89d5eacfd2a11a88ee70636c" kindref="member">secp256k1_schnorr_recover</ref>(ctx,<sp/>&amp;recpubkey,<sp/>schnorr_signature,<sp/>message)<sp/>==<sp/>1);</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="secp256k1_2src_2util_8h_1aba1590ff86288c886c47dc8a27b30467" kindref="member">CHECK</ref>(memcmp(&amp;pubkey,<sp/>&amp;recpubkey,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(pubkey))<sp/>==<sp/>0);</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Destroy<sp/>signature<sp/>and<sp/>verify<sp/>again.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/>schnorr_signature[secp256k1_rand_bits(6)]<sp/>+=<sp/>1<sp/>+<sp/>secp256k1_rand_int(255);</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="secp256k1_2src_2util_8h_1aba1590ff86288c886c47dc8a27b30467" kindref="member">CHECK</ref>(<ref refid="secp256k1__schnorr_8h_1ab9bcde80df113d29823401a460ea9bcc" kindref="member">secp256k1_schnorr_verify</ref>(ctx,<sp/>schnorr_signature,<sp/>message,<sp/>&amp;pubkey)<sp/>==<sp/>0);</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="secp256k1_2src_2util_8h_1aba1590ff86288c886c47dc8a27b30467" kindref="member">CHECK</ref>(<ref refid="secp256k1__schnorr_8h_1aa15ce0fb89d5eacfd2a11a88ee70636c" kindref="member">secp256k1_schnorr_recover</ref>(ctx,<sp/>&amp;recpubkey,<sp/>schnorr_signature,<sp/>message)<sp/>!=<sp/>1<sp/>||</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>memcmp(&amp;pubkey,<sp/>&amp;recpubkey,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(pubkey))<sp/>!=<sp/>0);</highlight></codeline>
<codeline lineno="40"><highlight class="normal">}</highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight></codeline>
<codeline lineno="43" refid="schnorr_2tests__impl_8h_1a31efca2980eb021090e8b4df3d274d3b" refkind="member"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="schnorr_2tests__impl_8h_1a31efca2980eb021090e8b4df3d274d3b" kindref="member">test_schnorr_hash</ref>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*h32,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*r32,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*msg32)<sp/>{</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>32;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>h32[i]<sp/>=<sp/>r32[i]<sp/>^<sp/>msg32[i];</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="48"><highlight class="normal">}</highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight></codeline>
<codeline lineno="50" refid="schnorr_2tests__impl_8h_1ac01f457db870f54e7034a59bcf51f5fb" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="schnorr_2tests__impl_8h_1ac01f457db870f54e7034a59bcf51f5fb" kindref="member">test_schnorr_sign_verify</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>msg32[32];</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>sig64[3][64];</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structsecp256k1__gej" kindref="compound">secp256k1_gej</ref><sp/>pubkeyj[3];</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structsecp256k1__ge" kindref="compound">secp256k1_ge</ref><sp/>pubkey[3];</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structsecp256k1__scalar" kindref="compound">secp256k1_scalar</ref><sp/>nonce[3],<sp/>key[3];</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>k;</highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/>secp256k1_rand256_test(msg32);</highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(k<sp/>=<sp/>0;<sp/>k<sp/>&lt;<sp/>3;<sp/>k++)<sp/>{</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="tests_8c_1a51e09e6745e0afdb0d596ee0f4b3c3f7" kindref="member">random_scalar_order_test</ref>(&amp;key[k]);</highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">do</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="tests_8c_1a51e09e6745e0afdb0d596ee0f4b3c3f7" kindref="member">random_scalar_order_test</ref>(&amp;nonce[k]);</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(secp256k1_schnorr_sig_sign(&amp;ctx-&gt;ecmult_gen_ctx,<sp/>sig64[k],<sp/>&amp;key[k],<sp/>&amp;nonce[k],<sp/>NULL,<sp/>&amp;<ref refid="schnorr_2tests__impl_8h_1a31efca2980eb021090e8b4df3d274d3b" kindref="member">test_schnorr_hash</ref>,<sp/>msg32))<sp/>{</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(1);</highlight></codeline>
<codeline lineno="70"><highlight class="normal"></highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>secp256k1_ecmult_gen(&amp;ctx-&gt;ecmult_gen_ctx,<sp/>&amp;pubkeyj[k],<sp/>&amp;key[k]);</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>secp256k1_ge_set_gej_var(&amp;pubkey[k],<sp/>&amp;pubkeyj[k]);</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="secp256k1_2src_2util_8h_1aba1590ff86288c886c47dc8a27b30467" kindref="member">CHECK</ref>(secp256k1_schnorr_sig_verify(&amp;ctx-&gt;ecmult_ctx,<sp/>sig64[k],<sp/>&amp;pubkey[k],<sp/>&amp;<ref refid="schnorr_2tests__impl_8h_1a31efca2980eb021090e8b4df3d274d3b" kindref="member">test_schnorr_hash</ref>,<sp/>msg32));</highlight></codeline>
<codeline lineno="74"><highlight class="normal"></highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>4;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>pos<sp/>=<sp/>secp256k1_rand_bits(6);</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>mod<sp/>=<sp/>1<sp/>+<sp/>secp256k1_rand_int(255);</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sig64[k][pos]<sp/>^=<sp/>mod;</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="secp256k1_2src_2util_8h_1aba1590ff86288c886c47dc8a27b30467" kindref="member">CHECK</ref>(secp256k1_schnorr_sig_verify(&amp;ctx-&gt;ecmult_ctx,<sp/>sig64[k],<sp/>&amp;pubkey[k],<sp/>&amp;<ref refid="schnorr_2tests__impl_8h_1a31efca2980eb021090e8b4df3d274d3b" kindref="member">test_schnorr_hash</ref>,<sp/>msg32)<sp/>==<sp/>0);</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sig64[k][pos]<sp/>^=<sp/>mod;</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="83"><highlight class="normal">}</highlight></codeline>
<codeline lineno="84"><highlight class="normal"></highlight></codeline>
<codeline lineno="85" refid="schnorr_2tests__impl_8h_1a7c79e0204a103b99844bdf1b2ac4cb57" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="schnorr_2tests__impl_8h_1a7c79e0204a103b99844bdf1b2ac4cb57" kindref="member">test_schnorr_threshold</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>msg[32];</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>sec[5][32];</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structsecp256k1__pubkey" kindref="compound">secp256k1_pubkey</ref><sp/>pub[5];</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>nonce[5][32];</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structsecp256k1__pubkey" kindref="compound">secp256k1_pubkey</ref><sp/>pubnonce[5];</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>sig[5][64];</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>sigs[5];</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>allsig[64];</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structsecp256k1__pubkey" kindref="compound">secp256k1_pubkey</ref>*<sp/>pubs[5];</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structsecp256k1__pubkey" kindref="compound">secp256k1_pubkey</ref><sp/>allpub;</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n,<sp/>i;</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>damage;</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ret<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="99"><highlight class="normal"></highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/>damage<sp/>=<sp/>secp256k1_rand_bits(1)<sp/>?<sp/>(1<sp/>+<sp/>secp256k1_rand_int(4))<sp/>:<sp/>0;</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/>secp256k1_rand256_test(msg);</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/>n<sp/>=<sp/>2<sp/>+<sp/>secp256k1_rand_int(4);</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>n;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">do</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>secp256k1_rand256_test(sec[i]);</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(!<ref refid="secp256k1_8h_1a366f922fc0c787351e82ff8e3a95f652" kindref="member">secp256k1_ec_seckey_verify</ref>(ctx,<sp/>sec[i]));</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="secp256k1_2src_2util_8h_1aba1590ff86288c886c47dc8a27b30467" kindref="member">CHECK</ref>(<ref refid="secp256k1_8h_1a7438071aa8a6dc4697abe4f4659f2161" kindref="member">secp256k1_ec_pubkey_create</ref>(ctx,<sp/>&amp;pub[i],<sp/>sec[i]));</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="secp256k1_2src_2util_8h_1aba1590ff86288c886c47dc8a27b30467" kindref="member">CHECK</ref>(<ref refid="secp256k1__schnorr_8h_1a62dd4ce1d4843fe3a4d73ee44d142cb3" kindref="member">secp256k1_schnorr_generate_nonce_pair</ref>(ctx,<sp/>&amp;pubnonce[i],<sp/>nonce[i],<sp/>msg,<sp/>sec[i],<sp/>NULL,<sp/>NULL));</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pubs[i]<sp/>=<sp/>&amp;pub[i];</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(damage<sp/>==<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nonce[secp256k1_rand_int(n)][secp256k1_rand_int(32)]<sp/>^=<sp/>1<sp/>+<sp/>secp256k1_rand_int(255);</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(damage<sp/>==<sp/>2)<sp/>{</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sec[secp256k1_rand_int(n)][secp256k1_rand_int(32)]<sp/>^=<sp/>1<sp/>+<sp/>secp256k1_rand_int(255);</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>n;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structsecp256k1__pubkey" kindref="compound">secp256k1_pubkey</ref><sp/>allpubnonce;</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structsecp256k1__pubkey" kindref="compound">secp256k1_pubkey</ref><sp/>*pubnonces[4];</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j;</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>i;<sp/>j++)<sp/>{</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pubnonces[j]<sp/>=<sp/>&amp;pubnonce[j];</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(j<sp/>=<sp/>i<sp/>+<sp/>1;<sp/>j<sp/>&lt;<sp/>n;<sp/>j++)<sp/>{</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pubnonces[j<sp/>-<sp/>1]<sp/>=<sp/>&amp;pubnonce[j];</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="secp256k1_2src_2util_8h_1aba1590ff86288c886c47dc8a27b30467" kindref="member">CHECK</ref>(<ref refid="secp256k1_8h_1a4d9b18720afc67f3685a9f171bac6737" kindref="member">secp256k1_ec_pubkey_combine</ref>(ctx,<sp/>&amp;allpubnonce,<sp/>pubnonces,<sp/>n<sp/>-<sp/>1));</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ret<sp/>|=<sp/>(<ref refid="secp256k1__schnorr_8h_1a9887da00f1d053c0c86b865bad5b8d82" kindref="member">secp256k1_schnorr_partial_sign</ref>(ctx,<sp/>sig[i],<sp/>msg,<sp/>sec[i],<sp/>&amp;allpubnonce,<sp/>nonce[i])<sp/>!=<sp/>1)<sp/>*<sp/>1;</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sigs[i]<sp/>=<sp/>sig[i];</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(damage<sp/>==<sp/>3)<sp/>{</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sig[secp256k1_rand_int(n)][secp256k1_rand_bits(6)]<sp/>^=<sp/>1<sp/>+<sp/>secp256k1_rand_int(255);</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/>ret<sp/>|=<sp/>(<ref refid="secp256k1_8h_1a4d9b18720afc67f3685a9f171bac6737" kindref="member">secp256k1_ec_pubkey_combine</ref>(ctx,<sp/>&amp;allpub,<sp/>pubs,<sp/>n)<sp/>!=<sp/>1)<sp/>*<sp/>2;</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((ret<sp/>&amp;<sp/>1)<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ret<sp/>|=<sp/>(<ref refid="secp256k1__schnorr_8h_1a3e2e970becbc63f9d1cd0ef054488b58" kindref="member">secp256k1_schnorr_partial_combine</ref>(ctx,<sp/>allsig,<sp/>sigs,<sp/>n)<sp/>!=<sp/>1)<sp/>*<sp/>4;</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(damage<sp/>==<sp/>4)<sp/>{</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>allsig[secp256k1_rand_int(32)]<sp/>^=<sp/>1<sp/>+<sp/>secp256k1_rand_int(255);</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((ret<sp/>&amp;<sp/>7)<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ret<sp/>|=<sp/>(<ref refid="secp256k1__schnorr_8h_1ab9bcde80df113d29823401a460ea9bcc" kindref="member">secp256k1_schnorr_verify</ref>(ctx,<sp/>allsig,<sp/>msg,<sp/>&amp;allpub)<sp/>!=<sp/>1)<sp/>*<sp/>8;</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="secp256k1_2src_2util_8h_1aba1590ff86288c886c47dc8a27b30467" kindref="member">CHECK</ref>((ret<sp/>==<sp/>0)<sp/>==<sp/>(damage<sp/>==<sp/>0));</highlight></codeline>
<codeline lineno="144"><highlight class="normal">}</highlight></codeline>
<codeline lineno="145"><highlight class="normal"></highlight></codeline>
<codeline lineno="146" refid="schnorr_2tests__impl_8h_1afe1ab7f4400ea6152deaeea5959aa0bc" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="schnorr_2tests__impl_8h_1afe1ab7f4400ea6152deaeea5959aa0bc" kindref="member">test_schnorr_recovery</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>msg32[32];</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>sig64[64];</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structsecp256k1__ge" kindref="compound">secp256k1_ge</ref><sp/>Q;</highlight></codeline>
<codeline lineno="150"><highlight class="normal"></highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/>secp256k1_rand256_test(msg32);</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/>secp256k1_rand256_test(sig64);</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/>secp256k1_rand256_test(sig64<sp/>+<sp/>32);</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(secp256k1_schnorr_sig_recover(&amp;ctx-&gt;ecmult_ctx,<sp/>sig64,<sp/>&amp;Q,<sp/>&amp;<ref refid="schnorr_2tests__impl_8h_1a31efca2980eb021090e8b4df3d274d3b" kindref="member">test_schnorr_hash</ref>,<sp/>msg32)<sp/>==<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="secp256k1_2src_2util_8h_1aba1590ff86288c886c47dc8a27b30467" kindref="member">CHECK</ref>(secp256k1_schnorr_sig_verify(&amp;ctx-&gt;ecmult_ctx,<sp/>sig64,<sp/>&amp;Q,<sp/>&amp;<ref refid="schnorr_2tests__impl_8h_1a31efca2980eb021090e8b4df3d274d3b" kindref="member">test_schnorr_hash</ref>,<sp/>msg32)<sp/>==<sp/>1);</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="157"><highlight class="normal">}</highlight></codeline>
<codeline lineno="158"><highlight class="normal"></highlight></codeline>
<codeline lineno="159" refid="schnorr_2tests__impl_8h_1a6b31cc8facecda629cf588196a4c936b" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="schnorr_2tests__impl_8h_1a6b31cc8facecda629cf588196a4c936b" kindref="member">run_schnorr_tests</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>32*count;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="schnorr_2tests__impl_8h_1a0fadfae101d2df588a044f55eafcc0e6" kindref="member">test_schnorr_end_to_end</ref>();</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>32<sp/>*<sp/>count;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="schnorr_2tests__impl_8h_1ac01f457db870f54e7034a59bcf51f5fb" kindref="member">test_schnorr_sign_verify</ref>();</highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>16<sp/>*<sp/>count;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="schnorr_2tests__impl_8h_1afe1ab7f4400ea6152deaeea5959aa0bc" kindref="member">test_schnorr_recovery</ref>();</highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>10<sp/>*<sp/>count;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="schnorr_2tests__impl_8h_1a7c79e0204a103b99844bdf1b2ac4cb57" kindref="member">test_schnorr_threshold</ref>();</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="173"><highlight class="normal">}</highlight></codeline>
<codeline lineno="174"><highlight class="normal"></highlight></codeline>
<codeline lineno="175"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
    </programlisting>
    <location file="/home/dev/ds-160209/src/secp256k1/src/modules/schnorr/tests_impl.h"/>
  </compounddef>
</doxygen>
