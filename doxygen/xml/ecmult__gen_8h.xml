<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.9.1">
  <compounddef id="ecmult__gen_8h" kind="file" language="C++">
    <compoundname>ecmult_gen.h</compoundname>
    <includes refid="scalar_8h" local="yes">scalar.h</includes>
    <includes refid="group_8h" local="yes">group.h</includes>
    <includedby refid="ecmult__gen__impl_8h" local="yes">/home/dev/ds-160209/src/secp256k1/src/ecmult_gen_impl.h</includedby>
    <includedby refid="ecdsa__impl_8h" local="yes">/home/dev/ds-160209/src/secp256k1/src/ecdsa_impl.h</includedby>
    <includedby refid="eckey_8h" local="yes">/home/dev/ds-160209/src/secp256k1/src/eckey.h</includedby>
    <includedby refid="eckey__impl_8h" local="yes">/home/dev/ds-160209/src/secp256k1/src/eckey_impl.h</includedby>
    <includedby refid="schnorr__impl_8h" local="yes">/home/dev/ds-160209/src/secp256k1/src/modules/schnorr/schnorr_impl.h</includedby>
    <incdepgraph>
      <node id="22313">
        <label>scalar.h</label>
        <link refid="scalar_8h"/>
        <childnode refid="22314" relation="include">
        </childnode>
      </node>
      <node id="22314">
        <label>num.h</label>
        <link refid="num_8h"/>
      </node>
      <node id="22315">
        <label>group.h</label>
        <link refid="group_8h"/>
        <childnode refid="22314" relation="include">
        </childnode>
        <childnode refid="22316" relation="include">
        </childnode>
      </node>
      <node id="22312">
        <label>/home/dev/ds-160209/src/secp256k1/src/ecmult_gen.h</label>
        <link refid="ecmult_gen.h"/>
        <childnode refid="22313" relation="include">
        </childnode>
        <childnode refid="22315" relation="include">
        </childnode>
      </node>
      <node id="22316">
        <label>field.h</label>
        <link refid="field_8h"/>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="22322">
        <label>/home/dev/ds-160209/src/secp256k1/src/gen_context.c</label>
        <link refid="gen__context_8c"/>
      </node>
      <node id="22321">
        <label>/home/dev/ds-160209/src/secp256k1/src/tests.c</label>
        <link refid="tests_8c"/>
      </node>
      <node id="22326">
        <label>/home/dev/ds-160209/src/secp256k1/src/modules/schnorr/schnorr_impl.h</label>
        <link refid="schnorr__impl_8h"/>
        <childnode refid="22327" relation="include">
        </childnode>
      </node>
      <node id="22327">
        <label>/home/dev/ds-160209/src/secp256k1/src/modules/schnorr/main_impl.h</label>
        <link refid="schnorr_2main__impl_8h"/>
      </node>
      <node id="22319">
        <label>/home/dev/ds-160209/src/secp256k1/src/secp256k1.c</label>
        <link refid="secp256k1_8c"/>
        <childnode refid="22320" relation="include">
        </childnode>
        <childnode refid="22321" relation="include">
        </childnode>
      </node>
      <node id="22317">
        <label>/home/dev/ds-160209/src/secp256k1/src/ecmult_gen.h</label>
        <link refid="ecmult_gen.h"/>
        <childnode refid="22318" relation="include">
        </childnode>
        <childnode refid="22323" relation="include">
        </childnode>
        <childnode refid="22324" relation="include">
        </childnode>
        <childnode refid="22325" relation="include">
        </childnode>
        <childnode refid="22326" relation="include">
        </childnode>
      </node>
      <node id="22325">
        <label>/home/dev/ds-160209/src/secp256k1/src/eckey_impl.h</label>
        <link refid="eckey__impl_8h"/>
        <childnode refid="22319" relation="include">
        </childnode>
      </node>
      <node id="22324">
        <label>/home/dev/ds-160209/src/secp256k1/src/eckey.h</label>
        <link refid="eckey_8h"/>
        <childnode refid="22325" relation="include">
        </childnode>
      </node>
      <node id="22320">
        <label>/home/dev/ds-160209/src/secp256k1/src/bench_internal.c</label>
        <link refid="bench__internal_8c"/>
      </node>
      <node id="22318">
        <label>/home/dev/ds-160209/src/secp256k1/src/ecmult_gen_impl.h</label>
        <link refid="ecmult__gen__impl_8h"/>
        <childnode refid="22319" relation="include">
        </childnode>
        <childnode refid="22322" relation="include">
        </childnode>
      </node>
      <node id="22323">
        <label>/home/dev/ds-160209/src/secp256k1/src/ecdsa_impl.h</label>
        <link refid="ecdsa__impl_8h"/>
        <childnode refid="22319" relation="include">
        </childnode>
      </node>
    </invincdepgraph>
    <innerclass refid="structsecp256k1__ecmult__gen__context" prot="public">secp256k1_ecmult_gen_context</innerclass>
      <sectiondef kind="func">
      <memberdef kind="function" id="ecmult__gen_8h_1a85f9fd11a4166d3d482309317d65c276" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void secp256k1_ecmult_gen_context_init</definition>
        <argsstring>(secp256k1_ecmult_gen_context *ctx)</argsstring>
        <name>secp256k1_ecmult_gen_context_init</name>
        <param>
          <type><ref refid="structsecp256k1__ecmult__gen__context" kindref="compound">secp256k1_ecmult_gen_context</ref> *</type>
          <declname>ctx</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/secp256k1/src/ecmult_gen.h" line="31" column="1"/>
      </memberdef>
      <memberdef kind="function" id="ecmult__gen_8h_1afaf90b2a6554053187cdc89df0dafd21" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void secp256k1_ecmult_gen_context_build</definition>
        <argsstring>(secp256k1_ecmult_gen_context *ctx, const secp256k1_callback *cb)</argsstring>
        <name>secp256k1_ecmult_gen_context_build</name>
        <param>
          <type><ref refid="structsecp256k1__ecmult__gen__context" kindref="compound">secp256k1_ecmult_gen_context</ref> *</type>
          <declname>ctx</declname>
        </param>
        <param>
          <type>const <ref refid="structsecp256k1__callback" kindref="compound">secp256k1_callback</ref> *</type>
          <declname>cb</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/secp256k1/src/ecmult_gen.h" line="32" column="1"/>
      </memberdef>
      <memberdef kind="function" id="ecmult__gen_8h_1aab03a4f94d775718656aabc6b14cfbee" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void secp256k1_ecmult_gen_context_clone</definition>
        <argsstring>(secp256k1_ecmult_gen_context *dst, const secp256k1_ecmult_gen_context *src, const secp256k1_callback *cb)</argsstring>
        <name>secp256k1_ecmult_gen_context_clone</name>
        <param>
          <type><ref refid="structsecp256k1__ecmult__gen__context" kindref="compound">secp256k1_ecmult_gen_context</ref> *</type>
          <declname>dst</declname>
        </param>
        <param>
          <type>const <ref refid="structsecp256k1__ecmult__gen__context" kindref="compound">secp256k1_ecmult_gen_context</ref> *</type>
          <declname>src</declname>
        </param>
        <param>
          <type>const <ref refid="structsecp256k1__callback" kindref="compound">secp256k1_callback</ref> *</type>
          <declname>cb</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/secp256k1/src/ecmult_gen.h" line="33" column="1"/>
      </memberdef>
      <memberdef kind="function" id="ecmult__gen_8h_1a2832f924fc8c5c9d0540d808ccdd7072" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void secp256k1_ecmult_gen_context_clear</definition>
        <argsstring>(secp256k1_ecmult_gen_context *ctx)</argsstring>
        <name>secp256k1_ecmult_gen_context_clear</name>
        <param>
          <type><ref refid="structsecp256k1__ecmult__gen__context" kindref="compound">secp256k1_ecmult_gen_context</ref> *</type>
          <declname>ctx</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/secp256k1/src/ecmult_gen.h" line="35" column="1"/>
      </memberdef>
      <memberdef kind="function" id="ecmult__gen_8h_1a9a40662d6ed2cbab43dbddc25f570f97" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>static int secp256k1_ecmult_gen_context_is_built</definition>
        <argsstring>(const secp256k1_ecmult_gen_context *ctx)</argsstring>
        <name>secp256k1_ecmult_gen_context_is_built</name>
        <param>
          <type>const <ref refid="structsecp256k1__ecmult__gen__context" kindref="compound">secp256k1_ecmult_gen_context</ref> *</type>
          <declname>ctx</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/secp256k1/src/ecmult_gen.h" line="36" column="1"/>
      </memberdef>
      <memberdef kind="function" id="ecmult__gen_8h_1a5ed744c720cbb0a397c8d4c42c637f24" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void secp256k1_ecmult_gen</definition>
        <argsstring>(const secp256k1_ecmult_gen_context *ctx, secp256k1_gej *r, const secp256k1_scalar *a)</argsstring>
        <name>secp256k1_ecmult_gen</name>
        <param>
          <type>const <ref refid="structsecp256k1__ecmult__gen__context" kindref="compound">secp256k1_ecmult_gen_context</ref> *</type>
          <declname>ctx</declname>
        </param>
        <param>
          <type><ref refid="structsecp256k1__gej" kindref="compound">secp256k1_gej</ref> *</type>
          <declname>r</declname>
        </param>
        <param>
          <type>const <ref refid="structsecp256k1__scalar" kindref="compound">secp256k1_scalar</ref> *</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Multiply with the generator: R = a*G </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/secp256k1/src/ecmult_gen.h" line="39" column="1"/>
      </memberdef>
      <memberdef kind="function" id="ecmult__gen_8h_1a7e41f045cb4901a4eba781966fa35abd" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void secp256k1_ecmult_gen_blind</definition>
        <argsstring>(secp256k1_ecmult_gen_context *ctx, const unsigned char *seed32)</argsstring>
        <name>secp256k1_ecmult_gen_blind</name>
        <param>
          <type><ref refid="structsecp256k1__ecmult__gen__context" kindref="compound">secp256k1_ecmult_gen_context</ref> *</type>
          <declname>ctx</declname>
        </param>
        <param>
          <type>const unsigned char *</type>
          <declname>seed32</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/secp256k1/src/ecmult_gen.h" line="41" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/**********************************************************************</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/>*<sp/>Copyright<sp/>(c)<sp/>2013,<sp/>2014<sp/>Pieter<sp/>Wuille<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*<sp/>Distributed<sp/>under<sp/>the<sp/>MIT<sp/>software<sp/>license,<sp/>see<sp/>the<sp/>accompanying<sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*<sp/>file<sp/>COPYING<sp/>or<sp/>http://www.opensource.org/licenses/mit-license.php.*</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/>**********************************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>_SECP256K1_ECMULT_GEN_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>_SECP256K1_ECMULT_GEN_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="scalar_8h" kindref="compound">scalar.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="group_8h" kindref="compound">group.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight></codeline>
<codeline lineno="13" refid="structsecp256k1__ecmult__gen__context" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="14"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>For<sp/>accelerating<sp/>the<sp/>computation<sp/>of<sp/>a*G:</highlight></codeline>
<codeline lineno="15"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>To<sp/>harden<sp/>against<sp/>timing<sp/>attacks,<sp/>use<sp/>the<sp/>following<sp/>mechanism:</highlight></codeline>
<codeline lineno="16"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>*<sp/>Break<sp/>up<sp/>the<sp/>multiplicand<sp/>into<sp/>groups<sp/>of<sp/>4<sp/>bits,<sp/>called<sp/>n_0,<sp/>n_1,<sp/>n_2,<sp/>...,<sp/>n_63.</highlight></codeline>
<codeline lineno="17"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>*<sp/>Compute<sp/>sum(n_i<sp/>*<sp/>16^i<sp/>*<sp/>G<sp/>+<sp/>U_i,<sp/>i=0..63),<sp/>where:</highlight></codeline>
<codeline lineno="18"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/><sp/><sp/>*<sp/>U_i<sp/>=<sp/>U<sp/>*<sp/>2^i<sp/>(for<sp/>i=0..62)</highlight></codeline>
<codeline lineno="19"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/><sp/><sp/>*<sp/>U_i<sp/>=<sp/>U<sp/>*<sp/>(1-2^63)<sp/>(for<sp/>i=63)</highlight></codeline>
<codeline lineno="20"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/><sp/><sp/>where<sp/>U<sp/>is<sp/>a<sp/>point<sp/>with<sp/>no<sp/>known<sp/>corresponding<sp/>scalar.<sp/>Note<sp/>that<sp/>sum(U_i,<sp/>i=0..63)<sp/>=<sp/>0.</highlight></codeline>
<codeline lineno="21"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>For<sp/>each<sp/>i,<sp/>and<sp/>each<sp/>of<sp/>the<sp/>16<sp/>possible<sp/>values<sp/>of<sp/>n_i,<sp/>(n_i<sp/>*<sp/>16^i<sp/>*<sp/>G<sp/>+<sp/>U_i)<sp/>is</highlight></codeline>
<codeline lineno="22"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>precomputed<sp/>(call<sp/>it<sp/>prec(i,<sp/>n_i)).<sp/>The<sp/>formula<sp/>now<sp/>becomes<sp/>sum(prec(i,<sp/>n_i),<sp/>i=0..63).</highlight></codeline>
<codeline lineno="23"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>None<sp/>of<sp/>the<sp/>resulting<sp/>prec<sp/>group<sp/>elements<sp/>have<sp/>a<sp/>known<sp/>scalar,<sp/>and<sp/>neither<sp/>do<sp/>any<sp/>of</highlight></codeline>
<codeline lineno="24"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>the<sp/>intermediate<sp/>sums<sp/>while<sp/>computing<sp/>a*G.</highlight></codeline>
<codeline lineno="25"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26" refid="structsecp256k1__ecmult__gen__context_1ad1ebc8daeace10a8d646f89bbdf32882" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structsecp256k1__ge__storage" kindref="compound">secp256k1_ge_storage</ref><sp/>(*prec)[64][16];<sp/></highlight><highlight class="comment">/*<sp/>prec[j][i]<sp/>=<sp/>16^j<sp/>*<sp/>i<sp/>*<sp/>G<sp/>+<sp/>U_i<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27" refid="structsecp256k1__ecmult__gen__context_1af2f3064a367e86f936ab1c8b93d6f27e" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structsecp256k1__scalar" kindref="compound">secp256k1_scalar</ref><sp/><ref refid="structsecp256k1__ecmult__gen__context_1af2f3064a367e86f936ab1c8b93d6f27e" kindref="member">blind</ref>;</highlight></codeline>
<codeline lineno="28" refid="structsecp256k1__ecmult__gen__context_1a1ebfe4de83e25248ea9d989d06c9b069" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structsecp256k1__gej" kindref="compound">secp256k1_gej</ref><sp/><ref refid="structsecp256k1__ecmult__gen__context_1a1ebfe4de83e25248ea9d989d06c9b069" kindref="member">initial</ref>;</highlight></codeline>
<codeline lineno="29"><highlight class="normal">}<sp/><ref refid="structsecp256k1__ecmult__gen__context" kindref="compound">secp256k1_ecmult_gen_context</ref>;</highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>secp256k1_ecmult_gen_context_init(<ref refid="structsecp256k1__ecmult__gen__context" kindref="compound">secp256k1_ecmult_gen_context</ref>*<sp/>ctx);</highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>secp256k1_ecmult_gen_context_build(<ref refid="structsecp256k1__ecmult__gen__context" kindref="compound">secp256k1_ecmult_gen_context</ref>*<sp/>ctx,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structsecp256k1__callback" kindref="compound">secp256k1_callback</ref>*<sp/>cb);</highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>secp256k1_ecmult_gen_context_clone(<ref refid="structsecp256k1__ecmult__gen__context" kindref="compound">secp256k1_ecmult_gen_context</ref><sp/>*dst,</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structsecp256k1__ecmult__gen__context" kindref="compound">secp256k1_ecmult_gen_context</ref>*<sp/>src,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structsecp256k1__callback" kindref="compound">secp256k1_callback</ref>*<sp/>cb);</highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>secp256k1_ecmult_gen_context_clear(<ref refid="structsecp256k1__ecmult__gen__context" kindref="compound">secp256k1_ecmult_gen_context</ref>*<sp/>ctx);</highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>secp256k1_ecmult_gen_context_is_built(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structsecp256k1__ecmult__gen__context" kindref="compound">secp256k1_ecmult_gen_context</ref>*<sp/>ctx);</highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>secp256k1_ecmult_gen(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structsecp256k1__ecmult__gen__context" kindref="compound">secp256k1_ecmult_gen_context</ref>*<sp/>ctx,<sp/><ref refid="structsecp256k1__gej" kindref="compound">secp256k1_gej</ref><sp/>*r,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structsecp256k1__scalar" kindref="compound">secp256k1_scalar</ref><sp/>*a);</highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>secp256k1_ecmult_gen_blind(<ref refid="structsecp256k1__ecmult__gen__context" kindref="compound">secp256k1_ecmult_gen_context</ref><sp/>*ctx,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*seed32);</highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
    </programlisting>
    <location file="/home/dev/ds-160209/src/secp256k1/src/ecmult_gen.h"/>
  </compounddef>
</doxygen>
