<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.9.1">
  <compounddef id="hash_8cpp" kind="file" language="C++">
    <compoundname>hash.cpp</compoundname>
    <includes refid="hash_8h" local="yes">hash.h</includes>
    <incdepgraph>
      <node id="4929">
        <label>boost/thread/mutex.hpp</label>
      </node>
      <node id="4908">
        <label>/home/dev/ds-160209/src/hash.cpp</label>
        <link refid="hash.cpp"/>
        <childnode refid="4909" relation="include">
        </childnode>
      </node>
      <node id="4921">
        <label>limits</label>
      </node>
      <node id="4938">
        <label>crypto/sha256.h</label>
        <link refid="sha256_8h"/>
        <childnode refid="4914" relation="include">
        </childnode>
        <childnode refid="4927" relation="include">
        </childnode>
      </node>
      <node id="4939">
        <label>crypto/argon2/blake2/blake2.h</label>
        <link refid="blake2_8h"/>
        <childnode refid="4940" relation="include">
        </childnode>
        <childnode refid="4914" relation="include">
        </childnode>
        <childnode refid="4931" relation="include">
        </childnode>
      </node>
      <node id="4924">
        <label>boost/tuple/tuple.hpp</label>
      </node>
      <node id="4911">
        <label>assert.h</label>
      </node>
      <node id="4933">
        <label>version.h</label>
        <link refid="version_8h"/>
        <childnode refid="4934" relation="include">
        </childnode>
        <childnode refid="4915" relation="include">
        </childnode>
      </node>
      <node id="4930">
        <label>sys/mman.h</label>
      </node>
      <node id="4927">
        <label>stdlib.h</label>
      </node>
      <node id="4935">
        <label>openssl/sha.h</label>
      </node>
      <node id="4920">
        <label>cassert</label>
      </node>
      <node id="4913">
        <label>stdexcept</label>
      </node>
      <node id="4915">
        <label>string</label>
      </node>
      <node id="4918">
        <label>map</label>
      </node>
      <node id="4940">
        <label>stddef.h</label>
      </node>
      <node id="4917">
        <label>serialize.h</label>
        <link refid="serialize_8h"/>
        <childnode refid="4915" relation="include">
        </childnode>
        <childnode refid="4916" relation="include">
        </childnode>
        <childnode refid="4918" relation="include">
        </childnode>
        <childnode refid="4919" relation="include">
        </childnode>
        <childnode refid="4920" relation="include">
        </childnode>
        <childnode refid="4921" relation="include">
        </childnode>
        <childnode refid="4914" relation="include">
        </childnode>
        <childnode refid="4912" relation="include">
        </childnode>
        <childnode refid="4922" relation="include">
        </childnode>
        <childnode refid="4923" relation="include">
        </childnode>
        <childnode refid="4924" relation="include">
        </childnode>
        <childnode refid="4925" relation="include">
        </childnode>
        <childnode refid="4933" relation="include">
        </childnode>
      </node>
      <node id="4931">
        <label>limits.h</label>
      </node>
      <node id="4909">
        <label>hash.h</label>
        <link refid="hash_8h"/>
        <childnode refid="4910" relation="include">
        </childnode>
        <childnode refid="4917" relation="include">
        </childnode>
        <childnode refid="4935" relation="include">
        </childnode>
        <childnode refid="4936" relation="include">
        </childnode>
        <childnode refid="4937" relation="include">
        </childnode>
        <childnode refid="4938" relation="include">
        </childnode>
        <childnode refid="4939" relation="include">
        </childnode>
        <childnode refid="4941" relation="include">
        </childnode>
        <childnode refid="4916" relation="include">
        </childnode>
      </node>
      <node id="4928">
        <label>string.h</label>
      </node>
      <node id="4934">
        <label>clientversion.h</label>
        <link refid="clientversion_8h"/>
      </node>
      <node id="4922">
        <label>cstdio</label>
      </node>
      <node id="4923">
        <label>boost/type_traits/is_fundamental.hpp</label>
      </node>
      <node id="4932">
        <label>unistd.h</label>
      </node>
      <node id="4916">
        <label>vector</label>
      </node>
      <node id="4936">
        <label>openssl/ripemd.h</label>
      </node>
      <node id="4914">
        <label>stdint.h</label>
        <link refid="stdint_8h"/>
      </node>
      <node id="4941">
        <label>crypto/argon2/argon2.h</label>
        <link refid="argon2_8h"/>
        <childnode refid="4914" relation="include">
        </childnode>
        <childnode refid="4940" relation="include">
        </childnode>
        <childnode refid="4931" relation="include">
        </childnode>
      </node>
      <node id="4910">
        <label>uint256.h</label>
        <link refid="uint256_8h"/>
        <childnode refid="4911" relation="include">
        </childnode>
        <childnode refid="4912" relation="include">
        </childnode>
        <childnode refid="4913" relation="include">
        </childnode>
        <childnode refid="4914" relation="include">
        </childnode>
        <childnode refid="4915" relation="include">
        </childnode>
        <childnode refid="4916" relation="include">
        </childnode>
      </node>
      <node id="4925">
        <label>allocators.h</label>
        <link refid="allocators_8h"/>
        <childnode refid="4926" relation="include">
        </childnode>
        <childnode refid="4928" relation="include">
        </childnode>
        <childnode refid="4915" relation="include">
        </childnode>
        <childnode refid="4929" relation="include">
        </childnode>
        <childnode refid="4918" relation="include">
        </childnode>
        <childnode refid="4930" relation="include">
        </childnode>
        <childnode refid="4931" relation="include">
        </childnode>
        <childnode refid="4932" relation="include">
        </childnode>
      </node>
      <node id="4919">
        <label>set</label>
      </node>
      <node id="4937">
        <label>crypto/ripemd160.h</label>
        <link refid="ripemd160_8h"/>
        <childnode refid="4914" relation="include">
        </childnode>
        <childnode refid="4927" relation="include">
        </childnode>
      </node>
      <node id="4926">
        <label>cleanse.h</label>
        <link refid="cleanse_8h"/>
        <childnode refid="4927" relation="include">
        </childnode>
      </node>
      <node id="4912">
        <label>cstring</label>
      </node>
    </incdepgraph>
      <sectiondef kind="func">
      <memberdef kind="function" id="hash_8cpp_1a4b8c72838f26539d69f31e256fd6dc5c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int HMAC_SHA512_Init</definition>
        <argsstring>(HMAC_SHA512_CTX *pctx, const void *pkey, size_t len)</argsstring>
        <name>HMAC_SHA512_Init</name>
        <param>
          <type><ref refid="struct_h_m_a_c___s_h_a512___c_t_x" kindref="compound">HMAC_SHA512_CTX</ref> *</type>
          <declname>pctx</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>pkey</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>len</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/hash.cpp" line="3" column="1" bodyfile="/home/dev/ds-160209/src/hash.cpp" bodystart="3" bodyend="29"/>
      </memberdef>
      <memberdef kind="function" id="hash_8cpp_1a252e477655e0e6373143178d65e7a931" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int HMAC_SHA512_Update</definition>
        <argsstring>(HMAC_SHA512_CTX *pctx, const void *pdata, size_t len)</argsstring>
        <name>HMAC_SHA512_Update</name>
        <param>
          <type><ref refid="struct_h_m_a_c___s_h_a512___c_t_x" kindref="compound">HMAC_SHA512_CTX</ref> *</type>
          <declname>pctx</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>pdata</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>len</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/hash.cpp" line="31" column="1" bodyfile="/home/dev/ds-160209/src/hash.cpp" bodystart="31" bodyend="34"/>
      </memberdef>
      <memberdef kind="function" id="hash_8cpp_1a3e0fccfdb4599881e52d5fe8497f961f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int HMAC_SHA512_Final</definition>
        <argsstring>(unsigned char *pmd, HMAC_SHA512_CTX *pctx)</argsstring>
        <name>HMAC_SHA512_Final</name>
        <param>
          <type>unsigned char *</type>
          <declname>pmd</declname>
        </param>
        <param>
          <type><ref refid="struct_h_m_a_c___s_h_a512___c_t_x" kindref="compound">HMAC_SHA512_CTX</ref> *</type>
          <declname>pctx</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/hash.cpp" line="36" column="1" bodyfile="/home/dev/ds-160209/src/hash.cpp" bodystart="36" bodyend="42"/>
      </memberdef>
      <memberdef kind="function" id="hash_8cpp_1af81a4d88d7eaba27c63313aec22b01a4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void BIP32Hash</definition>
        <argsstring>(const unsigned char chainCode[32], unsigned int nChild, unsigned char header, const unsigned char data[32], unsigned char output[64])</argsstring>
        <name>BIP32Hash</name>
        <param>
          <type>const unsigned char</type>
          <declname>chainCode</declname>
          <array>[32]</array>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>nChild</declname>
        </param>
        <param>
          <type>unsigned char</type>
          <declname>header</declname>
        </param>
        <param>
          <type>const unsigned char</type>
          <declname>data</declname>
          <array>[32]</array>
        </param>
        <param>
          <type>unsigned char</type>
          <declname>output</declname>
          <array>[64]</array>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/hash.cpp" line="44" column="1" bodyfile="/home/dev/ds-160209/src/hash.cpp" bodystart="44" bodyend="56"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#include<sp/>&quot;<ref refid="hash_8h" kindref="compound">hash.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight></codeline>
<codeline lineno="3" refid="hash_8h_1a4b8c72838f26539d69f31e256fd6dc5c" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="hash_8cpp_1a4b8c72838f26539d69f31e256fd6dc5c" kindref="member">HMAC_SHA512_Init</ref>(<ref refid="struct_h_m_a_c___s_h_a512___c_t_x" kindref="compound">HMAC_SHA512_CTX</ref><sp/>*pctx,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*pkey,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>len)</highlight></codeline>
<codeline lineno="4"><highlight class="normal">{</highlight></codeline>
<codeline lineno="5"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>key[128];</highlight></codeline>
<codeline lineno="6"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(len<sp/>&lt;=<sp/>128)</highlight></codeline>
<codeline lineno="7"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="8"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>memcpy(key,<sp/>pkey,<sp/>len);</highlight></codeline>
<codeline lineno="9"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>memset(key<sp/>+<sp/>len,<sp/>0,<sp/>128-len);</highlight></codeline>
<codeline lineno="10"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="11"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="13"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SHA512_CTX<sp/>ctxKey;</highlight></codeline>
<codeline lineno="14"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SHA512_Init(&amp;ctxKey);</highlight></codeline>
<codeline lineno="15"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SHA512_Update(&amp;ctxKey,<sp/>pkey,<sp/>len);</highlight></codeline>
<codeline lineno="16"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SHA512_Final(key,<sp/>&amp;ctxKey);</highlight></codeline>
<codeline lineno="17"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>memset(key<sp/>+<sp/>64,<sp/>0,<sp/>64);</highlight></codeline>
<codeline lineno="18"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n=0;<sp/>n&lt;128;<sp/>n++)</highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>key[n]<sp/>^=<sp/>0x5c;</highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/><sp/><sp/>SHA512_Init(&amp;pctx-&gt;<ref refid="struct_h_m_a_c___s_h_a512___c_t_x_1aaed38b9a2310e97f4d516b40d7ac2f9f" kindref="member">ctxOuter</ref>);</highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/><sp/><sp/>SHA512_Update(&amp;pctx-&gt;<ref refid="struct_h_m_a_c___s_h_a512___c_t_x_1aaed38b9a2310e97f4d516b40d7ac2f9f" kindref="member">ctxOuter</ref>,<sp/>key,<sp/>128);</highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n=0;<sp/>n&lt;128;<sp/>n++)</highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>key[n]<sp/>^=<sp/>0x5c<sp/>^<sp/>0x36;</highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/><sp/><sp/>SHA512_Init(&amp;pctx-&gt;<ref refid="struct_h_m_a_c___s_h_a512___c_t_x_1a3120d5087218a30088b409605ac63afb" kindref="member">ctxInner</ref>);</highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>SHA512_Update(&amp;pctx-&gt;<ref refid="struct_h_m_a_c___s_h_a512___c_t_x_1a3120d5087218a30088b409605ac63afb" kindref="member">ctxInner</ref>,<sp/>key,<sp/>128);</highlight></codeline>
<codeline lineno="29"><highlight class="normal">}</highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight></codeline>
<codeline lineno="31" refid="hash_8h_1a252e477655e0e6373143178d65e7a931" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="hash_8cpp_1a252e477655e0e6373143178d65e7a931" kindref="member">HMAC_SHA512_Update</ref>(<ref refid="struct_h_m_a_c___s_h_a512___c_t_x" kindref="compound">HMAC_SHA512_CTX</ref><sp/>*pctx,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*pdata,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>len)</highlight></codeline>
<codeline lineno="32"><highlight class="normal">{</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>SHA512_Update(&amp;pctx-&gt;<ref refid="struct_h_m_a_c___s_h_a512___c_t_x_1a3120d5087218a30088b409605ac63afb" kindref="member">ctxInner</ref>,<sp/>pdata,<sp/>len);</highlight></codeline>
<codeline lineno="34"><highlight class="normal">}</highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight></codeline>
<codeline lineno="36" refid="hash_8h_1a3e0fccfdb4599881e52d5fe8497f961f" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="hash_8cpp_1a3e0fccfdb4599881e52d5fe8497f961f" kindref="member">HMAC_SHA512_Final</ref>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*pmd,<sp/><ref refid="struct_h_m_a_c___s_h_a512___c_t_x" kindref="compound">HMAC_SHA512_CTX</ref><sp/>*pctx)</highlight></codeline>
<codeline lineno="37"><highlight class="normal">{</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>buf[64];</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/>SHA512_Final(buf,<sp/>&amp;pctx-&gt;<ref refid="struct_h_m_a_c___s_h_a512___c_t_x_1a3120d5087218a30088b409605ac63afb" kindref="member">ctxInner</ref>);</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/>SHA512_Update(&amp;pctx-&gt;<ref refid="struct_h_m_a_c___s_h_a512___c_t_x_1aaed38b9a2310e97f4d516b40d7ac2f9f" kindref="member">ctxOuter</ref>,<sp/>buf,<sp/>64);</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>SHA512_Final(pmd,<sp/>&amp;pctx-&gt;<ref refid="struct_h_m_a_c___s_h_a512___c_t_x_1aaed38b9a2310e97f4d516b40d7ac2f9f" kindref="member">ctxOuter</ref>);</highlight></codeline>
<codeline lineno="42"><highlight class="normal">}</highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight></codeline>
<codeline lineno="44" refid="hash_8h_1af81a4d88d7eaba27c63313aec22b01a4" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="hash_8cpp_1af81a4d88d7eaba27c63313aec22b01a4" kindref="member">BIP32Hash</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>chainCode[32],<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nChild,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>header,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>data[32],<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>output[64])<sp/>{</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>num[4];</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/>num[0]<sp/>=<sp/>(nChild<sp/>&gt;&gt;<sp/>24)<sp/>&amp;<sp/>0xFF;</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/>num[1]<sp/>=<sp/>(nChild<sp/>&gt;&gt;<sp/>16)<sp/>&amp;<sp/>0xFF;</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/>num[2]<sp/>=<sp/>(nChild<sp/>&gt;&gt;<sp/><sp/>8)<sp/>&amp;<sp/>0xFF;</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/>num[3]<sp/>=<sp/>(nChild<sp/>&gt;&gt;<sp/><sp/>0)<sp/>&amp;<sp/>0xFF;</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_h_m_a_c___s_h_a512___c_t_x" kindref="compound">HMAC_SHA512_CTX</ref><sp/>ctx;</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="hash_8cpp_1a4b8c72838f26539d69f31e256fd6dc5c" kindref="member">HMAC_SHA512_Init</ref>(&amp;ctx,<sp/>chainCode,<sp/>32);</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="hash_8cpp_1a252e477655e0e6373143178d65e7a931" kindref="member">HMAC_SHA512_Update</ref>(&amp;ctx,<sp/>&amp;header,<sp/>1);</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="hash_8cpp_1a252e477655e0e6373143178d65e7a931" kindref="member">HMAC_SHA512_Update</ref>(&amp;ctx,<sp/>data,<sp/>32);</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="hash_8cpp_1a252e477655e0e6373143178d65e7a931" kindref="member">HMAC_SHA512_Update</ref>(&amp;ctx,<sp/>num,<sp/>4);</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="hash_8cpp_1a3e0fccfdb4599881e52d5fe8497f961f" kindref="member">HMAC_SHA512_Final</ref>(output,<sp/>&amp;ctx);</highlight></codeline>
<codeline lineno="56"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="/home/dev/ds-160209/src/hash.cpp"/>
  </compounddef>
</doxygen>
