<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.9.1">
  <compounddef id="secp256k1__schnorr_8h" kind="file" language="C++">
    <compoundname>secp256k1_schnorr.h</compoundname>
    <includes refid="secp256k1_8h" local="yes">secp256k1.h</includes>
    <includedby refid="bench__schnorr__verify_8c" local="yes">/home/dev/ds-160209/src/secp256k1/src/bench_schnorr_verify.c</includedby>
    <includedby refid="schnorr_2main__impl_8h" local="yes">/home/dev/ds-160209/src/secp256k1/src/modules/schnorr/main_impl.h</includedby>
    <includedby refid="schnorr_2tests__impl_8h" local="yes">/home/dev/ds-160209/src/secp256k1/src/modules/schnorr/tests_impl.h</includedby>
    <incdepgraph>
      <node id="51567">
        <label>/home/dev/ds-160209/src/secp256k1/include/secp256k1_schnorr.h</label>
        <link refid="secp256k1_schnorr.h"/>
        <childnode refid="51568" relation="include">
        </childnode>
      </node>
      <node id="51568">
        <label>secp256k1.h</label>
        <link refid="secp256k1_8h"/>
        <childnode refid="51569" relation="include">
        </childnode>
      </node>
      <node id="51569">
        <label>stddef.h</label>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="51570">
        <label>/home/dev/ds-160209/src/secp256k1/include/secp256k1_schnorr.h</label>
        <link refid="secp256k1_schnorr.h"/>
        <childnode refid="51571" relation="include">
        </childnode>
        <childnode refid="51572" relation="include">
        </childnode>
        <childnode refid="51573" relation="include">
        </childnode>
      </node>
      <node id="51571">
        <label>/home/dev/ds-160209/src/secp256k1/src/bench_schnorr_verify.c</label>
        <link refid="bench__schnorr__verify_8c"/>
      </node>
      <node id="51572">
        <label>/home/dev/ds-160209/src/secp256k1/src/modules/schnorr/main_impl.h</label>
        <link refid="schnorr_2main__impl_8h"/>
      </node>
      <node id="51573">
        <label>/home/dev/ds-160209/src/secp256k1/src/modules/schnorr/tests_impl.h</label>
        <link refid="schnorr_2tests__impl_8h"/>
      </node>
    </invincdepgraph>
      <sectiondef kind="func">
      <memberdef kind="function" id="secp256k1__schnorr_8h_1ab7e18ffba471cded051c249f5f8cab48" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="secp256k1_8h_1a3f1967acd0fe26283877c61b3f2694a5" kindref="member">SECP256K1_API</ref> int</type>
        <definition>SECP256K1_API int secp256k1_schnorr_sign</definition>
        <argsstring>(const secp256k1_context *ctx, unsigned char *sig64, const unsigned char *msg32, const unsigned char *seckey, secp256k1_nonce_function noncefp, const void *ndata) SECP256K1_ARG_NONNULL(1) SECP256K1_ARG_NONNULL(2) SECP256K1_ARG_NONNULL(3) SECP256K1_ARG_NONNULL(4)</argsstring>
        <name>secp256k1_schnorr_sign</name>
        <param>
          <type>const <ref refid="secp256k1_8h_1a282ec9e6dfec8c35955c3eb2f7476e5e" kindref="member">secp256k1_context</ref> *</type>
          <declname>ctx</declname>
        </param>
        <param>
          <type>unsigned char *</type>
          <declname>sig64</declname>
        </param>
        <param>
          <type>const unsigned char *</type>
          <declname>msg32</declname>
        </param>
        <param>
          <type>const unsigned char *</type>
          <declname>seckey</declname>
        </param>
        <param>
          <type><ref refid="secp256k1_8h_1a539882fd91bff672712fa19a4cfaeb98" kindref="member">secp256k1_nonce_function</ref></type>
          <declname>noncefp</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>ndata</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Create a signature using a custom EC-Schnorr-SHA256 construction. It produces non-malleable 64-byte signatures which support public key recovery batch validation, and multiparty signing. Returns: 1: signature created 0: the nonce generation function failed, or the private key was invalid. Args: ctx: pointer to a context object, initialized for signing (cannot be NULL) Out: sig64: pointer to a 64-byte array where the signature will be placed (cannot be NULL) In: msg32: the 32-byte message hash being signed (cannot be NULL) seckey: pointer to a 32-byte secret key (cannot be NULL) noncefp:pointer to a nonce generation function. If NULL, secp256k1_nonce_function_default is used ndata: pointer to arbitrary data used by the nonce generation function (can be NULL) </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/secp256k1/include/secp256k1_schnorr.h" line="27" column="1" bodyfile="/home/dev/ds-160209/src/secp256k1/src/modules/schnorr/main_impl.h" bodystart="23" bodyend="59"/>
        <references refid="secp256k1_2src_2util_8h_1aca8ac5ae73fd966db106de59160a178b" compoundref="secp256k1_2src_2util_8h" startline="64">VERIFY_CHECK</references>
        <references refid="secp256k1_8c_1a6e1f88c6ce07376501097b42a2b40727" compoundref="secp256k1_8c" startline="23">ARG_CHECK</references>
        <references refid="structsecp256k1__context__struct_1aacc2071a68f9c5a6c05eb783f523b9eb" compoundref="secp256k1_8c" startline="55">secp256k1_context_struct::ecmult_gen_ctx</references>
        <references refid="secp256k1_8h_1a22f44df7786a1be5ad93aadfed75b932" compoundref="secp256k1_8c" startline="347">secp256k1_nonce_function_default</references>
        <referencedby refid="schnorr_2tests__impl_8h_1a0fadfae101d2df588a044f55eafcc0e6" compoundref="schnorr_2tests__impl_8h" startline="12" endline="40">test_schnorr_end_to_end</referencedby>
      </memberdef>
      <memberdef kind="function" id="secp256k1__schnorr_8h_1ab9bcde80df113d29823401a460ea9bcc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="secp256k1_8h_1a3f1967acd0fe26283877c61b3f2694a5" kindref="member">SECP256K1_API</ref> <ref refid="secp256k1_8h_1aebd5ca8fbfcbb0ba0754a46115143c2c" kindref="member">SECP256K1_WARN_UNUSED_RESULT</ref> int</type>
        <definition>SECP256K1_API SECP256K1_WARN_UNUSED_RESULT int secp256k1_schnorr_verify</definition>
        <argsstring>(const secp256k1_context *ctx, const unsigned char *sig64, const unsigned char *msg32, const secp256k1_pubkey *pubkey) SECP256K1_ARG_NONNULL(1) SECP256K1_ARG_NONNULL(2) SECP256K1_ARG_NONNULL(3) SECP256K1_ARG_NONNULL(4)</argsstring>
        <name>secp256k1_schnorr_verify</name>
        <param>
          <type>const <ref refid="secp256k1_8h_1a282ec9e6dfec8c35955c3eb2f7476e5e" kindref="member">secp256k1_context</ref> *</type>
          <declname>ctx</declname>
        </param>
        <param>
          <type>const unsigned char *</type>
          <declname>sig64</declname>
        </param>
        <param>
          <type>const unsigned char *</type>
          <declname>msg32</declname>
        </param>
        <param>
          <type>const <ref refid="structsecp256k1__pubkey" kindref="compound">secp256k1_pubkey</ref> *</type>
          <declname>pubkey</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Verify a signature created by secp256k1_schnorr_sign. Returns: 1: correct signature 0: incorrect signature Args: ctx: a secp256k1 context object, initialized for verification. In: sig64: the 64-byte signature being verified (cannot be NULL) msg32: the 32-byte message hash being verified (cannot be NULL) pubkey: the public key to verify with (cannot be NULL) </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/secp256k1/include/secp256k1_schnorr.h" line="44" column="1" bodyfile="/home/dev/ds-160209/src/secp256k1/src/modules/schnorr/main_impl.h" bodystart="61" bodyend="71"/>
        <references refid="secp256k1_2src_2util_8h_1aca8ac5ae73fd966db106de59160a178b" compoundref="secp256k1_2src_2util_8h" startline="64">VERIFY_CHECK</references>
        <references refid="secp256k1_8c_1a6e1f88c6ce07376501097b42a2b40727" compoundref="secp256k1_8c" startline="23">ARG_CHECK</references>
        <references refid="structsecp256k1__context__struct_1ab6a825dd98cab724df0f0060cf515eab" compoundref="secp256k1_8c" startline="54">secp256k1_context_struct::ecmult_ctx</references>
        <referencedby refid="schnorr_2tests__impl_8h_1a0fadfae101d2df588a044f55eafcc0e6" compoundref="schnorr_2tests__impl_8h" startline="12" endline="40">test_schnorr_end_to_end</referencedby>
        <referencedby refid="schnorr_2tests__impl_8h_1a7c79e0204a103b99844bdf1b2ac4cb57" compoundref="schnorr_2tests__impl_8h" startline="85" endline="144">test_schnorr_threshold</referencedby>
      </memberdef>
      <memberdef kind="function" id="secp256k1__schnorr_8h_1aa15ce0fb89d5eacfd2a11a88ee70636c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="secp256k1_8h_1a3f1967acd0fe26283877c61b3f2694a5" kindref="member">SECP256K1_API</ref> int</type>
        <definition>SECP256K1_API int secp256k1_schnorr_recover</definition>
        <argsstring>(const secp256k1_context *ctx, secp256k1_pubkey *pubkey, const unsigned char *sig64, const unsigned char *msg32) SECP256K1_ARG_NONNULL(1) SECP256K1_ARG_NONNULL(2) SECP256K1_ARG_NONNULL(3) SECP256K1_ARG_NONNULL(4)</argsstring>
        <name>secp256k1_schnorr_recover</name>
        <param>
          <type>const <ref refid="secp256k1_8h_1a282ec9e6dfec8c35955c3eb2f7476e5e" kindref="member">secp256k1_context</ref> *</type>
          <declname>ctx</declname>
        </param>
        <param>
          <type><ref refid="structsecp256k1__pubkey" kindref="compound">secp256k1_pubkey</ref> *</type>
          <declname>pubkey</declname>
        </param>
        <param>
          <type>const unsigned char *</type>
          <declname>sig64</declname>
        </param>
        <param>
          <type>const unsigned char *</type>
          <declname>msg32</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Recover an EC public key from a Schnorr signature created using secp256k1_schnorr_sign. Returns: 1: public key successfully recovered (which guarantees a correct signature). 0: otherwise. Args: ctx: pointer to a context object, initialized for verification (cannot be NULL) Out: pubkey: pointer to a pubkey to set to the recovered public key (cannot be NULL). In: sig64: signature as 64 byte array (cannot be NULL) msg32: the 32-byte message hash assumed to be signed (cannot be NULL) </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/secp256k1/include/secp256k1_schnorr.h" line="64" column="1" bodyfile="/home/dev/ds-160209/src/secp256k1/src/modules/schnorr/main_impl.h" bodystart="73" bodyend="89"/>
        <references refid="secp256k1_2src_2util_8h_1aca8ac5ae73fd966db106de59160a178b" compoundref="secp256k1_2src_2util_8h" startline="64">VERIFY_CHECK</references>
        <references refid="secp256k1_8c_1a6e1f88c6ce07376501097b42a2b40727" compoundref="secp256k1_8c" startline="23">ARG_CHECK</references>
        <references refid="structsecp256k1__context__struct_1ab6a825dd98cab724df0f0060cf515eab" compoundref="secp256k1_8c" startline="54">secp256k1_context_struct::ecmult_ctx</references>
        <referencedby refid="schnorr_2tests__impl_8h_1a0fadfae101d2df588a044f55eafcc0e6" compoundref="schnorr_2tests__impl_8h" startline="12" endline="40">test_schnorr_end_to_end</referencedby>
      </memberdef>
      <memberdef kind="function" id="secp256k1__schnorr_8h_1a62dd4ce1d4843fe3a4d73ee44d142cb3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="secp256k1_8h_1a3f1967acd0fe26283877c61b3f2694a5" kindref="member">SECP256K1_API</ref> int</type>
        <definition>SECP256K1_API int secp256k1_schnorr_generate_nonce_pair</definition>
        <argsstring>(const secp256k1_context *ctx, secp256k1_pubkey *pubnonce, unsigned char *privnonce32, const unsigned char *msg32, const unsigned char *sec32, secp256k1_nonce_function noncefp, const void *noncedata) SECP256K1_ARG_NONNULL(1) SECP256K1_ARG_NONNULL(2) SECP256K1_ARG_NONNULL(3)</argsstring>
        <name>secp256k1_schnorr_generate_nonce_pair</name>
        <param>
          <type>const <ref refid="secp256k1_8h_1a282ec9e6dfec8c35955c3eb2f7476e5e" kindref="member">secp256k1_context</ref> *</type>
          <declname>ctx</declname>
        </param>
        <param>
          <type><ref refid="structsecp256k1__pubkey" kindref="compound">secp256k1_pubkey</ref> *</type>
          <declname>pubnonce</declname>
        </param>
        <param>
          <type>unsigned char *</type>
          <declname>privnonce32</declname>
        </param>
        <param>
          <type>const unsigned char *</type>
          <declname>msg32</declname>
        </param>
        <param>
          <type>const unsigned char *</type>
          <declname>sec32</declname>
        </param>
        <param>
          <type><ref refid="secp256k1_8h_1a539882fd91bff672712fa19a4cfaeb98" kindref="member">secp256k1_nonce_function</ref></type>
          <declname>noncefp</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>noncedata</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Generate a nonce pair deterministically for use with secp256k1_schnorr_partial_sign. Returns: 1: valid nonce pair was generated. 0: otherwise (nonce generation function failed) Args: ctx: pointer to a context object, initialized for signing (cannot be NULL) Out: pubnonce: public side of the nonce (cannot be NULL) privnonce32: private side of the nonce (32 byte) (cannot be NULL) In: msg32: the 32-byte message hash assumed to be signed (cannot be NULL) sec32: the 32-byte private key (cannot be NULL) noncefp: pointer to a nonce generation function. If NULL, secp256k1_nonce_function_default is used noncedata: pointer to arbitrary data used by the nonce generation function (can be NULL)</para><para>Do not use the output as a private/public key pair for signing/validation. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/secp256k1/include/secp256k1_schnorr.h" line="89" column="1" bodyfile="/home/dev/ds-160209/src/secp256k1/src/modules/schnorr/main_impl.h" bodystart="91" bodyend="131"/>
        <references refid="secp256k1_2src_2util_8h_1aca8ac5ae73fd966db106de59160a178b" compoundref="secp256k1_2src_2util_8h" startline="64">VERIFY_CHECK</references>
        <references refid="secp256k1_8c_1a6e1f88c6ce07376501097b42a2b40727" compoundref="secp256k1_8c" startline="23">ARG_CHECK</references>
        <references refid="structsecp256k1__context__struct_1aacc2071a68f9c5a6c05eb783f523b9eb" compoundref="secp256k1_8c" startline="55">secp256k1_context_struct::ecmult_gen_ctx</references>
        <references refid="secp256k1_8h_1a22f44df7786a1be5ad93aadfed75b932" compoundref="secp256k1_8c" startline="347">secp256k1_nonce_function_default</references>
        <referencedby refid="schnorr_2tests__impl_8h_1a7c79e0204a103b99844bdf1b2ac4cb57" compoundref="schnorr_2tests__impl_8h" startline="85" endline="144">test_schnorr_threshold</referencedby>
      </memberdef>
      <memberdef kind="function" id="secp256k1__schnorr_8h_1a9887da00f1d053c0c86b865bad5b8d82" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="secp256k1_8h_1a3f1967acd0fe26283877c61b3f2694a5" kindref="member">SECP256K1_API</ref> <ref refid="secp256k1_8h_1aebd5ca8fbfcbb0ba0754a46115143c2c" kindref="member">SECP256K1_WARN_UNUSED_RESULT</ref> int</type>
        <definition>SECP256K1_API SECP256K1_WARN_UNUSED_RESULT int secp256k1_schnorr_partial_sign</definition>
        <argsstring>(const secp256k1_context *ctx, unsigned char *sig64, const unsigned char *msg32, const unsigned char *sec32, const secp256k1_pubkey *pubnonce_others, const unsigned char *secnonce32) SECP256K1_ARG_NONNULL(1) SECP256K1_ARG_NONNULL(2) SECP256K1_ARG_NONNULL(3) SECP256K1_ARG_NONNULL(4) SECP256K1_ARG_NONNULL(5) SECP256K1_ARG_NONNULL(6)</argsstring>
        <name>secp256k1_schnorr_partial_sign</name>
        <param>
          <type>const <ref refid="secp256k1_8h_1a282ec9e6dfec8c35955c3eb2f7476e5e" kindref="member">secp256k1_context</ref> *</type>
          <declname>ctx</declname>
        </param>
        <param>
          <type>unsigned char *</type>
          <declname>sig64</declname>
        </param>
        <param>
          <type>const unsigned char *</type>
          <declname>msg32</declname>
        </param>
        <param>
          <type>const unsigned char *</type>
          <declname>sec32</declname>
        </param>
        <param>
          <type>const <ref refid="structsecp256k1__pubkey" kindref="compound">secp256k1_pubkey</ref> *</type>
          <declname>pubnonce_others</declname>
        </param>
        <param>
          <type>const unsigned char *</type>
          <declname>secnonce32</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Produce a partial Schnorr signature, which can be combined using secp256k1_schnorr_partial_combine, to end up with a full signature that is verifiable using secp256k1_schnorr_verify. Returns: 1: signature created successfully. 0: no valid signature exists with this combination of keys, nonces and message (chance around 1 in 2^128) -1: invalid private key, nonce, or public nonces. Args: ctx: pointer to context object, initialized for signing (cannot be NULL) Out: sig64: pointer to 64-byte array to put partial signature in In: msg32: pointer to 32-byte message to sign sec32: pointer to 32-byte private key pubnonce_others: pointer to pubkey containing the sum of the other&apos;s nonces (see secp256k1_ec_pubkey_combine) secnonce32: pointer to 32-byte array containing our nonce</para><para>The intended procedure for creating a multiparty signature is:<itemizedlist>
<listitem><para>Each signer S[i] with private key x[i] and public key Q[i] runs secp256k1_schnorr_generate_nonce_pair to produce a pair (k[i],R[i]) of private/public nonces.</para></listitem><listitem><para>All signers communicate their public nonces to each other (revealing your private nonce can lead to discovery of your private key, so it should be considered secret).</para></listitem><listitem><para>All signers combine all the public nonces they received (excluding their own) using secp256k1_ec_pubkey_combine to obtain an Rall[i] = sum(R[0..i-1,i+1..n]).</para></listitem><listitem><para>All signers produce a partial signature using secp256k1_schnorr_partial_sign, passing in their own private key x[i], their own private nonce k[i], and the sum of the others&apos; public nonces Rall[i].</para></listitem><listitem><para>All signers communicate their partial signatures to each other.</para></listitem><listitem><para>Someone combines all partial signatures using secp256k1_schnorr_partial_combine, to obtain a full signature.</para></listitem><listitem><para>The resulting signature is validatable using secp256k1_schnorr_verify, with public key equal to the result of secp256k1_ec_pubkey_combine of the signers&apos; public keys (sum(Q[0..n])).</para><para>Note that secp256k1_schnorr_partial_combine and secp256k1_ec_pubkey_combine function take their arguments in any order, and it is possible to pre-combine several inputs already with one call, and add more inputs later by calling the function again (they are commutative and associative). </para></listitem></itemizedlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/secp256k1/include/secp256k1_schnorr.h" line="141" column="1" bodyfile="/home/dev/ds-160209/src/secp256k1/src/modules/schnorr/main_impl.h" bodystart="133" bodyend="155"/>
        <references refid="secp256k1_2src_2util_8h_1aca8ac5ae73fd966db106de59160a178b" compoundref="secp256k1_2src_2util_8h" startline="64">VERIFY_CHECK</references>
        <references refid="secp256k1_8c_1a6e1f88c6ce07376501097b42a2b40727" compoundref="secp256k1_8c" startline="23">ARG_CHECK</references>
        <references refid="structsecp256k1__context__struct_1aacc2071a68f9c5a6c05eb783f523b9eb" compoundref="secp256k1_8c" startline="55">secp256k1_context_struct::ecmult_gen_ctx</references>
        <referencedby refid="schnorr_2tests__impl_8h_1a7c79e0204a103b99844bdf1b2ac4cb57" compoundref="schnorr_2tests__impl_8h" startline="85" endline="144">test_schnorr_threshold</referencedby>
      </memberdef>
      <memberdef kind="function" id="secp256k1__schnorr_8h_1a3e2e970becbc63f9d1cd0ef054488b58" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="secp256k1_8h_1a3f1967acd0fe26283877c61b3f2694a5" kindref="member">SECP256K1_API</ref> <ref refid="secp256k1_8h_1aebd5ca8fbfcbb0ba0754a46115143c2c" kindref="member">SECP256K1_WARN_UNUSED_RESULT</ref> int</type>
        <definition>SECP256K1_API SECP256K1_WARN_UNUSED_RESULT int secp256k1_schnorr_partial_combine</definition>
        <argsstring>(const secp256k1_context *ctx, unsigned char *sig64, const unsigned char *const *sig64sin, size_t n) SECP256K1_ARG_NONNULL(2) SECP256K1_ARG_NONNULL(3)</argsstring>
        <name>secp256k1_schnorr_partial_combine</name>
        <param>
          <type>const <ref refid="secp256k1_8h_1a282ec9e6dfec8c35955c3eb2f7476e5e" kindref="member">secp256k1_context</ref> *</type>
          <declname>ctx</declname>
        </param>
        <param>
          <type>unsigned char *</type>
          <declname>sig64</declname>
        </param>
        <param>
          <type>const unsigned char *const *</type>
          <declname>sig64sin</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>n</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Combine multiple Schnorr partial signatures. Returns: 1: the passed signatures were successfully combined. 0: the resulting signature is not valid (chance of 1 in 2^256) -1: some inputs were invalid, or the signatures were not created using the same set of nonces Args: ctx: pointer to a context object Out: sig64: pointer to a 64-byte array to place the combined signature (cannot be NULL) In: sig64sin: pointer to an array of n pointers to 64-byte input signatures n: the number of signatures to combine (at least 1) </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/secp256k1/include/secp256k1_schnorr.h" line="162" column="1" bodyfile="/home/dev/ds-160209/src/secp256k1/src/modules/schnorr/main_impl.h" bodystart="157" bodyend="162"/>
        <references refid="secp256k1_8c_1a6e1f88c6ce07376501097b42a2b40727" compoundref="secp256k1_8c" startline="23">ARG_CHECK</references>
        <referencedby refid="schnorr_2tests__impl_8h_1a7c79e0204a103b99844bdf1b2ac4cb57" compoundref="schnorr_2tests__impl_8h" startline="85" endline="144">test_schnorr_threshold</referencedby>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#ifndef<sp/>_SECP256K1_SCHNORR_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>define<sp/>_SECP256K1_SCHNORR_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>include<sp/>&quot;<ref refid="secp256k1_8h" kindref="compound">secp256k1.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;C&quot;</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"><ref refid="secp256k1_8h_1a3f1967acd0fe26283877c61b3f2694a5" kindref="member">SECP256K1_API</ref><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="secp256k1__schnorr_8h_1ab7e18ffba471cded051c249f5f8cab48" kindref="member">secp256k1_schnorr_sign</ref>(</highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structsecp256k1__context__struct" kindref="compound">secp256k1_context</ref>*<sp/>ctx,</highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*sig64,</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*msg32,</highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*seckey,</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><ref refid="secp256k1_8h_1a539882fd91bff672712fa19a4cfaeb98" kindref="member">secp256k1_nonce_function</ref><sp/>noncefp,</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*ndata</highlight></codeline>
<codeline lineno="34"><highlight class="normal">)<sp/><ref refid="secp256k1_8h_1a03c194d8fa91b9b66758b36c91e0b5cb" kindref="member">SECP256K1_ARG_NONNULL</ref>(1)<sp/><ref refid="secp256k1_8h_1a03c194d8fa91b9b66758b36c91e0b5cb" kindref="member">SECP256K1_ARG_NONNULL</ref>(2)<sp/><ref refid="secp256k1_8h_1a03c194d8fa91b9b66758b36c91e0b5cb" kindref="member">SECP256K1_ARG_NONNULL</ref>(3)<sp/><ref refid="secp256k1_8h_1a03c194d8fa91b9b66758b36c91e0b5cb" kindref="member">SECP256K1_ARG_NONNULL</ref>(4);</highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"><ref refid="secp256k1_8h_1a3f1967acd0fe26283877c61b3f2694a5" kindref="member">SECP256K1_API</ref><sp/><ref refid="secp256k1_8h_1aebd5ca8fbfcbb0ba0754a46115143c2c" kindref="member">SECP256K1_WARN_UNUSED_RESULT</ref><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="secp256k1__schnorr_8h_1ab9bcde80df113d29823401a460ea9bcc" kindref="member">secp256k1_schnorr_verify</ref>(</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/>const<sp/><ref refid="structsecp256k1__context__struct" kindref="compound">secp256k1_context</ref>*<sp/>ctx,</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/>const<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*sig64,</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/>const<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*msg32,</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/>const<sp/><ref refid="structsecp256k1__pubkey" kindref="compound">secp256k1_pubkey</ref><sp/>*pubkey</highlight></codeline>
<codeline lineno="49"><highlight class="normal">)<sp/>SECP256K1_ARG_NONNULL(1)<sp/>SECP256K1_ARG_NONNULL(2)<sp/>SECP256K1_ARG_NONNULL(3)<sp/>SECP256K1_ARG_NONNULL(4);</highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight></codeline>
<codeline lineno="64"><highlight class="normal"><ref refid="secp256k1_8h_1a3f1967acd0fe26283877c61b3f2694a5" kindref="member">SECP256K1_API</ref><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="secp256k1__schnorr_8h_1aa15ce0fb89d5eacfd2a11a88ee70636c" kindref="member">secp256k1_schnorr_recover</ref>(</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/>const<sp/><ref refid="structsecp256k1__context__struct" kindref="compound">secp256k1_context</ref>*<sp/>ctx,</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><ref refid="structsecp256k1__pubkey" kindref="compound">secp256k1_pubkey</ref><sp/>*pubkey,</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/>const<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*sig64,</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/>const<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*msg32</highlight></codeline>
<codeline lineno="69"><highlight class="normal">)<sp/>SECP256K1_ARG_NONNULL(1)<sp/>SECP256K1_ARG_NONNULL(2)<sp/>SECP256K1_ARG_NONNULL(3)<sp/>SECP256K1_ARG_NONNULL(4);</highlight></codeline>
<codeline lineno="70"><highlight class="normal"></highlight></codeline>
<codeline lineno="89"><highlight class="normal"><ref refid="secp256k1_8h_1a3f1967acd0fe26283877c61b3f2694a5" kindref="member">SECP256K1_API</ref><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="secp256k1__schnorr_8h_1a62dd4ce1d4843fe3a4d73ee44d142cb3" kindref="member">secp256k1_schnorr_generate_nonce_pair</ref>(</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/>const<sp/><ref refid="structsecp256k1__context__struct" kindref="compound">secp256k1_context</ref>*<sp/>ctx,</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><ref refid="structsecp256k1__pubkey" kindref="compound">secp256k1_pubkey</ref><sp/>*pubnonce,</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*privnonce32,</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/>const<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*msg32,</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/>const<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*sec32,</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><ref refid="secp256k1_8h_1a539882fd91bff672712fa19a4cfaeb98" kindref="member">secp256k1_nonce_function</ref><sp/>noncefp,</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/>const<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>noncedata</highlight></codeline>
<codeline lineno="97"><highlight class="normal">)<sp/>SECP256K1_ARG_NONNULL(1)<sp/>SECP256K1_ARG_NONNULL(2)<sp/>SECP256K1_ARG_NONNULL(3);</highlight></codeline>
<codeline lineno="98"><highlight class="normal"></highlight></codeline>
<codeline lineno="141"><highlight class="normal"><ref refid="secp256k1_8h_1a3f1967acd0fe26283877c61b3f2694a5" kindref="member">SECP256K1_API</ref><sp/><ref refid="secp256k1_8h_1aebd5ca8fbfcbb0ba0754a46115143c2c" kindref="member">SECP256K1_WARN_UNUSED_RESULT</ref><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="secp256k1__schnorr_8h_1a9887da00f1d053c0c86b865bad5b8d82" kindref="member">secp256k1_schnorr_partial_sign</ref>(</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/>const<sp/><ref refid="structsecp256k1__context__struct" kindref="compound">secp256k1_context</ref>*<sp/>ctx,</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*sig64,</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/>const<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*msg32,</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/>const<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*sec32,</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/>const<sp/><ref refid="structsecp256k1__pubkey" kindref="compound">secp256k1_pubkey</ref><sp/>*pubnonce_others,</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/>const<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*secnonce32</highlight></codeline>
<codeline lineno="148"><highlight class="normal">)<sp/>SECP256K1_ARG_NONNULL(1)<sp/>SECP256K1_ARG_NONNULL(2)<sp/>SECP256K1_ARG_NONNULL(3)<sp/>SECP256K1_ARG_NONNULL(4)<sp/>SECP256K1_ARG_NONNULL(5)<sp/>SECP256K1_ARG_NONNULL(6);</highlight></codeline>
<codeline lineno="149"><highlight class="normal"></highlight></codeline>
<codeline lineno="162"><highlight class="normal"><ref refid="secp256k1_8h_1a3f1967acd0fe26283877c61b3f2694a5" kindref="member">SECP256K1_API</ref><sp/><ref refid="secp256k1_8h_1aebd5ca8fbfcbb0ba0754a46115143c2c" kindref="member">SECP256K1_WARN_UNUSED_RESULT</ref><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="secp256k1__schnorr_8h_1a3e2e970becbc63f9d1cd0ef054488b58" kindref="member">secp256k1_schnorr_partial_combine</ref>(</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/>const<sp/><ref refid="structsecp256k1__context__struct" kindref="compound">secp256k1_context</ref>*<sp/>ctx,</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*sig64,</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/>const<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<sp/>const<sp/>*<sp/>sig64sin,</highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>n</highlight></codeline>
<codeline lineno="167"><highlight class="normal">)<sp/>SECP256K1_ARG_NONNULL(2)<sp/>SECP256K1_ARG_NONNULL(3);</highlight></codeline>
<codeline lineno="168"><highlight class="normal"></highlight></codeline>
<codeline lineno="169"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="170"><highlight class="normal">}</highlight></codeline>
<codeline lineno="171"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="172"><highlight class="normal"></highlight></codeline>
<codeline lineno="173"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
    </programlisting>
    <location file="/home/dev/ds-160209/src/secp256k1/include/secp256k1_schnorr.h"/>
  </compounddef>
</doxygen>
