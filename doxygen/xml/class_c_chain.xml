<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.9.1">
  <compounddef id="class_c_chain" kind="class" language="C++" prot="public">
    <compoundname>CChain</compoundname>
    <includes refid="chain_8h" local="no">chain.h</includes>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="class_c_chain_1adc8fa3eb698fb5985c7b39daf6bbf708" prot="private" static="no" mutable="no">
        <type>std::vector&lt; <ref refid="class_c_block_index" kindref="compound">CBlockIndex</ref> * &gt;</type>
        <definition>std::vector&lt;CBlockIndex*&gt; CChain::vChain</definition>
        <argsstring></argsstring>
        <name>vChain</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/chain.h" line="552" column="1" bodyfile="/home/dev/ds-160209/src/chain.h" bodystart="552" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="class_c_chain_1a1eee0372da596a8fc68369e480adc2f1" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_c_block_index" kindref="compound">CBlockIndex</ref> *</type>
        <definition>CBlockIndex* CChain::Genesis</definition>
        <argsstring>() const </argsstring>
        <name>Genesis</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns the index entry for the genesis block of this chain, or NULL if none. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/chain.h" line="556" column="1" bodyfile="/home/dev/ds-160209/src/chain.h" bodystart="556" bodyend="558"/>
      </memberdef>
      <memberdef kind="function" id="class_c_chain_1a7482d06d8e8143f46326cf9c12c06daf" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_c_block_index" kindref="compound">CBlockIndex</ref> *</type>
        <definition>CBlockIndex* CChain::Tip</definition>
        <argsstring>() const </argsstring>
        <name>Tip</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns the index entry for the tip of this chain, or NULL if none. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/chain.h" line="561" column="1" bodyfile="/home/dev/ds-160209/src/chain.h" bodystart="561" bodyend="563"/>
      </memberdef>
      <memberdef kind="function" id="class_c_chain_1affb24f7752a2b7e7df25db12b2a40e94" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_c_block_index" kindref="compound">CBlockIndex</ref> *</type>
        <definition>CBlockIndex* CChain::operator[]</definition>
        <argsstring>(int nHeight) const </argsstring>
        <name>operator[]</name>
        <param>
          <type>int</type>
          <declname>nHeight</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns the index entry at a particular height in this chain, or NULL if no such height exists. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/chain.h" line="566" column="1" bodyfile="/home/dev/ds-160209/src/chain.h" bodystart="566" bodyend="570"/>
        <references refid="class_c_block_index_1aebfc8d6b95852546760e742553d7bfd5" compoundref="chain_8h" startline="116">CBlockIndex::nHeight</references>
      </memberdef>
      <memberdef kind="function" id="class_c_chain_1a1ab1fe2932227af222699c64847e838b" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool CChain::Contains</definition>
        <argsstring>(const CBlockIndex *pindex) const </argsstring>
        <name>Contains</name>
        <param>
          <type>const <ref refid="class_c_block_index" kindref="compound">CBlockIndex</ref> *</type>
          <declname>pindex</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Efficiently check whether a block is present in this chain. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/chain.h" line="579" column="1" bodyfile="/home/dev/ds-160209/src/chain.h" bodystart="579" bodyend="581"/>
        <references refid="class_c_block_index_1aebfc8d6b95852546760e742553d7bfd5" compoundref="chain_8h" startline="116">CBlockIndex::nHeight</references>
      </memberdef>
      <memberdef kind="function" id="class_c_chain_1acd3c27582e3d60b93363fda5d9f3775a" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_c_block_index" kindref="compound">CBlockIndex</ref> *</type>
        <definition>CBlockIndex* CChain::Next</definition>
        <argsstring>(const CBlockIndex *pindex) const </argsstring>
        <name>Next</name>
        <param>
          <type>const <ref refid="class_c_block_index" kindref="compound">CBlockIndex</ref> *</type>
          <declname>pindex</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Find the successor of a block in this chain, or NULL if the given index is not found or is the tip. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/chain.h" line="584" column="1" bodyfile="/home/dev/ds-160209/src/chain.h" bodystart="584" bodyend="589"/>
        <references refid="class_c_block_index_1aebfc8d6b95852546760e742553d7bfd5" compoundref="chain_8h" startline="116">CBlockIndex::nHeight</references>
      </memberdef>
      <memberdef kind="function" id="class_c_chain_1a0c4ffb8501acfb8a7e1c0f5e6322ada3" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>int CChain::Height</definition>
        <argsstring>() const </argsstring>
        <name>Height</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Return the maximal height in the chain. Is equal to chain.Tip() ? chain.Tip()-&gt;nHeight : -1. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/chain.h" line="592" column="1" bodyfile="/home/dev/ds-160209/src/chain.h" bodystart="592" bodyend="594"/>
      </memberdef>
      <memberdef kind="function" id="class_c_chain_1aeb563751f7362d4308c7c2cb35b834a5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void CChain::SetTip</definition>
        <argsstring>(CBlockIndex *pindex)</argsstring>
        <name>SetTip</name>
        <param>
          <type><ref refid="class_c_block_index" kindref="compound">CBlockIndex</ref> *</type>
          <declname>pindex</declname>
        </param>
        <briefdescription>
<para><ref refid="class_c_chain" kindref="compound">CChain</ref> implementation. </para>        </briefdescription>
        <detaileddescription>
<para>Set/initialize a chain with a given tip. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/chain.h" line="597" column="1" bodyfile="/home/dev/ds-160209/src/chain.cpp" bodystart="627" bodyend="637"/>
        <references refid="class_c_block_index_1aebfc8d6b95852546760e742553d7bfd5" compoundref="chain_8h" startline="116">CBlockIndex::nHeight</references>
        <references refid="class_c_block_index_1a1ef11137155df1dd5c81491630cece39" compoundref="chain_8h" startline="111">CBlockIndex::pprev</references>
      </memberdef>
      <memberdef kind="function" id="class_c_chain_1a3f7e9ed312ad1cadd266a9529586ade6" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="class_c_block_locator" kindref="compound">CBlockLocator</ref></type>
        <definition>CBlockLocator CChain::GetLocator</definition>
        <argsstring>(const CBlockIndex *pindex=NULL) const </argsstring>
        <name>GetLocator</name>
        <param>
          <type>const <ref refid="class_c_block_index" kindref="compound">CBlockIndex</ref> *</type>
          <declname>pindex</declname>
          <defval>NULL</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Return a <ref refid="class_c_block_locator" kindref="compound">CBlockLocator</ref> that refers to a block in this chain (by default the tip). </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/chain.h" line="600" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_c_chain_1a14bcab78e65bb934ab148402f3190c86" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="class_c_block_index" kindref="compound">CBlockIndex</ref> *</type>
        <definition>const CBlockIndex* CChain::FindFork</definition>
        <argsstring>(const CBlockIndex *pindex) const </argsstring>
        <name>FindFork</name>
        <param>
          <type>const <ref refid="class_c_block_index" kindref="compound">CBlockIndex</ref> *</type>
          <declname>pindex</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Find the last common block between this chain and a block index entry. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/chain.h" line="603" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="friend">
      <memberdef kind="friend" id="class_c_chain_1a0e46ed4192afeafb8d420b2d6d9bb24c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>friend bool</type>
        <definition>bool operator==</definition>
        <argsstring>(const CChain &amp;a, const CChain &amp;b)</argsstring>
        <name>operator==</name>
        <param>
          <type>const <ref refid="class_c_chain" kindref="compound">CChain</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="class_c_chain" kindref="compound">CChain</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Compare two chains efficiently. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/chain.h" line="573" column="1" bodyfile="/home/dev/ds-160209/src/chain.h" bodystart="573" bodyend="576"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>An in-memory indexed chain of blocks. </para>    </detaileddescription>
    <location file="/home/dev/ds-160209/src/chain.h" line="550" column="1" bodyfile="/home/dev/ds-160209/src/chain.h" bodystart="550" bodyend="604"/>
    <listofallmembers>
      <member refid="class_c_chain_1a1ab1fe2932227af222699c64847e838b" prot="public" virt="non-virtual"><scope>CChain</scope><name>Contains</name></member>
      <member refid="class_c_chain_1a14bcab78e65bb934ab148402f3190c86" prot="public" virt="non-virtual"><scope>CChain</scope><name>FindFork</name></member>
      <member refid="class_c_chain_1a1eee0372da596a8fc68369e480adc2f1" prot="public" virt="non-virtual"><scope>CChain</scope><name>Genesis</name></member>
      <member refid="class_c_chain_1a3f7e9ed312ad1cadd266a9529586ade6" prot="public" virt="non-virtual"><scope>CChain</scope><name>GetLocator</name></member>
      <member refid="class_c_chain_1a0c4ffb8501acfb8a7e1c0f5e6322ada3" prot="public" virt="non-virtual"><scope>CChain</scope><name>Height</name></member>
      <member refid="class_c_chain_1acd3c27582e3d60b93363fda5d9f3775a" prot="public" virt="non-virtual"><scope>CChain</scope><name>Next</name></member>
      <member refid="class_c_chain_1a0e46ed4192afeafb8d420b2d6d9bb24c" prot="public" virt="non-virtual"><scope>CChain</scope><name>operator==</name></member>
      <member refid="class_c_chain_1affb24f7752a2b7e7df25db12b2a40e94" prot="public" virt="non-virtual"><scope>CChain</scope><name>operator[]</name></member>
      <member refid="class_c_chain_1aeb563751f7362d4308c7c2cb35b834a5" prot="public" virt="non-virtual"><scope>CChain</scope><name>SetTip</name></member>
      <member refid="class_c_chain_1a7482d06d8e8143f46326cf9c12c06daf" prot="public" virt="non-virtual"><scope>CChain</scope><name>Tip</name></member>
      <member refid="class_c_chain_1adc8fa3eb698fb5985c7b39daf6bbf708" prot="private" virt="non-virtual"><scope>CChain</scope><name>vChain</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
