<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.9.1">
  <compounddef id="testrand__impl_8h" kind="file" language="C++">
    <compoundname>testrand_impl.h</compoundname>
    <includes refid="stdint_8h" local="no">stdint.h</includes>
    <includes local="no">string.h</includes>
    <includes refid="testrand_8h" local="yes">testrand.h</includes>
    <includes refid="secp256k1_2src_2hash_8h" local="yes">hash.h</includes>
    <includedby refid="tests_8c" local="yes">/home/dev/ds-160209/src/secp256k1/src/tests.c</includedby>
    <incdepgraph>
      <node id="22693">
        <label>/home/dev/ds-160209/src/secp256k1/src/testrand_impl.h</label>
        <link refid="testrand_impl.h"/>
        <childnode refid="22694" relation="include">
        </childnode>
        <childnode refid="22695" relation="include">
        </childnode>
        <childnode refid="22696" relation="include">
        </childnode>
        <childnode refid="22697" relation="include">
        </childnode>
      </node>
      <node id="22698">
        <label>stdlib.h</label>
      </node>
      <node id="22695">
        <label>string.h</label>
      </node>
      <node id="22697">
        <label>hash.h</label>
        <link refid="secp256k1_2src_2hash_8h"/>
        <childnode refid="22698" relation="include">
        </childnode>
        <childnode refid="22694" relation="include">
        </childnode>
      </node>
      <node id="22694">
        <label>stdint.h</label>
        <link refid="stdint_8h"/>
      </node>
      <node id="22696">
        <label>testrand.h</label>
        <link refid="testrand_8h"/>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="22699">
        <label>/home/dev/ds-160209/src/secp256k1/src/testrand_impl.h</label>
        <link refid="testrand_impl.h"/>
        <childnode refid="22700" relation="include">
        </childnode>
      </node>
      <node id="22700">
        <label>/home/dev/ds-160209/src/secp256k1/src/tests.c</label>
        <link refid="tests_8c"/>
      </node>
    </invincdepgraph>
      <sectiondef kind="var">
      <memberdef kind="variable" id="testrand__impl_8h_1a75953605e9245c9cfa4979d656e11974" prot="public" static="yes" mutable="no">
        <type><ref refid="structsecp256k1__rfc6979__hmac__sha256__t" kindref="compound">secp256k1_rfc6979_hmac_sha256_t</ref></type>
        <definition>secp256k1_rfc6979_hmac_sha256_t secp256k1_test_rng</definition>
        <argsstring></argsstring>
        <name>secp256k1_test_rng</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/secp256k1/src/testrand_impl.h" line="16" column="1" bodyfile="/home/dev/ds-160209/src/secp256k1/src/testrand_impl.h" bodystart="16" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="testrand__impl_8h_1a01c6426dc7a1c6e3024765ebf543b503" prot="public" static="yes" mutable="no">
        <type><ref refid="stdint_8h_1a435d1572bf3f880d55459d9805097f62" kindref="member">uint32_t</ref></type>
        <definition>uint32_t secp256k1_test_rng_precomputed[8]</definition>
        <argsstring>[8]</argsstring>
        <name>secp256k1_test_rng_precomputed</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/secp256k1/src/testrand_impl.h" line="17" column="1" bodyfile="/home/dev/ds-160209/src/secp256k1/src/testrand_impl.h" bodystart="17" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="testrand__impl_8h_1a7d4bff66d69d9d6d998ea1221c2a5c8f" prot="public" static="yes" mutable="no">
        <type>int</type>
        <definition>int secp256k1_test_rng_precomputed_used</definition>
        <argsstring></argsstring>
        <name>secp256k1_test_rng_precomputed_used</name>
        <initializer>= 8</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/secp256k1/src/testrand_impl.h" line="18" column="1" bodyfile="/home/dev/ds-160209/src/secp256k1/src/testrand_impl.h" bodystart="18" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="testrand__impl_8h_1addbcc9384fcfdbc8b20747c1d568faa0" prot="public" static="yes" mutable="no">
        <type><ref refid="stdint_8h_1aaa5d1cd013383c889537491c3cfd9aad" kindref="member">uint64_t</ref></type>
        <definition>uint64_t secp256k1_test_rng_integer</definition>
        <argsstring></argsstring>
        <name>secp256k1_test_rng_integer</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/secp256k1/src/testrand_impl.h" line="19" column="1" bodyfile="/home/dev/ds-160209/src/secp256k1/src/testrand_impl.h" bodystart="19" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="testrand__impl_8h_1a02d548f05b0fdc33cf1ad06856908fe2" prot="public" static="yes" mutable="no">
        <type>int</type>
        <definition>int secp256k1_test_rng_integer_bits_left</definition>
        <argsstring></argsstring>
        <name>secp256k1_test_rng_integer_bits_left</name>
        <initializer>= 0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/secp256k1/src/testrand_impl.h" line="20" column="1" bodyfile="/home/dev/ds-160209/src/secp256k1/src/testrand_impl.h" bodystart="20" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="testrand__impl_8h_1a5e49c3d0caa741c53ea23b4b0a6b0202" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="secp256k1_8h_1a7ddc487fd46aee88f21cabedb7268b1e" kindref="member">SECP256K1_INLINE</ref> void</type>
        <definition>static SECP256K1_INLINE void secp256k1_rand_seed</definition>
        <argsstring>(const unsigned char *seed16)</argsstring>
        <name>secp256k1_rand_seed</name>
        <param>
          <type>const unsigned char *</type>
          <declname>seed16</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/secp256k1/src/testrand_impl.h" line="22" column="1" bodyfile="/home/dev/ds-160209/src/secp256k1/src/testrand_impl.h" bodystart="22" bodyend="24"/>
      </memberdef>
      <memberdef kind="function" id="testrand__impl_8h_1afcae276b983a14e4d69501fce31c96af" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="secp256k1_8h_1a7ddc487fd46aee88f21cabedb7268b1e" kindref="member">SECP256K1_INLINE</ref> <ref refid="stdint_8h_1a435d1572bf3f880d55459d9805097f62" kindref="member">uint32_t</ref></type>
        <definition>static SECP256K1_INLINE uint32_t secp256k1_rand32</definition>
        <argsstring>(void)</argsstring>
        <name>secp256k1_rand32</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/secp256k1/src/testrand_impl.h" line="26" column="1" bodyfile="/home/dev/ds-160209/src/secp256k1/src/testrand_impl.h" bodystart="26" bodyend="32"/>
      </memberdef>
      <memberdef kind="function" id="testrand__impl_8h_1a70a3e97a30b94a77f4a59807ba01e6ba" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="stdint_8h_1a435d1572bf3f880d55459d9805097f62" kindref="member">uint32_t</ref></type>
        <definition>static uint32_t secp256k1_rand_bits</definition>
        <argsstring>(int bits)</argsstring>
        <name>secp256k1_rand_bits</name>
        <param>
          <type>int</type>
          <declname>bits</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/secp256k1/src/testrand_impl.h" line="34" column="1" bodyfile="/home/dev/ds-160209/src/secp256k1/src/testrand_impl.h" bodystart="34" bodyend="45"/>
      </memberdef>
      <memberdef kind="function" id="testrand__impl_8h_1a2e2064cdf87588f68f4ba3131f5d9353" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="stdint_8h_1a435d1572bf3f880d55459d9805097f62" kindref="member">uint32_t</ref></type>
        <definition>static uint32_t secp256k1_rand_int</definition>
        <argsstring>(uint32_t range)</argsstring>
        <name>secp256k1_rand_int</name>
        <param>
          <type><ref refid="stdint_8h_1a435d1572bf3f880d55459d9805097f62" kindref="member">uint32_t</ref></type>
          <declname>range</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/secp256k1/src/testrand_impl.h" line="47" column="1" bodyfile="/home/dev/ds-160209/src/secp256k1/src/testrand_impl.h" bodystart="47" bodyend="84"/>
      </memberdef>
      <memberdef kind="function" id="testrand__impl_8h_1ac6eab6443f98bba198f7df69e658173c" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void secp256k1_rand256</definition>
        <argsstring>(unsigned char *b32)</argsstring>
        <name>secp256k1_rand256</name>
        <param>
          <type>unsigned char *</type>
          <declname>b32</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/secp256k1/src/testrand_impl.h" line="86" column="1" bodyfile="/home/dev/ds-160209/src/secp256k1/src/testrand_impl.h" bodystart="86" bodyend="88"/>
      </memberdef>
      <memberdef kind="function" id="testrand__impl_8h_1adf2bb4432b8c3b238d83297c067b41aa" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void secp256k1_rand_bytes_test</definition>
        <argsstring>(unsigned char *bytes, size_t len)</argsstring>
        <name>secp256k1_rand_bytes_test</name>
        <param>
          <type>unsigned char *</type>
          <declname>bytes</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>len</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/secp256k1/src/testrand_impl.h" line="90" column="1" bodyfile="/home/dev/ds-160209/src/secp256k1/src/testrand_impl.h" bodystart="90" bodyend="104"/>
      </memberdef>
      <memberdef kind="function" id="testrand__impl_8h_1ac7dd7cc19d5d0ae9b50791656b57af7b" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void secp256k1_rand256_test</definition>
        <argsstring>(unsigned char *b32)</argsstring>
        <name>secp256k1_rand256_test</name>
        <param>
          <type>unsigned char *</type>
          <declname>b32</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/secp256k1/src/testrand_impl.h" line="106" column="1" bodyfile="/home/dev/ds-160209/src/secp256k1/src/testrand_impl.h" bodystart="106" bodyend="108"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/**********************************************************************</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/>*<sp/>Copyright<sp/>(c)<sp/>2013-2016<sp/>Pieter<sp/>Wuille<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*<sp/>Distributed<sp/>under<sp/>the<sp/>MIT<sp/>software<sp/>license,<sp/>see<sp/>the<sp/>accompanying<sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*<sp/>file<sp/>COPYING<sp/>or<sp/>http://www.opensource.org/licenses/mit-license.php.*</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/>**********************************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>_SECP256K1_TESTRAND_IMPL_H_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>_SECP256K1_TESTRAND_IMPL_H_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="stdint_8h" kindref="compound">stdint.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;string.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="testrand_8h" kindref="compound">testrand.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="secp256k1_2src_2hash_8h" kindref="compound">hash.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="structsecp256k1__rfc6979__hmac__sha256__t" kindref="compound">secp256k1_rfc6979_hmac_sha256_t</ref><sp/>secp256k1_test_rng;</highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="stdint_8h_1a435d1572bf3f880d55459d9805097f62" kindref="member">uint32_t</ref><sp/>secp256k1_test_rng_precomputed[8];</highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>secp256k1_test_rng_precomputed_used<sp/>=<sp/>8;</highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="stdint_8h_1aaa5d1cd013383c889537491c3cfd9aad" kindref="member">uint64_t</ref><sp/>secp256k1_test_rng_integer;</highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>secp256k1_test_rng_integer_bits_left<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"><ref refid="secp256k1_8h_1a7ddc487fd46aee88f21cabedb7268b1e" kindref="member">SECP256K1_INLINE</ref><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>secp256k1_rand_seed(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*seed16)<sp/>{</highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/><sp/><sp/>secp256k1_rfc6979_hmac_sha256_initialize(&amp;secp256k1_test_rng,<sp/>seed16,<sp/>16);</highlight></codeline>
<codeline lineno="24"><highlight class="normal">}</highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"><ref refid="secp256k1_8h_1a7ddc487fd46aee88f21cabedb7268b1e" kindref="member">SECP256K1_INLINE</ref><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="stdint_8h_1a435d1572bf3f880d55459d9805097f62" kindref="member">uint32_t</ref><sp/>secp256k1_rand32(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(secp256k1_test_rng_precomputed_used<sp/>==<sp/>8)<sp/>{</highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>secp256k1_rfc6979_hmac_sha256_generate(&amp;secp256k1_test_rng,<sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*)(&amp;secp256k1_test_rng_precomputed[0]),<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(secp256k1_test_rng_precomputed));</highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>secp256k1_test_rng_precomputed_used<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>secp256k1_test_rng_precomputed[secp256k1_test_rng_precomputed_used++];</highlight></codeline>
<codeline lineno="32"><highlight class="normal">}</highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="stdint_8h_1a435d1572bf3f880d55459d9805097f62" kindref="member">uint32_t</ref><sp/>secp256k1_rand_bits(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>bits)<sp/>{</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="stdint_8h_1a435d1572bf3f880d55459d9805097f62" kindref="member">uint32_t</ref><sp/>ret;</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(secp256k1_test_rng_integer_bits_left<sp/>&lt;<sp/>bits)<sp/>{</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>secp256k1_test_rng_integer<sp/>|=<sp/>(((<ref refid="stdint_8h_1aaa5d1cd013383c889537491c3cfd9aad" kindref="member">uint64_t</ref>)secp256k1_rand32())<sp/>&lt;&lt;<sp/>secp256k1_test_rng_integer_bits_left);</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>secp256k1_test_rng_integer_bits_left<sp/>+=<sp/>32;</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/>ret<sp/>=<sp/>secp256k1_test_rng_integer;</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/>secp256k1_test_rng_integer<sp/>&gt;&gt;=<sp/>bits;</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/>secp256k1_test_rng_integer_bits_left<sp/>-=<sp/>bits;</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/>ret<sp/>&amp;=<sp/>((~((<ref refid="stdint_8h_1a435d1572bf3f880d55459d9805097f62" kindref="member">uint32_t</ref>)0))<sp/>&gt;&gt;<sp/>(32<sp/>-<sp/>bits));</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ret;</highlight></codeline>
<codeline lineno="45"><highlight class="normal">}</highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="stdint_8h_1a435d1572bf3f880d55459d9805097f62" kindref="member">uint32_t</ref><sp/>secp256k1_rand_int(<ref refid="stdint_8h_1a435d1572bf3f880d55459d9805097f62" kindref="member">uint32_t</ref><sp/>range)<sp/>{</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>We<sp/>want<sp/>a<sp/>uniform<sp/>integer<sp/>between<sp/>0<sp/>and<sp/>range-1,<sp/>inclusive.</highlight></codeline>
<codeline lineno="49"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>B<sp/>is<sp/>the<sp/>smallest<sp/>number<sp/>such<sp/>that<sp/>range<sp/>&lt;=<sp/>2**B.</highlight></codeline>
<codeline lineno="50"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>two<sp/>mechanisms<sp/>implemented<sp/>here:</highlight></codeline>
<codeline lineno="51"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>-<sp/>generate<sp/>B<sp/>bits<sp/>numbers<sp/>until<sp/>one<sp/>below<sp/>range<sp/>is<sp/>found,<sp/>and<sp/>return<sp/>it</highlight></codeline>
<codeline lineno="52"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>-<sp/>find<sp/>the<sp/>largest<sp/>multiple<sp/>M<sp/>of<sp/>range<sp/>that<sp/>is<sp/>&lt;=<sp/>2**(B+A),<sp/>generate<sp/>B+A</highlight></codeline>
<codeline lineno="53"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/><sp/><sp/>bits<sp/>numbers<sp/>until<sp/>one<sp/>below<sp/>M<sp/>is<sp/>found,<sp/>and<sp/>return<sp/>it<sp/>modulo<sp/>range</highlight></codeline>
<codeline lineno="54"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>The<sp/>second<sp/>mechanism<sp/>consumes<sp/>A<sp/>more<sp/>bits<sp/>of<sp/>entropy<sp/>in<sp/>every<sp/>iteration,</highlight></codeline>
<codeline lineno="55"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>but<sp/>may<sp/>need<sp/>fewer<sp/>iterations<sp/>due<sp/>to<sp/>M<sp/>being<sp/>closer<sp/>to<sp/>2**(B+A)<sp/>then</highlight></codeline>
<codeline lineno="56"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>range<sp/>is<sp/>to<sp/>2**B.<sp/>The<sp/>array<sp/>below<sp/>(indexed<sp/>by<sp/>B)<sp/>contains<sp/>a<sp/>0<sp/>when<sp/>the</highlight></codeline>
<codeline lineno="57"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>first<sp/>mechanism<sp/>is<sp/>to<sp/>be<sp/>used,<sp/>and<sp/>the<sp/>number<sp/>A<sp/>otherwise.</highlight></codeline>
<codeline lineno="58"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>addbits[]<sp/>=<sp/>{0,<sp/>0,<sp/>0,<sp/>0,<sp/>0,<sp/>0,<sp/>0,<sp/>0,<sp/>0,<sp/>1,<sp/>2,<sp/>2,<sp/>2,<sp/>2,<sp/>2,<sp/>2,<sp/>2,<sp/>2,<sp/>2,<sp/>3,<sp/>3,<sp/>3,<sp/>3,<sp/>3,<sp/>3,<sp/>3,<sp/>3,<sp/>3,<sp/>3,<sp/>3,<sp/>2,<sp/>1,<sp/>0};</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="stdint_8h_1a435d1572bf3f880d55459d9805097f62" kindref="member">uint32_t</ref><sp/>trange,<sp/>mult;</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>bits<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(range<sp/>&lt;=<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/>trange<sp/>=<sp/>range<sp/>-<sp/>1;</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(trange<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>trange<sp/>&gt;&gt;=<sp/>1;</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bits++;</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(addbits[bits])<sp/>{</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bits<sp/>=<sp/>bits<sp/>+<sp/>addbits[bits];</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mult<sp/>=<sp/>((~((<ref refid="stdint_8h_1a435d1572bf3f880d55459d9805097f62" kindref="member">uint32_t</ref>)0))<sp/>&gt;&gt;<sp/>(32<sp/>-<sp/>bits))<sp/>/<sp/>range;</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>trange<sp/>=<sp/>range<sp/>*<sp/>mult;</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>trange<sp/>=<sp/>range;</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mult<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(1)<sp/>{</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stdint_8h_1a435d1572bf3f880d55459d9805097f62" kindref="member">uint32_t</ref><sp/>x<sp/>=<sp/>secp256k1_rand_bits(bits);</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(x<sp/>&lt;<sp/>trange)<sp/>{</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(mult<sp/>==<sp/>1)<sp/>?<sp/>x<sp/>:<sp/>(x<sp/>%<sp/>range);</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="84"><highlight class="normal">}</highlight></codeline>
<codeline lineno="85"><highlight class="normal"></highlight></codeline>
<codeline lineno="86"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>secp256k1_rand256(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*b32)<sp/>{</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/>secp256k1_rfc6979_hmac_sha256_generate(&amp;secp256k1_test_rng,<sp/>b32,<sp/>32);</highlight></codeline>
<codeline lineno="88"><highlight class="normal">}</highlight></codeline>
<codeline lineno="89"><highlight class="normal"></highlight></codeline>
<codeline lineno="90"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>secp256k1_rand_bytes_test(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*bytes,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>len)<sp/>{</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>bits<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/>memset(bytes,<sp/>0,<sp/>len);</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(bits<sp/>&lt;<sp/>len<sp/>*<sp/>8)<sp/>{</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>now;</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stdint_8h_1a435d1572bf3f880d55459d9805097f62" kindref="member">uint32_t</ref><sp/>val;</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>now<sp/>=<sp/>1<sp/>+<sp/>(secp256k1_rand_bits(6)<sp/>*<sp/>secp256k1_rand_bits(5)<sp/>+<sp/>16)<sp/>/<sp/>31;</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>val<sp/>=<sp/>secp256k1_rand_bits(1);</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(now<sp/>&gt;<sp/>0<sp/>&amp;&amp;<sp/>bits<sp/>&lt;<sp/>len<sp/>*<sp/>8)<sp/>{</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bytes[bits<sp/>/<sp/>8]<sp/>|=<sp/>val<sp/>&lt;&lt;<sp/>(bits<sp/>%<sp/>8);</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>now--;</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bits++;</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="104"><highlight class="normal">}</highlight></codeline>
<codeline lineno="105"><highlight class="normal"></highlight></codeline>
<codeline lineno="106"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>secp256k1_rand256_test(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*b32)<sp/>{</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/>secp256k1_rand_bytes_test(b32,<sp/>32);</highlight></codeline>
<codeline lineno="108"><highlight class="normal">}</highlight></codeline>
<codeline lineno="109"><highlight class="normal"></highlight></codeline>
<codeline lineno="110"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
    </programlisting>
    <location file="/home/dev/ds-160209/src/secp256k1/src/testrand_impl.h"/>
  </compounddef>
</doxygen>
