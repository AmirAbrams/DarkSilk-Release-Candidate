<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.9.1">
  <compounddef id="addrman_8cpp" kind="file" language="C++">
    <compoundname>addrman.cpp</compoundname>
    <includes refid="addrman_8h" local="yes">addrman.h</includes>
    <includes refid="hash_8h" local="yes">hash.h</includes>
    <includes refid="streams_8h" local="yes">streams.h</includes>
    <incdepgraph>
      <node id="29794">
        <label>list</label>
      </node>
      <node id="29758">
        <label>boost/thread/mutex.hpp</label>
      </node>
      <node id="29769">
        <label>netinet/in.h</label>
      </node>
      <node id="29793">
        <label>amount.h</label>
        <link refid="amount_8h"/>
        <childnode refid="29744" relation="include">
        </childnode>
        <childnode refid="29756" relation="include">
        </childnode>
        <childnode refid="29742" relation="include">
        </childnode>
      </node>
      <node id="29770">
        <label>arpa/inet.h</label>
      </node>
      <node id="29783">
        <label>boost/thread/condition_variable.hpp</label>
      </node>
      <node id="29748">
        <label>limits</label>
      </node>
      <node id="29810">
        <label>crypto/sha256.h</label>
        <link refid="sha256_8h"/>
        <childnode refid="29749" relation="include">
        </childnode>
        <childnode refid="29756" relation="include">
        </childnode>
      </node>
      <node id="29811">
        <label>crypto/argon2/blake2/blake2.h</label>
        <link refid="blake2_8h"/>
        <childnode refid="29812" relation="include">
        </childnode>
        <childnode refid="29749" relation="include">
        </childnode>
        <childnode refid="29760" relation="include">
        </childnode>
      </node>
      <node id="29805">
        <label>openssl/rand.h</label>
      </node>
      <node id="29778">
        <label>assert.h</label>
      </node>
      <node id="29753">
        <label>boost/tuple/tuple.hpp</label>
      </node>
      <node id="29768">
        <label>net/if.h</label>
      </node>
      <node id="29785">
        <label>boost/thread/recursive_mutex.hpp</label>
      </node>
      <node id="29762">
        <label>version.h</label>
        <link refid="version_8h"/>
        <childnode refid="29763" relation="include">
        </childnode>
        <childnode refid="29742" relation="include">
        </childnode>
      </node>
      <node id="29759">
        <label>sys/mman.h</label>
      </node>
      <node id="29756">
        <label>stdlib.h</label>
      </node>
      <node id="29804">
        <label>openssl/crypto.h</label>
      </node>
      <node id="29764">
        <label>compat.h</label>
        <link refid="compat_8h"/>
        <childnode refid="29765" relation="include">
        </childnode>
        <childnode refid="29759" relation="include">
        </childnode>
        <childnode refid="29766" relation="include">
        </childnode>
        <childnode refid="29767" relation="include">
        </childnode>
        <childnode refid="29768" relation="include">
        </childnode>
        <childnode refid="29769" relation="include">
        </childnode>
        <childnode refid="29770" relation="include">
        </childnode>
        <childnode refid="29771" relation="include">
        </childnode>
        <childnode refid="29760" relation="include">
        </childnode>
        <childnode refid="29772" relation="include">
        </childnode>
        <childnode refid="29761" relation="include">
        </childnode>
        <childnode refid="29773" relation="include">
        </childnode>
      </node>
      <node id="29800">
        <label>boost/date_time/posix_time/posix_time_types.hpp</label>
      </node>
      <node id="29807">
        <label>openssl/sha.h</label>
      </node>
      <node id="29773">
        <label>errno.h</label>
      </node>
      <node id="29747">
        <label>cassert</label>
      </node>
      <node id="29779">
        <label>stdexcept</label>
      </node>
      <node id="29787">
        <label>util.h</label>
        <link refid="util_8h"/>
        <childnode refid="29767" relation="include">
        </childnode>
        <childnode refid="29788" relation="include">
        </childnode>
        <childnode refid="29789" relation="include">
        </childnode>
        <childnode refid="29744" relation="include">
        </childnode>
        <childnode refid="29790" relation="include">
        </childnode>
        <childnode refid="29793" relation="include">
        </childnode>
        <childnode refid="29745" relation="include">
        </childnode>
        <childnode refid="29794" relation="include">
        </childnode>
        <childnode refid="29795" relation="include">
        </childnode>
        <childnode refid="29743" relation="include">
        </childnode>
        <childnode refid="29742" relation="include">
        </childnode>
        <childnode refid="29796" relation="include">
        </childnode>
        <childnode refid="29797" relation="include">
        </childnode>
        <childnode refid="29798" relation="include">
        </childnode>
        <childnode refid="29799" relation="include">
        </childnode>
        <childnode refid="29800" relation="include">
        </childnode>
        <childnode refid="29801" relation="include">
        </childnode>
        <childnode refid="29802" relation="include">
        </childnode>
        <childnode refid="29803" relation="include">
        </childnode>
        <childnode refid="29804" relation="include">
        </childnode>
        <childnode refid="29805" relation="include">
        </childnode>
        <childnode refid="29780" relation="include">
        </childnode>
        <childnode refid="29749" relation="include">
        </childnode>
      </node>
      <node id="29774">
        <label>protocol.h</label>
        <link refid="protocol_8h"/>
        <childnode refid="29775" relation="include">
        </childnode>
        <childnode refid="29744" relation="include">
        </childnode>
        <childnode refid="29741" relation="include">
        </childnode>
        <childnode refid="29749" relation="include">
        </childnode>
        <childnode refid="29742" relation="include">
        </childnode>
      </node>
      <node id="29799">
        <label>boost/date_time/gregorian/gregorian_types.hpp</label>
      </node>
      <node id="29742">
        <label>string</label>
      </node>
      <node id="29745">
        <label>map</label>
      </node>
      <node id="29796">
        <label>boost/thread.hpp</label>
      </node>
      <node id="29740">
        <label>addrman.h</label>
        <link refid="addrman_8h"/>
        <childnode refid="29741" relation="include">
        </childnode>
        <childnode refid="29774" relation="include">
        </childnode>
        <childnode refid="29781" relation="include">
        </childnode>
        <childnode refid="29786" relation="include">
        </childnode>
        <childnode refid="29787" relation="include">
        </childnode>
        <childnode refid="29745" relation="include">
        </childnode>
        <childnode refid="29743" relation="include">
        </childnode>
      </node>
      <node id="29812">
        <label>stddef.h</label>
      </node>
      <node id="29739">
        <label>/home/dev/ds-160209/src/addrman.cpp</label>
        <link refid="addrman.cpp"/>
        <childnode refid="29740" relation="include">
        </childnode>
        <childnode refid="29806" relation="include">
        </childnode>
        <childnode refid="29814" relation="include">
        </childnode>
      </node>
      <node id="29772">
        <label>netdb.h</label>
      </node>
      <node id="29765">
        <label>sys/fcntl.h</label>
      </node>
      <node id="29744">
        <label>serialize.h</label>
        <link refid="serialize_8h"/>
        <childnode refid="29742" relation="include">
        </childnode>
        <childnode refid="29743" relation="include">
        </childnode>
        <childnode refid="29745" relation="include">
        </childnode>
        <childnode refid="29746" relation="include">
        </childnode>
        <childnode refid="29747" relation="include">
        </childnode>
        <childnode refid="29748" relation="include">
        </childnode>
        <childnode refid="29749" relation="include">
        </childnode>
        <childnode refid="29750" relation="include">
        </childnode>
        <childnode refid="29751" relation="include">
        </childnode>
        <childnode refid="29752" relation="include">
        </childnode>
        <childnode refid="29753" relation="include">
        </childnode>
        <childnode refid="29754" relation="include">
        </childnode>
        <childnode refid="29762" relation="include">
        </childnode>
      </node>
      <node id="29760">
        <label>limits.h</label>
      </node>
      <node id="29782">
        <label>threadsafety.h</label>
        <link refid="threadsafety_8h"/>
      </node>
      <node id="29789">
        <label>sys/resource.h</label>
      </node>
      <node id="29801">
        <label>openssl/bio.h</label>
      </node>
      <node id="29741">
        <label>netbase.h</label>
        <link refid="netbase_8h"/>
        <childnode refid="29742" relation="include">
        </childnode>
        <childnode refid="29743" relation="include">
        </childnode>
        <childnode refid="29744" relation="include">
        </childnode>
        <childnode refid="29764" relation="include">
        </childnode>
      </node>
      <node id="29806">
        <label>hash.h</label>
        <link refid="hash_8h"/>
        <childnode refid="29777" relation="include">
        </childnode>
        <childnode refid="29744" relation="include">
        </childnode>
        <childnode refid="29807" relation="include">
        </childnode>
        <childnode refid="29808" relation="include">
        </childnode>
        <childnode refid="29809" relation="include">
        </childnode>
        <childnode refid="29810" relation="include">
        </childnode>
        <childnode refid="29811" relation="include">
        </childnode>
        <childnode refid="29813" relation="include">
        </childnode>
        <childnode refid="29743" relation="include">
        </childnode>
      </node>
      <node id="29771">
        <label>ifaddrs.h</label>
      </node>
      <node id="29767">
        <label>sys/types.h</label>
      </node>
      <node id="29816">
        <label>ios</label>
      </node>
      <node id="29757">
        <label>string.h</label>
      </node>
      <node id="29763">
        <label>clientversion.h</label>
        <link refid="clientversion_8h"/>
      </node>
      <node id="29751">
        <label>cstdio</label>
      </node>
      <node id="29784">
        <label>boost/thread/locks.hpp</label>
      </node>
      <node id="29803">
        <label>openssl/buffer.h</label>
      </node>
      <node id="29752">
        <label>boost/type_traits/is_fundamental.hpp</label>
      </node>
      <node id="29798">
        <label>boost/filesystem/path.hpp</label>
      </node>
      <node id="29761">
        <label>unistd.h</label>
      </node>
      <node id="29743">
        <label>vector</label>
      </node>
      <node id="29776">
        <label>bignum.h</label>
        <link refid="bignum_8h"/>
        <childnode refid="29744" relation="include">
        </childnode>
        <childnode refid="29777" relation="include">
        </childnode>
        <childnode refid="29780" relation="include">
        </childnode>
        <childnode refid="29779" relation="include">
        </childnode>
        <childnode refid="29743" relation="include">
        </childnode>
        <childnode refid="29749" relation="include">
        </childnode>
      </node>
      <node id="29808">
        <label>openssl/ripemd.h</label>
      </node>
      <node id="29797">
        <label>boost/filesystem.hpp</label>
      </node>
      <node id="29795">
        <label>utility</label>
      </node>
      <node id="29792">
        <label>sstream</label>
      </node>
      <node id="29802">
        <label>openssl/evp.h</label>
      </node>
      <node id="29790">
        <label>tinyformat.h</label>
        <link refid="tinyformat_8h"/>
        <childnode refid="29747" relation="include">
        </childnode>
        <childnode refid="29791" relation="include">
        </childnode>
        <childnode refid="29792" relation="include">
        </childnode>
        <childnode refid="29779" relation="include">
        </childnode>
      </node>
      <node id="29749">
        <label>stdint.h</label>
        <link refid="stdint_8h"/>
      </node>
      <node id="29814">
        <label>streams.h</label>
        <link refid="streams_8h"/>
        <childnode refid="29754" relation="include">
        </childnode>
        <childnode refid="29744" relation="include">
        </childnode>
        <childnode refid="29815" relation="include">
        </childnode>
        <childnode refid="29778" relation="include">
        </childnode>
        <childnode refid="29816" relation="include">
        </childnode>
        <childnode refid="29748" relation="include">
        </childnode>
        <childnode refid="29745" relation="include">
        </childnode>
        <childnode refid="29746" relation="include">
        </childnode>
        <childnode refid="29749" relation="include">
        </childnode>
        <childnode refid="29742" relation="include">
        </childnode>
        <childnode refid="29757" relation="include">
        </childnode>
        <childnode refid="29795" relation="include">
        </childnode>
        <childnode refid="29743" relation="include">
        </childnode>
      </node>
      <node id="29813">
        <label>crypto/argon2/argon2.h</label>
        <link refid="argon2_8h"/>
        <childnode refid="29749" relation="include">
        </childnode>
        <childnode refid="29812" relation="include">
        </childnode>
        <childnode refid="29760" relation="include">
        </childnode>
      </node>
      <node id="29788">
        <label>sys/time.h</label>
      </node>
      <node id="29791">
        <label>iostream</label>
      </node>
      <node id="29777">
        <label>uint256.h</label>
        <link refid="uint256_8h"/>
        <childnode refid="29778" relation="include">
        </childnode>
        <childnode refid="29750" relation="include">
        </childnode>
        <childnode refid="29779" relation="include">
        </childnode>
        <childnode refid="29749" relation="include">
        </childnode>
        <childnode refid="29742" relation="include">
        </childnode>
        <childnode refid="29743" relation="include">
        </childnode>
      </node>
      <node id="29766">
        <label>sys/socket.h</label>
      </node>
      <node id="29780">
        <label>openssl/bn.h</label>
      </node>
      <node id="29786">
        <label>timedata.h</label>
        <link refid="timedata_8h"/>
        <childnode refid="29749" relation="include">
        </childnode>
      </node>
      <node id="29754">
        <label>allocators.h</label>
        <link refid="allocators_8h"/>
        <childnode refid="29755" relation="include">
        </childnode>
        <childnode refid="29757" relation="include">
        </childnode>
        <childnode refid="29742" relation="include">
        </childnode>
        <childnode refid="29758" relation="include">
        </childnode>
        <childnode refid="29745" relation="include">
        </childnode>
        <childnode refid="29759" relation="include">
        </childnode>
        <childnode refid="29760" relation="include">
        </childnode>
        <childnode refid="29761" relation="include">
        </childnode>
      </node>
      <node id="29775">
        <label>chainparams.h</label>
        <link refid="chainparams_8h"/>
        <childnode refid="29776" relation="include">
        </childnode>
        <childnode refid="29777" relation="include">
        </childnode>
        <childnode refid="29743" relation="include">
        </childnode>
      </node>
      <node id="29746">
        <label>set</label>
      </node>
      <node id="29815">
        <label>algorithm</label>
      </node>
      <node id="29809">
        <label>crypto/ripemd160.h</label>
        <link refid="ripemd160_8h"/>
        <childnode refid="29749" relation="include">
        </childnode>
        <childnode refid="29756" relation="include">
        </childnode>
      </node>
      <node id="29755">
        <label>cleanse.h</label>
        <link refid="cleanse_8h"/>
        <childnode refid="29756" relation="include">
        </childnode>
      </node>
      <node id="29750">
        <label>cstring</label>
      </node>
      <node id="29781">
        <label>sync.h</label>
        <link refid="sync_8h"/>
        <childnode refid="29782" relation="include">
        </childnode>
        <childnode refid="29783" relation="include">
        </childnode>
        <childnode refid="29784" relation="include">
        </childnode>
        <childnode refid="29758" relation="include">
        </childnode>
        <childnode refid="29785" relation="include">
        </childnode>
      </node>
    </incdepgraph>
    <innernamespace refid="namespacestd">std</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">//<sp/>Copyright<sp/>(c)<sp/>2012-2016<sp/>Pieter<sp/>Wuille</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Distributed<sp/>under<sp/>the<sp/>MIT/X11<sp/>software<sp/>license,<sp/>see<sp/>the<sp/>accompanying</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="comment">//<sp/>file<sp/>COPYING<sp/>or<sp/>http://www.opensource.org/licenses/mit-license.php.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="addrman_8h" kindref="compound">addrman.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="hash_8h" kindref="compound">hash.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="streams_8h" kindref="compound">streams.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal"><ref refid="namespacestd" kindref="compound">std</ref>;</highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight></codeline>
<codeline lineno="11" refid="class_c_addr_info_1a3732720a8d657d1dc8163e896cc480b4" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="class_c_addr_info_1a3732720a8d657d1dc8163e896cc480b4" kindref="member">CAddrInfo::GetTriedBucket</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;unsigned<sp/>char&gt;<sp/>&amp;nKey)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="12"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="13"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_c_data_stream" kindref="compound">CDataStream</ref><sp/>ss1(<ref refid="serialize_8h_1a6b7b47dd702d9e331586d485013fd1eaaca6c7596d50ce42f28b5b97f39ba178a" kindref="member">SER_GETHASH</ref>,<sp/>0);</highlight></codeline>
<codeline lineno="14"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;unsigned<sp/>char&gt;<sp/>vchKey<sp/>=<sp/>GetKey();</highlight></codeline>
<codeline lineno="15"><highlight class="normal"><sp/><sp/><sp/><sp/>ss1<sp/>&lt;&lt;<sp/>nKey<sp/>&lt;&lt;<sp/>vchKey;</highlight></codeline>
<codeline lineno="16"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="stdint_8h_1aaa5d1cd013383c889537491c3cfd9aad" kindref="member">uint64_t</ref><sp/>hash1<sp/>=<sp/><ref refid="hash_8h_1ab3f6c437460137530d86e09c2c102e99" kindref="member">Hash</ref>(ss1.<ref refid="class_c_data_stream_1a5b9e70188c662f4e9496066472af213e" kindref="member">begin</ref>(),<sp/>ss1.<ref refid="class_c_data_stream_1a1c22182691412ed9e0a30b719d388f31" kindref="member">end</ref>()).Get64();</highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_c_data_stream" kindref="compound">CDataStream</ref><sp/>ss2(<ref refid="serialize_8h_1a6b7b47dd702d9e331586d485013fd1eaaca6c7596d50ce42f28b5b97f39ba178a" kindref="member">SER_GETHASH</ref>,<sp/>0);</highlight></codeline>
<codeline lineno="19"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;unsigned<sp/>char&gt;<sp/>vchGroupKey<sp/>=<sp/>GetGroup();</highlight></codeline>
<codeline lineno="20"><highlight class="normal"><sp/><sp/><sp/><sp/>ss2<sp/>&lt;&lt;<sp/>nKey<sp/>&lt;&lt;<sp/>vchGroupKey<sp/>&lt;&lt;<sp/>(hash1<sp/>%<sp/><ref refid="addrman_8h_1a87c7c90e3631bf1a4475cabdded61f6f" kindref="member">ADDRMAN_TRIED_BUCKETS_PER_GROUP</ref>);</highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="stdint_8h_1aaa5d1cd013383c889537491c3cfd9aad" kindref="member">uint64_t</ref><sp/>hash2<sp/>=<sp/><ref refid="hash_8h_1ab3f6c437460137530d86e09c2c102e99" kindref="member">Hash</ref>(ss2.<ref refid="class_c_data_stream_1a5b9e70188c662f4e9496066472af213e" kindref="member">begin</ref>(),<sp/>ss2.<ref refid="class_c_data_stream_1a1c22182691412ed9e0a30b719d388f31" kindref="member">end</ref>()).Get64();</highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>hash2<sp/>%<sp/><ref refid="addrman_8h_1ab09df186aa818ce7b9e7c86446511cf1" kindref="member">ADDRMAN_TRIED_BUCKET_COUNT</ref>;</highlight></codeline>
<codeline lineno="23"><highlight class="normal">}</highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight></codeline>
<codeline lineno="25" refid="class_c_addr_info_1ae53c2174bdbc070bb1777cfabecaddda" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="class_c_addr_info_1ae53c2174bdbc070bb1777cfabecaddda" kindref="member">CAddrInfo::GetNewBucket</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;unsigned<sp/>char&gt;<sp/>&amp;nKey,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_c_net_addr" kindref="compound">CNetAddr</ref>&amp;<sp/>src)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="26"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_c_data_stream" kindref="compound">CDataStream</ref><sp/>ss1(<ref refid="serialize_8h_1a6b7b47dd702d9e331586d485013fd1eaaca6c7596d50ce42f28b5b97f39ba178a" kindref="member">SER_GETHASH</ref>,<sp/>0);</highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;unsigned<sp/>char&gt;<sp/>vchGroupKey<sp/>=<sp/>GetGroup();</highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;unsigned<sp/>char&gt;<sp/>vchSourceGroupKey<sp/>=<sp/>src.<ref refid="class_c_net_addr_1af196f306433562cb088dc83fd314a267" kindref="member">GetGroup</ref>();</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/><sp/>ss1<sp/>&lt;&lt;<sp/>nKey<sp/>&lt;&lt;<sp/>vchGroupKey<sp/>&lt;&lt;<sp/>vchSourceGroupKey;</highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="stdint_8h_1aaa5d1cd013383c889537491c3cfd9aad" kindref="member">uint64_t</ref><sp/>hash1<sp/>=<sp/><ref refid="hash_8h_1ab3f6c437460137530d86e09c2c102e99" kindref="member">Hash</ref>(ss1.<ref refid="class_c_data_stream_1a5b9e70188c662f4e9496066472af213e" kindref="member">begin</ref>(),<sp/>ss1.<ref refid="class_c_data_stream_1a1c22182691412ed9e0a30b719d388f31" kindref="member">end</ref>()).Get64();</highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_c_data_stream" kindref="compound">CDataStream</ref><sp/>ss2(<ref refid="serialize_8h_1a6b7b47dd702d9e331586d485013fd1eaaca6c7596d50ce42f28b5b97f39ba178a" kindref="member">SER_GETHASH</ref>,<sp/>0);</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/>ss2<sp/>&lt;&lt;<sp/>nKey<sp/>&lt;&lt;<sp/>vchSourceGroupKey<sp/>&lt;&lt;<sp/>(hash1<sp/>%<sp/><ref refid="addrman_8h_1a09c090218fd02375aa57eb7e8eb1c013" kindref="member">ADDRMAN_NEW_BUCKETS_PER_SOURCE_GROUP</ref>);</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="stdint_8h_1aaa5d1cd013383c889537491c3cfd9aad" kindref="member">uint64_t</ref><sp/>hash2<sp/>=<sp/><ref refid="hash_8h_1ab3f6c437460137530d86e09c2c102e99" kindref="member">Hash</ref>(ss2.<ref refid="class_c_data_stream_1a5b9e70188c662f4e9496066472af213e" kindref="member">begin</ref>(),<sp/>ss2.<ref refid="class_c_data_stream_1a1c22182691412ed9e0a30b719d388f31" kindref="member">end</ref>()).Get64();</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>hash2<sp/>%<sp/><ref refid="addrman_8h_1a74a626eb1dbb8e307a413e86493cd510" kindref="member">ADDRMAN_NEW_BUCKET_COUNT</ref>;</highlight></codeline>
<codeline lineno="37"><highlight class="normal">}</highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight></codeline>
<codeline lineno="39" refid="class_c_addr_info_1a1fd74c1bd7a8eb3c234bf222f028e94c" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="class_c_addr_info_1a1fd74c1bd7a8eb3c234bf222f028e94c" kindref="member">CAddrInfo::IsTerrible</ref>(<ref refid="stdint_8h_1adec1df1b8b51cb32b77e5b86fff46471" kindref="member">int64_t</ref><sp/>nNow)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="40"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(nLastTry<sp/>&amp;&amp;<sp/>nLastTry<sp/>&gt;=<sp/>nNow-60)<sp/></highlight><highlight class="comment">//<sp/>never<sp/>remove<sp/>things<sp/>tried<sp/>the<sp/>last<sp/>minute</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(nTime<sp/>&gt;<sp/>nNow<sp/>+<sp/>10*60)<sp/></highlight><highlight class="comment">//<sp/>came<sp/>in<sp/>a<sp/>flying<sp/>DeLorean</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(nTime==0<sp/>||<sp/>nNow-nTime<sp/>&gt;<sp/><ref refid="addrman_8h_1a86698b159625d84b47a2ffddc76ebc99" kindref="member">ADDRMAN_HORIZON_DAYS</ref>*24*60*60)<sp/></highlight><highlight class="comment">//<sp/>not<sp/>seen<sp/>in<sp/>recent<sp/>history</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(nLastSuccess==0<sp/>&amp;&amp;<sp/>nAttempts&gt;=<ref refid="addrman_8h_1a771c05a7a20d9a35f4546e1e333c48c4" kindref="member">ADDRMAN_RETRIES</ref>)<sp/></highlight><highlight class="comment">//<sp/>tried<sp/>N<sp/>times<sp/>and<sp/>never<sp/>a<sp/>success</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(nNow-nLastSuccess<sp/>&gt;<sp/><ref refid="addrman_8h_1a7dcc28590c48ca382d26c4f37fda4e3d" kindref="member">ADDRMAN_MIN_FAIL_DAYS</ref>*24*60*60<sp/>&amp;&amp;<sp/>nAttempts&gt;=<ref refid="addrman_8h_1a26430e6e9a3ef9f4fc54491330b7e611" kindref="member">ADDRMAN_MAX_FAILURES</ref>)<sp/></highlight><highlight class="comment">//<sp/>N<sp/>successive<sp/>failures<sp/>in<sp/>the<sp/>last<sp/>week</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="57"><highlight class="normal">}</highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight></codeline>
<codeline lineno="59" refid="class_c_addr_info_1a264f9856d499cf077aa5c82327302307" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="class_c_addr_info_1a264f9856d499cf077aa5c82327302307" kindref="member">CAddrInfo::GetChance</ref>(<ref refid="stdint_8h_1adec1df1b8b51cb32b77e5b86fff46471" kindref="member">int64_t</ref><sp/>nNow)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="60"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>fChance<sp/>=<sp/>1.0;</highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="stdint_8h_1adec1df1b8b51cb32b77e5b86fff46471" kindref="member">int64_t</ref><sp/>nSinceLastSeen<sp/>=<sp/>nNow<sp/>-<sp/>nTime;</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="stdint_8h_1adec1df1b8b51cb32b77e5b86fff46471" kindref="member">int64_t</ref><sp/>nSinceLastTry<sp/>=<sp/>nNow<sp/>-<sp/>nLastTry;</highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(nSinceLastSeen<sp/>&lt;<sp/>0)<sp/>nSinceLastSeen<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(nSinceLastTry<sp/>&lt;<sp/>0)<sp/>nSinceLastTry<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="68"><highlight class="normal"></highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/>fChance<sp/>*=<sp/>600.0<sp/>/<sp/>(600.0<sp/>+<sp/>nSinceLastSeen);</highlight></codeline>
<codeline lineno="70"><highlight class="normal"></highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>deprioritize<sp/>very<sp/>recent<sp/>attempts<sp/>away</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(nSinceLastTry<sp/>&lt;<sp/>60*10)</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fChance<sp/>*=<sp/>0.01;</highlight></codeline>
<codeline lineno="74"><highlight class="normal"></highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>deprioritize<sp/>66%<sp/>after<sp/>each<sp/>failed<sp/>attempt,<sp/>but<sp/>at<sp/>most<sp/>1/28th<sp/>to<sp/>avoid<sp/>the<sp/>search<sp/>taking<sp/>forever<sp/>or<sp/>overly<sp/>penalizing<sp/>outages.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/>fChance<sp/>*=<sp/>pow(0.66,<sp/>min(nAttempts,<sp/>8));</highlight></codeline>
<codeline lineno="77"><highlight class="normal"></highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>fChance;</highlight></codeline>
<codeline lineno="79"><highlight class="normal">}</highlight></codeline>
<codeline lineno="80"><highlight class="normal"></highlight></codeline>
<codeline lineno="81" refid="class_c_addr_man_1ac961ead1a1afde144fc486b6d7c7369d" refkind="member"><highlight class="normal"><ref refid="class_c_addr_info" kindref="compound">CAddrInfo</ref>*<sp/><ref refid="class_c_addr_man_1ac961ead1a1afde144fc486b6d7c7369d" kindref="member">CAddrMan::Find</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_c_net_addr" kindref="compound">CNetAddr</ref>&amp;<sp/>addr,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*pnId)</highlight></codeline>
<codeline lineno="82"><highlight class="normal">{</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/>std::map&lt;CNetAddr,<sp/>int&gt;::iterator<sp/>it<sp/>=<sp/>mapAddr.find(addr);</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(it<sp/>==<sp/>mapAddr.end())</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(pnId)</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*pnId<sp/>=<sp/>(*it).second;</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/>std::map&lt;int,<sp/>CAddrInfo&gt;::iterator<sp/>it2<sp/>=<sp/>mapInfo.find((*it).second);</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(it2<sp/>!=<sp/>mapInfo.end())</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>&amp;(*it2).second;</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="92"><highlight class="normal">}</highlight></codeline>
<codeline lineno="93"><highlight class="normal"></highlight></codeline>
<codeline lineno="94" refid="class_c_addr_man_1aac93f51c0580e38a950a0f63b053bedb" refkind="member"><highlight class="normal"><ref refid="class_c_addr_info" kindref="compound">CAddrInfo</ref>*<sp/><ref refid="class_c_addr_man_1aac93f51c0580e38a950a0f63b053bedb" kindref="member">CAddrMan::Create</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_c_address" kindref="compound">CAddress</ref><sp/>&amp;addr,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_c_net_addr" kindref="compound">CNetAddr</ref><sp/>&amp;addrSource,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*pnId)</highlight></codeline>
<codeline lineno="95"><highlight class="normal">{</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nId<sp/>=<sp/>nIdCount++;</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/>mapInfo[nId]<sp/>=<sp/><ref refid="class_c_addr_info" kindref="compound">CAddrInfo</ref>(addr,<sp/>addrSource);</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/>mapAddr[addr]<sp/>=<sp/>nId;</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/>mapInfo[nId].nRandomPos<sp/>=<sp/>vRandom.size();</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/>vRandom.push_back(nId);</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(pnId)</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*pnId<sp/>=<sp/>nId;</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>&amp;mapInfo[nId];</highlight></codeline>
<codeline lineno="104"><highlight class="normal">}</highlight></codeline>
<codeline lineno="105"><highlight class="normal"></highlight></codeline>
<codeline lineno="106" refid="class_c_addr_man_1a3074bc8e3dcfb5348054613f575dc38e" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_c_addr_man_1a3074bc8e3dcfb5348054613f575dc38e" kindref="member">CAddrMan::SwapRandom</ref>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nRndPos1,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nRndPos2)</highlight></codeline>
<codeline lineno="107"><highlight class="normal">{</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(nRndPos1<sp/>==<sp/>nRndPos2)</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="110"><highlight class="normal"></highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(nRndPos1<sp/>&lt;<sp/>vRandom.size()<sp/>&amp;&amp;<sp/>nRndPos2<sp/>&lt;<sp/>vRandom.size());</highlight></codeline>
<codeline lineno="112"><highlight class="normal"></highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nId1<sp/>=<sp/>vRandom[nRndPos1];</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nId2<sp/>=<sp/>vRandom[nRndPos2];</highlight></codeline>
<codeline lineno="115"><highlight class="normal"></highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(mapInfo.count(nId1)<sp/>==<sp/>1);</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(mapInfo.count(nId2)<sp/>==<sp/>1);</highlight></codeline>
<codeline lineno="118"><highlight class="normal"></highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/>mapInfo[nId1].nRandomPos<sp/>=<sp/>nRndPos2;</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/>mapInfo[nId2].nRandomPos<sp/>=<sp/>nRndPos1;</highlight></codeline>
<codeline lineno="121"><highlight class="normal"></highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/>vRandom[nRndPos1]<sp/>=<sp/>nId2;</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/>vRandom[nRndPos2]<sp/>=<sp/>nId1;</highlight></codeline>
<codeline lineno="124"><highlight class="normal">}</highlight></codeline>
<codeline lineno="125"><highlight class="normal"></highlight></codeline>
<codeline lineno="126" refid="class_c_addr_man_1a9c466eca7afe5c12554da5734f89e656" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="class_c_addr_man_1a9c466eca7afe5c12554da5734f89e656" kindref="member">CAddrMan::SelectTried</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nKBucket)</highlight></codeline>
<codeline lineno="127"><highlight class="normal">{</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;int&gt;<sp/>&amp;vTried<sp/>=<sp/>vvTried[nKBucket];</highlight></codeline>
<codeline lineno="129"><highlight class="normal"></highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>random<sp/>shuffle<sp/>the<sp/>first<sp/>few<sp/>elements<sp/>(using<sp/>the<sp/>entire<sp/>list)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>find<sp/>the<sp/>least<sp/>recently<sp/>tried<sp/>among<sp/>them</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="stdint_8h_1adec1df1b8b51cb32b77e5b86fff46471" kindref="member">int64_t</ref><sp/>nOldest<sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nOldestPos<sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/><ref refid="addrman_8h_1ad08dcd4f445cb72a65444137a73bec26" kindref="member">ADDRMAN_TRIED_ENTRIES_INSPECT_ON_EVICT</ref><sp/>&amp;&amp;<sp/>i<sp/>&lt;<sp/>vTried.size();<sp/>i++)</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nPos<sp/>=<sp/><ref refid="util_8cpp_1a0e44e088732172da6662db2d5e37d4b2" kindref="member">GetRandInt</ref>(vTried.size()<sp/>-<sp/>i)<sp/>+<sp/>i;</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nTemp<sp/>=<sp/>vTried[nPos];</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vTried[nPos]<sp/>=<sp/>vTried[i];</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vTried[i]<sp/>=<sp/>nTemp;</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assert(nOldest<sp/>==<sp/>-1<sp/>||<sp/>mapInfo.count(nTemp)<sp/>==<sp/>1);</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(nOldest<sp/>==<sp/>-1<sp/>||<sp/>mapInfo[nTemp].nLastSuccess<sp/>&lt;<sp/>mapInfo[nOldest].nLastSuccess)<sp/>{</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nOldest<sp/>=<sp/>nTemp;</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nOldestPos<sp/>=<sp/>nPos;</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="146"><highlight class="normal"></highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>nOldestPos;</highlight></codeline>
<codeline lineno="148"><highlight class="normal">}</highlight></codeline>
<codeline lineno="149"><highlight class="normal"></highlight></codeline>
<codeline lineno="150" refid="class_c_addr_man_1aebf83da3addc3bcee487a87ece3f9a2b" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="class_c_addr_man_1aebf83da3addc3bcee487a87ece3f9a2b" kindref="member">CAddrMan::ShrinkNew</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nUBucket)</highlight></codeline>
<codeline lineno="151"><highlight class="normal">{</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(nUBucket<sp/>&gt;=<sp/>0<sp/>&amp;&amp;<sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)nUBucket<sp/>&lt;<sp/>vvNew.size());</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/>std::set&lt;int&gt;<sp/>&amp;vNew<sp/>=<sp/>vvNew[nUBucket];</highlight></codeline>
<codeline lineno="154"><highlight class="normal"></highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>first<sp/>look<sp/>for<sp/>deletable<sp/>items</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(std::set&lt;int&gt;::iterator<sp/>it<sp/>=<sp/>vNew.begin();<sp/>it<sp/>!=<sp/>vNew.end();<sp/>it++)</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assert(mapInfo.count(*it));</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_c_addr_info" kindref="compound">CAddrInfo</ref><sp/>&amp;info<sp/>=<sp/>mapInfo[*it];</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(info.IsTerrible())</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(--info.nRefCount<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SwapRandom(info.nRandomPos,<sp/>vRandom.size()-1);</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vRandom.pop_back();</highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mapAddr.erase(info);</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mapInfo.erase(*it);</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nNew--;</highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vNew.erase(it);</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="174"><highlight class="normal"></highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>otherwise,<sp/>select<sp/>four<sp/>randomly,<sp/>and<sp/>pick<sp/>the<sp/>oldest<sp/>of<sp/>those<sp/>to<sp/>replace</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n[4]<sp/>=<sp/>{<ref refid="util_8cpp_1a0e44e088732172da6662db2d5e37d4b2" kindref="member">GetRandInt</ref>(vNew.size()),<sp/><ref refid="util_8cpp_1a0e44e088732172da6662db2d5e37d4b2" kindref="member">GetRandInt</ref>(vNew.size()),<sp/><ref refid="util_8cpp_1a0e44e088732172da6662db2d5e37d4b2" kindref="member">GetRandInt</ref>(vNew.size()),<sp/><ref refid="util_8cpp_1a0e44e088732172da6662db2d5e37d4b2" kindref="member">GetRandInt</ref>(vNew.size())};</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nI<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nOldest<sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(std::set&lt;int&gt;::iterator<sp/>it<sp/>=<sp/>vNew.begin();<sp/>it<sp/>!=<sp/>vNew.end();<sp/>it++)</highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(nI<sp/>==<sp/>n[0]<sp/>||<sp/>nI<sp/>==<sp/>n[1]<sp/>||<sp/>nI<sp/>==<sp/>n[2]<sp/>||<sp/>nI<sp/>==<sp/>n[3])</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assert(nOldest<sp/>==<sp/>-1<sp/>||<sp/>mapInfo.count(*it)<sp/>==<sp/>1);</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(nOldest<sp/>==<sp/>-1<sp/>||<sp/>mapInfo[*it].nTime<sp/>&lt;<sp/>mapInfo[nOldest].nTime)</highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nOldest<sp/>=<sp/>*it;</highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nI++;</highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(mapInfo.count(nOldest)<sp/>==<sp/>1);</highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_c_addr_info" kindref="compound">CAddrInfo</ref><sp/>&amp;info<sp/>=<sp/>mapInfo[nOldest];</highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(--info.nRefCount<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SwapRandom(info.nRandomPos,<sp/>vRandom.size()-1);</highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vRandom.pop_back();</highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mapAddr.erase(info);</highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mapInfo.erase(nOldest);</highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nNew--;</highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/><sp/><sp/>vNew.erase(nOldest);</highlight></codeline>
<codeline lineno="200"><highlight class="normal"></highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="202"><highlight class="normal">}</highlight></codeline>
<codeline lineno="203"><highlight class="normal"></highlight></codeline>
<codeline lineno="204" refid="class_c_addr_man_1a0fd16da2a89fb973e8e0e1bb6183264a" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_c_addr_man_1a0fd16da2a89fb973e8e0e1bb6183264a" kindref="member">CAddrMan::MakeTried</ref>(<ref refid="class_c_addr_info" kindref="compound">CAddrInfo</ref>&amp;<sp/>info,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nId,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nOrigin)</highlight></codeline>
<codeline lineno="205"><highlight class="normal">{</highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(vvNew[nOrigin].count(nId)<sp/>==<sp/>1);</highlight></codeline>
<codeline lineno="207"><highlight class="normal"></highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>remove<sp/>the<sp/>entry<sp/>from<sp/>all<sp/>new<sp/>buckets</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(std::vector&lt;std::set&lt;int&gt;<sp/>&gt;::iterator<sp/>it<sp/>=<sp/>vvNew.begin();<sp/>it<sp/>!=<sp/>vvNew.end();<sp/>it++)</highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((*it).erase(nId))</highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>info.nRefCount--;</highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/><sp/><sp/>nNew--;</highlight></codeline>
<codeline lineno="215"><highlight class="normal"></highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(info.nRefCount<sp/>==<sp/>0);</highlight></codeline>
<codeline lineno="217"><highlight class="normal"></highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>what<sp/>tried<sp/>bucket<sp/>to<sp/>move<sp/>the<sp/>entry<sp/>to</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nKBucket<sp/>=<sp/>info.<ref refid="class_c_addr_info_1a3732720a8d657d1dc8163e896cc480b4" kindref="member">GetTriedBucket</ref>(nKey);</highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;int&gt;<sp/>&amp;vTried<sp/>=<sp/>vvTried[nKBucket];</highlight></codeline>
<codeline lineno="221"><highlight class="normal"></highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>first<sp/>check<sp/>whether<sp/>there<sp/>is<sp/>place<sp/>to<sp/>just<sp/>add<sp/>it</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(vTried.size()<sp/>&lt;<sp/><ref refid="addrman_8h_1a2423587e1cb89d09a7f43c344c594f64" kindref="member">ADDRMAN_TRIED_BUCKET_SIZE</ref>)</highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vTried.push_back(nId);</highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nTried++;</highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>info.fInTried<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="230"><highlight class="normal"></highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>otherwise,<sp/>find<sp/>an<sp/>item<sp/>to<sp/>evict</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nPos<sp/>=<sp/>SelectTried(nKBucket);</highlight></codeline>
<codeline lineno="233"><highlight class="normal"></highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>find<sp/>which<sp/>new<sp/>bucket<sp/>it<sp/>belongs<sp/>to</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(mapInfo.count(vTried[nPos])<sp/>==<sp/>1);</highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nUBucket<sp/>=<sp/>mapInfo[vTried[nPos]].GetNewBucket(nKey);</highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/><sp/><sp/>std::set&lt;int&gt;<sp/>&amp;vNew<sp/>=<sp/>vvNew[nUBucket];</highlight></codeline>
<codeline lineno="238"><highlight class="normal"></highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>remove<sp/>the<sp/>to-be-replaced<sp/>tried<sp/>entry<sp/>from<sp/>the<sp/>tried<sp/>set</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_c_addr_info" kindref="compound">CAddrInfo</ref>&amp;<sp/>infoOld<sp/>=<sp/>mapInfo[vTried[nPos]];</highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/><sp/><sp/>infoOld.fInTried<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/><sp/><sp/>infoOld.nRefCount<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>do<sp/>not<sp/>update<sp/>nTried,<sp/>as<sp/>we<sp/>are<sp/>going<sp/>to<sp/>move<sp/>something<sp/>else<sp/>there<sp/>immediately</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="244"><highlight class="normal"></highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>check<sp/>whether<sp/>there<sp/>is<sp/>place<sp/>in<sp/>that<sp/>one,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(vNew.size()<sp/>&lt;<sp/><ref refid="addrman_8h_1ad83e38ebbf1e0989764f5b245da41157" kindref="member">ADDRMAN_NEW_BUCKET_SIZE</ref>)</highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>if<sp/>so,<sp/>move<sp/>it<sp/>back<sp/>there</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vNew.insert(vTried[nPos]);</highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>otherwise,<sp/>move<sp/>it<sp/>to<sp/>the<sp/>new<sp/>bucket<sp/>nId<sp/>came<sp/>from<sp/>(there<sp/>is<sp/>certainly<sp/>place<sp/>there)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vvNew[nOrigin].insert(vTried[nPos]);</highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/><sp/><sp/>nNew++;</highlight></codeline>
<codeline lineno="255"><highlight class="normal"></highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/><sp/><sp/>vTried[nPos]<sp/>=<sp/>nId;</highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>we<sp/>just<sp/>overwrote<sp/>an<sp/>entry<sp/>in<sp/>vTried;<sp/>no<sp/>need<sp/>to<sp/>update<sp/>nTried</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/><sp/><sp/>info.fInTried<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="260"><highlight class="normal">}</highlight></codeline>
<codeline lineno="261"><highlight class="normal"></highlight></codeline>
<codeline lineno="262" refid="class_c_addr_man_1a33ec6a4584cf4b17af821e6e35216459" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_c_addr_man_1a33ec6a4584cf4b17af821e6e35216459" kindref="member">CAddrMan::Good_</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_c_service" kindref="compound">CService</ref><sp/>&amp;addr,<sp/><ref refid="stdint_8h_1adec1df1b8b51cb32b77e5b86fff46471" kindref="member">int64_t</ref><sp/>nTime)</highlight></codeline>
<codeline lineno="263"><highlight class="normal">{</highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nId;</highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_c_addr_info" kindref="compound">CAddrInfo</ref><sp/>*pinfo<sp/>=<sp/>Find(addr,<sp/>&amp;nId);</highlight></codeline>
<codeline lineno="266"><highlight class="normal"></highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>if<sp/>not<sp/>found,<sp/>bail<sp/>out</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!pinfo)</highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="270"><highlight class="normal"></highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_c_addr_info" kindref="compound">CAddrInfo</ref><sp/>&amp;info<sp/>=<sp/>*pinfo;</highlight></codeline>
<codeline lineno="272"><highlight class="normal"></highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>check<sp/>whether<sp/>we<sp/>are<sp/>talking<sp/>about<sp/>the<sp/>exact<sp/>same<sp/>CService<sp/>(including<sp/>same<sp/>port)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(info<sp/>!=<sp/>addr)</highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="276"><highlight class="normal"></highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>update<sp/>info</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/><sp/><sp/>info.nLastSuccess<sp/>=<sp/>nTime;</highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/><sp/><sp/>info.<ref refid="class_c_address_1abcf198429efe135fa2424f7dbc0048b0" kindref="member">nLastTry</ref><sp/>=<sp/>nTime;</highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/><sp/><sp/>info.<ref refid="class_c_address_1ac1c44aac968b11f90ce529b133ae4e9b" kindref="member">nTime</ref><sp/>=<sp/>nTime;</highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/><sp/><sp/>info.nAttempts<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="282"><highlight class="normal"></highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>if<sp/>it<sp/>is<sp/>already<sp/>in<sp/>the<sp/>tried<sp/>set,<sp/>don&apos;t<sp/>do<sp/>anything<sp/>else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(info.fInTried)</highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="286"><highlight class="normal"></highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>find<sp/>a<sp/>bucket<sp/>it<sp/>is<sp/>in<sp/>now</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nRnd<sp/>=<sp/><ref refid="util_8cpp_1a0e44e088732172da6662db2d5e37d4b2" kindref="member">GetRandInt</ref>(vvNew.size());</highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nUBucket<sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n<sp/>=<sp/>0;<sp/>n<sp/>&lt;<sp/>vvNew.size();<sp/>n++)</highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nB<sp/>=<sp/>(n+nRnd)<sp/>%<sp/>vvNew.size();</highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::set&lt;int&gt;<sp/>&amp;vNew<sp/>=<sp/>vvNew[nB];</highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(vNew.count(nId))</highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nUBucket<sp/>=<sp/>nB;</highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="299"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="300"><highlight class="normal"></highlight></codeline>
<codeline lineno="301"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>if<sp/>no<sp/>bucket<sp/>is<sp/>found,<sp/>something<sp/>bad<sp/>happened;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="302"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>TODO:<sp/>maybe<sp/>re-add<sp/>the<sp/>node,<sp/>but<sp/>for<sp/>now,<sp/>just<sp/>bail<sp/>out</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="303"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(nUBucket<sp/>==<sp/>-1)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="304"><highlight class="normal"></highlight></codeline>
<codeline lineno="305"><highlight class="normal"><sp/><sp/><sp/><sp/>LogPrint(</highlight><highlight class="stringliteral">&quot;addrman&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Moving<sp/>%s<sp/>to<sp/>tried\n&quot;</highlight><highlight class="normal">,<sp/>addr.<ref refid="class_c_service_1a336f9848fe9364e260c76499be0351a5" kindref="member">ToString</ref>());</highlight></codeline>
<codeline lineno="306"><highlight class="normal"></highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>move<sp/>nId<sp/>to<sp/>the<sp/>tried<sp/>tables</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="308"><highlight class="normal"><sp/><sp/><sp/><sp/>MakeTried(info,<sp/>nId,<sp/>nUBucket);</highlight></codeline>
<codeline lineno="309"><highlight class="normal">}</highlight></codeline>
<codeline lineno="310"><highlight class="normal"></highlight></codeline>
<codeline lineno="311" refid="class_c_addr_man_1a9dd6df8b1904548a86054d19d4a90724" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="class_c_addr_man_1a9dd6df8b1904548a86054d19d4a90724" kindref="member">CAddrMan::Add_</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_c_address" kindref="compound">CAddress</ref><sp/>&amp;addr,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_c_net_addr" kindref="compound">CNetAddr</ref>&amp;<sp/><ref refid="debugconsole_8cpp_1af2ed45b90afa2ef4ec6e09625335a082" kindref="member">source</ref>,<sp/><ref refid="stdint_8h_1adec1df1b8b51cb32b77e5b86fff46471" kindref="member">int64_t</ref><sp/>nTimePenalty)</highlight></codeline>
<codeline lineno="312"><highlight class="normal">{</highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!addr.<ref refid="class_c_net_addr_1a35131b2792434d1c9a860c583b610ab6" kindref="member">IsRoutable</ref>())</highlight></codeline>
<codeline lineno="314"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="315"><highlight class="normal"></highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>fNew<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="317"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nId;</highlight></codeline>
<codeline lineno="318"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_c_addr_info" kindref="compound">CAddrInfo</ref><sp/>*pinfo<sp/>=<sp/>Find(addr,<sp/>&amp;nId);</highlight></codeline>
<codeline lineno="319"><highlight class="normal"></highlight></codeline>
<codeline lineno="320"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(pinfo)</highlight></codeline>
<codeline lineno="321"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="322"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>periodically<sp/>update<sp/>nTime</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>fCurrentlyOnline<sp/>=<sp/>(<ref refid="timedata_8cpp_1a09f81b9c7650f898cf3cf305b87547e6" kindref="member">GetAdjustedTime</ref>()<sp/>-<sp/>addr.<ref refid="class_c_address_1ac1c44aac968b11f90ce529b133ae4e9b" kindref="member">nTime</ref><sp/>&lt;<sp/>24<sp/>*<sp/>60<sp/>*<sp/>60);</highlight></codeline>
<codeline lineno="324"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stdint_8h_1adec1df1b8b51cb32b77e5b86fff46471" kindref="member">int64_t</ref><sp/>nUpdateInterval<sp/>=<sp/>(fCurrentlyOnline<sp/>?<sp/>60<sp/>*<sp/>60<sp/>:<sp/>24<sp/>*<sp/>60<sp/>*<sp/>60);</highlight></codeline>
<codeline lineno="325"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(addr.<ref refid="class_c_address_1ac1c44aac968b11f90ce529b133ae4e9b" kindref="member">nTime</ref><sp/>&amp;&amp;<sp/>(!pinfo-&gt;<ref refid="class_c_address_1ac1c44aac968b11f90ce529b133ae4e9b" kindref="member">nTime</ref><sp/>||<sp/>pinfo-&gt;<ref refid="class_c_address_1ac1c44aac968b11f90ce529b133ae4e9b" kindref="member">nTime</ref><sp/>&lt;<sp/>addr.<ref refid="class_c_address_1ac1c44aac968b11f90ce529b133ae4e9b" kindref="member">nTime</ref><sp/>-<sp/>nUpdateInterval<sp/>-<sp/>nTimePenalty))</highlight></codeline>
<codeline lineno="326"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pinfo-&gt;<ref refid="class_c_address_1ac1c44aac968b11f90ce529b133ae4e9b" kindref="member">nTime</ref><sp/>=<sp/>max((<ref refid="stdint_8h_1adec1df1b8b51cb32b77e5b86fff46471" kindref="member">int64_t</ref>)0,<sp/>addr.<ref refid="class_c_address_1ac1c44aac968b11f90ce529b133ae4e9b" kindref="member">nTime</ref><sp/>-<sp/>nTimePenalty);</highlight></codeline>
<codeline lineno="327"><highlight class="normal"></highlight></codeline>
<codeline lineno="328"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>add<sp/>services</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="329"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pinfo-&gt;<ref refid="class_c_address_1a6a4a6aa020d0d558f238c7d04dd986c3" kindref="member">nServices</ref><sp/>|=<sp/>addr.<ref refid="class_c_address_1a6a4a6aa020d0d558f238c7d04dd986c3" kindref="member">nServices</ref>;</highlight></codeline>
<codeline lineno="330"><highlight class="normal"></highlight></codeline>
<codeline lineno="331"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>do<sp/>not<sp/>update<sp/>if<sp/>no<sp/>new<sp/>information<sp/>is<sp/>present</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="332"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!addr.<ref refid="class_c_address_1ac1c44aac968b11f90ce529b133ae4e9b" kindref="member">nTime</ref><sp/>||<sp/>(pinfo-&gt;<ref refid="class_c_address_1ac1c44aac968b11f90ce529b133ae4e9b" kindref="member">nTime</ref><sp/>&amp;&amp;<sp/>addr.<ref refid="class_c_address_1ac1c44aac968b11f90ce529b133ae4e9b" kindref="member">nTime</ref><sp/>&lt;=<sp/>pinfo-&gt;<ref refid="class_c_address_1ac1c44aac968b11f90ce529b133ae4e9b" kindref="member">nTime</ref>))</highlight></codeline>
<codeline lineno="333"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="334"><highlight class="normal"></highlight></codeline>
<codeline lineno="335"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>do<sp/>not<sp/>update<sp/>if<sp/>the<sp/>entry<sp/>was<sp/>already<sp/>in<sp/>the<sp/>&quot;tried&quot;<sp/>table</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="336"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(pinfo-&gt;fInTried)</highlight></codeline>
<codeline lineno="337"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="338"><highlight class="normal"></highlight></codeline>
<codeline lineno="339"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>do<sp/>not<sp/>update<sp/>if<sp/>the<sp/>max<sp/>reference<sp/>count<sp/>is<sp/>reached</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="340"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(pinfo-&gt;nRefCount<sp/>==<sp/><ref refid="addrman_8h_1a230e30813119d10bdba59c1f8cc789cd" kindref="member">ADDRMAN_NEW_BUCKETS_PER_ADDRESS</ref>)</highlight></codeline>
<codeline lineno="341"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="342"><highlight class="normal"></highlight></codeline>
<codeline lineno="343"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>stochastic<sp/>test:<sp/>previous<sp/>nRefCount<sp/>==<sp/>N:<sp/>2^N<sp/>times<sp/>harder<sp/>to<sp/>increase<sp/>it</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="344"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nFactor<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="345"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n=0;<sp/>n&lt;pinfo-&gt;nRefCount;<sp/>n++)</highlight></codeline>
<codeline lineno="346"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nFactor<sp/>*=<sp/>2;</highlight></codeline>
<codeline lineno="347"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(nFactor<sp/>&gt;<sp/>1<sp/>&amp;&amp;<sp/>(<ref refid="util_8cpp_1a0e44e088732172da6662db2d5e37d4b2" kindref="member">GetRandInt</ref>(nFactor)<sp/>!=<sp/>0))</highlight></codeline>
<codeline lineno="348"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="349"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="350"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pinfo<sp/>=<sp/>Create(addr,<sp/>source,<sp/>&amp;nId);</highlight></codeline>
<codeline lineno="351"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pinfo-&gt;<ref refid="class_c_address_1ac1c44aac968b11f90ce529b133ae4e9b" kindref="member">nTime</ref><sp/>=<sp/>max((<ref refid="stdint_8h_1adec1df1b8b51cb32b77e5b86fff46471" kindref="member">int64_t</ref>)0,<sp/>(<ref refid="stdint_8h_1adec1df1b8b51cb32b77e5b86fff46471" kindref="member">int64_t</ref>)pinfo-&gt;<ref refid="class_c_address_1ac1c44aac968b11f90ce529b133ae4e9b" kindref="member">nTime</ref><sp/>-<sp/>nTimePenalty);</highlight></codeline>
<codeline lineno="352"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nNew++;</highlight></codeline>
<codeline lineno="353"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fNew<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="354"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="355"><highlight class="normal"></highlight></codeline>
<codeline lineno="356"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nUBucket<sp/>=<sp/>pinfo-&gt;<ref refid="class_c_addr_info_1ae53c2174bdbc070bb1777cfabecaddda" kindref="member">GetNewBucket</ref>(nKey,<sp/>source);</highlight></codeline>
<codeline lineno="357"><highlight class="normal"><sp/><sp/><sp/><sp/>std::set&lt;int&gt;<sp/>&amp;vNew<sp/>=<sp/>vvNew[nUBucket];</highlight></codeline>
<codeline lineno="358"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!vNew.count(nId))</highlight></codeline>
<codeline lineno="359"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="360"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pinfo-&gt;nRefCount++;</highlight></codeline>
<codeline lineno="361"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(vNew.size()<sp/>==<sp/><ref refid="addrman_8h_1ad83e38ebbf1e0989764f5b245da41157" kindref="member">ADDRMAN_NEW_BUCKET_SIZE</ref>)</highlight></codeline>
<codeline lineno="362"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ShrinkNew(nUBucket);</highlight></codeline>
<codeline lineno="363"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vvNew[nUBucket].insert(nId);</highlight></codeline>
<codeline lineno="364"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="365"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>fNew;</highlight></codeline>
<codeline lineno="366"><highlight class="normal">}</highlight></codeline>
<codeline lineno="367"><highlight class="normal"></highlight></codeline>
<codeline lineno="368" refid="class_c_addr_man_1ab1a1bfa8b435ef139570c88de1a5245f" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_c_addr_man_1ab1a1bfa8b435ef139570c88de1a5245f" kindref="member">CAddrMan::Attempt_</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_c_service" kindref="compound">CService</ref><sp/>&amp;addr,<sp/><ref refid="stdint_8h_1adec1df1b8b51cb32b77e5b86fff46471" kindref="member">int64_t</ref><sp/>nTime)</highlight></codeline>
<codeline lineno="369"><highlight class="normal">{</highlight></codeline>
<codeline lineno="370"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_c_addr_info" kindref="compound">CAddrInfo</ref><sp/>*pinfo<sp/>=<sp/>Find(addr);</highlight></codeline>
<codeline lineno="371"><highlight class="normal"></highlight></codeline>
<codeline lineno="372"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>if<sp/>not<sp/>found,<sp/>bail<sp/>out</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="373"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!pinfo)</highlight></codeline>
<codeline lineno="374"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="375"><highlight class="normal"></highlight></codeline>
<codeline lineno="376"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_c_addr_info" kindref="compound">CAddrInfo</ref><sp/>&amp;info<sp/>=<sp/>*pinfo;</highlight></codeline>
<codeline lineno="377"><highlight class="normal"></highlight></codeline>
<codeline lineno="378"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>check<sp/>whether<sp/>we<sp/>are<sp/>talking<sp/>about<sp/>the<sp/>exact<sp/>same<sp/>CService<sp/>(including<sp/>same<sp/>port)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="379"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(info<sp/>!=<sp/>addr)</highlight></codeline>
<codeline lineno="380"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="381"><highlight class="normal"></highlight></codeline>
<codeline lineno="382"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>update<sp/>info</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="383"><highlight class="normal"><sp/><sp/><sp/><sp/>info.<ref refid="class_c_address_1abcf198429efe135fa2424f7dbc0048b0" kindref="member">nLastTry</ref><sp/>=<sp/>nTime;</highlight></codeline>
<codeline lineno="384"><highlight class="normal"><sp/><sp/><sp/><sp/>info.nAttempts++;</highlight></codeline>
<codeline lineno="385"><highlight class="normal">}</highlight></codeline>
<codeline lineno="386"><highlight class="normal"></highlight></codeline>
<codeline lineno="387" refid="class_c_addr_man_1acd799cecb73e466d1369e6e2f23d3a8d" refkind="member"><highlight class="normal"><ref refid="class_c_address" kindref="compound">CAddress</ref><sp/><ref refid="class_c_addr_man_1acd799cecb73e466d1369e6e2f23d3a8d" kindref="member">CAddrMan::Select_</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nUnkBias)</highlight></codeline>
<codeline lineno="388"><highlight class="normal">{</highlight></codeline>
<codeline lineno="389"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(size()<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="390"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="class_c_address" kindref="compound">CAddress</ref>();</highlight></codeline>
<codeline lineno="391"><highlight class="normal"></highlight></codeline>
<codeline lineno="392"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>nCorTried<sp/>=<sp/>sqrt(nTried)<sp/>*<sp/>(100.0<sp/>-<sp/>nUnkBias);</highlight></codeline>
<codeline lineno="393"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>nCorNew<sp/>=<sp/>sqrt(nNew)<sp/>*<sp/>nUnkBias;</highlight></codeline>
<codeline lineno="394"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((nCorTried<sp/>+<sp/>nCorNew)*<ref refid="util_8cpp_1a0e44e088732172da6662db2d5e37d4b2" kindref="member">GetRandInt</ref>(1&lt;&lt;30)/(1&lt;&lt;30)<sp/>&lt;<sp/>nCorTried)</highlight></codeline>
<codeline lineno="395"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="396"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>use<sp/>a<sp/>tried<sp/>node</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="397"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>fChanceFactor<sp/>=<sp/>1.0;</highlight></codeline>
<codeline lineno="398"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(1)</highlight></codeline>
<codeline lineno="399"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="400"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nKBucket<sp/>=<sp/><ref refid="util_8cpp_1a0e44e088732172da6662db2d5e37d4b2" kindref="member">GetRandInt</ref>(vvTried.size());</highlight></codeline>
<codeline lineno="401"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;int&gt;<sp/>&amp;vTried<sp/>=<sp/>vvTried[nKBucket];</highlight></codeline>
<codeline lineno="402"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(vTried.size()<sp/>==<sp/>0)<sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="403"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nPos<sp/>=<sp/><ref refid="util_8cpp_1a0e44e088732172da6662db2d5e37d4b2" kindref="member">GetRandInt</ref>(vTried.size());</highlight></codeline>
<codeline lineno="404"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assert(mapInfo.count(vTried[nPos])<sp/>==<sp/>1);</highlight></codeline>
<codeline lineno="405"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_c_addr_info" kindref="compound">CAddrInfo</ref><sp/>&amp;info<sp/>=<sp/>mapInfo[vTried[nPos]];</highlight></codeline>
<codeline lineno="406"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="util_8cpp_1a0e44e088732172da6662db2d5e37d4b2" kindref="member">GetRandInt</ref>(1&lt;&lt;30)<sp/>&lt;<sp/>fChanceFactor*info.GetChance()*(1&lt;&lt;30))</highlight></codeline>
<codeline lineno="407"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>info;</highlight></codeline>
<codeline lineno="408"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fChanceFactor<sp/>*=<sp/>1.2;</highlight></codeline>
<codeline lineno="409"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="410"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="411"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>use<sp/>a<sp/>new<sp/>node</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="412"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>fChanceFactor<sp/>=<sp/>1.0;</highlight></codeline>
<codeline lineno="413"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(1)</highlight></codeline>
<codeline lineno="414"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="415"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nUBucket<sp/>=<sp/><ref refid="util_8cpp_1a0e44e088732172da6662db2d5e37d4b2" kindref="member">GetRandInt</ref>(vvNew.size());</highlight></codeline>
<codeline lineno="416"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::set&lt;int&gt;<sp/>&amp;vNew<sp/>=<sp/>vvNew[nUBucket];</highlight></codeline>
<codeline lineno="417"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(vNew.size()<sp/>==<sp/>0)<sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="418"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nPos<sp/>=<sp/><ref refid="util_8cpp_1a0e44e088732172da6662db2d5e37d4b2" kindref="member">GetRandInt</ref>(vNew.size());</highlight></codeline>
<codeline lineno="419"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::set&lt;int&gt;::iterator<sp/>it<sp/>=<sp/>vNew.begin();</highlight></codeline>
<codeline lineno="420"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(nPos--)</highlight></codeline>
<codeline lineno="421"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>it++;</highlight></codeline>
<codeline lineno="422"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assert(mapInfo.count(*it)<sp/>==<sp/>1);</highlight></codeline>
<codeline lineno="423"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_c_addr_info" kindref="compound">CAddrInfo</ref><sp/>&amp;info<sp/>=<sp/>mapInfo[*it];</highlight></codeline>
<codeline lineno="424"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="util_8cpp_1a0e44e088732172da6662db2d5e37d4b2" kindref="member">GetRandInt</ref>(1&lt;&lt;30)<sp/>&lt;<sp/>fChanceFactor*info.GetChance()*(1&lt;&lt;30))</highlight></codeline>
<codeline lineno="425"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>info;</highlight></codeline>
<codeline lineno="426"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fChanceFactor<sp/>*=<sp/>1.2;</highlight></codeline>
<codeline lineno="427"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="428"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="429"><highlight class="normal">}</highlight></codeline>
<codeline lineno="430"><highlight class="normal"></highlight></codeline>
<codeline lineno="431"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>DEBUG_ADDRMAN</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="432"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>CAddrMan::Check_()</highlight></codeline>
<codeline lineno="433"><highlight class="normal">{</highlight></codeline>
<codeline lineno="434"><highlight class="normal"><sp/><sp/><sp/><sp/>std::set&lt;int&gt;<sp/>setTried;</highlight></codeline>
<codeline lineno="435"><highlight class="normal"><sp/><sp/><sp/><sp/>std::map&lt;int,<sp/>int&gt;<sp/>mapNew;</highlight></codeline>
<codeline lineno="436"><highlight class="normal"></highlight></codeline>
<codeline lineno="437"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(vRandom.size()<sp/>!=<sp/>nTried<sp/>+<sp/>nNew)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-7;</highlight></codeline>
<codeline lineno="438"><highlight class="normal"></highlight></codeline>
<codeline lineno="439"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(std::map&lt;int,<sp/>CAddrInfo&gt;::iterator<sp/>it<sp/>=<sp/>mapInfo.begin();<sp/>it<sp/>!=<sp/>mapInfo.end();<sp/>it++)</highlight></codeline>
<codeline lineno="440"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="441"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n<sp/>=<sp/>(*it).first;</highlight></codeline>
<codeline lineno="442"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_c_addr_info" kindref="compound">CAddrInfo</ref><sp/>&amp;info<sp/>=<sp/>(*it).second;</highlight></codeline>
<codeline lineno="443"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(info.fInTried)</highlight></codeline>
<codeline lineno="444"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="445"><highlight class="normal"></highlight></codeline>
<codeline lineno="446"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!info.nLastSuccess)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="447"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(info.nRefCount)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-2;</highlight></codeline>
<codeline lineno="448"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>setTried.insert(n);</highlight></codeline>
<codeline lineno="449"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="450"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(info.nRefCount<sp/>&lt;<sp/>0<sp/>||<sp/>info.nRefCount<sp/>&gt;<sp/><ref refid="addrman_8h_1a230e30813119d10bdba59c1f8cc789cd" kindref="member">ADDRMAN_NEW_BUCKETS_PER_ADDRESS</ref>)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-3;</highlight></codeline>
<codeline lineno="451"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!info.nRefCount)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-4;</highlight></codeline>
<codeline lineno="452"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mapNew[n]<sp/>=<sp/>info.nRefCount;</highlight></codeline>
<codeline lineno="453"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="454"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mapAddr[info]<sp/>!=<sp/>n)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-5;</highlight></codeline>
<codeline lineno="455"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(info.nRandomPos&lt;0<sp/>||<sp/>info.nRandomPos&gt;=vRandom.size()<sp/>||<sp/>vRandom[info.nRandomPos]<sp/>!=<sp/>n)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-14;</highlight></codeline>
<codeline lineno="456"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(info.<ref refid="class_c_address_1abcf198429efe135fa2424f7dbc0048b0" kindref="member">nLastTry</ref><sp/>&lt;<sp/>0)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-6;</highlight></codeline>
<codeline lineno="457"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(info.nLastSuccess<sp/>&lt;<sp/>0)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-8;</highlight></codeline>
<codeline lineno="458"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="459"><highlight class="normal"></highlight></codeline>
<codeline lineno="460"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(setTried.size()<sp/>!=<sp/>nTried)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-9;</highlight></codeline>
<codeline lineno="461"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mapNew.size()<sp/>!=<sp/>nNew)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-10;</highlight></codeline>
<codeline lineno="462"><highlight class="normal"></highlight></codeline>
<codeline lineno="463"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n=0;<sp/>n&lt;vvTried.size();<sp/>n++)</highlight></codeline>
<codeline lineno="464"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="465"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;int&gt;<sp/>&amp;vTried<sp/>=<sp/>vvTried[n];</highlight></codeline>
<codeline lineno="466"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(std::vector&lt;int&gt;::iterator<sp/>it<sp/>=<sp/>vTried.begin();<sp/>it<sp/>!=<sp/>vTried.end();<sp/>it++)</highlight></codeline>
<codeline lineno="467"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="468"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!setTried.count(*it))<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-11;</highlight></codeline>
<codeline lineno="469"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>setTried.erase(*it);</highlight></codeline>
<codeline lineno="470"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="471"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="472"><highlight class="normal"></highlight></codeline>
<codeline lineno="473"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n=0;<sp/>n&lt;vvNew.size();<sp/>n++)</highlight></codeline>
<codeline lineno="474"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="475"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::set&lt;int&gt;<sp/>&amp;vNew<sp/>=<sp/>vvNew[n];</highlight></codeline>
<codeline lineno="476"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(std::set&lt;int&gt;::iterator<sp/>it<sp/>=<sp/>vNew.begin();<sp/>it<sp/>!=<sp/>vNew.end();<sp/>it++)</highlight></codeline>
<codeline lineno="477"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="478"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!mapNew.count(*it))<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-12;</highlight></codeline>
<codeline lineno="479"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(--mapNew[*it]<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="480"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mapNew.erase(*it);</highlight></codeline>
<codeline lineno="481"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="482"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="483"><highlight class="normal"></highlight></codeline>
<codeline lineno="484"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(setTried.size())<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-13;</highlight></codeline>
<codeline lineno="485"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(mapNew.size())<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-15;</highlight></codeline>
<codeline lineno="486"><highlight class="normal"></highlight></codeline>
<codeline lineno="487"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="488"><highlight class="normal">}</highlight></codeline>
<codeline lineno="489"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="490"><highlight class="normal"></highlight></codeline>
<codeline lineno="491" refid="class_c_addr_man_1aff86d04dc7c0e0afae3ff5998417db17" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_c_addr_man_1aff86d04dc7c0e0afae3ff5998417db17" kindref="member">CAddrMan::GetAddr_</ref>(std::vector&lt;CAddress&gt;<sp/>&amp;vAddr)</highlight></codeline>
<codeline lineno="492"><highlight class="normal">{</highlight></codeline>
<codeline lineno="493"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nNodes<sp/>=<sp/><ref refid="addrman_8h_1a06edfd03ad361fbc74794e1c533d1bc5" kindref="member">ADDRMAN_GETADDR_MAX_PCT</ref><sp/>*<sp/>vRandom.size()<sp/>/<sp/>100;</highlight></codeline>
<codeline lineno="494"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(nNodes<sp/>&gt;<sp/><ref refid="addrman_8h_1ad10877f29a66224fce5c20d33e26448a" kindref="member">ADDRMAN_GETADDR_MAX</ref>)</highlight></codeline>
<codeline lineno="495"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nNodes<sp/>=<sp/><ref refid="addrman_8h_1ad10877f29a66224fce5c20d33e26448a" kindref="member">ADDRMAN_GETADDR_MAX</ref>;</highlight></codeline>
<codeline lineno="496"><highlight class="normal"></highlight></codeline>
<codeline lineno="497"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>gather<sp/>a<sp/>list<sp/>of<sp/>random<sp/>nodes,<sp/>skipping<sp/>those<sp/>of<sp/>low<sp/>quality</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="498"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n<sp/>=<sp/>0;<sp/>n<sp/>&lt;<sp/>vRandom.size();<sp/>n++)</highlight></codeline>
<codeline lineno="499"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="500"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(vAddr.size()<sp/>&gt;=<sp/>nNodes)</highlight></codeline>
<codeline lineno="501"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="502"><highlight class="normal"></highlight></codeline>
<codeline lineno="503"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nRndPos<sp/>=<sp/><ref refid="util_8cpp_1a0e44e088732172da6662db2d5e37d4b2" kindref="member">GetRandInt</ref>(vRandom.size()<sp/>-<sp/>n)<sp/>+<sp/>n;</highlight></codeline>
<codeline lineno="504"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SwapRandom(n,<sp/>nRndPos);</highlight></codeline>
<codeline lineno="505"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assert(mapInfo.count(vRandom[n])<sp/>==<sp/>1);</highlight></codeline>
<codeline lineno="506"><highlight class="normal"></highlight></codeline>
<codeline lineno="507"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_c_addr_info" kindref="compound">CAddrInfo</ref>&amp;<sp/>ai<sp/>=<sp/>mapInfo[vRandom[n]];</highlight></codeline>
<codeline lineno="508"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!ai.IsTerrible())</highlight></codeline>
<codeline lineno="509"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vAddr.push_back(ai);</highlight></codeline>
<codeline lineno="510"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="511"><highlight class="normal">}</highlight></codeline>
<codeline lineno="512"><highlight class="normal"></highlight></codeline>
<codeline lineno="513" refid="class_c_addr_man_1a1ae72643c51293f3f3345e74ce0368ca" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_c_addr_man_1a1ae72643c51293f3f3345e74ce0368ca" kindref="member">CAddrMan::Connected_</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_c_service" kindref="compound">CService</ref><sp/>&amp;addr,<sp/><ref refid="stdint_8h_1adec1df1b8b51cb32b77e5b86fff46471" kindref="member">int64_t</ref><sp/>nTime)</highlight></codeline>
<codeline lineno="514"><highlight class="normal">{</highlight></codeline>
<codeline lineno="515"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_c_addr_info" kindref="compound">CAddrInfo</ref><sp/>*pinfo<sp/>=<sp/>Find(addr);</highlight></codeline>
<codeline lineno="516"><highlight class="normal"></highlight></codeline>
<codeline lineno="517"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>if<sp/>not<sp/>found,<sp/>bail<sp/>out</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="518"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!pinfo)</highlight></codeline>
<codeline lineno="519"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="520"><highlight class="normal"></highlight></codeline>
<codeline lineno="521"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_c_addr_info" kindref="compound">CAddrInfo</ref><sp/>&amp;info<sp/>=<sp/>*pinfo;</highlight></codeline>
<codeline lineno="522"><highlight class="normal"></highlight></codeline>
<codeline lineno="523"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>check<sp/>whether<sp/>we<sp/>are<sp/>talking<sp/>about<sp/>the<sp/>exact<sp/>same<sp/>CService<sp/>(including<sp/>same<sp/>port)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="524"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(info<sp/>!=<sp/>addr)</highlight></codeline>
<codeline lineno="525"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="526"><highlight class="normal"></highlight></codeline>
<codeline lineno="527"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>update<sp/>info</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="528"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="stdint_8h_1adec1df1b8b51cb32b77e5b86fff46471" kindref="member">int64_t</ref><sp/>nUpdateInterval<sp/>=<sp/>20<sp/>*<sp/>60;</highlight></codeline>
<codeline lineno="529"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(nTime<sp/>-<sp/>info.<ref refid="class_c_address_1ac1c44aac968b11f90ce529b133ae4e9b" kindref="member">nTime</ref><sp/>&gt;<sp/>nUpdateInterval)</highlight></codeline>
<codeline lineno="530"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>info.<ref refid="class_c_address_1ac1c44aac968b11f90ce529b133ae4e9b" kindref="member">nTime</ref><sp/>=<sp/>nTime;</highlight></codeline>
<codeline lineno="531"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="/home/dev/ds-160209/src/addrman.cpp"/>
  </compounddef>
</doxygen>
