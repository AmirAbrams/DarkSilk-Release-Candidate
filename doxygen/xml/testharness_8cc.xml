<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.9.1">
  <compounddef id="testharness_8cc" kind="file" language="C++">
    <compoundname>testharness.cc</compoundname>
    <includes refid="testharness_8h" local="yes">util/testharness.h</includes>
    <includes local="no">string</includes>
    <includes local="no">stdlib.h</includes>
    <includes local="no">sys/stat.h</includes>
    <includes local="no">sys/types.h</includes>
    <incdepgraph>
      <node id="10562">
        <label>sys/stat.h</label>
      </node>
      <node id="10554">
        <label>stdarg.h</label>
      </node>
      <node id="10561">
        <label>util/random.h</label>
        <link refid="random_8h"/>
        <childnode refid="10555" relation="include">
        </childnode>
      </node>
      <node id="10558">
        <label>assert.h</label>
      </node>
      <node id="10546">
        <label>/home/dev/ds-160209/src/leveldb/util/testharness.cc</label>
        <link refid="testharness.cc"/>
        <childnode refid="10547" relation="include">
        </childnode>
        <childnode refid="10552" relation="include">
        </childnode>
        <childnode refid="10549" relation="include">
        </childnode>
        <childnode refid="10562" relation="include">
        </childnode>
        <childnode refid="10563" relation="include">
        </childnode>
      </node>
      <node id="10549">
        <label>stdlib.h</label>
      </node>
      <node id="10552">
        <label>string</label>
      </node>
      <node id="10559">
        <label>stddef.h</label>
      </node>
      <node id="10556">
        <label>leveldb/status.h</label>
        <link refid="status_8h"/>
        <childnode refid="10552" relation="include">
        </childnode>
        <childnode refid="10557" relation="include">
        </childnode>
      </node>
      <node id="10563">
        <label>sys/types.h</label>
      </node>
      <node id="10560">
        <label>string.h</label>
      </node>
      <node id="10553">
        <label>vector</label>
      </node>
      <node id="10550">
        <label>sstream</label>
      </node>
      <node id="10555">
        <label>stdint.h</label>
        <link refid="stdint_8h"/>
      </node>
      <node id="10547">
        <label>util/testharness.h</label>
        <link refid="testharness_8h"/>
        <childnode refid="10548" relation="include">
        </childnode>
        <childnode refid="10549" relation="include">
        </childnode>
        <childnode refid="10550" relation="include">
        </childnode>
        <childnode refid="10551" relation="include">
        </childnode>
        <childnode refid="10557" relation="include">
        </childnode>
        <childnode refid="10561" relation="include">
        </childnode>
      </node>
      <node id="10557">
        <label>leveldb/slice.h</label>
        <link refid="slice_8h"/>
        <childnode refid="10558" relation="include">
        </childnode>
        <childnode refid="10559" relation="include">
        </childnode>
        <childnode refid="10560" relation="include">
        </childnode>
        <childnode refid="10552" relation="include">
        </childnode>
      </node>
      <node id="10551">
        <label>leveldb/env.h</label>
        <link refid="env_8h"/>
        <childnode refid="10552" relation="include">
        </childnode>
        <childnode refid="10553" relation="include">
        </childnode>
        <childnode refid="10554" relation="include">
        </childnode>
        <childnode refid="10555" relation="include">
        </childnode>
        <childnode refid="10556" relation="include">
        </childnode>
      </node>
      <node id="10548">
        <label>stdio.h</label>
      </node>
    </incdepgraph>
    <innernamespace refid="namespaceleveldb">leveldb</innernamespace>
    <innernamespace refid="namespaceleveldb_1_1test">leveldb::test</innernamespace>
      <sectiondef kind="var">
      <memberdef kind="variable" id="testharness_8cc_1a70ff0f6c026c3dd1ef6aaf504e7fddc3" prot="public" static="no" mutable="no">
        <type>const char *</type>
        <definition>const char* base</definition>
        <argsstring></argsstring>
        <name>base</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/leveldb/util/testharness.cc" line="17" column="1" bodyfile="/home/dev/ds-160209/src/leveldb/util/testharness.cc" bodystart="17" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="testharness_8cc_1a8f8f80d37794cde9472343e4487ba3eb" prot="public" static="no" mutable="no">
        <type>const char *</type>
        <definition>const char* name</definition>
        <argsstring></argsstring>
        <name>name</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/leveldb/util/testharness.cc" line="18" column="1" bodyfile="/home/dev/ds-160209/src/leveldb/util/testharness.cc" bodystart="18" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="testharness_8cc_1ac98d5d20f5aab3ef51e0ff5e30d16925" prot="public" static="no" mutable="no">
        <type>void(*</type>
        <definition>void(* func) ()</definition>
        <argsstring>)()</argsstring>
        <name>func</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/leveldb/util/testharness.cc" line="19" column="1" bodyfile="/home/dev/ds-160209/src/leveldb/util/testharness.cc" bodystart="19" bodyend="-1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">//<sp/>Copyright<sp/>(c)<sp/>2011-2016<sp/>The<sp/>LevelDB<sp/>Authors.<sp/>All<sp/>rights<sp/>reserved.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Use<sp/>of<sp/>this<sp/>source<sp/>code<sp/>is<sp/>governed<sp/>by<sp/>a<sp/>BSD-style<sp/>license<sp/>that<sp/>can<sp/>be</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="comment">//<sp/>found<sp/>in<sp/>the<sp/>LICENSE<sp/>file.<sp/>See<sp/>the<sp/>AUTHORS<sp/>file<sp/>for<sp/>names<sp/>of<sp/>contributors.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="testharness_8h" kindref="compound">util/testharness.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;string&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdlib.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;sys/stat.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;sys/types.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespaceleveldb" kindref="compound">leveldb</ref><sp/>{</highlight></codeline>
<codeline lineno="13" refid="namespaceleveldb_1_1test" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="db__test_8cc_1a9cc668c18debdbcad21b45fdd8158648" kindref="member">test</ref><sp/>{</highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">Test<sp/>{</highlight></codeline>
<codeline lineno="17" refid="testharness_8cc_1a70ff0f6c026c3dd1ef6aaf504e7fddc3" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/><ref refid="testharness_8cc_1a70ff0f6c026c3dd1ef6aaf504e7fddc3" kindref="member">base</ref>;</highlight></codeline>
<codeline lineno="18" refid="testharness_8cc_1a8f8f80d37794cde9472343e4487ba3eb" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/><ref refid="testharness_8cc_1a8f8f80d37794cde9472343e4487ba3eb" kindref="member">name</ref>;</highlight></codeline>
<codeline lineno="19" refid="testharness_8cc_1ac98d5d20f5aab3ef51e0ff5e30d16925" refkind="member"><highlight class="normal"><sp/><sp/>void<sp/>(*<ref refid="testharness_8cc_1ac98d5d20f5aab3ef51e0ff5e30d16925" kindref="member">func</ref>)();</highlight></codeline>
<codeline lineno="20"><highlight class="normal">};</highlight></codeline>
<codeline lineno="21"><highlight class="normal">std::vector&lt;Test&gt;*<sp/>tests;</highlight></codeline>
<codeline lineno="22"><highlight class="normal">}</highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight></codeline>
<codeline lineno="24" refid="namespaceleveldb_1_1test_1aecde3e0440c4462e8d73aad728e3e819" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="namespaceleveldb_1_1test_1aecde3e0440c4462e8d73aad728e3e819" kindref="member">RegisterTest</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/><ref refid="testharness_8cc_1a70ff0f6c026c3dd1ef6aaf504e7fddc3" kindref="member">base</ref>,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/><ref refid="testharness_8cc_1a8f8f80d37794cde9472343e4487ba3eb" kindref="member">name</ref>,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>(*<ref refid="testharness_8cc_1ac98d5d20f5aab3ef51e0ff5e30d16925" kindref="member">func</ref>)())<sp/>{</highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(tests<sp/>==<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/><sp/><sp/>tests<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>std::vector&lt;Test&gt;;</highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/>Test<sp/>t;</highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/>t.base<sp/>=<sp/><ref refid="testharness_8cc_1a70ff0f6c026c3dd1ef6aaf504e7fddc3" kindref="member">base</ref>;</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/>t.name<sp/>=<sp/><ref refid="testharness_8cc_1a8f8f80d37794cde9472343e4487ba3eb" kindref="member">name</ref>;</highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/>t.func<sp/>=<sp/><ref refid="testharness_8cc_1ac98d5d20f5aab3ef51e0ff5e30d16925" kindref="member">func</ref>;</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/>tests-&gt;push_back(t);</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="34"><highlight class="normal">}</highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight></codeline>
<codeline lineno="36" refid="namespaceleveldb_1_1test_1a3329162c54a0bff42d41c2ac86b2580a" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="namespaceleveldb_1_1test_1a3329162c54a0bff42d41c2ac86b2580a" kindref="member">RunAllTests</ref>()<sp/>{</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>matcher<sp/>=<sp/>getenv(</highlight><highlight class="stringliteral">&quot;LEVELDB_TESTS&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>num<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(tests<sp/>!=<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>tests-&gt;size();<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Test&amp;<sp/>t<sp/>=<sp/>(*tests)[i];</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(matcher<sp/>!=<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>name<sp/>=<sp/>t.base;</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>name.push_back(</highlight><highlight class="charliteral">&apos;.&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>name.append(t.name);</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(strstr(name.c_str(),<sp/>matcher)<sp/>==<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(stderr,<sp/></highlight><highlight class="stringliteral">&quot;====<sp/>Test<sp/>%s.%s\n&quot;</highlight><highlight class="normal">,<sp/>t.base,<sp/>t.name);</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>(*t.func)();</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>++num;</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/>fprintf(stderr,<sp/></highlight><highlight class="stringliteral">&quot;====<sp/>PASSED<sp/>%d<sp/>tests\n&quot;</highlight><highlight class="normal">,<sp/>num);</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="58"><highlight class="normal">}</highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight></codeline>
<codeline lineno="60" refid="namespaceleveldb_1_1test_1ac259aab85eedba03d163bb3a86ae4645" refkind="member"><highlight class="normal">std::string<sp/><ref refid="namespaceleveldb_1_1test_1ac259aab85eedba03d163bb3a86ae4645" kindref="member">TmpDir</ref>()<sp/>{</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/>std::string<sp/>dir;</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><ref refid="classleveldb_1_1_status" kindref="compound">Status</ref><sp/>s<sp/>=<sp/><ref refid="classleveldb_1_1_env_1ae15b67e650ff6790059745fd1b3bf3e7" kindref="member">Env::Default</ref>()-&gt;<ref refid="classleveldb_1_1_env_1ab57a55be37d4d57bf3c0ff83ee689f95" kindref="member">GetTestDirectory</ref>(&amp;dir);</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><ref refid="testharness_8h_1ac2101fb1ffd0c81c17520b82f0fcfe21" kindref="member">ASSERT_TRUE</ref>(s.<ref refid="classleveldb_1_1_status_1ab31e89a858c766716e3dc952be857c65" kindref="member">ok</ref>())<sp/>&lt;&lt;<sp/>s.<ref refid="classleveldb_1_1_status_1aa8b56d8fe2cd1873778de5d1e5407866" kindref="member">ToString</ref>();</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>dir;</highlight></codeline>
<codeline lineno="65"><highlight class="normal">}</highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight></codeline>
<codeline lineno="67" refid="namespaceleveldb_1_1test_1a0d48ce23bccd2763df90789cb3aac03c" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="namespaceleveldb_1_1test_1a0d48ce23bccd2763df90789cb3aac03c" kindref="member">RandomSeed</ref>()<sp/>{</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>env<sp/>=<sp/>getenv(</highlight><highlight class="stringliteral">&quot;TEST_RANDOM_SEED&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>result<sp/>=<sp/>(env<sp/>!=<sp/>NULL<sp/>?<sp/><ref refid="util_8h_1aa5ce96ec36f4413f820cec9c1831c070" kindref="member">atoi</ref>(env)<sp/>:<sp/>301);</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(result<sp/>&lt;=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/>result<sp/>=<sp/>301;</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="74"><highlight class="normal">}</highlight></codeline>
<codeline lineno="75"><highlight class="normal"></highlight></codeline>
<codeline lineno="76"><highlight class="normal">}<sp/><sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>test</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="77"><highlight class="normal">}<sp/><sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>leveldb</highlight><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="/home/dev/ds-160209/src/leveldb/util/testharness.cc"/>
  </compounddef>
</doxygen>
