<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.9.1">
  <compounddef id="coding__test_8cc" kind="file" language="C++">
    <compoundname>coding_test.cc</compoundname>
    <includes refid="coding_8h" local="yes">util/coding.h</includes>
    <includes refid="testharness_8h" local="yes">util/testharness.h</includes>
    <incdepgraph>
      <node id="10222">
        <label>stdarg.h</label>
      </node>
      <node id="10224">
        <label>util/random.h</label>
        <link refid="random_8h"/>
        <childnode refid="10209" relation="include">
        </childnode>
      </node>
      <node id="10213">
        <label>assert.h</label>
      </node>
      <node id="10218">
        <label>stdlib.h</label>
      </node>
      <node id="10211">
        <label>string</label>
      </node>
      <node id="10214">
        <label>stddef.h</label>
      </node>
      <node id="10223">
        <label>leveldb/status.h</label>
        <link refid="status_8h"/>
        <childnode refid="10211" relation="include">
        </childnode>
        <childnode refid="10212" relation="include">
        </childnode>
      </node>
      <node id="10208">
        <label>util/coding.h</label>
        <link refid="coding_8h"/>
        <childnode refid="10209" relation="include">
        </childnode>
        <childnode refid="10210" relation="include">
        </childnode>
        <childnode refid="10211" relation="include">
        </childnode>
        <childnode refid="10212" relation="include">
        </childnode>
        <childnode refid="10215" relation="include">
        </childnode>
      </node>
      <node id="10210">
        <label>string.h</label>
      </node>
      <node id="10221">
        <label>vector</label>
      </node>
      <node id="10219">
        <label>sstream</label>
      </node>
      <node id="10215">
        <label>port/port.h</label>
        <link refid="port_8h"/>
        <childnode refid="10210" relation="include">
        </childnode>
      </node>
      <node id="10209">
        <label>stdint.h</label>
        <link refid="stdint_8h"/>
      </node>
      <node id="10216">
        <label>util/testharness.h</label>
        <link refid="testharness_8h"/>
        <childnode refid="10217" relation="include">
        </childnode>
        <childnode refid="10218" relation="include">
        </childnode>
        <childnode refid="10219" relation="include">
        </childnode>
        <childnode refid="10220" relation="include">
        </childnode>
        <childnode refid="10212" relation="include">
        </childnode>
        <childnode refid="10224" relation="include">
        </childnode>
      </node>
      <node id="10212">
        <label>leveldb/slice.h</label>
        <link refid="slice_8h"/>
        <childnode refid="10213" relation="include">
        </childnode>
        <childnode refid="10214" relation="include">
        </childnode>
        <childnode refid="10210" relation="include">
        </childnode>
        <childnode refid="10211" relation="include">
        </childnode>
      </node>
      <node id="10220">
        <label>leveldb/env.h</label>
        <link refid="env_8h"/>
        <childnode refid="10211" relation="include">
        </childnode>
        <childnode refid="10221" relation="include">
        </childnode>
        <childnode refid="10222" relation="include">
        </childnode>
        <childnode refid="10209" relation="include">
        </childnode>
        <childnode refid="10223" relation="include">
        </childnode>
      </node>
      <node id="10207">
        <label>/home/dev/ds-160209/src/leveldb/util/coding_test.cc</label>
        <link refid="coding_test.cc"/>
        <childnode refid="10208" relation="include">
        </childnode>
        <childnode refid="10216" relation="include">
        </childnode>
      </node>
      <node id="10217">
        <label>stdio.h</label>
      </node>
    </incdepgraph>
    <innerclass refid="classleveldb_1_1_coding" prot="public">leveldb::Coding</innerclass>
    <innernamespace refid="namespaceleveldb">leveldb</innernamespace>
      <sectiondef kind="func">
      <memberdef kind="function" id="coding__test_8cc_1a3c04138a5bfe5d72780bb7e82a18e627" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int main</definition>
        <argsstring>(int argc, char **argv)</argsstring>
        <name>main</name>
        <param>
          <type>int</type>
          <declname>argc</declname>
        </param>
        <param>
          <type>char **</type>
          <declname>argv</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dev/ds-160209/src/leveldb/util/coding_test.cc" line="194" column="1" bodyfile="/home/dev/ds-160209/src/leveldb/util/coding_test.cc" bodystart="194" bodyend="196"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">//<sp/>Copyright<sp/>(c)<sp/>2011-2016<sp/>The<sp/>LevelDB<sp/>Authors.<sp/>All<sp/>rights<sp/>reserved.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Use<sp/>of<sp/>this<sp/>source<sp/>code<sp/>is<sp/>governed<sp/>by<sp/>a<sp/>BSD-style<sp/>license<sp/>that<sp/>can<sp/>be</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="comment">//<sp/>found<sp/>in<sp/>the<sp/>LICENSE<sp/>file.<sp/>See<sp/>the<sp/>AUTHORS<sp/>file<sp/>for<sp/>names<sp/>of<sp/>contributors.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="coding_8h" kindref="compound">util/coding.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="testharness_8h" kindref="compound">util/testharness.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespaceleveldb" kindref="compound">leveldb</ref><sp/>{</highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight></codeline>
<codeline lineno="11" refid="classleveldb_1_1_coding" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classleveldb_1_1_coding" kindref="compound">Coding</ref><sp/>{<sp/>};</highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight></codeline>
<codeline lineno="13" refid="namespaceleveldb_1a6c2537f909125665159a4161fdd21e27" refkind="member"><highlight class="normal"><ref refid="namespaceleveldb_1a9c4f7d5038dfc2985100b60ae2549fde" kindref="member">TEST</ref>(<ref refid="classleveldb_1_1_coding" kindref="compound">Coding</ref>,<sp/>Fixed32)<sp/>{</highlight></codeline>
<codeline lineno="14"><highlight class="normal"><sp/><sp/>std::string<sp/>s;</highlight></codeline>
<codeline lineno="15"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<ref refid="stdint_8h_1a435d1572bf3f880d55459d9805097f62" kindref="member">uint32_t</ref><sp/>v<sp/>=<sp/>0;<sp/>v<sp/>&lt;<sp/>100000;<sp/>v++)<sp/>{</highlight></codeline>
<codeline lineno="16"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceleveldb_1ac95f82421989b07d9d4993bdc2e2c555" kindref="member">PutFixed32</ref>(&amp;s,<sp/>v);</highlight></codeline>
<codeline lineno="17"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>p<sp/>=<sp/>s.data();</highlight></codeline>
<codeline lineno="20"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<ref refid="stdint_8h_1a435d1572bf3f880d55459d9805097f62" kindref="member">uint32_t</ref><sp/>v<sp/>=<sp/>0;<sp/>v<sp/>&lt;<sp/>100000;<sp/>v++)<sp/>{</highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="stdint_8h_1a435d1572bf3f880d55459d9805097f62" kindref="member">uint32_t</ref><sp/>actual<sp/>=<sp/><ref refid="namespaceleveldb_1adae574304f9d1ed3e95742167cd449a9" kindref="member">DecodeFixed32</ref>(p);</highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="testharness_8h_1a9cc34fd87cb865c77439a5d39b3b111b" kindref="member">ASSERT_EQ</ref>(v,<sp/>actual);</highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/><sp/><sp/>p<sp/>+=<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="stdint_8h_1a435d1572bf3f880d55459d9805097f62" kindref="member">uint32_t</ref>);</highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="25"><highlight class="normal">}</highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight></codeline>
<codeline lineno="27" refid="namespaceleveldb_1a12a121ac303742fe369f000bd6f0d3ef" refkind="member"><highlight class="normal"><ref refid="namespaceleveldb_1a9c4f7d5038dfc2985100b60ae2549fde" kindref="member">TEST</ref>(<ref refid="classleveldb_1_1_coding" kindref="compound">Coding</ref>,<sp/>Fixed64)<sp/>{</highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/>std::string<sp/>s;</highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>power<sp/>=<sp/>0;<sp/>power<sp/>&lt;=<sp/>63;<sp/>power++)<sp/>{</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="stdint_8h_1aaa5d1cd013383c889537491c3cfd9aad" kindref="member">uint64_t</ref><sp/>v<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal"><ref refid="stdint_8h_1aaa5d1cd013383c889537491c3cfd9aad" kindref="member">uint64_t</ref></highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(1)<sp/>&lt;&lt;<sp/>power;</highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceleveldb_1a720cd9030ba5f867ded835b57caa1d06" kindref="member">PutFixed64</ref>(&amp;s,<sp/>v<sp/>-<sp/>1);</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceleveldb_1a720cd9030ba5f867ded835b57caa1d06" kindref="member">PutFixed64</ref>(&amp;s,<sp/>v<sp/>+<sp/>0);</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceleveldb_1a720cd9030ba5f867ded835b57caa1d06" kindref="member">PutFixed64</ref>(&amp;s,<sp/>v<sp/>+<sp/>1);</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>p<sp/>=<sp/>s.data();</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>power<sp/>=<sp/>0;<sp/>power<sp/>&lt;=<sp/>63;<sp/>power++)<sp/>{</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="stdint_8h_1aaa5d1cd013383c889537491c3cfd9aad" kindref="member">uint64_t</ref><sp/>v<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal"><ref refid="stdint_8h_1aaa5d1cd013383c889537491c3cfd9aad" kindref="member">uint64_t</ref></highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(1)<sp/>&lt;&lt;<sp/>power;</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="stdint_8h_1aaa5d1cd013383c889537491c3cfd9aad" kindref="member">uint64_t</ref><sp/>actual;</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/>actual<sp/>=<sp/><ref refid="namespaceleveldb_1a239098b0291873752d0be16633652825" kindref="member">DecodeFixed64</ref>(p);</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="testharness_8h_1a9cc34fd87cb865c77439a5d39b3b111b" kindref="member">ASSERT_EQ</ref>(v-1,<sp/>actual);</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/>p<sp/>+=<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="stdint_8h_1aaa5d1cd013383c889537491c3cfd9aad" kindref="member">uint64_t</ref>);</highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/>actual<sp/>=<sp/><ref refid="namespaceleveldb_1a239098b0291873752d0be16633652825" kindref="member">DecodeFixed64</ref>(p);</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="testharness_8h_1a9cc34fd87cb865c77439a5d39b3b111b" kindref="member">ASSERT_EQ</ref>(v+0,<sp/>actual);</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/>p<sp/>+=<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="stdint_8h_1aaa5d1cd013383c889537491c3cfd9aad" kindref="member">uint64_t</ref>);</highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/>actual<sp/>=<sp/><ref refid="namespaceleveldb_1a239098b0291873752d0be16633652825" kindref="member">DecodeFixed64</ref>(p);</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="testharness_8h_1a9cc34fd87cb865c77439a5d39b3b111b" kindref="member">ASSERT_EQ</ref>(v+1,<sp/>actual);</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/>p<sp/>+=<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="stdint_8h_1aaa5d1cd013383c889537491c3cfd9aad" kindref="member">uint64_t</ref>);</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="52"><highlight class="normal">}</highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Test<sp/>that<sp/>encoding<sp/>routines<sp/>generate<sp/>little-endian<sp/>encodings</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="55" refid="namespaceleveldb_1a01c88cd19143f9c3a8b0f591a3e459c8" refkind="member"><highlight class="normal"><ref refid="namespaceleveldb_1a9c4f7d5038dfc2985100b60ae2549fde" kindref="member">TEST</ref>(<ref refid="classleveldb_1_1_coding" kindref="compound">Coding</ref>,<sp/>EncodingOutput)<sp/>{</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/>std::string<sp/>dst;</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><ref refid="namespaceleveldb_1ac95f82421989b07d9d4993bdc2e2c555" kindref="member">PutFixed32</ref>(&amp;dst,<sp/>0x04030201);</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><ref refid="testharness_8h_1a9cc34fd87cb865c77439a5d39b3b111b" kindref="member">ASSERT_EQ</ref>(4,<sp/>dst.size());</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><ref refid="testharness_8h_1a9cc34fd87cb865c77439a5d39b3b111b" kindref="member">ASSERT_EQ</ref>(0x01,<sp/>static_cast&lt;int&gt;(dst[0]));</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><ref refid="testharness_8h_1a9cc34fd87cb865c77439a5d39b3b111b" kindref="member">ASSERT_EQ</ref>(0x02,<sp/>static_cast&lt;int&gt;(dst[1]));</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><ref refid="testharness_8h_1a9cc34fd87cb865c77439a5d39b3b111b" kindref="member">ASSERT_EQ</ref>(0x03,<sp/>static_cast&lt;int&gt;(dst[2]));</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><ref refid="testharness_8h_1a9cc34fd87cb865c77439a5d39b3b111b" kindref="member">ASSERT_EQ</ref>(0x04,<sp/>static_cast&lt;int&gt;(dst[3]));</highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/>dst.clear();</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><ref refid="namespaceleveldb_1a720cd9030ba5f867ded835b57caa1d06" kindref="member">PutFixed64</ref>(&amp;dst,<sp/>0x0807060504030201ull);</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><ref refid="testharness_8h_1a9cc34fd87cb865c77439a5d39b3b111b" kindref="member">ASSERT_EQ</ref>(8,<sp/>dst.size());</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><ref refid="testharness_8h_1a9cc34fd87cb865c77439a5d39b3b111b" kindref="member">ASSERT_EQ</ref>(0x01,<sp/>static_cast&lt;int&gt;(dst[0]));</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><ref refid="testharness_8h_1a9cc34fd87cb865c77439a5d39b3b111b" kindref="member">ASSERT_EQ</ref>(0x02,<sp/>static_cast&lt;int&gt;(dst[1]));</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><ref refid="testharness_8h_1a9cc34fd87cb865c77439a5d39b3b111b" kindref="member">ASSERT_EQ</ref>(0x03,<sp/>static_cast&lt;int&gt;(dst[2]));</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><ref refid="testharness_8h_1a9cc34fd87cb865c77439a5d39b3b111b" kindref="member">ASSERT_EQ</ref>(0x04,<sp/>static_cast&lt;int&gt;(dst[3]));</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><ref refid="testharness_8h_1a9cc34fd87cb865c77439a5d39b3b111b" kindref="member">ASSERT_EQ</ref>(0x05,<sp/>static_cast&lt;int&gt;(dst[4]));</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><ref refid="testharness_8h_1a9cc34fd87cb865c77439a5d39b3b111b" kindref="member">ASSERT_EQ</ref>(0x06,<sp/>static_cast&lt;int&gt;(dst[5]));</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><ref refid="testharness_8h_1a9cc34fd87cb865c77439a5d39b3b111b" kindref="member">ASSERT_EQ</ref>(0x07,<sp/>static_cast&lt;int&gt;(dst[6]));</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><ref refid="testharness_8h_1a9cc34fd87cb865c77439a5d39b3b111b" kindref="member">ASSERT_EQ</ref>(0x08,<sp/>static_cast&lt;int&gt;(dst[7]));</highlight></codeline>
<codeline lineno="75"><highlight class="normal">}</highlight></codeline>
<codeline lineno="76"><highlight class="normal"></highlight></codeline>
<codeline lineno="77" refid="namespaceleveldb_1acc08a5b06f805e1103bc63652513c3ec" refkind="member"><highlight class="normal"><ref refid="namespaceleveldb_1a9c4f7d5038dfc2985100b60ae2549fde" kindref="member">TEST</ref>(<ref refid="classleveldb_1_1_coding" kindref="compound">Coding</ref>,<sp/>Varint32)<sp/>{</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/>std::string<sp/>s;</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<ref refid="stdint_8h_1a435d1572bf3f880d55459d9805097f62" kindref="member">uint32_t</ref><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>(32<sp/>*<sp/>32);<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="stdint_8h_1a435d1572bf3f880d55459d9805097f62" kindref="member">uint32_t</ref><sp/>v<sp/>=<sp/>(i<sp/>/<sp/>32)<sp/>&lt;&lt;<sp/>(i<sp/>%<sp/>32);</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceleveldb_1ab00e282f3fd7058b8a41afcf4b56e685" kindref="member">PutVarint32</ref>(&amp;s,<sp/>v);</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="83"><highlight class="normal"></highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>p<sp/>=<sp/>s.data();</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>limit<sp/>=<sp/>p<sp/>+<sp/>s.size();</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<ref refid="stdint_8h_1a435d1572bf3f880d55459d9805097f62" kindref="member">uint32_t</ref><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>(32<sp/>*<sp/>32);<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="stdint_8h_1a435d1572bf3f880d55459d9805097f62" kindref="member">uint32_t</ref><sp/>expected<sp/>=<sp/>(i<sp/>/<sp/>32)<sp/>&lt;&lt;<sp/>(i<sp/>%<sp/>32);</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="stdint_8h_1a435d1572bf3f880d55459d9805097f62" kindref="member">uint32_t</ref><sp/>actual;</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/><ref refid="db__bench_8cc_1ab376b87f96a574a793c03c53e75afec8" kindref="member">start</ref><sp/>=<sp/>p;</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/>p<sp/>=<sp/><ref refid="namespaceleveldb_1addd01473dddfbc70ba64956fe6fac20c" kindref="member">GetVarint32Ptr</ref>(p,<sp/>limit,<sp/>&amp;actual);</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="testharness_8h_1ac2101fb1ffd0c81c17520b82f0fcfe21" kindref="member">ASSERT_TRUE</ref>(p<sp/>!=<sp/>NULL);</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="testharness_8h_1a9cc34fd87cb865c77439a5d39b3b111b" kindref="member">ASSERT_EQ</ref>(expected,<sp/>actual);</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="testharness_8h_1a9cc34fd87cb865c77439a5d39b3b111b" kindref="member">ASSERT_EQ</ref>(<ref refid="namespaceleveldb_1ac22b2a69554ed12ecf1bd4650282f307" kindref="member">VarintLength</ref>(actual),<sp/>p<sp/>-<sp/>start);</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><ref refid="testharness_8h_1a9cc34fd87cb865c77439a5d39b3b111b" kindref="member">ASSERT_EQ</ref>(p,<sp/>s.data()<sp/>+<sp/>s.size());</highlight></codeline>
<codeline lineno="96"><highlight class="normal">}</highlight></codeline>
<codeline lineno="97"><highlight class="normal"></highlight></codeline>
<codeline lineno="98" refid="namespaceleveldb_1a3c0437bc3e3bf88d62d57b61fdb29b36" refkind="member"><highlight class="normal"><ref refid="namespaceleveldb_1a9c4f7d5038dfc2985100b60ae2549fde" kindref="member">TEST</ref>(<ref refid="classleveldb_1_1_coding" kindref="compound">Coding</ref>,<sp/>Varint64)<sp/>{</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Construct<sp/>the<sp/>list<sp/>of<sp/>values<sp/>to<sp/>check</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/>std::vector&lt;uint64_t&gt;<sp/>values;</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Some<sp/>special<sp/>values</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/>values.push_back(0);</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/>values.push_back(100);</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/>values.push_back(~static_cast&lt;uint64_t&gt;(0));</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/>values.push_back(~static_cast&lt;uint64_t&gt;(0)<sp/>-<sp/>1);</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<ref refid="stdint_8h_1a435d1572bf3f880d55459d9805097f62" kindref="member">uint32_t</ref><sp/>k<sp/>=<sp/>0;<sp/>k<sp/>&lt;<sp/>64;<sp/>k++)<sp/>{</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Test<sp/>values<sp/>near<sp/>powers<sp/>of<sp/>two</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="stdint_8h_1aaa5d1cd013383c889537491c3cfd9aad" kindref="member">uint64_t</ref><sp/>power<sp/>=<sp/>1ull<sp/>&lt;&lt;<sp/>k;</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/>values.push_back(power);</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/>values.push_back(power-1);</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/>values.push_back(power+1);</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="113"><highlight class="normal"></highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/>std::string<sp/>s;</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>values.size();<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceleveldb_1a17889b1733282d6e80cf03fc0dd207d4" kindref="member">PutVarint64</ref>(&amp;s,<sp/>values[i]);</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="118"><highlight class="normal"></highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>p<sp/>=<sp/>s.data();</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>limit<sp/>=<sp/>p<sp/>+<sp/>s.size();</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>values.size();<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="testharness_8h_1ac2101fb1ffd0c81c17520b82f0fcfe21" kindref="member">ASSERT_TRUE</ref>(p<sp/>&lt;<sp/>limit);</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="stdint_8h_1aaa5d1cd013383c889537491c3cfd9aad" kindref="member">uint64_t</ref><sp/>actual;</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/><ref refid="db__bench_8cc_1ab376b87f96a574a793c03c53e75afec8" kindref="member">start</ref><sp/>=<sp/>p;</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/>p<sp/>=<sp/><ref refid="namespaceleveldb_1ad4e90442ce919c86fb769bf138670d75" kindref="member">GetVarint64Ptr</ref>(p,<sp/>limit,<sp/>&amp;actual);</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="testharness_8h_1ac2101fb1ffd0c81c17520b82f0fcfe21" kindref="member">ASSERT_TRUE</ref>(p<sp/>!=<sp/>NULL);</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="testharness_8h_1a9cc34fd87cb865c77439a5d39b3b111b" kindref="member">ASSERT_EQ</ref>(values[i],<sp/>actual);</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="testharness_8h_1a9cc34fd87cb865c77439a5d39b3b111b" kindref="member">ASSERT_EQ</ref>(<ref refid="namespaceleveldb_1ac22b2a69554ed12ecf1bd4650282f307" kindref="member">VarintLength</ref>(actual),<sp/>p<sp/>-<sp/>start);</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><ref refid="testharness_8h_1a9cc34fd87cb865c77439a5d39b3b111b" kindref="member">ASSERT_EQ</ref>(p,<sp/>limit);</highlight></codeline>
<codeline lineno="131"><highlight class="normal"></highlight></codeline>
<codeline lineno="132"><highlight class="normal">}</highlight></codeline>
<codeline lineno="133"><highlight class="normal"></highlight></codeline>
<codeline lineno="134" refid="namespaceleveldb_1a59975e523c6c2886ff4edc7b95cd9b36" refkind="member"><highlight class="normal"><ref refid="namespaceleveldb_1a9c4f7d5038dfc2985100b60ae2549fde" kindref="member">TEST</ref>(<ref refid="classleveldb_1_1_coding" kindref="compound">Coding</ref>,<sp/>Varint32Overflow)<sp/>{</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><ref refid="stdint_8h_1a435d1572bf3f880d55459d9805097f62" kindref="member">uint32_t</ref><sp/>result;</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/>std::string<sp/>input(</highlight><highlight class="stringliteral">&quot;\x81\x82\x83\x84\x85\x11&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><ref refid="testharness_8h_1ac2101fb1ffd0c81c17520b82f0fcfe21" kindref="member">ASSERT_TRUE</ref>(<ref refid="namespaceleveldb_1addd01473dddfbc70ba64956fe6fac20c" kindref="member">GetVarint32Ptr</ref>(input.data(),<sp/>input.data()<sp/>+<sp/>input.size(),<sp/>&amp;result)</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>==<sp/>NULL);</highlight></codeline>
<codeline lineno="139"><highlight class="normal">}</highlight></codeline>
<codeline lineno="140"><highlight class="normal"></highlight></codeline>
<codeline lineno="141" refid="namespaceleveldb_1a40bbf0bbc0a83026de83675510fd57e6" refkind="member"><highlight class="normal"><ref refid="namespaceleveldb_1a9c4f7d5038dfc2985100b60ae2549fde" kindref="member">TEST</ref>(<ref refid="classleveldb_1_1_coding" kindref="compound">Coding</ref>,<sp/>Varint32Truncation)<sp/>{</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><ref refid="stdint_8h_1a435d1572bf3f880d55459d9805097f62" kindref="member">uint32_t</ref><sp/>large_value<sp/>=<sp/>(1u<sp/>&lt;&lt;<sp/>31)<sp/>+<sp/>100;</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/>std::string<sp/>s;</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><ref refid="namespaceleveldb_1ab00e282f3fd7058b8a41afcf4b56e685" kindref="member">PutVarint32</ref>(&amp;s,<sp/>large_value);</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><ref refid="stdint_8h_1a435d1572bf3f880d55459d9805097f62" kindref="member">uint32_t</ref><sp/>result;</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>len<sp/>=<sp/>0;<sp/>len<sp/>&lt;<sp/>s.size()<sp/>-<sp/>1;<sp/>len++)<sp/>{</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="testharness_8h_1ac2101fb1ffd0c81c17520b82f0fcfe21" kindref="member">ASSERT_TRUE</ref>(<ref refid="namespaceleveldb_1addd01473dddfbc70ba64956fe6fac20c" kindref="member">GetVarint32Ptr</ref>(s.data(),<sp/>s.data()<sp/>+<sp/>len,<sp/>&amp;result)<sp/>==<sp/>NULL);</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><ref refid="testharness_8h_1ac2101fb1ffd0c81c17520b82f0fcfe21" kindref="member">ASSERT_TRUE</ref>(<ref refid="namespaceleveldb_1addd01473dddfbc70ba64956fe6fac20c" kindref="member">GetVarint32Ptr</ref>(s.data(),<sp/>s.data()<sp/>+<sp/>s.size(),<sp/>&amp;result)<sp/>!=<sp/>NULL);</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><ref refid="testharness_8h_1a9cc34fd87cb865c77439a5d39b3b111b" kindref="member">ASSERT_EQ</ref>(large_value,<sp/>result);</highlight></codeline>
<codeline lineno="151"><highlight class="normal">}</highlight></codeline>
<codeline lineno="152"><highlight class="normal"></highlight></codeline>
<codeline lineno="153" refid="namespaceleveldb_1a522178032d3ce16049199cf3ffc7efa5" refkind="member"><highlight class="normal"><ref refid="namespaceleveldb_1a9c4f7d5038dfc2985100b60ae2549fde" kindref="member">TEST</ref>(<ref refid="classleveldb_1_1_coding" kindref="compound">Coding</ref>,<sp/>Varint64Overflow)<sp/>{</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><ref refid="stdint_8h_1aaa5d1cd013383c889537491c3cfd9aad" kindref="member">uint64_t</ref><sp/>result;</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/>std::string<sp/>input(</highlight><highlight class="stringliteral">&quot;\x81\x82\x83\x84\x85\x81\x82\x83\x84\x85\x11&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><ref refid="testharness_8h_1ac2101fb1ffd0c81c17520b82f0fcfe21" kindref="member">ASSERT_TRUE</ref>(<ref refid="namespaceleveldb_1ad4e90442ce919c86fb769bf138670d75" kindref="member">GetVarint64Ptr</ref>(input.data(),<sp/>input.data()<sp/>+<sp/>input.size(),<sp/>&amp;result)</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>==<sp/>NULL);</highlight></codeline>
<codeline lineno="158"><highlight class="normal">}</highlight></codeline>
<codeline lineno="159"><highlight class="normal"></highlight></codeline>
<codeline lineno="160" refid="namespaceleveldb_1a30b1ac3677ddc01001d21fa608a797b6" refkind="member"><highlight class="normal"><ref refid="namespaceleveldb_1a9c4f7d5038dfc2985100b60ae2549fde" kindref="member">TEST</ref>(<ref refid="classleveldb_1_1_coding" kindref="compound">Coding</ref>,<sp/>Varint64Truncation)<sp/>{</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><ref refid="stdint_8h_1aaa5d1cd013383c889537491c3cfd9aad" kindref="member">uint64_t</ref><sp/>large_value<sp/>=<sp/>(1ull<sp/>&lt;&lt;<sp/>63)<sp/>+<sp/>100ull;</highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/>std::string<sp/>s;</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><ref refid="namespaceleveldb_1a17889b1733282d6e80cf03fc0dd207d4" kindref="member">PutVarint64</ref>(&amp;s,<sp/>large_value);</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><ref refid="stdint_8h_1aaa5d1cd013383c889537491c3cfd9aad" kindref="member">uint64_t</ref><sp/>result;</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>len<sp/>=<sp/>0;<sp/>len<sp/>&lt;<sp/>s.size()<sp/>-<sp/>1;<sp/>len++)<sp/>{</highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="testharness_8h_1ac2101fb1ffd0c81c17520b82f0fcfe21" kindref="member">ASSERT_TRUE</ref>(<ref refid="namespaceleveldb_1ad4e90442ce919c86fb769bf138670d75" kindref="member">GetVarint64Ptr</ref>(s.data(),<sp/>s.data()<sp/>+<sp/>len,<sp/>&amp;result)<sp/>==<sp/>NULL);</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><ref refid="testharness_8h_1ac2101fb1ffd0c81c17520b82f0fcfe21" kindref="member">ASSERT_TRUE</ref>(<ref refid="namespaceleveldb_1ad4e90442ce919c86fb769bf138670d75" kindref="member">GetVarint64Ptr</ref>(s.data(),<sp/>s.data()<sp/>+<sp/>s.size(),<sp/>&amp;result)<sp/>!=<sp/>NULL);</highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><ref refid="testharness_8h_1a9cc34fd87cb865c77439a5d39b3b111b" kindref="member">ASSERT_EQ</ref>(large_value,<sp/>result);</highlight></codeline>
<codeline lineno="170"><highlight class="normal">}</highlight></codeline>
<codeline lineno="171"><highlight class="normal"></highlight></codeline>
<codeline lineno="172" refid="namespaceleveldb_1ac1d3fbcebc57ff3b1c95edfe2c122c38" refkind="member"><highlight class="normal"><ref refid="namespaceleveldb_1a9c4f7d5038dfc2985100b60ae2549fde" kindref="member">TEST</ref>(<ref refid="classleveldb_1_1_coding" kindref="compound">Coding</ref>,<sp/>Strings)<sp/>{</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/>std::string<sp/>s;</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><ref refid="namespaceleveldb_1a98eaeea7300aa4f9b56303ffa27581af" kindref="member">PutLengthPrefixedSlice</ref>(&amp;s,<sp/><ref refid="classleveldb_1_1_slice" kindref="compound">Slice</ref>(</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><ref refid="namespaceleveldb_1a98eaeea7300aa4f9b56303ffa27581af" kindref="member">PutLengthPrefixedSlice</ref>(&amp;s,<sp/><ref refid="classleveldb_1_1_slice" kindref="compound">Slice</ref>(</highlight><highlight class="stringliteral">&quot;foo&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><ref refid="namespaceleveldb_1a98eaeea7300aa4f9b56303ffa27581af" kindref="member">PutLengthPrefixedSlice</ref>(&amp;s,<sp/><ref refid="classleveldb_1_1_slice" kindref="compound">Slice</ref>(</highlight><highlight class="stringliteral">&quot;bar&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><ref refid="namespaceleveldb_1a98eaeea7300aa4f9b56303ffa27581af" kindref="member">PutLengthPrefixedSlice</ref>(&amp;s,<sp/><ref refid="classleveldb_1_1_slice" kindref="compound">Slice</ref>(std::string(200,<sp/></highlight><highlight class="charliteral">&apos;x&apos;</highlight><highlight class="normal">)));</highlight></codeline>
<codeline lineno="178"><highlight class="normal"></highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/><ref refid="classleveldb_1_1_slice" kindref="compound">Slice</ref><sp/>input(s);</highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/><ref refid="classleveldb_1_1_slice" kindref="compound">Slice</ref><sp/>v;</highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><ref refid="testharness_8h_1ac2101fb1ffd0c81c17520b82f0fcfe21" kindref="member">ASSERT_TRUE</ref>(<ref refid="namespaceleveldb_1aa06a54af59e83922885a7eb8f0359a94" kindref="member">GetLengthPrefixedSlice</ref>(&amp;input,<sp/>&amp;v));</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><ref refid="testharness_8h_1a9cc34fd87cb865c77439a5d39b3b111b" kindref="member">ASSERT_EQ</ref>(</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">,<sp/>v.<ref refid="classleveldb_1_1_slice_1a2cdd9fb649105033fde510afc9416732" kindref="member">ToString</ref>());</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><ref refid="testharness_8h_1ac2101fb1ffd0c81c17520b82f0fcfe21" kindref="member">ASSERT_TRUE</ref>(<ref refid="namespaceleveldb_1aa06a54af59e83922885a7eb8f0359a94" kindref="member">GetLengthPrefixedSlice</ref>(&amp;input,<sp/>&amp;v));</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/><ref refid="testharness_8h_1a9cc34fd87cb865c77439a5d39b3b111b" kindref="member">ASSERT_EQ</ref>(</highlight><highlight class="stringliteral">&quot;foo&quot;</highlight><highlight class="normal">,<sp/>v.<ref refid="classleveldb_1_1_slice_1a2cdd9fb649105033fde510afc9416732" kindref="member">ToString</ref>());</highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><ref refid="testharness_8h_1ac2101fb1ffd0c81c17520b82f0fcfe21" kindref="member">ASSERT_TRUE</ref>(<ref refid="namespaceleveldb_1aa06a54af59e83922885a7eb8f0359a94" kindref="member">GetLengthPrefixedSlice</ref>(&amp;input,<sp/>&amp;v));</highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><ref refid="testharness_8h_1a9cc34fd87cb865c77439a5d39b3b111b" kindref="member">ASSERT_EQ</ref>(</highlight><highlight class="stringliteral">&quot;bar&quot;</highlight><highlight class="normal">,<sp/>v.<ref refid="classleveldb_1_1_slice_1a2cdd9fb649105033fde510afc9416732" kindref="member">ToString</ref>());</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><ref refid="testharness_8h_1ac2101fb1ffd0c81c17520b82f0fcfe21" kindref="member">ASSERT_TRUE</ref>(<ref refid="namespaceleveldb_1aa06a54af59e83922885a7eb8f0359a94" kindref="member">GetLengthPrefixedSlice</ref>(&amp;input,<sp/>&amp;v));</highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><ref refid="testharness_8h_1a9cc34fd87cb865c77439a5d39b3b111b" kindref="member">ASSERT_EQ</ref>(std::string(200,<sp/></highlight><highlight class="charliteral">&apos;x&apos;</highlight><highlight class="normal">),<sp/>v.<ref refid="classleveldb_1_1_slice_1a2cdd9fb649105033fde510afc9416732" kindref="member">ToString</ref>());</highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><ref refid="testharness_8h_1a9cc34fd87cb865c77439a5d39b3b111b" kindref="member">ASSERT_EQ</ref>(</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">,<sp/>input.<ref refid="classleveldb_1_1_slice_1a2cdd9fb649105033fde510afc9416732" kindref="member">ToString</ref>());</highlight></codeline>
<codeline lineno="190"><highlight class="normal">}</highlight></codeline>
<codeline lineno="191"><highlight class="normal"></highlight></codeline>
<codeline lineno="192"><highlight class="normal">}<sp/><sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>leveldb</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="193"><highlight class="normal"></highlight></codeline>
<codeline lineno="194" refid="coding__test_8cc_1a3c04138a5bfe5d72780bb7e82a18e627" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="coding__test_8cc_1a3c04138a5bfe5d72780bb7e82a18e627" kindref="member">main</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>argc,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">**<sp/>argv)<sp/>{</highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="namespaceleveldb_1_1test_1a3329162c54a0bff42d41c2ac86b2580a" kindref="member">leveldb::test::RunAllTests</ref>();</highlight></codeline>
<codeline lineno="196"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="/home/dev/ds-160209/src/leveldb/util/coding_test.cc"/>
  </compounddef>
</doxygen>
