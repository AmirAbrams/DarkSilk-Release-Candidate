.TH "/home/dev/ds-160209/src/script.h" 3 "Wed Feb 10 2016" "Version 1.0.0.0" "darksilk" \" -*- nroff -*-
.ad l
.nh
.SH NAME
/home/dev/ds-160209/src/script.h \- 
.SH SYNOPSIS
.br
.PP
\fC#include <string>\fP
.br
\fC#include <vector>\fP
.br
\fC#include <stdint\&.h>\fP
.br
\fC#include <boost/foreach\&.hpp>\fP
.br
\fC#include <boost/variant\&.hpp>\fP
.br
\fC#include 'pubkey\&.h'\fP
.br
\fC#include 'bignum\&.h'\fP
.br
\fC#include 'util\&.h'\fP
.br
\fC#include 'stealth\&.h'\fP
.br

.SS "Classes"

.in +1c
.ti -1c
.RI "class \fBCNoDestination\fP"
.br
.ti -1c
.RI "class \fBscriptnum_error\fP"
.br
.ti -1c
.RI "class \fBCScriptNum\fP"
.br
.ti -1c
.RI "class \fBCScript\fP"
.br
.ti -1c
.RI "class \fBBaseSignatureChecker\fP"
.br
.ti -1c
.RI "class \fBSignatureChecker\fP"
.br
.in -1c
.SS "Macros"

.in +1c
.ti -1c
.RI "#define \fBSCRIPT_ERR_LAST\fP   \fBSCRIPT_ERR_ERROR_COUNT\fP"
.br
.in -1c
.SS "Typedefs"

.in +1c
.ti -1c
.RI "typedef std::vector< unsigned char > \fBvaltype\fP"
.br
.ti -1c
.RI "typedef enum \fBScriptError_t\fP \fBScriptError\fP"
.br
.ti -1c
.RI "typedef \fBuint8_t\fP \fBisminefilter\fP"
.br
.RI "\fIused for bitflags of isminetype \fP"
.ti -1c
.RI "typedef boost::variant< \fBCNoDestination\fP, \fBCKeyID\fP, \fBCScriptID\fP, \fBCStealthAddress\fP > \fBCTxDestination\fP"
.br
.in -1c
.SS "Enumerations"

.in +1c
.ti -1c
.RI "enum \fBScriptError_t\fP { \fBSCRIPT_ERR_OK\fP = 0, \fBSCRIPT_ERR_UNKNOWN_ERROR\fP, \fBSCRIPT_ERR_EVAL_FALSE\fP, \fBSCRIPT_ERR_OP_RETURN\fP, \fBSCRIPT_ERR_SCRIPT_SIZE\fP, \fBSCRIPT_ERR_PUSH_SIZE\fP, \fBSCRIPT_ERR_OP_COUNT\fP, \fBSCRIPT_ERR_STACK_SIZE\fP, \fBSCRIPT_ERR_SIG_COUNT\fP, \fBSCRIPT_ERR_PUBKEY_COUNT\fP, \fBSCRIPT_ERR_VERIFY\fP, \fBSCRIPT_ERR_EQUALVERIFY\fP, \fBSCRIPT_ERR_CHECKMULTISIGVERIFY\fP, \fBSCRIPT_ERR_CHECKSIGVERIFY\fP, \fBSCRIPT_ERR_NUMEQUALVERIFY\fP, \fBSCRIPT_ERR_BAD_OPCODE\fP, \fBSCRIPT_ERR_DISABLED_OPCODE\fP, \fBSCRIPT_ERR_INVALID_STACK_OPERATION\fP, \fBSCRIPT_ERR_INVALID_ALTSTACK_OPERATION\fP, \fBSCRIPT_ERR_UNBALANCED_CONDITIONAL\fP, \fBSCRIPT_ERR_SIG_HASHTYPE\fP, \fBSCRIPT_ERR_SIG_DER\fP, \fBSCRIPT_ERR_MINIMALDATA\fP, \fBSCRIPT_ERR_SIG_PUSHONLY\fP, \fBSCRIPT_ERR_SIG_HIGH_S\fP, \fBSCRIPT_ERR_SIG_NULLDUMMY\fP, \fBSCRIPT_ERR_PUBKEYTYPE\fP, \fBSCRIPT_ERR_DISCOURAGE_UPGRADABLE_NOPS\fP, \fBSCRIPT_ERR_ERROR_COUNT\fP }"
.br
.ti -1c
.RI "enum { \fBSIGHASH_ALL\fP = 1, \fBSIGHASH_NONE\fP = 2, \fBSIGHASH_SINGLE\fP = 3, \fBSIGHASH_ANYONECANPAY\fP = 0x80 }"
.br
.ti -1c
.RI "enum { \fBSCRIPT_VERIFY_NONE\fP = 0, \fBSCRIPT_VERIFY_NOCACHE\fP = (1U << 0), \fBSCRIPT_VERIFY_P2SH\fP = (1U << 0), \fBSCRIPT_VERIFY_STRICTENC\fP = (1U << 1), \fBSCRIPT_VERIFY_DERSIG\fP = (1U << 2), \fBSCRIPT_VERIFY_LOW_S\fP = (1U << 3), \fBSCRIPT_VERIFY_NULLDUMMY\fP = (1U << 4), \fBSCRIPT_VERIFY_SIGPUSHONLY\fP = (1U << 5), \fBSCRIPT_VERIFY_MINIMALDATA\fP = (1U << 6), \fBSCRIPT_VERIFY_DISCOURAGE_UPGRADABLE_NOPS\fP = (1U << 7), \fBSCRIPT_VERIFY_ALLOW_EMPTY_SIG\fP = (1U << 8), \fBSCRIPT_VERIFY_FIX_HASHTYPE\fP = (1U << 9), \fBSCRIPT_VERIFY_CHECKLOCKTIMEVERIFY\fP = (1U << 10) }"
.br
.ti -1c
.RI "enum \fBisminetype\fP { \fBISMINE_NO\fP = 0, \fBISMINE_WATCH_ONLY\fP = 1, \fBISMINE_SPENDABLE\fP = 2, \fBISMINE_ALL\fP = ISMINE_WATCH_ONLY | ISMINE_SPENDABLE }"
.br
.RI "\fI\fBIsMine()\fP return codes\&. \fP"
.ti -1c
.RI "enum \fBtxnouttype\fP { \fBTX_NONSTANDARD\fP, \fBTX_PUBKEY\fP, \fBTX_PUBKEYHASH\fP, \fBTX_SCRIPTHASH\fP, \fBTX_MULTISIG\fP, \fBTX_NULL_DATA\fP }"
.br
.ti -1c
.RI "enum \fBopcodetype\fP { \fBOP_0\fP = 0x00, \fBOP_FALSE\fP = OP_0, \fBOP_PUSHDATA1\fP = 0x4c, \fBOP_PUSHDATA2\fP = 0x4d, \fBOP_PUSHDATA4\fP = 0x4e, \fBOP_1NEGATE\fP = 0x4f, \fBOP_RESERVED\fP = 0x50, \fBOP_1\fP = 0x51, \fBOP_TRUE\fP =OP_1, \fBOP_2\fP = 0x52, \fBOP_3\fP = 0x53, \fBOP_4\fP = 0x54, \fBOP_5\fP = 0x55, \fBOP_6\fP = 0x56, \fBOP_7\fP = 0x57, \fBOP_8\fP = 0x58, \fBOP_9\fP = 0x59, \fBOP_10\fP = 0x5a, \fBOP_11\fP = 0x5b, \fBOP_12\fP = 0x5c, \fBOP_13\fP = 0x5d, \fBOP_14\fP = 0x5e, \fBOP_15\fP = 0x5f, \fBOP_16\fP = 0x60, \fBOP_NOP\fP = 0x61, \fBOP_VER\fP = 0x62, \fBOP_IF\fP = 0x63, \fBOP_NOTIF\fP = 0x64, \fBOP_VERIF\fP = 0x65, \fBOP_VERNOTIF\fP = 0x66, \fBOP_ELSE\fP = 0x67, \fBOP_ENDIF\fP = 0x68, \fBOP_VERIFY\fP = 0x69, \fBOP_RETURN\fP = 0x6a, \fBOP_TOALTSTACK\fP = 0x6b, \fBOP_FROMALTSTACK\fP = 0x6c, \fBOP_2DROP\fP = 0x6d, \fBOP_2DUP\fP = 0x6e, \fBOP_3DUP\fP = 0x6f, \fBOP_2OVER\fP = 0x70, \fBOP_2ROT\fP = 0x71, \fBOP_2SWAP\fP = 0x72, \fBOP_IFDUP\fP = 0x73, \fBOP_DEPTH\fP = 0x74, \fBOP_DROP\fP = 0x75, \fBOP_DUP\fP = 0x76, \fBOP_NIP\fP = 0x77, \fBOP_OVER\fP = 0x78, \fBOP_PICK\fP = 0x79, \fBOP_ROLL\fP = 0x7a, \fBOP_ROT\fP = 0x7b, \fBOP_SWAP\fP = 0x7c, \fBOP_TUCK\fP = 0x7d, \fBOP_CAT\fP = 0x7e, \fBOP_SUBSTR\fP = 0x7f, \fBOP_LEFT\fP = 0x80, \fBOP_RIGHT\fP = 0x81, \fBOP_SIZE\fP = 0x82, \fBOP_INVERT\fP = 0x83, \fBOP_AND\fP = 0x84, \fBOP_OR\fP = 0x85, \fBOP_XOR\fP = 0x86, \fBOP_EQUAL\fP = 0x87, \fBOP_EQUALVERIFY\fP = 0x88, \fBOP_RESERVED1\fP = 0x89, \fBOP_RESERVED2\fP = 0x8a, \fBOP_1ADD\fP = 0x8b, \fBOP_1SUB\fP = 0x8c, \fBOP_2MUL\fP = 0x8d, \fBOP_2DIV\fP = 0x8e, \fBOP_NEGATE\fP = 0x8f, \fBOP_ABS\fP = 0x90, \fBOP_NOT\fP = 0x91, \fBOP_0NOTEQUAL\fP = 0x92, \fBOP_ADD\fP = 0x93, \fBOP_SUB\fP = 0x94, \fBOP_MUL\fP = 0x95, \fBOP_DIV\fP = 0x96, \fBOP_MOD\fP = 0x97, \fBOP_LSHIFT\fP = 0x98, \fBOP_RSHIFT\fP = 0x99, \fBOP_BOOLAND\fP = 0x9a, \fBOP_BOOLOR\fP = 0x9b, \fBOP_NUMEQUAL\fP = 0x9c, \fBOP_NUMEQUALVERIFY\fP = 0x9d, \fBOP_NUMNOTEQUAL\fP = 0x9e, \fBOP_LESSTHAN\fP = 0x9f, \fBOP_GREATERTHAN\fP = 0xa0, \fBOP_LESSTHANOREQUAL\fP = 0xa1, \fBOP_GREATERTHANOREQUAL\fP = 0xa2, \fBOP_MIN\fP = 0xa3, \fBOP_MAX\fP = 0xa4, \fBOP_WITHIN\fP = 0xa5, \fBOP_RIPEMD160\fP = 0xa6, \fBOP_SHA1\fP = 0xa7, \fBOP_SHA256\fP = 0xa8, \fBOP_HASH160\fP = 0xa9, \fBOP_HASH256\fP = 0xaa, \fBOP_CODESEPARATOR\fP = 0xab, \fBOP_CHECKSIG\fP = 0xac, \fBOP_CHECKSIGVERIFY\fP = 0xad, \fBOP_CHECKMULTISIG\fP = 0xae, \fBOP_CHECKMULTISIGVERIFY\fP = 0xaf, \fBOP_NOP1\fP = 0xb0, \fBOP_NOP2\fP = 0xb1, \fBOP_NOP3\fP = 0xb2, \fBOP_NOP4\fP = 0xb3, \fBOP_NOP5\fP = 0xb4, \fBOP_NOP6\fP = 0xb5, \fBOP_CHECKLOCKTIMEVERIFY\fP = 0xb6, \fBOP_NOP7\fP = OP_CHECKLOCKTIMEVERIFY, \fBOP_NOP8\fP = 0xb7, \fBOP_NOP9\fP = 0xb8, \fBOP_NOP10\fP = 0xb9, \fBOP_SMALLDATA\fP = 0xf9, \fBOP_SMALLINTEGER\fP = 0xfa, \fBOP_PUBKEYS\fP = 0xfb, \fBOP_PUBKEYHASH\fP = 0xfd, \fBOP_PUBKEY\fP = 0xfe, \fBOP_INVALIDOPCODE\fP = 0xff }"
.br
.in -1c
.SS "Functions"

.in +1c
.ti -1c
.RI "template<typename T > std::vector< unsigned char > \fBToByteVector\fP (const T &in)"
.br
.ti -1c
.RI "const char * \fBScriptErrorString\fP (const \fBScriptError\fP error)"
.br
.ti -1c
.RI "const char * \fBGetTxnOutputType\fP (\fBtxnouttype\fP t)"
.br
.ti -1c
.RI "const char * \fBGetOpName\fP (\fBopcodetype\fP opcode)"
.br
.ti -1c
.RI "std::string \fBValueString\fP (const std::vector< unsigned char > &vch)"
.br
.ti -1c
.RI "std::string \fBStackString\fP (const std::vector< std::vector< unsigned char > > &vStack)"
.br
.ti -1c
.RI "bool \fBIsDERSignature\fP (const \fBvaltype\fP &vchSig, bool haveHashType=true)"
.br
.ti -1c
.RI "bool \fBIsCompressedOrUncompressedPubKey\fP (const \fBvaltype\fP &vchPubKey)"
.br
.ti -1c
.RI "bool \fBEvalScript\fP (std::vector< std::vector< unsigned char > > &stack, const \fBCScript\fP &script, const \fBCTransaction\fP &txTo, unsigned int nIn, unsigned int flags, int nHashType)"
.br
.ti -1c
.RI "bool \fBEvalScript\fP (std::vector< std::vector< unsigned char > > &stack, const \fBCScript\fP &script, unsigned int flags, const \fBBaseSignatureChecker\fP &checker, \fBScriptError\fP *error=NULL)"
.br
.ti -1c
.RI "bool \fBSolver\fP (const \fBCScript\fP &scriptPubKey, \fBtxnouttype\fP &typeRet, std::vector< std::vector< unsigned char > > &vSolutionsRet)"
.br
.ti -1c
.RI "int \fBScriptSigArgsExpected\fP (\fBtxnouttype\fP t, const std::vector< std::vector< unsigned char > > &vSolutions)"
.br
.ti -1c
.RI "bool \fBIsStandard\fP (const \fBCScript\fP &scriptPubKey, \fBtxnouttype\fP &whichType)"
.br
.ti -1c
.RI "\fBisminetype\fP \fBIsMine\fP (const \fBCKeyStore\fP &keystore, const \fBCScript\fP &scriptPubKey)"
.br
.ti -1c
.RI "\fBisminetype\fP \fBIsMine\fP (const \fBCKeyStore\fP &keystore, const \fBCTxDestination\fP &dest)"
.br
.ti -1c
.RI "void \fBExtractAffectedKeys\fP (const \fBCKeyStore\fP &keystore, const \fBCScript\fP &scriptPubKey, std::vector< \fBCKeyID\fP > &vKeys)"
.br
.ti -1c
.RI "bool \fBExtractDestination\fP (const \fBCScript\fP &scriptPubKey, \fBCTxDestination\fP &addressRet)"
.br
.ti -1c
.RI "bool \fBExtractDestinations\fP (const \fBCScript\fP &scriptPubKey, \fBtxnouttype\fP &typeRet, std::vector< \fBCTxDestination\fP > &addressRet, int &nRequiredRet)"
.br
.ti -1c
.RI "bool \fBSignSignature\fP (const \fBCKeyStore\fP &keystore, const \fBCScript\fP &fromPubKey, \fBCMutableTransaction\fP &txTo, unsigned int nIn, int nHashType=\fBSIGHASH_ALL\fP)"
.br
.ti -1c
.RI "bool \fBSignSignature\fP (const \fBCKeyStore\fP &keystore, const \fBCScript\fP &fromPubKey, \fBCTransaction\fP &txTo, unsigned int nIn, int nHashType=\fBSIGHASH_ALL\fP)"
.br
.ti -1c
.RI "bool \fBSignSignature\fP (const \fBCKeyStore\fP &keystore, const \fBCTransaction\fP &txFrom, \fBCTransaction\fP &txTo, unsigned int nIn, int nHashType=\fBSIGHASH_ALL\fP)"
.br
.ti -1c
.RI "bool \fBSignSignature\fP (const \fBCKeyStore\fP &keystore, const \fBCMutableTransaction\fP &txFrom, \fBCTransaction\fP &txTo, unsigned int nIn, int nHashType=\fBSIGHASH_ALL\fP)"
.br
.ti -1c
.RI "bool \fBVerifyScript\fP (const \fBCScript\fP &scriptSig, const \fBCScript\fP &scriptPubKey, const \fBCTransaction\fP &txTo, unsigned int nIn, unsigned int flags, int nHashType)"
.br
.ti -1c
.RI "bool \fBVerifySignature\fP (const \fBCTransaction\fP &txFrom, const \fBCTransaction\fP &txTo, unsigned int nIn, unsigned int flags, int nHashType)"
.br
.ti -1c
.RI "bool \fBVerifyScript\fP (const \fBCScript\fP &scriptSig, const \fBCScript\fP &scriptPubKey, unsigned int flags, const \fBBaseSignatureChecker\fP &checker, \fBScriptError\fP *error=NULL)"
.br
.ti -1c
.RI "\fBCScript\fP \fBCombineSignatures\fP (\fBCScript\fP scriptPubKey, const \fBCTransaction\fP &txTo, unsigned int nIn, const \fBCScript\fP &scriptSig1, const \fBCScript\fP &scriptSig2)"
.br
.ti -1c
.RI "\fBCScript\fP \fBGetScriptForDestination\fP (const \fBCTxDestination\fP &dest)"
.br
.ti -1c
.RI "\fBCScript\fP \fBGetScriptForMultisig\fP (int nRequired, const std::vector< \fBCPubKey\fP > &keys)"
.br
.ti -1c
.RI "bool \fBSolver\fP (const \fBCKeyStore\fP &keystore, const \fBCScript\fP &scriptPubKey, \fBuint256\fP \fBhash\fP, int nHashType, \fBCScript\fP &scriptSigRet, \fBtxnouttype\fP &whichTypeRet)"
.br
.in -1c
.SH "Macro Definition Documentation"
.PP 
.SS "#define SCRIPT_ERR_LAST   \fBSCRIPT_ERR_ERROR_COUNT\fP"

.PP
Definition at line 84 of file script\&.h\&.
.SH "Typedef Documentation"
.PP 
.SS "typedef boost::variant<\fBCNoDestination\fP, \fBCKeyID\fP, \fBCScriptID\fP, \fBCStealthAddress\fP> \fBCTxDestination\fP"
A txout script template with a specific destination\&. It is either:
.IP "\(bu" 2
\fBCNoDestination\fP: no destination set
.IP "\(bu" 2
\fBCKeyID\fP: TX_PUBKEYHASH destination
.IP "\(bu" 2
\fBCScriptID\fP: TX_SCRIPTHASH destination A CTxDestination is the internal data type encoded in a \fBCDarkSilkAddress\fP 
.PP

.PP
Definition at line 198 of file script\&.h\&.
.SS "typedef \fBuint8_t\fP \fBisminefilter\fP"

.PP
used for bitflags of isminetype 
.PP
Definition at line 155 of file script\&.h\&.
.SS "typedef enum \fBScriptError_t\fP  \fBScriptError\fP"

.SS "typedef std::vector<unsigned char> \fBvaltype\fP"

.PP
Definition at line 23 of file script\&.h\&.
.SH "Enumeration Type Documentation"
.PP 
.SS "anonymous enum"
Signature hash types/flags 
.PP
\fBEnumerator\fP
.in +1c
.TP
\fB\fISIGHASH_ALL \fP\fP
.TP
\fB\fISIGHASH_NONE \fP\fP
.TP
\fB\fISIGHASH_SINGLE \fP\fP
.TP
\fB\fISIGHASH_ANYONECANPAY \fP\fP
.PP
Definition at line 90 of file script\&.h\&.
.SS "anonymous enum"
Script verification flags 
.PP
\fBEnumerator\fP
.in +1c
.TP
\fB\fISCRIPT_VERIFY_NONE \fP\fP
.TP
\fB\fISCRIPT_VERIFY_NOCACHE \fP\fP
.TP
\fB\fISCRIPT_VERIFY_P2SH \fP\fP
.TP
\fB\fISCRIPT_VERIFY_STRICTENC \fP\fP
.TP
\fB\fISCRIPT_VERIFY_DERSIG \fP\fP
.TP
\fB\fISCRIPT_VERIFY_LOW_S \fP\fP
.TP
\fB\fISCRIPT_VERIFY_NULLDUMMY \fP\fP
.TP
\fB\fISCRIPT_VERIFY_SIGPUSHONLY \fP\fP
.TP
\fB\fISCRIPT_VERIFY_MINIMALDATA \fP\fP
.TP
\fB\fISCRIPT_VERIFY_DISCOURAGE_UPGRADABLE_NOPS \fP\fP
.TP
\fB\fISCRIPT_VERIFY_ALLOW_EMPTY_SIG \fP\fP
.TP
\fB\fISCRIPT_VERIFY_FIX_HASHTYPE \fP\fP
.TP
\fB\fISCRIPT_VERIFY_CHECKLOCKTIMEVERIFY \fP\fP
.PP
Definition at line 99 of file script\&.h\&.
.SS "enum \fBisminetype\fP"

.PP
\fBIsMine()\fP return codes\&. 
.PP
\fBEnumerator\fP
.in +1c
.TP
\fB\fIISMINE_NO \fP\fP
.TP
\fB\fIISMINE_WATCH_ONLY \fP\fP
.TP
\fB\fIISMINE_SPENDABLE \fP\fP
.TP
\fB\fIISMINE_ALL \fP\fP
.PP
Definition at line 147 of file script\&.h\&.
.SS "enum \fBopcodetype\fP"
Script opcodes 
.PP
\fBEnumerator\fP
.in +1c
.TP
\fB\fIOP_0 \fP\fP
.TP
\fB\fIOP_FALSE \fP\fP
.TP
\fB\fIOP_PUSHDATA1 \fP\fP
.TP
\fB\fIOP_PUSHDATA2 \fP\fP
.TP
\fB\fIOP_PUSHDATA4 \fP\fP
.TP
\fB\fIOP_1NEGATE \fP\fP
.TP
\fB\fIOP_RESERVED \fP\fP
.TP
\fB\fIOP_1 \fP\fP
.TP
\fB\fIOP_TRUE \fP\fP
.TP
\fB\fIOP_2 \fP\fP
.TP
\fB\fIOP_3 \fP\fP
.TP
\fB\fIOP_4 \fP\fP
.TP
\fB\fIOP_5 \fP\fP
.TP
\fB\fIOP_6 \fP\fP
.TP
\fB\fIOP_7 \fP\fP
.TP
\fB\fIOP_8 \fP\fP
.TP
\fB\fIOP_9 \fP\fP
.TP
\fB\fIOP_10 \fP\fP
.TP
\fB\fIOP_11 \fP\fP
.TP
\fB\fIOP_12 \fP\fP
.TP
\fB\fIOP_13 \fP\fP
.TP
\fB\fIOP_14 \fP\fP
.TP
\fB\fIOP_15 \fP\fP
.TP
\fB\fIOP_16 \fP\fP
.TP
\fB\fIOP_NOP \fP\fP
.TP
\fB\fIOP_VER \fP\fP
.TP
\fB\fIOP_IF \fP\fP
.TP
\fB\fIOP_NOTIF \fP\fP
.TP
\fB\fIOP_VERIF \fP\fP
.TP
\fB\fIOP_VERNOTIF \fP\fP
.TP
\fB\fIOP_ELSE \fP\fP
.TP
\fB\fIOP_ENDIF \fP\fP
.TP
\fB\fIOP_VERIFY \fP\fP
.TP
\fB\fIOP_RETURN \fP\fP
.TP
\fB\fIOP_TOALTSTACK \fP\fP
.TP
\fB\fIOP_FROMALTSTACK \fP\fP
.TP
\fB\fIOP_2DROP \fP\fP
.TP
\fB\fIOP_2DUP \fP\fP
.TP
\fB\fIOP_3DUP \fP\fP
.TP
\fB\fIOP_2OVER \fP\fP
.TP
\fB\fIOP_2ROT \fP\fP
.TP
\fB\fIOP_2SWAP \fP\fP
.TP
\fB\fIOP_IFDUP \fP\fP
.TP
\fB\fIOP_DEPTH \fP\fP
.TP
\fB\fIOP_DROP \fP\fP
.TP
\fB\fIOP_DUP \fP\fP
.TP
\fB\fIOP_NIP \fP\fP
.TP
\fB\fIOP_OVER \fP\fP
.TP
\fB\fIOP_PICK \fP\fP
.TP
\fB\fIOP_ROLL \fP\fP
.TP
\fB\fIOP_ROT \fP\fP
.TP
\fB\fIOP_SWAP \fP\fP
.TP
\fB\fIOP_TUCK \fP\fP
.TP
\fB\fIOP_CAT \fP\fP
.TP
\fB\fIOP_SUBSTR \fP\fP
.TP
\fB\fIOP_LEFT \fP\fP
.TP
\fB\fIOP_RIGHT \fP\fP
.TP
\fB\fIOP_SIZE \fP\fP
.TP
\fB\fIOP_INVERT \fP\fP
.TP
\fB\fIOP_AND \fP\fP
.TP
\fB\fIOP_OR \fP\fP
.TP
\fB\fIOP_XOR \fP\fP
.TP
\fB\fIOP_EQUAL \fP\fP
.TP
\fB\fIOP_EQUALVERIFY \fP\fP
.TP
\fB\fIOP_RESERVED1 \fP\fP
.TP
\fB\fIOP_RESERVED2 \fP\fP
.TP
\fB\fIOP_1ADD \fP\fP
.TP
\fB\fIOP_1SUB \fP\fP
.TP
\fB\fIOP_2MUL \fP\fP
.TP
\fB\fIOP_2DIV \fP\fP
.TP
\fB\fIOP_NEGATE \fP\fP
.TP
\fB\fIOP_ABS \fP\fP
.TP
\fB\fIOP_NOT \fP\fP
.TP
\fB\fIOP_0NOTEQUAL \fP\fP
.TP
\fB\fIOP_ADD \fP\fP
.TP
\fB\fIOP_SUB \fP\fP
.TP
\fB\fIOP_MUL \fP\fP
.TP
\fB\fIOP_DIV \fP\fP
.TP
\fB\fIOP_MOD \fP\fP
.TP
\fB\fIOP_LSHIFT \fP\fP
.TP
\fB\fIOP_RSHIFT \fP\fP
.TP
\fB\fIOP_BOOLAND \fP\fP
.TP
\fB\fIOP_BOOLOR \fP\fP
.TP
\fB\fIOP_NUMEQUAL \fP\fP
.TP
\fB\fIOP_NUMEQUALVERIFY \fP\fP
.TP
\fB\fIOP_NUMNOTEQUAL \fP\fP
.TP
\fB\fIOP_LESSTHAN \fP\fP
.TP
\fB\fIOP_GREATERTHAN \fP\fP
.TP
\fB\fIOP_LESSTHANOREQUAL \fP\fP
.TP
\fB\fIOP_GREATERTHANOREQUAL \fP\fP
.TP
\fB\fIOP_MIN \fP\fP
.TP
\fB\fIOP_MAX \fP\fP
.TP
\fB\fIOP_WITHIN \fP\fP
.TP
\fB\fIOP_RIPEMD160 \fP\fP
.TP
\fB\fIOP_SHA1 \fP\fP
.TP
\fB\fIOP_SHA256 \fP\fP
.TP
\fB\fIOP_HASH160 \fP\fP
.TP
\fB\fIOP_HASH256 \fP\fP
.TP
\fB\fIOP_CODESEPARATOR \fP\fP
.TP
\fB\fIOP_CHECKSIG \fP\fP
.TP
\fB\fIOP_CHECKSIGVERIFY \fP\fP
.TP
\fB\fIOP_CHECKMULTISIG \fP\fP
.TP
\fB\fIOP_CHECKMULTISIGVERIFY \fP\fP
.TP
\fB\fIOP_NOP1 \fP\fP
.TP
\fB\fIOP_NOP2 \fP\fP
.TP
\fB\fIOP_NOP3 \fP\fP
.TP
\fB\fIOP_NOP4 \fP\fP
.TP
\fB\fIOP_NOP5 \fP\fP
.TP
\fB\fIOP_NOP6 \fP\fP
.TP
\fB\fIOP_CHECKLOCKTIMEVERIFY \fP\fP
.TP
\fB\fIOP_NOP7 \fP\fP
.TP
\fB\fIOP_NOP8 \fP\fP
.TP
\fB\fIOP_NOP9 \fP\fP
.TP
\fB\fIOP_NOP10 \fP\fP
.TP
\fB\fIOP_SMALLDATA \fP\fP
.TP
\fB\fIOP_SMALLINTEGER \fP\fP
.TP
\fB\fIOP_PUBKEYS \fP\fP
.TP
\fB\fIOP_PUBKEYHASH \fP\fP
.TP
\fB\fIOP_PUBKEY \fP\fP
.TP
\fB\fIOP_INVALIDOPCODE \fP\fP
.PP
Definition at line 203 of file script\&.h\&.
.SS "enum \fBScriptError_t\fP"

.PP
\fBEnumerator\fP
.in +1c
.TP
\fB\fISCRIPT_ERR_OK \fP\fP
.TP
\fB\fISCRIPT_ERR_UNKNOWN_ERROR \fP\fP
.TP
\fB\fISCRIPT_ERR_EVAL_FALSE \fP\fP
.TP
\fB\fISCRIPT_ERR_OP_RETURN \fP\fP
.TP
\fB\fISCRIPT_ERR_SCRIPT_SIZE \fP\fP
.TP
\fB\fISCRIPT_ERR_PUSH_SIZE \fP\fP
.TP
\fB\fISCRIPT_ERR_OP_COUNT \fP\fP
.TP
\fB\fISCRIPT_ERR_STACK_SIZE \fP\fP
.TP
\fB\fISCRIPT_ERR_SIG_COUNT \fP\fP
.TP
\fB\fISCRIPT_ERR_PUBKEY_COUNT \fP\fP
.TP
\fB\fISCRIPT_ERR_VERIFY \fP\fP
.TP
\fB\fISCRIPT_ERR_EQUALVERIFY \fP\fP
.TP
\fB\fISCRIPT_ERR_CHECKMULTISIGVERIFY \fP\fP
.TP
\fB\fISCRIPT_ERR_CHECKSIGVERIFY \fP\fP
.TP
\fB\fISCRIPT_ERR_NUMEQUALVERIFY \fP\fP
.TP
\fB\fISCRIPT_ERR_BAD_OPCODE \fP\fP
.TP
\fB\fISCRIPT_ERR_DISABLED_OPCODE \fP\fP
.TP
\fB\fISCRIPT_ERR_INVALID_STACK_OPERATION \fP\fP
.TP
\fB\fISCRIPT_ERR_INVALID_ALTSTACK_OPERATION \fP\fP
.TP
\fB\fISCRIPT_ERR_UNBALANCED_CONDITIONAL \fP\fP
.TP
\fB\fISCRIPT_ERR_SIG_HASHTYPE \fP\fP
.TP
\fB\fISCRIPT_ERR_SIG_DER \fP\fP
.TP
\fB\fISCRIPT_ERR_MINIMALDATA \fP\fP
.TP
\fB\fISCRIPT_ERR_SIG_PUSHONLY \fP\fP
.TP
\fB\fISCRIPT_ERR_SIG_HIGH_S \fP\fP
.TP
\fB\fISCRIPT_ERR_SIG_NULLDUMMY \fP\fP
.TP
\fB\fISCRIPT_ERR_PUBKEYTYPE \fP\fP
.TP
\fB\fISCRIPT_ERR_DISCOURAGE_UPGRADABLE_NOPS \fP\fP
.TP
\fB\fISCRIPT_ERR_ERROR_COUNT \fP\fP
.PP
Definition at line 40 of file script\&.h\&.
.SS "enum \fBtxnouttype\fP"

.PP
\fBEnumerator\fP
.in +1c
.TP
\fB\fITX_NONSTANDARD \fP\fP
.TP
\fB\fITX_PUBKEY \fP\fP
.TP
\fB\fITX_PUBKEYHASH \fP\fP
.TP
\fB\fITX_SCRIPTHASH \fP\fP
.TP
\fB\fITX_MULTISIG \fP\fP
.TP
\fB\fITX_NULL_DATA \fP\fP
.PP
Definition at line 175 of file script\&.h\&.
.SH "Function Documentation"
.PP 
.SS "\fBCScript\fP CombineSignatures (\fBCScript\fP scriptPubKey, const \fBCTransaction\fP & txTo, unsigned int nIn, const \fBCScript\fP & scriptSig1, const \fBCScript\fP & scriptSig2)"

.PP
Definition at line 3080 of file script\&.cpp\&.
.SS "bool EvalScript (std::vector< std::vector< unsigned char > > & stack, const \fBCScript\fP & script, const \fBCTransaction\fP & txTo, unsigned int nIn, unsigned int flags, int nHashType)"

.PP
Definition at line 475 of file script\&.cpp\&.
.SS "bool EvalScript (std::vector< std::vector< unsigned char > > & stack, const \fBCScript\fP & script, unsigned int flags, const \fBBaseSignatureChecker\fP & checker, \fBScriptError\fP * error = \fCNULL\fP)"

.PP
Definition at line 1393 of file script\&.cpp\&.
.SS "void ExtractAffectedKeys (const \fBCKeyStore\fP & keystore, const \fBCScript\fP & scriptPubKey, std::vector< \fBCKeyID\fP > & vKeys)"

.PP
Definition at line 2734 of file script\&.cpp\&.
.SS "bool ExtractDestination (const \fBCScript\fP & scriptPubKey, \fBCTxDestination\fP & addressRet)"

.PP
Definition at line 2670 of file script\&.cpp\&.
.SS "bool ExtractDestinations (const \fBCScript\fP & scriptPubKey, \fBtxnouttype\fP & typeRet, std::vector< \fBCTxDestination\fP > & addressRet, int & nRequiredRet)"

.PP
Definition at line 2738 of file script\&.cpp\&.
.SS "const char* GetOpName (\fBopcodetype\fP opcode)"

.PP
Definition at line 199 of file script\&.cpp\&.
.SS "\fBCScript\fP GetScriptForDestination (const \fBCTxDestination\fP & dest)"

.PP
Definition at line 3226 of file script\&.cpp\&.
.SS "\fBCScript\fP GetScriptForMultisig (int nRequired, const std::vector< \fBCPubKey\fP > & keys)"

.PP
Definition at line 3234 of file script\&.cpp\&.
.SS "const char* GetTxnOutputType (\fBtxnouttype\fP t)"

.PP
Definition at line 184 of file script\&.cpp\&.
.SS "bool IsCompressedOrUncompressedPubKey (const \fBvaltype\fP & vchPubKey)"

.PP
Definition at line 342 of file script\&.cpp\&.
.SS "bool IsDERSignature (const \fBvaltype\fP & vchSig, bool haveHashType = \fCtrue\fP)"

.PP
Definition at line 357 of file script\&.cpp\&.
.SS "\fBisminetype\fP IsMine (const \fBCKeyStore\fP & keystore, const \fBCScript\fP & scriptPubKey)"

.PP
Definition at line 2614 of file script\&.cpp\&.
.SS "\fBisminetype\fP IsMine (const \fBCKeyStore\fP & keystore, const \fBCTxDestination\fP & dest)"

.PP
Definition at line 2607 of file script\&.cpp\&.
.SS "bool IsStandard (const \fBCScript\fP & scriptPubKey, \fBtxnouttype\fP & whichType)"

.PP
Definition at line 2558 of file script\&.cpp\&.
.SS "const char* ScriptErrorString (const \fBScriptError\fP error)"

.PP
Definition at line 41 of file script\&.cpp\&.
.SS "int ScriptSigArgsExpected (\fBtxnouttype\fP t, const std::vector< std::vector< unsigned char > > & vSolutions)"

.PP
Definition at line 2537 of file script\&.cpp\&.
.SS "bool SignSignature (const \fBCKeyStore\fP & keystore, const \fBCScript\fP & fromPubKey, \fBCMutableTransaction\fP & txTo, unsigned int nIn, int nHashType = \fC\fBSIGHASH_ALL\fP\fP)"

.PP
Definition at line 2153 of file script\&.cpp\&.
.SS "bool SignSignature (const \fBCKeyStore\fP & keystore, const \fBCScript\fP & fromPubKey, \fBCTransaction\fP & txTo, unsigned int nIn, int nHashType = \fC\fBSIGHASH_ALL\fP\fP)"

.PP
Definition at line 2188 of file script\&.cpp\&.
.SS "bool SignSignature (const \fBCKeyStore\fP & keystore, const \fBCTransaction\fP & txFrom, \fBCTransaction\fP & txTo, unsigned int nIn, int nHashType = \fC\fBSIGHASH_ALL\fP\fP)"

.PP
Definition at line 2223 of file script\&.cpp\&.
.SS "bool SignSignature (const \fBCKeyStore\fP & keystore, const \fBCMutableTransaction\fP & txFrom, \fBCTransaction\fP & txTo, unsigned int nIn, int nHashType = \fC\fBSIGHASH_ALL\fP\fP)"

.PP
Definition at line 2233 of file script\&.cpp\&.
.SS "bool Solver (const \fBCScript\fP & scriptPubKey, \fBtxnouttype\fP & typeRet, std::vector< std::vector< unsigned char > > & vSolutionsRet)"

.PP
Definition at line 2342 of file script\&.cpp\&.
.SS "bool Solver (const \fBCKeyStore\fP & keystore, const \fBCScript\fP & scriptPubKey, \fBuint256\fP hash, int nHashType, \fBCScript\fP & scriptSigRet, \fBtxnouttype\fP & whichTypeRet)"

.PP
Definition at line 2498 of file script\&.cpp\&.
.SS "std::string StackString (const std::vector< std::vector< unsigned char > > & vStack)\fC [inline]\fP"

.PP
Definition at line 362 of file script\&.h\&.
.SS "template<typename T > std::vector<unsigned char> ToByteVector (const T & in)"

.PP
Definition at line 35 of file script\&.h\&.
.SS "std::string ValueString (const std::vector< unsigned char > & vch)\fC [inline]\fP"

.PP
Definition at line 354 of file script\&.h\&.
.SS "bool VerifyScript (const \fBCScript\fP & scriptSig, const \fBCScript\fP & scriptPubKey, const \fBCTransaction\fP & txTo, unsigned int nIn, unsigned int flags, int nHashType)"

.PP
Definition at line 2822 of file script\&.cpp\&.
.SS "bool VerifyScript (const \fBCScript\fP & scriptSig, const \fBCScript\fP & scriptPubKey, unsigned int flags, const \fBBaseSignatureChecker\fP & checker, \fBScriptError\fP * error = \fCNULL\fP)"

.PP
Definition at line 2858 of file script\&.cpp\&.
.SS "bool VerifySignature (const \fBCTransaction\fP & txFrom, const \fBCTransaction\fP & txTo, unsigned int nIn, unsigned int flags, int nHashType)"

.PP
Definition at line 2958 of file script\&.cpp\&.
.SH "Author"
.PP 
Generated automatically by Doxygen for darksilk from the source code\&.
