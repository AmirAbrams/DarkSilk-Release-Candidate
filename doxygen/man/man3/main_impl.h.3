.TH "/home/dev/ds-160209/src/secp256k1/src/modules/schnorr/main_impl.h" 3 "Wed Feb 10 2016" "Version 1.0.0.0" "darksilk" \" -*- nroff -*-
.ad l
.nh
.SH NAME
/home/dev/ds-160209/src/secp256k1/src/modules/schnorr/main_impl.h \- 
.SH SYNOPSIS
.br
.PP
\fC#include 'include/secp256k1_schnorr\&.h'\fP
.br
\fC#include 'modules/schnorr/schnorr_impl\&.h'\fP
.br

.SS "Functions"

.in +1c
.ti -1c
.RI "int \fBsecp256k1_schnorr_sign\fP (const \fBsecp256k1_context\fP *ctx, unsigned char *sig64, const unsigned char *msg32, const unsigned char *seckey, \fBsecp256k1_nonce_function\fP noncefp, const void *noncedata)"
.br
.ti -1c
.RI "int \fBsecp256k1_schnorr_verify\fP (const \fBsecp256k1_context\fP *ctx, const unsigned char *sig64, const unsigned char *msg32, const \fBsecp256k1_pubkey\fP *pubkey)"
.br
.ti -1c
.RI "int \fBsecp256k1_schnorr_recover\fP (const \fBsecp256k1_context\fP *ctx, \fBsecp256k1_pubkey\fP *pubkey, const unsigned char *sig64, const unsigned char *msg32)"
.br
.ti -1c
.RI "int \fBsecp256k1_schnorr_generate_nonce_pair\fP (const \fBsecp256k1_context\fP *ctx, \fBsecp256k1_pubkey\fP *pubnonce, unsigned char *privnonce32, const unsigned char *sec32, const unsigned char *msg32, \fBsecp256k1_nonce_function\fP noncefp, const void *noncedata)"
.br
.ti -1c
.RI "int \fBsecp256k1_schnorr_partial_sign\fP (const \fBsecp256k1_context\fP *ctx, unsigned char *sig64, const unsigned char *msg32, const unsigned char *sec32, const \fBsecp256k1_pubkey\fP *pubnonce_others, const unsigned char *secnonce32)"
.br
.ti -1c
.RI "int \fBsecp256k1_schnorr_partial_combine\fP (const \fBsecp256k1_context\fP *ctx, unsigned char *sig64, const unsigned char *const *sig64sin, size_t n)"
.br
.in -1c
.SH "Function Documentation"
.PP 
.SS "int secp256k1_schnorr_generate_nonce_pair (const \fBsecp256k1_context\fP * ctx, \fBsecp256k1_pubkey\fP * pubnonce, unsigned char * privnonce32, const unsigned char * msg32, const unsigned char * sec32, \fBsecp256k1_nonce_function\fP noncefp, const void * noncedata)"
Generate a nonce pair deterministically for use with secp256k1_schnorr_partial_sign\&. Returns: 1: valid nonce pair was generated\&. 0: otherwise (nonce generation function failed) Args: ctx: pointer to a context object, initialized for signing (cannot be NULL) Out: pubnonce: public side of the nonce (cannot be NULL) privnonce32: private side of the nonce (32 byte) (cannot be NULL) In: msg32: the 32-byte message hash assumed to be signed (cannot be NULL) sec32: the 32-byte private key (cannot be NULL) noncefp: pointer to a nonce generation function\&. If NULL, secp256k1_nonce_function_default is used noncedata: pointer to arbitrary data used by the nonce generation function (can be NULL)
.PP
Do not use the output as a private/public key pair for signing/validation\&. 
.PP
Definition at line 91 of file main_impl\&.h\&.
.SS "int secp256k1_schnorr_partial_combine (const \fBsecp256k1_context\fP * ctx, unsigned char * sig64, const unsigned char *const * sig64sin, size_t n)"
Combine multiple Schnorr partial signatures\&. Returns: 1: the passed signatures were successfully combined\&. 0: the resulting signature is not valid (chance of 1 in 2^256) -1: some inputs were invalid, or the signatures were not created using the same set of nonces Args: ctx: pointer to a context object Out: sig64: pointer to a 64-byte array to place the combined signature (cannot be NULL) In: sig64sin: pointer to an array of n pointers to 64-byte input signatures n: the number of signatures to combine (at least 1) 
.PP
Definition at line 157 of file main_impl\&.h\&.
.SS "int secp256k1_schnorr_partial_sign (const \fBsecp256k1_context\fP * ctx, unsigned char * sig64, const unsigned char * msg32, const unsigned char * sec32, const \fBsecp256k1_pubkey\fP * pubnonce_others, const unsigned char * secnonce32)"
Produce a partial Schnorr signature, which can be combined using secp256k1_schnorr_partial_combine, to end up with a full signature that is verifiable using secp256k1_schnorr_verify\&. Returns: 1: signature created successfully\&. 0: no valid signature exists with this combination of keys, nonces and message (chance around 1 in 2^128) -1: invalid private key, nonce, or public nonces\&. Args: ctx: pointer to context object, initialized for signing (cannot be NULL) Out: sig64: pointer to 64-byte array to put partial signature in In: msg32: pointer to 32-byte message to sign sec32: pointer to 32-byte private key pubnonce_others: pointer to pubkey containing the sum of the other's nonces (see secp256k1_ec_pubkey_combine) secnonce32: pointer to 32-byte array containing our nonce
.PP
The intended procedure for creating a multiparty signature is:
.IP "\(bu" 2
Each signer S[i] with private key x[i] and public key Q[i] runs secp256k1_schnorr_generate_nonce_pair to produce a pair (k[i],R[i]) of private/public nonces\&.
.IP "\(bu" 2
All signers communicate their public nonces to each other (revealing your private nonce can lead to discovery of your private key, so it should be considered secret)\&.
.IP "\(bu" 2
All signers combine all the public nonces they received (excluding their own) using secp256k1_ec_pubkey_combine to obtain an Rall[i] = sum(R[0\&.\&.i-1,i+1\&.\&.n])\&.
.IP "\(bu" 2
All signers produce a partial signature using secp256k1_schnorr_partial_sign, passing in their own private key x[i], their own private nonce k[i], and the sum of the others' public nonces Rall[i]\&.
.IP "\(bu" 2
All signers communicate their partial signatures to each other\&.
.IP "\(bu" 2
Someone combines all partial signatures using secp256k1_schnorr_partial_combine, to obtain a full signature\&.
.IP "\(bu" 2
The resulting signature is validatable using secp256k1_schnorr_verify, with public key equal to the result of secp256k1_ec_pubkey_combine of the signers' public keys (sum(Q[0\&.\&.n]))\&.
.PP
Note that secp256k1_schnorr_partial_combine and secp256k1_ec_pubkey_combine function take their arguments in any order, and it is possible to pre-combine several inputs already with one call, and add more inputs later by calling the function again (they are commutative and associative)\&. 
.PP

.PP
Definition at line 133 of file main_impl\&.h\&.
.SS "int secp256k1_schnorr_recover (const \fBsecp256k1_context\fP * ctx, \fBsecp256k1_pubkey\fP * pubkey, const unsigned char * sig64, const unsigned char * msg32)"
Recover an EC public key from a Schnorr signature created using secp256k1_schnorr_sign\&. Returns: 1: public key successfully recovered (which guarantees a correct signature)\&. 0: otherwise\&. Args: ctx: pointer to a context object, initialized for verification (cannot be NULL) Out: pubkey: pointer to a pubkey to set to the recovered public key (cannot be NULL)\&. In: sig64: signature as 64 byte array (cannot be NULL) msg32: the 32-byte message hash assumed to be signed (cannot be NULL) 
.PP
Definition at line 73 of file main_impl\&.h\&.
.SS "int secp256k1_schnorr_sign (const \fBsecp256k1_context\fP * ctx, unsigned char * sig64, const unsigned char * msg32, const unsigned char * seckey, \fBsecp256k1_nonce_function\fP noncefp, const void * ndata)"
Create a signature using a custom EC-Schnorr-SHA256 construction\&. It produces non-malleable 64-byte signatures which support public key recovery batch validation, and multiparty signing\&. Returns: 1: signature created 0: the nonce generation function failed, or the private key was invalid\&. Args: ctx: pointer to a context object, initialized for signing (cannot be NULL) Out: sig64: pointer to a 64-byte array where the signature will be placed (cannot be NULL) In: msg32: the 32-byte message hash being signed (cannot be NULL) seckey: pointer to a 32-byte secret key (cannot be NULL) noncefp:pointer to a nonce generation function\&. If NULL, secp256k1_nonce_function_default is used ndata: pointer to arbitrary data used by the nonce generation function (can be NULL) 
.PP
Definition at line 23 of file main_impl\&.h\&.
.SS "int secp256k1_schnorr_verify (const \fBsecp256k1_context\fP * ctx, const unsigned char * sig64, const unsigned char * msg32, const \fBsecp256k1_pubkey\fP * pubkey)"
Verify a signature created by secp256k1_schnorr_sign\&. Returns: 1: correct signature 0: incorrect signature Args: ctx: a secp256k1 context object, initialized for verification\&. In: sig64: the 64-byte signature being verified (cannot be NULL) msg32: the 32-byte message hash being verified (cannot be NULL) pubkey: the public key to verify with (cannot be NULL) 
.PP
Definition at line 61 of file main_impl\&.h\&.
.SH "Author"
.PP 
Generated automatically by Doxygen for darksilk from the source code\&.
