.TH "CBigNum" 3 "Wed Feb 10 2016" "Version 1.0.0.0" "darksilk" \" -*- nroff -*-
.ad l
.nh
.SH NAME
CBigNum \- 
.SH SYNOPSIS
.br
.PP
.PP
\fC#include <bignum\&.h>\fP
.PP
Inherits BIGNUM\&.
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBCBigNum\fP ()"
.br
.ti -1c
.RI "\fBCBigNum\fP (const \fBCBigNum\fP &b)"
.br
.ti -1c
.RI "\fBCBigNum\fP & \fBoperator=\fP (const \fBCBigNum\fP &b)"
.br
.ti -1c
.RI "\fB~CBigNum\fP ()"
.br
.ti -1c
.RI "\fBCBigNum\fP (signed char n)"
.br
.ti -1c
.RI "\fBCBigNum\fP (short n)"
.br
.ti -1c
.RI "\fBCBigNum\fP (int n)"
.br
.ti -1c
.RI "\fBCBigNum\fP (long n)"
.br
.ti -1c
.RI "\fBCBigNum\fP (long long n)"
.br
.ti -1c
.RI "\fBCBigNum\fP (unsigned char n)"
.br
.ti -1c
.RI "\fBCBigNum\fP (unsigned short n)"
.br
.ti -1c
.RI "\fBCBigNum\fP (unsigned int n)"
.br
.ti -1c
.RI "\fBCBigNum\fP (unsigned long n)"
.br
.ti -1c
.RI "\fBCBigNum\fP (unsigned long long n)"
.br
.ti -1c
.RI "\fBCBigNum\fP (\fBuint256\fP n)"
.br
.ti -1c
.RI "\fBCBigNum\fP (const std::vector< unsigned char > &vch)"
.br
.ti -1c
.RI "int \fBbitSize\fP () const "
.br
.ti -1c
.RI "void \fBsetulong\fP (unsigned long n)"
.br
.ti -1c
.RI "unsigned long \fBgetulong\fP () const "
.br
.ti -1c
.RI "unsigned int \fBgetuint\fP () const "
.br
.ti -1c
.RI "int \fBgetint\fP () const "
.br
.ti -1c
.RI "void \fBsetint64\fP (\fBint64_t\fP sn)"
.br
.ti -1c
.RI "\fBuint64_t\fP \fBgetuint64\fP ()"
.br
.ti -1c
.RI "void \fBsetuint64\fP (\fBuint64_t\fP n)"
.br
.ti -1c
.RI "void \fBsetuint256\fP (\fBuint256\fP n)"
.br
.ti -1c
.RI "\fBuint256\fP \fBgetuint256\fP () const "
.br
.ti -1c
.RI "void \fBsetvch\fP (const std::vector< unsigned char > &vch)"
.br
.ti -1c
.RI "std::vector< unsigned char > \fBgetvch\fP () const "
.br
.ti -1c
.RI "\fBCBigNum\fP & \fBSetCompact\fP (unsigned int nCompact)"
.br
.ti -1c
.RI "unsigned int \fBGetCompact\fP () const "
.br
.ti -1c
.RI "void \fBSetHex\fP (const std::string &str)"
.br
.ti -1c
.RI "std::string \fBToString\fP (int nBase=10) const "
.br
.ti -1c
.RI "std::string \fBGetHex\fP () const "
.br
.ti -1c
.RI "unsigned int \fBGetSerializeSize\fP (int nType=0, int nVersion=PROTOCOL_VERSION) const "
.br
.ti -1c
.RI "template<typename Stream > void \fBSerialize\fP (Stream &s, int nType=0, int nVersion=PROTOCOL_VERSION) const "
.br
.ti -1c
.RI "template<typename Stream > void \fBUnserialize\fP (Stream &s, int nType=0, int nVersion=PROTOCOL_VERSION)"
.br
.ti -1c
.RI "\fBCBigNum\fP \fBpow\fP (const int e) const "
.br
.ti -1c
.RI "\fBCBigNum\fP \fBpow\fP (const \fBCBigNum\fP &e) const "
.br
.ti -1c
.RI "\fBCBigNum\fP \fBmul_mod\fP (const \fBCBigNum\fP &b, const \fBCBigNum\fP &m) const "
.br
.ti -1c
.RI "\fBCBigNum\fP \fBpow_mod\fP (const \fBCBigNum\fP &e, const \fBCBigNum\fP &m) const "
.br
.ti -1c
.RI "\fBCBigNum\fP \fBinverse\fP (const \fBCBigNum\fP &m) const "
.br
.ti -1c
.RI "\fBCBigNum\fP \fBgcd\fP (const \fBCBigNum\fP &b) const "
.br
.ti -1c
.RI "bool \fBisPrime\fP (const int checks=BN_prime_checks) const "
.br
.ti -1c
.RI "bool \fBisOne\fP () const "
.br
.ti -1c
.RI "bool \fBoperator!\fP () const "
.br
.ti -1c
.RI "\fBCBigNum\fP & \fBoperator+=\fP (const \fBCBigNum\fP &b)"
.br
.ti -1c
.RI "\fBCBigNum\fP & \fBoperator-=\fP (const \fBCBigNum\fP &b)"
.br
.ti -1c
.RI "\fBCBigNum\fP & \fBoperator*=\fP (const \fBCBigNum\fP &b)"
.br
.ti -1c
.RI "\fBCBigNum\fP & \fBoperator/=\fP (const \fBCBigNum\fP &b)"
.br
.ti -1c
.RI "\fBCBigNum\fP & \fBoperator%=\fP (const \fBCBigNum\fP &b)"
.br
.ti -1c
.RI "\fBCBigNum\fP & \fBoperator<<=\fP (unsigned int shift)"
.br
.ti -1c
.RI "\fBCBigNum\fP & \fBoperator>>=\fP (unsigned int shift)"
.br
.ti -1c
.RI "\fBCBigNum\fP & \fBoperator++\fP ()"
.br
.ti -1c
.RI "const \fBCBigNum\fP \fBoperator++\fP (int)"
.br
.ti -1c
.RI "\fBCBigNum\fP & \fBoperator--\fP ()"
.br
.ti -1c
.RI "const \fBCBigNum\fP \fBoperator--\fP (int)"
.br
.in -1c
.SS "Static Public Member Functions"

.in +1c
.ti -1c
.RI "static \fBCBigNum\fP \fBrandBignum\fP (const \fBCBigNum\fP &range)"
.br
.ti -1c
.RI "static \fBCBigNum\fP \fBRandKBitBigum\fP (const \fBuint32_t\fP k)"
.br
.ti -1c
.RI "static \fBCBigNum\fP \fBgeneratePrime\fP (const unsigned int numBits, bool safe=false)"
.br
.in -1c
.SS "Friends"

.in +1c
.ti -1c
.RI "const \fBCBigNum\fP \fBoperator-\fP (const \fBCBigNum\fP &a, const \fBCBigNum\fP &b)"
.br
.ti -1c
.RI "const \fBCBigNum\fP \fBoperator/\fP (const \fBCBigNum\fP &a, const \fBCBigNum\fP &b)"
.br
.ti -1c
.RI "const \fBCBigNum\fP \fBoperator%\fP (const \fBCBigNum\fP &a, const \fBCBigNum\fP &b)"
.br
.ti -1c
.RI "const \fBCBigNum\fP \fBoperator*\fP (const \fBCBigNum\fP &a, const \fBCBigNum\fP &b)"
.br
.ti -1c
.RI "bool \fBoperator<\fP (const \fBCBigNum\fP &a, const \fBCBigNum\fP &b)"
.br
.in -1c
.SH "Detailed Description"
.PP 
C++ wrapper for BIGNUM (OpenSSL bignum) 
.PP
Definition at line 57 of file bignum\&.h\&.
.SH "Constructor & Destructor Documentation"
.PP 
.SS "CBigNum::CBigNum ()\fC [inline]\fP"

.PP
Definition at line 60 of file bignum\&.h\&.
.SS "CBigNum::CBigNum (const \fBCBigNum\fP & b)\fC [inline]\fP"

.PP
Definition at line 65 of file bignum\&.h\&.
.SS "CBigNum::~CBigNum ()\fC [inline]\fP"

.PP
Definition at line 82 of file bignum\&.h\&.
.SS "CBigNum::CBigNum (signed char n)\fC [inline]\fP"

.PP
Definition at line 88 of file bignum\&.h\&.
.SS "CBigNum::CBigNum (short n)\fC [inline]\fP"

.PP
Definition at line 89 of file bignum\&.h\&.
.SS "CBigNum::CBigNum (int n)\fC [inline]\fP"

.PP
Definition at line 90 of file bignum\&.h\&.
.SS "CBigNum::CBigNum (long n)\fC [inline]\fP"

.PP
Definition at line 91 of file bignum\&.h\&.
.SS "CBigNum::CBigNum (long long n)\fC [inline]\fP"

.PP
Definition at line 92 of file bignum\&.h\&.
.SS "CBigNum::CBigNum (unsigned char n)\fC [inline]\fP"

.PP
Definition at line 93 of file bignum\&.h\&.
.SS "CBigNum::CBigNum (unsigned short n)\fC [inline]\fP"

.PP
Definition at line 94 of file bignum\&.h\&.
.SS "CBigNum::CBigNum (unsigned int n)\fC [inline]\fP"

.PP
Definition at line 95 of file bignum\&.h\&.
.SS "CBigNum::CBigNum (unsigned long n)\fC [inline]\fP"

.PP
Definition at line 96 of file bignum\&.h\&.
.SS "CBigNum::CBigNum (unsigned long long n)\fC [inline]\fP"

.PP
Definition at line 97 of file bignum\&.h\&.
.SS "CBigNum::CBigNum (\fBuint256\fP n)\fC [inline]\fP, \fC [explicit]\fP"

.PP
Definition at line 98 of file bignum\&.h\&.
.SS "CBigNum::CBigNum (const std::vector< unsigned char > & vch)\fC [inline]\fP, \fC [explicit]\fP"

.PP
Definition at line 100 of file bignum\&.h\&.
.SH "Member Function Documentation"
.PP 
.SS "int CBigNum::bitSize () const\fC [inline]\fP"
Returns the size in bits of the underlying bignum\&.
.PP
\fBReturns:\fP
.RS 4
the size 
.RE
.PP

.PP
Definition at line 135 of file bignum\&.h\&.
.SS "\fBCBigNum\fP CBigNum::gcd (const \fBCBigNum\fP & b) const\fC [inline]\fP"
Calculates the greatest common divisor (GCD) of two numbers\&. 
.PP
\fBParameters:\fP
.RS 4
\fIm\fP the second element 
.RE
.PP
\fBReturns:\fP
.RS 4
the GCD 
.RE
.PP

.PP
Definition at line 515 of file bignum\&.h\&.
.SS "static \fBCBigNum\fP CBigNum::generatePrime (const unsigned int numBits, bool safe = \fCfalse\fP)\fC [inline]\fP, \fC [static]\fP"
Generates a random (safe) prime of numBits bits 
.PP
\fBParameters:\fP
.RS 4
\fInumBits\fP the number of bits 
.br
\fIsafe\fP true for a safe prime 
.RE
.PP
\fBReturns:\fP
.RS 4
the prime 
.RE
.PP

.PP
Definition at line 503 of file bignum\&.h\&.
.SS "unsigned int CBigNum::GetCompact () const\fC [inline]\fP"

.PP
Definition at line 333 of file bignum\&.h\&.
.SS "std::string CBigNum::GetHex () const\fC [inline]\fP"

.PP
Definition at line 402 of file bignum\&.h\&.
.SS "int CBigNum::getint () const\fC [inline]\fP"

.PP
Definition at line 156 of file bignum\&.h\&.
.SS "unsigned int CBigNum::GetSerializeSize (int nType = \fC0\fP, int nVersion = \fCPROTOCOL_VERSION\fP) const\fC [inline]\fP"

.PP
Definition at line 407 of file bignum\&.h\&.
.SS "unsigned int CBigNum::getuint () const\fC [inline]\fP"

.PP
Definition at line 151 of file bignum\&.h\&.
.SS "\fBuint256\fP CBigNum::getuint256 () const\fC [inline]\fP"

.PP
Definition at line 278 of file bignum\&.h\&.
.SS "\fBuint64_t\fP CBigNum::getuint64 ()\fC [inline]\fP"

.PP
Definition at line 208 of file bignum\&.h\&.
.SS "unsigned long CBigNum::getulong () const\fC [inline]\fP"

.PP
Definition at line 146 of file bignum\&.h\&.
.SS "std::vector<unsigned char> CBigNum::getvch () const\fC [inline]\fP"

.PP
Definition at line 309 of file bignum\&.h\&.
.SS "\fBCBigNum\fP CBigNum::inverse (const \fBCBigNum\fP & m) const\fC [inline]\fP"
Calculates the inverse of this element mod m\&. i\&.e\&. i such this*i = 1 mod m 
.PP
\fBParameters:\fP
.RS 4
\fIm\fP the modu 
.RE
.PP
\fBReturns:\fP
.RS 4
the inverse 
.RE
.PP

.PP
Definition at line 489 of file bignum\&.h\&.
.SS "bool CBigNum::isOne () const\fC [inline]\fP"

.PP
Definition at line 538 of file bignum\&.h\&.
.SS "bool CBigNum::isPrime (const int checks = \fCBN_prime_checks\fP) const\fC [inline]\fP"
Miller-Rabin primality test on this element 
.PP
\fBParameters:\fP
.RS 4
\fIchecks\fP optional, the number of Miller-Rabin tests to run default causes error rate of 2^-80\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
true if prime 
.RE
.PP

.PP
Definition at line 529 of file bignum\&.h\&.
.SS "\fBCBigNum\fP CBigNum::mul_mod (const \fBCBigNum\fP & b, const \fBCBigNum\fP & m) const\fC [inline]\fP"
modular multiplication: (this * b) mod m 
.PP
\fBParameters:\fP
.RS 4
\fIb\fP operand 
.br
\fIm\fP modulus 
.RE
.PP

.PP
Definition at line 453 of file bignum\&.h\&.
.SS "bool CBigNum::operator! () const\fC [inline]\fP"

.PP
Definition at line 543 of file bignum\&.h\&.
.SS "\fBCBigNum\fP& CBigNum::operator%= (const \fBCBigNum\fP & b)\fC [inline]\fP"

.PP
Definition at line 575 of file bignum\&.h\&.
.SS "\fBCBigNum\fP& CBigNum::operator*= (const \fBCBigNum\fP & b)\fC [inline]\fP"

.PP
Definition at line 561 of file bignum\&.h\&.
.SS "\fBCBigNum\fP& CBigNum::operator++ ()\fC [inline]\fP"

.PP
Definition at line 606 of file bignum\&.h\&.
.SS "const \fBCBigNum\fP CBigNum::operator++ (int)\fC [inline]\fP"

.PP
Definition at line 614 of file bignum\&.h\&.
.SS "\fBCBigNum\fP& CBigNum::operator+= (const \fBCBigNum\fP & b)\fC [inline]\fP"

.PP
Definition at line 548 of file bignum\&.h\&.
.SS "\fBCBigNum\fP& CBigNum::operator-- ()\fC [inline]\fP"

.PP
Definition at line 622 of file bignum\&.h\&.
.SS "const \fBCBigNum\fP CBigNum::operator-- (int)\fC [inline]\fP"

.PP
Definition at line 632 of file bignum\&.h\&.
.SS "\fBCBigNum\fP& CBigNum::operator-= (const \fBCBigNum\fP & b)\fC [inline]\fP"

.PP
Definition at line 555 of file bignum\&.h\&.
.SS "\fBCBigNum\fP& CBigNum::operator/= (const \fBCBigNum\fP & b)\fC [inline]\fP"

.PP
Definition at line 569 of file bignum\&.h\&.
.SS "\fBCBigNum\fP& CBigNum::operator<<= (unsigned int shift)\fC [inline]\fP"

.PP
Definition at line 581 of file bignum\&.h\&.
.SS "\fBCBigNum\fP& CBigNum::operator= (const \fBCBigNum\fP & b)\fC [inline]\fP"

.PP
Definition at line 75 of file bignum\&.h\&.
.SS "\fBCBigNum\fP& CBigNum::operator>>= (unsigned int shift)\fC [inline]\fP"

.PP
Definition at line 588 of file bignum\&.h\&.
.SS "\fBCBigNum\fP CBigNum::pow (const int e) const\fC [inline]\fP"
exponentiation with an int\&. this^e 
.PP
\fBParameters:\fP
.RS 4
\fIe\fP the exponent as an int 
.RE
.PP
\fBReturns:\fP
.RS 4
.RE
.PP

.PP
Definition at line 431 of file bignum\&.h\&.
.SS "\fBCBigNum\fP CBigNum::pow (const \fBCBigNum\fP & e) const\fC [inline]\fP"
exponentiation this^e 
.PP
\fBParameters:\fP
.RS 4
\fIe\fP the exponent 
.RE
.PP
\fBReturns:\fP
.RS 4
.RE
.PP

.PP
Definition at line 440 of file bignum\&.h\&.
.SS "\fBCBigNum\fP CBigNum::pow_mod (const \fBCBigNum\fP & e, const \fBCBigNum\fP & m) const\fC [inline]\fP"
modular exponentiation: this^e mod n 
.PP
\fBParameters:\fP
.RS 4
\fIe\fP exponent 
.br
\fIm\fP modulus 
.RE
.PP

.PP
Definition at line 467 of file bignum\&.h\&.
.SS "static \fBCBigNum\fP CBigNum::randBignum (const \fBCBigNum\fP & range)\fC [inline]\fP, \fC [static]\fP"
Generates a cryptographically secure random number between zero and range exclusive i\&.e\&. 0 < returned number < range 
.PP
\fBParameters:\fP
.RS 4
\fIrange\fP The upper bound on the number\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
.RE
.PP

.PP
Definition at line 111 of file bignum\&.h\&.
.SS "static \fBCBigNum\fP CBigNum::RandKBitBigum (const \fBuint32_t\fP k)\fC [inline]\fP, \fC [static]\fP"
Generates a cryptographically secure random k-bit number 
.PP
\fBParameters:\fP
.RS 4
\fIk\fP The bit length of the number\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
.RE
.PP

.PP
Definition at line 123 of file bignum\&.h\&.
.SS "template<typename Stream > void CBigNum::Serialize (Stream & s, int nType = \fC0\fP, int nVersion = \fCPROTOCOL_VERSION\fP) const\fC [inline]\fP"

.PP
Definition at line 413 of file bignum\&.h\&.
.SS "\fBCBigNum\fP& CBigNum::SetCompact (unsigned int nCompact)\fC [inline]\fP"

.PP
Definition at line 321 of file bignum\&.h\&.
.SS "void CBigNum::SetHex (const std::string & str)\fC [inline]\fP"

.PP
Definition at line 346 of file bignum\&.h\&.
.SS "void CBigNum::setint64 (\fBint64_t\fP sn)\fC [inline]\fP"

.PP
Definition at line 165 of file bignum\&.h\&.
.SS "void CBigNum::setuint256 (\fBuint256\fP n)\fC [inline]\fP"

.PP
Definition at line 250 of file bignum\&.h\&.
.SS "void CBigNum::setuint64 (\fBuint64_t\fP n)\fC [inline]\fP"

.PP
Definition at line 223 of file bignum\&.h\&.
.SS "void CBigNum::setulong (unsigned long n)\fC [inline]\fP"

.PP
Definition at line 140 of file bignum\&.h\&.
.SS "void CBigNum::setvch (const std::vector< unsigned char > & vch)\fC [inline]\fP"

.PP
Definition at line 294 of file bignum\&.h\&.
.SS "std::string CBigNum::ToString (int nBase = \fC10\fP) const\fC [inline]\fP"

.PP
Definition at line 376 of file bignum\&.h\&.
.SS "template<typename Stream > void CBigNum::Unserialize (Stream & s, int nType = \fC0\fP, int nVersion = \fCPROTOCOL_VERSION\fP)\fC [inline]\fP"

.PP
Definition at line 419 of file bignum\&.h\&.
.SH "Friends And Related Function Documentation"
.PP 
.SS "const \fBCBigNum\fP operator% (const \fBCBigNum\fP & a, const \fBCBigNum\fP & b)\fC [friend]\fP"

.PP
Definition at line 691 of file bignum\&.h\&.
.SS "const \fBCBigNum\fP operator* (const \fBCBigNum\fP & a, const \fBCBigNum\fP & b)\fC [friend]\fP"

.PP
Definition at line 673 of file bignum\&.h\&.
.SS "const \fBCBigNum\fP operator- (const \fBCBigNum\fP & a, const \fBCBigNum\fP & b)\fC [friend]\fP"

.PP
Definition at line 658 of file bignum\&.h\&.
.SS "const \fBCBigNum\fP operator/ (const \fBCBigNum\fP & a, const \fBCBigNum\fP & b)\fC [friend]\fP"

.PP
Definition at line 682 of file bignum\&.h\&.
.SS "bool operator< (const \fBCBigNum\fP & a, const \fBCBigNum\fP & b)\fC [friend]\fP"

.PP
Definition at line 719 of file bignum\&.h\&.

.SH "Author"
.PP 
Generated automatically by Doxygen for darksilk from the source code\&.
