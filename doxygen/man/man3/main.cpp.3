.TH "/home/dev/ds-160209/src/main.cpp" 3 "Wed Feb 10 2016" "Version 1.0.0.0" "darksilk" \" -*- nroff -*-
.ad l
.nh
.SH NAME
/home/dev/ds-160209/src/main.cpp \- 
.SH SYNOPSIS
.br
.PP
\fC#include <boost/algorithm/string/replace\&.hpp>\fP
.br
\fC#include <boost/filesystem\&.hpp>\fP
.br
\fC#include <boost/filesystem/fstream\&.hpp>\fP
.br
\fC#include <boost/lexical_cast\&.hpp>\fP
.br
\fC#include 'main\&.h'\fP
.br
\fC#include 'alert\&.h'\fP
.br
\fC#include 'chainparams\&.h'\fP
.br
\fC#include 'checkpoints\&.h'\fP
.br
\fC#include 'db\&.h'\fP
.br
\fC#include 'init\&.h'\fP
.br
\fC#include 'kernel\&.h'\fP
.br
\fC#include 'txdb\&.h'\fP
.br
\fC#include 'ui_interface\&.h'\fP
.br
\fC#include 'instantx\&.h'\fP
.br
\fC#include 'sandstorm\&.h'\fP
.br
\fC#include 'stormnodeman\&.h'\fP
.br
\fC#include 'stormnode-budget\&.h'\fP
.br
\fC#include 'stormnode-payments\&.h'\fP
.br
\fC#include 'stormnode-sync\&.h'\fP
.br
\fC#include 'spork\&.h'\fP
.br
\fC#include 'smessage\&.h'\fP
.br
\fC#include 'coins\&.h'\fP
.br
\fC#include 'txdb-leveldb\&.h'\fP
.br

.SS "Classes"

.in +1c
.ti -1c
.RI "struct \fBCOrphanTx\fP"
.br
.ti -1c
.RI "struct \fBCOrphanBlock\fP"
.br
.ti -1c
.RI "struct \fBCImportingNow\fP"
.br
.in -1c
.SS "Enumerations"

.in +1c
.ti -1c
.RI "enum \fBFlushStateMode\fP { \fBFLUSH_STATE_IF_NEEDED\fP, \fBFLUSH_STATE_PERIODIC\fP, \fBFLUSH_STATE_ALWAYS\fP }"
.br
.in -1c
.SS "Functions"

.in +1c
.ti -1c
.RI "void \fBEraseOrphansFor\fP (\fBNodeId\fP peer)"
.br
.ti -1c
.RI "void \fBRegisterWallet\fP (\fBCWalletInterface\fP *pwalletIn)"
.br
.ti -1c
.RI "void \fBUnregisterWallet\fP (\fBCWalletInterface\fP *pwalletIn)"
.br
.ti -1c
.RI "void \fBUnregisterAllWallets\fP ()"
.br
.ti -1c
.RI "void \fBSyncWithWallets\fP (const \fBCTransaction\fP &tx, const \fBCBlock\fP *pblock, bool fConnect)"
.br
.ti -1c
.RI "void \fBResendWalletTransactions\fP (bool fForce)"
.br
.ti -1c
.RI "bool \fBGetNodeStateStats\fP (\fBNodeId\fP nodeid, \fBCNodeStateStats\fP &\fBstats\fP)"
.br
.ti -1c
.RI "void \fBRegisterNodeSignals\fP (\fBCNodeSignals\fP &nodeSignals)"
.br
.ti -1c
.RI "void \fBUnregisterNodeSignals\fP (\fBCNodeSignals\fP &nodeSignals)"
.br
.ti -1c
.RI "bool \fBAbortNode\fP (const std::string &strMessage, const std::string &userMessage)"
.br
.RI "\fIAbort with a message\&. \fP"
.ti -1c
.RI "int \fBGetHeight\fP ()"
.br
.ti -1c
.RI "bool \fBAddOrphanTx\fP (const \fBCTransaction\fP &tx, \fBNodeId\fP peer)"
.br
.ti -1c
.RI "unsigned int \fBLimitOrphanTxSize\fP (unsigned int nMaxOrphans)"
.br
.ti -1c
.RI "bool \fBIsStandardTx\fP (const \fBCTransaction\fP &tx, string &reason)"
.br
.ti -1c
.RI "bool \fBIsFinalTx\fP (const \fBCTransaction\fP &tx, int nBlockHeight, \fBint64_t\fP nBlockTime)"
.br
.ti -1c
.RI "bool \fBAreInputsStandard\fP (const \fBCTransaction\fP &tx, const \fBMapPrevTx\fP &mapInputs)"
.br
.ti -1c
.RI "unsigned int \fBGetLegacySigOpCount\fP (const \fBCTransaction\fP &tx)"
.br
.ti -1c
.RI "unsigned int \fBGetP2SHSigOpCount\fP (const \fBCTransaction\fP &tx, const \fBMapPrevTx\fP &inputs)"
.br
.ti -1c
.RI "\fBCAmount\fP \fBGetMinFee\fP (const \fBCTransaction\fP &tx, unsigned int nBytes, bool fAllowFree, enum \fBGetMinFee_mode\fP mode)"
.br
.ti -1c
.RI "bool \fBAcceptToMemoryPool\fP (\fBCTxMemPool\fP &pool, \fBCValidationState\fP &\fBstate\fP, \fBCTransaction\fP &tx, bool fLimitFree, bool *pfMissingInputs, bool ignoreFees)"
.br
.RI "\fI(try to) add transaction to memory pool \fP"
.ti -1c
.RI "bool \fBAcceptableInputs\fP (\fBCTxMemPool\fP &pool, \fBCValidationState\fP &\fBstate\fP, \fBCTransaction\fP &tx, bool fLimitFree, bool *pfMissingInputs, bool fRejectInsaneFee, bool isSSTX)"
.br
.ti -1c
.RI "int \fBGetInputAge\fP (\fBCTxIn\fP &vin)"
.br
.ti -1c
.RI "int \fBGetInputAgeIX\fP (\fBuint256\fP nTXHash, \fBCTxIn\fP &vin)"
.br
.ti -1c
.RI "int \fBGetIXConfirmations\fP (\fBuint256\fP nTXHash)"
.br
.ti -1c
.RI "bool \fBGetTransaction\fP (const \fBuint256\fP &\fBhash\fP, \fBCTransaction\fP &tx, \fBuint256\fP &hashBlock)"
.br
.RI "\fIReturn transaction in tx, and if it was found inside a block, its hash is placed in hashBlock\&. \fP"
.ti -1c
.RI "\fBuint256\fP \fBWantedByOrphan\fP (const \fBCOrphanBlock\fP *pblockOrphan)"
.br
.ti -1c
.RI "\fBCAmount\fP \fBGetProofOfWorkReward\fP (\fBCAmount\fP nFees)"
.br
.ti -1c
.RI "const \fBCBlockIndex\fP * \fBGetLastBlockIndex\fP (const \fBCBlockIndex\fP *pindex, bool fProofOfStake)"
.br
.ti -1c
.RI "unsigned int \fBGetNextTargetRequired\fP (const \fBCBlockIndex\fP *pindexLast, bool fProofOfStake)"
.br
.ti -1c
.RI "\fBCAmount\fP \fBGetBlockValue\fP (int nBits, int nHeight, const \fBCAmount\fP &nFees)"
.br
.ti -1c
.RI "\fBCAmount\fP \fBGetStormnodePayment\fP (int nHeight, \fBCAmount\fP blockValue)"
.br
.ti -1c
.RI "void \fBMisbehaving\fP (\fBNodeId\fP pnode, int howmuch)"
.br
.RI "\fIIncrease a node's misbehavior score\&. \fP"
.ti -1c
.RI "bool \fBIsConfirmedInNPrevBlocks\fP (const \fBCTxIndex\fP &txindex, const \fBCBlockIndex\fP *pindexFrom, int nMaxDepth, int &nActualDepth)"
.br
.ti -1c
.RI "bool \fBDisconnectBlocksAndReprocess\fP (int blocks)"
.br
.ti -1c
.RI "bool \fBFindTransactionsByDestination\fP (const \fBCTxDestination\fP &dest, std::vector< \fBuint256\fP > &vtxhash)"
.br
.ti -1c
.RI "void \fBPushGetBlocks\fP (\fBCNode\fP *pnode, \fBCBlockIndex\fP *pindexBegin, \fBuint256\fP hashEnd)"
.br
.ti -1c
.RI "bool \fBProcessBlock\fP (\fBCNode\fP *pfrom, \fBCBlock\fP *pblock)"
.br
.ti -1c
.RI "bool \fBCheckDiskSpace\fP (\fBuint64_t\fP nAdditionalBytes)"
.br
.ti -1c
.RI "void \fBUnloadBlockIndex\fP ()"
.br
.RI "\fIUnload database information\&. \fP"
.ti -1c
.RI "bool \fBLoadBlockIndex\fP (bool fAllowNew)"
.br
.RI "\fILoad the block tree and coins database from disk */\&. \fP"
.ti -1c
.RI "bool \fBInitBlockIndex\fP ()"
.br
.RI "\fIInitialize a new block tree database + block data on disk\&. \fP"
.ti -1c
.RI "void \fBPrintBlockTree\fP ()"
.br
.ti -1c
.RI "bool \fBLoadExternalBlockFile\fP (FILE *fileIn)"
.br
.ti -1c
.RI "void \fBThreadImport\fP (std::vector< boost::filesystem::path > vImportFiles)"
.br
.ti -1c
.RI "string \fBGetWarnings\fP (string strFor)"
.br
.ti -1c
.RI "bool \fBProcessMessages\fP (\fBCNode\fP *pfrom)"
.br
.ti -1c
.RI "bool \fBSendMessages\fP (\fBCNode\fP *pto, bool fSendTrickle)"
.br
.ti -1c
.RI "boost::filesystem::path \fBGetBlockPosFilename\fP (const \fBCDiskBlockPos\fP &pos, const char *prefix)"
.br
.ti -1c
.RI "FILE * \fBOpenDiskFile\fP (const \fBCDiskBlockPos\fP &pos, const char *prefix, bool fReadOnly)"
.br
.ti -1c
.RI "FILE * \fBOpenBlockFile\fP (unsigned int nFile, unsigned int nBlockPos, const char *pszMode)"
.br
.ti -1c
.RI "FILE * \fBOpenBlockFile\fP (const \fBCDiskBlockPos\fP &pos, bool fReadOnly)"
.br
.ti -1c
.RI "FILE * \fBOpenUndoFile\fP (const \fBCDiskBlockPos\fP &pos, bool fReadOnly)"
.br
.ti -1c
.RI "void \fBFlushStateToDisk\fP ()"
.br
.in -1c
.SS "Variables"

.in +1c
.ti -1c
.RI "\fBCBigNum\fP \fBbnProofOfStakeLimit\fP (~\fBuint256\fP(0) >> 20)"
.br
.ti -1c
.RI "\fBCCriticalSection\fP \fBcs_setpwalletRegistered\fP"
.br
.ti -1c
.RI "set< \fBCWallet\fP * > \fBsetpwalletRegistered\fP"
.br
.ti -1c
.RI "\fBCCriticalSection\fP \fBcs_main\fP"
.br
.ti -1c
.RI "\fBCFeeRate\fP \fBminRelayTxFee\fP = \fBCFeeRate\fP(\fBMIN_TX_FEE\fP)"
.br
.ti -1c
.RI "\fBCTxMemPool\fP \fBmempool\fP (::\fBminRelayTxFee\fP)"
.br
.ti -1c
.RI "map< \fBuint256\fP, \fBCBlockIndex\fP * > \fBmapBlockIndex\fP"
.br
.ti -1c
.RI "set< pair< \fBCOutPoint\fP, unsigned int > > \fBsetStakeSeen\fP"
.br
.ti -1c
.RI "unsigned int \fBnStakeMinAge\fP = 10 * 60"
.br
.ti -1c
.RI "unsigned int \fBnModifierInterval\fP = 10 * 60"
.br
.ti -1c
.RI "int \fBnStakeMinConfirmations\fP = 10"
.br
.ti -1c
.RI "int \fBnCoinbaseMaturity\fP = 10"
.br
.ti -1c
.RI "bool \fBfTxIndex\fP = true"
.br
.ti -1c
.RI "\fBCBlockIndex\fP * \fBpindexGenesisBlock\fP = NULL"
.br
.ti -1c
.RI "int \fBnBestHeight\fP = -1"
.br
.ti -1c
.RI "\fBuint256\fP \fBnBestChainTrust\fP = 0"
.br
.ti -1c
.RI "\fBuint256\fP \fBnBestInvalidTrust\fP = 0"
.br
.ti -1c
.RI "\fBuint256\fP \fBhashBestChain\fP = 0"
.br
.ti -1c
.RI "\fBCBlockIndex\fP * \fBpindexBest\fP = NULL"
.br
.ti -1c
.RI "\fBint64_t\fP \fBnTimeBestReceived\fP = 0"
.br
.ti -1c
.RI "bool \fBfImporting\fP = false"
.br
.ti -1c
.RI "bool \fBfReindex\fP = false"
.br
.ti -1c
.RI "bool \fBfAddrIndex\fP = false"
.br
.ti -1c
.RI "map< \fBuint256\fP, \fBCOrphanBlock\fP * > \fBmapOrphanBlocks\fP"
.br
.ti -1c
.RI "multimap< \fBuint256\fP, \fBCOrphanBlock\fP * > \fBmapOrphanBlocksByPrev\fP"
.br
.ti -1c
.RI "set< pair< \fBCOutPoint\fP, unsigned int > > \fBsetStakeSeenOrphan\fP"
.br
.ti -1c
.RI "size_t \fBnOrphanBlocksSize\fP = 0"
.br
.ti -1c
.RI "map< \fBuint256\fP, \fBint64_t\fP > \fBmapRejectedBlocks\fP"
.br
.ti -1c
.RI "map< \fBuint256\fP, \fBCOrphanTx\fP > \fBmapOrphanTransactions\fP"
.br
.ti -1c
.RI "map< \fBuint256\fP, set< \fBuint256\fP > > \fBmapOrphanTransactionsByPrev\fP"
.br
.ti -1c
.RI "\fBCScript\fP \fBCOINBASE_FLAGS\fP"
.br
.ti -1c
.RI "const string \fBstrMessageMagic\fP = 'DarkSilk Signed Message:\\n'"
.br
.ti -1c
.RI "std::set< \fBuint256\fP > \fBsetValidatedTx\fP"
.br
.ti -1c
.RI "\fBCCoinsViewCache\fP * \fBpcoinsTip\fP = NULL"
.br
.RI "\fIGlobal variable that points to the active \fBCCoinsView\fP (protected by cs_main) \fP"
.ti -1c
.RI "\fBCBlockTreeDB\fP * \fBpblocktree\fP = NULL"
.br
.RI "\fIGlobal variable that points to the active block tree (protected by cs_main) \fP"
.ti -1c
.RI "unsigned int \fBnCoinCacheSize\fP = 5000"
.br
.ti -1c
.RI "map< \fBuint256\fP, \fBCAlert\fP > \fBmapAlerts\fP"
.br
.ti -1c
.RI "\fBCCriticalSection\fP \fBcs_mapAlerts\fP"
.br
.in -1c
.SH "Enumeration Type Documentation"
.PP 
.SS "enum \fBFlushStateMode\fP"

.PP
\fBEnumerator\fP
.in +1c
.TP
\fB\fIFLUSH_STATE_IF_NEEDED \fP\fP
.TP
\fB\fIFLUSH_STATE_PERIODIC \fP\fP
.TP
\fB\fIFLUSH_STATE_ALWAYS \fP\fP
.PP
Definition at line 3996 of file main\&.cpp\&.
.SH "Function Documentation"
.PP 
.SS "bool AbortNode (const std::string & strMessage, const std::string & userMessage)"

.PP
Abort with a message\&. 
.PP
Definition at line 478 of file main\&.cpp\&.
.SS "bool AcceptableInputs (\fBCTxMemPool\fP & pool, \fBCValidationState\fP & state, \fBCTransaction\fP & tx, bool fLimitFree, bool * pfMissingInputs, bool fRejectInsaneFee, bool isSSTX)"

.PP
Definition at line 1230 of file main\&.cpp\&.
.SS "bool AcceptToMemoryPool (\fBCTxMemPool\fP & pool, \fBCValidationState\fP & state, \fBCTransaction\fP & tx, bool fLimitFree, bool * pfMissingInputs, bool ignoreFees)"

.PP
(try to) add transaction to memory pool 
.PP
Definition at line 865 of file main\&.cpp\&.
.SS "bool AddOrphanTx (const \fBCTransaction\fP & tx, \fBNodeId\fP peer)"

.PP
Definition at line 501 of file main\&.cpp\&.
.SS "bool AreInputsStandard (const \fBCTransaction\fP & tx, const \fBMapPrevTx\fP & mapInputs)"
Check for standard transaction types 
.PP
\fBParameters:\fP
.RS 4
\fImapInputs\fP Map of previous transactions that have outputs we're spending 
.RE
.PP
\fBReturns:\fP
.RS 4
True if all inputs (scriptSigs) use only standard transaction forms 
.RE
.PP
\fBSee also:\fP
.RS 4
CTransaction::FetchInputs 
.RE
.PP

.PP
Definition at line 692 of file main\&.cpp\&.
.SS "bool CheckDiskSpace (\fBuint64_t\fP nAdditionalBytes)"

.PP
Definition at line 2024 of file main\&.cpp\&.
.SS "bool DisconnectBlocksAndReprocess (int blocks)"

.PP
Definition at line 1779 of file main\&.cpp\&.
.SS "void EraseOrphansFor (\fBNodeId\fP peer)"

.SS "bool FindTransactionsByDestination (const \fBCTxDestination\fP & dest, std::vector< \fBuint256\fP > & vtxhash)"

.PP
Definition at line 1792 of file main\&.cpp\&.
.SS "void FlushStateToDisk ()"

.PP
Definition at line 4120 of file main\&.cpp\&.
.SS "boost::filesystem::path GetBlockPosFilename (const \fBCDiskBlockPos\fP & pos, const char * prefix)"

.PP
Definition at line 4008 of file main\&.cpp\&.
.SS "\fBCAmount\fP GetBlockValue (int nBits, int nHeight, const \fBCAmount\fP & nFees)"

.PP
Definition at line 1725 of file main\&.cpp\&.
.SS "int GetHeight ()"

.PP
Definition at line 488 of file main\&.cpp\&.
.SS "int GetInputAge (\fBCTxIn\fP & vin)"

.PP
Definition at line 1487 of file main\&.cpp\&.
.SS "int GetInputAgeIX (\fBuint256\fP nTXHash, \fBCTxIn\fP & vin)"

.PP
Definition at line 1506 of file main\&.cpp\&.
.SS "int GetIXConfirmations (\fBuint256\fP nTXHash)"

.PP
Definition at line 1525 of file main\&.cpp\&.
.SS "const \fBCBlockIndex\fP* GetLastBlockIndex (const \fBCBlockIndex\fP * pindex, bool fProofOfStake)"

.PP
Definition at line 1678 of file main\&.cpp\&.
.SS "unsigned int GetLegacySigOpCount (const \fBCTransaction\fP & tx)"
Count ECDSA signature operations the old-fashioned (pre-0\&.6) way 
.PP
\fBReturns:\fP
.RS 4
number of sigops this transaction's outputs will produce when spent 
.RE
.PP
\fBSee also:\fP
.RS 4
CTransaction::FetchInputs 
.RE
.PP

.PP
Definition at line 756 of file main\&.cpp\&.
.SS "\fBCAmount\fP GetMinFee (const \fBCTransaction\fP & tx, unsigned int nBytes, bool fAllowFree, enum \fBGetMinFee_mode\fP mode)"

.PP
Definition at line 831 of file main\&.cpp\&.
.SS "unsigned int GetNextTargetRequired (const \fBCBlockIndex\fP * pindexLast, bool fProofOfStake)"

.PP
Definition at line 1685 of file main\&.cpp\&.
.SS "bool GetNodeStateStats (\fBNodeId\fP nodeid, \fBCNodeStateStats\fP & stats)"
Get statistics from node state 
.PP
Definition at line 445 of file main\&.cpp\&.
.SS "unsigned int GetP2SHSigOpCount (const \fBCTransaction\fP & tx, const \fBMapPrevTx\fP & mapInputs)"
Count ECDSA signature operations in pay-to-script-hash inputs\&.
.PP
\fBParameters:\fP
.RS 4
\fImapInputs\fP Map of previous transactions that have outputs we're spending 
.RE
.PP
\fBReturns:\fP
.RS 4
maximum number of sigops required to validate this transaction's inputs 
.RE
.PP
\fBSee also:\fP
.RS 4
CTransaction::FetchInputs 
.RE
.PP

.PP
Definition at line 770 of file main\&.cpp\&.
.SS "\fBCAmount\fP GetProofOfWorkReward (\fBCAmount\fP nFees)"

.PP
Definition at line 1662 of file main\&.cpp\&.
.SS "\fBCAmount\fP GetStormnodePayment (int nHeight, \fBCAmount\fP blockValue)"

.PP
Definition at line 1733 of file main\&.cpp\&.
.SS "bool GetTransaction (const \fBuint256\fP & hash, \fBCTransaction\fP & tx, \fBuint256\fP & hashBlock)"

.PP
Return transaction in tx, and if it was found inside a block, its hash is placed in hashBlock\&. 
.PP
Definition at line 1557 of file main\&.cpp\&.
.SS "string GetWarnings (string strFor)"

.PP
Definition at line 2327 of file main\&.cpp\&.
.SS "bool InitBlockIndex ()"

.PP
Initialize a new block tree database + block data on disk\&. 
.PP
Definition at line 2106 of file main\&.cpp\&.
.SS "bool IsConfirmedInNPrevBlocks (const \fBCTxIndex\fP & txindex, const \fBCBlockIndex\fP * pindexFrom, int nMaxDepth, int & nActualDepth)"

.PP
Definition at line 1766 of file main\&.cpp\&.
.SS "bool IsFinalTx (const \fBCTransaction\fP & tx, int nBlockHeight, \fBint64_t\fP nBlockTime)"

.PP
Definition at line 665 of file main\&.cpp\&.
.SS "bool IsStandardTx (const \fBCTransaction\fP & tx, string & reason)"

.PP
Definition at line 569 of file main\&.cpp\&.
.SS "unsigned int LimitOrphanTxSize (unsigned int nMaxOrphans)"

.PP
Definition at line 548 of file main\&.cpp\&.
.SS "bool LoadBlockIndex (bool fAllowNew)"

.PP
Load the block tree and coins database from disk */\&. 
.PP
Definition at line 2068 of file main\&.cpp\&.
.SS "bool LoadExternalBlockFile (FILE * fileIn)"

.PP
Definition at line 2219 of file main\&.cpp\&.
.SS "void Misbehaving (\fBNodeId\fP pnode, int howmuch)"

.PP
Increase a node's misbehavior score\&. 
.PP
Definition at line 1741 of file main\&.cpp\&.
.SS "FILE* OpenBlockFile (unsigned int nFile, unsigned int nBlockPos, const char * pszMode)"

.PP
Definition at line 4036 of file main\&.cpp\&.
.SS "FILE* OpenBlockFile (const \fBCDiskBlockPos\fP & pos, bool fReadOnly)"

.PP
Definition at line 4054 of file main\&.cpp\&.
.SS "FILE* OpenDiskFile (const \fBCDiskBlockPos\fP & pos, const char * prefix, bool fReadOnly)"

.PP
Definition at line 4013 of file main\&.cpp\&.
.SS "FILE* OpenUndoFile (const \fBCDiskBlockPos\fP & pos, bool fReadOnly)"

.PP
Definition at line 4058 of file main\&.cpp\&.
.SS "void PrintBlockTree ()"

.PP
Definition at line 2146 of file main\&.cpp\&.
.SS "bool ProcessBlock (\fBCNode\fP * pfrom, \fBCBlock\fP * pblock)"

.PP
Definition at line 1885 of file main\&.cpp\&.
.SS "bool ProcessMessages (\fBCNode\fP * pfrom)"

.PP
Definition at line 3306 of file main\&.cpp\&.
.SS "void PushGetBlocks (\fBCNode\fP * pnode, \fBCBlockIndex\fP * pindexBegin, \fBuint256\fP hashEnd)"

.PP
Definition at line 1865 of file main\&.cpp\&.
.SS "void RegisterNodeSignals (\fBCNodeSignals\fP & nodeSignals)"
Register with a network node to receive its signals 
.PP
Definition at line 460 of file main\&.cpp\&.
.SS "void RegisterWallet (\fBCWalletInterface\fP * pwalletIn)"
Register a wallet to receive updates from core 
.PP
Definition at line 223 of file main\&.cpp\&.
.SS "void ResendWalletTransactions (bool fForce = \fCfalse\fP)"
Ask wallets to resend their transactions 
.PP
Definition at line 254 of file main\&.cpp\&.
.SS "bool SendMessages (\fBCNode\fP * pto, bool fSendTrickle)"

.PP
Definition at line 3426 of file main\&.cpp\&.
.SS "void SyncWithWallets (const \fBCTransaction\fP & tx, const \fBCBlock\fP * pblock = \fCNULL\fP, bool fConnect = \fCtrue\fP)"
Push an updated transaction to all registered wallets 
.PP
Definition at line 250 of file main\&.cpp\&.
.SS "void ThreadImport (std::vector< boost::filesystem::path > vImportFiles)"

.PP
Definition at line 2294 of file main\&.cpp\&.
.SS "void UnloadBlockIndex ()"

.PP
Unload database information\&. 
.PP
Definition at line 2060 of file main\&.cpp\&.
.SS "void UnregisterAllWallets ()"
Unregister all wallets from core 
.PP
Definition at line 241 of file main\&.cpp\&.
.SS "void UnregisterNodeSignals (\fBCNodeSignals\fP & nodeSignals)"
Unregister a network node 
.PP
Definition at line 469 of file main\&.cpp\&.
.SS "void UnregisterWallet (\fBCWalletInterface\fP * pwalletIn)"
Unregister a wallet from core 
.PP
Definition at line 232 of file main\&.cpp\&.
.SS "\fBuint256\fP WantedByOrphan (const \fBCOrphanBlock\fP * pblockOrphan)"

.PP
Definition at line 1620 of file main\&.cpp\&.
.SH "Variable Documentation"
.PP 
.SS "\fBCBigNum\fP bnProofOfStakeLimit(~\fBuint256\fP(0) >> 20)"

.SS "\fBCScript\fP COINBASE_FLAGS"

.PP
Definition at line 104 of file main\&.cpp\&.
.SS "\fBCCriticalSection\fP cs_main"

.PP
Definition at line 44 of file main\&.cpp\&.
.SS "\fBCCriticalSection\fP cs_mapAlerts"

.PP
Definition at line 25 of file alert\&.cpp\&.
.SS "\fBCCriticalSection\fP cs_setpwalletRegistered"

.PP
Definition at line 41 of file main\&.cpp\&.
.SS "bool fAddrIndex = false"

.PP
Definition at line 81 of file main\&.cpp\&.
.SS "bool fImporting = false"

.PP
Definition at line 79 of file main\&.cpp\&.
.SS "bool fReindex = false"

.PP
Definition at line 80 of file main\&.cpp\&.
.SS "bool fTxIndex = true"

.PP
Definition at line 67 of file main\&.cpp\&.
.SS "\fBuint256\fP hashBestChain = 0"

.PP
Definition at line 74 of file main\&.cpp\&.
.SS "map<\fBuint256\fP, \fBCAlert\fP> mapAlerts"

.PP
Definition at line 24 of file alert\&.cpp\&.
.SS "map<\fBuint256\fP, \fBCBlockIndex\fP*> mapBlockIndex"

.PP
Definition at line 59 of file main\&.cpp\&.
.SS "map<\fBuint256\fP, \fBCOrphanBlock\fP*> mapOrphanBlocks"

.PP
Definition at line 89 of file main\&.cpp\&.
.SS "multimap<\fBuint256\fP, \fBCOrphanBlock\fP*> mapOrphanBlocksByPrev"

.PP
Definition at line 90 of file main\&.cpp\&.
.SS "map<\fBuint256\fP, \fBCOrphanTx\fP> mapOrphanTransactions"

.PP
Definition at line 95 of file main\&.cpp\&.
.SS "map<\fBuint256\fP, set<\fBuint256\fP> > mapOrphanTransactionsByPrev"

.PP
Definition at line 97 of file main\&.cpp\&.
.SS "map<\fBuint256\fP, \fBint64_t\fP> mapRejectedBlocks"

.PP
Definition at line 93 of file main\&.cpp\&.
.SS "\fBCTxMemPool\fP mempool(::\fBminRelayTxFee\fP)"

.SS "\fBCFeeRate\fP minRelayTxFee = \fBCFeeRate\fP(\fBMIN_TX_FEE\fP)"
Fees smaller than this (in satoshis) are considered zero fee (for relaying and mining) We are ~xxx times smaller then bitcoin now (2016-01-11), set minRelayTxFee only 10 times higher so it's still 10 times lower comparing to bitcoin\&. 
.PP
Definition at line 50 of file main\&.cpp\&.
.SS "\fBuint256\fP nBestChainTrust = 0"

.PP
Definition at line 72 of file main\&.cpp\&.
.SS "int nBestHeight = -1"

.PP
Definition at line 70 of file main\&.cpp\&.
.SS "\fBuint256\fP nBestInvalidTrust = 0"

.PP
Definition at line 73 of file main\&.cpp\&.
.SS "int nCoinbaseMaturity = 10"

.PP
Definition at line 66 of file main\&.cpp\&.
.SS "unsigned int nCoinCacheSize = 5000"

.PP
Definition at line 113 of file main\&.cpp\&.
.SS "unsigned int nModifierInterval = 10 * 60"

.PP
Definition at line 64 of file main\&.cpp\&.
.SS "size_t nOrphanBlocksSize = 0"

.PP
Definition at line 92 of file main\&.cpp\&.
.SS "unsigned int nStakeMinAge = 10 * 60"

.PP
Definition at line 63 of file main\&.cpp\&.
.SS "int nStakeMinConfirmations = 10"

.PP
Definition at line 65 of file main\&.cpp\&.
.SS "\fBint64_t\fP nTimeBestReceived = 0"

.PP
Definition at line 78 of file main\&.cpp\&.
.SS "\fBCBlockTreeDB\fP* pblocktree = NULL"

.PP
Global variable that points to the active block tree (protected by cs_main) 
.PP
Definition at line 111 of file main\&.cpp\&.
.SS "\fBCCoinsViewCache\fP* pcoinsTip = NULL"

.PP
Global variable that points to the active \fBCCoinsView\fP (protected by cs_main) 
.PP
Definition at line 110 of file main\&.cpp\&.
.SS "\fBCBlockIndex\fP* pindexBest = NULL"

.PP
Definition at line 76 of file main\&.cpp\&.
.SS "\fBCBlockIndex\fP* pindexGenesisBlock = NULL"

.PP
Definition at line 69 of file main\&.cpp\&.
.SS "set<\fBCWallet\fP*> setpwalletRegistered"

.PP
Definition at line 42 of file main\&.cpp\&.
.SS "set<pair<\fBCOutPoint\fP, unsigned int> > setStakeSeen"

.PP
Definition at line 60 of file main\&.cpp\&.
.SS "set<pair<\fBCOutPoint\fP, unsigned int> > setStakeSeenOrphan"

.PP
Definition at line 91 of file main\&.cpp\&.
.SS "std::set<\fBuint256\fP> setValidatedTx"

.PP
Definition at line 108 of file main\&.cpp\&.
.SS "const string strMessageMagic = 'DarkSilk Signed Message:\\n'"

.PP
Definition at line 106 of file main\&.cpp\&.
.SH "Author"
.PP 
Generated automatically by Doxygen for darksilk from the source code\&.
