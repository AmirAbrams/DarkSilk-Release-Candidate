.TH "/home/dev/ds-160209/src/secp256k1/src/ecmult_const_impl.h" 3 "Wed Feb 10 2016" "Version 1.0.0.0" "darksilk" \" -*- nroff -*-
.ad l
.nh
.SH NAME
/home/dev/ds-160209/src/secp256k1/src/ecmult_const_impl.h \- 
.SH SYNOPSIS
.br
.PP
\fC#include 'scalar\&.h'\fP
.br
\fC#include 'group\&.h'\fP
.br
\fC#include 'ecmult_const\&.h'\fP
.br
\fC#include 'ecmult_impl\&.h'\fP
.br

.SS "Macros"

.in +1c
.ti -1c
.RI "#define \fBWNAF_BITS\fP   256"
.br
.ti -1c
.RI "#define \fBWNAF_SIZE\fP(w)   ((\fBWNAF_BITS\fP + (w) - 1) / (w))"
.br
.ti -1c
.RI "#define \fBECMULT_CONST_TABLE_GET_GE\fP(r,  pre,  n,  w)"
.br
.in -1c
.SH "Macro Definition Documentation"
.PP 
.SS "#define ECMULT_CONST_TABLE_GET_GE(r, pre, n, w)"
\fBValue:\fP
.PP
.nf
do { \
    int m; \
    int abs_n = (n) * (((n) > 0) * 2 - 1); \
    int idx_n = abs_n / 2; \
    secp256k1_fe neg_y; \\
    VERIFY_CHECK(((n) & 1) == 1); \\
    VERIFY_CHECK((n) >= -((1 << ((w)-1)) - 1)); \\
    VERIFY_CHECK((n) <=  ((1 << ((w)-1)) - 1)); \\
    VERIFY_SETUP(secp256k1_fe_clear(&(r)->x)); \\
    VERIFY_SETUP(secp256k1_fe_clear(&(r)->y)); \
    for (m = 0; m < ECMULT_TABLE_SIZE(w); m++) { \
        /* This loop is used to avoid secret data in array indices\&. See
         * the comment in ecmult_gen_impl\&.h for rationale\&. */ \
        secp256k1_fe_cmov(&(r)->x, &(pre)[m]\&.x, m == idx_n); \
        secp256k1_fe_cmov(&(r)->y, &(pre)[m]\&.y, m == idx_n); \
    } \
    (r)->infinity = 0; \
    secp256k1_fe_negate(&neg_y, &(r)->y, 1); \
    secp256k1_fe_cmov(&(r)->y, &neg_y, (n) != abs_n); \
} while(0)
.fi
.PP
Definition at line 23 of file ecmult_const_impl\&.h\&.
.SS "#define WNAF_BITS   256"

.PP
Definition at line 18 of file ecmult_const_impl\&.h\&.
.SS "#define WNAF_SIZE(w)   ((\fBWNAF_BITS\fP + (w) - 1) / (w))"

.PP
Definition at line 20 of file ecmult_const_impl\&.h\&.
.SH "Author"
.PP 
Generated automatically by Doxygen for darksilk from the source code\&.
