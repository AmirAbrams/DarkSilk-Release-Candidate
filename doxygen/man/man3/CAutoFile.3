.TH "CAutoFile" 3 "Wed Feb 10 2016" "Version 1.0.0.0" "darksilk" \" -*- nroff -*-
.ad l
.nh
.SH NAME
CAutoFile \- 
.SH SYNOPSIS
.br
.PP
.PP
\fC#include <streams\&.h>\fP
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBCAutoFile\fP (FILE *filenew, int nTypeIn, int nVersionIn)"
.br
.ti -1c
.RI "\fB~CAutoFile\fP ()"
.br
.ti -1c
.RI "bool \fBIsNull\fP () const "
.br
.ti -1c
.RI "void \fBfclose\fP ()"
.br
.ti -1c
.RI "FILE * \fBrelease\fP ()"
.br
.ti -1c
.RI "\fBoperator FILE *\fP ()"
.br
.ti -1c
.RI "FILE * \fBoperator->\fP ()"
.br
.ti -1c
.RI "FILE & \fBoperator*\fP ()"
.br
.ti -1c
.RI "FILE ** \fBoperator&\fP ()"
.br
.ti -1c
.RI "FILE * \fBoperator=\fP (FILE *pnew)"
.br
.ti -1c
.RI "bool \fBoperator!\fP ()"
.br
.ti -1c
.RI "void \fBsetstate\fP (short bits, const char *psz)"
.br
.ti -1c
.RI "bool \fBfail\fP () const "
.br
.ti -1c
.RI "bool \fBgood\fP () const "
.br
.ti -1c
.RI "void \fBclear\fP (short n=0)"
.br
.ti -1c
.RI "short \fBexceptions\fP ()"
.br
.ti -1c
.RI "short \fBexceptions\fP (short mask)"
.br
.ti -1c
.RI "void \fBSetType\fP (int n)"
.br
.ti -1c
.RI "int \fBGetType\fP ()"
.br
.ti -1c
.RI "void \fBSetVersion\fP (int n)"
.br
.ti -1c
.RI "int \fBGetVersion\fP ()"
.br
.ti -1c
.RI "void \fBReadVersion\fP ()"
.br
.ti -1c
.RI "void \fBWriteVersion\fP ()"
.br
.ti -1c
.RI "\fBCAutoFile\fP & \fBread\fP (char *pch, size_t nSize)"
.br
.ti -1c
.RI "\fBCAutoFile\fP & \fBwrite\fP (const char *pch, size_t nSize)"
.br
.ti -1c
.RI "template<typename T > unsigned int \fBGetSerializeSize\fP (const T &obj)"
.br
.ti -1c
.RI "template<typename T > \fBCAutoFile\fP & \fBoperator<<\fP (const T &obj)"
.br
.ti -1c
.RI "template<typename T > \fBCAutoFile\fP & \fBoperator>>\fP (T &obj)"
.br
.in -1c
.SS "Public Attributes"

.in +1c
.ti -1c
.RI "int \fBnType\fP"
.br
.ti -1c
.RI "int \fBnVersion\fP"
.br
.in -1c
.SS "Protected Attributes"

.in +1c
.ti -1c
.RI "FILE * \fBfile\fP"
.br
.ti -1c
.RI "short \fBstate\fP"
.br
.ti -1c
.RI "short \fBexceptmask\fP"
.br
.in -1c
.SH "Detailed Description"
.PP 
Non-refcounted RAII wrapper for FILE* Will automatically close the file when it goes out of scope if not null\&. If you're returning the file pointer, return file\&.release()\&. If you need to close the file early, use file\&.fclose() instead of fclose(file)\&. 
.PP
Definition at line 320 of file streams\&.h\&.
.SH "Constructor & Destructor Documentation"
.PP 
.SS "CAutoFile::CAutoFile (FILE * filenew, int nTypeIn, int nVersionIn)\fC [inline]\fP"

.PP
Definition at line 330 of file streams\&.h\&.
.SS "CAutoFile::~CAutoFile ()\fC [inline]\fP"

.PP
Definition at line 339 of file streams\&.h\&.
.SH "Member Function Documentation"
.PP 
.SS "void CAutoFile::clear (short n = \fC0\fP)\fC [inline]\fP"

.PP
Definition at line 374 of file streams\&.h\&.
.SS "short CAutoFile::exceptions ()\fC [inline]\fP"

.PP
Definition at line 375 of file streams\&.h\&.
.SS "short CAutoFile::exceptions (short mask)\fC [inline]\fP"

.PP
Definition at line 376 of file streams\&.h\&.
.SS "bool CAutoFile::fail () const\fC [inline]\fP"

.PP
Definition at line 372 of file streams\&.h\&.
.SS "void CAutoFile::fclose ()\fC [inline]\fP"

.PP
Definition at line 346 of file streams\&.h\&.
.SS "template<typename T > unsigned int CAutoFile::GetSerializeSize (const T & obj)\fC [inline]\fP"

.PP
Definition at line 404 of file streams\&.h\&.
.SS "int CAutoFile::GetType ()\fC [inline]\fP"

.PP
Definition at line 379 of file streams\&.h\&.
.SS "int CAutoFile::GetVersion ()\fC [inline]\fP"

.PP
Definition at line 381 of file streams\&.h\&.
.SS "bool CAutoFile::good () const\fC [inline]\fP"

.PP
Definition at line 373 of file streams\&.h\&.
.SS "bool CAutoFile::IsNull () const\fC [inline]\fP"

.PP
Definition at line 344 of file streams\&.h\&.
.SS "CAutoFile::operator FILE * ()\fC [inline]\fP"

.PP
Definition at line 354 of file streams\&.h\&.
.SS "bool CAutoFile::operator! ()\fC [inline]\fP"

.PP
Definition at line 359 of file streams\&.h\&.
.SS "FILE** CAutoFile::operator& ()\fC [inline]\fP"

.PP
Definition at line 357 of file streams\&.h\&.
.SS "FILE& CAutoFile::operator* ()\fC [inline]\fP"

.PP
Definition at line 356 of file streams\&.h\&.
.SS "FILE* CAutoFile::operator-> ()\fC [inline]\fP"

.PP
Definition at line 355 of file streams\&.h\&.
.SS "template<typename T > \fBCAutoFile\fP& CAutoFile::operator<< (const T & obj)\fC [inline]\fP"

.PP
Definition at line 411 of file streams\&.h\&.
.SS "FILE* CAutoFile::operator= (FILE * pnew)\fC [inline]\fP"

.PP
Definition at line 358 of file streams\&.h\&.
.SS "template<typename T > \fBCAutoFile\fP& CAutoFile::operator>> (T & obj)\fC [inline]\fP"

.PP
Definition at line 421 of file streams\&.h\&.
.SS "\fBCAutoFile\fP& CAutoFile::read (char * pch, size_t nSize)\fC [inline]\fP"

.PP
Definition at line 385 of file streams\&.h\&.
.SS "void CAutoFile::ReadVersion ()\fC [inline]\fP"

.PP
Definition at line 382 of file streams\&.h\&.
.SS "FILE* CAutoFile::release ()\fC [inline]\fP"

.PP
Definition at line 353 of file streams\&.h\&.
.SS "void CAutoFile::setstate (short bits, const char * psz)\fC [inline]\fP"

.PP
Definition at line 365 of file streams\&.h\&.
.SS "void CAutoFile::SetType (int n)\fC [inline]\fP"

.PP
Definition at line 378 of file streams\&.h\&.
.SS "void CAutoFile::SetVersion (int n)\fC [inline]\fP"

.PP
Definition at line 380 of file streams\&.h\&.
.SS "\fBCAutoFile\fP& CAutoFile::write (const char * pch, size_t nSize)\fC [inline]\fP"

.PP
Definition at line 394 of file streams\&.h\&.
.SS "void CAutoFile::WriteVersion ()\fC [inline]\fP"

.PP
Definition at line 383 of file streams\&.h\&.
.SH "Member Data Documentation"
.PP 
.SS "short CAutoFile::exceptmask\fC [protected]\fP"

.PP
Definition at line 325 of file streams\&.h\&.
.SS "FILE* CAutoFile::file\fC [protected]\fP"

.PP
Definition at line 323 of file streams\&.h\&.
.SS "int CAutoFile::nType"

.PP
Definition at line 327 of file streams\&.h\&.
.SS "int CAutoFile::nVersion"

.PP
Definition at line 328 of file streams\&.h\&.
.SS "short CAutoFile::state\fC [protected]\fP"

.PP
Definition at line 324 of file streams\&.h\&.

.SH "Author"
.PP 
Generated automatically by Doxygen for darksilk from the source code\&.
