.TH "/home/dev/ds-160209/src/crypto/argon2/encoding.c" 3 "Wed Feb 10 2016" "Version 1.0.0.0" "darksilk" \" -*- nroff -*-
.ad l
.nh
.SH NAME
/home/dev/ds-160209/src/crypto/argon2/encoding.c \- 
.SH SYNOPSIS
.br
.PP
\fC#include <stdio\&.h>\fP
.br
\fC#include <stdlib\&.h>\fP
.br
\fC#include <string\&.h>\fP
.br
\fC#include <limits\&.h>\fP
.br
\fC#include 'encoding\&.h'\fP
.br

.SS "Macros"

.in +1c
.ti -1c
.RI "#define \fBEQ\fP(x,  y)   ((((0U-((unsigned)(x) ^ (unsigned)(y))) >> 8) & 0xFF) ^ 0xFF)"
.br
.ti -1c
.RI "#define \fBGT\fP(x,  y)   ((((unsigned)(y) - (unsigned)(x)) >> 8) & 0xFF)"
.br
.ti -1c
.RI "#define \fBGE\fP(x,  y)   (\fBGT\fP(y, x) ^ 0xFF)"
.br
.ti -1c
.RI "#define \fBLT\fP(x,  y)   \fBGT\fP(y, x)"
.br
.ti -1c
.RI "#define \fBLE\fP(x,  y)   \fBGE\fP(y, x)"
.br
.ti -1c
.RI "#define \fBCC\fP(prefix)"
.br
.ti -1c
.RI "#define \fBCC_opt\fP(prefix,  code)"
.br
.ti -1c
.RI "#define \fBDECIMAL\fP(x)"
.br
.ti -1c
.RI "#define \fBBIN\fP(buf,  max_len,  len)"
.br
.ti -1c
.RI "#define \fBSS\fP(str)"
.br
.ti -1c
.RI "#define \fBSX\fP(x)"
.br
.ti -1c
.RI "#define \fBSB\fP(buf,  len)"
.br
.in -1c
.SS "Functions"

.in +1c
.ti -1c
.RI "int \fBdecode_string\fP (\fBargon2_context\fP *ctx, const char *str, \fBargon2_type\fP type)"
.br
.ti -1c
.RI "int \fBencode_string\fP (char *dst, size_t dst_len, \fBargon2_context\fP *ctx, \fBargon2_type\fP type)"
.br
.in -1c
.SH "Macro Definition Documentation"
.PP 
.SS "#define BIN(buf, max_len, len)"
\fBValue:\fP
.PP
.nf
do {                                                                       \
        size_t bin_len = (max_len);                                            \
        str = from_base64(buf, &bin_len, str);                                 \
        if (str == NULL || bin_len > UINT32_MAX) {                             \
            return 0;                                                          \
        }                                                                      \
        (len) = (uint32_t)bin_len;                                             \
    } while ((void)0, 0)
.fi
.SS "#define CC(prefix)"
\fBValue:\fP
.PP
.nf
do {                                                                       \
        size_t cc_len = strlen(prefix);                                        \
        if (strncmp(str, prefix, cc_len) != 0) {                               \
            return 0;                                                          \
        }                                                                      \
        str += cc_len;                                                         \
    } while ((void)0, 0)
.fi
.SS "#define CC_opt(prefix, code)"
\fBValue:\fP
.PP
.nf
do {                                                                       \
        size_t cc_len = strlen(prefix);                                        \
        if (strncmp(str, prefix, cc_len) == 0) {                               \
            str += cc_len;                                                     \
            { code; }                                                          \
        }                                                                      \
    } while ((void)0, 0)
.fi
.SS "#define DECIMAL(x)"
\fBValue:\fP
.PP
.nf
do {                                                                       \
        unsigned long dec_x;                                                   \
        str = decode_decimal(str, &dec_x);                                     \
        if (str == NULL) {                                                     \
            return 0;                                                          \
        }                                                                      \
        (x) = dec_x;                                                           \
    } while ((void)0, 0)
.fi
.SS "#define EQ(x, y)   ((((0U-((unsigned)(x) ^ (unsigned)(y))) >> 8) & 0xFF) ^ 0xFF)"

.PP
Definition at line 61 of file encoding\&.c\&.
.SS "#define GE(x, y)   (\fBGT\fP(y, x) ^ 0xFF)"

.PP
Definition at line 63 of file encoding\&.c\&.
.SS "#define GT(x, y)   ((((unsigned)(y) - (unsigned)(x)) >> 8) & 0xFF)"

.PP
Definition at line 62 of file encoding\&.c\&.
.SS "#define LE(x, y)   \fBGE\fP(y, x)"

.PP
Definition at line 65 of file encoding\&.c\&.
.SS "#define LT(x, y)   \fBGT\fP(y, x)"

.PP
Definition at line 64 of file encoding\&.c\&.
.SS "#define SB(buf, len)"
\fBValue:\fP
.PP
.nf
do {                                                                       \
        size_t sb_len = to_base64(dst, dst_len, buf, len);                     \
        if (sb_len == (size_t)-1) {                                            \
            return 0;                                                          \
        }                                                                      \
        dst += sb_len;                                                         \
        dst_len -= sb_len;                                                     \
    } while ((void)0, 0)
.fi
.SS "#define SS(str)"
\fBValue:\fP
.PP
.nf
do {                                                                       \
        size_t pp_len = strlen(str);                                           \
        if (pp_len >= dst_len) {                                               \
            return 0;                                                          \
        }                                                                      \
        memcpy(dst, str, pp_len + 1);                                          \
        dst += pp_len;                                                         \
        dst_len -= pp_len;                                                     \
    } while ((void)0, 0)
.fi
.SS "#define SX(x)"
\fBValue:\fP
.PP
.nf
do {                                                                       \
        char tmp[30];                                                          \
        sprintf(tmp, "%lu", (unsigned long)(x));                               \\
        SS(tmp);                                                               \
    } while ((void)0, 0)
.fi
.SH "Function Documentation"
.PP 
.SS "int decode_string (\fBargon2_context\fP * ctx, const char * str, \fBargon2_type\fP type)"

.PP
Definition at line 249 of file encoding\&.c\&.
.SS "int encode_string (char * dst, size_t dst_len, \fBargon2_context\fP * ctx, \fBargon2_type\fP type)"

.PP
Definition at line 371 of file encoding\&.c\&.
.SH "Author"
.PP 
Generated automatically by Doxygen for darksilk from the source code\&.
