.TH "/home/dev/ds-160209/src/json/json_spirit_value.h" 3 "Wed Feb 10 2016" "Version 1.0.0.0" "darksilk" \" -*- nroff -*-
.ad l
.nh
.SH NAME
/home/dev/ds-160209/src/json/json_spirit_value.h \- 
.SH SYNOPSIS
.br
.PP
\fC#include <vector>\fP
.br
\fC#include <map>\fP
.br
\fC#include <string>\fP
.br
\fC#include <cassert>\fP
.br
\fC#include <sstream>\fP
.br
\fC#include <stdexcept>\fP
.br
\fC#include <stdint\&.h>\fP
.br
\fC#include <boost/config\&.hpp>\fP
.br
\fC#include <boost/shared_ptr\&.hpp>\fP
.br
\fC#include <boost/variant\&.hpp>\fP
.br

.SS "Classes"

.in +1c
.ti -1c
.RI "class \fBjson_spirit::Value_impl< Config >\fP"
.br
.ti -1c
.RI "struct \fBjson_spirit::Pair_impl< Config >\fP"
.br
.ti -1c
.RI "struct \fBjson_spirit::Config_vector< String >\fP"
.br
.ti -1c
.RI "struct \fBjson_spirit::Config_map< String >\fP"
.br
.ti -1c
.RI "struct \fBjson_spirit::internal_::Type_to_type< T >\fP"
.br
.in -1c
.SS "Namespaces"

.in +1c
.ti -1c
.RI " \fBjson_spirit\fP"
.br
.ti -1c
.RI " \fBjson_spirit::internal_\fP"
.br
.in -1c
.SS "Typedefs"

.in +1c
.ti -1c
.RI "typedef Config_vector< std::string > \fBjson_spirit::Config\fP"
.br
.ti -1c
.RI "typedef Config::Value_type \fBjson_spirit::Value\fP"
.br
.ti -1c
.RI "typedef Config::Pair_type \fBjson_spirit::Pair\fP"
.br
.ti -1c
.RI "typedef Config::Object_type \fBjson_spirit::Object\fP"
.br
.ti -1c
.RI "typedef Config::Array_type \fBjson_spirit::Array\fP"
.br
.ti -1c
.RI "typedef Config_vector< std::wstring > \fBjson_spirit::wConfig\fP"
.br
.ti -1c
.RI "typedef wConfig::Value_type \fBjson_spirit::wValue\fP"
.br
.ti -1c
.RI "typedef wConfig::Pair_type \fBjson_spirit::wPair\fP"
.br
.ti -1c
.RI "typedef wConfig::Object_type \fBjson_spirit::wObject\fP"
.br
.ti -1c
.RI "typedef wConfig::Array_type \fBjson_spirit::wArray\fP"
.br
.ti -1c
.RI "typedef Config_map< std::string > \fBjson_spirit::mConfig\fP"
.br
.ti -1c
.RI "typedef mConfig::Value_type \fBjson_spirit::mValue\fP"
.br
.ti -1c
.RI "typedef mConfig::Object_type \fBjson_spirit::mObject\fP"
.br
.ti -1c
.RI "typedef mConfig::Array_type \fBjson_spirit::mArray\fP"
.br
.ti -1c
.RI "typedef Config_map< std::wstring > \fBjson_spirit::wmConfig\fP"
.br
.ti -1c
.RI "typedef wmConfig::Value_type \fBjson_spirit::wmValue\fP"
.br
.ti -1c
.RI "typedef wmConfig::Object_type \fBjson_spirit::wmObject\fP"
.br
.ti -1c
.RI "typedef wmConfig::Array_type \fBjson_spirit::wmArray\fP"
.br
.in -1c
.SS "Enumerations"

.in +1c
.ti -1c
.RI "enum \fBjson_spirit::Value_type\fP { \fBjson_spirit::obj_type\fP, \fBjson_spirit::array_type\fP, \fBjson_spirit::str_type\fP, \fBjson_spirit::bool_type\fP, \fBjson_spirit::int_type\fP, \fBjson_spirit::real_type\fP, \fBjson_spirit::null_type\fP }"
.br
.in -1c
.SS "Functions"

.in +1c
.ti -1c
.RI "template<class String_type > String_type \fBjson_spirit::to_str\fP (const char *c_str)"
.br
.ti -1c
.RI "template<class Value > int \fBjson_spirit::internal_::get_value\fP (const Value &\fBvalue\fP, Type_to_type< int >)"
.br
.ti -1c
.RI "template<class Value > \fBint64_t\fP \fBjson_spirit::internal_::get_value\fP (const Value &\fBvalue\fP, Type_to_type< \fBint64_t\fP >)"
.br
.ti -1c
.RI "template<class Value > \fBuint64_t\fP \fBjson_spirit::internal_::get_value\fP (const Value &\fBvalue\fP, Type_to_type< \fBuint64_t\fP >)"
.br
.ti -1c
.RI "template<class Value > double \fBjson_spirit::internal_::get_value\fP (const Value &\fBvalue\fP, Type_to_type< double >)"
.br
.ti -1c
.RI "template<class Value > Value::String_type \fBjson_spirit::internal_::get_value\fP (const Value &\fBvalue\fP, Type_to_type< typename Value::String_type >)"
.br
.ti -1c
.RI "template<class Value > Value::Array \fBjson_spirit::internal_::get_value\fP (const Value &\fBvalue\fP, Type_to_type< typename Value::Array >)"
.br
.ti -1c
.RI "template<class Value > Value::Object \fBjson_spirit::internal_::get_value\fP (const Value &\fBvalue\fP, Type_to_type< typename Value::Object >)"
.br
.ti -1c
.RI "template<class Value > bool \fBjson_spirit::internal_::get_value\fP (const Value &\fBvalue\fP, Type_to_type< bool >)"
.br
.in -1c
.SH "Author"
.PP 
Generated automatically by Doxygen for darksilk from the source code\&.
