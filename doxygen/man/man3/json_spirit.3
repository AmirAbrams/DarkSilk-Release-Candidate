.TH "json_spirit" 3 "Wed Feb 10 2016" "Version 1.0.0.0" "darksilk" \" -*- nroff -*-
.ad l
.nh
.SH NAME
json_spirit \- 
.SH SYNOPSIS
.br
.PP
.SS "Namespaces"

.in +1c
.ti -1c
.RI " \fBinternal_\fP"
.br
.in -1c
.SS "Classes"

.in +1c
.ti -1c
.RI "struct \fBConfig_map\fP"
.br
.ti -1c
.RI "struct \fBConfig_vector\fP"
.br
.ti -1c
.RI "struct \fBError_position\fP"
.br
.ti -1c
.RI "class \fBGenerator\fP"
.br
.ti -1c
.RI "class \fBJson_grammer\fP"
.br
.ti -1c
.RI "struct \fBMulti_pass_iters\fP"
.br
.ti -1c
.RI "struct \fBPair_impl\fP"
.br
.ti -1c
.RI "class \fBSemantic_actions\fP"
.br
.ti -1c
.RI "class \fBStream_reader\fP"
.br
.ti -1c
.RI "class \fBStream_reader_thrower\fP"
.br
.ti -1c
.RI "class \fBValue_impl\fP"
.br
.in -1c
.SS "Typedefs"

.in +1c
.ti -1c
.RI "typedef std::map< std::string, \fBValue\fP > \fBMapped_obj\fP"
.br
.ti -1c
.RI "typedef std::map< std::wstring, \fBwValue\fP > \fBwMapped_obj\fP"
.br
.ti -1c
.RI "typedef \fBConfig_vector\fP< std::string > \fBConfig\fP"
.br
.ti -1c
.RI "typedef \fBConfig::Value_type\fP \fBValue\fP"
.br
.ti -1c
.RI "typedef \fBConfig::Pair_type\fP \fBPair\fP"
.br
.ti -1c
.RI "typedef \fBConfig::Object_type\fP \fBObject\fP"
.br
.ti -1c
.RI "typedef \fBConfig::Array_type\fP \fBArray\fP"
.br
.ti -1c
.RI "typedef \fBConfig_vector\fP< std::wstring > \fBwConfig\fP"
.br
.ti -1c
.RI "typedef \fBwConfig::Value_type\fP \fBwValue\fP"
.br
.ti -1c
.RI "typedef \fBwConfig::Pair_type\fP \fBwPair\fP"
.br
.ti -1c
.RI "typedef \fBwConfig::Object_type\fP \fBwObject\fP"
.br
.ti -1c
.RI "typedef \fBwConfig::Array_type\fP \fBwArray\fP"
.br
.ti -1c
.RI "typedef \fBConfig_map\fP< std::string > \fBmConfig\fP"
.br
.ti -1c
.RI "typedef \fBmConfig::Value_type\fP \fBmValue\fP"
.br
.ti -1c
.RI "typedef \fBmConfig::Object_type\fP \fBmObject\fP"
.br
.ti -1c
.RI "typedef \fBmConfig::Array_type\fP \fBmArray\fP"
.br
.ti -1c
.RI "typedef \fBConfig_map\fP< std::wstring > \fBwmConfig\fP"
.br
.ti -1c
.RI "typedef \fBwmConfig::Value_type\fP \fBwmValue\fP"
.br
.ti -1c
.RI "typedef \fBwmConfig::Object_type\fP \fBwmObject\fP"
.br
.ti -1c
.RI "typedef \fBwmConfig::Array_type\fP \fBwmArray\fP"
.br
.in -1c
.SS "Enumerations"

.in +1c
.ti -1c
.RI "enum \fBValue_type\fP { \fBobj_type\fP, \fBarray_type\fP, \fBstr_type\fP, \fBbool_type\fP, \fBint_type\fP, \fBreal_type\fP, \fBnull_type\fP }"
.br
.in -1c
.SS "Functions"

.in +1c
.ti -1c
.RI "bool \fBread\fP (const std::string &s, \fBValue\fP &\fBvalue\fP)"
.br
.ti -1c
.RI "bool \fBread\fP (std::istream &is, \fBValue\fP &\fBvalue\fP)"
.br
.ti -1c
.RI "bool \fBread\fP (std::string::const_iterator &begin, std::string::const_iterator end, \fBValue\fP &\fBvalue\fP)"
.br
.ti -1c
.RI "void \fBread_or_throw\fP (const std::string &s, \fBValue\fP &\fBvalue\fP)"
.br
.ti -1c
.RI "void \fBread_or_throw\fP (std::istream &is, \fBValue\fP &\fBvalue\fP)"
.br
.ti -1c
.RI "void \fBread_or_throw\fP (std::string::const_iterator &begin, std::string::const_iterator end, \fBValue\fP &\fBvalue\fP)"
.br
.ti -1c
.RI "bool \fBread\fP (const std::wstring &s, \fBwValue\fP &\fBvalue\fP)"
.br
.ti -1c
.RI "bool \fBread\fP (std::wistream &is, \fBwValue\fP &\fBvalue\fP)"
.br
.ti -1c
.RI "bool \fBread\fP (std::wstring::const_iterator &begin, std::wstring::const_iterator end, \fBwValue\fP &\fBvalue\fP)"
.br
.ti -1c
.RI "void \fBread_or_throw\fP (const std::wstring &s, \fBwValue\fP &\fBvalue\fP)"
.br
.ti -1c
.RI "void \fBread_or_throw\fP (std::wistream &is, \fBwValue\fP &\fBvalue\fP)"
.br
.ti -1c
.RI "void \fBread_or_throw\fP (std::wstring::const_iterator &begin, std::wstring::const_iterator end, \fBwValue\fP &\fBvalue\fP)"
.br
.ti -1c
.RI "bool \fBread\fP (const std::string &s, \fBmValue\fP &\fBvalue\fP)"
.br
.ti -1c
.RI "bool \fBread\fP (std::istream &is, \fBmValue\fP &\fBvalue\fP)"
.br
.ti -1c
.RI "bool \fBread\fP (std::string::const_iterator &begin, std::string::const_iterator end, \fBmValue\fP &\fBvalue\fP)"
.br
.ti -1c
.RI "void \fBread_or_throw\fP (const std::string &s, \fBmValue\fP &\fBvalue\fP)"
.br
.ti -1c
.RI "void \fBread_or_throw\fP (std::istream &is, \fBmValue\fP &\fBvalue\fP)"
.br
.ti -1c
.RI "void \fBread_or_throw\fP (std::string::const_iterator &begin, std::string::const_iterator end, \fBmValue\fP &\fBvalue\fP)"
.br
.ti -1c
.RI "bool \fBread\fP (const std::wstring &s, \fBwmValue\fP &\fBvalue\fP)"
.br
.ti -1c
.RI "bool \fBread\fP (std::wistream &is, \fBwmValue\fP &\fBvalue\fP)"
.br
.ti -1c
.RI "bool \fBread\fP (std::wstring::const_iterator &begin, std::wstring::const_iterator end, \fBwmValue\fP &\fBvalue\fP)"
.br
.ti -1c
.RI "void \fBread_or_throw\fP (const std::wstring &s, \fBwmValue\fP &\fBvalue\fP)"
.br
.ti -1c
.RI "void \fBread_or_throw\fP (std::wistream &is, \fBwmValue\fP &\fBvalue\fP)"
.br
.ti -1c
.RI "void \fBread_or_throw\fP (std::wstring::const_iterator &begin, std::wstring::const_iterator end, \fBwmValue\fP &\fBvalue\fP)"
.br
.ti -1c
.RI "template<class Iter_type > bool \fBis_eq\fP (Iter_type first, Iter_type last, const char *c_str)"
.br
.ti -1c
.RI "template<class Char_type > Char_type \fBhex_to_num\fP (const Char_type c)"
.br
.ti -1c
.RI "template<class Char_type , class Iter_type > Char_type \fBhex_str_to_char\fP (Iter_type &begin)"
.br
.ti -1c
.RI "template<class Char_type , class Iter_type > Char_type \fBunicode_str_to_char\fP (Iter_type &begin)"
.br
.ti -1c
.RI "template<class String_type > void \fBappend_esc_char_and_incr_iter\fP (String_type &s, typename String_type::const_iterator &begin, typename String_type::const_iterator end)"
.br
.ti -1c
.RI "template<class String_type > String_type \fBsubstitute_esc_chars\fP (typename String_type::const_iterator begin, typename String_type::const_iterator end)"
.br
.ti -1c
.RI "template<class String_type > String_type \fBget_str_\fP (typename String_type::const_iterator begin, typename String_type::const_iterator end)"
.br
.ti -1c
.RI "std::string \fBget_str\fP (std::string::const_iterator begin, std::string::const_iterator end)"
.br
.ti -1c
.RI "std::wstring \fBget_str\fP (std::wstring::const_iterator begin, std::wstring::const_iterator end)"
.br
.ti -1c
.RI "template<class String_type , class Iter_type > String_type \fBget_str\fP (Iter_type begin, Iter_type end)"
.br
.ti -1c
.RI "template<typename Iter_type > void \fBthrow_error\fP (spirit_namespace::position_iterator< Iter_type > i, const std::string &reason)"
.br
.ti -1c
.RI "template<typename Iter_type > void \fBthrow_error\fP (Iter_type i, const std::string &reason)"
.br
.ti -1c
.RI "template<class Iter_type , class Value_type > Iter_type \fBread_range_or_throw\fP (Iter_type begin, Iter_type end, \fBValue_type\fP &\fBvalue\fP)"
.br
.ti -1c
.RI "template<class Iter_type , class Value_type > void \fBadd_posn_iter_and_read_range_or_throw\fP (Iter_type begin, Iter_type end, \fBValue_type\fP &\fBvalue\fP)"
.br
.ti -1c
.RI "template<class Iter_type , class Value_type > bool \fBread_range\fP (Iter_type &begin, Iter_type end, \fBValue_type\fP &\fBvalue\fP)"
.br
.ti -1c
.RI "template<class String_type , class Value_type > void \fBread_string_or_throw\fP (const String_type &s, \fBValue_type\fP &\fBvalue\fP)"
.br
.ti -1c
.RI "template<class String_type , class Value_type > bool \fBread_string\fP (const String_type &s, \fBValue_type\fP &\fBvalue\fP)"
.br
.ti -1c
.RI "template<class Istream_type , class Value_type > bool \fBread_stream\fP (Istream_type &is, \fBValue_type\fP &\fBvalue\fP)"
.br
.ti -1c
.RI "template<class Istream_type , class Value_type > void \fBread_stream_or_throw\fP (Istream_type &is, \fBValue_type\fP &\fBvalue\fP)"
.br
.ti -1c
.RI "template<class Obj_t , class Map_t > void \fBobj_to_map\fP (const Obj_t &obj, Map_t &mp_obj)"
.br
.ti -1c
.RI "template<class Obj_t , class Map_t > void \fBmap_to_obj\fP (const Map_t &mp_obj, Obj_t &obj)"
.br
.ti -1c
.RI "template<class Object_type , class String_type > const Object_type::value_type::Value_type & \fBfind_value\fP (const Object_type &obj, const String_type &\fBname\fP)"
.br
.ti -1c
.RI "template<class String_type > String_type \fBto_str\fP (const char *c_str)"
.br
.ti -1c
.RI "void \fBwrite\fP (const \fBValue\fP &\fBvalue\fP, std::ostream &os)"
.br
.ti -1c
.RI "void \fBwrite_formatted\fP (const \fBValue\fP &\fBvalue\fP, std::ostream &os)"
.br
.ti -1c
.RI "std::string \fBwrite\fP (const \fBValue\fP &\fBvalue\fP)"
.br
.ti -1c
.RI "std::string \fBwrite_formatted\fP (const \fBValue\fP &\fBvalue\fP)"
.br
.ti -1c
.RI "void \fBwrite\fP (const \fBwValue\fP &\fBvalue\fP, std::wostream &os)"
.br
.ti -1c
.RI "void \fBwrite_formatted\fP (const \fBwValue\fP &\fBvalue\fP, std::wostream &os)"
.br
.ti -1c
.RI "void \fBwrite\fP (const \fBmValue\fP &\fBvalue\fP, std::ostream &os)"
.br
.ti -1c
.RI "void \fBwrite_formatted\fP (const \fBmValue\fP &\fBvalue\fP, std::ostream &os)"
.br
.ti -1c
.RI "std::string \fBwrite\fP (const \fBmValue\fP &\fBvalue\fP)"
.br
.ti -1c
.RI "std::string \fBwrite_formatted\fP (const \fBmValue\fP &\fBvalue\fP)"
.br
.ti -1c
.RI "void \fBwrite\fP (const \fBwmValue\fP &\fBvalue\fP, std::wostream &os)"
.br
.ti -1c
.RI "void \fBwrite_formatted\fP (const \fBwmValue\fP &\fBvalue\fP, std::wostream &os)"
.br
.ti -1c
.RI "char \fBto_hex_char\fP (unsigned int c)"
.br
.ti -1c
.RI "template<class String_type > String_type \fBnon_printable_to_string\fP (unsigned int c)"
.br
.ti -1c
.RI "template<typename Char_type , class String_type > bool \fBadd_esc_char\fP (Char_type c, String_type &s)"
.br
.ti -1c
.RI "template<class String_type > String_type \fBadd_esc_chars\fP (const String_type &s)"
.br
.ti -1c
.RI "template<class Value_type , class Ostream_type > void \fBwrite_stream\fP (const \fBValue_type\fP &\fBvalue\fP, Ostream_type &os, bool pretty)"
.br
.ti -1c
.RI "template<class Value_type > Value_type::String_type \fBwrite_string\fP (const \fBValue_type\fP &\fBvalue\fP, bool pretty)"
.br
.in -1c
.SS "Variables"

.in +1c
.ti -1c
.RI "const spirit_namespace::int_parser< \fBint64_t\fP > \fBint64_p\fP = spirit_namespace::int_parser < \fBint64_t\fP >()"
.br
.ti -1c
.RI "const spirit_namespace::uint_parser< \fBuint64_t\fP > \fBuint64_p\fP = spirit_namespace::uint_parser< \fBuint64_t\fP >()"
.br
.in -1c
.SH "Typedef Documentation"
.PP 
.SS "typedef \fBConfig::Array_type\fP \fBjson_spirit::Array\fP"

.PP
Definition at line 143 of file json_spirit_value\&.h\&.
.SS "typedef \fBConfig_vector\fP< std::string > \fBjson_spirit::Config\fP"

.PP
Definition at line 138 of file json_spirit_value\&.h\&.
.SS "typedef std::map< std::string, \fBValue\fP > \fBjson_spirit::Mapped_obj\fP"

.PP
Definition at line 40 of file json_spirit_utils\&.h\&.
.SS "typedef \fBmConfig::Array_type\fP \fBjson_spirit::mArray\fP"

.PP
Definition at line 190 of file json_spirit_value\&.h\&.
.SS "typedef \fBConfig_map\fP< std::string > \fBjson_spirit::mConfig\fP"

.PP
Definition at line 186 of file json_spirit_value\&.h\&.
.SS "typedef \fBmConfig::Object_type\fP \fBjson_spirit::mObject\fP"

.PP
Definition at line 189 of file json_spirit_value\&.h\&.
.SS "typedef \fBmConfig::Value_type\fP \fBjson_spirit::mValue\fP"

.PP
Definition at line 188 of file json_spirit_value\&.h\&.
.SS "typedef \fBConfig::Object_type\fP \fBjson_spirit::Object\fP"

.PP
Definition at line 142 of file json_spirit_value\&.h\&.
.SS "typedef \fBConfig::Pair_type\fP \fBjson_spirit::Pair\fP"

.PP
Definition at line 141 of file json_spirit_value\&.h\&.
.SS "typedef \fBConfig::Value_type\fP \fBjson_spirit::Value\fP"

.PP
Definition at line 140 of file json_spirit_value\&.h\&.
.SS "typedef \fBwConfig::Array_type\fP \fBjson_spirit::wArray\fP"

.PP
Definition at line 154 of file json_spirit_value\&.h\&.
.SS "typedef \fBConfig_vector\fP< std::wstring > \fBjson_spirit::wConfig\fP"

.PP
Definition at line 149 of file json_spirit_value\&.h\&.
.SS "typedef std::map< std::wstring, \fBwValue\fP > \fBjson_spirit::wMapped_obj\fP"

.PP
Definition at line 43 of file json_spirit_utils\&.h\&.
.SS "typedef \fBwmConfig::Array_type\fP \fBjson_spirit::wmArray\fP"

.PP
Definition at line 200 of file json_spirit_value\&.h\&.
.SS "typedef \fBConfig_map\fP< std::wstring > \fBjson_spirit::wmConfig\fP"

.PP
Definition at line 196 of file json_spirit_value\&.h\&.
.SS "typedef \fBwmConfig::Object_type\fP \fBjson_spirit::wmObject\fP"

.PP
Definition at line 199 of file json_spirit_value\&.h\&.
.SS "typedef \fBwmConfig::Value_type\fP \fBjson_spirit::wmValue\fP"

.PP
Definition at line 198 of file json_spirit_value\&.h\&.
.SS "typedef \fBwConfig::Object_type\fP \fBjson_spirit::wObject\fP"

.PP
Definition at line 153 of file json_spirit_value\&.h\&.
.SS "typedef \fBwConfig::Pair_type\fP \fBjson_spirit::wPair\fP"

.PP
Definition at line 152 of file json_spirit_value\&.h\&.
.SS "typedef \fBwConfig::Value_type\fP \fBjson_spirit::wValue\fP"

.PP
Definition at line 151 of file json_spirit_value\&.h\&.
.SH "Enumeration Type Documentation"
.PP 
.SS "enum \fBjson_spirit::Value_type\fP"

.PP
\fBEnumerator\fP
.in +1c
.TP
\fB\fIobj_type \fP\fP
.TP
\fB\fIarray_type \fP\fP
.TP
\fB\fIstr_type \fP\fP
.TP
\fB\fIbool_type \fP\fP
.TP
\fB\fIint_type \fP\fP
.TP
\fB\fIreal_type \fP\fP
.TP
\fB\fInull_type \fP\fP
.PP
Definition at line 26 of file json_spirit_value\&.h\&.
.SH "Function Documentation"
.PP 
.SS "template<typename Char_type , class String_type > bool json_spirit::add_esc_char (Char_type c, String_type & s)"

.PP
Definition at line 47 of file json_spirit_writer_template\&.h\&.
.SS "template<class String_type > String_type json_spirit::add_esc_chars (const String_type & s)"

.PP
Definition at line 64 of file json_spirit_writer_template\&.h\&.
.SS "template<class Iter_type , class Value_type > void json_spirit::add_posn_iter_and_read_range_or_throw (Iter_type begin, Iter_type end, \fBValue_type\fP & value)"

.PP
Definition at line 537 of file json_spirit_reader_template\&.h\&.
.SS "template<class String_type > void json_spirit::append_esc_char_and_incr_iter (String_type & s, typename String_type::const_iterator & begin, typename String_type::const_iterator end)"

.PP
Definition at line 85 of file json_spirit_reader_template\&.h\&.
.SS "template<class Object_type , class String_type > const Object_type::value_type::Value_type& json_spirit::find_value (const Object_type & obj, const String_type & name)"

.PP
Definition at line 47 of file json_spirit_utils\&.h\&.
.SS "std::string json_spirit::get_str (std::string::const_iterator begin, std::string::const_iterator end)\fC [inline]\fP"

.PP
Definition at line 172 of file json_spirit_reader_template\&.h\&.
.SS "std::wstring json_spirit::get_str (std::wstring::const_iterator begin, std::wstring::const_iterator end)\fC [inline]\fP"

.PP
Definition at line 177 of file json_spirit_reader_template\&.h\&.
.SS "template<class String_type , class Iter_type > String_type json_spirit::get_str (Iter_type begin, Iter_type end)"

.PP
Definition at line 183 of file json_spirit_reader_template\&.h\&.
.SS "template<class String_type > String_type json_spirit::get_str_ (typename String_type::const_iterator begin, typename String_type::const_iterator end)"

.PP
Definition at line 159 of file json_spirit_reader_template\&.h\&.
.SS "template<class Char_type , class Iter_type > Char_type json_spirit::hex_str_to_char (Iter_type & begin)"

.PP
Definition at line 62 of file json_spirit_reader_template\&.h\&.
.SS "template<class Char_type > Char_type json_spirit::hex_to_num (const Char_type c)"

.PP
Definition at line 53 of file json_spirit_reader_template\&.h\&.
.SS "template<class Iter_type > bool json_spirit::is_eq (Iter_type first, Iter_type last, const char * c_str)"

.PP
Definition at line 40 of file json_spirit_reader_template\&.h\&.
.SS "template<class Obj_t , class Map_t > void json_spirit::map_to_obj (const Map_t & mp_obj, Obj_t & obj)"

.PP
Definition at line 30 of file json_spirit_utils\&.h\&.
.SS "template<class String_type > String_type json_spirit::non_printable_to_string (unsigned int c)"

.PP
Definition at line 29 of file json_spirit_writer_template\&.h\&.
.SS "template<class Obj_t , class Map_t > void json_spirit::obj_to_map (const Obj_t & obj, Map_t & mp_obj)"

.PP
Definition at line 19 of file json_spirit_utils\&.h\&.
.SS "bool json_spirit::read (const std::string & s, \fBValue\fP & value)"

.PP
Definition at line 11 of file json_spirit_reader\&.cpp\&.
.SS "bool json_spirit::read (std::istream & is, \fBValue\fP & value)"

.PP
Definition at line 21 of file json_spirit_reader\&.cpp\&.
.SS "bool json_spirit::read (std::string::const_iterator & begin, std::string::const_iterator end, \fBValue\fP & value)"

.PP
Definition at line 31 of file json_spirit_reader\&.cpp\&.
.SS "bool json_spirit::read (const std::wstring & s, \fBwValue\fP & value)"

.PP
Definition at line 43 of file json_spirit_reader\&.cpp\&.
.SS "bool json_spirit::read (std::wistream & is, \fBwValue\fP & value)"

.PP
Definition at line 53 of file json_spirit_reader\&.cpp\&.
.SS "bool json_spirit::read (std::wstring::const_iterator & begin, std::wstring::const_iterator end, \fBwValue\fP & value)"

.PP
Definition at line 63 of file json_spirit_reader\&.cpp\&.
.SS "bool json_spirit::read (const std::string & s, \fBmValue\fP & value)"

.PP
Definition at line 75 of file json_spirit_reader\&.cpp\&.
.SS "bool json_spirit::read (std::istream & is, \fBmValue\fP & value)"

.PP
Definition at line 85 of file json_spirit_reader\&.cpp\&.
.SS "bool json_spirit::read (std::string::const_iterator & begin, std::string::const_iterator end, \fBmValue\fP & value)"

.PP
Definition at line 95 of file json_spirit_reader\&.cpp\&.
.SS "bool json_spirit::read (const std::wstring & s, \fBwmValue\fP & value)"

.PP
Definition at line 107 of file json_spirit_reader\&.cpp\&.
.SS "bool json_spirit::read (std::wistream & is, \fBwmValue\fP & value)"

.PP
Definition at line 117 of file json_spirit_reader\&.cpp\&.
.SS "bool json_spirit::read (std::wstring::const_iterator & begin, std::wstring::const_iterator end, \fBwmValue\fP & value)"

.PP
Definition at line 127 of file json_spirit_reader\&.cpp\&.
.SS "void json_spirit::read_or_throw (const std::string & s, \fBValue\fP & value)"

.PP
Definition at line 16 of file json_spirit_reader\&.cpp\&.
.SS "void json_spirit::read_or_throw (std::istream & is, \fBValue\fP & value)"

.PP
Definition at line 26 of file json_spirit_reader\&.cpp\&.
.SS "void json_spirit::read_or_throw (std::string::const_iterator & begin, std::string::const_iterator end, \fBValue\fP & value)"

.PP
Definition at line 36 of file json_spirit_reader\&.cpp\&.
.SS "void json_spirit::read_or_throw (const std::wstring & s, \fBwValue\fP & value)"

.PP
Definition at line 48 of file json_spirit_reader\&.cpp\&.
.SS "void json_spirit::read_or_throw (std::wistream & is, \fBwValue\fP & value)"

.PP
Definition at line 58 of file json_spirit_reader\&.cpp\&.
.SS "void json_spirit::read_or_throw (std::wstring::const_iterator & begin, std::wstring::const_iterator end, \fBwValue\fP & value)"

.PP
Definition at line 68 of file json_spirit_reader\&.cpp\&.
.SS "void json_spirit::read_or_throw (const std::string & s, \fBmValue\fP & value)"

.PP
Definition at line 80 of file json_spirit_reader\&.cpp\&.
.SS "void json_spirit::read_or_throw (std::istream & is, \fBmValue\fP & value)"

.PP
Definition at line 90 of file json_spirit_reader\&.cpp\&.
.SS "void json_spirit::read_or_throw (std::string::const_iterator & begin, std::string::const_iterator end, \fBmValue\fP & value)"

.PP
Definition at line 100 of file json_spirit_reader\&.cpp\&.
.SS "void json_spirit::read_or_throw (const std::wstring & s, \fBwmValue\fP & value)"

.PP
Definition at line 112 of file json_spirit_reader\&.cpp\&.
.SS "void json_spirit::read_or_throw (std::wistream & is, \fBwmValue\fP & value)"

.PP
Definition at line 122 of file json_spirit_reader\&.cpp\&.
.SS "void json_spirit::read_or_throw (std::wstring::const_iterator & begin, std::wstring::const_iterator end, \fBwmValue\fP & value)"

.PP
Definition at line 132 of file json_spirit_reader\&.cpp\&.
.SS "template<class Iter_type , class Value_type > bool json_spirit::read_range (Iter_type & begin, Iter_type end, \fBValue_type\fP & value)"

.PP
Definition at line 548 of file json_spirit_reader_template\&.h\&.
.SS "template<class Iter_type , class Value_type > Iter_type json_spirit::read_range_or_throw (Iter_type begin, Iter_type end, \fBValue_type\fP & value)"

.PP
Definition at line 518 of file json_spirit_reader_template\&.h\&.
.SS "template<class Istream_type , class Value_type > bool json_spirit::read_stream (Istream_type & is, \fBValue_type\fP & value)"

.PP
Definition at line 596 of file json_spirit_reader_template\&.h\&.
.SS "template<class Istream_type , class Value_type > void json_spirit::read_stream_or_throw (Istream_type & is, \fBValue_type\fP & value)"

.PP
Definition at line 604 of file json_spirit_reader_template\&.h\&.
.SS "template<class String_type , class Value_type > bool json_spirit::read_string (const String_type & s, \fBValue_type\fP & value)"

.PP
Definition at line 569 of file json_spirit_reader_template\&.h\&.
.SS "template<class String_type , class Value_type > void json_spirit::read_string_or_throw (const String_type & s, \fBValue_type\fP & value)"

.PP
Definition at line 563 of file json_spirit_reader_template\&.h\&.
.SS "template<class String_type > String_type json_spirit::substitute_esc_chars (typename String_type::const_iterator begin, typename String_type::const_iterator end)"

.PP
Definition at line 123 of file json_spirit_reader_template\&.h\&.
.SS "template<typename Iter_type > void json_spirit::throw_error (spirit_namespace::position_iterator< Iter_type > i, const std::string & reason)"

.PP
Definition at line 356 of file json_spirit_reader_template\&.h\&.
.SS "template<typename Iter_type > void json_spirit::throw_error (Iter_type i, const std::string & reason)"

.PP
Definition at line 362 of file json_spirit_reader_template\&.h\&.
.SS "char json_spirit::to_hex_char (unsigned int c)\fC [inline]\fP"

.PP
Definition at line 17 of file json_spirit_writer_template\&.h\&.
.SS "template<class String_type > String_type json_spirit::to_str (const char * c_str)"

.PP
Definition at line 456 of file json_spirit_value\&.h\&.
.SS "template<class Char_type , class Iter_type > Char_type json_spirit::unicode_str_to_char (Iter_type & begin)"

.PP
Definition at line 71 of file json_spirit_reader_template\&.h\&.
.SS "void json_spirit::write (const \fBValue\fP & value, std::ostream & os)"

.PP
Definition at line 9 of file json_spirit_writer\&.cpp\&.
.SS "std::wstring json_spirit::write (const \fBValue\fP & value)"

.PP
Definition at line 19 of file json_spirit_writer\&.cpp\&.
.SS "void json_spirit::write (const \fBwValue\fP & value, std::wostream & os)"

.PP
Definition at line 31 of file json_spirit_writer\&.cpp\&.
.SS "void json_spirit::write (const \fBmValue\fP & value, std::ostream & os)"

.PP
Definition at line 53 of file json_spirit_writer\&.cpp\&.
.SS "std::wstring json_spirit::write (const \fBmValue\fP & value)"

.PP
Definition at line 63 of file json_spirit_writer\&.cpp\&.
.SS "void json_spirit::write (const \fBwmValue\fP & value, std::wostream & os)"

.PP
Definition at line 75 of file json_spirit_writer\&.cpp\&.
.SS "void json_spirit::write_formatted (const \fBValue\fP & value, std::ostream & os)"

.PP
Definition at line 14 of file json_spirit_writer\&.cpp\&.
.SS "std::wstring json_spirit::write_formatted (const \fBValue\fP & value)"

.PP
Definition at line 24 of file json_spirit_writer\&.cpp\&.
.SS "void json_spirit::write_formatted (const \fBwValue\fP & value, std::wostream & os)"

.PP
Definition at line 36 of file json_spirit_writer\&.cpp\&.
.SS "void json_spirit::write_formatted (const \fBmValue\fP & value, std::ostream & os)"

.PP
Definition at line 58 of file json_spirit_writer\&.cpp\&.
.SS "std::wstring json_spirit::write_formatted (const \fBmValue\fP & value)"

.PP
Definition at line 68 of file json_spirit_writer\&.cpp\&.
.SS "void json_spirit::write_formatted (const \fBwmValue\fP & value, std::wostream & os)"

.PP
Definition at line 80 of file json_spirit_writer\&.cpp\&.
.SS "template<class Value_type , class Ostream_type > void json_spirit::write_stream (const \fBValue_type\fP & value, Ostream_type & os, bool pretty)"

.PP
Definition at line 231 of file json_spirit_writer_template\&.h\&.
.SS "template<class Value_type > Value_type::String_type json_spirit::write_string (const \fBValue_type\fP & value, bool pretty)"

.PP
Definition at line 237 of file json_spirit_writer_template\&.h\&.
.SH "Variable Documentation"
.PP 
.SS "const spirit_namespace::int_parser< \fBint64_t\fP > json_spirit::int64_p = spirit_namespace::int_parser < \fBint64_t\fP >()"

.PP
Definition at line 36 of file json_spirit_reader_template\&.h\&.
.SS "const spirit_namespace::uint_parser< \fBuint64_t\fP > json_spirit::uint64_p = spirit_namespace::uint_parser< \fBuint64_t\fP >()"

.PP
Definition at line 37 of file json_spirit_reader_template\&.h\&.
.SH "Author"
.PP 
Generated automatically by Doxygen for darksilk from the source code\&.
