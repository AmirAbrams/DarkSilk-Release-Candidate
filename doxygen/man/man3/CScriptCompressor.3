.TH "CScriptCompressor" 3 "Wed Feb 10 2016" "Version 1.0.0.0" "darksilk" \" -*- nroff -*-
.ad l
.nh
.SH NAME
CScriptCompressor \- 
.SH SYNOPSIS
.br
.PP
.PP
\fC#include <compressor\&.h>\fP
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBCScriptCompressor\fP (\fBCScript\fP &scriptIn)"
.br
.ti -1c
.RI "unsigned int \fBGetSerializeSize\fP (int nType, int nVersion) const "
.br
.ti -1c
.RI "template<typename Stream > void \fBSerialize\fP (Stream &s, int nType, int nVersion) const "
.br
.ti -1c
.RI "template<typename Stream > void \fBUnserialize\fP (Stream &s, int nType, int nVersion)"
.br
.in -1c
.SS "Protected Member Functions"

.in +1c
.ti -1c
.RI "bool \fBIsToKeyID\fP (\fBCKeyID\fP &\fBhash\fP) const "
.br
.ti -1c
.RI "bool \fBIsToScriptID\fP (\fBCScriptID\fP &\fBhash\fP) const "
.br
.ti -1c
.RI "bool \fBIsToPubKey\fP (\fBCPubKey\fP &pubkey) const "
.br
.ti -1c
.RI "bool \fBCompress\fP (std::vector< unsigned char > &out) const "
.br
.ti -1c
.RI "unsigned int \fBGetSpecialSize\fP (unsigned int nSize) const "
.br
.ti -1c
.RI "bool \fBDecompress\fP (unsigned int nSize, const std::vector< unsigned char > &out)"
.br
.in -1c
.SH "Detailed Description"
.PP 
Compact serializer for scripts\&.
.PP
It detects common cases and encodes them much more efficiently\&. 3 special cases are defined:
.IP "\(bu" 2
Pay to pubkey hash (encoded as 21 bytes)
.IP "\(bu" 2
Pay to script hash (encoded as 21 bytes)
.IP "\(bu" 2
Pay to pubkey starting with 0x02, 0x03 or 0x04 (encoded as 33 bytes)
.PP
.PP
Other scripts up to 121 bytes require 1 byte + script length\&. Above that, scripts up to 16505 bytes require 2 bytes + script length\&. 
.PP
Definition at line 27 of file compressor\&.h\&.
.SH "Constructor & Destructor Documentation"
.PP 
.SS "CScriptCompressor::CScriptCompressor (\fBCScript\fP & scriptIn)\fC [inline]\fP"

.PP
Definition at line 55 of file compressor\&.h\&.
.SH "Member Function Documentation"
.PP 
.SS "bool CScriptCompressor::Compress (std::vector< unsigned char > & out) const\fC [protected]\fP"

.PP
Definition at line 47 of file compressor\&.cpp\&.
.SS "bool CScriptCompressor::Decompress (unsigned int nSize, const std::vector< unsigned char > & out)\fC [protected]\fP"

.PP
Definition at line 87 of file compressor\&.cpp\&.
.SS "unsigned int CScriptCompressor::GetSerializeSize (int nType, int nVersion) const\fC [inline]\fP"

.PP
Definition at line 57 of file compressor\&.h\&.
.SS "unsigned int CScriptCompressor::GetSpecialSize (unsigned int nSize) const\fC [protected]\fP"

.PP
Definition at line 78 of file compressor\&.cpp\&.
.SS "bool CScriptCompressor::IsToKeyID (\fBCKeyID\fP & hash) const\fC [protected]\fP"
These check for scripts for which a special case with a shorter encoding is defined\&. They are implemented separately from the \fBCScript\fP test, as these test for exact byte sequence correspondences, and are more strict\&. For example, IsToPubKey also verifies whether the public key is valid (as invalid ones cannot be represented in compressed form)\&. 
.PP
Definition at line 11 of file compressor\&.cpp\&.
.SS "bool CScriptCompressor::IsToPubKey (\fBCPubKey\fP & pubkey) const\fC [protected]\fP"

.PP
Definition at line 32 of file compressor\&.cpp\&.
.SS "bool CScriptCompressor::IsToScriptID (\fBCScriptID\fP & hash) const\fC [protected]\fP"

.PP
Definition at line 22 of file compressor\&.cpp\&.
.SS "template<typename Stream > void CScriptCompressor::Serialize (Stream & s, int nType, int nVersion) const\fC [inline]\fP"

.PP
Definition at line 66 of file compressor\&.h\&.
.SS "template<typename Stream > void CScriptCompressor::Unserialize (Stream & s, int nType, int nVersion)\fC [inline]\fP"

.PP
Definition at line 78 of file compressor\&.h\&.

.SH "Author"
.PP 
Generated automatically by Doxygen for darksilk from the source code\&.
